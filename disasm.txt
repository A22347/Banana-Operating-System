
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 fb 6a 00 00       	call   c0006b1b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b5 c7 01 00       	call   c001c7da <_init>
c0000025:	c3                   	ret    
c0000026:	bb 86 d2 01 c0       	mov    ebx,0xc001d286
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 94 d2 01 c0    	cmp    ebx,0xc001d294
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 fe 01 c0       	mov    eax,0xc001fe98
c0000049:	3d 98 fe 01 c0       	cmp    eax,0xc001fe98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 fe 01 c0       	push   0xc001fe98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 fe 01 c0       	mov    eax,0xc001fe98
c0000075:	2d 98 fe 01 c0       	sub    eax,0xc001fe98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 fe 01 c0       	push   0xc001fe98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 00 02 c0 00 	cmp    BYTE PTR ds:0xc0020020,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 9c d2 01 c0       	mov    ebx,0xc001d29c
c00000bb:	81 eb 98 d2 01 c0    	sub    ebx,0xc001d298
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 98 d2 01 c0       	mov    esi,0xc001d298
c00000ca:	a1 24 00 02 c0       	mov    eax,ds:0xc0020024
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 00 02 c0       	mov    ds:0xc0020024,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 00 02 c0       	mov    eax,ds:0xc0020024
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 fe 01 c0       	push   0xc001fe98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 00 02 c0 01 	mov    BYTE PTR ds:0xc0020020,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 00 02 c0       	push   0xc0020028
c000012c:	68 98 fe 01 c0       	push   0xc001fe98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 1c 1f 01 00       	call   c00121ec <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 0c 93 00 00       	call   c00095f4 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 fa 1e 01 00       	call   c00121ec <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 bb 23 01 00       	call   c00126cc <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 fe 29 01 00       	call   c0012d18 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 70 04 02 c0 	lgdtd  ds:0xc0020470
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 60 56 00 00       	jmp    c0005a02 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 40 00 02 c0       	mov    ds:0xc0020040,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 40 00 02 c0    	mov    DWORD PTR ds:0xc0020040,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 40 00 02 c0    	mov    ebx,DWORD PTR ds:0xc0020040
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 a0 d2 01 c0 02 	test   BYTE PTR [edx-0x3ffe2d60],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 a0 d2 01 c0 01 	test   BYTE PTR [edx-0x3ffe2d60],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 a0 d2 01 c0 08 	test   BYTE PTR [edx-0x3ffe2d60],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 a0 d2 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2d60],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 a0 d2 01 c0 01 	test   BYTE PTR [edx-0x3ffe2d60],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d 60 00 02 c0    	mov    ecx,DWORD PTR ds:0xc0020060
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d 60 00 02 c0    	mov    DWORD PTR ds:0xc0020060,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 64 00 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdff9c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 64 00 02 c0 	mov    DWORD PTR [eax*4-0x3ffdff9c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d 60 00 02 c0    	mov    DWORD PTR ds:0xc0020060,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 8c 00 02 c0    	cmp    DWORD PTR ds:0xc002008c,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d 9c 00 02 c0    	mov    ecx,DWORD PTR ds:0xc002009c
c0000b90:	c7 42 0c 94 00 02 c0 	mov    DWORD PTR [edx+0xc],0xc0020094
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 9c 00 02 c0    	mov    DWORD PTR ds:0xc002009c,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 8c 00 02 c0    	mov    DWORD PTR ds:0xc002008c,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 60 00 02 c0 02 	test   BYTE PTR ds:0xc0020060,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 bb 5c 00 00       	call   c000692c <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 fd 5b 00 00       	call   c000692c <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 e7 5b 00 00       	call   c000692c <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 c3 5b 00 00       	call   c000692c <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d 60 00 02 c0    	mov    edi,DWORD PTR ds:0xc0020060
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 64 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff9c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 64 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdff9c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 94 00 02 c0 	lea    edx,[eax*8-0x3ffdff6c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d a0 00 02 c0    	mov    ebx,DWORD PTR ds:0xc00200a0
c0000f12:	81 fb 94 00 02 c0    	cmp    ebx,0xc0020094
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d 94 00 02 c0       	cmp    eax,0xc0020094
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d 90 00 02 c0    	cmp    DWORD PTR ds:0xc0020090,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 9c 00 02 c0       	mov    ds:0xc002009c,eax
c0000f4e:	a3 a0 00 02 c0       	mov    ds:0xc00200a0,eax
c0000f53:	a3 90 00 02 c0       	mov    ds:0xc0020090,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 94 00 02 c0 	mov    DWORD PTR [eax+0x8],0xc0020094
c0000f61:	c7 40 0c 94 00 02 c0 	mov    DWORD PTR [eax+0xc],0xc0020094
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 a0 00 02 c0       	mov    ds:0xc00200a0,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 94 00 02 c0 	mov    DWORD PTR [eax+0x8],0xc0020094
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 58 00 02 c0 	lea    ebp,[edx*4-0x3ffdffa8]
c0000fb2:	8b 14 95 60 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdffa0]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 60 00 02 c0 	lea    ecx,[edx*4-0x3ffdffa0]
c0000fcd:	8b 14 95 60 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdffa0]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd 94 03 02 c0 	or     DWORD PTR [edi*4-0x3ffdfc6c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 94 00 02 c0 	lea    eax,[eax*8-0x3ffdff6c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d 9c 00 02 c0    	mov    DWORD PTR ds:0xc002009c,ecx
c0001087:	89 0d a0 00 02 c0    	mov    DWORD PTR ds:0xc00200a0,ecx
c000108d:	c7 41 08 94 00 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0020094
c0001094:	c7 41 0c 94 00 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0020094
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd 8c 00 02 c0 	lea    edx,[ecx*8-0x3ffdff74]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d 94 03 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfc6c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d 94 03 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfc6c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 8c 00 02 c0 	lea    edx,[eax*4-0x3ffdff74]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d 94 03 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfc6c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d 9c 00 02 c0    	mov    DWORD PTR ds:0xc002009c,edi
c000115a:	89 3d a0 00 02 c0    	mov    DWORD PTR ds:0xc00200a0,edi
c0001160:	c7 47 08 94 00 02 c0 	mov    DWORD PTR [edi+0x8],0xc0020094
c0001167:	c7 47 0c 94 00 02 c0 	mov    DWORD PTR [edi+0xc],0xc0020094
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d 90 00 02 c0    	mov    DWORD PTR ds:0xc0020090,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 8c 00 02 c0       	mov    eax,ds:0xc002008c
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d 8c 00 02 c0    	mov    DWORD PTR ds:0xc002008c,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba 60 00 02 c0       	mov    edx,0xc0020060
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d 60 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020060,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 60 00 02 c0       	mov    eax,0xc0020060
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d b4 03 02 c0    	mov    ebx,DWORD PTR ds:0xc00203b4
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 b4 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00203b4,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d b4 03 02 c0    	mov    DWORD PTR ds:0xc00203b4,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 8c 00 02 c0    	cmp    DWORD PTR ds:0xc002008c,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d 8c 00 02 c0    	mov    DWORD PTR ds:0xc002008c,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d 60 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020060,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 bc 03 02 c0    	push   DWORD PTR ds:0xc00203bc
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d 60 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020060,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 bc 03 02 c0       	mov    eax,ds:0xc00203bc
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 60 00 02 c0       	mov    eax,0xc0020060
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d 8c 00 02 c0 00 	cmp    DWORD PTR ds:0xc002008c,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 60 00 02 c0       	mov    eax,0xc0020060
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 8c 00 02 c0       	mov    eax,ds:0xc002008c
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 64 00 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdff9c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 94 00 02 c0       	mov    eax,0xc0020094
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d 8c 03 02 c0       	cmp    eax,0xc002038c
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 c8 03 02 c0       	mov    eax,ds:0xc00203c8
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 b0 03 02 c0    	mov    esi,DWORD PTR ds:0xc00203b0
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 c4 03 02 c0    	mov    esi,DWORD PTR ds:0xc00203c4
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 d4 03 02 c0    	mov    esi,DWORD PTR ds:0xc00203d4
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 60 00 02 c0       	mov    eax,0xc0020060
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 a4 d3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2c5c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 60 00 02 c0       	mov    eax,ds:0xc0020060
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 60 00 02 c0       	mov    ds:0xc0020060,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d a4 03 02 c0    	mov    DWORD PTR ds:0xc00203a4,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d a8 03 02 c0    	mov    DWORD PTR ds:0xc00203a8,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d ac 03 02 c0    	mov    DWORD PTR ds:0xc00203ac,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 b4 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00203b4,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 00 3b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc500]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 92 55 01 00       	jmp    c0016edc <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 00 3b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc500]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 bc 55 01 00       	jmp    c0016f1c <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 00 3b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc500]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 dd 55 01 00       	jmp    c0016f5c <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <st_word>:
c00019a4:	66 89 10             	mov    WORD PTR [eax],dx
c00019a7:	c3                   	ret    

c00019a8 <st_dword>:
c00019a8:	89 10                	mov    DWORD PTR [eax],edx
c00019aa:	c3                   	ret    

c00019ab <mem_cpy>:
c00019ab:	85 c9                	test   ecx,ecx
c00019ad:	74 10                	je     c00019bf <mem_cpy+0x14>
c00019af:	57                   	push   edi
c00019b0:	01 c1                	add    ecx,eax
c00019b2:	56                   	push   esi
c00019b3:	89 c7                	mov    edi,eax
c00019b5:	89 d6                	mov    esi,edx
c00019b7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00019b8:	39 f9                	cmp    ecx,edi
c00019ba:	75 fb                	jne    c00019b7 <mem_cpy+0xc>
c00019bc:	5e                   	pop    esi
c00019bd:	5f                   	pop    edi
c00019be:	c3                   	ret    
c00019bf:	c3                   	ret    

c00019c0 <mem_set>:
c00019c0:	01 c1                	add    ecx,eax
c00019c2:	40                   	inc    eax
c00019c3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c00019c6:	39 c8                	cmp    eax,ecx
c00019c8:	75 f8                	jne    c00019c2 <mem_set+0x2>
c00019ca:	c3                   	ret    

c00019cb <mem_cmp>:
c00019cb:	57                   	push   edi
c00019cc:	56                   	push   esi
c00019cd:	89 c6                	mov    esi,eax
c00019cf:	53                   	push   ebx
c00019d0:	46                   	inc    esi
c00019d1:	42                   	inc    edx
c00019d2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00019d6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00019da:	29 fb                	sub    ebx,edi
c00019dc:	89 cf                	mov    edi,ecx
c00019de:	29 f7                	sub    edi,esi
c00019e0:	01 c7                	add    edi,eax
c00019e2:	74 04                	je     c00019e8 <mem_cmp+0x1d>
c00019e4:	85 db                	test   ebx,ebx
c00019e6:	74 e8                	je     c00019d0 <mem_cmp+0x5>
c00019e8:	89 d8                	mov    eax,ebx
c00019ea:	5b                   	pop    ebx
c00019eb:	5e                   	pop    esi
c00019ec:	5f                   	pop    edi
c00019ed:	c3                   	ret    

c00019ee <chk_chr>:
c00019ee:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00019f1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00019f4:	74 07                	je     c00019fd <chk_chr+0xf>
c00019f6:	39 d1                	cmp    ecx,edx
c00019f8:	74 03                	je     c00019fd <chk_chr+0xf>
c00019fa:	40                   	inc    eax
c00019fb:	eb f1                	jmp    c00019ee <chk_chr>
c00019fd:	89 c8                	mov    eax,ecx
c00019ff:	c3                   	ret    

c0001a00 <dbc_1st>:
c0001a00:	31 c0                	xor    eax,eax
c0001a02:	c3                   	ret    

c0001a03 <dbc_2nd>:
c0001a03:	31 c0                	xor    eax,eax
c0001a05:	c3                   	ret    

c0001a06 <tchar2uni>:
c0001a06:	57                   	push   edi
c0001a07:	89 c7                	mov    edi,eax
c0001a09:	56                   	push   esi
c0001a0a:	53                   	push   ebx
c0001a0b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a0d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a0f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a12:	84 c9                	test   cl,cl
c0001a14:	78 0a                	js     c0001a20 <tchar2uni+0x1a>
c0001a16:	0f b6 d1             	movzx  edx,cl
c0001a19:	89 f3                	mov    ebx,esi
c0001a1b:	e9 9f 00 00 00       	jmp    c0001abf <tchar2uni+0xb9>
c0001a20:	88 ca                	mov    dl,cl
c0001a22:	83 e2 e0             	and    edx,0xffffffe0
c0001a25:	80 fa c0             	cmp    dl,0xc0
c0001a28:	75 0c                	jne    c0001a36 <tchar2uni+0x30>
c0001a2a:	89 ca                	mov    edx,ecx
c0001a2c:	b9 01 00 00 00       	mov    ecx,0x1
c0001a31:	83 e2 1f             	and    edx,0x1f
c0001a34:	eb 2e                	jmp    c0001a64 <tchar2uni+0x5e>
c0001a36:	88 ca                	mov    dl,cl
c0001a38:	83 e2 f0             	and    edx,0xfffffff0
c0001a3b:	80 fa e0             	cmp    dl,0xe0
c0001a3e:	75 0c                	jne    c0001a4c <tchar2uni+0x46>
c0001a40:	89 ca                	mov    edx,ecx
c0001a42:	b9 02 00 00 00       	mov    ecx,0x2
c0001a47:	83 e2 0f             	and    edx,0xf
c0001a4a:	eb 18                	jmp    c0001a64 <tchar2uni+0x5e>
c0001a4c:	88 ca                	mov    dl,cl
c0001a4e:	83 e2 f8             	and    edx,0xfffffff8
c0001a51:	88 d0                	mov    al,dl
c0001a53:	83 ca ff             	or     edx,0xffffffff
c0001a56:	3c f0                	cmp    al,0xf0
c0001a58:	75 6c                	jne    c0001ac6 <tchar2uni+0xc0>
c0001a5a:	89 ca                	mov    edx,ecx
c0001a5c:	b9 03 00 00 00       	mov    ecx,0x3
c0001a61:	83 e2 07             	and    edx,0x7
c0001a64:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001a68:	46                   	inc    esi
c0001a69:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001a6c:	88 c8                	mov    al,cl
c0001a6e:	83 e0 c0             	and    eax,0xffffffc0
c0001a71:	3c 80                	cmp    al,0x80
c0001a73:	75 4e                	jne    c0001ac3 <tchar2uni+0xbd>
c0001a75:	c1 e2 06             	shl    edx,0x6
c0001a78:	83 e1 3f             	and    ecx,0x3f
c0001a7b:	09 ca                	or     edx,ecx
c0001a7d:	39 de                	cmp    esi,ebx
c0001a7f:	75 e7                	jne    c0001a68 <tchar2uni+0x62>
c0001a81:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001a84:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001a8a:	77 37                	ja     c0001ac3 <tchar2uni+0xbd>
c0001a8c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001a92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001a98:	76 29                	jbe    c0001ac3 <tchar2uni+0xbd>
c0001a9a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001aa0:	76 1d                	jbe    c0001abf <tchar2uni+0xb9>
c0001aa2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001aa8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001aae:	c1 e1 06             	shl    ecx,0x6
c0001ab1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ab7:	09 ca                	or     edx,ecx
c0001ab9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001abf:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ac1:	eb 03                	jmp    c0001ac6 <tchar2uni+0xc0>
c0001ac3:	83 ca ff             	or     edx,0xffffffff
c0001ac6:	5b                   	pop    ebx
c0001ac7:	89 d0                	mov    eax,edx
c0001ac9:	5e                   	pop    esi
c0001aca:	5f                   	pop    edi
c0001acb:	c3                   	ret    

c0001acc <put_utf>:
c0001acc:	53                   	push   ebx
c0001acd:	83 f8 7f             	cmp    eax,0x7f
c0001ad0:	89 c3                	mov    ebx,eax
c0001ad2:	b0 00                	mov    al,0x0
c0001ad4:	77 11                	ja     c0001ae7 <put_utf+0x1b>
c0001ad6:	85 c9                	test   ecx,ecx
c0001ad8:	0f 84 e5 00 00 00    	je     c0001bc3 <put_utf+0xf7>
c0001ade:	88 1a                	mov    BYTE PTR [edx],bl
c0001ae0:	b0 01                	mov    al,0x1
c0001ae2:	e9 dc 00 00 00       	jmp    c0001bc3 <put_utf+0xf7>
c0001ae7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001aed:	77 23                	ja     c0001b12 <put_utf+0x46>
c0001aef:	83 f9 01             	cmp    ecx,0x1
c0001af2:	0f 86 cb 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001af8:	89 d8                	mov    eax,ebx
c0001afa:	83 e3 3f             	and    ebx,0x3f
c0001afd:	c1 e8 06             	shr    eax,0x6
c0001b00:	83 cb 80             	or     ebx,0xffffff80
c0001b03:	83 c8 c0             	or     eax,0xffffffc0
c0001b06:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b09:	88 02                	mov    BYTE PTR [edx],al
c0001b0b:	b0 02                	mov    al,0x2
c0001b0d:	e9 b1 00 00 00       	jmp    c0001bc3 <put_utf+0xf7>
c0001b12:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b18:	77 40                	ja     c0001b5a <put_utf+0x8e>
c0001b1a:	83 f9 02             	cmp    ecx,0x2
c0001b1d:	0f 86 a0 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001b23:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b29:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b2f:	0f 86 8e 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001b35:	89 d8                	mov    eax,ebx
c0001b37:	c1 e8 0c             	shr    eax,0xc
c0001b3a:	83 c8 e0             	or     eax,0xffffffe0
c0001b3d:	88 02                	mov    BYTE PTR [edx],al
c0001b3f:	89 d8                	mov    eax,ebx
c0001b41:	83 e3 3f             	and    ebx,0x3f
c0001b44:	c1 e8 06             	shr    eax,0x6
c0001b47:	83 cb 80             	or     ebx,0xffffff80
c0001b4a:	83 e0 3f             	and    eax,0x3f
c0001b4d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001b50:	83 c8 80             	or     eax,0xffffff80
c0001b53:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001b56:	b0 03                	mov    al,0x3
c0001b58:	eb 69                	jmp    c0001bc3 <put_utf+0xf7>
c0001b5a:	83 f9 03             	cmp    ecx,0x3
c0001b5d:	76 64                	jbe    c0001bc3 <put_utf+0xf7>
c0001b5f:	89 d9                	mov    ecx,ebx
c0001b61:	0f b7 c3             	movzx  eax,bx
c0001b64:	66 31 c9             	xor    cx,cx
c0001b67:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001b6d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001b73:	c1 e9 06             	shr    ecx,0x6
c0001b76:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001b7c:	77 43                	ja     c0001bc1 <put_utf+0xf5>
c0001b7e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001b84:	77 3b                	ja     c0001bc1 <put_utf+0xf5>
c0001b86:	09 cb                	or     ebx,ecx
c0001b88:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001b8e:	89 d8                	mov    eax,ebx
c0001b90:	c1 e8 12             	shr    eax,0x12
c0001b93:	83 c8 f0             	or     eax,0xfffffff0
c0001b96:	88 02                	mov    BYTE PTR [edx],al
c0001b98:	89 d8                	mov    eax,ebx
c0001b9a:	c1 e8 0c             	shr    eax,0xc
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	83 c8 80             	or     eax,0xffffff80
c0001ba3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba6:	89 d8                	mov    eax,ebx
c0001ba8:	83 e3 3f             	and    ebx,0x3f
c0001bab:	c1 e8 06             	shr    eax,0x6
c0001bae:	83 cb 80             	or     ebx,0xffffff80
c0001bb1:	83 e0 3f             	and    eax,0x3f
c0001bb4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001bb7:	83 c8 80             	or     eax,0xffffff80
c0001bba:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001bbd:	b0 04                	mov    al,0x4
c0001bbf:	eb 02                	jmp    c0001bc3 <put_utf+0xf7>
c0001bc1:	31 c0                	xor    eax,eax
c0001bc3:	5b                   	pop    ebx
c0001bc4:	c3                   	ret    

c0001bc5 <clst2sect>:
c0001bc5:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001bc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001bcb:	83 ea 02             	sub    edx,0x2
c0001bce:	39 ca                	cmp    edx,ecx
c0001bd0:	76 0d                	jbe    c0001bdf <clst2sect+0x1a>
c0001bd2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001bd6:	0f af d1             	imul   edx,ecx
c0001bd9:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001bdc:	89 d0                	mov    eax,edx
c0001bde:	c3                   	ret    
c0001bdf:	31 c0                	xor    eax,eax
c0001be1:	c3                   	ret    

c0001be2 <pick_lfn>:
c0001be2:	55                   	push   ebp
c0001be3:	57                   	push   edi
c0001be4:	56                   	push   esi
c0001be5:	89 d6                	mov    esi,edx
c0001be7:	53                   	push   ebx
c0001be8:	89 c3                	mov    ebx,eax
c0001bea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001bed:	e8 8d fd ff ff       	call   c000197f <ld_word>
c0001bf2:	66 85 c0             	test   ax,ax
c0001bf5:	74 04                	je     c0001bfb <pick_lfn+0x19>
c0001bf7:	31 c0                	xor    eax,eax
c0001bf9:	eb 5c                	jmp    c0001c57 <pick_lfn+0x75>
c0001bfb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001bfe:	bd 01 00 00 00       	mov    ebp,0x1
c0001c03:	83 e1 bf             	and    ecx,0xffffffbf
c0001c06:	31 ff                	xor    edi,edi
c0001c08:	49                   	dec    ecx
c0001c09:	6b c9 0d             	imul   ecx,ecx,0xd
c0001c0c:	0f b6 87 00 d5 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2b00]
c0001c13:	01 f0                	add    eax,esi
c0001c15:	e8 65 fd ff ff       	call   c000197f <ld_word>
c0001c1a:	66 85 ed             	test   bp,bp
c0001c1d:	74 11                	je     c0001c30 <pick_lfn+0x4e>
c0001c1f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001c25:	77 d0                	ja     c0001bf7 <pick_lfn+0x15>
c0001c27:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001c2b:	89 c5                	mov    ebp,eax
c0001c2d:	41                   	inc    ecx
c0001c2e:	eb 04                	jmp    c0001c34 <pick_lfn+0x52>
c0001c30:	66 40                	inc    ax
c0001c32:	75 c3                	jne    c0001bf7 <pick_lfn+0x15>
c0001c34:	47                   	inc    edi
c0001c35:	83 ff 0d             	cmp    edi,0xd
c0001c38:	75 d2                	jne    c0001c0c <pick_lfn+0x2a>
c0001c3a:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001c3d:	74 13                	je     c0001c52 <pick_lfn+0x70>
c0001c3f:	66 85 ed             	test   bp,bp
c0001c42:	74 0e                	je     c0001c52 <pick_lfn+0x70>
c0001c44:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001c4a:	77 ab                	ja     c0001bf7 <pick_lfn+0x15>
c0001c4c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001c52:	b8 01 00 00 00       	mov    eax,0x1
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	5f                   	pop    edi
c0001c5a:	5d                   	pop    ebp
c0001c5b:	c3                   	ret    

c0001c5c <put_lfn>:
c0001c5c:	55                   	push   ebp
c0001c5d:	31 ed                	xor    ebp,ebp
c0001c5f:	57                   	push   edi
c0001c60:	89 d7                	mov    edi,edx
c0001c62:	56                   	push   esi
c0001c63:	31 f6                	xor    esi,esi
c0001c65:	53                   	push   ebx
c0001c66:	83 ec 08             	sub    esp,0x8
c0001c69:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c6c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001c74:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001c7a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001c7d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c80:	31 d2                	xor    edx,edx
c0001c82:	e8 1d fd ff ff       	call   c00019a4 <st_word>
c0001c87:	0f b6 d9             	movzx  ebx,cl
c0001c8a:	4b                   	dec    ebx
c0001c8b:	6b db 0d             	imul   ebx,ebx,0xd
c0001c8e:	66 83 fe ff          	cmp    si,0xffff
c0001c92:	74 08                	je     c0001c9c <put_lfn+0x40>
c0001c94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001c97:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001c9b:	43                   	inc    ebx
c0001c9c:	0f b6 85 00 d5 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2b00]
c0001ca3:	0f b7 d6             	movzx  edx,si
c0001ca6:	01 f8                	add    eax,edi
c0001ca8:	e8 f7 fc ff ff       	call   c00019a4 <st_word>
c0001cad:	66 85 f6             	test   si,si
c0001cb0:	75 03                	jne    c0001cb5 <put_lfn+0x59>
c0001cb2:	83 ce ff             	or     esi,0xffffffff
c0001cb5:	45                   	inc    ebp
c0001cb6:	83 fd 0d             	cmp    ebp,0xd
c0001cb9:	75 d3                	jne    c0001c8e <put_lfn+0x32>
c0001cbb:	66 46                	inc    si
c0001cbd:	74 0a                	je     c0001cc9 <put_lfn+0x6d>
c0001cbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001cc2:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001cc7:	75 09                	jne    c0001cd2 <put_lfn+0x76>
c0001cc9:	88 c8                	mov    al,cl
c0001ccb:	83 c8 40             	or     eax,0x40
c0001cce:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001cd2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001cd6:	88 07                	mov    BYTE PTR [edi],al
c0001cd8:	83 c4 08             	add    esp,0x8
c0001cdb:	5b                   	pop    ebx
c0001cdc:	5e                   	pop    esi
c0001cdd:	5f                   	pop    edi
c0001cde:	5d                   	pop    ebp
c0001cdf:	c3                   	ret    

c0001ce0 <gen_numname>:
c0001ce0:	57                   	push   edi
c0001ce1:	89 cf                	mov    edi,ecx
c0001ce3:	56                   	push   esi
c0001ce4:	b9 0b 00 00 00       	mov    ecx,0xb
c0001ce9:	53                   	push   ebx
c0001cea:	89 c6                	mov    esi,eax
c0001cec:	83 ec 10             	sub    esp,0x10
c0001cef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001cf3:	e8 b3 fc ff ff       	call   c00019ab <mem_cpy>
c0001cf8:	83 fb 05             	cmp    ebx,0x5
c0001cfb:	76 2d                	jbe    c0001d2a <gen_numname+0x4a>
c0001cfd:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d00:	66 85 c0             	test   ax,ax
c0001d03:	74 25                	je     c0001d2a <gen_numname+0x4a>
c0001d05:	83 c7 02             	add    edi,0x2
c0001d08:	ba 10 00 00 00       	mov    edx,0x10
c0001d0d:	01 db                	add    ebx,ebx
c0001d0f:	89 c1                	mov    ecx,eax
c0001d11:	66 d1 e8             	shr    ax,1
c0001d14:	83 e1 01             	and    ecx,0x1
c0001d17:	01 cb                	add    ebx,ecx
c0001d19:	0f ba e3 10          	bt     ebx,0x10
c0001d1d:	73 06                	jae    c0001d25 <gen_numname+0x45>
c0001d1f:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001d25:	4a                   	dec    edx
c0001d26:	75 e5                	jne    c0001d0d <gen_numname+0x2d>
c0001d28:	eb d3                	jmp    c0001cfd <gen_numname+0x1d>
c0001d2a:	b8 07 00 00 00       	mov    eax,0x7
c0001d2f:	88 d9                	mov    cl,bl
c0001d31:	83 e1 0f             	and    ecx,0xf
c0001d34:	8d 51 30             	lea    edx,[ecx+0x30]
c0001d37:	80 fa 39             	cmp    dl,0x39
c0001d3a:	76 03                	jbe    c0001d3f <gen_numname+0x5f>
c0001d3c:	8d 51 37             	lea    edx,[ecx+0x37]
c0001d3f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001d42:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001d46:	89 da                	mov    edx,ebx
c0001d48:	c1 ea 04             	shr    edx,0x4
c0001d4b:	83 fb 0f             	cmp    ebx,0xf
c0001d4e:	76 06                	jbe    c0001d56 <gen_numname+0x76>
c0001d50:	89 c8                	mov    eax,ecx
c0001d52:	89 d3                	mov    ebx,edx
c0001d54:	eb d9                	jmp    c0001d2f <gen_numname+0x4f>
c0001d56:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001d5b:	31 d2                	xor    edx,edx
c0001d5d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001d60:	8d 04 16             	lea    eax,[esi+edx*1]
c0001d63:	39 ca                	cmp    edx,ecx
c0001d65:	73 18                	jae    c0001d7f <gen_numname+0x9f>
c0001d67:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d6a:	3c 20                	cmp    al,0x20
c0001d6c:	74 11                	je     c0001d7f <gen_numname+0x9f>
c0001d6e:	e8 8d fc ff ff       	call   c0001a00 <dbc_1st>
c0001d73:	85 c0                	test   eax,eax
c0001d75:	74 05                	je     c0001d7c <gen_numname+0x9c>
c0001d77:	39 d3                	cmp    ebx,edx
c0001d79:	74 04                	je     c0001d7f <gen_numname+0x9f>
c0001d7b:	42                   	inc    edx
c0001d7c:	42                   	inc    edx
c0001d7d:	eb e1                	jmp    c0001d60 <gen_numname+0x80>
c0001d7f:	b0 20                	mov    al,0x20
c0001d81:	83 f9 07             	cmp    ecx,0x7
c0001d84:	77 05                	ja     c0001d8b <gen_numname+0xab>
c0001d86:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001d8a:	41                   	inc    ecx
c0001d8b:	42                   	inc    edx
c0001d8c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001d90:	83 fa 07             	cmp    edx,0x7
c0001d93:	76 ea                	jbe    c0001d7f <gen_numname+0x9f>
c0001d95:	83 c4 10             	add    esp,0x10
c0001d98:	5b                   	pop    ebx
c0001d99:	5e                   	pop    esi
c0001d9a:	5f                   	pop    edi
c0001d9b:	c3                   	ret    

c0001d9c <sum_sfn>:
c0001d9c:	31 c9                	xor    ecx,ecx
c0001d9e:	31 d2                	xor    edx,edx
c0001da0:	d0 ca                	ror    dl,1
c0001da2:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001da5:	41                   	inc    ecx
c0001da6:	83 f9 0b             	cmp    ecx,0xb
c0001da9:	75 f5                	jne    c0001da0 <sum_sfn+0x4>
c0001dab:	88 d0                	mov    al,dl
c0001dad:	c3                   	ret    

c0001dae <get_ldnumber>:
c0001dae:	8b 10                	mov    edx,DWORD PTR [eax]
c0001db0:	85 d2                	test   edx,edx
c0001db2:	74 14                	je     c0001dc8 <get_ldnumber+0x1a>
c0001db4:	56                   	push   esi
c0001db5:	53                   	push   ebx
c0001db6:	89 d3                	mov    ebx,edx
c0001db8:	43                   	inc    ebx
c0001db9:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001dbc:	80 f9 1f             	cmp    cl,0x1f
c0001dbf:	76 0d                	jbe    c0001dce <get_ldnumber+0x20>
c0001dc1:	80 f9 3a             	cmp    cl,0x3a
c0001dc4:	75 f2                	jne    c0001db8 <get_ldnumber+0xa>
c0001dc6:	eb 0a                	jmp    c0001dd2 <get_ldnumber+0x24>
c0001dc8:	83 c9 ff             	or     ecx,0xffffffff
c0001dcb:	89 c8                	mov    eax,ecx
c0001dcd:	c3                   	ret    
c0001dce:	31 c9                	xor    ecx,ecx
c0001dd0:	eb 24                	jmp    c0001df6 <get_ldnumber+0x48>
c0001dd2:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001dd5:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001dd8:	80 f9 09             	cmp    cl,0x9
c0001ddb:	77 16                	ja     c0001df3 <get_ldnumber+0x45>
c0001ddd:	83 c2 02             	add    edx,0x2
c0001de0:	83 c9 ff             	or     ecx,0xffffffff
c0001de3:	39 d3                	cmp    ebx,edx
c0001de5:	75 0f                	jne    c0001df6 <get_ldnumber+0x48>
c0001de7:	89 f2                	mov    edx,esi
c0001de9:	89 18                	mov    DWORD PTR [eax],ebx
c0001deb:	0f be ca             	movsx  ecx,dl
c0001dee:	83 e9 30             	sub    ecx,0x30
c0001df1:	eb 03                	jmp    c0001df6 <get_ldnumber+0x48>
c0001df3:	83 c9 ff             	or     ecx,0xffffffff
c0001df6:	89 c8                	mov    eax,ecx
c0001df8:	5b                   	pop    ebx
c0001df9:	5e                   	pop    esi
c0001dfa:	c3                   	ret    

c0001dfb <validate>:
c0001dfb:	56                   	push   esi
c0001dfc:	53                   	push   ebx
c0001dfd:	89 d6                	mov    esi,edx
c0001dff:	51                   	push   ecx
c0001e00:	85 c0                	test   eax,eax
c0001e02:	75 09                	jne    c0001e0d <validate+0x12>
c0001e04:	b8 09 00 00 00       	mov    eax,0x9
c0001e09:	31 c9                	xor    ecx,ecx
c0001e0b:	eb 2f                	jmp    c0001e3c <validate+0x41>
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e11:	85 c0                	test   eax,eax
c0001e13:	74 ef                	je     c0001e04 <validate+0x9>
c0001e15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001e18:	74 ea                	je     c0001e04 <validate+0x9>
c0001e1a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001e1e:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001e22:	75 e0                	jne    c0001e04 <validate+0x9>
c0001e24:	83 ec 0c             	sub    esp,0xc
c0001e27:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001e2b:	50                   	push   eax
c0001e2c:	e8 fd fa ff ff       	call   c000192e <disk_status>
c0001e31:	83 c4 10             	add    esp,0x10
c0001e34:	a8 01                	test   al,0x1
c0001e36:	75 cc                	jne    c0001e04 <validate+0x9>
c0001e38:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0001e3a:	31 c0                	xor    eax,eax
c0001e3c:	89 0e                	mov    DWORD PTR [esi],ecx
c0001e3e:	5a                   	pop    edx
c0001e3f:	5b                   	pop    ebx
c0001e40:	5e                   	pop    esi
c0001e41:	c3                   	ret    

c0001e42 <sync_window>:
c0001e42:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0001e46:	74 58                	je     c0001ea0 <sync_window+0x5e>
c0001e48:	56                   	push   esi
c0001e49:	53                   	push   ebx
c0001e4a:	8d 70 34             	lea    esi,[eax+0x34]
c0001e4d:	51                   	push   ecx
c0001e4e:	89 c3                	mov    ebx,eax
c0001e50:	6a 01                	push   0x1
c0001e52:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0001e55:	56                   	push   esi
c0001e56:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001e5a:	50                   	push   eax
c0001e5b:	e8 ea fa ff ff       	call   c000194a <disk_write>
c0001e60:	83 c4 10             	add    esp,0x10
c0001e63:	ba 01 00 00 00       	mov    edx,0x1
c0001e68:	85 c0                	test   eax,eax
c0001e6a:	75 2e                	jne    c0001e9a <sync_window+0x58>
c0001e6c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0001e6f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0001e78:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0001e7b:	39 d1                	cmp    ecx,edx
c0001e7d:	73 19                	jae    c0001e98 <sync_window+0x56>
c0001e7f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0001e83:	75 13                	jne    c0001e98 <sync_window+0x56>
c0001e85:	6a 01                	push   0x1
c0001e87:	01 d0                	add    eax,edx
c0001e89:	50                   	push   eax
c0001e8a:	56                   	push   esi
c0001e8b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001e8f:	50                   	push   eax
c0001e90:	e8 b5 fa ff ff       	call   c000194a <disk_write>
c0001e95:	83 c4 10             	add    esp,0x10
c0001e98:	31 d2                	xor    edx,edx
c0001e9a:	89 d0                	mov    eax,edx
c0001e9c:	5a                   	pop    edx
c0001e9d:	5b                   	pop    ebx
c0001e9e:	5e                   	pop    esi
c0001e9f:	c3                   	ret    
c0001ea0:	31 d2                	xor    edx,edx
c0001ea2:	89 d0                	mov    eax,edx
c0001ea4:	c3                   	ret    

c0001ea5 <move_window>:
c0001ea5:	57                   	push   edi
c0001ea6:	56                   	push   esi
c0001ea7:	31 f6                	xor    esi,esi
c0001ea9:	53                   	push   ebx
c0001eaa:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0001ead:	74 32                	je     c0001ee1 <move_window+0x3c>
c0001eaf:	89 c3                	mov    ebx,eax
c0001eb1:	89 d7                	mov    edi,edx
c0001eb3:	e8 8a ff ff ff       	call   c0001e42 <sync_window>
c0001eb8:	89 c6                	mov    esi,eax
c0001eba:	85 c0                	test   eax,eax
c0001ebc:	75 23                	jne    c0001ee1 <move_window+0x3c>
c0001ebe:	6a 01                	push   0x1
c0001ec0:	8d 43 34             	lea    eax,[ebx+0x34]
c0001ec3:	57                   	push   edi
c0001ec4:	50                   	push   eax
c0001ec5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001ec9:	50                   	push   eax
c0001eca:	e8 65 fa ff ff       	call   c0001934 <disk_read>
c0001ecf:	83 c4 10             	add    esp,0x10
c0001ed2:	85 c0                	test   eax,eax
c0001ed4:	74 08                	je     c0001ede <move_window+0x39>
c0001ed6:	be 01 00 00 00       	mov    esi,0x1
c0001edb:	83 cf ff             	or     edi,0xffffffff
c0001ede:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0001ee1:	89 f0                	mov    eax,esi
c0001ee3:	5b                   	pop    ebx
c0001ee4:	5e                   	pop    esi
c0001ee5:	5f                   	pop    edi
c0001ee6:	c3                   	ret    

c0001ee7 <check_fs>:
c0001ee7:	53                   	push   ebx
c0001ee8:	89 c3                	mov    ebx,eax
c0001eea:	83 ec 08             	sub    esp,0x8
c0001eed:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0001ef1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0001ef8:	e8 a8 ff ff ff       	call   c0001ea5 <move_window>
c0001efd:	ba 04 00 00 00       	mov    edx,0x4
c0001f02:	85 c0                	test   eax,eax
c0001f04:	75 68                	jne    c0001f6e <check_fs+0x87>
c0001f06:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0001f0c:	e8 6e fa ff ff       	call   c000197f <ld_word>
c0001f11:	ba 03 00 00 00       	mov    edx,0x3
c0001f16:	66 3d 55 aa          	cmp    ax,0xaa55
c0001f1a:	75 52                	jne    c0001f6e <check_fs+0x87>
c0001f1c:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0001f1f:	8d 50 18             	lea    edx,[eax+0x18]
c0001f22:	80 fa 01             	cmp    dl,0x1
c0001f25:	76 09                	jbe    c0001f30 <check_fs+0x49>
c0001f27:	ba 02 00 00 00       	mov    edx,0x2
c0001f2c:	3c eb                	cmp    al,0xeb
c0001f2e:	75 3e                	jne    c0001f6e <check_fs+0x87>
c0001f30:	ba d8 f4 01 c0       	mov    edx,0xc001f4d8
c0001f35:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0001f38:	b9 03 00 00 00       	mov    ecx,0x3
c0001f3d:	e8 89 fa ff ff       	call   c00019cb <mem_cmp>
c0001f42:	31 d2                	xor    edx,edx
c0001f44:	85 c0                	test   eax,eax
c0001f46:	74 26                	je     c0001f6e <check_fs+0x87>
c0001f48:	ba bc d3 01 c0       	mov    edx,0xc001d3bc
c0001f4d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0001f53:	b9 05 00 00 00       	mov    ecx,0x5
c0001f58:	e8 6e fa ff ff       	call   c00019cb <mem_cmp>
c0001f5d:	31 d2                	xor    edx,edx
c0001f5f:	85 c0                	test   eax,eax
c0001f61:	74 0b                	je     c0001f6e <check_fs+0x87>
c0001f63:	31 d2                	xor    edx,edx
c0001f65:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0001f69:	0f 95 c2             	setne  dl
c0001f6c:	01 d2                	add    edx,edx
c0001f6e:	89 d0                	mov    eax,edx
c0001f70:	83 c4 08             	add    esp,0x8
c0001f73:	5b                   	pop    ebx
c0001f74:	c3                   	ret    

c0001f75 <find_volume>:
c0001f75:	55                   	push   ebp
c0001f76:	57                   	push   edi
c0001f77:	56                   	push   esi
c0001f78:	89 c6                	mov    esi,eax
c0001f7a:	53                   	push   ebx
c0001f7b:	89 d3                	mov    ebx,edx
c0001f7d:	83 ec 2c             	sub    esp,0x2c
c0001f80:	31 d2                	xor    edx,edx
c0001f82:	e8 60 ff ff ff       	call   c0001ee7 <check_fs>
c0001f87:	83 f8 02             	cmp    eax,0x2
c0001f8a:	74 06                	je     c0001f92 <find_volume+0x1d>
c0001f8c:	77 62                	ja     c0001ff0 <find_volume+0x7b>
c0001f8e:	85 db                	test   ebx,ebx
c0001f90:	74 5e                	je     c0001ff0 <find_volume+0x7b>
c0001f92:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0001f96:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0001f9c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0001fa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fa6:	89 cf                	mov    edi,ecx
c0001fa8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001fac:	89 e8                	mov    eax,ebp
c0001fae:	83 c5 10             	add    ebp,0x10
c0001fb1:	e8 d6 f9 ff ff       	call   c000198c <ld_dword>
c0001fb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001fba:	89 01                	mov    DWORD PTR [ecx],eax
c0001fbc:	83 c1 04             	add    ecx,0x4
c0001fbf:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0001fc3:	75 e3                	jne    c0001fa8 <find_volume+0x33>
c0001fc5:	31 ed                	xor    ebp,ebp
c0001fc7:	85 db                	test   ebx,ebx
c0001fc9:	74 03                	je     c0001fce <find_volume+0x59>
c0001fcb:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0001fce:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0001fd1:	b8 03 00 00 00       	mov    eax,0x3
c0001fd6:	85 d2                	test   edx,edx
c0001fd8:	74 0c                	je     c0001fe6 <find_volume+0x71>
c0001fda:	89 f0                	mov    eax,esi
c0001fdc:	e8 06 ff ff ff       	call   c0001ee7 <check_fs>
c0001fe1:	83 f8 01             	cmp    eax,0x1
c0001fe4:	76 0a                	jbe    c0001ff0 <find_volume+0x7b>
c0001fe6:	85 db                	test   ebx,ebx
c0001fe8:	75 06                	jne    c0001ff0 <find_volume+0x7b>
c0001fea:	45                   	inc    ebp
c0001feb:	83 fd 03             	cmp    ebp,0x3
c0001fee:	76 de                	jbe    c0001fce <find_volume+0x59>
c0001ff0:	83 c4 2c             	add    esp,0x2c
c0001ff3:	5b                   	pop    ebx
c0001ff4:	5e                   	pop    esi
c0001ff5:	5f                   	pop    edi
c0001ff6:	5d                   	pop    ebp
c0001ff7:	c3                   	ret    

c0001ff8 <mount_volume>:
c0001ff8:	55                   	push   ebp
c0001ff9:	89 d5                	mov    ebp,edx
c0001ffb:	57                   	push   edi
c0001ffc:	89 cf                	mov    edi,ecx
c0001ffe:	56                   	push   esi
c0001fff:	53                   	push   ebx
c0002000:	bb 0b 00 00 00       	mov    ebx,0xb
c0002005:	83 ec 2c             	sub    esp,0x2c
c0002008:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000200e:	e8 9b fd ff ff       	call   c0001dae <get_ldnumber>
c0002013:	85 c0                	test   eax,eax
c0002015:	0f 88 d5 02 00 00    	js     c00022f0 <mount_volume+0x2f8>
c000201b:	8b 34 85 00 04 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfc00]
c0002022:	89 c2                	mov    edx,eax
c0002024:	bb 0c 00 00 00       	mov    ebx,0xc
c0002029:	85 f6                	test   esi,esi
c000202b:	0f 84 bf 02 00 00    	je     c00022f0 <mount_volume+0x2f8>
c0002031:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002034:	83 e7 fe             	and    edi,0xfffffffe
c0002037:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000203a:	74 3a                	je     c0002076 <mount_volume+0x7e>
c000203c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002040:	83 ec 0c             	sub    esp,0xc
c0002043:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002047:	50                   	push   eax
c0002048:	e8 e1 f8 ff ff       	call   c000192e <disk_status>
c000204d:	83 c4 10             	add    esp,0x10
c0002050:	a8 01                	test   al,0x1
c0002052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002056:	75 1e                	jne    c0002076 <mount_volume+0x7e>
c0002058:	31 db                	xor    ebx,ebx
c000205a:	89 f9                	mov    ecx,edi
c000205c:	84 c9                	test   cl,cl
c000205e:	0f 84 8c 02 00 00    	je     c00022f0 <mount_volume+0x2f8>
c0002064:	a8 04                	test   al,0x4
c0002066:	0f 84 84 02 00 00    	je     c00022f0 <mount_volume+0x2f8>
c000206c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002071:	e9 7a 02 00 00       	jmp    c00022f0 <mount_volume+0x2f8>
c0002076:	83 ec 0c             	sub    esp,0xc
c0002079:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000207c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000207f:	0f b6 c2             	movzx  eax,dl
c0002082:	bb 03 00 00 00       	mov    ebx,0x3
c0002087:	50                   	push   eax
c0002088:	e8 a4 f8 ff ff       	call   c0001931 <disk_initialize>
c000208d:	83 c4 10             	add    esp,0x10
c0002090:	a8 01                	test   al,0x1
c0002092:	0f 85 58 02 00 00    	jne    c00022f0 <mount_volume+0x2f8>
c0002098:	89 f9                	mov    ecx,edi
c000209a:	84 c9                	test   cl,cl
c000209c:	74 04                	je     c00020a2 <mount_volume+0xaa>
c000209e:	a8 04                	test   al,0x4
c00020a0:	75 ca                	jne    c000206c <mount_volume+0x74>
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	89 f0                	mov    eax,esi
c00020a6:	bb 01 00 00 00       	mov    ebx,0x1
c00020ab:	e8 c5 fe ff ff       	call   c0001f75 <find_volume>
c00020b0:	83 f8 04             	cmp    eax,0x4
c00020b3:	0f 84 37 02 00 00    	je     c00022f0 <mount_volume+0x2f8>
c00020b9:	83 f8 01             	cmp    eax,0x1
c00020bc:	76 0a                	jbe    c00020c8 <mount_volume+0xd0>
c00020be:	bb 0d 00 00 00       	mov    ebx,0xd
c00020c3:	e9 28 02 00 00       	jmp    c00022f0 <mount_volume+0x2f8>
c00020c8:	8d 46 3f             	lea    eax,[esi+0x3f]
c00020cb:	e8 af f8 ff ff       	call   c000197f <ld_word>
c00020d0:	66 3d 00 02          	cmp    ax,0x200
c00020d4:	75 e8                	jne    c00020be <mount_volume+0xc6>
c00020d6:	8d 46 4a             	lea    eax,[esi+0x4a]
c00020d9:	e8 a1 f8 ff ff       	call   c000197f <ld_word>
c00020de:	0f b7 c0             	movzx  eax,ax
c00020e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00020e5:	85 c0                	test   eax,eax
c00020e7:	75 0c                	jne    c00020f5 <mount_volume+0xfd>
c00020e9:	8d 46 58             	lea    eax,[esi+0x58]
c00020ec:	e8 9b f8 ff ff       	call   c000198c <ld_dword>
c00020f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00020f5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00020f8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00020fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00020ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002103:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002106:	89 e8                	mov    eax,ebp
c0002108:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000210b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000210e:	3c 01                	cmp    al,0x1
c0002110:	77 ac                	ja     c00020be <mount_volume+0xc6>
c0002112:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002116:	89 c3                	mov    ebx,eax
c0002118:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000211c:	66 85 c0             	test   ax,ax
c000211f:	74 9d                	je     c00020be <mount_volume+0xc6>
c0002121:	8d 40 ff             	lea    eax,[eax-0x1]
c0002124:	85 d8                	test   eax,ebx
c0002126:	75 96                	jne    c00020be <mount_volume+0xc6>
c0002128:	8d 46 45             	lea    eax,[esi+0x45]
c000212b:	e8 4f f8 ff ff       	call   c000197f <ld_word>
c0002130:	89 c7                	mov    edi,eax
c0002132:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002136:	a8 0f                	test   al,0xf
c0002138:	75 84                	jne    c00020be <mount_volume+0xc6>
c000213a:	8d 46 47             	lea    eax,[esi+0x47]
c000213d:	e8 3d f8 ff ff       	call   c000197f <ld_word>
c0002142:	0f b7 d0             	movzx  edx,ax
c0002145:	85 d2                	test   edx,edx
c0002147:	75 0a                	jne    c0002153 <mount_volume+0x15b>
c0002149:	8d 46 54             	lea    eax,[esi+0x54]
c000214c:	e8 3b f8 ff ff       	call   c000198c <ld_dword>
c0002151:	89 c2                	mov    edx,eax
c0002153:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002157:	8d 46 42             	lea    eax,[esi+0x42]
c000215a:	e8 20 f8 ff ff       	call   c000197f <ld_word>
c000215f:	66 85 c0             	test   ax,ax
c0002162:	0f 84 56 ff ff ff    	je     c00020be <mount_volume+0xc6>
c0002168:	89 e9                	mov    ecx,ebp
c000216a:	0f b7 c0             	movzx  eax,ax
c000216d:	0f b6 e9             	movzx  ebp,cl
c0002170:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002174:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002178:	89 f8                	mov    eax,edi
c000217a:	0f af cd             	imul   ecx,ebp
c000217d:	66 c1 e8 04          	shr    ax,0x4
c0002181:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002185:	0f b7 c0             	movzx  eax,ax
c0002188:	01 c8                	add    eax,ecx
c000218a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000218e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002192:	39 c2                	cmp    edx,eax
c0002194:	0f 82 24 ff ff ff    	jb     c00020be <mount_volume+0xc6>
c000219a:	29 c2                	sub    edx,eax
c000219c:	89 d5                	mov    ebp,edx
c000219e:	89 d0                	mov    eax,edx
c00021a0:	31 d2                	xor    edx,edx
c00021a2:	f7 f3                	div    ebx
c00021a4:	39 dd                	cmp    ebp,ebx
c00021a6:	0f 82 12 ff ff ff    	jb     c00020be <mount_volume+0xc6>
c00021ac:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00021b1:	0f 87 07 ff ff ff    	ja     c00020be <mount_volume+0xc6>
c00021b7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00021bc:	0f 86 1f 01 00 00    	jbe    c00022e1 <mount_volume+0x2e9>
c00021c2:	bb 03 00 00 00       	mov    ebx,0x3
c00021c7:	8d 68 02             	lea    ebp,[eax+0x2]
c00021ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00021ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00021d2:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00021d6:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00021d9:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00021dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00021e0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00021e3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00021e7:	83 fb 03             	cmp    ebx,0x3
c00021ea:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00021ed:	75 21                	jne    c0002210 <mount_volume+0x218>
c00021ef:	8d 46 5e             	lea    eax,[esi+0x5e]
c00021f2:	e8 88 f7 ff ff       	call   c000197f <ld_word>
c00021f7:	66 09 c7             	or     di,ax
c00021fa:	0f 85 be fe ff ff    	jne    c00020be <mount_volume+0xc6>
c0002200:	8d 46 60             	lea    eax,[esi+0x60]
c0002203:	c1 e5 02             	shl    ebp,0x2
c0002206:	e8 81 f7 ff ff       	call   c000198c <ld_dword>
c000220b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000220e:	eb 22                	jmp    c0002232 <mount_volume+0x23a>
c0002210:	66 85 ff             	test   di,di
c0002213:	0f 84 a5 fe ff ff    	je     c00020be <mount_volume+0xc6>
c0002219:	01 c8                	add    eax,ecx
c000221b:	83 fb 02             	cmp    ebx,0x2
c000221e:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002221:	75 04                	jne    c0002227 <mount_volume+0x22f>
c0002223:	01 ed                	add    ebp,ebp
c0002225:	eb 0b                	jmp    c0002232 <mount_volume+0x23a>
c0002227:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000222b:	83 e5 01             	and    ebp,0x1
c000222e:	d1 e8                	shr    eax,1
c0002230:	01 c5                	add    ebp,eax
c0002232:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002238:	c1 ed 09             	shr    ebp,0x9
c000223b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000223f:	0f 87 79 fe ff ff    	ja     c00020be <mount_volume+0xc6>
c0002245:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000224c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002253:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002257:	83 fb 03             	cmp    ebx,0x3
c000225a:	75 6e                	jne    c00022ca <mount_volume+0x2d2>
c000225c:	8d 46 64             	lea    eax,[esi+0x64]
c000225f:	e8 1b f7 ff ff       	call   c000197f <ld_word>
c0002264:	66 48                	dec    ax
c0002266:	75 62                	jne    c00022ca <mount_volume+0x2d2>
c0002268:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000226c:	89 f0                	mov    eax,esi
c000226e:	42                   	inc    edx
c000226f:	e8 31 fc ff ff       	call   c0001ea5 <move_window>
c0002274:	85 c0                	test   eax,eax
c0002276:	75 52                	jne    c00022ca <mount_volume+0x2d2>
c0002278:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000227c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002282:	e8 f8 f6 ff ff       	call   c000197f <ld_word>
c0002287:	66 3d 55 aa          	cmp    ax,0xaa55
c000228b:	75 3d                	jne    c00022ca <mount_volume+0x2d2>
c000228d:	8d 46 34             	lea    eax,[esi+0x34]
c0002290:	e8 f7 f6 ff ff       	call   c000198c <ld_dword>
c0002295:	3d 52 52 61 41       	cmp    eax,0x41615252
c000229a:	75 2e                	jne    c00022ca <mount_volume+0x2d2>
c000229c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00022a2:	e8 e5 f6 ff ff       	call   c000198c <ld_dword>
c00022a7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00022ac:	75 1c                	jne    c00022ca <mount_volume+0x2d2>
c00022ae:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00022b4:	e8 d3 f6 ff ff       	call   c000198c <ld_dword>
c00022b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00022bc:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00022c2:	e8 c5 f6 ff ff       	call   c000198c <ld_dword>
c00022c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00022ca:	66 a1 e0 03 02 c0    	mov    ax,ds:0xc00203e0
c00022d0:	88 1e                	mov    BYTE PTR [esi],bl
c00022d2:	40                   	inc    eax
c00022d3:	31 db                	xor    ebx,ebx
c00022d5:	66 a3 e0 03 02 c0    	mov    ds:0xc00203e0,ax
c00022db:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00022df:	eb 0f                	jmp    c00022f0 <mount_volume+0x2f8>
c00022e1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00022e6:	19 db                	sbb    ebx,ebx
c00022e8:	83 c3 02             	add    ebx,0x2
c00022eb:	e9 d7 fe ff ff       	jmp    c00021c7 <mount_volume+0x1cf>
c00022f0:	83 c4 2c             	add    esp,0x2c
c00022f3:	89 d8                	mov    eax,ebx
c00022f5:	5b                   	pop    ebx
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <put_fat>:
c00022fa:	55                   	push   ebp
c00022fb:	bd 02 00 00 00       	mov    ebp,0x2
c0002300:	57                   	push   edi
c0002301:	56                   	push   esi
c0002302:	53                   	push   ebx
c0002303:	83 ec 1c             	sub    esp,0x1c
c0002306:	83 fa 01             	cmp    edx,0x1
c0002309:	0f 86 31 01 00 00    	jbe    c0002440 <put_fat+0x146>
c000230f:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002312:	0f 86 28 01 00 00    	jbe    c0002440 <put_fat+0x146>
c0002318:	89 c6                	mov    esi,eax
c000231a:	89 cf                	mov    edi,ecx
c000231c:	8a 00                	mov    al,BYTE PTR [eax]
c000231e:	89 d3                	mov    ebx,edx
c0002320:	3c 02                	cmp    al,0x2
c0002322:	0f 84 ac 00 00 00    	je     c00023d4 <put_fat+0xda>
c0002328:	3c 03                	cmp    al,0x3
c000232a:	0f 84 d1 00 00 00    	je     c0002401 <put_fat+0x107>
c0002330:	fe c8                	dec    al
c0002332:	0f 85 08 01 00 00    	jne    c0002440 <put_fat+0x146>
c0002338:	89 d1                	mov    ecx,edx
c000233a:	89 f0                	mov    eax,esi
c000233c:	d1 e9                	shr    ecx,1
c000233e:	01 d1                	add    ecx,edx
c0002340:	89 ca                	mov    edx,ecx
c0002342:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002346:	c1 ea 09             	shr    edx,0x9
c0002349:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000234c:	e8 54 fb ff ff       	call   c0001ea5 <move_window>
c0002351:	89 c5                	mov    ebp,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	0f 85 e5 00 00 00    	jne    c0002440 <put_fat+0x146>
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	8d 46 34             	lea    eax,[esi+0x34]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	8d 41 01             	lea    eax,[ecx+0x1]
c0002369:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000236f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002373:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002377:	89 f8                	mov    eax,edi
c0002379:	83 e3 01             	and    ebx,0x1
c000237c:	74 0c                	je     c000238a <put_fat+0x90>
c000237e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002380:	89 f8                	mov    eax,edi
c0002382:	83 e2 0f             	and    edx,0xf
c0002385:	c1 e0 04             	shl    eax,0x4
c0002388:	09 d0                	or     eax,edx
c000238a:	88 01                	mov    BYTE PTR [ecx],al
c000238c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002390:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002394:	c1 ea 09             	shr    edx,0x9
c0002397:	89 f0                	mov    eax,esi
c0002399:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000239c:	e8 04 fb ff ff       	call   c0001ea5 <move_window>
c00023a1:	89 c5                	mov    ebp,eax
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 85 95 00 00 00    	jne    c0002440 <put_fat+0x146>
c00023ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00023af:	25 ff 01 00 00       	and    eax,0x1ff
c00023b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00023b8:	85 db                	test   ebx,ebx
c00023ba:	74 07                	je     c00023c3 <put_fat+0xc9>
c00023bc:	c1 ef 04             	shr    edi,0x4
c00023bf:	89 f9                	mov    ecx,edi
c00023c1:	eb 0d                	jmp    c00023d0 <put_fat+0xd6>
c00023c3:	8a 08                	mov    cl,BYTE PTR [eax]
c00023c5:	c1 ef 08             	shr    edi,0x8
c00023c8:	83 e1 f0             	and    ecx,0xfffffff0
c00023cb:	83 e7 0f             	and    edi,0xf
c00023ce:	09 f9                	or     ecx,edi
c00023d0:	88 08                	mov    BYTE PTR [eax],cl
c00023d2:	eb 27                	jmp    c00023fb <put_fat+0x101>
c00023d4:	c1 ea 08             	shr    edx,0x8
c00023d7:	89 f0                	mov    eax,esi
c00023d9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00023dc:	e8 c4 fa ff ff       	call   c0001ea5 <move_window>
c00023e1:	89 c5                	mov    ebp,eax
c00023e3:	85 c0                	test   eax,eax
c00023e5:	75 59                	jne    c0002440 <put_fat+0x146>
c00023e7:	01 db                	add    ebx,ebx
c00023e9:	0f b7 d7             	movzx  edx,di
c00023ec:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00023f2:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00023f6:	e8 a9 f5 ff ff       	call   c00019a4 <st_word>
c00023fb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00023ff:	eb 3f                	jmp    c0002440 <put_fat+0x146>
c0002401:	c1 ea 07             	shr    edx,0x7
c0002404:	89 f0                	mov    eax,esi
c0002406:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002409:	e8 97 fa ff ff       	call   c0001ea5 <move_window>
c000240e:	89 c5                	mov    ebp,eax
c0002410:	85 c0                	test   eax,eax
c0002412:	75 2c                	jne    c0002440 <put_fat+0x146>
c0002414:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c000241a:	c1 e3 02             	shl    ebx,0x2
c000241d:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002423:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002427:	89 d8                	mov    eax,ebx
c0002429:	e8 5e f5 ff ff       	call   c000198c <ld_dword>
c000242e:	25 00 00 00 f0       	and    eax,0xf0000000
c0002433:	09 f8                	or     eax,edi
c0002435:	89 c2                	mov    edx,eax
c0002437:	89 d8                	mov    eax,ebx
c0002439:	e8 6a f5 ff ff       	call   c00019a8 <st_dword>
c000243e:	eb bb                	jmp    c00023fb <put_fat+0x101>
c0002440:	83 c4 1c             	add    esp,0x1c
c0002443:	89 e8                	mov    eax,ebp
c0002445:	5b                   	pop    ebx
c0002446:	5e                   	pop    esi
c0002447:	5f                   	pop    edi
c0002448:	5d                   	pop    ebp
c0002449:	c3                   	ret    

c000244a <dir_clear>:
c000244a:	55                   	push   ebp
c000244b:	57                   	push   edi
c000244c:	56                   	push   esi
c000244d:	89 c6                	mov    esi,eax
c000244f:	53                   	push   ebx
c0002450:	83 ec 1c             	sub    esp,0x1c
c0002453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002457:	e8 e6 f9 ff ff       	call   c0001e42 <sync_window>
c000245c:	85 c0                	test   eax,eax
c000245e:	0f 85 c0 00 00 00    	jne    c0002524 <dir_clear+0xda>
c0002464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002468:	89 f0                	mov    eax,esi
c000246a:	e8 56 f7 ff ff       	call   c0001bc5 <clst2sect>
c000246f:	31 d2                	xor    edx,edx
c0002471:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002474:	89 c5                	mov    ebp,eax
c0002476:	b9 00 02 00 00       	mov    ecx,0x200
c000247b:	8d 46 34             	lea    eax,[esi+0x34]
c000247e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002482:	e8 39 f5 ff ff       	call   c00019c0 <mem_set>
c0002487:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000248b:	c1 e3 09             	shl    ebx,0x9
c000248e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002494:	76 1b                	jbe    c00024b1 <dir_clear+0x67>
c0002496:	bb 00 80 00 00       	mov    ebx,0x8000
c000249b:	eb 14                	jmp    c00024b1 <dir_clear+0x67>
c000249d:	83 ec 0c             	sub    esp,0xc
c00024a0:	53                   	push   ebx
c00024a1:	e8 26 32 00 00       	call   c00056cc <ff_memalloc>
c00024a6:	83 c4 10             	add    esp,0x10
c00024a9:	89 c7                	mov    edi,eax
c00024ab:	85 c0                	test   eax,eax
c00024ad:	75 7c                	jne    c000252b <dir_clear+0xe1>
c00024af:	d1 eb                	shr    ebx,1
c00024b1:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00024b7:	77 e4                	ja     c000249d <dir_clear+0x53>
c00024b9:	31 db                	xor    ebx,ebx
c00024bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00024bf:	39 d8                	cmp    eax,ebx
c00024c1:	76 53                	jbe    c0002516 <dir_clear+0xcc>
c00024c3:	6a 01                	push   0x1
c00024c5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00024c8:	50                   	push   eax
c00024c9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00024d1:	50                   	push   eax
c00024d2:	e8 73 f4 ff ff       	call   c000194a <disk_write>
c00024d7:	83 c4 10             	add    esp,0x10
c00024da:	85 c0                	test   eax,eax
c00024dc:	75 38                	jne    c0002516 <dir_clear+0xcc>
c00024de:	43                   	inc    ebx
c00024df:	eb da                	jmp    c00024bb <dir_clear+0x71>
c00024e1:	52                   	push   edx
c00024e2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00024e5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00024e9:	50                   	push   eax
c00024ea:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024ee:	57                   	push   edi
c00024ef:	50                   	push   eax
c00024f0:	e8 55 f4 ff ff       	call   c000194a <disk_write>
c00024f5:	83 c4 10             	add    esp,0x10
c00024f8:	85 c0                	test   eax,eax
c00024fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00024fe:	75 0a                	jne    c000250a <dir_clear+0xc0>
c0002500:	01 d3                	add    ebx,edx
c0002502:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002506:	39 d8                	cmp    eax,ebx
c0002508:	77 d7                	ja     c00024e1 <dir_clear+0x97>
c000250a:	83 ec 0c             	sub    esp,0xc
c000250d:	57                   	push   edi
c000250e:	e8 d1 31 00 00       	call   c00056e4 <ff_memfree>
c0002513:	83 c4 10             	add    esp,0x10
c0002516:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000251a:	39 d8                	cmp    eax,ebx
c000251c:	0f 95 c0             	setne  al
c000251f:	0f b6 c0             	movzx  eax,al
c0002522:	eb 19                	jmp    c000253d <dir_clear+0xf3>
c0002524:	b8 01 00 00 00       	mov    eax,0x1
c0002529:	eb 12                	jmp    c000253d <dir_clear+0xf3>
c000252b:	89 d9                	mov    ecx,ebx
c000252d:	31 d2                	xor    edx,edx
c000252f:	e8 8c f4 ff ff       	call   c00019c0 <mem_set>
c0002534:	89 da                	mov    edx,ebx
c0002536:	31 db                	xor    ebx,ebx
c0002538:	c1 ea 09             	shr    edx,0x9
c000253b:	eb c5                	jmp    c0002502 <dir_clear+0xb8>
c000253d:	83 c4 1c             	add    esp,0x1c
c0002540:	5b                   	pop    ebx
c0002541:	5e                   	pop    esi
c0002542:	5f                   	pop    edi
c0002543:	5d                   	pop    ebp
c0002544:	c3                   	ret    

c0002545 <create_name>:
c0002545:	55                   	push   ebp
c0002546:	89 d5                	mov    ebp,edx
c0002548:	57                   	push   edi
c0002549:	89 c7                	mov    edi,eax
c000254b:	56                   	push   esi
c000254c:	31 f6                	xor    esi,esi
c000254e:	53                   	push   ebx
c000254f:	83 ec 3c             	sub    esp,0x3c
c0002552:	8b 02                	mov    eax,DWORD PTR [edx]
c0002554:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002558:	8b 07                	mov    eax,DWORD PTR [edi]
c000255a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000255d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002561:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002565:	e8 9c f4 ff ff       	call   c0001a06 <tchar2uni>
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 f8 ff             	cmp    eax,0xffffffff
c000256f:	75 0a                	jne    c000257b <create_name+0x36>
c0002571:	b8 06 00 00 00       	mov    eax,0x6
c0002576:	e9 9e 02 00 00       	jmp    c0002819 <create_name+0x2d4>
c000257b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002580:	76 0c                	jbe    c000258e <create_name+0x49>
c0002582:	c1 e8 10             	shr    eax,0x10
c0002585:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002589:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000258d:	46                   	inc    esi
c000258e:	66 83 fb 1f          	cmp    bx,0x1f
c0002592:	76 4f                	jbe    c00025e3 <create_name+0x9e>
c0002594:	66 83 fb 5c          	cmp    bx,0x5c
c0002598:	74 35                	je     c00025cf <create_name+0x8a>
c000259a:	66 83 fb 2f          	cmp    bx,0x2f
c000259e:	74 2f                	je     c00025cf <create_name+0x8a>
c00025a0:	66 83 fb 7f          	cmp    bx,0x7f
c00025a4:	77 11                	ja     c00025b7 <create_name+0x72>
c00025a6:	0f b7 d3             	movzx  edx,bx
c00025a9:	b8 c2 d3 01 c0       	mov    eax,0xc001d3c2
c00025ae:	e8 3b f4 ff ff       	call   c00019ee <chk_chr>
c00025b3:	85 c0                	test   eax,eax
c00025b5:	75 ba                	jne    c0002571 <create_name+0x2c>
c00025b7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00025bd:	77 b2                	ja     c0002571 <create_name+0x2c>
c00025bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025c3:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c00025c7:	46                   	inc    esi
c00025c8:	eb 97                	jmp    c0002561 <create_name+0x1c>
c00025ca:	40                   	inc    eax
c00025cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00025cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00025d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00025d5:	80 fa 2f             	cmp    dl,0x2f
c00025d8:	74 f0                	je     c00025ca <create_name+0x85>
c00025da:	80 fa 5c             	cmp    dl,0x5c
c00025dd:	74 eb                	je     c00025ca <create_name+0x85>
c00025df:	31 db                	xor    ebx,ebx
c00025e1:	eb 02                	jmp    c00025e5 <create_name+0xa0>
c00025e3:	b3 04                	mov    bl,0x4
c00025e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00025e9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00025ec:	85 f6                	test   esi,esi
c00025ee:	74 18                	je     c0002608 <create_name+0xc3>
c00025f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f4:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00025f9:	66 83 f8 20          	cmp    ax,0x20
c00025fd:	74 06                	je     c0002605 <create_name+0xc0>
c00025ff:	66 83 f8 2e          	cmp    ax,0x2e
c0002603:	75 03                	jne    c0002608 <create_name+0xc3>
c0002605:	4e                   	dec    esi
c0002606:	eb e4                	jmp    c00025ec <create_name+0xa7>
c0002608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000260c:	31 ed                	xor    ebp,ebp
c000260e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002614:	85 f6                	test   esi,esi
c0002616:	0f 84 55 ff ff ff    	je     c0002571 <create_name+0x2c>
c000261c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002620:	8d 55 01             	lea    edx,[ebp+0x1]
c0002623:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0002627:	66 83 f8 20          	cmp    ax,0x20
c000262b:	75 04                	jne    c0002631 <create_name+0xec>
c000262d:	89 d5                	mov    ebp,edx
c000262f:	eb eb                	jmp    c000261c <create_name+0xd7>
c0002631:	85 ed                	test   ebp,ebp
c0002633:	75 06                	jne    c000263b <create_name+0xf6>
c0002635:	66 83 f8 2e          	cmp    ax,0x2e
c0002639:	75 08                	jne    c0002643 <create_name+0xfe>
c000263b:	83 cb 03             	or     ebx,0x3
c000263e:	eb 03                	jmp    c0002643 <create_name+0xfe>
c0002640:	4e                   	dec    esi
c0002641:	74 0c                	je     c000264f <create_name+0x10a>
c0002643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002647:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000264d:	75 f1                	jne    c0002640 <create_name+0xfb>
c000264f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002654:	8d 47 20             	lea    eax,[edi+0x20]
c0002657:	ba 20 00 00 00       	mov    edx,0x20
c000265c:	e8 5f f3 ff ff       	call   c00019c0 <mem_set>
c0002661:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002669:	31 c9                	xor    ecx,ecx
c000266b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002670:	8d 45 01             	lea    eax,[ebp+0x1]
c0002673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000267b:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000267f:	66 85 ed             	test   bp,bp
c0002682:	0f 84 30 01 00 00    	je     c00027b8 <create_name+0x273>
c0002688:	66 83 fd 20          	cmp    bp,0x20
c000268c:	74 10                	je     c000269e <create_name+0x159>
c000268e:	66 83 fd 2e          	cmp    bp,0x2e
c0002692:	75 13                	jne    c00026a7 <create_name+0x162>
c0002694:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002698:	0f 84 6b 01 00 00    	je     c0002809 <create_name+0x2c4>
c000269e:	83 cb 03             	or     ebx,0x3
c00026a1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00026a5:	eb c9                	jmp    c0002670 <create_name+0x12b>
c00026a7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00026ab:	73 0b                	jae    c00026b8 <create_name+0x173>
c00026ad:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026b1:	75 47                	jne    c00026fa <create_name+0x1b5>
c00026b3:	e9 51 01 00 00       	jmp    c0002809 <create_name+0x2c4>
c00026b8:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00026bd:	75 10                	jne    c00026cf <create_name+0x18a>
c00026bf:	83 cb 03             	or     ebx,0x3
c00026c2:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00026ca:	e9 e9 00 00 00       	jmp    c00027b8 <create_name+0x273>
c00026cf:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026d3:	74 0d                	je     c00026e2 <create_name+0x19d>
c00026d5:	83 cb 03             	or     ebx,0x3
c00026d8:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026dc:	0f 87 d6 00 00 00    	ja     c00027b8 <create_name+0x273>
c00026e2:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00026e7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00026eb:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00026f3:	b9 08 00 00 00       	mov    ecx,0x8
c00026f8:	eb a7                	jmp    c00026a1 <create_name+0x15c>
c00026fa:	66 83 fd 7f          	cmp    bp,0x7f
c00026fe:	76 68                	jbe    c0002768 <create_name+0x223>
c0002700:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002704:	88 da                	mov    dl,bl
c0002706:	83 ca 02             	or     edx,0x2
c0002709:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c000270d:	50                   	push   eax
c000270e:	50                   	push   eax
c000270f:	68 b5 01 00 00       	push   0x1b5
c0002714:	55                   	push   ebp
c0002715:	e8 e2 2f 00 00       	call   c00056fc <ff_uni2oem>
c000271a:	83 c4 10             	add    esp,0x10
c000271d:	89 c5                	mov    ebp,eax
c000271f:	a8 80                	test   al,0x80
c0002721:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002729:	74 0c                	je     c0002737 <create_name+0x1f2>
c000272b:	83 e5 7f             	and    ebp,0x7f
c000272e:	0f b6 ad 80 d4 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2b80]
c0002735:	eb 2a                	jmp    c0002761 <create_name+0x21c>
c0002737:	66 3d ff 00          	cmp    ax,0xff
c000273b:	76 24                	jbe    c0002761 <create_name+0x21c>
c000273d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002741:	48                   	dec    eax
c0002742:	39 c8                	cmp    eax,ecx
c0002744:	77 0c                	ja     c0002752 <create_name+0x20d>
c0002746:	83 cb 03             	or     ebx,0x3
c0002749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000274d:	e9 4f ff ff ff       	jmp    c00026a1 <create_name+0x15c>
c0002752:	89 e8                	mov    eax,ebp
c0002754:	88 d3                	mov    bl,dl
c0002756:	66 c1 e8 08          	shr    ax,0x8
c000275a:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000275e:	41                   	inc    ecx
c000275f:	eb 4b                	jmp    c00027ac <create_name+0x267>
c0002761:	88 d3                	mov    bl,dl
c0002763:	66 85 ed             	test   bp,bp
c0002766:	74 19                	je     c0002781 <create_name+0x23c>
c0002768:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000276c:	0f b7 d5             	movzx  edx,bp
c000276f:	b8 cb d3 01 c0       	mov    eax,0xc001d3cb
c0002774:	e8 75 f2 ff ff       	call   c00019ee <chk_chr>
c0002779:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000277d:	85 c0                	test   eax,eax
c000277f:	74 0a                	je     c000278b <create_name+0x246>
c0002781:	83 cb 03             	or     ebx,0x3
c0002784:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002789:	eb 21                	jmp    c00027ac <create_name+0x267>
c000278b:	8d 45 bf             	lea    eax,[ebp-0x41]
c000278e:	66 83 f8 19          	cmp    ax,0x19
c0002792:	77 07                	ja     c000279b <create_name+0x256>
c0002794:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002799:	eb 11                	jmp    c00027ac <create_name+0x267>
c000279b:	8d 45 9f             	lea    eax,[ebp-0x61]
c000279e:	66 83 f8 19          	cmp    ax,0x19
c00027a2:	77 08                	ja     c00027ac <create_name+0x267>
c00027a4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c00027a9:	83 ed 20             	sub    ebp,0x20
c00027ac:	89 e8                	mov    eax,ebp
c00027ae:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c00027b2:	41                   	inc    ecx
c00027b3:	e9 e9 fe ff ff       	jmp    c00026a1 <create_name+0x15c>
c00027b8:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c00027bc:	75 04                	jne    c00027c2 <create_name+0x27d>
c00027be:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c00027c2:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c00027c7:	75 05                	jne    c00027ce <create_name+0x289>
c00027c9:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00027ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00027d2:	83 e0 0c             	and    eax,0xc
c00027d5:	3c 0c                	cmp    al,0xc
c00027d7:	74 0b                	je     c00027e4 <create_name+0x29f>
c00027d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00027dd:	83 e0 03             	and    eax,0x3
c00027e0:	3c 03                	cmp    al,0x3
c00027e2:	75 05                	jne    c00027e9 <create_name+0x2a4>
c00027e4:	83 cb 02             	or     ebx,0x2
c00027e7:	eb 19                	jmp    c0002802 <create_name+0x2bd>
c00027e9:	f6 c3 02             	test   bl,0x2
c00027ec:	75 14                	jne    c0002802 <create_name+0x2bd>
c00027ee:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00027f3:	74 03                	je     c00027f8 <create_name+0x2b3>
c00027f5:	83 cb 10             	or     ebx,0x10
c00027f8:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00027fd:	74 03                	je     c0002802 <create_name+0x2bd>
c00027ff:	83 cb 08             	or     ebx,0x8
c0002802:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002805:	31 c0                	xor    eax,eax
c0002807:	eb 10                	jmp    c0002819 <create_name+0x2d4>
c0002809:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000280e:	0f 85 ce fe ff ff    	jne    c00026e2 <create_name+0x19d>
c0002814:	e9 a6 fe ff ff       	jmp    c00026bf <create_name+0x17a>
c0002819:	83 c4 3c             	add    esp,0x3c
c000281c:	5b                   	pop    ebx
c000281d:	5e                   	pop    esi
c000281e:	5f                   	pop    edi
c000281f:	5d                   	pop    ebp
c0002820:	c3                   	ret    

c0002821 <cmp_lfn>:
c0002821:	55                   	push   ebp
c0002822:	57                   	push   edi
c0002823:	89 d7                	mov    edi,edx
c0002825:	56                   	push   esi
c0002826:	53                   	push   ebx
c0002827:	83 ec 1c             	sub    esp,0x1c
c000282a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000282e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002831:	e8 49 f1 ff ff       	call   c000197f <ld_word>
c0002836:	66 85 c0             	test   ax,ax
c0002839:	74 07                	je     c0002842 <cmp_lfn+0x21>
c000283b:	31 c0                	xor    eax,eax
c000283d:	e9 9a 00 00 00       	jmp    c00028dc <cmp_lfn+0xbb>
c0002842:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002844:	bd 01 00 00 00       	mov    ebp,0x1
c0002849:	83 e3 3f             	and    ebx,0x3f
c000284c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002854:	4b                   	dec    ebx
c0002855:	6b db 0d             	imul   ebx,ebx,0xd
c0002858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000285c:	0f b6 80 00 d5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2b00]
c0002863:	01 f8                	add    eax,edi
c0002865:	e8 15 f1 ff ff       	call   c000197f <ld_word>
c000286a:	66 85 ed             	test   bp,bp
c000286d:	89 c6                	mov    esi,eax
c000286f:	74 3c                	je     c00028ad <cmp_lfn+0x8c>
c0002871:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002877:	77 c2                	ja     c000283b <cmp_lfn+0x1a>
c0002879:	83 ec 0c             	sub    esp,0xc
c000287c:	0f b7 c0             	movzx  eax,ax
c000287f:	50                   	push   eax
c0002880:	e8 83 2f 00 00       	call   c0005808 <ff_wtoupper>
c0002885:	89 c5                	mov    ebp,eax
c0002887:	8d 43 01             	lea    eax,[ebx+0x1]
c000288a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000288e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002892:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002896:	89 04 24             	mov    DWORD PTR [esp],eax
c0002899:	e8 6a 2f 00 00       	call   c0005808 <ff_wtoupper>
c000289e:	83 c4 10             	add    esp,0x10
c00028a1:	39 c5                	cmp    ebp,eax
c00028a3:	75 96                	jne    c000283b <cmp_lfn+0x1a>
c00028a5:	89 f5                	mov    ebp,esi
c00028a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00028ab:	eb 04                	jmp    c00028b1 <cmp_lfn+0x90>
c00028ad:	66 46                	inc    si
c00028af:	75 8a                	jne    c000283b <cmp_lfn+0x1a>
c00028b1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00028b5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00028ba:	75 9c                	jne    c0002858 <cmp_lfn+0x37>
c00028bc:	f6 07 40             	test   BYTE PTR [edi],0x40
c00028bf:	74 16                	je     c00028d7 <cmp_lfn+0xb6>
c00028c1:	66 85 ed             	test   bp,bp
c00028c4:	74 11                	je     c00028d7 <cmp_lfn+0xb6>
c00028c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ca:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00028cf:	0f 94 c0             	sete   al
c00028d2:	0f b6 c0             	movzx  eax,al
c00028d5:	eb 05                	jmp    c00028dc <cmp_lfn+0xbb>
c00028d7:	b8 01 00 00 00       	mov    eax,0x1
c00028dc:	83 c4 1c             	add    esp,0x1c
c00028df:	5b                   	pop    ebx
c00028e0:	5e                   	pop    esi
c00028e1:	5f                   	pop    edi
c00028e2:	5d                   	pop    ebp
c00028e3:	c3                   	ret    

c00028e4 <sync_fs>:
c00028e4:	56                   	push   esi
c00028e5:	53                   	push   ebx
c00028e6:	53                   	push   ebx
c00028e7:	89 c3                	mov    ebx,eax
c00028e9:	e8 54 f5 ff ff       	call   c0001e42 <sync_window>
c00028ee:	85 c0                	test   eax,eax
c00028f0:	0f 85 9a 00 00 00    	jne    c0002990 <sync_fs+0xac>
c00028f6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00028f9:	75 7b                	jne    c0002976 <sync_fs+0x92>
c00028fb:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00028ff:	75 75                	jne    c0002976 <sync_fs+0x92>
c0002901:	b9 00 02 00 00       	mov    ecx,0x200
c0002906:	8d 73 34             	lea    esi,[ebx+0x34]
c0002909:	31 d2                	xor    edx,edx
c000290b:	89 f0                	mov    eax,esi
c000290d:	e8 ae f0 ff ff       	call   c00019c0 <mem_set>
c0002912:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002918:	ba 55 aa 00 00       	mov    edx,0xaa55
c000291d:	e8 82 f0 ff ff       	call   c00019a4 <st_word>
c0002922:	ba 52 52 61 41       	mov    edx,0x41615252
c0002927:	89 f0                	mov    eax,esi
c0002929:	e8 7a f0 ff ff       	call   c00019a8 <st_dword>
c000292e:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002934:	ba 72 72 41 61       	mov    edx,0x61417272
c0002939:	e8 6a f0 ff ff       	call   c00019a8 <st_dword>
c000293e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002941:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002947:	e8 5c f0 ff ff       	call   c00019a8 <st_dword>
c000294c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000294f:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002955:	e8 4e f0 ff ff       	call   c00019a8 <st_dword>
c000295a:	6a 01                	push   0x1
c000295c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000295f:	40                   	inc    eax
c0002960:	50                   	push   eax
c0002961:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002964:	56                   	push   esi
c0002965:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002969:	50                   	push   eax
c000296a:	e8 db ef ff ff       	call   c000194a <disk_write>
c000296f:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002973:	83 c4 10             	add    esp,0x10
c0002976:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000297a:	51                   	push   ecx
c000297b:	6a 00                	push   0x0
c000297d:	6a 00                	push   0x0
c000297f:	50                   	push   eax
c0002980:	e8 db ef ff ff       	call   c0001960 <disk_ioctl>
c0002985:	83 c4 10             	add    esp,0x10
c0002988:	85 c0                	test   eax,eax
c000298a:	0f 95 c0             	setne  al
c000298d:	0f b6 c0             	movzx  eax,al
c0002990:	5a                   	pop    edx
c0002991:	5b                   	pop    ebx
c0002992:	5e                   	pop    esi
c0002993:	c3                   	ret    

c0002994 <create_partition>:
c0002994:	55                   	push   ebp
c0002995:	0f b6 c0             	movzx  eax,al
c0002998:	57                   	push   edi
c0002999:	56                   	push   esi
c000299a:	53                   	push   ebx
c000299b:	83 ec 40             	sub    esp,0x40
c000299e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00029a6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00029aa:	8d 44 24 30          	lea    eax,[esp+0x30]
c00029ae:	50                   	push   eax
c00029af:	6a 01                	push   0x1
c00029b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00029b5:	e8 a6 ef ff ff       	call   c0001960 <disk_ioctl>
c00029ba:	83 c4 10             	add    esp,0x10
c00029bd:	85 c0                	test   eax,eax
c00029bf:	0f 85 6a 01 00 00    	jne    c0002b2f <create_partition+0x19b>
c00029c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029c9:	b9 05 00 00 00       	mov    ecx,0x5
c00029ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00029d2:	be 08 00 00 00       	mov    esi,0x8
c00029d7:	89 f0                	mov    eax,esi
c00029d9:	31 d2                	xor    edx,edx
c00029db:	0f b6 d8             	movzx  ebx,al
c00029de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029e2:	f7 f3                	div    ebx
c00029e4:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00029e9:	76 0a                	jbe    c00029f5 <create_partition+0x61>
c00029eb:	d1 e6                	shl    esi,1
c00029ed:	49                   	dec    ecx
c00029ee:	75 e7                	jne    c00029d7 <create_partition+0x43>
c00029f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00029f5:	b9 00 02 00 00       	mov    ecx,0x200
c00029fa:	31 d2                	xor    edx,edx
c00029fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a00:	e8 bb ef ff ff       	call   c00019c0 <mem_set>
c0002a05:	b9 64 00 00 00       	mov    ecx,0x64
c0002a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0e:	31 d2                	xor    edx,edx
c0002a10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a18:	f7 f1                	div    ecx
c0002a1a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002a1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a27:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002a2d:	89 f0                	mov    eax,esi
c0002a2f:	0f b6 c0             	movzx  eax,al
c0002a32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a36:	85 c9                	test   ecx,ecx
c0002a38:	75 34                	jne    c0002a6e <create_partition+0xda>
c0002a3a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002a43:	05 fe 01 00 00       	add    eax,0x1fe
c0002a48:	e8 57 ef ff ff       	call   c00019a4 <st_word>
c0002a4d:	6a 01                	push   0x1
c0002a4f:	6a 00                	push   0x0
c0002a51:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002a55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002a59:	e8 ec ee ff ff       	call   c000194a <disk_write>
c0002a5e:	83 c4 10             	add    esp,0x10
c0002a61:	85 c0                	test   eax,eax
c0002a63:	0f 95 c0             	setne  al
c0002a66:	0f b6 c0             	movzx  eax,al
c0002a69:	e9 c6 00 00 00       	jmp    c0002b34 <create_partition+0x1a0>
c0002a6e:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002a72:	76 c6                	jbe    c0002a3a <create_partition+0xa6>
c0002a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002a78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002a7c:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002a7f:	83 fe 64             	cmp    esi,0x64
c0002a82:	77 0d                	ja     c0002a91 <create_partition+0xfd>
c0002a84:	74 07                	je     c0002a8d <create_partition+0xf9>
c0002a86:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002a8b:	eb 04                	jmp    c0002a91 <create_partition+0xfd>
c0002a8d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002a91:	31 c0                	xor    eax,eax
c0002a93:	89 f2                	mov    edx,esi
c0002a95:	01 ca                	add    edx,ecx
c0002a97:	0f 92 c0             	setb   al
c0002a9a:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002a9e:	77 04                	ja     c0002aa4 <create_partition+0x110>
c0002aa0:	85 c0                	test   eax,eax
c0002aa2:	74 08                	je     c0002aac <create_partition+0x118>
c0002aa4:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002aa8:	29 ce                	sub    esi,ecx
c0002aaa:	eb 04                	jmp    c0002ab0 <create_partition+0x11c>
c0002aac:	85 f6                	test   esi,esi
c0002aae:	74 8a                	je     c0002a3a <create_partition+0xa6>
c0002ab0:	89 ca                	mov    edx,ecx
c0002ab2:	89 d8                	mov    eax,ebx
c0002ab4:	bf 3f 00 00 00       	mov    edi,0x3f
c0002ab9:	e8 ea ee ff ff       	call   c00019a8 <st_dword>
c0002abe:	8d 43 04             	lea    eax,[ebx+0x4]
c0002ac1:	89 f2                	mov    edx,esi
c0002ac3:	83 c3 10             	add    ebx,0x10
c0002ac6:	e8 dd ee ff ff       	call   c00019a8 <st_dword>
c0002acb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002acf:	31 d2                	xor    edx,edx
c0002ad1:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ad4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ad8:	89 c8                	mov    eax,ecx
c0002ada:	01 f1                	add    ecx,esi
c0002adc:	f7 f7                	div    edi
c0002ade:	89 d5                	mov    ebp,edx
c0002ae0:	31 d2                	xor    edx,edx
c0002ae2:	45                   	inc    ebp
c0002ae3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002ae7:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002aea:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002aed:	89 c2                	mov    edx,eax
c0002aef:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002af2:	c1 ea 02             	shr    edx,0x2
c0002af5:	83 e2 c0             	and    edx,0xffffffc0
c0002af8:	09 ea                	or     edx,ebp
c0002afa:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002afd:	31 d2                	xor    edx,edx
c0002aff:	f7 f7                	div    edi
c0002b01:	89 d6                	mov    esi,edx
c0002b03:	31 d2                	xor    edx,edx
c0002b05:	46                   	inc    esi
c0002b06:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002b0a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002b0d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002b10:	89 c7                	mov    edi,eax
c0002b12:	c1 ef 02             	shr    edi,0x2
c0002b15:	83 e7 c0             	and    edi,0xffffffc0
c0002b18:	09 fe                	or     esi,edi
c0002b1a:	89 f2                	mov    edx,esi
c0002b1c:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002b1f:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002b24:	0f 85 0c ff ff ff    	jne    c0002a36 <create_partition+0xa2>
c0002b2a:	e9 0b ff ff ff       	jmp    c0002a3a <create_partition+0xa6>
c0002b2f:	b8 01 00 00 00       	mov    eax,0x1
c0002b34:	83 c4 3c             	add    esp,0x3c
c0002b37:	5b                   	pop    ebx
c0002b38:	5e                   	pop    esi
c0002b39:	5f                   	pop    edi
c0002b3a:	5d                   	pop    ebp
c0002b3b:	c3                   	ret    

c0002b3c <get_fileinfo>:
c0002b3c:	55                   	push   ebp
c0002b3d:	57                   	push   edi
c0002b3e:	56                   	push   esi
c0002b3f:	53                   	push   ebx
c0002b40:	83 ec 1c             	sub    esp,0x1c
c0002b43:	8b 30                	mov    esi,DWORD PTR [eax]
c0002b45:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002b49:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002b4d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002b51:	0f 84 c1 01 00 00    	je     c0002d18 <get_fileinfo+0x1dc>
c0002b57:	89 d3                	mov    ebx,edx
c0002b59:	89 c6                	mov    esi,eax
c0002b5b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002b5f:	74 6a                	je     c0002bcb <get_fileinfo+0x8f>
c0002b61:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b69:	31 ed                	xor    ebp,ebp
c0002b6b:	31 ff                	xor    edi,edi
c0002b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002b78:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002b7c:	66 85 d2             	test   dx,dx
c0002b7f:	74 3e                	je     c0002bbf <get_fileinfo+0x83>
c0002b81:	66 85 ed             	test   bp,bp
c0002b84:	75 0c                	jne    c0002b92 <get_fileinfo+0x56>
c0002b86:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002b8c:	66 3d ff 07          	cmp    ax,0x7ff
c0002b90:	76 22                	jbe    c0002bb4 <get_fileinfo+0x78>
c0002b92:	b9 ff 00 00 00       	mov    ecx,0xff
c0002b97:	89 e8                	mov    eax,ebp
c0002b99:	29 f9                	sub    ecx,edi
c0002b9b:	c1 e0 10             	shl    eax,0x10
c0002b9e:	09 d0                	or     eax,edx
c0002ba0:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002ba4:	e8 23 ef ff ff       	call   c0001acc <put_utf>
c0002ba9:	84 c0                	test   al,al
c0002bab:	74 10                	je     c0002bbd <get_fileinfo+0x81>
c0002bad:	0f b6 c0             	movzx  eax,al
c0002bb0:	31 d2                	xor    edx,edx
c0002bb2:	01 c7                	add    edi,eax
c0002bb4:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002bb9:	89 d5                	mov    ebp,edx
c0002bbb:	eb b0                	jmp    c0002b6d <get_fileinfo+0x31>
c0002bbd:	31 ff                	xor    edi,edi
c0002bbf:	66 85 ed             	test   bp,bp
c0002bc2:	74 02                	je     c0002bc6 <get_fileinfo+0x8a>
c0002bc4:	31 ff                	xor    edi,edi
c0002bc6:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002bcb:	31 ff                	xor    edi,edi
c0002bcd:	31 c9                	xor    ecx,ecx
c0002bcf:	83 f9 0a             	cmp    ecx,0xa
c0002bd2:	0f 87 ad 00 00 00    	ja     c0002c85 <get_fileinfo+0x149>
c0002bd8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002bdb:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002bde:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002be2:	66 83 fa 20          	cmp    dx,0x20
c0002be6:	0f 84 92 00 00 00    	je     c0002c7e <get_fileinfo+0x142>
c0002bec:	66 83 fa 05          	cmp    dx,0x5
c0002bf0:	75 05                	jne    c0002bf7 <get_fileinfo+0xbb>
c0002bf2:	ba e5 00 00 00       	mov    edx,0xe5
c0002bf7:	83 ff 0b             	cmp    edi,0xb
c0002bfa:	77 0b                	ja     c0002c07 <get_fileinfo+0xcb>
c0002bfc:	83 fd 09             	cmp    ebp,0x9
c0002bff:	75 06                	jne    c0002c07 <get_fileinfo+0xcb>
c0002c01:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002c06:	47                   	inc    edi
c0002c07:	0f b7 c2             	movzx  eax,dx
c0002c0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c0e:	e8 ed ed ff ff       	call   c0001a00 <dbc_1st>
c0002c13:	85 c0                	test   eax,eax
c0002c15:	74 2f                	je     c0002c46 <get_fileinfo+0x10a>
c0002c17:	83 fd 08             	cmp    ebp,0x8
c0002c1a:	74 2a                	je     c0002c46 <get_fileinfo+0x10a>
c0002c1c:	83 fd 0b             	cmp    ebp,0xb
c0002c1f:	74 25                	je     c0002c46 <get_fileinfo+0x10a>
c0002c21:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002c24:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002c28:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002c2c:	e8 d2 ed ff ff       	call   c0001a03 <dbc_2nd>
c0002c31:	85 c0                	test   eax,eax
c0002c33:	74 11                	je     c0002c46 <get_fileinfo+0x10a>
c0002c35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c39:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002c3e:	c1 e2 08             	shl    edx,0x8
c0002c41:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002c44:	09 c2                	or     edx,eax
c0002c46:	0f b7 d2             	movzx  edx,dx
c0002c49:	50                   	push   eax
c0002c4a:	50                   	push   eax
c0002c4b:	68 b5 01 00 00       	push   0x1b5
c0002c50:	52                   	push   edx
c0002c51:	e8 3e 2b 00 00       	call   c0005794 <ff_oem2uni>
c0002c56:	83 c4 10             	add    esp,0x10
c0002c59:	66 85 c0             	test   ax,ax
c0002c5c:	75 04                	jne    c0002c62 <get_fileinfo+0x126>
c0002c5e:	31 ff                	xor    edi,edi
c0002c60:	eb 23                	jmp    c0002c85 <get_fileinfo+0x149>
c0002c62:	b9 0c 00 00 00       	mov    ecx,0xc
c0002c67:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002c6b:	29 f9                	sub    ecx,edi
c0002c6d:	0f b7 c0             	movzx  eax,ax
c0002c70:	e8 57 ee ff ff       	call   c0001acc <put_utf>
c0002c75:	84 c0                	test   al,al
c0002c77:	74 e5                	je     c0002c5e <get_fileinfo+0x122>
c0002c79:	0f b6 c0             	movzx  eax,al
c0002c7c:	01 c7                	add    edi,eax
c0002c7e:	89 e9                	mov    ecx,ebp
c0002c80:	e9 4a ff ff ff       	jmp    c0002bcf <get_fileinfo+0x93>
c0002c85:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002c8a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002c8e:	75 54                	jne    c0002ce4 <get_fileinfo+0x1a8>
c0002c90:	85 ff                	test   edi,edi
c0002c92:	75 0b                	jne    c0002c9f <get_fileinfo+0x163>
c0002c94:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002c98:	ba 01 00 00 00       	mov    edx,0x1
c0002c9d:	eb 33                	jmp    c0002cd2 <get_fileinfo+0x196>
c0002c9f:	b1 08                	mov    cl,0x8
c0002ca1:	31 d2                	xor    edx,edx
c0002ca3:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002ca9:	84 c0                	test   al,al
c0002cab:	74 25                	je     c0002cd2 <get_fileinfo+0x196>
c0002cad:	66 83 f8 2e          	cmp    ax,0x2e
c0002cb1:	74 16                	je     c0002cc9 <get_fileinfo+0x18d>
c0002cb3:	8d 78 bf             	lea    edi,[eax-0x41]
c0002cb6:	66 83 ff 19          	cmp    di,0x19
c0002cba:	77 0f                	ja     c0002ccb <get_fileinfo+0x18f>
c0002cbc:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002cbf:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002cc2:	74 07                	je     c0002ccb <get_fileinfo+0x18f>
c0002cc4:	83 c0 20             	add    eax,0x20
c0002cc7:	eb 02                	jmp    c0002ccb <get_fileinfo+0x18f>
c0002cc9:	b1 10                	mov    cl,0x10
c0002ccb:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002ccf:	42                   	inc    edx
c0002cd0:	eb d1                	jmp    c0002ca3 <get_fileinfo+0x167>
c0002cd2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002cd7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002cda:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002cde:	75 04                	jne    c0002ce4 <get_fileinfo+0x1a8>
c0002ce0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002ce4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ce7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002cea:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002ced:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002cf0:	83 c0 1c             	add    eax,0x1c
c0002cf3:	e8 94 ec ff ff       	call   c000198c <ld_dword>
c0002cf8:	89 03                	mov    DWORD PTR [ebx],eax
c0002cfa:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002cfd:	83 c0 16             	add    eax,0x16
c0002d00:	e8 7a ec ff ff       	call   c000197f <ld_word>
c0002d05:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002d09:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d0c:	83 c0 18             	add    eax,0x18
c0002d0f:	e8 6b ec ff ff       	call   c000197f <ld_word>
c0002d14:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <ld_clust.isra.0>:
c0002d20:	56                   	push   esi
c0002d21:	89 c6                	mov    esi,eax
c0002d23:	53                   	push   ebx
c0002d24:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d27:	89 d3                	mov    ebx,edx
c0002d29:	e8 51 ec ff ff       	call   c000197f <ld_word>
c0002d2e:	0f b7 c8             	movzx  ecx,ax
c0002d31:	89 f0                	mov    eax,esi
c0002d33:	3c 03                	cmp    al,0x3
c0002d35:	75 0d                	jne    c0002d44 <ld_clust.isra.0+0x24>
c0002d37:	8d 43 14             	lea    eax,[ebx+0x14]
c0002d3a:	e8 40 ec ff ff       	call   c000197f <ld_word>
c0002d3f:	c1 e0 10             	shl    eax,0x10
c0002d42:	09 c1                	or     ecx,eax
c0002d44:	89 c8                	mov    eax,ecx
c0002d46:	5b                   	pop    ebx
c0002d47:	5e                   	pop    esi
c0002d48:	c3                   	ret    

c0002d49 <st_clust.isra.1>:
c0002d49:	56                   	push   esi
c0002d4a:	89 c6                	mov    esi,eax
c0002d4c:	53                   	push   ebx
c0002d4d:	89 d3                	mov    ebx,edx
c0002d4f:	0f b7 d1             	movzx  edx,cx
c0002d52:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002d55:	e8 4a ec ff ff       	call   c00019a4 <st_word>
c0002d5a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002d5d:	75 0f                	jne    c0002d6e <st_clust.isra.1+0x25>
c0002d5f:	c1 e9 10             	shr    ecx,0x10
c0002d62:	8d 43 14             	lea    eax,[ebx+0x14]
c0002d65:	89 ca                	mov    edx,ecx
c0002d67:	5b                   	pop    ebx
c0002d68:	5e                   	pop    esi
c0002d69:	e9 36 ec ff ff       	jmp    c00019a4 <st_word>
c0002d6e:	5b                   	pop    ebx
c0002d6f:	5e                   	pop    esi
c0002d70:	c3                   	ret    

c0002d71 <get_fat.isra.2>:
c0002d71:	b9 01 00 00 00       	mov    ecx,0x1
c0002d76:	83 fa 01             	cmp    edx,0x1
c0002d79:	0f 86 f1 00 00 00    	jbe    c0002e70 <get_fat.isra.2+0xff>
c0002d7f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002d82:	0f 83 e8 00 00 00    	jae    c0002e70 <get_fat.isra.2+0xff>
c0002d88:	55                   	push   ebp
c0002d89:	57                   	push   edi
c0002d8a:	89 c7                	mov    edi,eax
c0002d8c:	56                   	push   esi
c0002d8d:	89 d6                	mov    esi,edx
c0002d8f:	53                   	push   ebx
c0002d90:	83 ec 0c             	sub    esp,0xc
c0002d93:	8a 00                	mov    al,BYTE PTR [eax]
c0002d95:	3c 02                	cmp    al,0x2
c0002d97:	74 78                	je     c0002e11 <get_fat.isra.2+0xa0>
c0002d99:	3c 03                	cmp    al,0x3
c0002d9b:	0f 84 97 00 00 00    	je     c0002e38 <get_fat.isra.2+0xc7>
c0002da1:	fe c8                	dec    al
c0002da3:	0f 85 bd 00 00 00    	jne    c0002e66 <get_fat.isra.2+0xf5>
c0002da9:	89 d3                	mov    ebx,edx
c0002dab:	89 f8                	mov    eax,edi
c0002dad:	d1 eb                	shr    ebx,1
c0002daf:	01 d3                	add    ebx,edx
c0002db1:	89 da                	mov    edx,ebx
c0002db3:	c1 ea 09             	shr    edx,0x9
c0002db6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002db9:	e8 e7 f0 ff ff       	call   c0001ea5 <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	74 08                	je     c0002dca <get_fat.isra.2+0x59>
c0002dc2:	83 c9 ff             	or     ecx,0xffffffff
c0002dc5:	e9 9c 00 00 00       	jmp    c0002e66 <get_fat.isra.2+0xf5>
c0002dca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dcd:	89 f8                	mov    eax,edi
c0002dcf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002dd5:	89 ea                	mov    edx,ebp
c0002dd7:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002ddb:	c1 ea 09             	shr    edx,0x9
c0002dde:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002de1:	e8 bf f0 ff ff       	call   c0001ea5 <move_window>
c0002de6:	85 c0                	test   eax,eax
c0002de8:	75 d8                	jne    c0002dc2 <get_fat.isra.2+0x51>
c0002dea:	0f b6 c3             	movzx  eax,bl
c0002ded:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002df3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002df8:	c1 e3 08             	shl    ebx,0x8
c0002dfb:	09 c3                	or     ebx,eax
c0002dfd:	89 d9                	mov    ecx,ebx
c0002dff:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e05:	83 e6 01             	and    esi,0x1
c0002e08:	74 5c                	je     c0002e66 <get_fat.isra.2+0xf5>
c0002e0a:	89 d9                	mov    ecx,ebx
c0002e0c:	c1 e9 04             	shr    ecx,0x4
c0002e0f:	eb 55                	jmp    c0002e66 <get_fat.isra.2+0xf5>
c0002e11:	c1 ea 08             	shr    edx,0x8
c0002e14:	89 f8                	mov    eax,edi
c0002e16:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002e19:	e8 87 f0 ff ff       	call   c0001ea5 <move_window>
c0002e1e:	85 c0                	test   eax,eax
c0002e20:	75 a0                	jne    c0002dc2 <get_fat.isra.2+0x51>
c0002e22:	01 f6                	add    esi,esi
c0002e24:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e2a:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002e2e:	e8 4c eb ff ff       	call   c000197f <ld_word>
c0002e33:	0f b7 c8             	movzx  ecx,ax
c0002e36:	eb 2e                	jmp    c0002e66 <get_fat.isra.2+0xf5>
c0002e38:	c1 ea 07             	shr    edx,0x7
c0002e3b:	89 f8                	mov    eax,edi
c0002e3d:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002e40:	e8 60 f0 ff ff       	call   c0001ea5 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	0f 85 75 ff ff ff    	jne    c0002dc2 <get_fat.isra.2+0x51>
c0002e4d:	c1 e6 02             	shl    esi,0x2
c0002e50:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e56:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002e5a:	e8 2d eb ff ff       	call   c000198c <ld_dword>
c0002e5f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e64:	89 c1                	mov    ecx,eax
c0002e66:	83 c4 0c             	add    esp,0xc
c0002e69:	89 c8                	mov    eax,ecx
c0002e6b:	5b                   	pop    ebx
c0002e6c:	5e                   	pop    esi
c0002e6d:	5f                   	pop    edi
c0002e6e:	5d                   	pop    ebp
c0002e6f:	c3                   	ret    
c0002e70:	89 c8                	mov    eax,ecx
c0002e72:	c3                   	ret    

c0002e73 <dir_sdi>:
c0002e73:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0002e79:	0f 87 b6 00 00 00    	ja     c0002f35 <dir_sdi+0xc2>
c0002e7f:	55                   	push   ebp
c0002e80:	57                   	push   edi
c0002e81:	56                   	push   esi
c0002e82:	53                   	push   ebx
c0002e83:	89 d3                	mov    ebx,edx
c0002e85:	83 ec 1c             	sub    esp,0x1c
c0002e88:	f6 c2 1f             	test   dl,0x1f
c0002e8b:	74 0a                	je     c0002e97 <dir_sdi+0x24>
c0002e8d:	b8 02 00 00 00       	mov    eax,0x2
c0002e92:	e9 96 00 00 00       	jmp    c0002f2d <dir_sdi+0xba>
c0002e97:	89 c6                	mov    esi,eax
c0002e99:	8b 38                	mov    edi,DWORD PTR [eax]
c0002e9b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0002e9e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0002ea1:	85 c9                	test   ecx,ecx
c0002ea3:	75 23                	jne    c0002ec8 <dir_sdi+0x55>
c0002ea5:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002ea8:	76 07                	jbe    c0002eb1 <dir_sdi+0x3e>
c0002eaa:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 15                	jne    c0002ec6 <dir_sdi+0x53>
c0002eb1:	89 da                	mov    edx,ebx
c0002eb3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002eb7:	c1 ea 05             	shr    edx,0x5
c0002eba:	39 c2                	cmp    edx,eax
c0002ebc:	73 cf                	jae    c0002e8d <dir_sdi+0x1a>
c0002ebe:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002ec1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002ec4:	eb 3d                	jmp    c0002f03 <dir_sdi+0x90>
c0002ec6:	89 c1                	mov    ecx,eax
c0002ec8:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002ecc:	c1 e5 09             	shl    ebp,0x9
c0002ecf:	89 ca                	mov    edx,ecx
c0002ed1:	39 eb                	cmp    ebx,ebp
c0002ed3:	72 1c                	jb     c0002ef1 <dir_sdi+0x7e>
c0002ed5:	8b 06                	mov    eax,DWORD PTR [esi]
c0002ed7:	e8 95 fe ff ff       	call   c0002d71 <get_fat.isra.2>
c0002edc:	89 c1                	mov    ecx,eax
c0002ede:	83 f8 ff             	cmp    eax,0xffffffff
c0002ee1:	74 45                	je     c0002f28 <dir_sdi+0xb5>
c0002ee3:	83 f8 01             	cmp    eax,0x1
c0002ee6:	76 a5                	jbe    c0002e8d <dir_sdi+0x1a>
c0002ee8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0002eeb:	76 a0                	jbe    c0002e8d <dir_sdi+0x1a>
c0002eed:	29 eb                	sub    ebx,ebp
c0002eef:	eb de                	jmp    c0002ecf <dir_sdi+0x5c>
c0002ef1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002ef5:	89 f8                	mov    eax,edi
c0002ef7:	e8 c9 ec ff ff       	call   c0001bc5 <clst2sect>
c0002efc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f00:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002f03:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0002f06:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0002f09:	85 d2                	test   edx,edx
c0002f0b:	74 80                	je     c0002e8d <dir_sdi+0x1a>
c0002f0d:	89 d8                	mov    eax,ebx
c0002f0f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f15:	c1 e8 09             	shr    eax,0x9
c0002f18:	01 d0                	add    eax,edx
c0002f1a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002f1d:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0002f21:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002f24:	31 c0                	xor    eax,eax
c0002f26:	eb 05                	jmp    c0002f2d <dir_sdi+0xba>
c0002f28:	b8 01 00 00 00       	mov    eax,0x1
c0002f2d:	83 c4 1c             	add    esp,0x1c
c0002f30:	5b                   	pop    ebx
c0002f31:	5e                   	pop    esi
c0002f32:	5f                   	pop    edi
c0002f33:	5d                   	pop    ebp
c0002f34:	c3                   	ret    
c0002f35:	b8 02 00 00 00       	mov    eax,0x2
c0002f3a:	c3                   	ret    

c0002f3b <create_chain>:
c0002f3b:	55                   	push   ebp
c0002f3c:	89 c5                	mov    ebp,eax
c0002f3e:	57                   	push   edi
c0002f3f:	89 d7                	mov    edi,edx
c0002f41:	56                   	push   esi
c0002f42:	53                   	push   ebx
c0002f43:	83 ec 1c             	sub    esp,0x1c
c0002f46:	85 d2                	test   edx,edx
c0002f48:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f4a:	75 0e                	jne    c0002f5a <create_chain+0x1f>
c0002f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0002f4f:	85 c9                	test   ecx,ecx
c0002f51:	74 34                	je     c0002f87 <create_chain+0x4c>
c0002f53:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0002f56:	77 34                	ja     c0002f8c <create_chain+0x51>
c0002f58:	eb 2d                	jmp    c0002f87 <create_chain+0x4c>
c0002f5a:	89 f0                	mov    eax,esi
c0002f5c:	e8 10 fe ff ff       	call   c0002d71 <get_fat.isra.2>
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	83 f8 01             	cmp    eax,0x1
c0002f66:	77 0a                	ja     c0002f72 <create_chain+0x37>
c0002f68:	bb 01 00 00 00       	mov    ebx,0x1
c0002f6d:	e9 f9 00 00 00       	jmp    c000306b <create_chain+0x130>
c0002f72:	83 f8 ff             	cmp    eax,0xffffffff
c0002f75:	0f 84 ed 00 00 00    	je     c0003068 <create_chain+0x12d>
c0002f7b:	89 f9                	mov    ecx,edi
c0002f7d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0002f80:	76 0a                	jbe    c0002f8c <create_chain+0x51>
c0002f82:	e9 e4 00 00 00       	jmp    c000306b <create_chain+0x130>
c0002f87:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0002f90:	75 07                	jne    c0002f99 <create_chain+0x5e>
c0002f92:	31 db                	xor    ebx,ebx
c0002f94:	e9 d2 00 00 00       	jmp    c000306b <create_chain+0x130>
c0002f99:	39 f9                	cmp    ecx,edi
c0002f9b:	75 46                	jne    c0002fe3 <create_chain+0xa8>
c0002f9d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0002fa0:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0002fa3:	77 05                	ja     c0002faa <create_chain+0x6f>
c0002fa5:	bb 02 00 00 00       	mov    ebx,0x2
c0002faa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002fae:	89 da                	mov    edx,ebx
c0002fb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002fb3:	e8 b9 fd ff ff       	call   c0002d71 <get_fat.isra.2>
c0002fb8:	83 f8 01             	cmp    eax,0x1
c0002fbb:	74 ab                	je     c0002f68 <create_chain+0x2d>
c0002fbd:	83 f8 ff             	cmp    eax,0xffffffff
c0002fc0:	0f 84 a2 00 00 00    	je     c0003068 <create_chain+0x12d>
c0002fc6:	85 c0                	test   eax,eax
c0002fc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002fcc:	74 11                	je     c0002fdf <create_chain+0xa4>
c0002fce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0002fd1:	83 f8 01             	cmp    eax,0x1
c0002fd4:	76 0d                	jbe    c0002fe3 <create_chain+0xa8>
c0002fd6:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0002fd9:	73 08                	jae    c0002fe3 <create_chain+0xa8>
c0002fdb:	89 c1                	mov    ecx,eax
c0002fdd:	eb 04                	jmp    c0002fe3 <create_chain+0xa8>
c0002fdf:	85 db                	test   ebx,ebx
c0002fe1:	75 3d                	jne    c0003020 <create_chain+0xe5>
c0002fe3:	89 cb                	mov    ebx,ecx
c0002fe5:	43                   	inc    ebx
c0002fe6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0002fe9:	77 0a                	ja     c0002ff5 <create_chain+0xba>
c0002feb:	83 f9 01             	cmp    ecx,0x1
c0002fee:	76 a2                	jbe    c0002f92 <create_chain+0x57>
c0002ff0:	bb 02 00 00 00       	mov    ebx,0x2
c0002ff5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002ff9:	89 da                	mov    edx,ebx
c0002ffb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002ffe:	e8 6e fd ff ff       	call   c0002d71 <get_fat.isra.2>
c0003003:	85 c0                	test   eax,eax
c0003005:	74 19                	je     c0003020 <create_chain+0xe5>
c0003007:	83 f8 01             	cmp    eax,0x1
c000300a:	0f 84 58 ff ff ff    	je     c0002f68 <create_chain+0x2d>
c0003010:	40                   	inc    eax
c0003011:	74 55                	je     c0003068 <create_chain+0x12d>
c0003013:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003017:	39 cb                	cmp    ebx,ecx
c0003019:	75 ca                	jne    c0002fe5 <create_chain+0xaa>
c000301b:	e9 72 ff ff ff       	jmp    c0002f92 <create_chain+0x57>
c0003020:	83 c9 ff             	or     ecx,0xffffffff
c0003023:	89 da                	mov    edx,ebx
c0003025:	89 f0                	mov    eax,esi
c0003027:	e8 ce f2 ff ff       	call   c00022fa <put_fat>
c000302c:	85 c0                	test   eax,eax
c000302e:	75 31                	jne    c0003061 <create_chain+0x126>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 16                	jne    c000304a <create_chain+0x10f>
c0003034:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003037:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000303a:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000303d:	8d 57 fe             	lea    edx,[edi-0x2]
c0003040:	39 d0                	cmp    eax,edx
c0003042:	77 17                	ja     c000305b <create_chain+0x120>
c0003044:	48                   	dec    eax
c0003045:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003048:	eb 11                	jmp    c000305b <create_chain+0x120>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	89 fa                	mov    edx,edi
c000304e:	89 f0                	mov    eax,esi
c0003050:	e8 a5 f2 ff ff       	call   c00022fa <put_fat>
c0003055:	85 c0                	test   eax,eax
c0003057:	74 db                	je     c0003034 <create_chain+0xf9>
c0003059:	eb 06                	jmp    c0003061 <create_chain+0x126>
c000305b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000305f:	eb 0a                	jmp    c000306b <create_chain+0x130>
c0003061:	48                   	dec    eax
c0003062:	0f 85 00 ff ff ff    	jne    c0002f68 <create_chain+0x2d>
c0003068:	83 cb ff             	or     ebx,0xffffffff
c000306b:	83 c4 1c             	add    esp,0x1c
c000306e:	89 d8                	mov    eax,ebx
c0003070:	5b                   	pop    ebx
c0003071:	5e                   	pop    esi
c0003072:	5f                   	pop    edi
c0003073:	5d                   	pop    ebp
c0003074:	c3                   	ret    

c0003075 <remove_chain>:
c0003075:	55                   	push   ebp
c0003076:	57                   	push   edi
c0003077:	56                   	push   esi
c0003078:	89 d6                	mov    esi,edx
c000307a:	53                   	push   ebx
c000307b:	83 ec 0c             	sub    esp,0xc
c000307e:	83 fa 01             	cmp    edx,0x1
c0003081:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003083:	76 65                	jbe    c00030ea <remove_chain+0x75>
c0003085:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003088:	76 60                	jbe    c00030ea <remove_chain+0x75>
c000308a:	89 c5                	mov    ebp,eax
c000308c:	89 ca                	mov    edx,ecx
c000308e:	85 c9                	test   ecx,ecx
c0003090:	74 0e                	je     c00030a0 <remove_chain+0x2b>
c0003092:	83 c9 ff             	or     ecx,0xffffffff
c0003095:	89 d8                	mov    eax,ebx
c0003097:	e8 5e f2 ff ff       	call   c00022fa <put_fat>
c000309c:	85 c0                	test   eax,eax
c000309e:	75 56                	jne    c00030f6 <remove_chain+0x81>
c00030a0:	89 f2                	mov    edx,esi
c00030a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00030a5:	e8 c7 fc ff ff       	call   c0002d71 <get_fat.isra.2>
c00030aa:	89 c7                	mov    edi,eax
c00030ac:	85 c0                	test   eax,eax
c00030ae:	75 04                	jne    c00030b4 <remove_chain+0x3f>
c00030b0:	31 c0                	xor    eax,eax
c00030b2:	eb 42                	jmp    c00030f6 <remove_chain+0x81>
c00030b4:	83 f8 01             	cmp    eax,0x1
c00030b7:	74 31                	je     c00030ea <remove_chain+0x75>
c00030b9:	83 f8 ff             	cmp    eax,0xffffffff
c00030bc:	74 33                	je     c00030f1 <remove_chain+0x7c>
c00030be:	31 c9                	xor    ecx,ecx
c00030c0:	89 f2                	mov    edx,esi
c00030c2:	89 d8                	mov    eax,ebx
c00030c4:	e8 31 f2 ff ff       	call   c00022fa <put_fat>
c00030c9:	85 c0                	test   eax,eax
c00030cb:	75 29                	jne    c00030f6 <remove_chain+0x81>
c00030cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00030d0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00030d3:	8d 4a fe             	lea    ecx,[edx-0x2]
c00030d6:	39 c8                	cmp    eax,ecx
c00030d8:	73 08                	jae    c00030e2 <remove_chain+0x6d>
c00030da:	40                   	inc    eax
c00030db:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00030df:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00030e2:	89 fe                	mov    esi,edi
c00030e4:	39 fa                	cmp    edx,edi
c00030e6:	77 b8                	ja     c00030a0 <remove_chain+0x2b>
c00030e8:	eb c6                	jmp    c00030b0 <remove_chain+0x3b>
c00030ea:	b8 02 00 00 00       	mov    eax,0x2
c00030ef:	eb 05                	jmp    c00030f6 <remove_chain+0x81>
c00030f1:	b8 01 00 00 00       	mov    eax,0x1
c00030f6:	83 c4 0c             	add    esp,0xc
c00030f9:	5b                   	pop    ebx
c00030fa:	5e                   	pop    esi
c00030fb:	5f                   	pop    edi
c00030fc:	5d                   	pop    ebp
c00030fd:	c3                   	ret    

c00030fe <dir_next>:
c00030fe:	55                   	push   ebp
c00030ff:	57                   	push   edi
c0003100:	56                   	push   esi
c0003101:	53                   	push   ebx
c0003102:	83 ec 1c             	sub    esp,0x1c
c0003105:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003108:	8b 28                	mov    ebp,DWORD PTR [eax]
c000310a:	83 c7 20             	add    edi,0x20
c000310d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003113:	76 07                	jbe    c000311c <dir_next+0x1e>
c0003115:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000311c:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000311f:	b9 04 00 00 00       	mov    ecx,0x4
c0003124:	85 f6                	test   esi,esi
c0003126:	0f 84 cd 00 00 00    	je     c00031f9 <dir_next+0xfb>
c000312c:	89 c3                	mov    ebx,eax
c000312e:	89 d1                	mov    ecx,edx
c0003130:	89 f8                	mov    eax,edi
c0003132:	25 ff 01 00 00       	and    eax,0x1ff
c0003137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000313b:	0f 85 a8 00 00 00    	jne    c00031e9 <dir_next+0xeb>
c0003141:	46                   	inc    esi
c0003142:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003145:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003148:	85 d2                	test   edx,edx
c000314a:	75 22                	jne    c000316e <dir_next+0x70>
c000314c:	89 fa                	mov    edx,edi
c000314e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003152:	c1 ea 05             	shr    edx,0x5
c0003155:	39 c2                	cmp    edx,eax
c0003157:	0f 82 8c 00 00 00    	jb     c00031e9 <dir_next+0xeb>
c000315d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003164:	b9 04 00 00 00       	mov    ecx,0x4
c0003169:	e9 8b 00 00 00       	jmp    c00031f9 <dir_next+0xfb>
c000316e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003172:	89 fe                	mov    esi,edi
c0003174:	48                   	dec    eax
c0003175:	c1 ee 09             	shr    esi,0x9
c0003178:	85 f0                	test   eax,esi
c000317a:	75 6d                	jne    c00031e9 <dir_next+0xeb>
c000317c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003180:	89 e8                	mov    eax,ebp
c0003182:	e8 ea fb ff ff       	call   c0002d71 <get_fat.isra.2>
c0003187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000318b:	89 c6                	mov    esi,eax
c000318d:	83 f8 01             	cmp    eax,0x1
c0003190:	77 07                	ja     c0003199 <dir_next+0x9b>
c0003192:	b9 02 00 00 00       	mov    ecx,0x2
c0003197:	eb 60                	jmp    c00031f9 <dir_next+0xfb>
c0003199:	83 f8 ff             	cmp    eax,0xffffffff
c000319c:	75 07                	jne    c00031a5 <dir_next+0xa7>
c000319e:	b9 01 00 00 00       	mov    ecx,0x1
c00031a3:	eb 54                	jmp    c00031f9 <dir_next+0xfb>
c00031a5:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00031a8:	77 30                	ja     c00031da <dir_next+0xdc>
c00031aa:	85 c9                	test   ecx,ecx
c00031ac:	74 af                	je     c000315d <dir_next+0x5f>
c00031ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00031b1:	89 d8                	mov    eax,ebx
c00031b3:	e8 83 fd ff ff       	call   c0002f3b <create_chain>
c00031b8:	b9 07 00 00 00       	mov    ecx,0x7
c00031bd:	89 c6                	mov    esi,eax
c00031bf:	85 c0                	test   eax,eax
c00031c1:	74 36                	je     c00031f9 <dir_next+0xfb>
c00031c3:	83 f8 01             	cmp    eax,0x1
c00031c6:	74 ca                	je     c0003192 <dir_next+0x94>
c00031c8:	83 f8 ff             	cmp    eax,0xffffffff
c00031cb:	74 d1                	je     c000319e <dir_next+0xa0>
c00031cd:	89 c2                	mov    edx,eax
c00031cf:	89 e8                	mov    eax,ebp
c00031d1:	e8 74 f2 ff ff       	call   c000244a <dir_clear>
c00031d6:	85 c0                	test   eax,eax
c00031d8:	75 c4                	jne    c000319e <dir_next+0xa0>
c00031da:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00031dd:	89 f2                	mov    edx,esi
c00031df:	89 e8                	mov    eax,ebp
c00031e1:	e8 df e9 ff ff       	call   c0001bc5 <clst2sect>
c00031e6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00031e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00031ed:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00031f0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00031f4:	31 c9                	xor    ecx,ecx
c00031f6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00031f9:	83 c4 1c             	add    esp,0x1c
c00031fc:	89 c8                	mov    eax,ecx
c00031fe:	5b                   	pop    ebx
c00031ff:	5e                   	pop    esi
c0003200:	5f                   	pop    edi
c0003201:	5d                   	pop    ebp
c0003202:	c3                   	ret    

c0003203 <dir_alloc>:
c0003203:	55                   	push   ebp
c0003204:	89 c5                	mov    ebp,eax
c0003206:	57                   	push   edi
c0003207:	89 d7                	mov    edi,edx
c0003209:	56                   	push   esi
c000320a:	31 d2                	xor    edx,edx
c000320c:	53                   	push   ebx
c000320d:	83 ec 0c             	sub    esp,0xc
c0003210:	8b 30                	mov    esi,DWORD PTR [eax]
c0003212:	e8 5c fc ff ff       	call   c0002e73 <dir_sdi>
c0003217:	85 c0                	test   eax,eax
c0003219:	75 37                	jne    c0003252 <dir_alloc+0x4f>
c000321b:	31 db                	xor    ebx,ebx
c000321d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 7e ec ff ff       	call   c0001ea5 <move_window>
c0003227:	85 c0                	test   eax,eax
c0003229:	75 27                	jne    c0003252 <dir_alloc+0x4f>
c000322b:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000322e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003230:	84 d2                	test   dl,dl
c0003232:	74 05                	je     c0003239 <dir_alloc+0x36>
c0003234:	80 fa e5             	cmp    dl,0xe5
c0003237:	75 07                	jne    c0003240 <dir_alloc+0x3d>
c0003239:	43                   	inc    ebx
c000323a:	39 fb                	cmp    ebx,edi
c000323c:	75 04                	jne    c0003242 <dir_alloc+0x3f>
c000323e:	eb 1c                	jmp    c000325c <dir_alloc+0x59>
c0003240:	31 db                	xor    ebx,ebx
c0003242:	ba 01 00 00 00       	mov    edx,0x1
c0003247:	89 e8                	mov    eax,ebp
c0003249:	e8 b0 fe ff ff       	call   c00030fe <dir_next>
c000324e:	85 c0                	test   eax,eax
c0003250:	74 cb                	je     c000321d <dir_alloc+0x1a>
c0003252:	83 f8 04             	cmp    eax,0x4
c0003255:	75 05                	jne    c000325c <dir_alloc+0x59>
c0003257:	b8 07 00 00 00       	mov    eax,0x7
c000325c:	83 c4 0c             	add    esp,0xc
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <dir_read>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	bf ff ff ff ff       	mov    edi,0xffffffff
c000326b:	56                   	push   esi
c000326c:	be 04 00 00 00       	mov    esi,0x4
c0003271:	53                   	push   ebx
c0003272:	89 c3                	mov    ebx,eax
c0003274:	83 ec 1c             	sub    esp,0x1c
c0003277:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000327b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000327d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003282:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003285:	85 d2                	test   edx,edx
c0003287:	0f 84 d8 00 00 00    	je     c0003365 <dir_read+0x101>
c000328d:	89 e8                	mov    eax,ebp
c000328f:	e8 11 ec ff ff       	call   c0001ea5 <move_window>
c0003294:	89 c6                	mov    esi,eax
c0003296:	85 c0                	test   eax,eax
c0003298:	0f 85 d2 00 00 00    	jne    c0003370 <dir_read+0x10c>
c000329e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00032a1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00032a3:	84 c9                	test   cl,cl
c00032a5:	0f 84 c0 00 00 00    	je     c000336b <dir_read+0x107>
c00032ab:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00032ae:	83 e0 3f             	and    eax,0x3f
c00032b1:	80 f9 2e             	cmp    cl,0x2e
c00032b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00032b8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00032bb:	0f 84 8a 00 00 00    	je     c000334b <dir_read+0xe7>
c00032c1:	80 f9 e5             	cmp    cl,0xe5
c00032c4:	0f 84 81 00 00 00    	je     c000334b <dir_read+0xe7>
c00032ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032ce:	83 e0 1f             	and    eax,0x1f
c00032d1:	83 f8 08             	cmp    eax,0x8
c00032d4:	0f 94 c0             	sete   al
c00032d7:	0f b6 c0             	movzx  eax,al
c00032da:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00032de:	75 6b                	jne    c000334b <dir_read+0xe7>
c00032e0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00032e5:	75 44                	jne    c000332b <dir_read+0xc7>
c00032e7:	f6 c1 40             	test   cl,0x40
c00032ea:	74 12                	je     c00032fe <dir_read+0x9a>
c00032ec:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00032ef:	83 e1 bf             	and    ecx,0xffffffbf
c00032f2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00032f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00032f9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00032fc:	eb 06                	jmp    c0003304 <dir_read+0xa0>
c00032fe:	89 f8                	mov    eax,edi
c0003300:	38 c8                	cmp    al,cl
c0003302:	75 47                	jne    c000334b <dir_read+0xe7>
c0003304:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003308:	bf ff ff ff ff       	mov    edi,0xffffffff
c000330d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003310:	75 3e                	jne    c0003350 <dir_read+0xec>
c0003312:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003316:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003319:	e8 c4 e8 ff ff       	call   c0001be2 <pick_lfn>
c000331e:	85 c0                	test   eax,eax
c0003320:	74 2e                	je     c0003350 <dir_read+0xec>
c0003322:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003326:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003329:	eb 25                	jmp    c0003350 <dir_read+0xec>
c000332b:	89 f8                	mov    eax,edi
c000332d:	84 c0                	test   al,al
c000332f:	75 11                	jne    c0003342 <dir_read+0xde>
c0003331:	89 d0                	mov    eax,edx
c0003333:	e8 64 ea ff ff       	call   c0001d9c <sum_sfn>
c0003338:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000333c:	75 04                	jne    c0003342 <dir_read+0xde>
c000333e:	31 f6                	xor    esi,esi
c0003340:	eb 35                	jmp    c0003377 <dir_read+0x113>
c0003342:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003349:	eb 2c                	jmp    c0003377 <dir_read+0x113>
c000334b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003350:	31 d2                	xor    edx,edx
c0003352:	89 d8                	mov    eax,ebx
c0003354:	e8 a5 fd ff ff       	call   c00030fe <dir_next>
c0003359:	89 c6                	mov    esi,eax
c000335b:	85 c0                	test   eax,eax
c000335d:	0f 84 1f ff ff ff    	je     c0003282 <dir_read+0x1e>
c0003363:	eb 0b                	jmp    c0003370 <dir_read+0x10c>
c0003365:	85 f6                	test   esi,esi
c0003367:	74 d5                	je     c000333e <dir_read+0xda>
c0003369:	eb 05                	jmp    c0003370 <dir_read+0x10c>
c000336b:	be 04 00 00 00       	mov    esi,0x4
c0003370:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003377:	83 c4 1c             	add    esp,0x1c
c000337a:	89 f0                	mov    eax,esi
c000337c:	5b                   	pop    ebx
c000337d:	5e                   	pop    esi
c000337e:	5f                   	pop    edi
c000337f:	5d                   	pop    ebp
c0003380:	c3                   	ret    

c0003381 <dir_remove>:
c0003381:	57                   	push   edi
c0003382:	56                   	push   esi
c0003383:	53                   	push   ebx
c0003384:	89 c3                	mov    ebx,eax
c0003386:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003389:	8b 30                	mov    esi,DWORD PTR [eax]
c000338b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000338e:	83 fa ff             	cmp    edx,0xffffffff
c0003391:	74 09                	je     c000339c <dir_remove+0x1b>
c0003393:	e8 db fa ff ff       	call   c0002e73 <dir_sdi>
c0003398:	85 c0                	test   eax,eax
c000339a:	75 34                	jne    c00033d0 <dir_remove+0x4f>
c000339c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000339f:	89 f0                	mov    eax,esi
c00033a1:	e8 ff ea ff ff       	call   c0001ea5 <move_window>
c00033a6:	85 c0                	test   eax,eax
c00033a8:	75 1c                	jne    c00033c6 <dir_remove+0x45>
c00033aa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00033ad:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00033b0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00033b4:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00033b7:	73 17                	jae    c00033d0 <dir_remove+0x4f>
c00033b9:	31 d2                	xor    edx,edx
c00033bb:	89 d8                	mov    eax,ebx
c00033bd:	e8 3c fd ff ff       	call   c00030fe <dir_next>
c00033c2:	85 c0                	test   eax,eax
c00033c4:	74 d6                	je     c000339c <dir_remove+0x1b>
c00033c6:	83 f8 04             	cmp    eax,0x4
c00033c9:	75 05                	jne    c00033d0 <dir_remove+0x4f>
c00033cb:	b8 02 00 00 00       	mov    eax,0x2
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	c3                   	ret    

c00033d4 <dir_find>:
c00033d4:	55                   	push   ebp
c00033d5:	31 d2                	xor    edx,edx
c00033d7:	57                   	push   edi
c00033d8:	56                   	push   esi
c00033d9:	53                   	push   ebx
c00033da:	89 c3                	mov    ebx,eax
c00033dc:	83 ec 1c             	sub    esp,0x1c
c00033df:	8b 00                	mov    eax,DWORD PTR [eax]
c00033e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033e5:	89 d8                	mov    eax,ebx
c00033e7:	e8 87 fa ff ff       	call   c0002e73 <dir_sdi>
c00033ec:	89 c6                	mov    esi,eax
c00033ee:	85 c0                	test   eax,eax
c00033f0:	0f 85 02 01 00 00    	jne    c00034f8 <dir_find+0x124>
c00033f6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00033fd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003402:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003407:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000340a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000340e:	e8 92 ea ff ff       	call   c0001ea5 <move_window>
c0003413:	89 c6                	mov    esi,eax
c0003415:	85 c0                	test   eax,eax
c0003417:	0f 85 db 00 00 00    	jne    c00034f8 <dir_find+0x124>
c000341d:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003420:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003423:	84 c9                	test   cl,cl
c0003425:	0f 84 c8 00 00 00    	je     c00034f3 <dir_find+0x11f>
c000342b:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000342e:	88 d0                	mov    al,dl
c0003430:	83 e0 3f             	and    eax,0x3f
c0003433:	80 f9 e5             	cmp    cl,0xe5
c0003436:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003439:	0f 84 93 00 00 00    	je     c00034d2 <dir_find+0xfe>
c000343f:	80 e2 08             	and    dl,0x8
c0003442:	74 0a                	je     c000344e <dir_find+0x7a>
c0003444:	3c 0f                	cmp    al,0xf
c0003446:	0f 85 86 00 00 00    	jne    c00034d2 <dir_find+0xfe>
c000344c:	eb 04                	jmp    c0003452 <dir_find+0x7e>
c000344e:	3c 0f                	cmp    al,0xf
c0003450:	75 54                	jne    c00034a6 <dir_find+0xd2>
c0003452:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003456:	0f 85 82 00 00 00    	jne    c00034de <dir_find+0x10a>
c000345c:	f6 c1 40             	test   cl,0x40
c000345f:	74 12                	je     c0003473 <dir_find+0x9f>
c0003461:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003464:	83 e1 bf             	and    ecx,0xffffffbf
c0003467:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000346b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000346e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003471:	eb 06                	jmp    c0003479 <dir_find+0xa5>
c0003473:	89 f8                	mov    eax,edi
c0003475:	38 c8                	cmp    al,cl
c0003477:	75 60                	jne    c00034d9 <dir_find+0x105>
c0003479:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000347d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003482:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003485:	75 57                	jne    c00034de <dir_find+0x10a>
c0003487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000348b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000348f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003492:	89 ea                	mov    edx,ebp
c0003494:	e8 88 f3 ff ff       	call   c0002821 <cmp_lfn>
c0003499:	85 c0                	test   eax,eax
c000349b:	74 41                	je     c00034de <dir_find+0x10a>
c000349d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00034a1:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034a4:	eb 38                	jmp    c00034de <dir_find+0x10a>
c00034a6:	89 f8                	mov    eax,edi
c00034a8:	84 c0                	test   al,al
c00034aa:	75 0d                	jne    c00034b9 <dir_find+0xe5>
c00034ac:	89 e8                	mov    eax,ebp
c00034ae:	e8 e9 e8 ff ff       	call   c0001d9c <sum_sfn>
c00034b3:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00034b7:	74 3f                	je     c00034f8 <dir_find+0x124>
c00034b9:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00034bd:	75 13                	jne    c00034d2 <dir_find+0xfe>
c00034bf:	8d 53 20             	lea    edx,[ebx+0x20]
c00034c2:	b9 0b 00 00 00       	mov    ecx,0xb
c00034c7:	89 e8                	mov    eax,ebp
c00034c9:	e8 fd e4 ff ff       	call   c00019cb <mem_cmp>
c00034ce:	85 c0                	test   eax,eax
c00034d0:	74 26                	je     c00034f8 <dir_find+0x124>
c00034d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00034d9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034de:	31 d2                	xor    edx,edx
c00034e0:	89 d8                	mov    eax,ebx
c00034e2:	e8 17 fc ff ff       	call   c00030fe <dir_next>
c00034e7:	89 c6                	mov    esi,eax
c00034e9:	85 c0                	test   eax,eax
c00034eb:	0f 84 16 ff ff ff    	je     c0003407 <dir_find+0x33>
c00034f1:	eb 05                	jmp    c00034f8 <dir_find+0x124>
c00034f3:	be 04 00 00 00       	mov    esi,0x4
c00034f8:	83 c4 1c             	add    esp,0x1c
c00034fb:	89 f0                	mov    eax,esi
c00034fd:	5b                   	pop    ebx
c00034fe:	5e                   	pop    esi
c00034ff:	5f                   	pop    edi
c0003500:	5d                   	pop    ebp
c0003501:	c3                   	ret    

c0003502 <follow_path>:
c0003502:	56                   	push   esi
c0003503:	53                   	push   ebx
c0003504:	89 c3                	mov    ebx,eax
c0003506:	83 ec 14             	sub    esp,0x14
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 30                	mov    esi,DWORD PTR [eax]
c000350f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003513:	8a 10                	mov    dl,BYTE PTR [eax]
c0003515:	80 fa 5c             	cmp    dl,0x5c
c0003518:	75 07                	jne    c0003521 <follow_path+0x1f>
c000351a:	40                   	inc    eax
c000351b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000351f:	eb ee                	jmp    c000350f <follow_path+0xd>
c0003521:	80 fa 2f             	cmp    dl,0x2f
c0003524:	74 f4                	je     c000351a <follow_path+0x18>
c0003526:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000352d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003530:	77 3e                	ja     c0003570 <follow_path+0x6e>
c0003532:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003536:	31 d2                	xor    edx,edx
c0003538:	89 d8                	mov    eax,ebx
c000353a:	e8 34 f9 ff ff       	call   c0002e73 <dir_sdi>
c000353f:	eb 4f                	jmp    c0003590 <follow_path+0x8e>
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 8c fe ff ff       	call   c00033d4 <dir_find>
c0003548:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000354b:	85 c0                	test   eax,eax
c000354d:	75 32                	jne    c0003581 <follow_path+0x7f>
c000354f:	80 e2 04             	and    dl,0x4
c0003552:	75 3c                	jne    c0003590 <follow_path+0x8e>
c0003554:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003558:	74 31                	je     c000358b <follow_path+0x89>
c000355a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000355d:	25 ff 01 00 00       	and    eax,0x1ff
c0003562:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003566:	8a 06                	mov    al,BYTE PTR [esi]
c0003568:	e8 b3 f7 ff ff       	call   c0002d20 <ld_clust.isra.0>
c000356d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003570:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003574:	89 d8                	mov    eax,ebx
c0003576:	e8 ca ef ff ff       	call   c0002545 <create_name>
c000357b:	85 c0                	test   eax,eax
c000357d:	74 c2                	je     c0003541 <follow_path+0x3f>
c000357f:	eb 0f                	jmp    c0003590 <follow_path+0x8e>
c0003581:	83 f8 04             	cmp    eax,0x4
c0003584:	75 0a                	jne    c0003590 <follow_path+0x8e>
c0003586:	80 e2 04             	and    dl,0x4
c0003589:	75 05                	jne    c0003590 <follow_path+0x8e>
c000358b:	b8 05 00 00 00       	mov    eax,0x5
c0003590:	83 c4 14             	add    esp,0x14
c0003593:	5b                   	pop    ebx
c0003594:	5e                   	pop    esi
c0003595:	c3                   	ret    

c0003596 <dir_register>:
c0003596:	55                   	push   ebp
c0003597:	57                   	push   edi
c0003598:	56                   	push   esi
c0003599:	be 06 00 00 00       	mov    esi,0x6
c000359e:	53                   	push   ebx
c000359f:	83 ec 2c             	sub    esp,0x2c
c00035a2:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c00035a6:	0f 85 66 01 00 00    	jne    c0003712 <dir_register+0x17c>
c00035ac:	8b 38                	mov    edi,DWORD PTR [eax]
c00035ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00035b6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c00035b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035bd:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c00035c2:	74 06                	je     c00035ca <dir_register+0x34>
c00035c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00035c8:	eb ef                	jmp    c00035b9 <dir_register+0x23>
c00035ca:	89 c3                	mov    ebx,eax
c00035cc:	b9 0c 00 00 00       	mov    ecx,0xc
c00035d1:	8d 40 20             	lea    eax,[eax+0x20]
c00035d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035d8:	89 c2                	mov    edx,eax
c00035da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00035de:	e8 c8 e3 ff ff       	call   c00019ab <mem_cpy>
c00035e3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00035e8:	74 48                	je     c0003632 <dir_register+0x9c>
c00035ea:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00035ee:	bd 01 00 00 00       	mov    ebp,0x1
c00035f3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00035f6:	55                   	push   ebp
c00035f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00035fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00035ff:	e8 dc e6 ff ff       	call   c0001ce0 <gen_numname>
c0003604:	58                   	pop    eax
c0003605:	89 d8                	mov    eax,ebx
c0003607:	e8 c8 fd ff ff       	call   c00033d4 <dir_find>
c000360c:	89 c6                	mov    esi,eax
c000360e:	85 c0                	test   eax,eax
c0003610:	75 10                	jne    c0003622 <dir_register+0x8c>
c0003612:	45                   	inc    ebp
c0003613:	83 fd 64             	cmp    ebp,0x64
c0003616:	75 db                	jne    c00035f3 <dir_register+0x5d>
c0003618:	be 07 00 00 00       	mov    esi,0x7
c000361d:	e9 f0 00 00 00       	jmp    c0003712 <dir_register+0x17c>
c0003622:	83 f8 04             	cmp    eax,0x4
c0003625:	0f 85 e7 00 00 00    	jne    c0003712 <dir_register+0x17c>
c000362b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000362f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003632:	bd 01 00 00 00       	mov    ebp,0x1
c0003637:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000363c:	74 13                	je     c0003651 <dir_register+0xbb>
c000363e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003642:	b9 0d 00 00 00       	mov    ecx,0xd
c0003647:	83 c0 0c             	add    eax,0xc
c000364a:	31 d2                	xor    edx,edx
c000364c:	f7 f1                	div    ecx
c000364e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003651:	89 ea                	mov    edx,ebp
c0003653:	89 d8                	mov    eax,ebx
c0003655:	e8 a9 fb ff ff       	call   c0003203 <dir_alloc>
c000365a:	89 c6                	mov    esi,eax
c000365c:	85 c0                	test   eax,eax
c000365e:	0f 85 ae 00 00 00    	jne    c0003712 <dir_register+0x17c>
c0003664:	4d                   	dec    ebp
c0003665:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003669:	74 67                	je     c00036d2 <dir_register+0x13c>
c000366b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000366e:	89 e8                	mov    eax,ebp
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	29 c2                	sub    edx,eax
c0003675:	89 d8                	mov    eax,ebx
c0003677:	e8 f7 f7 ff ff       	call   c0002e73 <dir_sdi>
c000367c:	89 c6                	mov    esi,eax
c000367e:	85 c0                	test   eax,eax
c0003680:	0f 85 8c 00 00 00    	jne    c0003712 <dir_register+0x17c>
c0003686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368a:	e8 0d e7 ff ff       	call   c0001d9c <sum_sfn>
c000368f:	0f b6 e8             	movzx  ebp,al
c0003692:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003695:	89 f8                	mov    eax,edi
c0003697:	e8 09 e8 ff ff       	call   c0001ea5 <move_window>
c000369c:	89 c6                	mov    esi,eax
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 70                	jne    c0003712 <dir_register+0x17c>
c00036a2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00036a7:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00036aa:	83 ec 0c             	sub    esp,0xc
c00036ad:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00036b0:	55                   	push   ebp
c00036b1:	e8 a6 e5 ff ff       	call   c0001c5c <put_lfn>
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00036bc:	89 d8                	mov    eax,ebx
c00036be:	e8 3b fa ff ff       	call   c00030fe <dir_next>
c00036c3:	83 c4 10             	add    esp,0x10
c00036c6:	89 c6                	mov    esi,eax
c00036c8:	85 c0                	test   eax,eax
c00036ca:	75 46                	jne    c0003712 <dir_register+0x17c>
c00036cc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00036d0:	75 c0                	jne    c0003692 <dir_register+0xfc>
c00036d2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00036d5:	89 f8                	mov    eax,edi
c00036d7:	e8 c9 e7 ff ff       	call   c0001ea5 <move_window>
c00036dc:	89 c6                	mov    esi,eax
c00036de:	85 c0                	test   eax,eax
c00036e0:	75 30                	jne    c0003712 <dir_register+0x17c>
c00036e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00036e5:	b9 20 00 00 00       	mov    ecx,0x20
c00036ea:	31 d2                	xor    edx,edx
c00036ec:	e8 cf e2 ff ff       	call   c00019c0 <mem_set>
c00036f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00036f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00036f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00036fd:	e8 a9 e2 ff ff       	call   c00019ab <mem_cpy>
c0003702:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003705:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003708:	83 e0 18             	and    eax,0x18
c000370b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000370e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003712:	83 c4 2c             	add    esp,0x2c
c0003715:	89 f0                	mov    eax,esi
c0003717:	5b                   	pop    ebx
c0003718:	5e                   	pop    esi
c0003719:	5f                   	pop    edi
c000371a:	5d                   	pop    ebp
c000371b:	c3                   	ret    

c000371c <f_mount>:
c000371c:	53                   	push   ebx
c000371d:	83 ec 18             	sub    esp,0x18
c0003720:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003724:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000372c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003730:	e8 79 e6 ff ff       	call   c0001dae <get_ldnumber>
c0003735:	89 c2                	mov    edx,eax
c0003737:	b8 0b 00 00 00       	mov    eax,0xb
c000373c:	85 d2                	test   edx,edx
c000373e:	78 39                	js     c0003779 <f_mount+0x5d>
c0003740:	8b 04 95 00 04 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfc00]
c0003747:	85 c0                	test   eax,eax
c0003749:	74 03                	je     c000374e <f_mount+0x32>
c000374b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000374e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003752:	85 c0                	test   eax,eax
c0003754:	74 03                	je     c0003759 <f_mount+0x3d>
c0003756:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000375d:	89 04 95 00 04 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfc00],eax
c0003764:	31 c0                	xor    eax,eax
c0003766:	84 db                	test   bl,bl
c0003768:	74 0f                	je     c0003779 <f_mount+0x5d>
c000376a:	31 c9                	xor    ecx,ecx
c000376c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003770:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003774:	e8 7f e8 ff ff       	call   c0001ff8 <mount_volume>
c0003779:	83 c4 18             	add    esp,0x18
c000377c:	5b                   	pop    ebx
c000377d:	c3                   	ret    

c000377e <f_open>:
c000377e:	55                   	push   ebp
c000377f:	b8 09 00 00 00       	mov    eax,0x9
c0003784:	57                   	push   edi
c0003785:	56                   	push   esi
c0003786:	53                   	push   ebx
c0003787:	83 ec 5c             	sub    esp,0x5c
c000378a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000378e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003792:	85 db                	test   ebx,ebx
c0003794:	0f 84 a7 02 00 00    	je     c0003a41 <f_open+0x2c3>
c000379a:	89 fe                	mov    esi,edi
c000379c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00037a0:	83 e6 3f             	and    esi,0x3f
c00037a3:	89 f0                	mov    eax,esi
c00037a5:	0f b6 c8             	movzx  ecx,al
c00037a8:	8d 44 24 74          	lea    eax,[esp+0x74]
c00037ac:	e8 47 e8 ff ff       	call   c0001ff8 <mount_volume>
c00037b1:	85 c0                	test   eax,eax
c00037b3:	0f 85 82 02 00 00    	jne    c0003a3b <f_open+0x2bd>
c00037b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00037bd:	83 ec 0c             	sub    esp,0xc
c00037c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00037c4:	68 00 02 00 00       	push   0x200
c00037c9:	e8 fe 1e 00 00       	call   c00056cc <ff_memalloc>
c00037ce:	83 c4 10             	add    esp,0x10
c00037d1:	89 c5                	mov    ebp,eax
c00037d3:	b8 11 00 00 00       	mov    eax,0x11
c00037d8:	85 ed                	test   ebp,ebp
c00037da:	0f 84 61 02 00 00    	je     c0003a41 <f_open+0x2c3>
c00037e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00037e4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00037e8:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00037eb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00037ef:	e8 0e fd ff ff       	call   c0003502 <follow_path>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	75 0c                	jne    c0003804 <f_open+0x86>
c00037f8:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00037fd:	79 05                	jns    c0003804 <f_open+0x86>
c00037ff:	b8 06 00 00 00       	mov    eax,0x6
c0003804:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000380a:	0f 84 de 00 00 00    	je     c00038ee <f_open+0x170>
c0003810:	85 c0                	test   eax,eax
c0003812:	74 1e                	je     c0003832 <f_open+0xb4>
c0003814:	83 f8 04             	cmp    eax,0x4
c0003817:	0f 85 06 02 00 00    	jne    c0003a23 <f_open+0x2a5>
c000381d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003821:	83 ce 08             	or     esi,0x8
c0003824:	e8 6d fd ff ff       	call   c0003596 <dir_register>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 2f                	je     c000385c <f_open+0xde>
c000382d:	e9 f1 01 00 00       	jmp    c0003a23 <f_open+0x2a5>
c0003832:	b8 07 00 00 00       	mov    eax,0x7
c0003837:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c000383c:	0f 85 e1 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c0003842:	b8 08 00 00 00       	mov    eax,0x8
c0003847:	f7 c7 04 00 00 00    	test   edi,0x4
c000384d:	0f 85 d0 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c0003853:	83 e7 08             	and    edi,0x8
c0003856:	0f 84 bf 00 00 00    	je     c000391b <f_open+0x19d>
c000385c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003860:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003864:	89 ca                	mov    edx,ecx
c0003866:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000386a:	8a 00                	mov    al,BYTE PTR [eax]
c000386c:	e8 af f4 ff ff       	call   c0002d20 <ld_clust.isra.0>
c0003871:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003875:	89 c7                	mov    edi,eax
c0003877:	ba 00 00 21 50       	mov    edx,0x50210000
c000387c:	8d 41 0e             	lea    eax,[ecx+0xe]
c000387f:	e8 24 e1 ff ff       	call   c00019a8 <st_dword>
c0003884:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003888:	31 c9                	xor    ecx,ecx
c000388a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000388e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003892:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003896:	e8 ae f4 ff ff       	call   c0002d49 <st_clust.isra.1>
c000389b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000389f:	31 d2                	xor    edx,edx
c00038a1:	83 c0 1c             	add    eax,0x1c
c00038a4:	e8 ff e0 ff ff       	call   c00019a8 <st_dword>
c00038a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038ad:	85 ff                	test   edi,edi
c00038af:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00038b3:	74 66                	je     c000391b <f_open+0x19d>
c00038b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00038be:	89 fa                	mov    edx,edi
c00038c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00038c8:	e8 a8 f7 ff ff       	call   c0003075 <remove_chain>
c00038cd:	85 c0                	test   eax,eax
c00038cf:	0f 85 4e 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c00038d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00038d9:	4f                   	dec    edi
c00038da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038de:	e8 c2 e5 ff ff       	call   c0001ea5 <move_window>
c00038e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00038e7:	85 c0                	test   eax,eax
c00038e9:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c00038ec:	eb 27                	jmp    c0003915 <f_open+0x197>
c00038ee:	85 c0                	test   eax,eax
c00038f0:	0f 85 2d 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c00038f6:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c00038fa:	b8 04 00 00 00       	mov    eax,0x4
c00038ff:	f6 c2 10             	test   dl,0x10
c0003902:	0f 85 1b 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c0003908:	83 e7 02             	and    edi,0x2
c000390b:	74 0e                	je     c000391b <f_open+0x19d>
c000390d:	b8 07 00 00 00       	mov    eax,0x7
c0003912:	80 e2 01             	and    dl,0x1
c0003915:	0f 85 08 01 00 00    	jne    c0003a23 <f_open+0x2a5>
c000391b:	f7 c6 08 00 00 00    	test   esi,0x8
c0003921:	74 03                	je     c0003926 <f_open+0x1a8>
c0003923:	83 ce 40             	or     esi,0x40
c0003926:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000392a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000392e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003931:	89 fa                	mov    edx,edi
c0003933:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003937:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000393a:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000393d:	8a 01                	mov    al,BYTE PTR [ecx]
c000393f:	e8 dc f3 ff ff       	call   c0002d20 <ld_clust.isra.0>
c0003944:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003947:	8d 47 1c             	lea    eax,[edi+0x1c]
c000394a:	e8 3d e0 ff ff       	call   c000198c <ld_dword>
c000394f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003953:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003956:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003958:	31 d2                	xor    edx,edx
c000395a:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c000395e:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003962:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003966:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000396d:	89 f0                	mov    eax,esi
c000396f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003976:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003979:	b9 00 02 00 00       	mov    ecx,0x200
c000397e:	8d 43 28             	lea    eax,[ebx+0x28]
c0003981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003985:	e8 36 e0 ff ff       	call   c00019c0 <mem_set>
c000398a:	83 e6 20             	and    esi,0x20
c000398d:	75 07                	jne    c0003996 <f_open+0x218>
c000398f:	31 c0                	xor    eax,eax
c0003991:	e9 8d 00 00 00       	jmp    c0003a23 <f_open+0x2a5>
c0003996:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003999:	85 ff                	test   edi,edi
c000399b:	74 f2                	je     c000398f <f_open+0x211>
c000399d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00039a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039a4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00039a7:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00039ab:	c1 e6 09             	shl    esi,0x9
c00039ae:	39 fe                	cmp    esi,edi
c00039b0:	73 1c                	jae    c00039ce <f_open+0x250>
c00039b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00039b4:	29 f7                	sub    edi,esi
c00039b6:	e8 b6 f3 ff ff       	call   c0002d71 <get_fat.isra.2>
c00039bb:	89 c2                	mov    edx,eax
c00039bd:	83 f8 01             	cmp    eax,0x1
c00039c0:	76 10                	jbe    c00039d2 <f_open+0x254>
c00039c2:	83 f8 ff             	cmp    eax,0xffffffff
c00039c5:	75 e7                	jne    c00039ae <f_open+0x230>
c00039c7:	b8 01 00 00 00       	mov    eax,0x1
c00039cc:	eb 09                	jmp    c00039d7 <f_open+0x259>
c00039ce:	31 c0                	xor    eax,eax
c00039d0:	eb 05                	jmp    c00039d7 <f_open+0x259>
c00039d2:	b8 02 00 00 00       	mov    eax,0x2
c00039d7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00039da:	85 c0                	test   eax,eax
c00039dc:	75 45                	jne    c0003a23 <f_open+0x2a5>
c00039de:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c00039e4:	74 a9                	je     c000398f <f_open+0x211>
c00039e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00039ea:	89 f0                	mov    eax,esi
c00039ec:	e8 d4 e1 ff ff       	call   c0001bc5 <clst2sect>
c00039f1:	89 c2                	mov    edx,eax
c00039f3:	b8 02 00 00 00       	mov    eax,0x2
c00039f8:	85 d2                	test   edx,edx
c00039fa:	74 27                	je     c0003a23 <f_open+0x2a5>
c00039fc:	89 f9                	mov    ecx,edi
c00039fe:	c1 e9 09             	shr    ecx,0x9
c0003a01:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003a04:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a07:	6a 01                	push   0x1
c0003a09:	50                   	push   eax
c0003a0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003a0e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003a12:	50                   	push   eax
c0003a13:	e8 1c df ff ff       	call   c0001934 <disk_read>
c0003a18:	83 c4 10             	add    esp,0x10
c0003a1b:	85 c0                	test   eax,eax
c0003a1d:	0f 95 c0             	setne  al
c0003a20:	0f b6 c0             	movzx  eax,al
c0003a23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a27:	83 ec 0c             	sub    esp,0xc
c0003a2a:	55                   	push   ebp
c0003a2b:	e8 b4 1c 00 00       	call   c00056e4 <ff_memfree>
c0003a30:	83 c4 10             	add    esp,0x10
c0003a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a37:	85 c0                	test   eax,eax
c0003a39:	74 06                	je     c0003a41 <f_open+0x2c3>
c0003a3b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003a41:	83 c4 5c             	add    esp,0x5c
c0003a44:	5b                   	pop    ebx
c0003a45:	5e                   	pop    esi
c0003a46:	5f                   	pop    edi
c0003a47:	5d                   	pop    ebp
c0003a48:	c3                   	ret    

c0003a49 <f_read>:
c0003a49:	55                   	push   ebp
c0003a4a:	57                   	push   edi
c0003a4b:	56                   	push   esi
c0003a4c:	53                   	push   ebx
c0003a4d:	83 ec 2c             	sub    esp,0x2c
c0003a50:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003a54:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003a58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003a5e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003a62:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003a66:	89 d8                	mov    eax,ebx
c0003a68:	e8 8e e3 ff ff       	call   c0001dfb <validate>
c0003a6d:	89 c5                	mov    ebp,eax
c0003a6f:	85 c0                	test   eax,eax
c0003a71:	0f 85 c7 01 00 00    	jne    c0003c3e <f_read+0x1f5>
c0003a77:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003a7b:	85 ed                	test   ebp,ebp
c0003a7d:	0f 85 bb 01 00 00    	jne    c0003c3e <f_read+0x1f5>
c0003a83:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003a87:	0f 84 ac 01 00 00    	je     c0003c39 <f_read+0x1f0>
c0003a8d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003a90:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003a93:	89 c7                	mov    edi,eax
c0003a95:	39 f0                	cmp    eax,esi
c0003a97:	0f 86 ad 00 00 00    	jbe    c0003b4a <f_read+0x101>
c0003a9d:	89 f7                	mov    edi,esi
c0003a9f:	e9 a6 00 00 00       	jmp    c0003b4a <f_read+0x101>
c0003aa4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003aa7:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003aad:	0f 85 5b 01 00 00    	jne    c0003c0e <f_read+0x1c5>
c0003ab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ab7:	89 d1                	mov    ecx,edx
c0003ab9:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003abd:	c1 e9 09             	shr    ecx,0x9
c0003ac0:	48                   	dec    eax
c0003ac1:	21 c8                	and    eax,ecx
c0003ac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ac7:	0f 84 8a 00 00 00    	je     c0003b57 <f_read+0x10e>
c0003acd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ad1:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ad4:	89 c8                	mov    eax,ecx
c0003ad6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ada:	e8 e6 e0 ff ff       	call   c0001bc5 <clst2sect>
c0003adf:	85 c0                	test   eax,eax
c0003ae1:	0f 84 88 00 00 00    	je     c0003b6f <f_read+0x126>
c0003ae7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003aeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003af3:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003af9:	0f 86 bd 00 00 00    	jbe    c0003bbc <f_read+0x173>
c0003aff:	89 fe                	mov    esi,edi
c0003b01:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003b05:	c1 ee 09             	shr    esi,0x9
c0003b08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003b0c:	01 f2                	add    edx,esi
c0003b0e:	39 c2                	cmp    edx,eax
c0003b10:	76 06                	jbe    c0003b18 <f_read+0xcf>
c0003b12:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003b16:	89 c6                	mov    esi,eax
c0003b18:	56                   	push   esi
c0003b19:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003b1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003b21:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003b25:	50                   	push   eax
c0003b26:	e8 09 de ff ff       	call   c0001934 <disk_read>
c0003b2b:	83 c4 10             	add    esp,0x10
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	75 50                	jne    c0003b82 <f_read+0x139>
c0003b32:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003b36:	78 60                	js     c0003b98 <f_read+0x14f>
c0003b38:	c1 e6 09             	shl    esi,0x9
c0003b3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003b3f:	29 f7                	sub    edi,esi
c0003b41:	01 30                	add    DWORD PTR [eax],esi
c0003b43:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003b47:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003b4a:	85 ff                	test   edi,edi
c0003b4c:	0f 85 52 ff ff ff    	jne    c0003aa4 <f_read+0x5b>
c0003b52:	e9 e7 00 00 00       	jmp    c0003c3e <f_read+0x1f5>
c0003b57:	85 d2                	test   edx,edx
c0003b59:	75 05                	jne    c0003b60 <f_read+0x117>
c0003b5b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003b5e:	eb 0a                	jmp    c0003b6a <f_read+0x121>
c0003b60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b65:	e8 07 f2 ff ff       	call   c0002d71 <get_fat.isra.2>
c0003b6a:	83 f8 01             	cmp    eax,0x1
c0003b6d:	77 0e                	ja     c0003b7d <f_read+0x134>
c0003b6f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003b73:	bd 02 00 00 00       	mov    ebp,0x2
c0003b78:	e9 c1 00 00 00       	jmp    c0003c3e <f_read+0x1f5>
c0003b7d:	83 f8 ff             	cmp    eax,0xffffffff
c0003b80:	75 0e                	jne    c0003b90 <f_read+0x147>
c0003b82:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003b86:	bd 01 00 00 00       	mov    ebp,0x1
c0003b8b:	e9 ae 00 00 00       	jmp    c0003c3e <f_read+0x1f5>
c0003b90:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003b93:	e9 35 ff ff ff       	jmp    c0003acd <f_read+0x84>
c0003b98:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b9b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003b9f:	39 f0                	cmp    eax,esi
c0003ba1:	73 95                	jae    c0003b38 <f_read+0xef>
c0003ba3:	c1 e0 09             	shl    eax,0x9
c0003ba6:	8d 53 28             	lea    edx,[ebx+0x28]
c0003ba9:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003bad:	b9 00 02 00 00       	mov    ecx,0x200
c0003bb2:	e8 f4 dd ff ff       	call   c00019ab <mem_cpy>
c0003bb7:	e9 7c ff ff ff       	jmp    c0003b38 <f_read+0xef>
c0003bbc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bbf:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003bc3:	74 42                	je     c0003c07 <f_read+0x1be>
c0003bc5:	8d 73 28             	lea    esi,[ebx+0x28]
c0003bc8:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003bcc:	79 19                	jns    c0003be7 <f_read+0x19e>
c0003bce:	6a 01                	push   0x1
c0003bd0:	50                   	push   eax
c0003bd1:	56                   	push   esi
c0003bd2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003bd6:	50                   	push   eax
c0003bd7:	e8 6e dd ff ff       	call   c000194a <disk_write>
c0003bdc:	83 c4 10             	add    esp,0x10
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	75 9f                	jne    c0003b82 <f_read+0x139>
c0003be3:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003be7:	6a 01                	push   0x1
c0003be9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003bed:	56                   	push   esi
c0003bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003bf2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003bf6:	50                   	push   eax
c0003bf7:	e8 38 dd ff ff       	call   c0001934 <disk_read>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	85 c0                	test   eax,eax
c0003c01:	0f 85 7b ff ff ff    	jne    c0003b82 <f_read+0x139>
c0003c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003c0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003c0e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003c11:	ba 00 02 00 00       	mov    edx,0x200
c0003c16:	25 ff 01 00 00       	and    eax,0x1ff
c0003c1b:	89 fe                	mov    esi,edi
c0003c1d:	29 c2                	sub    edx,eax
c0003c1f:	39 d7                	cmp    edi,edx
c0003c21:	76 02                	jbe    c0003c25 <f_read+0x1dc>
c0003c23:	89 d6                	mov    esi,edx
c0003c25:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003c29:	89 f1                	mov    ecx,esi
c0003c2b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003c2f:	e8 77 dd ff ff       	call   c00019ab <mem_cpy>
c0003c34:	e9 02 ff ff ff       	jmp    c0003b3b <f_read+0xf2>
c0003c39:	bd 07 00 00 00       	mov    ebp,0x7
c0003c3e:	83 c4 2c             	add    esp,0x2c
c0003c41:	89 e8                	mov    eax,ebp
c0003c43:	5b                   	pop    ebx
c0003c44:	5e                   	pop    esi
c0003c45:	5f                   	pop    edi
c0003c46:	5d                   	pop    ebp
c0003c47:	c3                   	ret    

c0003c48 <f_write>:
c0003c48:	55                   	push   ebp
c0003c49:	57                   	push   edi
c0003c4a:	56                   	push   esi
c0003c4b:	53                   	push   ebx
c0003c4c:	83 ec 2c             	sub    esp,0x2c
c0003c4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c61:	89 d8                	mov    eax,ebx
c0003c63:	e8 93 e1 ff ff       	call   c0001dfb <validate>
c0003c68:	89 c5                	mov    ebp,eax
c0003c6a:	85 c0                	test   eax,eax
c0003c6c:	0f 85 00 02 00 00    	jne    c0003e72 <f_write+0x22a>
c0003c72:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c76:	85 ed                	test   ebp,ebp
c0003c78:	0f 85 f4 01 00 00    	jne    c0003e72 <f_write+0x22a>
c0003c7e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003c82:	0f 84 e5 01 00 00    	je     c0003e6d <f_write+0x225>
c0003c88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003c8b:	89 c7                	mov    edi,eax
c0003c8d:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003c91:	0f 83 ea 00 00 00    	jae    c0003d81 <f_write+0x139>
c0003c97:	f7 d0                	not    eax
c0003c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003c9d:	e9 df 00 00 00       	jmp    c0003d81 <f_write+0x139>
c0003ca2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003ca5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003cab:	0f 85 8b 01 00 00    	jne    c0003e3c <f_write+0x1f4>
c0003cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cb5:	89 d1                	mov    ecx,edx
c0003cb7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003cbb:	c1 e9 09             	shr    ecx,0x9
c0003cbe:	48                   	dec    eax
c0003cbf:	21 c8                	and    eax,ecx
c0003cc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cc5:	0f 84 c3 00 00 00    	je     c0003d8e <f_write+0x146>
c0003ccb:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ccf:	0f 88 18 01 00 00    	js     c0003ded <f_write+0x1a5>
c0003cd5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cd9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cdc:	89 c8                	mov    eax,ecx
c0003cde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ce2:	e8 de de ff ff       	call   c0001bc5 <clst2sect>
c0003ce7:	85 c0                	test   eax,eax
c0003ce9:	0f 84 c8 00 00 00    	je     c0003db7 <f_write+0x16f>
c0003cef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003cf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf7:	01 c7                	add    edi,eax
c0003cf9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003d01:	0f 86 0d 01 00 00    	jbe    c0003e14 <f_write+0x1cc>
c0003d07:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003d0b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003d0f:	c1 ee 09             	shr    esi,0x9
c0003d12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d16:	01 f2                	add    edx,esi
c0003d18:	39 c2                	cmp    edx,eax
c0003d1a:	76 06                	jbe    c0003d22 <f_write+0xda>
c0003d1c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003d20:	89 c6                	mov    esi,eax
c0003d22:	56                   	push   esi
c0003d23:	57                   	push   edi
c0003d24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003d28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003d2c:	50                   	push   eax
c0003d2d:	e8 18 dc ff ff       	call   c000194a <disk_write>
c0003d32:	83 c4 10             	add    esp,0x10
c0003d35:	85 c0                	test   eax,eax
c0003d37:	0f 85 8d 00 00 00    	jne    c0003dca <f_write+0x182>
c0003d3d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d40:	29 fa                	sub    edx,edi
c0003d42:	39 f2                	cmp    edx,esi
c0003d44:	73 18                	jae    c0003d5e <f_write+0x116>
c0003d46:	c1 e2 09             	shl    edx,0x9
c0003d49:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d4c:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003d50:	b9 00 02 00 00       	mov    ecx,0x200
c0003d55:	e8 51 dc ff ff       	call   c00019ab <mem_cpy>
c0003d5a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003d5e:	c1 e6 09             	shl    esi,0x9
c0003d61:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003d65:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d69:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d6d:	01 30                	add    DWORD PTR [eax],esi
c0003d6f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003d72:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003d75:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003d78:	39 f0                	cmp    eax,esi
c0003d7a:	73 02                	jae    c0003d7e <f_write+0x136>
c0003d7c:	89 f0                	mov    eax,esi
c0003d7e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d81:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003d86:	0f 85 16 ff ff ff    	jne    c0003ca2 <f_write+0x5a>
c0003d8c:	eb 1b                	jmp    c0003da9 <f_write+0x161>
c0003d8e:	85 d2                	test   edx,edx
c0003d90:	75 09                	jne    c0003d9b <f_write+0x153>
c0003d92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d95:	85 c0                	test   eax,eax
c0003d97:	75 19                	jne    c0003db2 <f_write+0x16a>
c0003d99:	eb 03                	jmp    c0003d9e <f_write+0x156>
c0003d9b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9e:	89 d8                	mov    eax,ebx
c0003da0:	e8 96 f1 ff ff       	call   c0002f3b <create_chain>
c0003da5:	85 c0                	test   eax,eax
c0003da7:	75 09                	jne    c0003db2 <f_write+0x16a>
c0003da9:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003dad:	e9 c0 00 00 00       	jmp    c0003e72 <f_write+0x22a>
c0003db2:	83 f8 01             	cmp    eax,0x1
c0003db5:	75 0e                	jne    c0003dc5 <f_write+0x17d>
c0003db7:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003dbb:	bd 02 00 00 00       	mov    ebp,0x2
c0003dc0:	e9 ad 00 00 00       	jmp    c0003e72 <f_write+0x22a>
c0003dc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003dc8:	75 0e                	jne    c0003dd8 <f_write+0x190>
c0003dca:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003dce:	bd 01 00 00 00       	mov    ebp,0x1
c0003dd3:	e9 9a 00 00 00       	jmp    c0003e72 <f_write+0x22a>
c0003dd8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003ddb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003ddf:	0f 85 e6 fe ff ff    	jne    c0003ccb <f_write+0x83>
c0003de5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003de8:	e9 de fe ff ff       	jmp    c0003ccb <f_write+0x83>
c0003ded:	6a 01                	push   0x1
c0003def:	8d 43 28             	lea    eax,[ebx+0x28]
c0003df2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003df5:	50                   	push   eax
c0003df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dfa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dfe:	50                   	push   eax
c0003dff:	e8 46 db ff ff       	call   c000194a <disk_write>
c0003e04:	83 c4 10             	add    esp,0x10
c0003e07:	85 c0                	test   eax,eax
c0003e09:	75 bf                	jne    c0003dca <f_write+0x182>
c0003e0b:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003e0f:	e9 c1 fe ff ff       	jmp    c0003cd5 <f_write+0x8d>
c0003e14:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003e17:	74 20                	je     c0003e39 <f_write+0x1f1>
c0003e19:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e1c:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003e1f:	76 18                	jbe    c0003e39 <f_write+0x1f1>
c0003e21:	6a 01                	push   0x1
c0003e23:	8d 43 28             	lea    eax,[ebx+0x28]
c0003e26:	57                   	push   edi
c0003e27:	50                   	push   eax
c0003e28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003e2c:	50                   	push   eax
c0003e2d:	e8 02 db ff ff       	call   c0001934 <disk_read>
c0003e32:	83 c4 10             	add    esp,0x10
c0003e35:	85 c0                	test   eax,eax
c0003e37:	75 91                	jne    c0003dca <f_write+0x182>
c0003e39:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0003e3c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e3f:	ba 00 02 00 00       	mov    edx,0x200
c0003e44:	25 ff 01 00 00       	and    eax,0x1ff
c0003e49:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e4d:	29 c2                	sub    edx,eax
c0003e4f:	39 d6                	cmp    esi,edx
c0003e51:	76 02                	jbe    c0003e55 <f_write+0x20d>
c0003e53:	89 d6                	mov    esi,edx
c0003e55:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0003e59:	89 f1                	mov    ecx,esi
c0003e5b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0003e5f:	e8 47 db ff ff       	call   c00019ab <mem_cpy>
c0003e64:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0003e68:	e9 f4 fe ff ff       	jmp    c0003d61 <f_write+0x119>
c0003e6d:	bd 07 00 00 00       	mov    ebp,0x7
c0003e72:	83 c4 2c             	add    esp,0x2c
c0003e75:	89 e8                	mov    eax,ebp
c0003e77:	5b                   	pop    ebx
c0003e78:	5e                   	pop    esi
c0003e79:	5f                   	pop    edi
c0003e7a:	5d                   	pop    ebp
c0003e7b:	c3                   	ret    

c0003e7c <f_sync>:
c0003e7c:	56                   	push   esi
c0003e7d:	53                   	push   ebx
c0003e7e:	83 ec 14             	sub    esp,0x14
c0003e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0003e85:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003e89:	89 d8                	mov    eax,ebx
c0003e8b:	e8 6b df ff ff       	call   c0001dfb <validate>
c0003e90:	85 c0                	test   eax,eax
c0003e92:	0f 85 93 00 00 00    	jne    c0003f2b <f_sync+0xaf>
c0003e98:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0003e9b:	f6 c2 40             	test   dl,0x40
c0003e9e:	0f 84 87 00 00 00    	je     c0003f2b <f_sync+0xaf>
c0003ea4:	84 d2                	test   dl,dl
c0003ea6:	79 29                	jns    c0003ed1 <f_sync+0x55>
c0003ea8:	6a 01                	push   0x1
c0003eaa:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ead:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003eb0:	50                   	push   eax
c0003eb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003eb9:	50                   	push   eax
c0003eba:	e8 8b da ff ff       	call   c000194a <disk_write>
c0003ebf:	83 c4 10             	add    esp,0x10
c0003ec2:	89 c2                	mov    edx,eax
c0003ec4:	b8 01 00 00 00       	mov    eax,0x1
c0003ec9:	85 d2                	test   edx,edx
c0003ecb:	75 5e                	jne    c0003f2b <f_sync+0xaf>
c0003ecd:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003ed1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0003ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ed8:	e8 c8 df ff ff       	call   c0001ea5 <move_window>
c0003edd:	85 c0                	test   eax,eax
c0003edf:	75 4a                	jne    c0003f2b <f_sync+0xaf>
c0003ee1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0003ee4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0003ee8:	89 f2                	mov    edx,esi
c0003eea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003eef:	e8 55 ee ff ff       	call   c0002d49 <st_clust.isra.1>
c0003ef4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0003ef7:	8d 46 1c             	lea    eax,[esi+0x1c]
c0003efa:	e8 a9 da ff ff       	call   c00019a8 <st_dword>
c0003eff:	8d 46 16             	lea    eax,[esi+0x16]
c0003f02:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f07:	e8 9c da ff ff       	call   c00019a8 <st_dword>
c0003f0c:	8d 46 12             	lea    eax,[esi+0x12]
c0003f0f:	31 d2                	xor    edx,edx
c0003f11:	e8 8e da ff ff       	call   c00019a4 <st_word>
c0003f16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f22:	e8 bd e9 ff ff       	call   c00028e4 <sync_fs>
c0003f27:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0003f2b:	83 c4 14             	add    esp,0x14
c0003f2e:	5b                   	pop    ebx
c0003f2f:	5e                   	pop    esi
c0003f30:	c3                   	ret    

c0003f31 <f_close>:
c0003f31:	53                   	push   ebx
c0003f32:	83 ec 24             	sub    esp,0x24
c0003f35:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0003f39:	53                   	push   ebx
c0003f3a:	e8 3d ff ff ff       	call   c0003e7c <f_sync>
c0003f3f:	83 c4 10             	add    esp,0x10
c0003f42:	85 c0                	test   eax,eax
c0003f44:	75 15                	jne    c0003f5b <f_close+0x2a>
c0003f46:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003f4a:	89 d8                	mov    eax,ebx
c0003f4c:	e8 aa de ff ff       	call   c0001dfb <validate>
c0003f51:	85 c0                	test   eax,eax
c0003f53:	75 06                	jne    c0003f5b <f_close+0x2a>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 18             	add    esp,0x18
c0003f5e:	5b                   	pop    ebx
c0003f5f:	c3                   	ret    

c0003f60 <f_lseek>:
c0003f60:	55                   	push   ebp
c0003f61:	57                   	push   edi
c0003f62:	56                   	push   esi
c0003f63:	53                   	push   ebx
c0003f64:	83 ec 2c             	sub    esp,0x2c
c0003f67:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f6b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0003f6f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f73:	89 d8                	mov    eax,ebx
c0003f75:	e8 81 de ff ff       	call   c0001dfb <validate>
c0003f7a:	89 c5                	mov    ebp,eax
c0003f7c:	85 c0                	test   eax,eax
c0003f7e:	0f 85 79 01 00 00    	jne    c00040fd <f_lseek+0x19d>
c0003f84:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f88:	85 ed                	test   ebp,ebp
c0003f8a:	0f 85 6d 01 00 00    	jne    c00040fd <f_lseek+0x19d>
c0003f90:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f93:	39 f0                	cmp    eax,esi
c0003f95:	73 08                	jae    c0003f9f <f_lseek+0x3f>
c0003f97:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003f9b:	75 02                	jne    c0003f9f <f_lseek+0x3f>
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0003fa2:	85 f6                	test   esi,esi
c0003fa4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003fab:	75 07                	jne    c0003fb4 <f_lseek+0x54>
c0003fad:	31 f6                	xor    esi,esi
c0003faf:	e9 e2 00 00 00       	jmp    c0004096 <f_lseek+0x136>
c0003fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb8:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0003fbc:	c1 e7 09             	shl    edi,0x9
c0003fbf:	85 c9                	test   ecx,ecx
c0003fc1:	74 28                	je     c0003feb <f_lseek+0x8b>
c0003fc3:	49                   	dec    ecx
c0003fc4:	31 d2                	xor    edx,edx
c0003fc6:	8d 46 ff             	lea    eax,[esi-0x1]
c0003fc9:	f7 f7                	div    edi
c0003fcb:	31 d2                	xor    edx,edx
c0003fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003fd1:	89 c8                	mov    eax,ecx
c0003fd3:	f7 f7                	div    edi
c0003fd5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0003fd9:	72 10                	jb     c0003feb <f_lseek+0x8b>
c0003fdb:	89 f8                	mov    eax,edi
c0003fdd:	f7 d8                	neg    eax
c0003fdf:	21 c1                	and    ecx,eax
c0003fe1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003fe4:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0003fe7:	29 ce                	sub    esi,ecx
c0003fe9:	eb 3c                	jmp    c0004027 <f_lseek+0xc7>
c0003feb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fee:	85 c0                	test   eax,eax
c0003ff0:	75 32                	jne    c0004024 <f_lseek+0xc4>
c0003ff2:	31 d2                	xor    edx,edx
c0003ff4:	89 d8                	mov    eax,ebx
c0003ff6:	e8 40 ef ff ff       	call   c0002f3b <create_chain>
c0003ffb:	83 f8 01             	cmp    eax,0x1
c0003ffe:	75 0e                	jne    c000400e <f_lseek+0xae>
c0004000:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004004:	bd 02 00 00 00       	mov    ebp,0x2
c0004009:	e9 ef 00 00 00       	jmp    c00040fd <f_lseek+0x19d>
c000400e:	83 f8 ff             	cmp    eax,0xffffffff
c0004011:	75 0e                	jne    c0004021 <f_lseek+0xc1>
c0004013:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004017:	bd 01 00 00 00       	mov    ebp,0x1
c000401c:	e9 dc 00 00 00       	jmp    c00040fd <f_lseek+0x19d>
c0004021:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004024:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004027:	85 c0                	test   eax,eax
c0004029:	74 82                	je     c0003fad <f_lseek+0x4d>
c000402b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000402e:	39 fe                	cmp    esi,edi
c0004030:	76 3d                	jbe    c000406f <f_lseek+0x10f>
c0004032:	01 fa                	add    edx,edi
c0004034:	29 fe                	sub    esi,edi
c0004036:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004039:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000403d:	89 c2                	mov    edx,eax
c000403f:	74 0d                	je     c000404e <f_lseek+0xee>
c0004041:	89 d8                	mov    eax,ebx
c0004043:	e8 f3 ee ff ff       	call   c0002f3b <create_chain>
c0004048:	85 c0                	test   eax,eax
c000404a:	75 09                	jne    c0004055 <f_lseek+0xf5>
c000404c:	eb 1f                	jmp    c000406d <f_lseek+0x10d>
c000404e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004050:	e8 1c ed ff ff       	call   c0002d71 <get_fat.isra.2>
c0004055:	83 f8 ff             	cmp    eax,0xffffffff
c0004058:	74 b9                	je     c0004013 <f_lseek+0xb3>
c000405a:	83 f8 01             	cmp    eax,0x1
c000405d:	76 a1                	jbe    c0004000 <f_lseek+0xa0>
c000405f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004063:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004066:	76 98                	jbe    c0004000 <f_lseek+0xa0>
c0004068:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406b:	eb be                	jmp    c000402b <f_lseek+0xcb>
c000406d:	31 f6                	xor    esi,esi
c000406f:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004072:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004078:	0f 84 2f ff ff ff    	je     c0003fad <f_lseek+0x4d>
c000407e:	89 c2                	mov    edx,eax
c0004080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004084:	e8 3c db ff ff       	call   c0001bc5 <clst2sect>
c0004089:	85 c0                	test   eax,eax
c000408b:	0f 84 6f ff ff ff    	je     c0004000 <f_lseek+0xa0>
c0004091:	c1 ee 09             	shr    esi,0x9
c0004094:	01 c6                	add    esi,eax
c0004096:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004099:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000409c:	76 07                	jbe    c00040a5 <f_lseek+0x145>
c000409e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00040a1:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00040a5:	a9 ff 01 00 00       	test   eax,0x1ff
c00040aa:	74 51                	je     c00040fd <f_lseek+0x19d>
c00040ac:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040af:	39 f0                	cmp    eax,esi
c00040b1:	74 4a                	je     c00040fd <f_lseek+0x19d>
c00040b3:	8d 7b 28             	lea    edi,[ebx+0x28]
c00040b6:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040ba:	79 21                	jns    c00040dd <f_lseek+0x17d>
c00040bc:	6a 01                	push   0x1
c00040be:	50                   	push   eax
c00040bf:	57                   	push   edi
c00040c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040c8:	50                   	push   eax
c00040c9:	e8 7c d8 ff ff       	call   c000194a <disk_write>
c00040ce:	83 c4 10             	add    esp,0x10
c00040d1:	85 c0                	test   eax,eax
c00040d3:	0f 85 3a ff ff ff    	jne    c0004013 <f_lseek+0xb3>
c00040d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040dd:	6a 01                	push   0x1
c00040df:	56                   	push   esi
c00040e0:	57                   	push   edi
c00040e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e9:	50                   	push   eax
c00040ea:	e8 45 d8 ff ff       	call   c0001934 <disk_read>
c00040ef:	83 c4 10             	add    esp,0x10
c00040f2:	85 c0                	test   eax,eax
c00040f4:	0f 85 19 ff ff ff    	jne    c0004013 <f_lseek+0xb3>
c00040fa:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00040fd:	83 c4 2c             	add    esp,0x2c
c0004100:	89 e8                	mov    eax,ebp
c0004102:	5b                   	pop    ebx
c0004103:	5e                   	pop    esi
c0004104:	5f                   	pop    edi
c0004105:	5d                   	pop    ebp
c0004106:	c3                   	ret    

c0004107 <f_opendir>:
c0004107:	56                   	push   esi
c0004108:	b8 09 00 00 00       	mov    eax,0x9
c000410d:	53                   	push   ebx
c000410e:	83 ec 24             	sub    esp,0x24
c0004111:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004115:	85 db                	test   ebx,ebx
c0004117:	0f 84 af 00 00 00    	je     c00041cc <f_opendir+0xc5>
c000411d:	31 c9                	xor    ecx,ecx
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004127:	e8 cc de ff ff       	call   c0001ff8 <mount_volume>
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 92 00 00 00    	jne    c00041c6 <f_opendir+0xbf>
c0004134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004138:	83 ec 0c             	sub    esp,0xc
c000413b:	89 03                	mov    DWORD PTR [ebx],eax
c000413d:	68 00 02 00 00       	push   0x200
c0004142:	e8 85 15 00 00       	call   c00056cc <ff_memalloc>
c0004147:	83 c4 10             	add    esp,0x10
c000414a:	89 c6                	mov    esi,eax
c000414c:	b8 11 00 00 00       	mov    eax,0x11
c0004151:	85 f6                	test   esi,esi
c0004153:	74 77                	je     c00041cc <f_opendir+0xc5>
c0004155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004159:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000415d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004160:	89 d8                	mov    eax,ebx
c0004162:	e8 9b f3 ff ff       	call   c0003502 <follow_path>
c0004167:	85 c0                	test   eax,eax
c0004169:	75 37                	jne    c00041a2 <f_opendir+0x9b>
c000416b:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000416f:	78 1c                	js     c000418d <f_opendir+0x86>
c0004171:	b8 05 00 00 00       	mov    eax,0x5
c0004176:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000417a:	74 26                	je     c00041a2 <f_opendir+0x9b>
c000417c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000417f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004183:	8a 00                	mov    al,BYTE PTR [eax]
c0004185:	e8 96 eb ff ff       	call   c0002d20 <ld_clust.isra.0>
c000418a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000418d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004191:	31 d2                	xor    edx,edx
c0004193:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004197:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000419b:	89 d8                	mov    eax,ebx
c000419d:	e8 d1 ec ff ff       	call   c0002e73 <dir_sdi>
c00041a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00041a6:	83 ec 0c             	sub    esp,0xc
c00041a9:	56                   	push   esi
c00041aa:	e8 35 15 00 00       	call   c00056e4 <ff_memfree>
c00041af:	83 c4 10             	add    esp,0x10
c00041b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00041b6:	83 f8 04             	cmp    eax,0x4
c00041b9:	74 06                	je     c00041c1 <f_opendir+0xba>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	74 0d                	je     c00041cc <f_opendir+0xc5>
c00041bf:	eb 05                	jmp    c00041c6 <f_opendir+0xbf>
c00041c1:	b8 05 00 00 00       	mov    eax,0x5
c00041c6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00041cc:	83 c4 24             	add    esp,0x24
c00041cf:	5b                   	pop    ebx
c00041d0:	5e                   	pop    esi
c00041d1:	c3                   	ret    

c00041d2 <f_closedir>:
c00041d2:	53                   	push   ebx
c00041d3:	83 ec 18             	sub    esp,0x18
c00041d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00041da:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00041de:	89 d8                	mov    eax,ebx
c00041e0:	e8 16 dc ff ff       	call   c0001dfb <validate>
c00041e5:	85 c0                	test   eax,eax
c00041e7:	75 06                	jne    c00041ef <f_closedir+0x1d>
c00041e9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00041ef:	83 c4 18             	add    esp,0x18
c00041f2:	5b                   	pop    ebx
c00041f3:	c3                   	ret    

c00041f4 <f_readdir>:
c00041f4:	57                   	push   edi
c00041f5:	56                   	push   esi
c00041f6:	53                   	push   ebx
c00041f7:	83 ec 20             	sub    esp,0x20
c00041fa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00041fe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004202:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004206:	89 d8                	mov    eax,ebx
c0004208:	e8 ee db ff ff       	call   c0001dfb <validate>
c000420d:	85 c0                	test   eax,eax
c000420f:	75 6e                	jne    c000427f <f_readdir+0x8b>
c0004211:	85 ff                	test   edi,edi
c0004213:	75 0b                	jne    c0004220 <f_readdir+0x2c>
c0004215:	31 d2                	xor    edx,edx
c0004217:	89 d8                	mov    eax,ebx
c0004219:	e8 55 ec ff ff       	call   c0002e73 <dir_sdi>
c000421e:	eb 5f                	jmp    c000427f <f_readdir+0x8b>
c0004220:	83 ec 0c             	sub    esp,0xc
c0004223:	68 00 02 00 00       	push   0x200
c0004228:	e8 9f 14 00 00       	call   c00056cc <ff_memalloc>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	b8 11 00 00 00       	mov    eax,0x11
c0004237:	85 f6                	test   esi,esi
c0004239:	74 44                	je     c000427f <f_readdir+0x8b>
c000423b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000423f:	31 d2                	xor    edx,edx
c0004241:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004244:	89 d8                	mov    eax,ebx
c0004246:	e8 19 f0 ff ff       	call   c0003264 <dir_read>
c000424b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004250:	75 19                	jne    c000426b <f_readdir+0x77>
c0004252:	89 fa                	mov    edx,edi
c0004254:	89 d8                	mov    eax,ebx
c0004256:	e8 e1 e8 ff ff       	call   c0002b3c <get_fileinfo>
c000425b:	31 d2                	xor    edx,edx
c000425d:	89 d8                	mov    eax,ebx
c000425f:	e8 9a ee ff ff       	call   c00030fe <dir_next>
c0004264:	83 f8 04             	cmp    eax,0x4
c0004267:	75 02                	jne    c000426b <f_readdir+0x77>
c0004269:	31 c0                	xor    eax,eax
c000426b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000426f:	83 ec 0c             	sub    esp,0xc
c0004272:	56                   	push   esi
c0004273:	e8 6c 14 00 00       	call   c00056e4 <ff_memfree>
c0004278:	83 c4 10             	add    esp,0x10
c000427b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000427f:	83 c4 20             	add    esp,0x20
c0004282:	5b                   	pop    ebx
c0004283:	5e                   	pop    esi
c0004284:	5f                   	pop    edi
c0004285:	c3                   	ret    

c0004286 <f_stat>:
c0004286:	57                   	push   edi
c0004287:	31 c9                	xor    ecx,ecx
c0004289:	56                   	push   esi
c000428a:	53                   	push   ebx
c000428b:	83 ec 30             	sub    esp,0x30
c000428e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004292:	89 e2                	mov    edx,esp
c0004294:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004298:	e8 5b dd ff ff       	call   c0001ff8 <mount_volume>
c000429d:	89 c3                	mov    ebx,eax
c000429f:	85 c0                	test   eax,eax
c00042a1:	75 59                	jne    c00042fc <f_stat+0x76>
c00042a3:	83 ec 0c             	sub    esp,0xc
c00042a6:	bb 11 00 00 00       	mov    ebx,0x11
c00042ab:	68 00 02 00 00       	push   0x200
c00042b0:	e8 17 14 00 00       	call   c00056cc <ff_memalloc>
c00042b5:	83 c4 10             	add    esp,0x10
c00042b8:	89 c6                	mov    esi,eax
c00042ba:	85 c0                	test   eax,eax
c00042bc:	74 3e                	je     c00042fc <f_stat+0x76>
c00042be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00042c5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00042c8:	89 e0                	mov    eax,esp
c00042ca:	e8 33 f2 ff ff       	call   c0003502 <follow_path>
c00042cf:	89 c3                	mov    ebx,eax
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 1b                	jne    c00042f0 <f_stat+0x6a>
c00042d5:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00042da:	78 0f                	js     c00042eb <f_stat+0x65>
c00042dc:	85 ff                	test   edi,edi
c00042de:	74 10                	je     c00042f0 <f_stat+0x6a>
c00042e0:	89 fa                	mov    edx,edi
c00042e2:	89 e0                	mov    eax,esp
c00042e4:	e8 53 e8 ff ff       	call   c0002b3c <get_fileinfo>
c00042e9:	eb 05                	jmp    c00042f0 <f_stat+0x6a>
c00042eb:	bb 06 00 00 00       	mov    ebx,0x6
c00042f0:	83 ec 0c             	sub    esp,0xc
c00042f3:	56                   	push   esi
c00042f4:	e8 eb 13 00 00       	call   c00056e4 <ff_memfree>
c00042f9:	83 c4 10             	add    esp,0x10
c00042fc:	83 c4 30             	add    esp,0x30
c00042ff:	89 d8                	mov    eax,ebx
c0004301:	5b                   	pop    ebx
c0004302:	5e                   	pop    esi
c0004303:	5f                   	pop    edi
c0004304:	c3                   	ret    

c0004305 <f_getfree>:
c0004305:	55                   	push   ebp
c0004306:	31 c9                	xor    ecx,ecx
c0004308:	57                   	push   edi
c0004309:	56                   	push   esi
c000430a:	53                   	push   ebx
c000430b:	83 ec 2c             	sub    esp,0x2c
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004316:	e8 dd dc ff ff       	call   c0001ff8 <mount_volume>
c000431b:	89 c7                	mov    edi,eax
c000431d:	85 c0                	test   eax,eax
c000431f:	0f 85 d8 00 00 00    	jne    c00043fd <f_getfree+0xf8>
c0004325:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004329:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000432d:	89 30                	mov    DWORD PTR [eax],esi
c000432f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004332:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004335:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004338:	39 d0                	cmp    eax,edx
c000433a:	77 0b                	ja     c0004347 <f_getfree+0x42>
c000433c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004340:	89 01                	mov    DWORD PTR [ecx],eax
c0004342:	e9 b6 00 00 00       	jmp    c00043fd <f_getfree+0xf8>
c0004347:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000434a:	75 29                	jne    c0004375 <f_getfree+0x70>
c000434c:	bd 02 00 00 00       	mov    ebp,0x2
c0004351:	31 db                	xor    ebx,ebx
c0004353:	89 ea                	mov    edx,ebp
c0004355:	89 f0                	mov    eax,esi
c0004357:	e8 15 ea ff ff       	call   c0002d71 <get_fat.isra.2>
c000435c:	83 f8 ff             	cmp    eax,0xffffffff
c000435f:	74 7b                	je     c00043dc <f_getfree+0xd7>
c0004361:	83 f8 01             	cmp    eax,0x1
c0004364:	74 7d                	je     c00043e3 <f_getfree+0xde>
c0004366:	83 d3 00             	adc    ebx,0x0
c0004369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000436d:	45                   	inc    ebp
c000436e:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004371:	77 e0                	ja     c0004353 <f_getfree+0x4e>
c0004373:	eb 77                	jmp    c00043ec <f_getfree+0xe7>
c0004375:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004378:	31 db                	xor    ebx,ebx
c000437a:	31 f6                	xor    esi,esi
c000437c:	85 f6                	test   esi,esi
c000437e:	75 18                	jne    c0004398 <f_getfree+0x93>
c0004380:	8d 42 01             	lea    eax,[edx+0x1]
c0004383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004387:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000438b:	e8 15 db ff ff       	call   c0001ea5 <move_window>
c0004390:	85 c0                	test   eax,eax
c0004392:	75 56                	jne    c00043ea <f_getfree+0xe5>
c0004394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004398:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000439c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00043a0:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00043a4:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00043a7:	75 11                	jne    c00043ba <f_getfree+0xb5>
c00043a9:	e8 d1 d5 ff ff       	call   c000197f <ld_word>
c00043ae:	66 83 f8 01          	cmp    ax,0x1
c00043b2:	83 d3 00             	adc    ebx,0x0
c00043b5:	83 c6 02             	add    esi,0x2
c00043b8:	eb 13                	jmp    c00043cd <f_getfree+0xc8>
c00043ba:	e8 cd d5 ff ff       	call   c000198c <ld_dword>
c00043bf:	25 ff ff ff 0f       	and    eax,0xfffffff
c00043c4:	83 f8 01             	cmp    eax,0x1
c00043c7:	83 d3 00             	adc    ebx,0x0
c00043ca:	83 c6 04             	add    esi,0x4
c00043cd:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00043d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00043d7:	4d                   	dec    ebp
c00043d8:	75 a2                	jne    c000437c <f_getfree+0x77>
c00043da:	eb 10                	jmp    c00043ec <f_getfree+0xe7>
c00043dc:	bf 01 00 00 00       	mov    edi,0x1
c00043e1:	eb 09                	jmp    c00043ec <f_getfree+0xe7>
c00043e3:	bf 02 00 00 00       	mov    edi,0x2
c00043e8:	eb 02                	jmp    c00043ec <f_getfree+0xe7>
c00043ea:	89 c7                	mov    edi,eax
c00043ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00043f0:	89 18                	mov    DWORD PTR [eax],ebx
c00043f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00043f6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00043f9:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00043fd:	83 c4 2c             	add    esp,0x2c
c0004400:	89 f8                	mov    eax,edi
c0004402:	5b                   	pop    ebx
c0004403:	5e                   	pop    esi
c0004404:	5f                   	pop    edi
c0004405:	5d                   	pop    ebp
c0004406:	c3                   	ret    

c0004407 <f_truncate>:
c0004407:	56                   	push   esi
c0004408:	53                   	push   ebx
c0004409:	83 ec 14             	sub    esp,0x14
c000440c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004410:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004414:	89 d8                	mov    eax,ebx
c0004416:	e8 e0 d9 ff ff       	call   c0001dfb <validate>
c000441b:	89 c6                	mov    esi,eax
c000441d:	85 c0                	test   eax,eax
c000441f:	0f 85 be 00 00 00    	jne    c00044e3 <f_truncate+0xdc>
c0004425:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004429:	85 f6                	test   esi,esi
c000442b:	0f 85 b2 00 00 00    	jne    c00044e3 <f_truncate+0xdc>
c0004431:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004435:	0f 84 a3 00 00 00    	je     c00044de <f_truncate+0xd7>
c000443b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000443e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004441:	0f 83 9c 00 00 00    	jae    c00044e3 <f_truncate+0xdc>
c0004447:	85 c0                	test   eax,eax
c0004449:	75 15                	jne    c0004460 <f_truncate+0x59>
c000444b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000444e:	31 c9                	xor    ecx,ecx
c0004450:	89 d8                	mov    eax,ebx
c0004452:	e8 1e ec ff ff       	call   c0003075 <remove_chain>
c0004457:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000445e:	eb 35                	jmp    c0004495 <f_truncate+0x8e>
c0004460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004463:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004465:	e8 07 e9 ff ff       	call   c0002d71 <get_fat.isra.2>
c000446a:	89 c2                	mov    edx,eax
c000446c:	b8 01 00 00 00       	mov    eax,0x1
c0004471:	83 fa ff             	cmp    edx,0xffffffff
c0004474:	74 1f                	je     c0004495 <f_truncate+0x8e>
c0004476:	b8 02 00 00 00       	mov    eax,0x2
c000447b:	83 fa 01             	cmp    edx,0x1
c000447e:	74 15                	je     c0004495 <f_truncate+0x8e>
c0004480:	31 c0                	xor    eax,eax
c0004482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004486:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004489:	76 0a                	jbe    c0004495 <f_truncate+0x8e>
c000448b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000448e:	89 d8                	mov    eax,ebx
c0004490:	e8 e0 eb ff ff       	call   c0003075 <remove_chain>
c0004495:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004498:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000449b:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000449e:	83 ca 40             	or     edx,0x40
c00044a1:	85 c0                	test   eax,eax
c00044a3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00044a6:	75 2f                	jne    c00044d7 <f_truncate+0xd0>
c00044a8:	84 d2                	test   dl,dl
c00044aa:	79 37                	jns    c00044e3 <f_truncate+0xdc>
c00044ac:	6a 01                	push   0x1
c00044ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044b4:	50                   	push   eax
c00044b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044bd:	50                   	push   eax
c00044be:	e8 87 d4 ff ff       	call   c000194a <disk_write>
c00044c3:	83 c4 10             	add    esp,0x10
c00044c6:	85 c0                	test   eax,eax
c00044c8:	75 08                	jne    c00044d2 <f_truncate+0xcb>
c00044ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00044ce:	31 f6                	xor    esi,esi
c00044d0:	eb 11                	jmp    c00044e3 <f_truncate+0xdc>
c00044d2:	b8 01 00 00 00       	mov    eax,0x1
c00044d7:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00044da:	89 c6                	mov    esi,eax
c00044dc:	eb 05                	jmp    c00044e3 <f_truncate+0xdc>
c00044de:	be 07 00 00 00       	mov    esi,0x7
c00044e3:	89 f0                	mov    eax,esi
c00044e5:	83 c4 14             	add    esp,0x14
c00044e8:	5b                   	pop    ebx
c00044e9:	5e                   	pop    esi
c00044ea:	c3                   	ret    

c00044eb <f_unlink>:
c00044eb:	55                   	push   ebp
c00044ec:	b9 02 00 00 00       	mov    ecx,0x2
c00044f1:	57                   	push   edi
c00044f2:	56                   	push   esi
c00044f3:	53                   	push   ebx
c00044f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00044fa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044fe:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004505:	e8 ee da ff ff       	call   c0001ff8 <mount_volume>
c000450a:	85 c0                	test   eax,eax
c000450c:	0f 85 f0 00 00 00    	jne    c0004602 <f_unlink+0x117>
c0004512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004516:	83 ec 0c             	sub    esp,0xc
c0004519:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000451d:	68 00 02 00 00       	push   0x200
c0004522:	e8 a5 11 00 00       	call   c00056cc <ff_memalloc>
c0004527:	83 c4 10             	add    esp,0x10
c000452a:	89 c3                	mov    ebx,eax
c000452c:	b8 11 00 00 00       	mov    eax,0x11
c0004531:	85 db                	test   ebx,ebx
c0004533:	0f 84 c9 00 00 00    	je     c0004602 <f_unlink+0x117>
c0004539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000453d:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004544:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004547:	8d 44 24 20          	lea    eax,[esp+0x20]
c000454b:	e8 b2 ef ff ff       	call   c0003502 <follow_path>
c0004550:	85 c0                	test   eax,eax
c0004552:	0f 85 96 00 00 00    	jne    c00045ee <f_unlink+0x103>
c0004558:	b8 06 00 00 00       	mov    eax,0x6
c000455d:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004562:	0f 88 86 00 00 00    	js     c00045ee <f_unlink+0x103>
c0004568:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000456d:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004573:	74 07                	je     c000457c <f_unlink+0x91>
c0004575:	b8 07 00 00 00       	mov    eax,0x7
c000457a:	eb 72                	jmp    c00045ee <f_unlink+0x103>
c000457c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004580:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004584:	8a 07                	mov    al,BYTE PTR [edi]
c0004586:	e8 95 e7 ff ff       	call   c0002d20 <ld_clust.isra.0>
c000458b:	83 e5 10             	and    ebp,0x10
c000458e:	89 c6                	mov    esi,eax
c0004590:	75 0f                	jne    c00045a1 <f_unlink+0xb6>
c0004592:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004596:	e8 e6 ed ff ff       	call   c0003381 <dir_remove>
c000459b:	85 c0                	test   eax,eax
c000459d:	74 2f                	je     c00045ce <f_unlink+0xe3>
c000459f:	eb 4d                	jmp    c00045ee <f_unlink+0x103>
c00045a1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00045a5:	31 d2                	xor    edx,edx
c00045a7:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c00045ab:	8d 44 24 50          	lea    eax,[esp+0x50]
c00045af:	e8 bf e8 ff ff       	call   c0002e73 <dir_sdi>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 36                	jne    c00045ee <f_unlink+0x103>
c00045b8:	31 d2                	xor    edx,edx
c00045ba:	8d 44 24 50          	lea    eax,[esp+0x50]
c00045be:	e8 a1 ec ff ff       	call   c0003264 <dir_read>
c00045c3:	85 c0                	test   eax,eax
c00045c5:	74 ae                	je     c0004575 <f_unlink+0x8a>
c00045c7:	83 f8 04             	cmp    eax,0x4
c00045ca:	75 22                	jne    c00045ee <f_unlink+0x103>
c00045cc:	eb c4                	jmp    c0004592 <f_unlink+0xa7>
c00045ce:	85 f6                	test   esi,esi
c00045d0:	75 0b                	jne    c00045dd <f_unlink+0xf2>
c00045d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045d6:	e8 09 e3 ff ff       	call   c00028e4 <sync_fs>
c00045db:	eb 11                	jmp    c00045ee <f_unlink+0x103>
c00045dd:	31 c9                	xor    ecx,ecx
c00045df:	89 f2                	mov    edx,esi
c00045e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00045e5:	e8 8b ea ff ff       	call   c0003075 <remove_chain>
c00045ea:	85 c0                	test   eax,eax
c00045ec:	74 e4                	je     c00045d2 <f_unlink+0xe7>
c00045ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045f2:	83 ec 0c             	sub    esp,0xc
c00045f5:	53                   	push   ebx
c00045f6:	e8 e9 10 00 00       	call   c00056e4 <ff_memfree>
c00045fb:	83 c4 10             	add    esp,0x10
c00045fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004602:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004608:	5b                   	pop    ebx
c0004609:	5e                   	pop    esi
c000460a:	5f                   	pop    edi
c000460b:	5d                   	pop    ebp
c000460c:	c3                   	ret    

c000460d <f_mkdir>:
c000460d:	57                   	push   edi
c000460e:	b9 02 00 00 00       	mov    ecx,0x2
c0004613:	56                   	push   esi
c0004614:	53                   	push   ebx
c0004615:	83 ec 50             	sub    esp,0x50
c0004618:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000461c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004620:	e8 d3 d9 ff ff       	call   c0001ff8 <mount_volume>
c0004625:	89 c3                	mov    ebx,eax
c0004627:	85 c0                	test   eax,eax
c0004629:	0f 85 70 01 00 00    	jne    c000479f <f_mkdir+0x192>
c000462f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004633:	bb 11 00 00 00       	mov    ebx,0x11
c0004638:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000463c:	83 ec 0c             	sub    esp,0xc
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 83 10 00 00       	call   c00056cc <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c7                	mov    edi,eax
c000464e:	85 c0                	test   eax,eax
c0004650:	0f 84 49 01 00 00    	je     c000479f <f_mkdir+0x192>
c0004656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000465a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000465e:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004661:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004665:	e8 98 ee ff ff       	call   c0003502 <follow_path>
c000466a:	89 c3                	mov    ebx,eax
c000466c:	85 c0                	test   eax,eax
c000466e:	74 3e                	je     c00046ae <f_mkdir+0xa1>
c0004670:	83 f8 04             	cmp    eax,0x4
c0004673:	75 3e                	jne    c00046b3 <f_mkdir+0xa6>
c0004675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004679:	31 d2                	xor    edx,edx
c000467b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004683:	e8 b3 e8 ff ff       	call   c0002f3b <create_chain>
c0004688:	89 c6                	mov    esi,eax
c000468a:	85 c0                	test   eax,eax
c000468c:	74 0c                	je     c000469a <f_mkdir+0x8d>
c000468e:	bb 02 00 00 00       	mov    ebx,0x2
c0004693:	83 f8 01             	cmp    eax,0x1
c0004696:	74 07                	je     c000469f <f_mkdir+0x92>
c0004698:	eb 2a                	jmp    c00046c4 <f_mkdir+0xb7>
c000469a:	bb 07 00 00 00       	mov    ebx,0x7
c000469f:	31 c9                	xor    ecx,ecx
c00046a1:	89 f2                	mov    edx,esi
c00046a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00046a7:	e8 c9 e9 ff ff       	call   c0003075 <remove_chain>
c00046ac:	eb 05                	jmp    c00046b3 <f_mkdir+0xa6>
c00046ae:	bb 08 00 00 00       	mov    ebx,0x8
c00046b3:	83 ec 0c             	sub    esp,0xc
c00046b6:	57                   	push   edi
c00046b7:	e8 28 10 00 00       	call   c00056e4 <ff_memfree>
c00046bc:	83 c4 10             	add    esp,0x10
c00046bf:	e9 db 00 00 00       	jmp    c000479f <f_mkdir+0x192>
c00046c4:	bb 01 00 00 00       	mov    ebx,0x1
c00046c9:	83 f8 ff             	cmp    eax,0xffffffff
c00046cc:	74 d1                	je     c000469f <f_mkdir+0x92>
c00046ce:	89 f2                	mov    edx,esi
c00046d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046d4:	e8 71 dd ff ff       	call   c000244a <dir_clear>
c00046d9:	89 c3                	mov    ebx,eax
c00046db:	85 c0                	test   eax,eax
c00046dd:	75 c0                	jne    c000469f <f_mkdir+0x92>
c00046df:	b9 0b 00 00 00       	mov    ecx,0xb
c00046e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046e8:	ba 20 00 00 00       	mov    edx,0x20
c00046ed:	83 c0 34             	add    eax,0x34
c00046f0:	e8 cb d2 ff ff       	call   c00019c0 <mem_set>
c00046f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046f9:	ba 00 00 21 50       	mov    edx,0x50210000
c00046fe:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004702:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004706:	83 c0 4a             	add    eax,0x4a
c0004709:	e8 9a d2 ff ff       	call   c00019a8 <st_dword>
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	89 f1                	mov    ecx,esi
c0004714:	8d 50 34             	lea    edx,[eax+0x34]
c0004717:	e8 2d e6 ff ff       	call   c0002d49 <st_clust.isra.1>
c000471c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004720:	b9 20 00 00 00       	mov    ecx,0x20
c0004725:	8d 50 34             	lea    edx,[eax+0x34]
c0004728:	83 c0 54             	add    eax,0x54
c000472b:	e8 7b d2 ff ff       	call   c00019ab <mem_cpy>
c0004730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004734:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004738:	8d 50 54             	lea    edx,[eax+0x54]
c000473b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000473f:	e8 05 e6 ff ff       	call   c0002d49 <st_clust.isra.1>
c0004744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004748:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000474c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004750:	e8 41 ee ff ff       	call   c0003596 <dir_register>
c0004755:	89 c3                	mov    ebx,eax
c0004757:	85 c0                	test   eax,eax
c0004759:	0f 85 40 ff ff ff    	jne    c000469f <f_mkdir+0x92>
c000475f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004763:	ba 00 00 21 50       	mov    edx,0x50210000
c0004768:	83 c0 16             	add    eax,0x16
c000476b:	e8 38 d2 ff ff       	call   c00019a8 <st_dword>
c0004770:	89 f1                	mov    ecx,esi
c0004772:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000477a:	e8 ca e5 ff ff       	call   c0002d49 <st_clust.isra.1>
c000477f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004783:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000478f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004793:	e8 4c e1 ff ff       	call   c00028e4 <sync_fs>
c0004798:	89 c3                	mov    ebx,eax
c000479a:	e9 14 ff ff ff       	jmp    c00046b3 <f_mkdir+0xa6>
c000479f:	83 c4 50             	add    esp,0x50
c00047a2:	89 d8                	mov    eax,ebx
c00047a4:	5b                   	pop    ebx
c00047a5:	5e                   	pop    esi
c00047a6:	5f                   	pop    edi
c00047a7:	c3                   	ret    

c00047a8 <f_rename>:
c00047a8:	57                   	push   edi
c00047a9:	56                   	push   esi
c00047aa:	53                   	push   ebx
c00047ab:	81 ec a0 00 00 00    	sub    esp,0xa0
c00047b1:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c00047b8:	e8 f1 d5 ff ff       	call   c0001dae <get_ldnumber>
c00047bd:	b9 02 00 00 00       	mov    ecx,0x2
c00047c2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047c6:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00047cd:	e8 26 d8 ff ff       	call   c0001ff8 <mount_volume>
c00047d2:	85 c0                	test   eax,eax
c00047d4:	0f 85 7a 01 00 00    	jne    c0004954 <f_rename+0x1ac>
c00047da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047de:	83 ec 0c             	sub    esp,0xc
c00047e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00047e5:	68 00 02 00 00       	push   0x200
c00047ea:	e8 dd 0e 00 00       	call   c00056cc <ff_memalloc>
c00047ef:	83 c4 10             	add    esp,0x10
c00047f2:	89 c6                	mov    esi,eax
c00047f4:	b8 11 00 00 00       	mov    eax,0x11
c00047f9:	85 f6                	test   esi,esi
c00047fb:	0f 84 53 01 00 00    	je     c0004954 <f_rename+0x1ac>
c0004801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004805:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c000480c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000480f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004813:	e8 ea ec ff ff       	call   c0003502 <follow_path>
c0004818:	85 c0                	test   eax,eax
c000481a:	0f 85 20 01 00 00    	jne    c0004940 <f_rename+0x198>
c0004820:	b8 06 00 00 00       	mov    eax,0x6
c0004825:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c000482a:	0f 85 10 01 00 00    	jne    c0004940 <f_rename+0x198>
c0004830:	b9 20 00 00 00       	mov    ecx,0x20
c0004835:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004839:	8d 44 24 20          	lea    eax,[esp+0x20]
c000483d:	e8 69 d1 ff ff       	call   c00019ab <mem_cpy>
c0004842:	b9 30 00 00 00       	mov    ecx,0x30
c0004847:	8d 54 24 40          	lea    edx,[esp+0x40]
c000484b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000484f:	e8 57 d1 ff ff       	call   c00019ab <mem_cpy>
c0004854:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c000485b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000485f:	e8 9e ec ff ff       	call   c0003502 <follow_path>
c0004864:	85 c0                	test   eax,eax
c0004866:	75 20                	jne    c0004888 <f_rename+0xe0>
c0004868:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000486c:	b8 08 00 00 00       	mov    eax,0x8
c0004871:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004875:	0f 85 c5 00 00 00    	jne    c0004940 <f_rename+0x198>
c000487b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000487f:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004886:	eb 03                	jmp    c000488b <f_rename+0xe3>
c0004888:	83 f8 04             	cmp    eax,0x4
c000488b:	0f 85 af 00 00 00    	jne    c0004940 <f_rename+0x198>
c0004891:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004895:	e8 fc ec ff ff       	call   c0003596 <dir_register>
c000489a:	85 c0                	test   eax,eax
c000489c:	0f 85 9e 00 00 00    	jne    c0004940 <f_rename+0x198>
c00048a2:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00048a9:	b9 13 00 00 00       	mov    ecx,0x13
c00048ae:	8d 43 0d             	lea    eax,[ebx+0xd]
c00048b1:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c00048b5:	e8 f1 d0 ff ff       	call   c00019ab <mem_cpy>
c00048ba:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00048be:	a8 10                	test   al,0x10
c00048c0:	75 03                	jne    c00048c5 <f_rename+0x11d>
c00048c2:	83 c8 20             	or     eax,0x20
c00048c5:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00048d0:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c00048d4:	74 54                	je     c000492a <f_rename+0x182>
c00048d6:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00048da:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c00048de:	74 4a                	je     c000492a <f_rename+0x182>
c00048e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00048e4:	89 da                	mov    edx,ebx
c00048e6:	8a 07                	mov    al,BYTE PTR [edi]
c00048e8:	e8 33 e4 ff ff       	call   c0002d20 <ld_clust.isra.0>
c00048ed:	89 c2                	mov    edx,eax
c00048ef:	89 f8                	mov    eax,edi
c00048f1:	e8 cf d2 ff ff       	call   c0001bc5 <clst2sect>
c00048f6:	89 c2                	mov    edx,eax
c00048f8:	b8 02 00 00 00       	mov    eax,0x2
c00048fd:	85 d2                	test   edx,edx
c00048ff:	74 3f                	je     c0004940 <f_rename+0x198>
c0004901:	89 f8                	mov    eax,edi
c0004903:	e8 9d d5 ff ff       	call   c0001ea5 <move_window>
c0004908:	85 c0                	test   eax,eax
c000490a:	75 34                	jne    c0004940 <f_rename+0x198>
c000490c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004910:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004914:	75 14                	jne    c000492a <f_rename+0x182>
c0004916:	8d 50 54             	lea    edx,[eax+0x54]
c0004919:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000491d:	e8 27 e4 ff ff       	call   c0002d49 <st_clust.isra.1>
c0004922:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004926:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000492a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000492e:	e8 4e ea ff ff       	call   c0003381 <dir_remove>
c0004933:	85 c0                	test   eax,eax
c0004935:	75 09                	jne    c0004940 <f_rename+0x198>
c0004937:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000493b:	e8 a4 df ff ff       	call   c00028e4 <sync_fs>
c0004940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004944:	83 ec 0c             	sub    esp,0xc
c0004947:	56                   	push   esi
c0004948:	e8 97 0d 00 00       	call   c00056e4 <ff_memfree>
c000494d:	83 c4 10             	add    esp,0x10
c0004950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004954:	81 c4 a0 00 00 00    	add    esp,0xa0
c000495a:	5b                   	pop    ebx
c000495b:	5e                   	pop    esi
c000495c:	5f                   	pop    edi
c000495d:	c3                   	ret    

c000495e <f_chmod>:
c000495e:	57                   	push   edi
c000495f:	b9 02 00 00 00       	mov    ecx,0x2
c0004964:	56                   	push   esi
c0004965:	53                   	push   ebx
c0004966:	83 ec 50             	sub    esp,0x50
c0004969:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000496d:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004971:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004975:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004979:	e8 7a d6 ff ff       	call   c0001ff8 <mount_volume>
c000497e:	85 c0                	test   eax,eax
c0004980:	75 7e                	jne    c0004a00 <f_chmod+0xa2>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000498d:	68 00 02 00 00       	push   0x200
c0004992:	e8 35 0d 00 00       	call   c00056cc <ff_memalloc>
c0004997:	83 c4 10             	add    esp,0x10
c000499a:	89 c6                	mov    esi,eax
c000499c:	b8 11 00 00 00       	mov    eax,0x11
c00049a1:	85 f6                	test   esi,esi
c00049a3:	74 5b                	je     c0004a00 <f_chmod+0xa2>
c00049a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049b4:	e8 49 eb ff ff       	call   c0003502 <follow_path>
c00049b9:	85 c0                	test   eax,eax
c00049bb:	75 2f                	jne    c00049ec <f_chmod+0x8e>
c00049bd:	b8 06 00 00 00       	mov    eax,0x6
c00049c2:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c00049c7:	75 23                	jne    c00049ec <f_chmod+0x8e>
c00049c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00049cd:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c00049d0:	21 fb                	and    ebx,edi
c00049d2:	83 e3 27             	and    ebx,0x27
c00049d5:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c00049d8:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00049e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049e7:	e8 f8 de ff ff       	call   c00028e4 <sync_fs>
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	83 ec 0c             	sub    esp,0xc
c00049f3:	56                   	push   esi
c00049f4:	e8 eb 0c 00 00       	call   c00056e4 <ff_memfree>
c00049f9:	83 c4 10             	add    esp,0x10
c00049fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a00:	83 c4 50             	add    esp,0x50
c0004a03:	5b                   	pop    ebx
c0004a04:	5e                   	pop    esi
c0004a05:	5f                   	pop    edi
c0004a06:	c3                   	ret    

c0004a07 <f_utime>:
c0004a07:	56                   	push   esi
c0004a08:	b9 02 00 00 00       	mov    ecx,0x2
c0004a0d:	53                   	push   ebx
c0004a0e:	83 ec 54             	sub    esp,0x54
c0004a11:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004a15:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a19:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004a1d:	e8 d6 d5 ff ff       	call   c0001ff8 <mount_volume>
c0004a22:	85 c0                	test   eax,eax
c0004a24:	0f 85 85 00 00 00    	jne    c0004aaf <f_utime+0xa8>
c0004a2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a2e:	83 ec 0c             	sub    esp,0xc
c0004a31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a35:	68 00 02 00 00       	push   0x200
c0004a3a:	e8 8d 0c 00 00       	call   c00056cc <ff_memalloc>
c0004a3f:	83 c4 10             	add    esp,0x10
c0004a42:	89 c3                	mov    ebx,eax
c0004a44:	b8 11 00 00 00       	mov    eax,0x11
c0004a49:	85 db                	test   ebx,ebx
c0004a4b:	74 62                	je     c0004aaf <f_utime+0xa8>
c0004a4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a51:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a55:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5c:	e8 a1 ea ff ff       	call   c0003502 <follow_path>
c0004a61:	85 c0                	test   eax,eax
c0004a63:	75 36                	jne    c0004a9b <f_utime+0x94>
c0004a65:	b8 06 00 00 00       	mov    eax,0x6
c0004a6a:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004a6f:	75 2a                	jne    c0004a9b <f_utime+0x94>
c0004a71:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004a75:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004a79:	c1 e2 10             	shl    edx,0x10
c0004a7c:	09 c2                	or     edx,eax
c0004a7e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a82:	83 c0 16             	add    eax,0x16
c0004a85:	e8 1e cf ff ff       	call   c00019a8 <st_dword>
c0004a8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a96:	e8 49 de ff ff       	call   c00028e4 <sync_fs>
c0004a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	53                   	push   ebx
c0004aa3:	e8 3c 0c 00 00       	call   c00056e4 <ff_memfree>
c0004aa8:	83 c4 10             	add    esp,0x10
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	83 c4 54             	add    esp,0x54
c0004ab2:	5b                   	pop    ebx
c0004ab3:	5e                   	pop    esi
c0004ab4:	c3                   	ret    

c0004ab5 <f_getlabel>:
c0004ab5:	55                   	push   ebp
c0004ab6:	31 c9                	xor    ecx,ecx
c0004ab8:	57                   	push   edi
c0004ab9:	56                   	push   esi
c0004aba:	53                   	push   ebx
c0004abb:	83 ec 5c             	sub    esp,0x5c
c0004abe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ac2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004ac6:	e8 2d d5 ff ff       	call   c0001ff8 <mount_volume>
c0004acb:	89 c6                	mov    esi,eax
c0004acd:	85 c0                	test   eax,eax
c0004acf:	0f 85 27 01 00 00    	jne    c0004bfc <f_getlabel+0x147>
c0004ad5:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ada:	0f 84 d1 00 00 00    	je     c0004bb1 <f_getlabel+0xfc>
c0004ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae4:	31 d2                	xor    edx,edx
c0004ae6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004aea:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004af2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af6:	e8 78 e3 ff ff       	call   c0002e73 <dir_sdi>
c0004afb:	85 c0                	test   eax,eax
c0004afd:	0f 85 a2 00 00 00    	jne    c0004ba5 <f_getlabel+0xf0>
c0004b03:	ba 01 00 00 00       	mov    edx,0x1
c0004b08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0c:	e8 53 e7 ff ff       	call   c0003264 <dir_read>
c0004b11:	85 c0                	test   eax,eax
c0004b13:	0f 85 8c 00 00 00    	jne    c0004ba5 <f_getlabel+0xf0>
c0004b19:	31 db                	xor    ebx,ebx
c0004b1b:	31 c9                	xor    ecx,ecx
c0004b1d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004b21:	8d 79 01             	lea    edi,[ecx+0x1]
c0004b24:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004b29:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004b2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b32:	e8 c9 ce ff ff       	call   c0001a00 <dbc_1st>
c0004b37:	85 c0                	test   eax,eax
c0004b39:	74 16                	je     c0004b51 <f_getlabel+0x9c>
c0004b3b:	83 ff 0b             	cmp    edi,0xb
c0004b3e:	74 11                	je     c0004b51 <f_getlabel+0x9c>
c0004b40:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004b45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b49:	8d 79 02             	lea    edi,[ecx+0x2]
c0004b4c:	c1 e0 08             	shl    eax,0x8
c0004b4f:	09 c2                	or     edx,eax
c0004b51:	0f b7 d2             	movzx  edx,dx
c0004b54:	50                   	push   eax
c0004b55:	50                   	push   eax
c0004b56:	68 b5 01 00 00       	push   0x1b5
c0004b5b:	52                   	push   edx
c0004b5c:	e8 33 0c 00 00       	call   c0005794 <ff_oem2uni>
c0004b61:	83 c4 10             	add    esp,0x10
c0004b64:	66 85 c0             	test   ax,ax
c0004b67:	74 25                	je     c0004b8e <f_getlabel+0xd9>
c0004b69:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004b6d:	0f b7 c0             	movzx  eax,ax
c0004b70:	01 da                	add    edx,ebx
c0004b72:	b9 04 00 00 00       	mov    ecx,0x4
c0004b77:	e8 50 cf ff ff       	call   c0001acc <put_utf>
c0004b7c:	84 c0                	test   al,al
c0004b7e:	74 0e                	je     c0004b8e <f_getlabel+0xd9>
c0004b80:	0f b6 c0             	movzx  eax,al
c0004b83:	01 c3                	add    ebx,eax
c0004b85:	83 ff 0b             	cmp    edi,0xb
c0004b88:	74 06                	je     c0004b90 <f_getlabel+0xdb>
c0004b8a:	89 f9                	mov    ecx,edi
c0004b8c:	eb 8f                	jmp    c0004b1d <f_getlabel+0x68>
c0004b8e:	31 db                	xor    ebx,ebx
c0004b90:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004b94:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004b97:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004b9b:	74 14                	je     c0004bb1 <f_getlabel+0xfc>
c0004b9d:	4b                   	dec    ebx
c0004b9e:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004ba1:	74 f1                	je     c0004b94 <f_getlabel+0xdf>
c0004ba3:	eb 0c                	jmp    c0004bb1 <f_getlabel+0xfc>
c0004ba5:	83 f8 04             	cmp    eax,0x4
c0004ba8:	75 50                	jne    c0004bfa <f_getlabel+0x145>
c0004baa:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004bae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004bb1:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004bb6:	74 44                	je     c0004bfc <f_getlabel+0x147>
c0004bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004bbf:	e8 e1 d2 ff ff       	call   c0001ea5 <move_window>
c0004bc4:	89 c6                	mov    esi,eax
c0004bc6:	85 c0                	test   eax,eax
c0004bc8:	75 32                	jne    c0004bfc <f_getlabel+0x147>
c0004bca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004bce:	b8 43 00 00 00       	mov    eax,0x43
c0004bd3:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004bd5:	80 f9 03             	cmp    cl,0x3
c0004bd8:	74 0f                	je     c0004be9 <f_getlabel+0x134>
c0004bda:	31 c0                	xor    eax,eax
c0004bdc:	80 f9 04             	cmp    cl,0x4
c0004bdf:	0f 94 c0             	sete   al
c0004be2:	48                   	dec    eax
c0004be3:	83 e0 c3             	and    eax,0xffffffc3
c0004be6:	83 c0 64             	add    eax,0x64
c0004be9:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004bed:	e8 9a cd ff ff       	call   c000198c <ld_dword>
c0004bf2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004bf6:	89 07                	mov    DWORD PTR [edi],eax
c0004bf8:	eb 02                	jmp    c0004bfc <f_getlabel+0x147>
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	83 c4 5c             	add    esp,0x5c
c0004bff:	89 f0                	mov    eax,esi
c0004c01:	5b                   	pop    ebx
c0004c02:	5e                   	pop    esi
c0004c03:	5f                   	pop    edi
c0004c04:	5d                   	pop    ebp
c0004c05:	c3                   	ret    

c0004c06 <f_setlabel>:
c0004c06:	56                   	push   esi
c0004c07:	b9 02 00 00 00       	mov    ecx,0x2
c0004c0c:	53                   	push   ebx
c0004c0d:	83 ec 54             	sub    esp,0x54
c0004c10:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004c14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c18:	e8 db d3 ff ff       	call   c0001ff8 <mount_volume>
c0004c1d:	89 c6                	mov    esi,eax
c0004c1f:	85 c0                	test   eax,eax
c0004c21:	0f 85 67 01 00 00    	jne    c0004d8e <f_setlabel+0x188>
c0004c27:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c2c:	ba 20 00 00 00       	mov    edx,0x20
c0004c31:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004c35:	31 db                	xor    ebx,ebx
c0004c37:	e8 84 cd ff ff       	call   c00019c0 <mem_set>
c0004c3c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004c40:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c43:	76 5b                	jbe    c0004ca0 <f_setlabel+0x9a>
c0004c45:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c49:	e8 b8 cd ff ff       	call   c0001a06 <tchar2uni>
c0004c4e:	3d ff ff 00 00       	cmp    eax,0xffff
c0004c53:	76 0a                	jbe    c0004c5f <f_setlabel+0x59>
c0004c55:	be 06 00 00 00       	mov    esi,0x6
c0004c5a:	e9 2f 01 00 00       	jmp    c0004d8e <f_setlabel+0x188>
c0004c5f:	83 ec 0c             	sub    esp,0xc
c0004c62:	50                   	push   eax
c0004c63:	e8 a0 0b 00 00       	call   c0005808 <ff_wtoupper>
c0004c68:	5a                   	pop    edx
c0004c69:	59                   	pop    ecx
c0004c6a:	68 b5 01 00 00       	push   0x1b5
c0004c6f:	50                   	push   eax
c0004c70:	e8 87 0a 00 00       	call   c00056fc <ff_uni2oem>
c0004c75:	83 c4 10             	add    esp,0x10
c0004c78:	89 c6                	mov    esi,eax
c0004c7a:	66 85 c0             	test   ax,ax
c0004c7d:	74 d6                	je     c0004c55 <f_setlabel+0x4f>
c0004c7f:	0f b7 d0             	movzx  edx,ax
c0004c82:	b8 50 d4 01 c0       	mov    eax,0xc001d450
c0004c87:	e8 62 cd ff ff       	call   c00019ee <chk_chr>
c0004c8c:	85 c0                	test   eax,eax
c0004c8e:	75 c5                	jne    c0004c55 <f_setlabel+0x4f>
c0004c90:	66 81 fe ff 00       	cmp    si,0xff
c0004c95:	0f 87 c9 00 00 00    	ja     c0004d64 <f_setlabel+0x15e>
c0004c9b:	e9 e4 00 00 00       	jmp    c0004d84 <f_setlabel+0x17e>
c0004ca0:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004ca5:	74 ae                	je     c0004c55 <f_setlabel+0x4f>
c0004ca7:	85 db                	test   ebx,ebx
c0004ca9:	74 0e                	je     c0004cb9 <f_setlabel+0xb3>
c0004cab:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004cae:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004cb3:	75 04                	jne    c0004cb9 <f_setlabel+0xb3>
c0004cb5:	89 c3                	mov    ebx,eax
c0004cb7:	eb ee                	jmp    c0004ca7 <f_setlabel+0xa1>
c0004cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004cbd:	31 d2                	xor    edx,edx
c0004cbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cc3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ccb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ccf:	e8 9f e1 ff ff       	call   c0002e73 <dir_sdi>
c0004cd4:	89 c6                	mov    esi,eax
c0004cd6:	85 c0                	test   eax,eax
c0004cd8:	0f 85 b0 00 00 00    	jne    c0004d8e <f_setlabel+0x188>
c0004cde:	ba 01 00 00 00       	mov    edx,0x1
c0004ce3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ce7:	e8 78 e5 ff ff       	call   c0003264 <dir_read>
c0004cec:	85 c0                	test   eax,eax
c0004cee:	75 18                	jne    c0004d08 <f_setlabel+0x102>
c0004cf0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cf4:	85 db                	test   ebx,ebx
c0004cf6:	74 0b                	je     c0004d03 <f_setlabel+0xfd>
c0004cf8:	b9 0b 00 00 00       	mov    ecx,0xb
c0004cfd:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004d01:	eb 47                	jmp    c0004d4a <f_setlabel+0x144>
c0004d03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004d06:	eb 47                	jmp    c0004d4f <f_setlabel+0x149>
c0004d08:	83 f8 04             	cmp    eax,0x4
c0004d0b:	75 53                	jne    c0004d60 <f_setlabel+0x15a>
c0004d0d:	85 db                	test   ebx,ebx
c0004d0f:	74 7d                	je     c0004d8e <f_setlabel+0x188>
c0004d11:	ba 01 00 00 00       	mov    edx,0x1
c0004d16:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d1a:	e8 e4 e4 ff ff       	call   c0003203 <dir_alloc>
c0004d1f:	89 c6                	mov    esi,eax
c0004d21:	85 c0                	test   eax,eax
c0004d23:	75 69                	jne    c0004d8e <f_setlabel+0x188>
c0004d25:	b9 20 00 00 00       	mov    ecx,0x20
c0004d2a:	31 d2                	xor    edx,edx
c0004d2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d30:	e8 8b cc ff ff       	call   c00019c0 <mem_set>
c0004d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d39:	b9 0b 00 00 00       	mov    ecx,0xb
c0004d3e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004d42:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004d46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d4a:	e8 5c cc ff ff       	call   c00019ab <mem_cpy>
c0004d4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004d53:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004d5b:	e8 84 db ff ff       	call   c00028e4 <sync_fs>
c0004d60:	89 c6                	mov    esi,eax
c0004d62:	eb 2a                	jmp    c0004d8e <f_setlabel+0x188>
c0004d64:	83 fb 09             	cmp    ebx,0x9
c0004d67:	0f 87 e8 fe ff ff    	ja     c0004c55 <f_setlabel+0x4f>
c0004d6d:	89 f0                	mov    eax,esi
c0004d6f:	66 c1 e8 08          	shr    ax,0x8
c0004d73:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004d77:	43                   	inc    ebx
c0004d78:	89 f0                	mov    eax,esi
c0004d7a:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004d7e:	43                   	inc    ebx
c0004d7f:	e9 b8 fe ff ff       	jmp    c0004c3c <f_setlabel+0x36>
c0004d84:	83 fb 0a             	cmp    ebx,0xa
c0004d87:	76 ef                	jbe    c0004d78 <f_setlabel+0x172>
c0004d89:	e9 c7 fe ff ff       	jmp    c0004c55 <f_setlabel+0x4f>
c0004d8e:	89 f0                	mov    eax,esi
c0004d90:	83 c4 54             	add    esp,0x54
c0004d93:	5b                   	pop    ebx
c0004d94:	5e                   	pop    esi
c0004d95:	c3                   	ret    

c0004d96 <f_expand>:
c0004d96:	55                   	push   ebp
c0004d97:	57                   	push   edi
c0004d98:	56                   	push   esi
c0004d99:	53                   	push   ebx
c0004d9a:	83 ec 2c             	sub    esp,0x2c
c0004d9d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004da1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004da5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004da9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dad:	89 d8                	mov    eax,ebx
c0004daf:	e8 47 d0 ff ff       	call   c0001dfb <validate>
c0004db4:	89 c6                	mov    esi,eax
c0004db6:	85 c0                	test   eax,eax
c0004db8:	0f 85 2e 01 00 00    	jne    c0004eec <f_expand+0x156>
c0004dbe:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004dc2:	85 f6                	test   esi,esi
c0004dc4:	0f 85 22 01 00 00    	jne    c0004eec <f_expand+0x156>
c0004dca:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004dcf:	75 0a                	jne    c0004ddb <f_expand+0x45>
c0004dd1:	be 07 00 00 00       	mov    esi,0x7
c0004dd6:	e9 11 01 00 00       	jmp    c0004eec <f_expand+0x156>
c0004ddb:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004ddf:	75 f0                	jne    c0004dd1 <f_expand+0x3b>
c0004de1:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004de5:	74 ea                	je     c0004dd1 <f_expand+0x3b>
c0004de7:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004deb:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004def:	c1 e1 09             	shl    ecx,0x9
c0004df2:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004df5:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004df9:	0f 95 c0             	setne  al
c0004dfc:	31 d2                	xor    edx,edx
c0004dfe:	0f b6 c0             	movzx  eax,al
c0004e01:	89 c7                	mov    edi,eax
c0004e03:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004e07:	f7 f1                	div    ecx
c0004e09:	01 f8                	add    eax,edi
c0004e0b:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004e0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004e12:	83 ff 01             	cmp    edi,0x1
c0004e15:	76 05                	jbe    c0004e1c <f_expand+0x86>
c0004e17:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004e1a:	77 05                	ja     c0004e21 <f_expand+0x8b>
c0004e1c:	bf 02 00 00 00       	mov    edi,0x2
c0004e21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004e24:	89 fd                	mov    ebp,edi
c0004e26:	31 c9                	xor    ecx,ecx
c0004e28:	89 ea                	mov    edx,ebp
c0004e2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004e30:	45                   	inc    ebp
c0004e31:	e8 3b df ff ff       	call   c0002d71 <get_fat.isra.2>
c0004e36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004e3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004e3e:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0004e41:	77 05                	ja     c0004e48 <f_expand+0xb2>
c0004e43:	bd 02 00 00 00       	mov    ebp,0x2
c0004e48:	83 f8 01             	cmp    eax,0x1
c0004e4b:	74 20                	je     c0004e6d <f_expand+0xd7>
c0004e4d:	83 f8 ff             	cmp    eax,0xffffffff
c0004e50:	74 22                	je     c0004e74 <f_expand+0xde>
c0004e52:	85 c0                	test   eax,eax
c0004e54:	75 09                	jne    c0004e5f <f_expand+0xc9>
c0004e56:	41                   	inc    ecx
c0004e57:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0004e5b:	75 07                	jne    c0004e64 <f_expand+0xce>
c0004e5d:	eb 1c                	jmp    c0004e7b <f_expand+0xe5>
c0004e5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0004e62:	31 c9                	xor    ecx,ecx
c0004e64:	39 fd                	cmp    ebp,edi
c0004e66:	75 c0                	jne    c0004e28 <f_expand+0x92>
c0004e68:	e9 64 ff ff ff       	jmp    c0004dd1 <f_expand+0x3b>
c0004e6d:	be 02 00 00 00       	mov    esi,0x2
c0004e72:	eb 78                	jmp    c0004eec <f_expand+0x156>
c0004e74:	be 01 00 00 00       	mov    esi,0x1
c0004e79:	eb 71                	jmp    c0004eec <f_expand+0x156>
c0004e7b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0004e80:	74 2b                	je     c0004ead <f_expand+0x117>
c0004e82:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004e85:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0004e89:	85 ed                	test   ebp,ebp
c0004e8b:	74 24                	je     c0004eb1 <f_expand+0x11b>
c0004e8d:	83 c9 ff             	or     ecx,0xffffffff
c0004e90:	83 fd 01             	cmp    ebp,0x1
c0004e93:	74 03                	je     c0004e98 <f_expand+0x102>
c0004e95:	8d 4f 01             	lea    ecx,[edi+0x1]
c0004e98:	89 fa                	mov    edx,edi
c0004e9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9e:	e8 57 d4 ff ff       	call   c00022fa <put_fat>
c0004ea3:	85 c0                	test   eax,eax
c0004ea5:	75 43                	jne    c0004eea <f_expand+0x154>
c0004ea7:	89 f8                	mov    eax,edi
c0004ea9:	4d                   	dec    ebp
c0004eaa:	47                   	inc    edi
c0004eab:	eb dc                	jmp    c0004e89 <f_expand+0xf3>
c0004ead:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004eb0:	48                   	dec    eax
c0004eb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004eb5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0004eba:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0004ebd:	74 2d                	je     c0004eec <f_expand+0x156>
c0004ebf:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004ec3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ec6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ec9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004ecd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004ed0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0004ed3:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0004ed6:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0004ed9:	39 c8                	cmp    eax,ecx
c0004edb:	77 0f                	ja     c0004eec <f_expand+0x156>
c0004edd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0004ee1:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0004ee5:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee8:	eb 02                	jmp    c0004eec <f_expand+0x156>
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	83 c4 2c             	add    esp,0x2c
c0004eef:	89 f0                	mov    eax,esi
c0004ef1:	5b                   	pop    ebx
c0004ef2:	5e                   	pop    esi
c0004ef3:	5f                   	pop    edi
c0004ef4:	5d                   	pop    ebp
c0004ef5:	c3                   	ret    

c0004ef6 <f_mkfs>:
c0004ef6:	55                   	push   ebp
c0004ef7:	57                   	push   edi
c0004ef8:	bf 0b 00 00 00       	mov    edi,0xb
c0004efd:	56                   	push   esi
c0004efe:	53                   	push   ebx
c0004eff:	83 ec 4c             	sub    esp,0x4c
c0004f02:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004f06:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0004f0a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f0e:	e8 9b ce ff ff       	call   c0001dae <get_ldnumber>
c0004f13:	85 c0                	test   eax,eax
c0004f15:	0f 88 a6 07 00 00    	js     c00056c1 <f_mkfs+0x7cb>
c0004f1b:	8b 14 85 00 04 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfc00]
c0004f22:	85 d2                	test   edx,edx
c0004f24:	74 03                	je     c0004f29 <f_mkfs+0x33>
c0004f26:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0004f29:	85 db                	test   ebx,ebx
c0004f2b:	75 05                	jne    c0004f32 <f_mkfs+0x3c>
c0004f2d:	bb 40 d4 01 c0       	mov    ebx,0xc001d440
c0004f32:	83 ec 0c             	sub    esp,0xc
c0004f35:	0f b6 c0             	movzx  eax,al
c0004f38:	bf 03 00 00 00       	mov    edi,0x3
c0004f3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004f41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0004f45:	e8 e7 c9 ff ff       	call   c0001931 <disk_initialize>
c0004f4a:	83 c4 10             	add    esp,0x10
c0004f4d:	a8 01                	test   al,0x1
c0004f4f:	0f 85 6c 07 00 00    	jne    c00056c1 <f_mkfs+0x7cb>
c0004f55:	bf 0a 00 00 00       	mov    edi,0xa
c0004f5a:	a8 04                	test   al,0x4
c0004f5c:	0f 85 5f 07 00 00    	jne    c00056c1 <f_mkfs+0x7cb>
c0004f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0004f65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004f69:	85 c0                	test   eax,eax
c0004f6b:	75 20                	jne    c0004f8d <f_mkfs+0x97>
c0004f6d:	51                   	push   ecx
c0004f6e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004f72:	50                   	push   eax
c0004f73:	6a 03                	push   0x3
c0004f75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0004f79:	e8 e2 c9 ff ff       	call   c0001960 <disk_ioctl>
c0004f7e:	83 c4 10             	add    esp,0x10
c0004f81:	85 c0                	test   eax,eax
c0004f83:	74 08                	je     c0004f8d <f_mkfs+0x97>
c0004f85:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0004f8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0004f91:	8d 42 ff             	lea    eax,[edx-0x1]
c0004f94:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0004f99:	77 04                	ja     c0004f9f <f_mkfs+0xa9>
c0004f9b:	85 c2                	test   edx,eax
c0004f9d:	74 08                	je     c0004fa7 <f_mkfs+0xb1>
c0004f9f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0004fa7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0004faa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0004fae:	48                   	dec    eax
c0004faf:	3c 01                	cmp    al,0x1
c0004fb1:	76 05                	jbe    c0004fb8 <f_mkfs+0xc2>
c0004fb3:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0004fb8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004fbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fbf:	48                   	dec    eax
c0004fc0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0004fc5:	77 07                	ja     c0004fce <f_mkfs+0xd8>
c0004fc7:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0004fcc:	74 08                	je     c0004fd6 <f_mkfs+0xe0>
c0004fce:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0004fd6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0004fd9:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0004fdf:	77 07                	ja     c0004fe8 <f_mkfs+0xf2>
c0004fe1:	8d 47 ff             	lea    eax,[edi-0x1]
c0004fe4:	85 f8                	test   eax,edi
c0004fe6:	74 02                	je     c0004fea <f_mkfs+0xf4>
c0004fe8:	31 ff                	xor    edi,edi
c0004fea:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0004ff2:	77 0a                	ja     c0004ffe <f_mkfs+0x108>
c0004ff4:	bf 11 00 00 00       	mov    edi,0x11
c0004ff9:	e9 c3 06 00 00       	jmp    c00056c1 <f_mkfs+0x7cb>
c0004ffe:	8a 1b                	mov    bl,BYTE PTR [ebx]
c0005000:	89 ee                	mov    esi,ebp
c0005002:	85 ed                	test   ebp,ebp
c0005004:	75 1b                	jne    c0005021 <f_mkfs+0x12b>
c0005006:	83 ec 0c             	sub    esp,0xc
c0005009:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000500d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005012:	50                   	push   eax
c0005013:	e8 b4 06 00 00       	call   c00056cc <ff_memalloc>
c0005018:	83 c4 10             	add    esp,0x10
c000501b:	89 c6                	mov    esi,eax
c000501d:	85 c0                	test   eax,eax
c000501f:	74 d3                	je     c0004ff4 <f_mkfs+0xfe>
c0005021:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0005029:	52                   	push   edx
c000502a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000502e:	50                   	push   eax
c000502f:	6a 01                	push   0x1
c0005031:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005035:	e8 26 c9 ff ff       	call   c0001960 <disk_ioctl>
c000503a:	83 c4 10             	add    esp,0x10
c000503d:	85 c0                	test   eax,eax
c000503f:	0f 85 25 06 00 00    	jne    c000566a <f_mkfs+0x774>
c0005045:	88 d8                	mov    al,bl
c0005047:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000504f:	24 08                	and    al,0x8
c0005051:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005055:	75 18                	jne    c000506f <f_mkfs+0x179>
c0005057:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000505b:	83 f8 3f             	cmp    eax,0x3f
c000505e:	76 0f                	jbe    c000506f <f_mkfs+0x179>
c0005060:	83 e8 3f             	sub    eax,0x3f
c0005063:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000506b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000506f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005073:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005077:	83 f8 7f             	cmp    eax,0x7f
c000507a:	0f 86 52 02 00 00    	jbe    c00052d2 <f_mkfs+0x3dc>
c0005080:	b9 80 00 00 00       	mov    ecx,0x80
c0005085:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000508b:	77 05                	ja     c0005092 <f_mkfs+0x19c>
c000508d:	89 f9                	mov    ecx,edi
c000508f:	c1 e9 09             	shr    ecx,0x9
c0005092:	88 d8                	mov    al,bl
c0005094:	83 e0 01             	and    eax,0x1
c0005097:	80 e3 02             	and    bl,0x2
c000509a:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000509e:	74 0a                	je     c00050aa <f_mkfs+0x1b4>
c00050a0:	84 c0                	test   al,al
c00050a2:	0f 84 4c 01 00 00    	je     c00051f4 <f_mkfs+0x2fe>
c00050a8:	eb 38                	jmp    c00050e2 <f_mkfs+0x1ec>
c00050aa:	bf 13 00 00 00       	mov    edi,0x13
c00050af:	84 c0                	test   al,al
c00050b1:	75 2f                	jne    c00050e2 <f_mkfs+0x1ec>
c00050b3:	e9 c9 05 00 00       	jmp    c0005681 <f_mkfs+0x78b>
c00050b8:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00050bd:	0f 85 08 02 00 00    	jne    c00052cb <f_mkfs+0x3d5>
c00050c3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00050c8:	0f 86 e1 01 00 00    	jbe    c00052af <f_mkfs+0x3b9>
c00050ce:	85 c9                	test   ecx,ecx
c00050d0:	0f 85 bd 05 00 00    	jne    c0005693 <f_mkfs+0x79d>
c00050d6:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00050d9:	83 f9 40             	cmp    ecx,0x40
c00050dc:	0f 87 c1 05 00 00    	ja     c00056a3 <f_mkfs+0x7ad>
c00050e2:	89 cf                	mov    edi,ecx
c00050e4:	85 c9                	test   ecx,ecx
c00050e6:	75 1d                	jne    c0005105 <f_mkfs+0x20f>
c00050e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00050ec:	ba 20 d4 01 c0       	mov    edx,0xc001d420
c00050f1:	c1 eb 0c             	shr    ebx,0xc
c00050f4:	bf 01 00 00 00       	mov    edi,0x1
c00050f9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00050fc:	66 85 c0             	test   ax,ax
c00050ff:	0f 85 5f 01 00 00    	jne    c0005264 <f_mkfs+0x36e>
c0005105:	31 d2                	xor    edx,edx
c0005107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000510b:	f7 f7                	div    edi
c000510d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005112:	0f 86 5e 01 00 00    	jbe    c0005276 <f_mkfs+0x380>
c0005118:	83 c0 02             	add    eax,0x2
c000511b:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005120:	01 c0                	add    eax,eax
c0005122:	05 ff 01 00 00       	add    eax,0x1ff
c0005127:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000512f:	c1 e8 09             	shr    eax,0x9
c0005132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000513a:	c1 e0 05             	shl    eax,0x5
c000513d:	c1 e8 09             	shr    eax,0x9
c0005140:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005144:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005149:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000514d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005151:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005155:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000515d:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005162:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005166:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000516a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000516e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005172:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005176:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c000517a:	f7 d8                	neg    eax
c000517c:	21 c3                	and    ebx,eax
c000517e:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005182:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005187:	0f 85 fc 00 00 00    	jne    c0005289 <f_mkfs+0x393>
c000518d:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005191:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005195:	89 f8                	mov    eax,edi
c0005197:	c1 e0 04             	shl    eax,0x4
c000519a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000519e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00051a2:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00051a6:	0f 82 26 01 00 00    	jb     c00052d2 <f_mkfs+0x3dc>
c00051ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00051b4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00051b8:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c00051bd:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c00051c1:	29 d0                	sub    eax,edx
c00051c3:	31 d2                	xor    edx,edx
c00051c5:	f7 f7                	div    edi
c00051c7:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00051cc:	89 c3                	mov    ebx,eax
c00051ce:	0f 85 e4 fe ff ff    	jne    c00050b8 <f_mkfs+0x1c2>
c00051d4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00051d9:	0f 87 02 01 00 00    	ja     c00052e1 <f_mkfs+0x3eb>
c00051df:	85 c9                	test   ecx,ecx
c00051e1:	0f 85 eb 00 00 00    	jne    c00052d2 <f_mkfs+0x3dc>
c00051e7:	83 ff 01             	cmp    edi,0x1
c00051ea:	0f 86 e2 00 00 00    	jbe    c00052d2 <f_mkfs+0x3dc>
c00051f0:	89 f9                	mov    ecx,edi
c00051f2:	d1 e9                	shr    ecx,1
c00051f4:	89 cb                	mov    ebx,ecx
c00051f6:	85 c9                	test   ecx,ecx
c00051f8:	75 26                	jne    c0005220 <f_mkfs+0x32a>
c00051fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00051fe:	ba 30 d4 01 c0       	mov    edx,0xc001d430
c0005203:	c1 eb 11             	shr    ebx,0x11
c0005206:	b9 01 00 00 00       	mov    ecx,0x1
c000520b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000520e:	66 85 c0             	test   ax,ax
c0005211:	74 0b                	je     c000521e <f_mkfs+0x328>
c0005213:	83 c2 02             	add    edx,0x2
c0005216:	39 d8                	cmp    eax,ebx
c0005218:	77 04                	ja     c000521e <f_mkfs+0x328>
c000521a:	01 c9                	add    ecx,ecx
c000521c:	eb ed                	jmp    c000520b <f_mkfs+0x315>
c000521e:	31 db                	xor    ebx,ebx
c0005220:	31 d2                	xor    edx,edx
c0005222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005226:	f7 f1                	div    ecx
c0005228:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000522f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005234:	c1 ea 09             	shr    edx,0x9
c0005237:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000523c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0005240:	0f 87 8c 00 00 00    	ja     c00052d2 <f_mkfs+0x3dc>
c0005246:	89 cf                	mov    edi,ecx
c0005248:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005250:	89 d9                	mov    ecx,ebx
c0005252:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c000525a:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000525f:	e9 e0 fe ff ff       	jmp    c0005144 <f_mkfs+0x24e>
c0005264:	83 c2 02             	add    edx,0x2
c0005267:	39 d8                	cmp    eax,ebx
c0005269:	0f 87 96 fe ff ff    	ja     c0005105 <f_mkfs+0x20f>
c000526f:	01 ff                	add    edi,edi
c0005271:	e9 83 fe ff ff       	jmp    c00050f9 <f_mkfs+0x203>
c0005276:	8d 04 40             	lea    eax,[eax+eax*2]
c0005279:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000527e:	40                   	inc    eax
c000527f:	d1 e8                	shr    eax,1
c0005281:	83 c0 03             	add    eax,0x3
c0005284:	e9 99 fe ff ff       	jmp    c0005122 <f_mkfs+0x22c>
c0005289:	31 d2                	xor    edx,edx
c000528b:	89 d8                	mov    eax,ebx
c000528d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005291:	85 d2                	test   edx,edx
c0005293:	74 09                	je     c000529e <f_mkfs+0x3a8>
c0005295:	4b                   	dec    ebx
c0005296:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000529a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000529e:	89 d8                	mov    eax,ebx
c00052a0:	31 d2                	xor    edx,edx
c00052a2:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00052a6:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00052aa:	e9 e6 fe ff ff       	jmp    c0005195 <f_mkfs+0x29f>
c00052af:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052b4:	77 2b                	ja     c00052e1 <f_mkfs+0x3eb>
c00052b6:	85 c9                	test   ecx,ecx
c00052b8:	75 18                	jne    c00052d2 <f_mkfs+0x3dc>
c00052ba:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052bd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00052c3:	0f 86 19 fe ff ff    	jbe    c00050e2 <f_mkfs+0x1ec>
c00052c9:	eb 07                	jmp    c00052d2 <f_mkfs+0x3dc>
c00052cb:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052d0:	76 0a                	jbe    c00052dc <f_mkfs+0x3e6>
c00052d2:	bf 0e 00 00 00       	mov    edi,0xe
c00052d7:	e9 a5 03 00 00       	jmp    c0005681 <f_mkfs+0x78b>
c00052dc:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00052e1:	31 d2                	xor    edx,edx
c00052e3:	b9 00 02 00 00       	mov    ecx,0x200
c00052e8:	89 f0                	mov    eax,esi
c00052ea:	e8 d1 c6 ff ff       	call   c00019c0 <mem_set>
c00052ef:	b9 0b 00 00 00       	mov    ecx,0xb
c00052f4:	ba d2 d3 01 c0       	mov    edx,0xc001d3d2
c00052f9:	89 f0                	mov    eax,esi
c00052fb:	e8 ab c6 ff ff       	call   c00019ab <mem_cpy>
c0005300:	8d 46 0b             	lea    eax,[esi+0xb]
c0005303:	ba 00 02 00 00       	mov    edx,0x200
c0005308:	e8 97 c6 ff ff       	call   c00019a4 <st_word>
c000530d:	89 f8                	mov    eax,edi
c000530f:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0005314:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0005317:	8d 46 0e             	lea    eax,[esi+0xe]
c000531a:	e8 85 c6 ff ff       	call   c00019a4 <st_word>
c000531f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005323:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005328:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c000532b:	75 08                	jne    c0005335 <f_mkfs+0x43f>
c000532d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005339:	8d 46 11             	lea    eax,[esi+0x11]
c000533c:	e8 63 c6 ff ff       	call   c00019a4 <st_word>
c0005341:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005345:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000534b:	77 0a                	ja     c0005357 <f_mkfs+0x461>
c000534d:	8d 46 13             	lea    eax,[esi+0x13]
c0005350:	e8 4f c6 ff ff       	call   c00019a4 <st_word>
c0005355:	eb 08                	jmp    c000535f <f_mkfs+0x469>
c0005357:	8d 46 20             	lea    eax,[esi+0x20]
c000535a:	e8 49 c6 ff ff       	call   c00019a8 <st_dword>
c000535f:	8d 46 18             	lea    eax,[esi+0x18]
c0005362:	ba 3f 00 00 00       	mov    edx,0x3f
c0005367:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000536b:	e8 34 c6 ff ff       	call   c00019a4 <st_word>
c0005370:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005373:	ba ff 00 00 00       	mov    edx,0xff
c0005378:	e8 27 c6 ff ff       	call   c00019a4 <st_word>
c000537d:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005384:	e8 1f c6 ff ff       	call   c00019a8 <st_dword>
c0005389:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000538e:	75 57                	jne    c00053e7 <f_mkfs+0x4f1>
c0005390:	8d 46 43             	lea    eax,[esi+0x43]
c0005393:	ba 00 00 21 50       	mov    edx,0x50210000
c0005398:	e8 0b c6 ff ff       	call   c00019a8 <st_dword>
c000539d:	8d 46 24             	lea    eax,[esi+0x24]
c00053a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00053a4:	e8 ff c5 ff ff       	call   c00019a8 <st_dword>
c00053a9:	8d 46 2c             	lea    eax,[esi+0x2c]
c00053ac:	ba 02 00 00 00       	mov    edx,0x2
c00053b1:	e8 f2 c5 ff ff       	call   c00019a8 <st_dword>
c00053b6:	8d 46 30             	lea    eax,[esi+0x30]
c00053b9:	ba 01 00 00 00       	mov    edx,0x1
c00053be:	e8 e1 c5 ff ff       	call   c00019a4 <st_word>
c00053c3:	8d 46 32             	lea    eax,[esi+0x32]
c00053c6:	ba 06 00 00 00       	mov    edx,0x6
c00053cb:	e8 d4 c5 ff ff       	call   c00019a4 <st_word>
c00053d0:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00053d4:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00053d8:	8d 46 47             	lea    eax,[esi+0x47]
c00053db:	b9 13 00 00 00       	mov    ecx,0x13
c00053e0:	ba de d3 01 c0       	mov    edx,0xc001d3de
c00053e5:	eb 2f                	jmp    c0005416 <f_mkfs+0x520>
c00053e7:	8d 46 27             	lea    eax,[esi+0x27]
c00053ea:	ba 00 00 21 50       	mov    edx,0x50210000
c00053ef:	e8 b4 c5 ff ff       	call   c00019a8 <st_dword>
c00053f4:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00053f9:	8d 46 16             	lea    eax,[esi+0x16]
c00053fc:	e8 a3 c5 ff ff       	call   c00019a4 <st_word>
c0005401:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005405:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005409:	8d 46 2b             	lea    eax,[esi+0x2b]
c000540c:	b9 13 00 00 00       	mov    ecx,0x13
c0005411:	ba f2 d3 01 c0       	mov    edx,0xc001d3f2
c0005416:	e8 90 c5 ff ff       	call   c00019ab <mem_cpy>
c000541b:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005421:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005426:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000542a:	e8 75 c5 ff ff       	call   c00019a4 <st_word>
c000542f:	6a 01                	push   0x1
c0005431:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005435:	56                   	push   esi
c0005436:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000543a:	e8 0b c5 ff ff       	call   c000194a <disk_write>
c000543f:	83 c4 10             	add    esp,0x10
c0005442:	85 c0                	test   eax,eax
c0005444:	0f 85 20 02 00 00    	jne    c000566a <f_mkfs+0x774>
c000544a:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000544f:	0f 85 98 00 00 00    	jne    c00054ed <f_mkfs+0x5f7>
c0005455:	6a 01                	push   0x1
c0005457:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000545b:	83 c0 06             	add    eax,0x6
c000545e:	50                   	push   eax
c000545f:	56                   	push   esi
c0005460:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005464:	e8 e1 c4 ff ff       	call   c000194a <disk_write>
c0005469:	b9 00 02 00 00       	mov    ecx,0x200
c000546e:	31 d2                	xor    edx,edx
c0005470:	89 f0                	mov    eax,esi
c0005472:	e8 49 c5 ff ff       	call   c00019c0 <mem_set>
c0005477:	ba 52 52 61 41       	mov    edx,0x41615252
c000547c:	89 f0                	mov    eax,esi
c000547e:	e8 25 c5 ff ff       	call   c00019a8 <st_dword>
c0005483:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005489:	ba 72 72 41 61       	mov    edx,0x61417272
c000548e:	e8 15 c5 ff ff       	call   c00019a8 <st_dword>
c0005493:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005496:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000549c:	e8 07 c5 ff ff       	call   c00019a8 <st_dword>
c00054a1:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00054a7:	ba 02 00 00 00       	mov    edx,0x2
c00054ac:	e8 f7 c4 ff ff       	call   c00019a8 <st_dword>
c00054b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00054b6:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00054bc:	e8 e3 c4 ff ff       	call   c00019a4 <st_word>
c00054c1:	6a 01                	push   0x1
c00054c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054c7:	83 c0 07             	add    eax,0x7
c00054ca:	50                   	push   eax
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00054d0:	e8 75 c4 ff ff       	call   c000194a <disk_write>
c00054d5:	83 c4 20             	add    esp,0x20
c00054d8:	6a 01                	push   0x1
c00054da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054de:	40                   	inc    eax
c00054df:	50                   	push   eax
c00054e0:	56                   	push   esi
c00054e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00054e5:	e8 60 c4 ff ff       	call   c000194a <disk_write>
c00054ea:	83 c4 10             	add    esp,0x10
c00054ed:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00054f1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00054f5:	c1 e8 09             	shr    eax,0x9
c00054f8:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00054fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005502:	31 d2                	xor    edx,edx
c0005504:	31 db                	xor    ebx,ebx
c0005506:	89 f0                	mov    eax,esi
c0005508:	e8 b3 c4 ff ff       	call   c00019c0 <mem_set>
c000550d:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005512:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000551a:	0f 94 c3             	sete   bl
c000551d:	4b                   	dec    ebx
c000551e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0005524:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000552a:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000552f:	75 21                	jne    c0005552 <f_mkfs+0x65c>
c0005531:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005536:	89 f0                	mov    eax,esi
c0005538:	e8 6b c4 ff ff       	call   c00019a8 <st_dword>
c000553d:	8d 46 04             	lea    eax,[esi+0x4]
c0005540:	83 ca ff             	or     edx,0xffffffff
c0005543:	e8 60 c4 ff ff       	call   c00019a8 <st_dword>
c0005548:	8d 46 08             	lea    eax,[esi+0x8]
c000554b:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005550:	eb 04                	jmp    c0005556 <f_mkfs+0x660>
c0005552:	89 da                	mov    edx,ebx
c0005554:	89 f0                	mov    eax,esi
c0005556:	e8 4d c4 ff ff       	call   c00019a8 <st_dword>
c000555b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000555f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000556b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000556f:	76 08                	jbe    c0005579 <f_mkfs+0x683>
c0005571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005579:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000557d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005581:	56                   	push   esi
c0005582:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005586:	e8 bf c3 ff ff       	call   c000194a <disk_write>
c000558b:	83 c4 10             	add    esp,0x10
c000558e:	85 c0                	test   eax,eax
c0005590:	0f 85 d4 00 00 00    	jne    c000566a <f_mkfs+0x774>
c0005596:	b9 00 02 00 00       	mov    ecx,0x200
c000559b:	31 d2                	xor    edx,edx
c000559d:	89 f0                	mov    eax,esi
c000559f:	e8 1c c4 ff ff       	call   c00019c0 <mem_set>
c00055a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00055a8:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c00055ac:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c00055b0:	75 b1                	jne    c0005563 <f_mkfs+0x66d>
c00055b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00055be:	40                   	inc    eax
c00055bf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00055c3:	0f 87 61 ff ff ff    	ja     c000552a <f_mkfs+0x634>
c00055c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00055ce:	74 04                	je     c00055d4 <f_mkfs+0x6de>
c00055d0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00055d4:	89 fb                	mov    ebx,edi
c00055d6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00055da:	76 04                	jbe    c00055e0 <f_mkfs+0x6ea>
c00055dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00055e0:	53                   	push   ebx
c00055e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00055e5:	56                   	push   esi
c00055e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00055ea:	e8 5b c3 ff ff       	call   c000194a <disk_write>
c00055ef:	83 c4 10             	add    esp,0x10
c00055f2:	85 c0                	test   eax,eax
c00055f4:	75 74                	jne    c000566a <f_mkfs+0x774>
c00055f6:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00055fa:	29 df                	sub    edi,ebx
c00055fc:	75 d6                	jne    c00055d4 <f_mkfs+0x6de>
c00055fe:	b1 0c                	mov    cl,0xc
c0005600:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005605:	74 18                	je     c000561f <f_mkfs+0x729>
c0005607:	b1 06                	mov    cl,0x6
c0005609:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005611:	77 0c                	ja     c000561f <f_mkfs+0x729>
c0005613:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005618:	0f 94 c1             	sete   cl
c000561b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000561f:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005624:	75 2d                	jne    c0005653 <f_mkfs+0x75d>
c0005626:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000562a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0005632:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005636:	0f b6 c9             	movzx  ecx,cl
c0005639:	83 ec 0c             	sub    esp,0xc
c000563c:	56                   	push   esi
c000563d:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005641:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005645:	e8 4a d3 ff ff       	call   c0002994 <create_partition>
c000564a:	83 c4 10             	add    esp,0x10
c000564d:	89 c7                	mov    edi,eax
c000564f:	85 c0                	test   eax,eax
c0005651:	75 2e                	jne    c0005681 <f_mkfs+0x78b>
c0005653:	31 ff                	xor    edi,edi
c0005655:	50                   	push   eax
c0005656:	6a 00                	push   0x0
c0005658:	6a 00                	push   0x0
c000565a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000565e:	e8 fd c2 ff ff       	call   c0001960 <disk_ioctl>
c0005663:	83 c4 10             	add    esp,0x10
c0005666:	85 c0                	test   eax,eax
c0005668:	74 17                	je     c0005681 <f_mkfs+0x78b>
c000566a:	85 ed                	test   ebp,ebp
c000566c:	75 0c                	jne    c000567a <f_mkfs+0x784>
c000566e:	83 ec 0c             	sub    esp,0xc
c0005671:	56                   	push   esi
c0005672:	e8 6d 00 00 00       	call   c00056e4 <ff_memfree>
c0005677:	83 c4 10             	add    esp,0x10
c000567a:	bf 01 00 00 00       	mov    edi,0x1
c000567f:	eb 40                	jmp    c00056c1 <f_mkfs+0x7cb>
c0005681:	85 ed                	test   ebp,ebp
c0005683:	75 3c                	jne    c00056c1 <f_mkfs+0x7cb>
c0005685:	83 ec 0c             	sub    esp,0xc
c0005688:	56                   	push   esi
c0005689:	e8 56 00 00 00       	call   c00056e4 <ff_memfree>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	eb 2e                	jmp    c00056c1 <f_mkfs+0x7cb>
c0005693:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005698:	0f 85 56 fb ff ff    	jne    c00051f4 <f_mkfs+0x2fe>
c000569e:	e9 2f fc ff ff       	jmp    c00052d2 <f_mkfs+0x3dc>
c00056a3:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c00056a8:	0f 85 4c fb ff ff    	jne    c00051fa <f_mkfs+0x304>
c00056ae:	89 cf                	mov    edi,ecx
c00056b0:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00056b6:	0f 86 49 fa ff ff    	jbe    c0005105 <f_mkfs+0x20f>
c00056bc:	e9 11 fc ff ff       	jmp    c00052d2 <f_mkfs+0x3dc>
c00056c1:	83 c4 4c             	add    esp,0x4c
c00056c4:	89 f8                	mov    eax,edi
c00056c6:	5b                   	pop    ebx
c00056c7:	5e                   	pop    esi
c00056c8:	5f                   	pop    edi
c00056c9:	5d                   	pop    ebp
c00056ca:	c3                   	ret    
c00056cb:	90                   	nop

c00056cc <ff_memalloc>:
c00056cc:	83 ec 0c             	sub    esp,0xc
c00056cf:	83 ec 0c             	sub    esp,0xc
c00056d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00056d6:	e8 7a 13 00 00       	call   c0006a55 <malloc>
c00056db:	83 c4 10             	add    esp,0x10
c00056de:	83 c4 0c             	add    esp,0xc
c00056e1:	c3                   	ret    
c00056e2:	66 90                	xchg   ax,ax

c00056e4 <ff_memfree>:
c00056e4:	83 ec 0c             	sub    esp,0xc
c00056e7:	83 ec 0c             	sub    esp,0xc
c00056ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00056ee:	e8 72 13 00 00       	call   c0006a65 <free>
c00056f3:	83 c4 10             	add    esp,0x10
c00056f6:	90                   	nop
c00056f7:	83 c4 0c             	add    esp,0xc
c00056fa:	c3                   	ret    
c00056fb:	90                   	nop

c00056fc <ff_uni2oem>:
c00056fc:	83 ec 14             	sub    esp,0x14
c00056ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005703:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005707:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000570e:	c7 44 24 0c 20 d8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d820
c0005716:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000571b:	77 0b                	ja     c0005728 <ff_uni2oem+0x2c>
c000571d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005721:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005726:	eb 60                	jmp    c0005788 <ff_uni2oem+0x8c>
c0005728:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005730:	77 56                	ja     c0005788 <ff_uni2oem+0x8c>
c0005732:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005738:	75 4e                	jne    c0005788 <ff_uni2oem+0x8c>
c000573a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005741:	eb 0d                	jmp    c0005750 <ff_uni2oem+0x54>
c0005743:	90                   	nop
c0005744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005749:	40                   	inc    eax
c000574a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000574f:	90                   	nop
c0005750:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005756:	77 1c                	ja     c0005774 <ff_uni2oem+0x78>
c0005758:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000575d:	01 c0                	add    eax,eax
c000575f:	89 c2                	mov    edx,eax
c0005761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005765:	01 d0                	add    eax,edx
c0005767:	66 8b 00             	mov    ax,WORD PTR [eax]
c000576a:	0f b7 c0             	movzx  eax,ax
c000576d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005771:	75 d1                	jne    c0005744 <ff_uni2oem+0x48>
c0005773:	90                   	nop
c0005774:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005779:	83 e8 80             	sub    eax,0xffffff80
c000577c:	25 ff 00 00 00       	and    eax,0xff
c0005781:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005786:	66 90                	xchg   ax,ax
c0005788:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000578d:	83 c4 14             	add    esp,0x14
c0005790:	c3                   	ret    
c0005791:	8d 76 00             	lea    esi,[esi+0x0]

c0005794 <ff_oem2uni>:
c0005794:	83 ec 18             	sub    esp,0x18
c0005797:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000579b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000579f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00057a4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00057a8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00057af:	c7 44 24 10 20 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d820
c00057b7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00057bd:	77 0d                	ja     c00057cc <ff_oem2uni+0x38>
c00057bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00057c3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00057c8:	eb 32                	jmp    c00057fc <ff_oem2uni+0x68>
c00057ca:	66 90                	xchg   ax,ax
c00057cc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00057d2:	75 28                	jne    c00057fc <ff_oem2uni+0x68>
c00057d4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00057db:	77 1f                	ja     c00057fc <ff_oem2uni+0x68>
c00057dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00057e2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00057e7:	01 c0                	add    eax,eax
c00057e9:	89 c2                	mov    edx,eax
c00057eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ef:	01 d0                	add    eax,edx
c00057f1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00057f4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00057f9:	8d 76 00             	lea    esi,[esi+0x0]
c00057fc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005801:	83 c4 18             	add    esp,0x18
c0005804:	c3                   	ret    
c0005805:	8d 76 00             	lea    esi,[esi+0x0]

c0005808 <ff_wtoupper>:
c0005808:	83 ec 10             	sub    esp,0x10
c000580b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005813:	0f 87 4f 01 00 00    	ja     c0005968 <ff_wtoupper+0x160>
c0005819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000581d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005822:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005829:	77 09                	ja     c0005834 <ff_wtoupper+0x2c>
c000582b:	b8 20 d6 01 c0       	mov    eax,0xc001d620
c0005830:	eb 0a                	jmp    c000583c <ff_wtoupper+0x34>
c0005832:	66 90                	xchg   ax,ax
c0005834:	b8 60 d5 01 c0       	mov    eax,0xc001d560
c0005839:	8d 76 00             	lea    esi,[esi+0x0]
c000583c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005844:	8d 50 02             	lea    edx,[eax+0x2]
c0005847:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000584b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000584e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005853:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005859:	0f 84 fd 00 00 00    	je     c000595c <ff_wtoupper+0x154>
c000585f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005864:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005869:	0f 82 ed 00 00 00    	jb     c000595c <ff_wtoupper+0x154>
c000586f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005873:	8d 50 02             	lea    edx,[eax+0x2]
c0005876:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000587a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000587d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005882:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005887:	66 c1 e8 08          	shr    ax,0x8
c000588b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005890:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005897:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000589c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00058a1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00058a6:	01 ca                	add    edx,ecx
c00058a8:	39 d0                	cmp    eax,edx
c00058aa:	0f 8d 8c 00 00 00    	jge    c000593c <ff_wtoupper+0x134>
c00058b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00058b5:	83 f8 08             	cmp    eax,0x8
c00058b8:	0f 87 9a 00 00 00    	ja     c0005958 <ff_wtoupper+0x150>
c00058be:	8b 04 85 20 d5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ae0]
c00058c5:	ff e0                	jmp    eax
c00058c7:	90                   	nop
c00058c8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00058cd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00058d2:	29 c2                	sub    edx,eax
c00058d4:	89 d0                	mov    eax,edx
c00058d6:	01 c0                	add    eax,eax
c00058d8:	89 c2                	mov    edx,eax
c00058da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00058de:	01 d0                	add    eax,edx
c00058e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00058e3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00058e8:	eb 4e                	jmp    c0005938 <ff_wtoupper+0x130>
c00058ea:	66 90                	xchg   ax,ax
c00058ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00058f1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00058f5:	83 e0 01             	and    eax,0x1
c00058f8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00058fd:	eb 39                	jmp    c0005938 <ff_wtoupper+0x130>
c00058ff:	90                   	nop
c0005900:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005906:	eb 30                	jmp    c0005938 <ff_wtoupper+0x130>
c0005908:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000590e:	eb 28                	jmp    c0005938 <ff_wtoupper+0x130>
c0005910:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005916:	eb 20                	jmp    c0005938 <ff_wtoupper+0x130>
c0005918:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000591e:	eb 18                	jmp    c0005938 <ff_wtoupper+0x130>
c0005920:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005926:	eb 10                	jmp    c0005938 <ff_wtoupper+0x130>
c0005928:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000592e:	eb 08                	jmp    c0005938 <ff_wtoupper+0x130>
c0005930:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005937:	90                   	nop
c0005938:	eb 1e                	jmp    c0005958 <ff_wtoupper+0x150>
c000593a:	66 90                	xchg   ax,ax
c000593c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005942:	0f 85 f8 fe ff ff    	jne    c0005840 <ff_wtoupper+0x38>
c0005948:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000594d:	01 c0                	add    eax,eax
c000594f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005953:	e9 e8 fe ff ff       	jmp    c0005840 <ff_wtoupper+0x38>
c0005958:	90                   	nop
c0005959:	8d 76 00             	lea    esi,[esi+0x0]
c000595c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005961:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005965:	8d 76 00             	lea    esi,[esi+0x0]
c0005968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000596c:	83 c4 10             	add    esp,0x10
c000596f:	c3                   	ret    

c0005970 <CPU::current()>:
c0005970:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0005975:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000597b:	c3                   	ret    

c000597c <operator new(unsigned long)>:
c000597c:	e9 d4 10 00 00       	jmp    c0006a55 <malloc>

c0005981 <operator delete(void*)>:
c0005981:	e9 ef 10 00 00       	jmp    c0006a75 <rfree>

c0005986 <disableIRQs()>:
c0005986:	fa                   	cli    
c0005987:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c000598d:	c3                   	ret    

c000598e <enableIRQs()>:
c000598e:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0005993:	48                   	dec    eax
c0005994:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0005999:	75 01                	jne    c000599c <enableIRQs()+0xe>
c000599b:	fb                   	sti    
c000599c:	c3                   	ret    

c000599d <lockScheduler()>:
c000599d:	fa                   	cli    
c000599e:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00059a4:	c3                   	ret    

c00059a5 <unlockScheduler()>:
c00059a5:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00059aa:	48                   	dec    eax
c00059ab:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00059b0:	75 01                	jne    c00059b3 <unlockScheduler()+0xe>
c00059b2:	fb                   	sti    
c00059b3:	c3                   	ret    

c00059b4 <lockStuff()>:
c00059b4:	fa                   	cli    
c00059b5:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00059bb:	ff 05 44 39 02 c0    	inc    DWORD PTR ds:0xc0023944
c00059c1:	c3                   	ret    

c00059c2 <unlockStuff()>:
c00059c2:	83 ec 0c             	sub    esp,0xc
c00059c5:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c00059ca:	48                   	dec    eax
c00059cb:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c00059d0:	75 18                	jne    c00059ea <unlockStuff()+0x28>
c00059d2:	83 3d 40 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023940,0x0
c00059d9:	74 0f                	je     c00059ea <unlockStuff()+0x28>
c00059db:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c00059e5:	e8 4e cf 00 00       	call   c0012938 <schedule()>
c00059ea:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00059ef:	48                   	dec    eax
c00059f0:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00059f5:	75 01                	jne    c00059f8 <unlockStuff()+0x36>
c00059f7:	fb                   	sti    
c00059f8:	83 c4 0c             	add    esp,0xc
c00059fb:	c3                   	ret    

c00059fc <Virt::getAKernelVAS()>:
c00059fc:	a1 54 05 02 c0       	mov    eax,ds:0xc0020554
c0005a01:	c3                   	ret    

c0005a02 <__not_memcpy>:
c0005a02:	57                   	push   edi
c0005a03:	56                   	push   esi
c0005a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005a0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005a10:	89 c7                	mov    edi,eax
c0005a12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005a14:	5e                   	pop    esi
c0005a15:	5f                   	pop    edi
c0005a16:	c3                   	ret    
c0005a17:	90                   	nop

c0005a18 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005a18:	83 ec 0c             	sub    esp,0xc
c0005a1b:	83 ec 08             	sub    esp,0x8
c0005a1e:	68 20 d9 01 c0       	push   0xc001d920
c0005a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a27:	e8 c4 ab ff ff       	call   c00005f0 <strcmp>
c0005a2c:	83 c4 10             	add    esp,0x10
c0005a2f:	85 c0                	test   eax,eax
c0005a31:	0f 94 c0             	sete   al
c0005a34:	84 c0                	test   al,al
c0005a36:	74 0c                	je     c0005a44 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005a38:	b8 68 04 02 c0       	mov    eax,0xc0020468
c0005a3d:	e9 ea 00 00 00       	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005a42:	66 90                	xchg   ax,ax
c0005a44:	83 ec 08             	sub    esp,0x8
c0005a47:	68 29 d9 01 c0       	push   0xc001d929
c0005a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a50:	e8 9b ab ff ff       	call   c00005f0 <strcmp>
c0005a55:	83 c4 10             	add    esp,0x10
c0005a58:	85 c0                	test   eax,eax
c0005a5a:	0f 94 c0             	sete   al
c0005a5d:	84 c0                	test   al,al
c0005a5f:	74 0b                	je     c0005a6c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005a61:	b8 c0 c5 01 c0       	mov    eax,0xc001c5c0
c0005a66:	e9 c1 00 00 00       	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005a6b:	90                   	nop
c0005a6c:	83 ec 08             	sub    esp,0x8
c0005a6f:	68 33 d9 01 c0       	push   0xc001d933
c0005a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a78:	e8 73 ab ff ff       	call   c00005f0 <strcmp>
c0005a7d:	83 c4 10             	add    esp,0x10
c0005a80:	85 c0                	test   eax,eax
c0005a82:	0f 94 c0             	sete   al
c0005a85:	84 c0                	test   al,al
c0005a87:	74 0b                	je     c0005a94 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005a89:	b8 f4 c2 01 c0       	mov    eax,0xc001c2f4
c0005a8e:	e9 99 00 00 00       	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005a93:	90                   	nop
c0005a94:	83 ec 08             	sub    esp,0x8
c0005a97:	68 3c d9 01 c0       	push   0xc001d93c
c0005a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aa0:	e8 4b ab ff ff       	call   c00005f0 <strcmp>
c0005aa5:	83 c4 10             	add    esp,0x10
c0005aa8:	85 c0                	test   eax,eax
c0005aaa:	0f 94 c0             	sete   al
c0005aad:	84 c0                	test   al,al
c0005aaf:	74 07                	je     c0005ab8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005ab1:	b8 c0 c6 01 c0       	mov    eax,0xc001c6c0
c0005ab6:	eb 74                	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ab8:	83 ec 08             	sub    esp,0x8
c0005abb:	68 46 d9 01 c0       	push   0xc001d946
c0005ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ac4:	e8 27 ab ff ff       	call   c00005f0 <strcmp>
c0005ac9:	83 c4 10             	add    esp,0x10
c0005acc:	85 c0                	test   eax,eax
c0005ace:	0f 94 c0             	sete   al
c0005ad1:	84 c0                	test   al,al
c0005ad3:	74 07                	je     c0005adc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005ad5:	b8 40 c4 01 c0       	mov    eax,0xc001c440
c0005ada:	eb 50                	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005adc:	83 ec 08             	sub    esp,0x8
c0005adf:	68 4f d9 01 c0       	push   0xc001d94f
c0005ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ae8:	e8 03 ab ff ff       	call   c00005f0 <strcmp>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	85 c0                	test   eax,eax
c0005af2:	0f 94 c0             	sete   al
c0005af5:	84 c0                	test   al,al
c0005af7:	74 07                	je     c0005b00 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005af9:	b8 6c 04 02 c0       	mov    eax,0xc002046c
c0005afe:	eb 2c                	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005b00:	83 ec 08             	sub    esp,0x8
c0005b03:	68 5c d9 01 c0       	push   0xc001d95c
c0005b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b0c:	e8 df aa ff ff       	call   c00005f0 <strcmp>
c0005b11:	83 c4 10             	add    esp,0x10
c0005b14:	85 c0                	test   eax,eax
c0005b16:	0f 94 c0             	sete   al
c0005b19:	84 c0                	test   al,al
c0005b1b:	74 07                	je     c0005b24 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005b1d:	b8 6d 04 02 c0       	mov    eax,0xc002046d
c0005b22:	eb 08                	jmp    c0005b2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005b24:	b8 00 00 00 00       	mov    eax,0x0
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]
c0005b2c:	83 c4 0c             	add    esp,0xc
c0005b2f:	c3                   	ret    

c0005b30 <Computer::close(int, int, void*)>:
c0005b30:	57                   	push   edi
c0005b31:	56                   	push   esi
c0005b32:	53                   	push   ebx
c0005b33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005b37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005b3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005b3f:	83 ec 0c             	sub    esp,0xc
c0005b42:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0005b48:	e8 d3 51 00 00       	call   c000ad20 <Device::closeAll()>
c0005b4d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005b53:	83 c4 10             	add    esp,0x10
c0005b56:	8b 10                	mov    edx,DWORD PTR [eax]
c0005b58:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005b5c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	5b                   	pop    ebx
c0005b6d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005b70:	5e                   	pop    esi
c0005b71:	5f                   	pop    edi
c0005b72:	ff e0                	jmp    eax

c0005b74 <Krnl::firstTask()>:
c0005b74:	53                   	push   ebx
c0005b75:	83 ec 14             	sub    esp,0x14
c0005b78:	fb                   	sti    
c0005b79:	68 69 d9 01 c0       	push   0xc001d969
c0005b7e:	e8 2c 0f 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005b83:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005b8a:	e8 c6 0e 00 00       	call   c0006a55 <malloc>
c0005b8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b96:	89 c3                	mov    ebx,eax
c0005b98:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c0005b9e:	68 82 d9 01 c0       	push   0xc001d982
c0005ba3:	6a 01                	push   0x1
c0005ba5:	50                   	push   eax
c0005ba6:	e8 69 c9 00 00       	call   c0012514 <Process::Process(bool, char const*, Process*, char**)>
c0005bab:	83 c4 20             	add    esp,0x20
c0005bae:	68 ff 00 00 00       	push   0xff
c0005bb3:	6a 00                	push   0x0
c0005bb5:	68 ad 64 00 c0       	push   0xc00064ad
c0005bba:	53                   	push   ebx
c0005bbb:	e8 5c cb 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c0005bc0:	6a 7a                	push   0x7a
c0005bc2:	6a 00                	push   0x0
c0005bc4:	68 60 31 01 c0       	push   0xc0013160
c0005bc9:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c0005bcf:	e8 48 cb 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c0005bd4:	83 c4 14             	add    esp,0x14
c0005bd7:	a3 28 39 02 c0       	mov    ds:0xc0023928,eax
c0005bdc:	68 80 da 01 c0       	push   0xc001da80
c0005be1:	c6 05 6d 04 02 c0 01 	mov    BYTE PTR ds:0xc002046d,0x1
c0005be8:	e8 c2 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005bed:	e8 49 d9 00 00       	call   c001353b <Vm::initialise8086()>
c0005bf2:	e8 7f 3f 00 00       	call   c0009b76 <Fs::initVFS()>
c0005bf7:	c7 04 24 8f d9 01 c0 	mov    DWORD PTR [esp],0xc001d98f
c0005bfe:	e8 ac 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005c03:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0005c08:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0005c10:	6a 00                	push   0x0
c0005c12:	6a 00                	push   0x0
c0005c14:	6a 00                	push   0x0
c0005c16:	50                   	push   eax
c0005c17:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005c1a:	83 c4 14             	add    esp,0x14
c0005c1d:	68 80 da 01 c0       	push   0xc001da80
c0005c22:	e8 88 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005c27:	e8 86 b1 00 00       	call   c0010db2 <Sys::loadSyscalls()>
c0005c2c:	e8 7b 97 00 00       	call   c000f3ac <Krnl::loadSystemEnv()>
c0005c31:	e8 b9 9b 00 00       	call   c000f7ef <Krnl::setupPowerManager()>
c0005c36:	83 c4 0c             	add    esp,0xc
c0005c39:	6a 3a                	push   0x3a
c0005c3b:	68 a9 d9 01 c0       	push   0xc001d9a9
c0005c40:	68 b2 d9 01 c0       	push   0xc001d9b2
c0005c45:	e8 cf a0 00 00       	call   c000fd19 <Reg::readIntWithDefault(char*, char*, int)>
c0005c4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c4d:	e8 26 4a 00 00       	call   c000a678 <User::loadClockSettings(int)>
c0005c52:	c7 04 24 a4 da 01 c0 	mov    DWORD PTR [esp],0xc001daa4
c0005c59:	e8 51 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005c5e:	58                   	pop    eax
c0005c5f:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0005c64:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0005c6a:	e8 af 50 00 00       	call   c000ad1e <Device::loadDriversForAll()>
c0005c6f:	c7 04 24 ba d9 01 c0 	mov    DWORD PTR [esp],0xc001d9ba
c0005c76:	e8 34 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005c7b:	e8 b2 92 00 00       	call   c000ef32 <Krnl::startCPUs()>
c0005c80:	c7 04 24 d4 d9 01 c0 	mov    DWORD PTR [esp],0xc001d9d4
c0005c87:	e8 23 0e 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0005c8c:	5a                   	pop    edx
c0005c8d:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c0005c93:	59                   	pop    ecx
c0005c94:	6a 01                	push   0x1
c0005c96:	68 e5 d9 01 c0       	push   0xc001d9e5
c0005c9b:	e8 ba c2 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c0005ca0:	5a                   	pop    edx
c0005ca1:	59                   	pop    ecx
c0005ca2:	53                   	push   ebx
c0005ca3:	50                   	push   eax
c0005ca4:	e8 e2 c4 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c0005ca9:	83 c4 10             	add    esp,0x10
c0005cac:	83 ec 0c             	sub    esp,0xc
c0005caf:	6a 02                	push   0x2
c0005cb1:	e8 7a ce 00 00       	call   c0012b30 <blockTask(TaskState)>
c0005cb6:	83 c4 10             	add    esp,0x10
c0005cb9:	eb f1                	jmp    c0005cac <Krnl::firstTask()+0x138>
c0005cbb:	90                   	nop

c0005cbc <Computer::Computer()>:
c0005cbc:	83 ec 0c             	sub    esp,0xc
c0005cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cc3:	83 ec 08             	sub    esp,0x8
c0005cc6:	68 01 da 01 c0       	push   0xc001da01
c0005ccb:	50                   	push   eax
c0005ccc:	e8 c9 50 00 00       	call   c000ad9a <Device::Device(char const*)>
c0005cd1:	83 c4 10             	add    esp,0x10
c0005cd4:	ba f0 da 01 c0       	mov    edx,0xc001daf0
c0005cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cdd:	89 10                	mov    DWORD PTR [eax],edx
c0005cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ce3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cf1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cff:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0005d05:	83 ca 04             	or     edx,0x4
c0005d08:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0005d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d18:	0f b6 d0             	movzx  edx,al
c0005d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d1f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d30:	0f b6 d0             	movzx  edx,al
c0005d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d37:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d46:	8d 50 01             	lea    edx,[eax+0x1]
c0005d49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d4d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005d53:	0f b6 d0             	movzx  edx,al
c0005d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d5a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005d5e:	83 e1 3f             	and    ecx,0x3f
c0005d61:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d6f:	0f b6 d0             	movzx  edx,al
c0005d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d76:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0005d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d87:	0f b6 d0             	movzx  edx,al
c0005d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d8e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0005da0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005da4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005daa:	0f b6 d0             	movzx  edx,al
c0005dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005db1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005db5:	83 e1 3f             	and    ecx,0x3f
c0005db8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005dc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005dc6:	0f b6 d0             	movzx  edx,al
c0005dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005dcd:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0005dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005dd8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005dde:	0f b6 d0             	movzx  edx,al
c0005de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005de5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005dee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005df4:	8d 50 01             	lea    edx,[eax+0x1]
c0005df7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005dfb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005e01:	0f b6 d0             	movzx  edx,al
c0005e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e08:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005e0c:	83 e1 3f             	and    ecx,0x3f
c0005e0f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005e13:	90                   	nop
c0005e14:	83 c4 0c             	add    esp,0xc
c0005e17:	c3                   	ret    

c0005e18 <Computer::setBootMessage(char const*)>:
c0005e18:	c3                   	ret    
c0005e19:	90                   	nop

c0005e1a <Computer::detectFeatures()>:
c0005e1a:	55                   	push   ebp
c0005e1b:	57                   	push   edi
c0005e1c:	56                   	push   esi
c0005e1d:	53                   	push   ebx
c0005e1e:	83 ec 1c             	sub    esp,0x1c
c0005e21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e25:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0005e2f:	e8 e5 a3 ff ff       	call   c0000219 <detectCPUID>
c0005e34:	85 c0                	test   eax,eax
c0005e36:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005e3c:	0f 95 c2             	setne  dl
c0005e3f:	83 e0 fd             	and    eax,0xfffffffd
c0005e42:	d1 e2                	shl    edx,1
c0005e44:	09 d0                	or     eax,edx
c0005e46:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005e4c:	a8 02                	test   al,0x2
c0005e4e:	75 46                	jne    c0005e96 <Computer::detectFeatures()+0x7c>
c0005e50:	f6 05 81 04 02 c0 04 	test   BYTE PTR ds:0xc0020481,0x4
c0005e57:	74 07                	je     c0005e60 <Computer::detectFeatures()+0x46>
c0005e59:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0005e60:	e8 21 64 01 00       	call   c001c286 <x87Detect>
c0005e65:	83 e0 01             	and    eax,0x1
c0005e68:	c1 e0 04             	shl    eax,0x4
c0005e6b:	88 c2                	mov    dl,al
c0005e6d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005e73:	83 e0 ef             	and    eax,0xffffffef
c0005e76:	09 d0                	or     eax,edx
c0005e78:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005e7e:	a8 10                	test   al,0x10
c0005e80:	0f 85 2a 01 00 00    	jne    c0005fb0 <Computer::detectFeatures()+0x196>
c0005e86:	84 c0                	test   al,al
c0005e88:	0f 88 45 01 00 00    	js     c0005fd3 <Computer::detectFeatures()+0x1b9>
c0005e8e:	83 c4 1c             	add    esp,0x1c
c0005e91:	5b                   	pop    ebx
c0005e92:	5e                   	pop    esi
c0005e93:	5f                   	pop    edi
c0005e94:	5d                   	pop    ebp
c0005e95:	c3                   	ret    
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 20                	push   0x20
c0005e9b:	e8 1c 84 00 00       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c0005ea0:	83 e0 01             	and    eax,0x1
c0005ea3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005eaa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005eb0:	83 e0 f7             	and    eax,0xfffffff7
c0005eb3:	09 d0                	or     eax,edx
c0005eb5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005ebb:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005ec2:	e8 f5 83 00 00       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c0005ec7:	83 e0 01             	and    eax,0x1
c0005eca:	88 c2                	mov    dl,al
c0005ecc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005ed2:	83 e0 fe             	and    eax,0xfffffffe
c0005ed5:	09 d0                	or     eax,edx
c0005ed7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005edd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0005ee4:	e8 d3 83 00 00       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c0005ee9:	c1 e0 07             	shl    eax,0x7
c0005eec:	88 c2                	mov    dl,al
c0005eee:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005ef4:	83 e0 7f             	and    eax,0x7f
c0005ef7:	09 d0                	or     eax,edx
c0005ef9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005eff:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0005f06:	e8 b1 83 00 00       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c0005f0b:	83 c4 10             	add    esp,0x10
c0005f0e:	83 e0 01             	and    eax,0x1
c0005f11:	c1 e0 05             	shl    eax,0x5
c0005f14:	88 c2                	mov    dl,al
c0005f16:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005f1c:	83 e0 df             	and    eax,0xffffffdf
c0005f1f:	09 d0                	or     eax,edx
c0005f21:	f7 05 80 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020480,0x401
c0005f2b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005f31:	0f 84 c2 00 00 00    	je     c0005ff9 <Computer::detectFeatures()+0x1df>
c0005f37:	83 e0 fe             	and    eax,0xfffffffe
c0005f3a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005f40:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005f46:	88 c2                	mov    dl,al
c0005f48:	83 e2 09             	and    edx,0x9
c0005f4b:	fe ca                	dec    dl
c0005f4d:	75 09                	jne    c0005f58 <Computer::detectFeatures()+0x13e>
c0005f4f:	83 e0 fe             	and    eax,0xfffffffe
c0005f52:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005f58:	83 ec 0c             	sub    esp,0xc
c0005f5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0005f5f:	50                   	push   eax
c0005f60:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0005f64:	55                   	push   ebp
c0005f65:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0005f69:	57                   	push   edi
c0005f6a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0005f6e:	56                   	push   esi
c0005f6f:	68 00 00 00 80       	push   0x80000000
c0005f74:	e8 bf 82 00 00       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0005f79:	83 c4 20             	add    esp,0x20
c0005f7c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0005f83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0005f87:	0f 86 c3 fe ff ff    	jbe    c0005e50 <Computer::detectFeatures()+0x36>
c0005f8d:	83 ec 0c             	sub    esp,0xc
c0005f90:	50                   	push   eax
c0005f91:	55                   	push   ebp
c0005f92:	57                   	push   edi
c0005f93:	56                   	push   esi
c0005f94:	68 01 00 00 80       	push   0x80000001
c0005f99:	e8 9a 82 00 00       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0005f9e:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0005fa8:	83 c4 20             	add    esp,0x20
c0005fab:	e9 a0 fe ff ff       	jmp    c0005e50 <Computer::detectFeatures()+0x36>
c0005fb0:	e8 8b 62 01 00       	call   c001c240 <absolutelyNoChanceInHell>
c0005fb5:	88 c2                	mov    dl,al
c0005fb7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005fbd:	c1 e2 07             	shl    edx,0x7
c0005fc0:	83 e0 7f             	and    eax,0x7f
c0005fc3:	09 d0                	or     eax,edx
c0005fc5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005fcb:	84 c0                	test   al,al
c0005fcd:	0f 89 bb fe ff ff    	jns    c0005e8e <Computer::detectFeatures()+0x74>
c0005fd3:	e8 e8 5f 01 00       	call   c001bfc0 <avxDetect>
c0005fd8:	83 e0 01             	and    eax,0x1
c0005fdb:	c1 e0 05             	shl    eax,0x5
c0005fde:	88 c2                	mov    dl,al
c0005fe0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005fe6:	83 e0 df             	and    eax,0xffffffdf
c0005fe9:	09 d0                	or     eax,edx
c0005feb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005ff1:	83 c4 1c             	add    esp,0x1c
c0005ff4:	5b                   	pop    ebx
c0005ff5:	5e                   	pop    esi
c0005ff6:	5f                   	pop    edi
c0005ff7:	5d                   	pop    ebp
c0005ff8:	c3                   	ret    
c0005ff9:	83 ec 0c             	sub    esp,0xc
c0005ffc:	68 00 02 00 00       	push   0x200
c0006001:	e8 b6 82 00 00       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006006:	83 c4 10             	add    esp,0x10
c0006009:	83 e0 01             	and    eax,0x1
c000600c:	88 c2                	mov    dl,al
c000600e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006014:	83 e0 fe             	and    eax,0xfffffffe
c0006017:	09 d0                	or     eax,edx
c0006019:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000601f:	e9 1c ff ff ff       	jmp    c0005f40 <Computer::detectFeatures()+0x126>

c0006024 <Computer::displayFeatures()>:
c0006024:	c3                   	ret    
c0006025:	90                   	nop

c0006026 <Computer::rdmsr(unsigned int)>:
c0006026:	83 ec 0c             	sub    esp,0xc
c0006029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000602d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006034:	74 0a                	je     c0006040 <Computer::rdmsr(unsigned int)+0x1a>
c0006036:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000603a:	0f 32                	rdmsr  
c000603c:	83 c4 0c             	add    esp,0xc
c000603f:	c3                   	ret    
c0006040:	83 ec 0c             	sub    esp,0xc
c0006043:	68 0a da 01 c0       	push   0xc001da0a
c0006048:	e8 68 94 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000604d:	83 c4 10             	add    esp,0x10
c0006050:	eb e4                	jmp    c0006036 <Computer::rdmsr(unsigned int)+0x10>

c0006052 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006052:	57                   	push   edi
c0006053:	56                   	push   esi
c0006054:	52                   	push   edx
c0006055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006059:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000605d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006061:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006068:	74 0e                	je     c0006078 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000606a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000606e:	89 f0                	mov    eax,esi
c0006070:	89 fa                	mov    edx,edi
c0006072:	0f 30                	wrmsr  
c0006074:	58                   	pop    eax
c0006075:	5e                   	pop    esi
c0006076:	5f                   	pop    edi
c0006077:	c3                   	ret    
c0006078:	83 ec 0c             	sub    esp,0xc
c000607b:	68 10 da 01 c0       	push   0xc001da10
c0006080:	e8 30 94 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006085:	83 c4 10             	add    esp,0x10
c0006088:	eb e0                	jmp    c000606a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000608a <Computer::shutdown()>:
c000608a:	83 ec 0c             	sub    esp,0xc
c000608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006091:	8b 10                	mov    edx,DWORD PTR [eax]
c0006093:	6a 00                	push   0x0
c0006095:	6a 00                	push   0x0
c0006097:	6a 00                	push   0x0
c0006099:	50                   	push   eax
c000609a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000609d:	83 c4 1c             	add    esp,0x1c
c00060a0:	c3                   	ret    
c00060a1:	90                   	nop

c00060a2 <Computer::restart()>:
c00060a2:	83 ec 0c             	sub    esp,0xc
c00060a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00060ab:	6a 00                	push   0x0
c00060ad:	6a 00                	push   0x0
c00060af:	6a 01                	push   0x1
c00060b1:	50                   	push   eax
c00060b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00060b5:	83 c4 1c             	add    esp,0x1c
c00060b8:	c3                   	ret    
c00060b9:	90                   	nop

c00060ba <Computer::sleep()>:
c00060ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060be:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00060c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00060c8:	e9 67 7c 00 00       	jmp    c000dd34 <ACPI::sleep()>
c00060cd:	90                   	nop

c00060ce <Computer::nmiEnabled()>:
c00060ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00060d8:	c3                   	ret    
c00060d9:	90                   	nop

c00060da <Computer::readCMOS(unsigned char)>:
c00060da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060de:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00060e5:	19 c0                	sbb    eax,eax
c00060e7:	83 e0 80             	and    eax,0xffffff80
c00060ea:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00060ee:	e6 70                	out    0x70,al
c00060f0:	e4 71                	in     al,0x71
c00060f2:	c3                   	ret    
c00060f3:	90                   	nop

c00060f4 <Computer::enableNMI(bool)>:
c00060f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060fc:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006102:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000610a:	eb ce                	jmp    c00060da <Computer::readCMOS(unsigned char)>

c000610c <Computer::open(int, int, void*)>:
c000610c:	56                   	push   esi
c000610d:	53                   	push   ebx
c000610e:	83 ec 10             	sub    esp,0x10
c0006111:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006115:	f6 05 80 04 02 c0 04 	test   BYTE PTR ds:0xc0020480,0x4
c000611c:	68 16 da 01 c0       	push   0xc001da16
c0006121:	0f 94 05 a0 fd 01 c0 	sete   BYTE PTR ds:0xc001fda0
c0006128:	e8 82 09 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000612d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006134:	e8 1c 09 00 00       	call   c0006a55 <malloc>
c0006139:	89 04 24             	mov    DWORD PTR [esp],eax
c000613c:	89 c6                	mov    esi,eax
c000613e:	e8 95 77 00 00       	call   c000d8d8 <ACPI::ACPI()>
c0006143:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0006149:	58                   	pop    eax
c000614a:	5a                   	pop    edx
c000614b:	56                   	push   esi
c000614c:	53                   	push   ebx
c000614d:	e8 b0 4a 00 00       	call   c000ac02 <Device::addChild(Device*)>
c0006152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006155:	e8 c0 fc ff ff       	call   c0005e1a <Computer::detectFeatures()>
c000615a:	59                   	pop    ecx
c000615b:	5e                   	pop    esi
c000615c:	6a 01                	push   0x1
c000615e:	53                   	push   ebx
c000615f:	e8 90 ff ff ff       	call   c00060f4 <Computer::enableNMI(bool)>
c0006164:	c7 04 24 ba d9 01 c0 	mov    DWORD PTR [esp],0xc001d9ba
c000616b:	e8 3f 09 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c0006170:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006177:	e8 d9 08 00 00       	call   c0006a55 <malloc>
c000617c:	89 04 24             	mov    DWORD PTR [esp],eax
c000617f:	89 c6                	mov    esi,eax
c0006181:	e8 ee 81 00 00       	call   c000e374 <CPU::CPU()>
c0006186:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000618c:	58                   	pop    eax
c000618d:	5a                   	pop    edx
c000618e:	56                   	push   esi
c000618f:	53                   	push   ebx
c0006190:	e8 6d 4a 00 00       	call   c000ac02 <Device::addChild(Device*)>
c0006195:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000619b:	8b 10                	mov    edx,DWORD PTR [eax]
c000619d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00061a1:	6a 00                	push   0x0
c00061a3:	6a 00                	push   0x0
c00061a5:	50                   	push   eax
c00061a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00061a9:	83 c4 14             	add    esp,0x14
c00061ac:	68 c4 da 01 c0       	push   0xc001dac4
c00061b1:	e8 f9 08 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c00061b6:	e8 08 f4 00 00       	call   c00155c3 <Hal::initialiseCoprocessor()>
c00061bb:	c7 04 24 2e da 01 c0 	mov    DWORD PTR [esp],0xc001da2e
c00061c2:	e8 e8 08 00 00       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c00061c7:	c7 04 24 74 5b 00 c0 	mov    DWORD PTR [esp],0xc0005b74
c00061ce:	e8 5d c6 00 00       	call   c0012830 <setupMultitasking(void (*)())>
c00061d3:	83 c4 14             	add    esp,0x14
c00061d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00061db:	5b                   	pop    ebx
c00061dc:	5e                   	pop    esi
c00061dd:	c3                   	ret    

c00061de <Computer::disableNMI()>:
c00061de:	6a 00                	push   0x0
c00061e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00061e4:	e8 0b ff ff ff       	call   c00060f4 <Computer::enableNMI(bool)>
c00061e9:	58                   	pop    eax
c00061ea:	5a                   	pop    edx
c00061eb:	c3                   	ret    

c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>:
c00061ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061f0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00061f7:	19 c0                	sbb    eax,eax
c00061f9:	83 e0 80             	and    eax,0xffffff80
c00061fc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006200:	e6 70                	out    0x70,al
c0006202:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006206:	e6 71                	out    0x71,al
c0006208:	c3                   	ret    
c0006209:	90                   	nop

c000620a <Computer::handleNMI()>:
c000620a:	56                   	push   esi
c000620b:	53                   	push   ebx
c000620c:	83 ec 10             	sub    esp,0x10
c000620f:	e4 92                	in     al,0x92
c0006211:	89 c6                	mov    esi,eax
c0006213:	e4 61                	in     al,0x61
c0006215:	68 49 da 01 c0       	push   0xc001da49
c000621a:	88 c3                	mov    bl,al
c000621c:	e8 be 35 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0006221:	83 c4 10             	add    esp,0x10
c0006224:	83 e6 10             	and    esi,0x10
c0006227:	75 0d                	jne    c0006236 <Computer::handleNMI()+0x2c>
c0006229:	f6 c3 40             	test   bl,0x40
c000622c:	75 1d                	jne    c000624b <Computer::handleNMI()+0x41>
c000622e:	84 db                	test   bl,bl
c0006230:	78 2d                	js     c000625f <Computer::handleNMI()+0x55>
c0006232:	58                   	pop    eax
c0006233:	5b                   	pop    ebx
c0006234:	5e                   	pop    esi
c0006235:	c3                   	ret    
c0006236:	83 ec 0c             	sub    esp,0xc
c0006239:	68 5a da 01 c0       	push   0xc001da5a
c000623e:	e8 72 92 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006243:	83 c4 10             	add    esp,0x10
c0006246:	f6 c3 40             	test   bl,0x40
c0006249:	74 e3                	je     c000622e <Computer::handleNMI()+0x24>
c000624b:	83 ec 0c             	sub    esp,0xc
c000624e:	68 67 da 01 c0       	push   0xc001da67
c0006253:	e8 5d 92 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006258:	83 c4 10             	add    esp,0x10
c000625b:	84 db                	test   bl,bl
c000625d:	79 d3                	jns    c0006232 <Computer::handleNMI()+0x28>
c000625f:	c7 44 24 10 71 da 01 c0 	mov    DWORD PTR [esp+0x10],0xc001da71
c0006267:	5a                   	pop    edx
c0006268:	5b                   	pop    ebx
c0006269:	5e                   	pop    esi
c000626a:	e9 46 92 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c000626f:	90                   	nop

c0006270 <Computer::setDiskActivityLight(int, bool)>:
c0006270:	56                   	push   esi
c0006271:	53                   	push   ebx
c0006272:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006276:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000627b:	77 1b                	ja     c0006298 <Computer::setDiskActivityLight(int, bool)+0x28>
c000627d:	e4 92                	in     al,0x92
c000627f:	bb 40 00 00 00       	mov    ebx,0x40
c0006284:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0006288:	89 da                	mov    edx,ebx
c000628a:	d3 e2                	shl    edx,cl
c000628c:	89 f1                	mov    ecx,esi
c000628e:	f7 d2                	not    edx
c0006290:	d3 e3                	shl    ebx,cl
c0006292:	21 d0                	and    eax,edx
c0006294:	09 d8                	or     eax,ebx
c0006296:	e6 92                	out    0x92,al
c0006298:	5b                   	pop    ebx
c0006299:	5e                   	pop    esi
c000629a:	c3                   	ret    
c000629b:	90                   	nop

c000629c <GDTEntry::setBase(unsigned int)>:
c000629c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00062a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00062a4:	89 c1                	mov    ecx,eax
c00062a6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00062aa:	c1 e9 10             	shr    ecx,0x10
c00062ad:	c1 e8 18             	shr    eax,0x18
c00062b0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00062b3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00062b6:	c3                   	ret    
c00062b7:	90                   	nop

c00062b8 <GDTEntry::setLimit(unsigned int)>:
c00062b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00062bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00062c0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00062c3:	66 89 01             	mov    WORD PTR [ecx],ax
c00062c6:	83 e2 f0             	and    edx,0xfffffff0
c00062c9:	c1 e8 10             	shr    eax,0x10
c00062cc:	83 e0 0f             	and    eax,0xf
c00062cf:	09 d0                	or     eax,edx
c00062d1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00062d4:	c3                   	ret    
c00062d5:	90                   	nop

c00062d6 <GDT::GDT()>:
c00062d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00062e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00062ea:	90                   	nop
c00062eb:	c3                   	ret    

c00062ec <GDT::addEntry(GDTEntry)>:
c00062ec:	53                   	push   ebx
c00062ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00062f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00062f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00062f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00062fb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00062ff:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0006303:	8d 48 01             	lea    ecx,[eax+0x1]
c0006306:	c1 e0 03             	shl    eax,0x3
c0006309:	89 0a                	mov    DWORD PTR [edx],ecx
c000630b:	5b                   	pop    ebx
c000630c:	c3                   	ret    
c000630d:	90                   	nop

c000630e <GDT::getNumberOfEntries()>:
c000630e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006312:	8b 00                	mov    eax,DWORD PTR [eax]
c0006314:	c3                   	ret    
c0006315:	90                   	nop

c0006316 <GDT::flush()>:
c0006316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000631a:	8b 10                	mov    edx,DWORD PTR [eax]
c000631c:	83 c0 04             	add    eax,0x4
c000631f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006326:	a3 72 04 02 c0       	mov    ds:0xc0020472,eax
c000632b:	66 89 15 70 04 02 c0 	mov    WORD PTR ds:0xc0020470,dx
c0006332:	e9 46 a0 ff ff       	jmp    c000037d <loadGDT>
c0006337:	90                   	nop

c0006338 <GDT::setup()>:
c0006338:	57                   	push   edi
c0006339:	56                   	push   esi
c000633a:	53                   	push   ebx
c000633b:	83 ec 40             	sub    esp,0x40
c000633e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006342:	6a 00                	push   0x0
c0006344:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006348:	56                   	push   esi
c0006349:	e8 4e ff ff ff       	call   c000629c <GDTEntry::setBase(unsigned int)>
c000634e:	6a 00                	push   0x0
c0006350:	56                   	push   esi
c0006351:	e8 62 ff ff ff       	call   c00062b8 <GDTEntry::setLimit(unsigned int)>
c0006356:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000635e:	6a 00                	push   0x0
c0006360:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006364:	56                   	push   esi
c0006365:	e8 32 ff ff ff       	call   c000629c <GDTEntry::setBase(unsigned int)>
c000636a:	68 ff ff ff 00       	push   0xffffff
c000636f:	56                   	push   esi
c0006370:	e8 43 ff ff ff       	call   c00062b8 <GDTEntry::setLimit(unsigned int)>
c0006375:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006379:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000637e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0006383:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006387:	83 c4 20             	add    esp,0x20
c000638a:	6a 00                	push   0x0
c000638c:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0006390:	56                   	push   esi
c0006391:	e8 06 ff ff ff       	call   c000629c <GDTEntry::setBase(unsigned int)>
c0006396:	68 ff ff ff 00       	push   0xffffff
c000639b:	56                   	push   esi
c000639c:	e8 17 ff ff ff       	call   c00062b8 <GDTEntry::setLimit(unsigned int)>
c00063a1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00063a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00063a9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00063ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00063b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00063b5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00063ba:	0d 00 92 c0 00       	or     eax,0xc09200
c00063bf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00063c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00063c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00063cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00063cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 fa                	mov    edx,edi
c00063d9:	80 cc 60             	or     ah,0x60
c00063dc:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00063e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00063e6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00063ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00063ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063f2:	80 cc 60             	or     ah,0x60
c00063f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00063f9:	89 f8                	mov    eax,edi
c00063fb:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006400:	09 d0                	or     eax,edx
c0006402:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006406:	89 c7                	mov    edi,eax
c0006408:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000640c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006410:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006418:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000641e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006422:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006427:	09 d0                	or     eax,edx
c0006429:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000642d:	83 c4 0c             	add    esp,0xc
c0006430:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006434:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006438:	53                   	push   ebx
c0006439:	e8 ae fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c000643e:	83 c4 0c             	add    esp,0xc
c0006441:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006445:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006449:	53                   	push   ebx
c000644a:	e8 9d fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c000644f:	83 c4 0c             	add    esp,0xc
c0006452:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006456:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000645a:	53                   	push   ebx
c000645b:	e8 8c fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c0006460:	83 c4 0c             	add    esp,0xc
c0006463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000646b:	53                   	push   ebx
c000646c:	e8 7b fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c0006471:	83 c4 0c             	add    esp,0xc
c0006474:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006478:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000647c:	53                   	push   ebx
c000647d:	e8 6a fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c0006482:	83 c4 0c             	add    esp,0xc
c0006485:	57                   	push   edi
c0006486:	56                   	push   esi
c0006487:	53                   	push   ebx
c0006488:	e8 5f fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c000648d:	83 c4 0c             	add    esp,0xc
c0006490:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006494:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006498:	53                   	push   ebx
c0006499:	e8 4e fe ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c000649e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00064a1:	e8 70 fe ff ff       	call   c0006316 <GDT::flush()>
c00064a6:	83 c4 50             	add    esp,0x50
c00064a9:	5b                   	pop    ebx
c00064aa:	5e                   	pop    esi
c00064ab:	5f                   	pop    edi
c00064ac:	c3                   	ret    

c00064ad <idleFunction(void*)>:
c00064ad:	83 ec 0c             	sub    esp,0xc
c00064b0:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00064b5:	48                   	dec    eax
c00064b6:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00064bb:	75 01                	jne    c00064be <idleFunction(void*)+0x11>
c00064bd:	fb                   	sti    
c00064be:	f4                   	hlt    
c00064bf:	e8 7e 63 01 00       	call   c001c842 <idleCommon()>
c00064c4:	eb f8                	jmp    c00064be <idleFunction(void*)+0x11>
c00064c6:	66 90                	xchg   ax,ax

c00064c8 <IDTEntry::IDTEntry(bool)>:
c00064c8:	83 ec 04             	sub    esp,0x4
c00064cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00064cf:	88 04 24             	mov    BYTE PTR [esp],al
c00064d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00064dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00064e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00064eb:	83 e2 f0             	and    edx,0xfffffff0
c00064ee:	83 ca 0e             	or     edx,0xe
c00064f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00064f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00064fb:	83 e2 ef             	and    edx,0xffffffef
c00064fe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006501:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006505:	74 05                	je     c000650c <IDTEntry::IDTEntry(bool)+0x44>
c0006507:	b2 03                	mov    dl,0x3
c0006509:	eb 05                	jmp    c0006510 <IDTEntry::IDTEntry(bool)+0x48>
c000650b:	90                   	nop
c000650c:	b2 00                	mov    dl,0x0
c000650e:	66 90                	xchg   ax,ax
c0006510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006514:	83 e2 03             	and    edx,0x3
c0006517:	88 d1                	mov    cl,dl
c0006519:	c1 e1 05             	shl    ecx,0x5
c000651c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000651f:	83 e2 9f             	and    edx,0xffffff9f
c0006522:	09 ca                	or     edx,ecx
c0006524:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000652e:	83 ca 80             	or     edx,0xffffff80
c0006531:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006534:	90                   	nop
c0006535:	83 c4 04             	add    esp,0x4
c0006538:	c3                   	ret    
c0006539:	90                   	nop

c000653a <IDTEntry::setOffset(unsigned int)>:
c000653a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000653e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006542:	66 89 02             	mov    WORD PTR [edx],ax
c0006545:	c1 e8 10             	shr    eax,0x10
c0006548:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000654c:	c3                   	ret    
c000654d:	90                   	nop
c000654e:	66 90                	xchg   ax,ax

c0006550 <IDT::IDT()>:
c0006550:	90                   	nop
c0006551:	c3                   	ret    

c0006552 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0006552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006556:	83 c0 30             	add    eax,0x30
c0006559:	c3                   	ret    

c000655a <IDT::addEntry(IDTEntry, int)>:
c000655a:	53                   	push   ebx
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006563:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006567:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000656b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000656e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0006572:	5b                   	pop    ebx
c0006573:	c3                   	ret    

c0006574 <IDT::addEntry(int, void (*)(), bool)>:
c0006574:	53                   	push   ebx
c0006575:	83 ec 10             	sub    esp,0x10
c0006578:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000657d:	50                   	push   eax
c000657e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0006582:	53                   	push   ebx
c0006583:	e8 40 ff ff ff       	call   c00064c8 <IDTEntry::IDTEntry(bool)>
c0006588:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000658c:	53                   	push   ebx
c000658d:	e8 a8 ff ff ff       	call   c000653a <IDTEntry::setOffset(unsigned int)>
c0006592:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006596:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000659a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000659e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00065a2:	e8 b3 ff ff ff       	call   c000655a <IDT::addEntry(IDTEntry, int)>
c00065a7:	83 c4 30             	add    esp,0x30
c00065aa:	5b                   	pop    ebx
c00065ab:	c3                   	ret    

c00065ac <IDT::flush()>:
c00065ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b0:	66 c7 05 78 04 02 c0 ff 07 	mov    WORD PTR ds:0xc0020478,0x7ff
c00065b9:	a3 7a 04 02 c0       	mov    ds:0xc002047a,eax
c00065be:	0f 01 1d 78 04 02 c0 	lidtd  ds:0xc0020478
c00065c5:	c3                   	ret    

c00065c6 <IDT::setup()>:
c00065c6:	57                   	push   edi
c00065c7:	56                   	push   esi
c00065c8:	53                   	push   ebx
c00065c9:	83 ec 10             	sub    esp,0x10
c00065cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00065d0:	6a 00                	push   0x0
c00065d2:	68 50 c0 01 c0       	push   0xc001c050
c00065d7:	6a 00                	push   0x0
c00065d9:	53                   	push   ebx
c00065da:	e8 95 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00065df:	6a 00                	push   0x0
c00065e1:	68 60 c0 01 c0       	push   0xc001c060
c00065e6:	6a 01                	push   0x1
c00065e8:	53                   	push   ebx
c00065e9:	e8 86 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00065ee:	83 c4 20             	add    esp,0x20
c00065f1:	6a 00                	push   0x0
c00065f3:	68 6a c0 01 c0       	push   0xc001c06a
c00065f8:	6a 02                	push   0x2
c00065fa:	53                   	push   ebx
c00065fb:	e8 74 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006600:	6a 00                	push   0x0
c0006602:	68 74 c0 01 c0       	push   0xc001c074
c0006607:	6a 03                	push   0x3
c0006609:	53                   	push   ebx
c000660a:	e8 65 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000660f:	83 c4 20             	add    esp,0x20
c0006612:	6a 00                	push   0x0
c0006614:	68 7e c0 01 c0       	push   0xc001c07e
c0006619:	6a 04                	push   0x4
c000661b:	53                   	push   ebx
c000661c:	e8 53 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006621:	6a 00                	push   0x0
c0006623:	68 88 c0 01 c0       	push   0xc001c088
c0006628:	6a 05                	push   0x5
c000662a:	53                   	push   ebx
c000662b:	e8 44 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006630:	83 c4 20             	add    esp,0x20
c0006633:	6a 00                	push   0x0
c0006635:	68 92 c0 01 c0       	push   0xc001c092
c000663a:	6a 06                	push   0x6
c000663c:	53                   	push   ebx
c000663d:	e8 32 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006642:	6a 00                	push   0x0
c0006644:	68 9c c0 01 c0       	push   0xc001c09c
c0006649:	6a 07                	push   0x7
c000664b:	53                   	push   ebx
c000664c:	e8 23 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006651:	83 c4 20             	add    esp,0x20
c0006654:	6a 00                	push   0x0
c0006656:	68 a6 c0 01 c0       	push   0xc001c0a6
c000665b:	6a 08                	push   0x8
c000665d:	53                   	push   ebx
c000665e:	e8 11 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006663:	6a 00                	push   0x0
c0006665:	68 ae c0 01 c0       	push   0xc001c0ae
c000666a:	6a 09                	push   0x9
c000666c:	53                   	push   ebx
c000666d:	e8 02 ff ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006672:	83 c4 20             	add    esp,0x20
c0006675:	6a 00                	push   0x0
c0006677:	68 b8 c0 01 c0       	push   0xc001c0b8
c000667c:	6a 0a                	push   0xa
c000667e:	53                   	push   ebx
c000667f:	e8 f0 fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006684:	6a 00                	push   0x0
c0006686:	68 c0 c0 01 c0       	push   0xc001c0c0
c000668b:	6a 0b                	push   0xb
c000668d:	53                   	push   ebx
c000668e:	e8 e1 fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006693:	83 c4 20             	add    esp,0x20
c0006696:	6a 00                	push   0x0
c0006698:	68 c8 c0 01 c0       	push   0xc001c0c8
c000669d:	6a 0c                	push   0xc
c000669f:	53                   	push   ebx
c00066a0:	e8 cf fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066a5:	6a 00                	push   0x0
c00066a7:	68 d0 c0 01 c0       	push   0xc001c0d0
c00066ac:	6a 0d                	push   0xd
c00066ae:	53                   	push   ebx
c00066af:	e8 c0 fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066b4:	83 c4 20             	add    esp,0x20
c00066b7:	6a 00                	push   0x0
c00066b9:	68 d8 c0 01 c0       	push   0xc001c0d8
c00066be:	6a 0e                	push   0xe
c00066c0:	53                   	push   ebx
c00066c1:	e8 ae fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066c6:	6a 00                	push   0x0
c00066c8:	68 e0 c0 01 c0       	push   0xc001c0e0
c00066cd:	6a 0f                	push   0xf
c00066cf:	53                   	push   ebx
c00066d0:	e8 9f fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066d5:	83 c4 20             	add    esp,0x20
c00066d8:	6a 00                	push   0x0
c00066da:	68 ea c0 01 c0       	push   0xc001c0ea
c00066df:	6a 10                	push   0x10
c00066e1:	53                   	push   ebx
c00066e2:	e8 8d fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066e7:	6a 00                	push   0x0
c00066e9:	68 f4 c0 01 c0       	push   0xc001c0f4
c00066ee:	6a 11                	push   0x11
c00066f0:	53                   	push   ebx
c00066f1:	e8 7e fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00066f6:	83 c4 20             	add    esp,0x20
c00066f9:	6a 00                	push   0x0
c00066fb:	68 fe c0 01 c0       	push   0xc001c0fe
c0006700:	6a 12                	push   0x12
c0006702:	53                   	push   ebx
c0006703:	e8 6c fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006708:	6a 01                	push   0x1
c000670a:	68 98 c1 01 c0       	push   0xc001c198
c000670f:	6a 60                	push   0x60
c0006711:	53                   	push   ebx
c0006712:	e8 5d fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006717:	83 c4 20             	add    esp,0x20
c000671a:	6a 00                	push   0x0
c000671c:	68 9f c1 01 c0       	push   0xc001c19f
c0006721:	6a 20                	push   0x20
c0006723:	53                   	push   ebx
c0006724:	e8 4b fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006729:	6a 00                	push   0x0
c000672b:	68 8a c1 01 c0       	push   0xc001c18a
c0006730:	6a 21                	push   0x21
c0006732:	53                   	push   ebx
c0006733:	e8 3c fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006738:	83 c4 20             	add    esp,0x20
c000673b:	6a 00                	push   0x0
c000673d:	68 91 c1 01 c0       	push   0xc001c191
c0006742:	6a 22                	push   0x22
c0006744:	53                   	push   ebx
c0006745:	e8 2a fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000674a:	6a 00                	push   0x0
c000674c:	68 08 c1 01 c0       	push   0xc001c108
c0006751:	6a 23                	push   0x23
c0006753:	53                   	push   ebx
c0006754:	e8 1b fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006759:	83 c4 20             	add    esp,0x20
c000675c:	6a 00                	push   0x0
c000675e:	68 12 c1 01 c0       	push   0xc001c112
c0006763:	6a 24                	push   0x24
c0006765:	53                   	push   ebx
c0006766:	e8 09 fe ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000676b:	6a 00                	push   0x0
c000676d:	68 1c c1 01 c0       	push   0xc001c11c
c0006772:	6a 25                	push   0x25
c0006774:	53                   	push   ebx
c0006775:	e8 fa fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000677a:	83 c4 20             	add    esp,0x20
c000677d:	6a 00                	push   0x0
c000677f:	68 26 c1 01 c0       	push   0xc001c126
c0006784:	6a 26                	push   0x26
c0006786:	53                   	push   ebx
c0006787:	e8 e8 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000678c:	6a 00                	push   0x0
c000678e:	68 30 c1 01 c0       	push   0xc001c130
c0006793:	6a 27                	push   0x27
c0006795:	53                   	push   ebx
c0006796:	e8 d9 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000679b:	83 c4 20             	add    esp,0x20
c000679e:	6a 00                	push   0x0
c00067a0:	68 3a c1 01 c0       	push   0xc001c13a
c00067a5:	6a 28                	push   0x28
c00067a7:	53                   	push   ebx
c00067a8:	e8 c7 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067ad:	6a 00                	push   0x0
c00067af:	68 44 c1 01 c0       	push   0xc001c144
c00067b4:	6a 29                	push   0x29
c00067b6:	53                   	push   ebx
c00067b7:	e8 b8 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067bc:	83 c4 20             	add    esp,0x20
c00067bf:	6a 00                	push   0x0
c00067c1:	68 4e c1 01 c0       	push   0xc001c14e
c00067c6:	6a 2a                	push   0x2a
c00067c8:	53                   	push   ebx
c00067c9:	e8 a6 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067ce:	6a 00                	push   0x0
c00067d0:	68 58 c1 01 c0       	push   0xc001c158
c00067d5:	6a 2b                	push   0x2b
c00067d7:	53                   	push   ebx
c00067d8:	e8 97 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067dd:	83 c4 20             	add    esp,0x20
c00067e0:	6a 00                	push   0x0
c00067e2:	68 62 c1 01 c0       	push   0xc001c162
c00067e7:	6a 2c                	push   0x2c
c00067e9:	53                   	push   ebx
c00067ea:	e8 85 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067ef:	6a 00                	push   0x0
c00067f1:	68 6c c1 01 c0       	push   0xc001c16c
c00067f6:	6a 2d                	push   0x2d
c00067f8:	53                   	push   ebx
c00067f9:	e8 76 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00067fe:	83 c4 20             	add    esp,0x20
c0006801:	6a 00                	push   0x0
c0006803:	68 76 c1 01 c0       	push   0xc001c176
c0006808:	6a 2e                	push   0x2e
c000680a:	53                   	push   ebx
c000680b:	e8 64 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006810:	6a 00                	push   0x0
c0006812:	68 80 c1 01 c0       	push   0xc001c180
c0006817:	6a 2f                	push   0x2f
c0006819:	53                   	push   ebx
c000681a:	e8 55 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c000681f:	83 c4 20             	add    esp,0x20
c0006822:	6a 00                	push   0x0
c0006824:	68 d6 c1 01 c0       	push   0xc001c1d6
c0006829:	6a 30                	push   0x30
c000682b:	53                   	push   ebx
c000682c:	e8 43 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006831:	6a 00                	push   0x0
c0006833:	68 e0 c1 01 c0       	push   0xc001c1e0
c0006838:	6a 31                	push   0x31
c000683a:	53                   	push   ebx
c000683b:	e8 34 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006840:	83 c4 20             	add    esp,0x20
c0006843:	6a 00                	push   0x0
c0006845:	68 ea c1 01 c0       	push   0xc001c1ea
c000684a:	6a 32                	push   0x32
c000684c:	53                   	push   ebx
c000684d:	e8 22 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006852:	6a 00                	push   0x0
c0006854:	68 f4 c1 01 c0       	push   0xc001c1f4
c0006859:	6a 33                	push   0x33
c000685b:	53                   	push   ebx
c000685c:	e8 13 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006861:	83 c4 20             	add    esp,0x20
c0006864:	6a 00                	push   0x0
c0006866:	68 fe c1 01 c0       	push   0xc001c1fe
c000686b:	6a 34                	push   0x34
c000686d:	53                   	push   ebx
c000686e:	e8 01 fd ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006873:	6a 00                	push   0x0
c0006875:	68 08 c2 01 c0       	push   0xc001c208
c000687a:	6a 35                	push   0x35
c000687c:	53                   	push   ebx
c000687d:	e8 f2 fc ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006882:	83 c4 20             	add    esp,0x20
c0006885:	6a 00                	push   0x0
c0006887:	68 12 c2 01 c0       	push   0xc001c212
c000688c:	6a 36                	push   0x36
c000688e:	53                   	push   ebx
c000688f:	e8 e0 fc ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c0006894:	6a 00                	push   0x0
c0006896:	68 1c c2 01 c0       	push   0xc001c21c
c000689b:	6a 37                	push   0x37
c000689d:	53                   	push   ebx
c000689e:	e8 d1 fc ff ff       	call   c0006574 <IDT::addEntry(int, void (*)(), bool)>
c00068a3:	83 c4 1c             	add    esp,0x1c
c00068a6:	6a 03                	push   0x3
c00068a8:	6a 02                	push   0x2
c00068aa:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c00068b0:	e8 1f 24 00 00       	call   c0008cd4 <VAS::allocatePages(int, int)>
c00068b5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00068bc:	89 c6                	mov    esi,eax
c00068be:	e8 92 01 00 00       	call   c0006a55 <malloc>
c00068c3:	81 c6 00 20 00 00    	add    esi,0x2000
c00068c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00068cc:	89 c7                	mov    edi,eax
c00068ce:	e8 ed 15 00 00       	call   c0007ec0 <TSS::TSS()>
c00068d3:	83 c4 0c             	add    esp,0xc
c00068d6:	68 a6 c0 01 c0       	push   0xc001c0a6
c00068db:	56                   	push   esi
c00068dc:	57                   	push   edi
c00068dd:	e8 22 16 00 00       	call   c0007f04 <TSS::setup(unsigned long, unsigned long)>
c00068e2:	89 c6                	mov    esi,eax
c00068e4:	58                   	pop    eax
c00068e5:	5a                   	pop    edx
c00068e6:	6a 00                	push   0x0
c00068e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068ec:	50                   	push   eax
c00068ed:	e8 d6 fb ff ff       	call   c00064c8 <IDTEntry::IDTEntry(bool)>
c00068f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00068f6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00068fb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006902:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006908:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000690c:	80 ce 05             	or     dh,0x5
c000690f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006912:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006916:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000691a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000691d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006920:	e8 87 fc ff ff       	call   c00065ac <IDT::flush()>
c0006925:	83 c4 20             	add    esp,0x20
c0006928:	5b                   	pop    ebx
c0006929:	5e                   	pop    esi
c000692a:	5f                   	pop    edi
c000692b:	c3                   	ret    

c000692c <sbrk>:
c000692c:	55                   	push   ebp
c000692d:	57                   	push   edi
c000692e:	56                   	push   esi
c000692f:	53                   	push   ebx
c0006930:	83 ec 1c             	sub    esp,0x1c
c0006933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006937:	85 c0                	test   eax,eax
c0006939:	74 5f                	je     c000699a <sbrk+0x6e>
c000693b:	78 64                	js     c00069a1 <sbrk+0x75>
c000693d:	8b 15 2c fc 01 c0    	mov    edx,DWORD PTR ds:0xc001fc2c
c0006943:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006947:	05 ff 0f 00 00       	add    eax,0xfff
c000694c:	89 c5                	mov    ebp,eax
c000694e:	78 69                	js     c00069b9 <sbrk+0x8d>
c0006950:	c1 fd 0c             	sar    ebp,0xc
c0006953:	bb 00 00 00 00       	mov    ebx,0x0
c0006958:	8b 35 54 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020554
c000695e:	8b 3d 2c fc 01 c0    	mov    edi,DWORD PTR ds:0xc001fc2c
c0006964:	e8 b3 04 00 00       	call   c0006e1c <Phys::allocatePage()>
c0006969:	68 01 04 00 00       	push   0x401
c000696e:	57                   	push   edi
c000696f:	50                   	push   eax
c0006970:	56                   	push   esi
c0006971:	e8 5a 22 00 00       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006976:	81 05 2c fc 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001fc2c,0x1000
c0006980:	43                   	inc    ebx
c0006981:	83 c4 10             	add    esp,0x10
c0006984:	39 dd                	cmp    ebp,ebx
c0006986:	75 d0                	jne    c0006958 <sbrk+0x2c>
c0006988:	0f 20 d8             	mov    eax,cr3
c000698b:	0f 22 d8             	mov    cr3,eax
c000698e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006992:	83 c4 1c             	add    esp,0x1c
c0006995:	5b                   	pop    ebx
c0006996:	5e                   	pop    esi
c0006997:	5f                   	pop    edi
c0006998:	5d                   	pop    ebp
c0006999:	c3                   	ret    
c000699a:	a1 2c fc 01 c0       	mov    eax,ds:0xc001fc2c
c000699f:	eb f1                	jmp    c0006992 <sbrk+0x66>
c00069a1:	83 ec 08             	sub    esp,0x8
c00069a4:	50                   	push   eax
c00069a5:	68 14 db 01 c0       	push   0xc001db14
c00069aa:	e8 30 2e 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00069af:	83 c4 10             	add    esp,0x10
c00069b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00069b7:	eb d9                	jmp    c0006992 <sbrk+0x66>
c00069b9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00069bf:	eb 8f                	jmp    c0006950 <sbrk+0x24>

c00069c1 <mmap>:
c00069c1:	83 ec 18             	sub    esp,0x18
c00069c4:	68 44 db 01 c0       	push   0xc001db44
c00069c9:	e8 e7 8a 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00069ce:	b8 00 00 00 00       	mov    eax,0x0
c00069d3:	83 c4 1c             	add    esp,0x1c
c00069d6:	c3                   	ret    

c00069d7 <munmap>:
c00069d7:	83 ec 18             	sub    esp,0x18
c00069da:	68 49 db 01 c0       	push   0xc001db49
c00069df:	e8 d1 8a 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00069e4:	b8 00 00 00 00       	mov    eax,0x0
c00069e9:	83 c4 1c             	add    esp,0x1c
c00069ec:	c3                   	ret    

c00069ed <liballoc_lock()>:
c00069ed:	fa                   	cli    
c00069ee:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00069f4:	b8 00 00 00 00       	mov    eax,0x0
c00069f9:	c3                   	ret    

c00069fa <liballoc_unlock()>:
c00069fa:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00069ff:	48                   	dec    eax
c0006a00:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0006a05:	75 01                	jne    c0006a08 <liballoc_unlock()+0xe>
c0006a07:	fb                   	sti    
c0006a08:	b8 00 00 00 00       	mov    eax,0x0
c0006a0d:	c3                   	ret    

c0006a0e <liballoc_alloc(int)>:
c0006a0e:	83 ec 10             	sub    esp,0x10
c0006a11:	6a 01                	push   0x1
c0006a13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006a17:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c0006a1d:	e8 b2 22 00 00       	call   c0008cd4 <VAS::allocatePages(int, int)>
c0006a22:	83 c4 1c             	add    esp,0x1c
c0006a25:	c3                   	ret    

c0006a26 <liballoc_free(void*, int)>:
c0006a26:	83 ec 14             	sub    esp,0x14
c0006a29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006a2d:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c0006a33:	e8 5c 1f 00 00       	call   c0008994 <VAS::freeAllocatedPages(unsigned long)>
c0006a38:	b8 00 00 00 00       	mov    eax,0x0
c0006a3d:	83 c4 1c             	add    esp,0x1c
c0006a40:	c3                   	ret    

c0006a41 <realloc>:
c0006a41:	83 ec 14             	sub    esp,0x14
c0006a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a4c:	e8 33 a9 ff ff       	call   c0001384 <dlrealloc>
c0006a51:	83 c4 1c             	add    esp,0x1c
c0006a54:	c3                   	ret    

c0006a55 <malloc>:
c0006a55:	83 ec 18             	sub    esp,0x18
c0006a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a5c:	e8 e6 a3 ff ff       	call   c0000e47 <dlmalloc>
c0006a61:	83 c4 1c             	add    esp,0x1c
c0006a64:	c3                   	ret    

c0006a65 <free>:
c0006a65:	83 ec 18             	sub    esp,0x18
c0006a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a6c:	e8 7b a0 ff ff       	call   c0000aec <dlfree>
c0006a71:	83 c4 1c             	add    esp,0x1c
c0006a74:	c3                   	ret    

c0006a75 <rfree>:
c0006a75:	83 ec 18             	sub    esp,0x18
c0006a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a7c:	e8 6b a0 ff ff       	call   c0000aec <dlfree>
c0006a81:	83 c4 1c             	add    esp,0x1c
c0006a84:	c3                   	ret    

c0006a85 <calloc>:
c0006a85:	56                   	push   esi
c0006a86:	53                   	push   ebx
c0006a87:	83 ec 10             	sub    esp,0x10
c0006a8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a8e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006a93:	53                   	push   ebx
c0006a94:	e8 bc ff ff ff       	call   c0006a55 <malloc>
c0006a99:	89 c6                	mov    esi,eax
c0006a9b:	83 c4 0c             	add    esp,0xc
c0006a9e:	53                   	push   ebx
c0006a9f:	6a 00                	push   0x0
c0006aa1:	50                   	push   eax
c0006aa2:	e8 01 9a ff ff       	call   c00004a8 <memset>
c0006aa7:	89 f0                	mov    eax,esi
c0006aa9:	83 c4 14             	add    esp,0x14
c0006aac:	5b                   	pop    ebx
c0006aad:	5e                   	pop    esi
c0006aae:	c3                   	ret    

c0006aaf <Krnl::setBootMessage(char const*)>:
c0006aaf:	57                   	push   edi
c0006ab0:	56                   	push   esi
c0006ab1:	53                   	push   ebx
c0006ab2:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006ab8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006abf:	68 9e 00 00 00       	push   0x9e
c0006ac4:	6a 00                	push   0x0
c0006ac6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006aca:	56                   	push   esi
c0006acb:	e8 d8 99 ff ff       	call   c00004a8 <memset>
c0006ad0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006ad3:	e8 ec 99 ff ff       	call   c00004c4 <strlen>
c0006ad8:	ba 50 00 00 00       	mov    edx,0x50
c0006add:	83 c4 10             	add    esp,0x10
c0006ae0:	29 c2                	sub    edx,eax
c0006ae2:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006ae6:	d1 ea                	shr    edx,1
c0006ae8:	84 c0                	test   al,al
c0006aea:	74 19                	je     c0006b05 <Krnl::setBootMessage(char const*)+0x56>
c0006aec:	01 d2                	add    edx,edx
c0006aee:	43                   	inc    ebx
c0006aef:	01 f2                	add    edx,esi
c0006af1:	80 cc 0f             	or     ah,0xf
c0006af4:	83 c2 02             	add    edx,0x2
c0006af7:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006afb:	43                   	inc    ebx
c0006afc:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006b01:	84 c0                	test   al,al
c0006b03:	75 ec                	jne    c0006af1 <Krnl::setBootMessage(char const*)+0x42>
c0006b05:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006b0a:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006b0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b11:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006b17:	5b                   	pop    ebx
c0006b18:	5e                   	pop    esi
c0006b19:	5f                   	pop    edi
c0006b1a:	c3                   	ret    

c0006b1b <kernel_main>:
c0006b1b:	55                   	push   ebp
c0006b1c:	57                   	push   edi
c0006b1d:	bf f9 03 00 00       	mov    edi,0x3f9
c0006b22:	56                   	push   esi
c0006b23:	89 fa                	mov    edx,edi
c0006b25:	53                   	push   ebx
c0006b26:	31 f6                	xor    esi,esi
c0006b28:	83 ec 38             	sub    esp,0x38
c0006b2b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006b30:	a3 80 04 02 c0       	mov    ds:0xc0020480,eax
c0006b35:	89 f0                	mov    eax,esi
c0006b37:	ee                   	out    dx,al
c0006b38:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006b3d:	b0 80                	mov    al,0x80
c0006b3f:	89 da                	mov    edx,ebx
c0006b41:	ee                   	out    dx,al
c0006b42:	b1 03                	mov    cl,0x3
c0006b44:	ba f8 03 00 00       	mov    edx,0x3f8
c0006b49:	88 c8                	mov    al,cl
c0006b4b:	ee                   	out    dx,al
c0006b4c:	89 f0                	mov    eax,esi
c0006b4e:	89 fa                	mov    edx,edi
c0006b50:	ee                   	out    dx,al
c0006b51:	88 c8                	mov    al,cl
c0006b53:	89 da                	mov    edx,ebx
c0006b55:	ee                   	out    dx,al
c0006b56:	b0 c7                	mov    al,0xc7
c0006b58:	ba fa 03 00 00       	mov    edx,0x3fa
c0006b5d:	ee                   	out    dx,al
c0006b5e:	b0 0b                	mov    al,0xb
c0006b60:	ba fc 03 00 00       	mov    edx,0x3fc
c0006b65:	ee                   	out    dx,al
c0006b66:	68 50 db 01 c0       	push   0xc001db50
c0006b6b:	e8 6f 2c 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0006b70:	0f be 05 40 fc 01 c0 	movsx  eax,BYTE PTR ds:0xc001fc40
c0006b77:	83 c4 10             	add    esp,0x10
c0006b7a:	84 c0                	test   al,al
c0006b7c:	74 5c                	je     c0006bda <kernel_main+0xbf>
c0006b7e:	31 db                	xor    ebx,ebx
c0006b80:	bd 0a 00 00 00       	mov    ebp,0xa
c0006b85:	bf 05 00 00 00       	mov    edi,0x5
c0006b8a:	31 f6                	xor    esi,esi
c0006b8c:	eb 14                	jmp    c0006ba2 <kernel_main+0x87>
c0006b8e:	47                   	inc    edi
c0006b8f:	bd 0a 00 00 00       	mov    ebp,0xa
c0006b94:	31 f6                	xor    esi,esi
c0006b96:	43                   	inc    ebx
c0006b97:	0f be 83 40 fc 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe03c0]
c0006b9e:	84 c0                	test   al,al
c0006ba0:	74 38                	je     c0006bda <kernel_main+0xbf>
c0006ba2:	80 be 76 fc 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe038a],0xdb
c0006ba9:	0f 84 97 00 00 00    	je     c0006c46 <kernel_main+0x12b>
c0006baf:	3c 0d                	cmp    al,0xd
c0006bb1:	74 e3                	je     c0006b96 <kernel_main+0x7b>
c0006bb3:	3c 0a                	cmp    al,0xa
c0006bb5:	74 d7                	je     c0006b8e <kernel_main+0x73>
c0006bb7:	83 ec 0c             	sub    esp,0xc
c0006bba:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006bbe:	57                   	push   edi
c0006bbf:	43                   	inc    ebx
c0006bc0:	52                   	push   edx
c0006bc1:	46                   	inc    esi
c0006bc2:	6a 00                	push   0x0
c0006bc4:	6a 0e                	push   0xe
c0006bc6:	50                   	push   eax
c0006bc7:	e8 14 f7 00 00       	call   c00162e0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0006bcc:	83 c4 20             	add    esp,0x20
c0006bcf:	0f be 83 40 fc 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe03c0]
c0006bd6:	84 c0                	test   al,al
c0006bd8:	75 c8                	jne    c0006ba2 <kernel_main+0x87>
c0006bda:	83 ec 0c             	sub    esp,0xc
c0006bdd:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006be2:	05 ff 0f 00 00       	add    eax,0xfff
c0006be7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006bec:	50                   	push   eax
c0006bed:	e8 7b 03 00 00       	call   c0006f6d <Phys::physicalMemorySetup(unsigned int)>
c0006bf2:	e8 45 1b 00 00       	call   c000873c <Virt::virtualMemorySetup()>
c0006bf7:	58                   	pop    eax
c0006bf8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006bfc:	53                   	push   ebx
c0006bfd:	e8 fa 26 00 00       	call   c00092fc <VAS::VAS()>
c0006c02:	89 1d 54 05 02 c0    	mov    DWORD PTR ds:0xc0020554,ebx
c0006c08:	e8 13 94 ff ff       	call   c0000020 <callGlobalConstructors>
c0006c0d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006c14:	e8 3c fe ff ff       	call   c0006a55 <malloc>
c0006c19:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c1c:	89 c6                	mov    esi,eax
c0006c1e:	e8 99 f0 ff ff       	call   c0005cbc <Computer::Computer()>
c0006c23:	6a 00                	push   0x0
c0006c25:	89 35 68 04 02 c0    	mov    DWORD PTR ds:0xc0020468,esi
c0006c2b:	6a 00                	push   0x0
c0006c2d:	6a 00                	push   0x0
c0006c2f:	56                   	push   esi
c0006c30:	e8 d7 f4 ff ff       	call   c000610c <Computer::open(int, int, void*)>
c0006c35:	83 c4 14             	add    esp,0x14
c0006c38:	53                   	push   ebx
c0006c39:	e8 2e 1e 00 00       	call   c0008a6c <VAS::~VAS()>
c0006c3e:	83 c4 3c             	add    esp,0x3c
c0006c41:	5b                   	pop    ebx
c0006c42:	5e                   	pop    esi
c0006c43:	5f                   	pop    edi
c0006c44:	5d                   	pop    ebp
c0006c45:	c3                   	ret    
c0006c46:	0f b6 96 75 fc 01 c0 	movzx  edx,BYTE PTR [esi-0x3ffe038b]
c0006c4d:	83 e2 fe             	and    edx,0xfffffffe
c0006c50:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006c56:	0f 85 53 ff ff ff    	jne    c0006baf <kernel_main+0x94>
c0006c5c:	45                   	inc    ebp
c0006c5d:	e9 4d ff ff ff       	jmp    c0006baf <kernel_main+0x94>

c0006c62 <Phys::allocateDMA(unsigned long)>:
c0006c62:	55                   	push   ebp
c0006c63:	31 ed                	xor    ebp,ebp
c0006c65:	57                   	push   edi
c0006c66:	56                   	push   esi
c0006c67:	53                   	push   ebx
c0006c68:	31 db                	xor    ebx,ebx
c0006c6a:	83 ec 1c             	sub    esp,0x1c
c0006c6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006c71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006c79:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006c7f:	31 c0                	xor    eax,eax
c0006c81:	c1 ef 0c             	shr    edi,0xc
c0006c84:	eb 19                	jmp    c0006c9f <Phys::allocateDMA(unsigned long)+0x3d>
c0006c86:	85 c0                	test   eax,eax
c0006c88:	75 06                	jne    c0006c90 <Phys::allocateDMA(unsigned long)+0x2e>
c0006c8a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006c8e:	89 dd                	mov    ebp,ebx
c0006c90:	8d 70 01             	lea    esi,[eax+0x1]
c0006c93:	39 f7                	cmp    edi,esi
c0006c95:	74 33                	je     c0006cca <Phys::allocateDMA(unsigned long)+0x68>
c0006c97:	89 f0                	mov    eax,esi
c0006c99:	43                   	inc    ebx
c0006c9a:	83 fb 0f             	cmp    ebx,0xf
c0006c9d:	7f 11                	jg     c0006cb0 <Phys::allocateDMA(unsigned long)+0x4e>
c0006c9f:	80 bb 9c 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfb64],0x0
c0006ca6:	74 de                	je     c0006c86 <Phys::allocateDMA(unsigned long)+0x24>
c0006ca8:	31 c0                	xor    eax,eax
c0006caa:	43                   	inc    ebx
c0006cab:	83 fb 0f             	cmp    ebx,0xf
c0006cae:	7e ef                	jle    c0006c9f <Phys::allocateDMA(unsigned long)+0x3d>
c0006cb0:	83 ec 0c             	sub    esp,0xc
c0006cb3:	68 68 db 01 c0       	push   0xc001db68
c0006cb8:	e8 f8 87 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006cbd:	83 c4 10             	add    esp,0x10
c0006cc0:	31 c0                	xor    eax,eax
c0006cc2:	83 c4 1c             	add    esp,0x1c
c0006cc5:	5b                   	pop    ebx
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	5d                   	pop    ebp
c0006cc9:	c3                   	ret    
c0006cca:	89 e9                	mov    ecx,ebp
c0006ccc:	c1 f9 04             	sar    ecx,0x4
c0006ccf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006cd3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006cd7:	89 ca                	mov    edx,ecx
c0006cd9:	4a                   	dec    edx
c0006cda:	79 03                	jns    c0006cdf <Phys::allocateDMA(unsigned long)+0x7d>
c0006cdc:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006cdf:	c1 fa 04             	sar    edx,0x4
c0006ce2:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006ce6:	74 08                	je     c0006cf0 <Phys::allocateDMA(unsigned long)+0x8e>
c0006ce8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006cec:	31 c0                	xor    eax,eax
c0006cee:	eb ba                	jmp    c0006caa <Phys::allocateDMA(unsigned long)+0x48>
c0006cf0:	85 f6                	test   esi,esi
c0006cf2:	74 15                	je     c0006d09 <Phys::allocateDMA(unsigned long)+0xa7>
c0006cf4:	8d 95 9c 04 02 c0    	lea    edx,[ebp-0x3ffdfb64]
c0006cfa:	8d 84 05 9d 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfb63]
c0006d01:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006d04:	42                   	inc    edx
c0006d05:	39 d0                	cmp    eax,edx
c0006d07:	75 f8                	jne    c0006d01 <Phys::allocateDMA(unsigned long)+0x9f>
c0006d09:	01 3d 94 04 02 c0    	add    DWORD PTR ds:0xc0020494,edi
c0006d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d13:	85 c0                	test   eax,eax
c0006d15:	74 17                	je     c0006d2e <Phys::allocateDMA(unsigned long)+0xcc>
c0006d17:	83 ec 0c             	sub    esp,0xc
c0006d1a:	68 68 db 01 c0       	push   0xc001db68
c0006d1f:	e8 91 87 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006d24:	83 c4 10             	add    esp,0x10
c0006d27:	89 f0                	mov    eax,esi
c0006d29:	e9 6b ff ff ff       	jmp    c0006c99 <Phys::allocateDMA(unsigned long)+0x37>
c0006d2e:	c1 e5 0c             	shl    ebp,0xc
c0006d31:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006d37:	eb 89                	jmp    c0006cc2 <Phys::allocateDMA(unsigned long)+0x60>

c0006d39 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006d39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d3d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006d47:	c1 ea 0c             	shr    edx,0xc
c0006d4a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006d4f:	29 15 94 04 02 c0    	sub    DWORD PTR ds:0xc0020494,edx
c0006d55:	c1 e8 0c             	shr    eax,0xc
c0006d58:	85 d2                	test   edx,edx
c0006d5a:	74 0f                	je     c0006d6b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006d5c:	05 9c 04 02 c0       	add    eax,0xc002049c
c0006d61:	01 c2                	add    edx,eax
c0006d63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006d66:	40                   	inc    eax
c0006d67:	39 d0                	cmp    eax,edx
c0006d69:	75 f8                	jne    c0006d63 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006d6b:	c3                   	ret    

c0006d6c <Phys::setPageState(unsigned long, bool)>:
c0006d6c:	56                   	push   esi
c0006d6d:	ba 01 00 00 00       	mov    edx,0x1
c0006d72:	53                   	push   ebx
c0006d73:	8b 35 84 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fd84
c0006d79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006d7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006d81:	89 c8                	mov    eax,ecx
c0006d83:	83 e1 07             	and    ecx,0x7
c0006d86:	c1 e8 03             	shr    eax,0x3
c0006d89:	d3 e3                	shl    ebx,cl
c0006d8b:	01 c6                	add    esi,eax
c0006d8d:	d3 e2                	shl    edx,cl
c0006d8f:	f7 d2                	not    edx
c0006d91:	20 16                	and    BYTE PTR [esi],dl
c0006d93:	03 05 84 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fd84
c0006d99:	08 18                	or     BYTE PTR [eax],bl
c0006d9b:	5b                   	pop    ebx
c0006d9c:	5e                   	pop    esi
c0006d9d:	c3                   	ret    

c0006d9e <Phys::getPageState(unsigned long)>:
c0006d9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006da2:	8b 15 84 fd 01 c0    	mov    edx,DWORD PTR ds:0xc001fd84
c0006da8:	89 c8                	mov    eax,ecx
c0006daa:	83 e1 07             	and    ecx,0x7
c0006dad:	c1 e8 03             	shr    eax,0x3
c0006db0:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0006db4:	d3 f8                	sar    eax,cl
c0006db6:	83 e0 01             	and    eax,0x1
c0006db9:	c3                   	ret    

c0006dba <Phys::freePage(unsigned long)>:
c0006dba:	53                   	push   ebx
c0006dbb:	83 ec 08             	sub    esp,0x8
c0006dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc2:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006dc8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006dce:	76 3a                	jbe    c0006e0a <Phys::freePage(unsigned long)+0x50>
c0006dd0:	c1 e8 0c             	shr    eax,0xc
c0006dd3:	50                   	push   eax
c0006dd4:	89 c3                	mov    ebx,eax
c0006dd6:	e8 c3 ff ff ff       	call   c0006d9e <Phys::getPageState(unsigned long)>
c0006ddb:	5a                   	pop    edx
c0006ddc:	84 c0                	test   al,al
c0006dde:	74 19                	je     c0006df9 <Phys::freePage(unsigned long)+0x3f>
c0006de0:	83 ec 08             	sub    esp,0x8
c0006de3:	ff 0d 94 04 02 c0    	dec    DWORD PTR ds:0xc0020494
c0006de9:	6a 00                	push   0x0
c0006deb:	53                   	push   ebx
c0006dec:	e8 7b ff ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0006df1:	83 c4 10             	add    esp,0x10
c0006df4:	83 c4 08             	add    esp,0x8
c0006df7:	5b                   	pop    ebx
c0006df8:	c3                   	ret    
c0006df9:	c7 44 24 10 0d dc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dc0d
c0006e01:	83 c4 08             	add    esp,0x8
c0006e04:	5b                   	pop    ebx
c0006e05:	e9 ab 86 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c0006e0a:	68 00 10 00 00       	push   0x1000
c0006e0f:	50                   	push   eax
c0006e10:	e8 24 ff ff ff       	call   c0006d39 <Phys::freeDMA(unsigned long, unsigned long)>
c0006e15:	59                   	pop    ecx
c0006e16:	5b                   	pop    ebx
c0006e17:	83 c4 08             	add    esp,0x8
c0006e1a:	5b                   	pop    ebx
c0006e1b:	c3                   	ret    

c0006e1c <Phys::allocatePage()>:
c0006e1c:	56                   	push   esi
c0006e1d:	53                   	push   ebx
c0006e1e:	83 ec 14             	sub    esp,0x14
c0006e21:	8b 35 88 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020488
c0006e27:	89 f3                	mov    ebx,esi
c0006e29:	eb 0a                	jmp    c0006e35 <Phys::allocatePage()+0x19>
c0006e2b:	89 1d 88 04 02 c0    	mov    DWORD PTR ds:0xc0020488,ebx
c0006e31:	39 de                	cmp    esi,ebx
c0006e33:	74 24                	je     c0006e59 <Phys::allocatePage()+0x3d>
c0006e35:	53                   	push   ebx
c0006e36:	e8 63 ff ff ff       	call   c0006d9e <Phys::getPageState(unsigned long)>
c0006e3b:	5a                   	pop    edx
c0006e3c:	84 c0                	test   al,al
c0006e3e:	74 5e                	je     c0006e9e <Phys::allocatePage()+0x82>
c0006e40:	43                   	inc    ebx
c0006e41:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006e47:	75 e2                	jne    c0006e2b <Phys::allocatePage()+0xf>
c0006e49:	31 db                	xor    ebx,ebx
c0006e4b:	c7 05 88 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020488,0x0
c0006e55:	39 de                	cmp    esi,ebx
c0006e57:	75 dc                	jne    c0006e35 <Phys::allocatePage()+0x19>
c0006e59:	83 ec 0c             	sub    esp,0xc
c0006e5c:	80 35 ac 04 02 c0 01 	xor    BYTE PTR ds:0xc00204ac,0x1
c0006e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006e68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006e6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0006e71:	e8 a0 26 00 00       	call   c0009516 <VAS::scanForEviction()>
c0006e76:	83 c4 10             	add    esp,0x10
c0006e79:	85 c0                	test   eax,eax
c0006e7b:	75 3f                	jne    c0006ebc <Phys::allocatePage()+0xa0>
c0006e7d:	83 ec 0c             	sub    esp,0xc
c0006e80:	68 90 db 01 c0       	push   0xc001db90
c0006e85:	e8 2b 86 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0006e8a:	83 c4 10             	add    esp,0x10
c0006e8d:	8b 1d 88 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020488
c0006e93:	53                   	push   ebx
c0006e94:	e8 05 ff ff ff       	call   c0006d9e <Phys::getPageState(unsigned long)>
c0006e99:	5a                   	pop    edx
c0006e9a:	84 c0                	test   al,al
c0006e9c:	75 a2                	jne    c0006e40 <Phys::allocatePage()+0x24>
c0006e9e:	6a 01                	push   0x1
c0006ea0:	53                   	push   ebx
c0006ea1:	e8 c6 fe ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0006ea6:	a1 88 04 02 c0       	mov    eax,ds:0xc0020488
c0006eab:	5a                   	pop    edx
c0006eac:	ff 05 94 04 02 c0    	inc    DWORD PTR ds:0xc0020494
c0006eb2:	c1 e0 0c             	shl    eax,0xc
c0006eb5:	59                   	pop    ecx
c0006eb6:	83 c4 14             	add    esp,0x14
c0006eb9:	5b                   	pop    ebx
c0006eba:	5e                   	pop    esi
c0006ebb:	c3                   	ret    
c0006ebc:	83 ec 08             	sub    esp,0x8
c0006ebf:	89 c2                	mov    edx,eax
c0006ec1:	6a 01                	push   0x1
c0006ec3:	c1 ea 0c             	shr    edx,0xc
c0006ec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006eca:	52                   	push   edx
c0006ecb:	e8 9c fe ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0006ed0:	83 c4 10             	add    esp,0x10
c0006ed3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ed7:	eb dd                	jmp    c0006eb6 <Phys::allocatePage()+0x9a>

c0006ed9 <Phys::allocateContiguousPages(int)>:
c0006ed9:	57                   	push   edi
c0006eda:	56                   	push   esi
c0006edb:	53                   	push   ebx
c0006edc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006ee0:	fa                   	cli    
c0006ee1:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0006ee7:	31 db                	xor    ebx,ebx
c0006ee9:	85 db                	test   ebx,ebx
c0006eeb:	75 11                	jne    c0006efe <Phys::allocateContiguousPages(int)+0x25>
c0006eed:	e8 2a ff ff ff       	call   c0006e1c <Phys::allocatePage()>
c0006ef2:	83 fe 01             	cmp    esi,0x1
c0006ef5:	89 c7                	mov    edi,eax
c0006ef7:	74 21                	je     c0006f1a <Phys::allocateContiguousPages(int)+0x41>
c0006ef9:	bb 01 00 00 00       	mov    ebx,0x1
c0006efe:	e8 19 ff ff ff       	call   c0006e1c <Phys::allocatePage()>
c0006f03:	89 da                	mov    edx,ebx
c0006f05:	c1 e2 0c             	shl    edx,0xc
c0006f08:	01 fa                	add    edx,edi
c0006f0a:	39 c2                	cmp    edx,eax
c0006f0c:	74 20                	je     c0006f2e <Phys::allocateContiguousPages(int)+0x55>
c0006f0e:	bb 01 00 00 00       	mov    ebx,0x1
c0006f13:	89 c7                	mov    edi,eax
c0006f15:	83 fe 01             	cmp    esi,0x1
c0006f18:	75 e4                	jne    c0006efe <Phys::allocateContiguousPages(int)+0x25>
c0006f1a:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0006f1f:	48                   	dec    eax
c0006f20:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0006f25:	75 01                	jne    c0006f28 <Phys::allocateContiguousPages(int)+0x4f>
c0006f27:	fb                   	sti    
c0006f28:	89 f8                	mov    eax,edi
c0006f2a:	5b                   	pop    ebx
c0006f2b:	5e                   	pop    esi
c0006f2c:	5f                   	pop    edi
c0006f2d:	c3                   	ret    
c0006f2e:	43                   	inc    ebx
c0006f2f:	39 f3                	cmp    ebx,esi
c0006f31:	75 b6                	jne    c0006ee9 <Phys::allocateContiguousPages(int)+0x10>
c0006f33:	eb e5                	jmp    c0006f1a <Phys::allocateContiguousPages(int)+0x41>

c0006f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0006f35:	56                   	push   esi
c0006f36:	53                   	push   ebx
c0006f37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f3b:	39 1d 8c 04 02 c0    	cmp    DWORD PTR ds:0xc002048c,ebx
c0006f41:	73 06                	jae    c0006f49 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0006f43:	89 1d 8c 04 02 c0    	mov    DWORD PTR ds:0xc002048c,ebx
c0006f49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f4d:	c1 eb 0c             	shr    ebx,0xc
c0006f50:	c1 e8 0c             	shr    eax,0xc
c0006f53:	39 d8                	cmp    eax,ebx
c0006f55:	73 13                	jae    c0006f6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0006f57:	6a 00                	push   0x0
c0006f59:	8d 70 01             	lea    esi,[eax+0x1]
c0006f5c:	50                   	push   eax
c0006f5d:	e8 0a fe ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0006f62:	5a                   	pop    edx
c0006f63:	89 f0                	mov    eax,esi
c0006f65:	59                   	pop    ecx
c0006f66:	39 f3                	cmp    ebx,esi
c0006f68:	75 ed                	jne    c0006f57 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0006f6a:	5b                   	pop    ebx
c0006f6b:	5e                   	pop    esi
c0006f6c:	c3                   	ret    

c0006f6d <Phys::physicalMemorySetup(unsigned int)>:
c0006f6d:	55                   	push   ebp
c0006f6e:	57                   	push   edi
c0006f6f:	56                   	push   esi
c0006f70:	53                   	push   ebx
c0006f71:	31 db                	xor    ebx,ebx
c0006f73:	83 ec 40             	sub    esp,0x40
c0006f76:	6a 10                	push   0x10
c0006f78:	6a 00                	push   0x0
c0006f7a:	68 9c 04 02 c0       	push   0xc002049c
c0006f7f:	e8 24 95 ff ff       	call   c00004a8 <memset>
c0006f84:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006f88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006f8d:	05 00 10 00 00       	add    eax,0x1000
c0006f92:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006f96:	5a                   	pop    edx
c0006f97:	59                   	pop    ecx
c0006f98:	50                   	push   eax
c0006f99:	68 23 dc 01 c0       	push   0xc001dc23
c0006f9e:	e8 3c 28 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0006fa3:	83 c4 10             	add    esp,0x10
c0006fa6:	83 ec 08             	sub    esp,0x8
c0006fa9:	6a 01                	push   0x1
c0006fab:	53                   	push   ebx
c0006fac:	43                   	inc    ebx
c0006fad:	e8 ba fd ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0006fb2:	83 c4 10             	add    esp,0x10
c0006fb5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006fbb:	75 e9                	jne    c0006fa6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0006fbd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0006fc4:	66 85 c0             	test   ax,ax
c0006fc7:	0f 84 8e 01 00 00    	je     c000715b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0006fcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006fd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006fdd:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0006fe2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006fe6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006fee:	eb 15                	jmp    c0007005 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0006ff0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006ff4:	83 c3 18             	add    ebx,0x18
c0006ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ffb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006fff:	0f 84 66 01 00 00    	je     c000716b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0007005:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007008:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000700e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007012:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007016:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007018:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000701b:	01 f0                	add    eax,esi
c000701d:	55                   	push   ebp
c000701e:	11 fa                	adc    edx,edi
c0007020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007024:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000702c:	56                   	push   esi
c000702d:	68 c0 db 01 c0       	push   0xc001dbc0
c0007032:	e8 a8 27 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0007037:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	09 f8                	or     eax,edi
c0007040:	0f 85 25 01 00 00    	jne    c000716b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0007046:	4d                   	dec    ebp
c0007047:	75 a7                	jne    c0006ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007049:	ba 00 00 08 00       	mov    edx,0x80000
c000704e:	89 c1                	mov    ecx,eax
c0007050:	39 f2                	cmp    edx,esi
c0007052:	19 f9                	sbb    ecx,edi
c0007054:	0f 82 a7 00 00 00    	jb     c0007101 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000705a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000705e:	89 c1                	mov    ecx,eax
c0007060:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007064:	0f 83 97 00 00 00    	jae    c0007101 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000706a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000706f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007073:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007077:	39 fa                	cmp    edx,edi
c0007079:	19 e8                	sbb    eax,ebp
c000707b:	0f 82 9a 01 00 00    	jb     c000721b <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007081:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007085:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007089:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000708f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007094:	83 d5 ff             	adc    ebp,0xffffffff
c0007097:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000709b:	31 c0                	xor    eax,eax
c000709d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00070a1:	39 fa                	cmp    edx,edi
c00070a3:	89 c1                	mov    ecx,eax
c00070a5:	19 e9                	sbb    ecx,ebp
c00070a7:	0f 83 43 ff ff ff    	jae    c0006ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00070ad:	be 00 00 08 00       	mov    esi,0x80000
c00070b2:	51                   	push   ecx
c00070b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00070b7:	57                   	push   edi
c00070b8:	56                   	push   esi
c00070b9:	68 e4 db 01 c0       	push   0xc001dbe4
c00070be:	e8 1c 27 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00070c3:	5d                   	pop    ebp
c00070c4:	58                   	pop    eax
c00070c5:	57                   	push   edi
c00070c6:	56                   	push   esi
c00070c7:	e8 69 fe ff ff       	call   c0006f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00070cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00070d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00070d4:	83 c4 0c             	add    esp,0xc
c00070d7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00070db:	03 05 98 04 02 c0    	add    eax,DWORD PTR ds:0xc0020498
c00070e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00070e8:	a3 98 04 02 c0       	mov    ds:0xc0020498,eax
c00070ed:	52                   	push   edx
c00070ee:	50                   	push   eax
c00070ef:	68 49 dc 01 c0       	push   0xc001dc49
c00070f4:	e8 e6 26 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00070f9:	83 c4 10             	add    esp,0x10
c00070fc:	e9 ef fe ff ff       	jmp    c0006ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007101:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007105:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007109:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000710d:	39 ea                	cmp    edx,ebp
c000710f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007113:	0f 82 d7 fe ff ff    	jb     c0006ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007119:	ba ff 1f 00 00       	mov    edx,0x1fff
c000711e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007122:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007126:	0f 83 c4 fe ff ff    	jae    c0006ff0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000712c:	39 ee                	cmp    esi,ebp
c000712e:	89 f8                	mov    eax,edi
c0007130:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007134:	0f 83 78 ff ff ff    	jae    c00070b2 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000713a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000713e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007142:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007146:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000714a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000714e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007152:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007156:	e9 57 ff ff ff       	jmp    c00070b2 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000715b:	83 ec 0c             	sub    esp,0xc
c000715e:	68 3b dc 01 c0       	push   0xc001dc3b
c0007163:	e8 4d 83 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	83 ec 08             	sub    esp,0x8
c000716e:	bb 60 00 00 00       	mov    ebx,0x60
c0007173:	6a 00                	push   0x0
c0007175:	6a 06                	push   0x6
c0007177:	e8 f0 fb ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c000717c:	58                   	pop    eax
c000717d:	5a                   	pop    edx
c000717e:	6a 00                	push   0x0
c0007180:	6a 07                	push   0x7
c0007182:	e8 e5 fb ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c0007187:	83 05 98 04 02 c0 02 	add    DWORD PTR ds:0xc0020498,0x2
c000718e:	83 c4 10             	add    esp,0x10
c0007191:	83 ec 08             	sub    esp,0x8
c0007194:	6a 00                	push   0x0
c0007196:	53                   	push   ebx
c0007197:	43                   	inc    ebx
c0007198:	e8 cf fb ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c000719d:	83 c4 10             	add    esp,0x10
c00071a0:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00071a6:	75 e9                	jne    c0007191 <Phys::physicalMemorySetup(unsigned int)+0x224>
c00071a8:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00071ad:	bb 40 01 00 00       	mov    ebx,0x140
c00071b2:	83 c0 20             	add    eax,0x20
c00071b5:	a3 98 04 02 c0       	mov    ds:0xc0020498,eax
c00071ba:	eb 22                	jmp    c00071de <Phys::physicalMemorySetup(unsigned int)+0x271>
c00071bc:	83 ec 08             	sub    esp,0x8
c00071bf:	6a 00                	push   0x0
c00071c1:	53                   	push   ebx
c00071c2:	43                   	inc    ebx
c00071c3:	e8 a4 fb ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c00071c8:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00071cd:	83 c4 10             	add    esp,0x10
c00071d0:	40                   	inc    eax
c00071d1:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00071d7:	a3 98 04 02 c0       	mov    ds:0xc0020498,eax
c00071dc:	74 07                	je     c00071e5 <Phys::physicalMemorySetup(unsigned int)+0x278>
c00071de:	3d ff 03 00 00       	cmp    eax,0x3ff
c00071e3:	7e d7                	jle    c00071bc <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00071e5:	bb d0 01 00 00       	mov    ebx,0x1d0
c00071ea:	3d ff 07 00 00       	cmp    eax,0x7ff
c00071ef:	7f 22                	jg     c0007213 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c00071f1:	83 ec 08             	sub    esp,0x8
c00071f4:	6a 00                	push   0x0
c00071f6:	53                   	push   ebx
c00071f7:	43                   	inc    ebx
c00071f8:	e8 6f fb ff ff       	call   c0006d6c <Phys::setPageState(unsigned long, bool)>
c00071fd:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0007202:	83 c4 10             	add    esp,0x10
c0007205:	40                   	inc    eax
c0007206:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000720c:	a3 98 04 02 c0       	mov    ds:0xc0020498,eax
c0007211:	75 d7                	jne    c00071ea <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0007213:	83 c4 3c             	add    esp,0x3c
c0007216:	5b                   	pop    ebx
c0007217:	5e                   	pop    esi
c0007218:	5f                   	pop    edi
c0007219:	5d                   	pop    ebp
c000721a:	c3                   	ret    
c000721b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007223:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000722b:	e9 51 fe ff ff       	jmp    c0007081 <Phys::physicalMemorySetup(unsigned int)+0x114>

c0007230 <Pipe::isAtty()>:
c0007230:	31 c0                	xor    eax,eax
c0007232:	c3                   	ret    
c0007233:	90                   	nop

c0007234 <Pipe::~Pipe()>:
c0007234:	83 ec 0c             	sub    esp,0xc
c0007237:	ba a8 dc 01 c0       	mov    edx,0xc001dca8
c000723c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007240:	89 10                	mov    DWORD PTR [eax],edx
c0007242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007246:	83 ec 0c             	sub    esp,0xc
c0007249:	50                   	push   eax
c000724a:	e8 cd 10 00 00       	call   c000831c <UnixFile::~UnixFile()>
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	90                   	nop
c0007253:	83 c4 0c             	add    esp,0xc
c0007256:	c3                   	ret    
c0007257:	90                   	nop

c0007258 <Pipe::~Pipe()>:
c0007258:	83 ec 0c             	sub    esp,0xc
c000725b:	83 ec 0c             	sub    esp,0xc
c000725e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007262:	e8 cd ff ff ff       	call   c0007234 <Pipe::~Pipe()>
c0007267:	83 c4 10             	add    esp,0x10
c000726a:	83 ec 08             	sub    esp,0x8
c000726d:	6a 20                	push   0x20
c000726f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007273:	e8 86 24 00 00       	call   c00096fe <operator delete(void*, unsigned long)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	83 c4 0c             	add    esp,0xc
c000727e:	c3                   	ret    
c000727f:	90                   	nop

c0007280 <Pipe::write(unsigned long long, void*, int*)>:
c0007280:	55                   	push   ebp
c0007281:	57                   	push   edi
c0007282:	56                   	push   esi
c0007283:	53                   	push   ebx
c0007284:	83 ec 1c             	sub    esp,0x1c
c0007287:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000728b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000728f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007292:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007296:	89 04 24             	mov    DWORD PTR [esp],eax
c0007299:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000729d:	89 d8                	mov    eax,ebx
c000729f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00072a2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00072a6:	89 d6                	mov    esi,edx
c00072a8:	89 d7                	mov    edi,edx
c00072aa:	c1 ff 1f             	sar    edi,0x1f
c00072ad:	03 34 24             	add    esi,DWORD PTR [esp]
c00072b0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00072b4:	c1 f8 1f             	sar    eax,0x1f
c00072b7:	39 f3                	cmp    ebx,esi
c00072b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072c1:	19 f8                	sbb    eax,edi
c00072c3:	b8 01 00 00 00       	mov    eax,0x1
c00072c8:	72 6e                	jb     c0007338 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00072ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00072cd:	01 d0                	add    eax,edx
c00072cf:	99                   	cdq    
c00072d0:	f7 fb                	idiv   ebx
c00072d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072d6:	29 d3                	sub    ebx,edx
c00072d8:	89 d7                	mov    edi,edx
c00072da:	89 de                	mov    esi,ebx
c00072dc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00072df:	c1 fb 1f             	sar    ebx,0x1f
c00072e2:	39 f2                	cmp    edx,esi
c00072e4:	19 d8                	sbb    eax,ebx
c00072e6:	b8 00 00 00 00       	mov    eax,0x0
c00072eb:	72 04                	jb     c00072f1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00072ed:	89 d0                	mov    eax,edx
c00072ef:	29 f0                	sub    eax,esi
c00072f1:	89 d3                	mov    ebx,edx
c00072f3:	29 c3                	sub    ebx,eax
c00072f5:	74 0b                	je     c0007302 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00072f7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00072fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00072fe:	89 d9                	mov    ecx,ebx
c0007300:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007302:	85 c0                	test   eax,eax
c0007304:	74 0d                	je     c0007313 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007306:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000730a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000730d:	89 de                	mov    esi,ebx
c000730f:	89 c1                	mov    ecx,eax
c0007311:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007313:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007316:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000731b:	75 10                	jne    c000732d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000731d:	83 ec 0c             	sub    esp,0xc
c0007320:	68 65 dc 01 c0       	push   0xc001dc65
c0007325:	e8 8b 81 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000732a:	83 c4 10             	add    esp,0x10
c000732d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007331:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007334:	89 08                	mov    DWORD PTR [eax],ecx
c0007336:	31 c0                	xor    eax,eax
c0007338:	83 c4 1c             	add    esp,0x1c
c000733b:	5b                   	pop    ebx
c000733c:	5e                   	pop    esi
c000733d:	5f                   	pop    edi
c000733e:	5d                   	pop    ebp
c000733f:	c3                   	ret    

c0007340 <Pipe::read(unsigned long long, void*, int*)>:
c0007340:	55                   	push   ebp
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	53                   	push   ebx
c0007344:	83 ec 1c             	sub    esp,0x1c
c0007347:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000734b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000734f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007353:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007356:	89 c8                	mov    eax,ecx
c0007358:	99                   	cdq    
c0007359:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000735d:	74 24                	je     c0007383 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000735f:	39 f9                	cmp    ecx,edi
c0007361:	89 d1                	mov    ecx,edx
c0007363:	19 f1                	sbb    ecx,esi
c0007365:	73 1c                	jae    c0007383 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007367:	fa                   	cli    
c0007368:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c000736e:	e8 c5 b5 00 00       	call   c0012938 <schedule()>
c0007373:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0007378:	48                   	dec    eax
c0007379:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000737e:	75 d3                	jne    c0007353 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007380:	fb                   	sti    
c0007381:	eb d0                	jmp    c0007353 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007383:	39 f8                	cmp    eax,edi
c0007385:	89 d1                	mov    ecx,edx
c0007387:	89 3c 24             	mov    DWORD PTR [esp],edi
c000738a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000738e:	19 f1                	sbb    ecx,esi
c0007390:	73 07                	jae    c0007399 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0007392:	89 04 24             	mov    DWORD PTR [esp],eax
c0007395:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007399:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000739c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000739f:	29 f7                	sub    edi,esi
c00073a1:	89 f8                	mov    eax,edi
c00073a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00073a7:	99                   	cdq    
c00073a8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00073ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073af:	19 d0                	sbb    eax,edx
c00073b1:	73 07                	jae    c00073ba <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00073b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00073ba:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00073bd:	89 ea                	mov    edx,ebp
c00073bf:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00073c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00073c8:	74 0d                	je     c00073d7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00073ca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00073cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00073d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00073d7:	85 d2                	test   edx,edx
c00073d9:	74 11                	je     c00073ec <Pipe::read(unsigned long long, void*, int*)+0xac>
c00073db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073df:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00073e2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00073e6:	89 d1                	mov    ecx,edx
c00073e8:	89 c7                	mov    edi,eax
c00073ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00073ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00073ef:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00073f2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00073f5:	99                   	cdq    
c00073f6:	89 f7                	mov    edi,esi
c00073f8:	03 04 24             	add    eax,DWORD PTR [esp]
c00073fb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00073ff:	c1 ff 1f             	sar    edi,0x1f
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	52                   	push   edx
c0007405:	50                   	push   eax
c0007406:	e8 b5 52 01 00       	call   c001c6c0 <__umoddi3>
c000740b:	83 c4 10             	add    esp,0x10
c000740e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0007411:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007416:	75 10                	jne    c0007428 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007418:	83 ec 0c             	sub    esp,0xc
c000741b:	68 82 dc 01 c0       	push   0xc001dc82
c0007420:	e8 90 80 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000742c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000742f:	89 10                	mov    DWORD PTR [eax],edx
c0007431:	83 c4 1c             	add    esp,0x1c
c0007434:	31 c0                	xor    eax,eax
c0007436:	5b                   	pop    ebx
c0007437:	5e                   	pop    esi
c0007438:	5f                   	pop    edi
c0007439:	5d                   	pop    ebp
c000743a:	c3                   	ret    
c000743b:	90                   	nop

c000743c <Pipe::Pipe(int)>:
c000743c:	83 ec 0c             	sub    esp,0xc
c000743f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007443:	83 ec 08             	sub    esp,0x8
c0007446:	6a 00                	push   0x0
c0007448:	50                   	push   eax
c0007449:	e8 ec 0c 00 00       	call   c000813a <UnixFile::UnixFile(int)>
c000744e:	83 c4 10             	add    esp,0x10
c0007451:	ba a8 dc 01 c0       	mov    edx,0xc001dca8
c0007456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000745a:	89 10                	mov    DWORD PTR [eax],edx
c000745c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007460:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007464:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0007472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007476:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000747d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007481:	83 ec 0c             	sub    esp,0xc
c0007484:	50                   	push   eax
c0007485:	e8 cb f5 ff ff       	call   c0006a55 <malloc>
c000748a:	83 c4 10             	add    esp,0x10
c000748d:	89 c2                	mov    edx,eax
c000748f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007493:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000749e:	90                   	nop
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	c3                   	ret    
c00074a3:	90                   	nop

c00074a4 <VgaText::isAtty()>:
c00074a4:	b0 01                	mov    al,0x1
c00074a6:	c3                   	ret    
c00074a7:	90                   	nop

c00074a8 <VgaText::~VgaText()>:
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	ba 30 dd 01 c0       	mov    edx,0xc001dd30
c00074b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b4:	89 10                	mov    DWORD PTR [eax],edx
c00074b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ba:	83 ec 0c             	sub    esp,0xc
c00074bd:	50                   	push   eax
c00074be:	e8 59 0e 00 00       	call   c000831c <UnixFile::~UnixFile()>
c00074c3:	83 c4 10             	add    esp,0x10
c00074c6:	90                   	nop
c00074c7:	83 c4 0c             	add    esp,0xc
c00074ca:	c3                   	ret    
c00074cb:	90                   	nop

c00074cc <VgaText::~VgaText()>:
c00074cc:	83 ec 0c             	sub    esp,0xc
c00074cf:	83 ec 0c             	sub    esp,0xc
c00074d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074d6:	e8 cd ff ff ff       	call   c00074a8 <VgaText::~VgaText()>
c00074db:	83 c4 10             	add    esp,0x10
c00074de:	83 ec 08             	sub    esp,0x8
c00074e1:	68 34 01 00 00       	push   0x134
c00074e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074ea:	e8 0f 22 00 00       	call   c00096fe <operator delete(void*, unsigned long)>
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	83 c4 0c             	add    esp,0xc
c00074f5:	c3                   	ret    

c00074f6 <VgaText::read(unsigned long long, void*, int*)>:
c00074f6:	83 ec 10             	sub    esp,0x10
c00074f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007505:	e8 eb 44 00 00       	call   c000b9f5 <readKeyboard(VgaText*, char*, unsigned long)>
c000750a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000750e:	89 02                	mov    DWORD PTR [edx],eax
c0007510:	31 c0                	xor    eax,eax
c0007512:	83 c4 1c             	add    esp,0x1c
c0007515:	c3                   	ret    

c0007516 <setTerminalScrollLock(bool)>:
c0007516:	c3                   	ret    

c0007517 <doTerminalCycle()>:
c0007517:	c3                   	ret    

c0007518 <addToTerminalCycle(VgaText*)>:
c0007518:	c3                   	ret    

c0007519 <scrollTerminalScrollLock(int)>:
c0007519:	c3                   	ret    

c000751a <VgaText::updateTitle()>:
c000751a:	c3                   	ret    
c000751b:	90                   	nop

c000751c <VgaText::load()>:
c000751c:	c3                   	ret    
c000751d:	90                   	nop

c000751e <VgaText::updateCursor()>:
c000751e:	83 ec 14             	sub    esp,0x14
c0007521:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007525:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007528:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000752b:	e8 14 ee 00 00       	call   c0016344 <Hal::consoleCursorUpdate(int, int)>
c0007530:	83 c4 1c             	add    esp,0x1c
c0007533:	c3                   	ret    

c0007534 <VgaText::doANSI_SGR(int)>:
c0007534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000753c:	85 d2                	test   edx,edx
c000753e:	75 0b                	jne    c000754b <VgaText::doANSI_SGR(int)+0x17>
c0007540:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0007543:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007546:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007549:	eb 59                	jmp    c00075a4 <VgaText::doANSI_SGR(int)+0x70>
c000754b:	83 fa 07             	cmp    edx,0x7
c000754e:	75 0b                	jne    c000755b <VgaText::doANSI_SGR(int)+0x27>
c0007550:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0007553:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007556:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007559:	eb 49                	jmp    c00075a4 <VgaText::doANSI_SGR(int)+0x70>
c000755b:	83 fa 1b             	cmp    edx,0x1b
c000755e:	74 e0                	je     c0007540 <VgaText::doANSI_SGR(int)+0xc>
c0007560:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0007563:	83 f9 07             	cmp    ecx,0x7
c0007566:	77 09                	ja     c0007571 <VgaText::doANSI_SGR(int)+0x3d>
c0007568:	8b 14 8d c0 fd 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0240]
c000756f:	eb 20                	jmp    c0007591 <VgaText::doANSI_SGR(int)+0x5d>
c0007571:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007574:	83 f9 07             	cmp    ecx,0x7
c0007577:	77 09                	ja     c0007582 <VgaText::doANSI_SGR(int)+0x4e>
c0007579:	8b 14 8d c0 fd 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0240]
c0007580:	eb 22                	jmp    c00075a4 <VgaText::doANSI_SGR(int)+0x70>
c0007582:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0007585:	83 f9 07             	cmp    ecx,0x7
c0007588:	77 0b                	ja     c0007595 <VgaText::doANSI_SGR(int)+0x61>
c000758a:	8b 14 95 78 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0388]
c0007591:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007594:	c3                   	ret    
c0007595:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0007598:	83 f9 07             	cmp    ecx,0x7
c000759b:	77 0a                	ja     c00075a7 <VgaText::doANSI_SGR(int)+0x73>
c000759d:	8b 14 95 50 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03b0]
c00075a4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00075a7:	c3                   	ret    

c00075a8 <VgaText::setDefaultBgColour(VgaColour)>:
c00075a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00075b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00075b3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00075b6:	c3                   	ret    
c00075b7:	90                   	nop

c00075b8 <VgaText::setDefaultFgColour(VgaColour)>:
c00075b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00075c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00075c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00075c6:	c3                   	ret    
c00075c7:	90                   	nop

c00075c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00075c8:	53                   	push   ebx
c00075c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00075cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00075d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00075d5:	51                   	push   ecx
c00075d6:	e8 cd ff ff ff       	call   c00075a8 <VgaText::setDefaultBgColour(VgaColour)>
c00075db:	58                   	pop    eax
c00075dc:	5a                   	pop    edx
c00075dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00075e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00075e5:	5b                   	pop    ebx
c00075e6:	eb d0                	jmp    c00075b8 <VgaText::setDefaultFgColour(VgaColour)>

c00075e8 <VgaText::setTitleTextColour(VgaColour)>:
c00075e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00075f0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00075f3:	c3                   	ret    

c00075f4 <VgaText::setTitleColour(VgaColour)>:
c00075f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00075fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00075ff:	c3                   	ret    

c0007600 <VgaText::setTitle(char*)>:
c0007600:	c3                   	ret    
c0007601:	90                   	nop

c0007602 <VgaText::combineColours(unsigned char, unsigned char)>:
c0007602:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007606:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000760b:	83 e0 0f             	and    eax,0xf
c000760e:	c1 e2 04             	shl    edx,0x4
c0007611:	09 d0                	or     eax,edx
c0007613:	c3                   	ret    

c0007614 <VgaText::scrollScreen()>:
c0007614:	55                   	push   ebp
c0007615:	b9 01 00 00 00       	mov    ecx,0x1
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 0c             	sub    esp,0xc
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000762a:	31 ff                	xor    edi,edi
c000762c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000762f:	83 f9 18             	cmp    ecx,0x18
c0007632:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007635:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000763c:	75 27                	jne    c0007665 <VgaText::scrollScreen()+0x51>
c000763e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007641:	01 f5                	add    ebp,esi
c0007643:	f7 c7 01 00 00 00    	test   edi,0x1
c0007649:	74 16                	je     c0007661 <VgaText::scrollScreen()+0x4d>
c000764b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000764f:	50                   	push   eax
c0007650:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007654:	50                   	push   eax
c0007655:	e8 a8 ff ff ff       	call   c0007602 <VgaText::combineColours(unsigned char, unsigned char)>
c000765a:	5a                   	pop    edx
c000765b:	5a                   	pop    edx
c000765c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000765f:	eb 04                	jmp    c0007665 <VgaText::scrollScreen()+0x51>
c0007661:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007665:	47                   	inc    edi
c0007666:	46                   	inc    esi
c0007667:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000766d:	75 bd                	jne    c000762c <VgaText::scrollScreen()+0x18>
c000766f:	41                   	inc    ecx
c0007670:	83 f9 19             	cmp    ecx,0x19
c0007673:	75 af                	jne    c0007624 <VgaText::scrollScreen()+0x10>
c0007675:	39 1d b4 04 02 c0    	cmp    DWORD PTR ds:0xc00204b4,ebx
c000767b:	75 1f                	jne    c000769c <VgaText::scrollScreen()+0x88>
c000767d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0007681:	74 05                	je     c0007688 <VgaText::scrollScreen()+0x74>
c0007683:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0007686:	eb 14                	jmp    c000769c <VgaText::scrollScreen()+0x88>
c0007688:	50                   	push   eax
c0007689:	50                   	push   eax
c000768a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000768e:	50                   	push   eax
c000768f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007693:	50                   	push   eax
c0007694:	e8 3f eb 00 00       	call   c00161d8 <Hal::consoleScroll(int, int)>
c0007699:	83 c4 10             	add    esp,0x10
c000769c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00076a0:	83 c4 0c             	add    esp,0xc
c00076a3:	5b                   	pop    ebx
c00076a4:	5e                   	pop    esi
c00076a5:	5f                   	pop    edi
c00076a6:	5d                   	pop    ebp
c00076a7:	e9 72 fe ff ff       	jmp    c000751e <VgaText::updateCursor()>

c00076ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00076ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00076b1:	c1 e0 08             	shl    eax,0x8
c00076b4:	89 c2                	mov    edx,eax
c00076b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00076bb:	09 d0                	or     eax,edx
c00076bd:	c3                   	ret    

c00076be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00076be:	55                   	push   ebp
c00076bf:	57                   	push   edi
c00076c0:	56                   	push   esi
c00076c1:	53                   	push   ebx
c00076c2:	83 ec 1c             	sub    esp,0x1c
c00076c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00076c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00076cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00076d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00076d5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00076d9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00076dd:	0f b6 c3             	movzx  eax,bl
c00076e0:	50                   	push   eax
c00076e1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00076e6:	50                   	push   eax
c00076e7:	e8 16 ff ff ff       	call   c0007602 <VgaText::combineColours(unsigned char, unsigned char)>
c00076ec:	5a                   	pop    edx
c00076ed:	0f b6 c0             	movzx  eax,al
c00076f0:	59                   	pop    ecx
c00076f1:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00076f6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00076fa:	50                   	push   eax
c00076fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076ff:	e8 a8 ff ff ff       	call   c00076ac <VgaText::combineCharAndColour(char, unsigned char)>
c0007704:	5a                   	pop    edx
c0007705:	66 6b d7 50          	imul   dx,di,0x50
c0007709:	59                   	pop    ecx
c000770a:	01 f2                	add    edx,esi
c000770c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000770f:	0f b7 d2             	movzx  edx,dx
c0007712:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007716:	39 2d b4 04 02 c0    	cmp    DWORD PTR ds:0xc00204b4,ebp
c000771c:	75 28                	jne    c0007746 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000771e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007722:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007726:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000772a:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000772e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007732:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007736:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000773a:	83 c4 1c             	add    esp,0x1c
c000773d:	5b                   	pop    ebx
c000773e:	5e                   	pop    esi
c000773f:	5f                   	pop    edi
c0007740:	5d                   	pop    ebp
c0007741:	e9 9a eb 00 00       	jmp    c00162e0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007746:	83 c4 1c             	add    esp,0x1c
c0007749:	5b                   	pop    ebx
c000774a:	5e                   	pop    esi
c000774b:	5f                   	pop    edi
c000774c:	5d                   	pop    ebp
c000774d:	c3                   	ret    

c000774e <VgaText::getCursorX()>:
c000774e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007752:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007755:	c3                   	ret    

c0007756 <VgaText::getCursorY()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000775d:	c3                   	ret    

c000775e <VgaText::setCursor(int, int)>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007766:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007769:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000776d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007770:	e9 a9 fd ff ff       	jmp    c000751e <VgaText::updateCursor()>

c0007775 <setActiveTerminal(VgaText*)>:
c0007775:	53                   	push   ebx
c0007776:	83 ec 08             	sub    esp,0x8
c0007779:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000777d:	85 db                	test   ebx,ebx
c000777f:	75 11                	jne    c0007792 <setActiveTerminal(VgaText*)+0x1d>
c0007781:	c7 44 24 10 bc dc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dcbc
c0007789:	83 c4 08             	add    esp,0x8
c000778c:	5b                   	pop    ebx
c000778d:	e9 23 7d 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c0007792:	a1 b4 04 02 c0       	mov    eax,ds:0xc00204b4
c0007797:	85 c0                	test   eax,eax
c0007799:	74 0c                	je     c00077a7 <setActiveTerminal(VgaText*)+0x32>
c000779b:	83 ec 0c             	sub    esp,0xc
c000779e:	50                   	push   eax
c000779f:	e8 7a fd ff ff       	call   c000751e <VgaText::updateCursor()>
c00077a4:	83 c4 10             	add    esp,0x10
c00077a7:	89 1d b4 04 02 c0    	mov    DWORD PTR ds:0xc00204b4,ebx
c00077ad:	50                   	push   eax
c00077ae:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00077b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00077b4:	53                   	push   ebx
c00077b5:	e8 a4 ff ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c00077ba:	83 c4 18             	add    esp,0x18
c00077bd:	5b                   	pop    ebx
c00077be:	c3                   	ret    
c00077bf:	90                   	nop

c00077c0 <VgaText::clearScreen()>:
c00077c0:	57                   	push   edi
c00077c1:	56                   	push   esi
c00077c2:	31 f6                	xor    esi,esi
c00077c4:	53                   	push   ebx
c00077c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00077c9:	52                   	push   edx
c00077ca:	6a 00                	push   0x0
c00077cc:	6a 00                	push   0x0
c00077ce:	53                   	push   ebx
c00077cf:	e8 8a ff ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c00077d4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00077e1:	7e 20                	jle    c0007803 <VgaText::clearScreen()+0x43>
c00077e3:	31 ff                	xor    edi,edi
c00077e5:	50                   	push   eax
c00077e6:	50                   	push   eax
c00077e7:	56                   	push   esi
c00077e8:	57                   	push   edi
c00077e9:	47                   	inc    edi
c00077ea:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00077ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00077f0:	6a 20                	push   0x20
c00077f2:	53                   	push   ebx
c00077f3:	e8 c6 fe ff ff       	call   c00076be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00077f8:	83 c4 20             	add    esp,0x20
c00077fb:	83 ff 50             	cmp    edi,0x50
c00077fe:	75 e5                	jne    c00077e5 <VgaText::clearScreen()+0x25>
c0007800:	46                   	inc    esi
c0007801:	eb db                	jmp    c00077de <VgaText::clearScreen()+0x1e>
c0007803:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000780a:	5b                   	pop    ebx
c000780b:	5e                   	pop    esi
c000780c:	5f                   	pop    edi
c000780d:	c3                   	ret    

c000780e <VgaText::setCursorX(int)>:
c000780e:	83 ec 10             	sub    esp,0x10
c0007811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007815:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000781c:	50                   	push   eax
c000781d:	e8 3c ff ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c0007822:	83 c4 1c             	add    esp,0x1c
c0007825:	c3                   	ret    

c0007826 <VgaText::setCursorY(int)>:
c0007826:	83 ec 10             	sub    esp,0x10
c0007829:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000782d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007831:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007834:	50                   	push   eax
c0007835:	e8 24 ff ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c000783a:	83 c4 1c             	add    esp,0x1c
c000783d:	c3                   	ret    

c000783e <VgaText::incrementCursor(bool)>:
c000783e:	56                   	push   esi
c000783f:	53                   	push   ebx
c0007840:	51                   	push   ecx
c0007841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007845:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000784c:	40                   	inc    eax
c000784d:	83 f8 50             	cmp    eax,0x50
c0007850:	74 05                	je     c0007857 <VgaText::incrementCursor(bool)+0x19>
c0007852:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007855:	eb 24                	jmp    c000787b <VgaText::incrementCursor(bool)+0x3d>
c0007857:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000785a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007861:	8d 50 01             	lea    edx,[eax+0x1]
c0007864:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007867:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000786a:	75 0f                	jne    c000787b <VgaText::incrementCursor(bool)+0x3d>
c000786c:	83 ec 0c             	sub    esp,0xc
c000786f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007872:	53                   	push   ebx
c0007873:	e8 9c fd ff ff       	call   c0007614 <VgaText::scrollScreen()>
c0007878:	83 c4 10             	add    esp,0x10
c000787b:	89 f0                	mov    eax,esi
c000787d:	84 c0                	test   al,al
c000787f:	74 0c                	je     c000788d <VgaText::incrementCursor(bool)+0x4f>
c0007881:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007885:	5a                   	pop    edx
c0007886:	5b                   	pop    ebx
c0007887:	5e                   	pop    esi
c0007888:	e9 91 fc ff ff       	jmp    c000751e <VgaText::updateCursor()>
c000788d:	58                   	pop    eax
c000788e:	5b                   	pop    ebx
c000788f:	5e                   	pop    esi
c0007890:	c3                   	ret    
c0007891:	90                   	nop

c0007892 <VgaText::decrementCursor(bool)>:
c0007892:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007896:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000789a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000789d:	85 c0                	test   eax,eax
c000789f:	74 04                	je     c00078a5 <VgaText::decrementCursor(bool)+0x13>
c00078a1:	48                   	dec    eax
c00078a2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00078a5:	84 c9                	test   cl,cl
c00078a7:	74 09                	je     c00078b2 <VgaText::decrementCursor(bool)+0x20>
c00078a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00078ad:	e9 6c fc ff ff       	jmp    c000751e <VgaText::updateCursor()>
c00078b2:	c3                   	ret    
c00078b3:	90                   	nop

c00078b4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00078b4:	53                   	push   ebx
c00078b5:	83 ec 08             	sub    esp,0x8
c00078b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00078bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00078c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00078c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00078c8:	3c 07                	cmp    al,0x7
c00078ca:	75 21                	jne    c00078ed <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00078cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00078d4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00078dc:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00078e4:	83 c4 08             	add    esp,0x8
c00078e7:	5b                   	pop    ebx
c00078e8:	e9 32 2d 00 00       	jmp    c000a61f <Krnl::beep(int, int, bool)>
c00078ed:	3c 0d                	cmp    al,0xd
c00078ef:	75 09                	jne    c00078fa <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00078f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00078f8:	eb 2c                	jmp    c0007926 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00078fa:	3c 0a                	cmp    al,0xa
c00078fc:	75 31                	jne    c000792f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00078fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007901:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007908:	8d 50 01             	lea    edx,[eax+0x1]
c000790b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000790e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007911:	75 0f                	jne    c0007922 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007913:	83 ec 0c             	sub    esp,0xc
c0007916:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007919:	53                   	push   ebx
c000791a:	e8 f5 fc ff ff       	call   c0007614 <VgaText::scrollScreen()>
c000791f:	83 c4 10             	add    esp,0x10
c0007922:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007926:	83 c4 08             	add    esp,0x8
c0007929:	5b                   	pop    ebx
c000792a:	e9 ef fb ff ff       	jmp    c000751e <VgaText::updateCursor()>
c000792f:	3c 08                	cmp    al,0x8
c0007931:	75 25                	jne    c0007958 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007933:	50                   	push   eax
c0007934:	50                   	push   eax
c0007935:	6a 01                	push   0x1
c0007937:	53                   	push   ebx
c0007938:	e8 55 ff ff ff       	call   c0007892 <VgaText::decrementCursor(bool)>
c000793d:	5a                   	pop    edx
c000793e:	59                   	pop    ecx
c000793f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007942:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007945:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007948:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000794b:	6a 20                	push   0x20
c000794d:	53                   	push   ebx
c000794e:	e8 6b fd ff ff       	call   c00076be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007953:	83 c4 28             	add    esp,0x28
c0007956:	5b                   	pop    ebx
c0007957:	c3                   	ret    
c0007958:	83 ec 08             	sub    esp,0x8
c000795b:	0f be c0             	movsx  eax,al
c000795e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007961:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007964:	51                   	push   ecx
c0007965:	52                   	push   edx
c0007966:	50                   	push   eax
c0007967:	53                   	push   ebx
c0007968:	e8 51 fd ff ff       	call   c00076be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000796d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007971:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007979:	83 c4 28             	add    esp,0x28
c000797c:	5b                   	pop    ebx
c000797d:	e9 bc fe ff ff       	jmp    c000783e <VgaText::incrementCursor(bool)>

c0007982 <VgaText::putchar(char)>:
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 14             	sub    esp,0x14
c0007987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000798b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000798f:	3c 5b                	cmp    al,0x5b
c0007991:	75 18                	jne    c00079ab <VgaText::putchar(char)+0x29>
c0007993:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007997:	74 1f                	je     c00079b8 <VgaText::putchar(char)+0x36>
c0007999:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000799f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00079a6:	e9 bd 00 00 00       	jmp    c0007a68 <VgaText::putchar(char)+0xe6>
c00079ab:	3c 1b                	cmp    al,0x1b
c00079ad:	75 09                	jne    c00079b8 <VgaText::putchar(char)+0x36>
c00079af:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00079b3:	e9 b0 00 00 00       	jmp    c0007a68 <VgaText::putchar(char)+0xe6>
c00079b8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00079bb:	84 c9                	test   cl,cl
c00079bd:	0f 84 92 00 00 00    	je     c0007a55 <VgaText::putchar(char)+0xd3>
c00079c3:	8d 50 c0             	lea    edx,[eax-0x40]
c00079c6:	80 fa 3e             	cmp    dl,0x3e
c00079c9:	77 76                	ja     c0007a41 <VgaText::putchar(char)+0xbf>
c00079cb:	3c 6d                	cmp    al,0x6d
c00079cd:	75 47                	jne    c0007a16 <VgaText::putchar(char)+0x94>
c00079cf:	31 f6                	xor    esi,esi
c00079d1:	31 d2                	xor    edx,edx
c00079d3:	31 c0                	xor    eax,eax
c00079d5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00079d8:	7e 2d                	jle    c0007a07 <VgaText::putchar(char)+0x85>
c00079da:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00079df:	80 fa 3b             	cmp    dl,0x3b
c00079e2:	75 17                	jne    c00079fb <VgaText::putchar(char)+0x79>
c00079e4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00079e8:	50                   	push   eax
c00079e9:	53                   	push   ebx
c00079ea:	e8 45 fb ff ff       	call   c0007534 <VgaText::doANSI_SGR(int)>
c00079ef:	59                   	pop    ecx
c00079f0:	31 d2                	xor    edx,edx
c00079f2:	58                   	pop    eax
c00079f3:	31 c0                	xor    eax,eax
c00079f5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00079f9:	eb 09                	jmp    c0007a04 <VgaText::putchar(char)+0x82>
c00079fb:	6b c0 0a             	imul   eax,eax,0xa
c00079fe:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007a02:	88 ca                	mov    dl,cl
c0007a04:	46                   	inc    esi
c0007a05:	eb ce                	jmp    c00079d5 <VgaText::putchar(char)+0x53>
c0007a07:	84 d2                	test   dl,dl
c0007a09:	74 2e                	je     c0007a39 <VgaText::putchar(char)+0xb7>
c0007a0b:	50                   	push   eax
c0007a0c:	53                   	push   ebx
c0007a0d:	e8 22 fb ff ff       	call   c0007534 <VgaText::doANSI_SGR(int)>
c0007a12:	58                   	pop    eax
c0007a13:	5a                   	pop    edx
c0007a14:	eb 23                	jmp    c0007a39 <VgaText::putchar(char)+0xb7>
c0007a16:	3c 4a                	cmp    al,0x4a
c0007a18:	75 1f                	jne    c0007a39 <VgaText::putchar(char)+0xb7>
c0007a1a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007a1e:	75 19                	jne    c0007a39 <VgaText::putchar(char)+0xb7>
c0007a20:	83 ec 0c             	sub    esp,0xc
c0007a23:	53                   	push   ebx
c0007a24:	e8 97 fd ff ff       	call   c00077c0 <VgaText::clearScreen()>
c0007a29:	83 c4 0c             	add    esp,0xc
c0007a2c:	6a 00                	push   0x0
c0007a2e:	6a 00                	push   0x0
c0007a30:	53                   	push   ebx
c0007a31:	e8 28 fd ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c0007a36:	83 c4 10             	add    esp,0x10
c0007a39:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007a3f:	eb 27                	jmp    c0007a68 <VgaText::putchar(char)+0xe6>
c0007a41:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007a44:	83 fa 0e             	cmp    edx,0xe
c0007a47:	7f 1f                	jg     c0007a68 <VgaText::putchar(char)+0xe6>
c0007a49:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007a4c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007a4f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007a53:	eb 13                	jmp    c0007a68 <VgaText::putchar(char)+0xe6>
c0007a55:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a58:	0f be c0             	movsx  eax,al
c0007a5b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a5e:	50                   	push   eax
c0007a5f:	53                   	push   ebx
c0007a60:	e8 4f fe ff ff       	call   c00078b4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007a65:	83 c4 10             	add    esp,0x10
c0007a68:	83 c4 14             	add    esp,0x14
c0007a6b:	5b                   	pop    ebx
c0007a6c:	5e                   	pop    esi
c0007a6d:	c3                   	ret    

c0007a6e <VgaText::putx(unsigned int)>:
c0007a6e:	57                   	push   edi
c0007a6f:	b9 11 00 00 00       	mov    ecx,0x11
c0007a74:	56                   	push   esi
c0007a75:	be ca dc 01 c0       	mov    esi,0xc001dcca
c0007a7a:	53                   	push   ebx
c0007a7b:	83 ec 20             	sub    esp,0x20
c0007a7e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007a82:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007a86:	fc                   	cld    
c0007a87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a89:	be 08 00 00 00       	mov    esi,0x8
c0007a8e:	50                   	push   eax
c0007a8f:	50                   	push   eax
c0007a90:	89 d8                	mov    eax,ebx
c0007a92:	c1 e3 04             	shl    ebx,0x4
c0007a95:	c1 e8 1c             	shr    eax,0x1c
c0007a98:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007a9d:	50                   	push   eax
c0007a9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa2:	e8 db fe ff ff       	call   c0007982 <VgaText::putchar(char)>
c0007aa7:	83 c4 10             	add    esp,0x10
c0007aaa:	4e                   	dec    esi
c0007aab:	75 e1                	jne    c0007a8e <VgaText::putx(unsigned int)+0x20>
c0007aad:	83 c4 20             	add    esp,0x20
c0007ab0:	5b                   	pop    ebx
c0007ab1:	5e                   	pop    esi
c0007ab2:	5f                   	pop    edi
c0007ab3:	c3                   	ret    

c0007ab4 <VgaText::puts(char const*)>:
c0007ab4:	53                   	push   ebx
c0007ab5:	83 ec 08             	sub    esp,0x8
c0007ab8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007abc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007abf:	84 c0                	test   al,al
c0007ac1:	74 12                	je     c0007ad5 <VgaText::puts(char const*)+0x21>
c0007ac3:	43                   	inc    ebx
c0007ac4:	51                   	push   ecx
c0007ac5:	51                   	push   ecx
c0007ac6:	50                   	push   eax
c0007ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acb:	e8 b2 fe ff ff       	call   c0007982 <VgaText::putchar(char)>
c0007ad0:	83 c4 10             	add    esp,0x10
c0007ad3:	eb e7                	jmp    c0007abc <VgaText::puts(char const*)+0x8>
c0007ad5:	83 c4 08             	add    esp,0x8
c0007ad8:	5b                   	pop    ebx
c0007ad9:	c3                   	ret    

c0007ada <VgaText::write(unsigned long long, void*, int*)>:
c0007ada:	55                   	push   ebp
c0007adb:	57                   	push   edi
c0007adc:	56                   	push   esi
c0007add:	53                   	push   ebx
c0007ade:	83 ec 0c             	sub    esp,0xc
c0007ae1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007ae5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007ae9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007aed:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007af4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007af7:	39 eb                	cmp    ebx,ebp
c0007af9:	74 13                	je     c0007b0e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007afb:	43                   	inc    ebx
c0007afc:	50                   	push   eax
c0007afd:	50                   	push   eax
c0007afe:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007b02:	50                   	push   eax
c0007b03:	56                   	push   esi
c0007b04:	e8 79 fe ff ff       	call   c0007982 <VgaText::putchar(char)>
c0007b09:	83 c4 10             	add    esp,0x10
c0007b0c:	eb e9                	jmp    c0007af7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007b0e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007b19:	89 38                	mov    DWORD PTR [eax],edi
c0007b1b:	83 c4 0c             	add    esp,0xc
c0007b1e:	31 c0                	xor    eax,eax
c0007b20:	5b                   	pop    ebx
c0007b21:	5e                   	pop    esi
c0007b22:	5f                   	pop    edi
c0007b23:	5d                   	pop    ebp
c0007b24:	c3                   	ret    
c0007b25:	90                   	nop

c0007b26 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007b26:	55                   	push   ebp
c0007b27:	57                   	push   edi
c0007b28:	56                   	push   esi
c0007b29:	53                   	push   ebx
c0007b2a:	83 ec 0c             	sub    esp,0xc
c0007b2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007b36:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007b3d:	50                   	push   eax
c0007b3e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007b43:	50                   	push   eax
c0007b44:	e8 b9 fa ff ff       	call   c0007602 <VgaText::combineColours(unsigned char, unsigned char)>
c0007b49:	5a                   	pop    edx
c0007b4a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007b4f:	59                   	pop    ecx
c0007b50:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007b53:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007b57:	0f b7 f6             	movzx  esi,si
c0007b5a:	0f b6 e8             	movzx  ebp,al
c0007b5d:	01 f6                	add    esi,esi
c0007b5f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007b62:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007b65:	84 c0                	test   al,al
c0007b67:	0f 84 ef 00 00 00    	je     c0007c5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c0007b6d:	3c 0d                	cmp    al,0xd
c0007b6f:	75 0c                	jne    c0007b7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0007b71:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b78:	e9 d9 00 00 00       	jmp    c0007c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007b7d:	3c 0a                	cmp    al,0xa
c0007b7f:	75 45                	jne    c0007bc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0007b81:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007b84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0007b8e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007b91:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007b94:	75 0f                	jne    c0007ba5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c0007b96:	83 ec 0c             	sub    esp,0xc
c0007b99:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007b9c:	53                   	push   ebx
c0007b9d:	e8 72 fa ff ff       	call   c0007614 <VgaText::scrollScreen()>
c0007ba2:	83 c4 10             	add    esp,0x10
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 70 f9 ff ff       	call   c000751e <VgaText::updateCursor()>
c0007bae:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007bb3:	83 c4 10             	add    esp,0x10
c0007bb6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007bb9:	0f b7 f6             	movzx  esi,si
c0007bbc:	01 f6                	add    esi,esi
c0007bbe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007bc1:	e9 90 00 00 00       	jmp    c0007c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007bc6:	3c 08                	cmp    al,0x8
c0007bc8:	75 35                	jne    c0007bff <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0007bca:	51                   	push   ecx
c0007bcb:	51                   	push   ecx
c0007bcc:	6a 01                	push   0x1
c0007bce:	53                   	push   ebx
c0007bcf:	e8 be fc ff ff       	call   c0007892 <VgaText::decrementCursor(bool)>
c0007bd4:	5e                   	pop    esi
c0007bd5:	58                   	pop    eax
c0007bd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007bd9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007bdc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007bdf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007be2:	6a 20                	push   0x20
c0007be4:	53                   	push   ebx
c0007be5:	e8 d4 fa ff ff       	call   c00076be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007bea:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007bef:	83 c4 20             	add    esp,0x20
c0007bf2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007bf5:	0f b7 f6             	movzx  esi,si
c0007bf8:	01 f6                	add    esi,esi
c0007bfa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007bfd:	eb 57                	jmp    c0007c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007bff:	52                   	push   edx
c0007c00:	52                   	push   edx
c0007c01:	55                   	push   ebp
c0007c02:	50                   	push   eax
c0007c03:	e8 a4 fa ff ff       	call   c00076ac <VgaText::combineCharAndColour(char, unsigned char)>
c0007c08:	83 c4 10             	add    esp,0x10
c0007c0b:	66 89 06             	mov    WORD PTR [esi],ax
c0007c0e:	39 1d b4 04 02 c0    	cmp    DWORD PTR ds:0xc00204b4,ebx
c0007c14:	75 1d                	jne    c0007c33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0007c16:	83 ec 0c             	sub    esp,0xc
c0007c19:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007c1c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007c1f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007c23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007c27:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007c2a:	50                   	push   eax
c0007c2b:	e8 b0 e6 00 00       	call   c00162e0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007c30:	83 c4 20             	add    esp,0x20
c0007c33:	83 c6 02             	add    esi,0x2
c0007c36:	50                   	push   eax
c0007c37:	50                   	push   eax
c0007c38:	6a 00                	push   0x0
c0007c3a:	53                   	push   ebx
c0007c3b:	e8 fe fb ff ff       	call   c000783e <VgaText::incrementCursor(bool)>
c0007c40:	83 c4 10             	add    esp,0x10
c0007c43:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007c47:	75 0d                	jne    c0007c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007c49:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c4e:	0f b7 f6             	movzx  esi,si
c0007c51:	01 f6                	add    esi,esi
c0007c53:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c56:	47                   	inc    edi
c0007c57:	e9 06 ff ff ff       	jmp    c0007b62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c0007c5c:	83 ec 0c             	sub    esp,0xc
c0007c5f:	53                   	push   ebx
c0007c60:	e8 b9 f8 ff ff       	call   c000751e <VgaText::updateCursor()>
c0007c65:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007c6c:	83 c4 1c             	add    esp,0x1c
c0007c6f:	5b                   	pop    ebx
c0007c70:	5e                   	pop    esi
c0007c71:	5f                   	pop    edi
c0007c72:	5d                   	pop    ebp
c0007c73:	c3                   	ret    

c0007c74 <VgaText::VgaText(char const*)>:
c0007c74:	56                   	push   esi
c0007c75:	53                   	push   ebx
c0007c76:	83 ec 04             	sub    esp,0x4
c0007c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c7d:	83 ec 08             	sub    esp,0x8
c0007c80:	6a 00                	push   0x0
c0007c82:	50                   	push   eax
c0007c83:	e8 b2 04 00 00       	call   c000813a <UnixFile::UnixFile(int)>
c0007c88:	83 c4 10             	add    esp,0x10
c0007c8b:	ba 30 dd 01 c0       	mov    edx,0xc001dd30
c0007c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c94:	89 10                	mov    DWORD PTR [eax],edx
c0007c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c9a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ca5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cb0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cb8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cd6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cec:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007cf3:	83 ec 0c             	sub    esp,0xc
c0007cf6:	6a 01                	push   0x1
c0007cf8:	e8 80 08 00 00       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c0007cfd:	83 c4 10             	add    esp,0x10
c0007d00:	89 c2                	mov    edx,eax
c0007d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007d09:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c0007d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d16:	89 c6                	mov    esi,eax
c0007d18:	e8 ff f0 ff ff       	call   c0006e1c <Phys::allocatePage()>
c0007d1d:	68 05 0c 00 00       	push   0xc05
c0007d22:	56                   	push   esi
c0007d23:	50                   	push   eax
c0007d24:	53                   	push   ebx
c0007d25:	e8 a6 0e 00 00       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d2a:	83 c4 10             	add    esp,0x10
c0007d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d34:	83 ec 04             	sub    esp,0x4
c0007d37:	68 a0 0f 00 00       	push   0xfa0
c0007d3c:	6a 00                	push   0x0
c0007d3e:	50                   	push   eax
c0007d3f:	e8 64 87 ff ff       	call   c00004a8 <memset>
c0007d44:	83 c4 10             	add    esp,0x10
c0007d47:	83 ec 04             	sub    esp,0x4
c0007d4a:	6a 00                	push   0x0
c0007d4c:	6a 07                	push   0x7
c0007d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d52:	e8 71 f8 ff ff       	call   c00075c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007d57:	83 c4 10             	add    esp,0x10
c0007d5a:	83 ec 04             	sub    esp,0x4
c0007d5d:	6a 00                	push   0x0
c0007d5f:	6a 00                	push   0x0
c0007d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d65:	e8 f4 f9 ff ff       	call   c000775e <VgaText::setCursor(int, int)>
c0007d6a:	83 c4 10             	add    esp,0x10
c0007d6d:	83 ec 0c             	sub    esp,0xc
c0007d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d74:	e8 47 fa ff ff       	call   c00077c0 <VgaText::clearScreen()>
c0007d79:	83 c4 10             	add    esp,0x10
c0007d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d80:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d88:	05 82 00 00 00       	add    eax,0x82
c0007d8d:	83 ec 04             	sub    esp,0x4
c0007d90:	6a 30                	push   0x30
c0007d92:	6a 00                	push   0x0
c0007d94:	50                   	push   eax
c0007d95:	e8 0e 87 ff ff       	call   c00004a8 <memset>
c0007d9a:	83 c4 10             	add    esp,0x10
c0007d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da1:	05 b2 00 00 00       	add    eax,0xb2
c0007da6:	83 ec 04             	sub    esp,0x4
c0007da9:	68 80 00 00 00       	push   0x80
c0007dae:	6a 00                	push   0x0
c0007db0:	50                   	push   eax
c0007db1:	e8 f2 86 ff ff       	call   c00004a8 <memset>
c0007db6:	83 c4 10             	add    esp,0x10
c0007db9:	90                   	nop
c0007dba:	83 c4 04             	add    esp,0x4
c0007dbd:	5b                   	pop    ebx
c0007dbe:	5e                   	pop    esi
c0007dbf:	c3                   	ret    

c0007dc0 <VgaText::receiveKey(unsigned char)>:
c0007dc0:	57                   	push   edi
c0007dc1:	56                   	push   esi
c0007dc2:	53                   	push   ebx
c0007dc3:	83 ec 10             	sub    esp,0x10
c0007dc6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007dca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007dce:	84 db                	test   bl,bl
c0007dd0:	0f 84 ba 00 00 00    	je     c0007e90 <VgaText::receiveKey(unsigned char)+0xd0>
c0007dd6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007ddc:	80 fb 08             	cmp    bl,0x8
c0007ddf:	75 2c                	jne    c0007e0d <VgaText::receiveKey(unsigned char)+0x4d>
c0007de1:	83 ec 0c             	sub    esp,0xc
c0007de4:	57                   	push   edi
c0007de5:	e8 da 86 ff ff       	call   c00004c4 <strlen>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	85 c0                	test   eax,eax
c0007def:	74 41                	je     c0007e32 <VgaText::receiveKey(unsigned char)+0x72>
c0007df1:	50                   	push   eax
c0007df2:	50                   	push   eax
c0007df3:	6a 08                	push   0x8
c0007df5:	56                   	push   esi
c0007df6:	e8 87 fb ff ff       	call   c0007982 <VgaText::putchar(char)>
c0007dfb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007dfe:	e8 c1 86 ff ff       	call   c00004c4 <strlen>
c0007e03:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007e0b:	eb 22                	jmp    c0007e2f <VgaText::receiveKey(unsigned char)+0x6f>
c0007e0d:	0f be c3             	movsx  eax,bl
c0007e10:	52                   	push   edx
c0007e11:	52                   	push   edx
c0007e12:	50                   	push   eax
c0007e13:	56                   	push   esi
c0007e14:	e8 69 fb ff ff       	call   c0007982 <VgaText::putchar(char)>
c0007e19:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007e1d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007e22:	59                   	pop    ecx
c0007e23:	58                   	pop    eax
c0007e24:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007e28:	50                   	push   eax
c0007e29:	57                   	push   edi
c0007e2a:	e8 75 88 ff ff       	call   c00006a4 <strcat>
c0007e2f:	83 c4 10             	add    esp,0x10
c0007e32:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007e39:	75 05                	jne    c0007e40 <VgaText::receiveKey(unsigned char)+0x80>
c0007e3b:	80 fb 0a             	cmp    bl,0xa
c0007e3e:	75 50                	jne    c0007e90 <VgaText::receiveKey(unsigned char)+0xd0>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007e49:	56                   	push   esi
c0007e4a:	e8 75 86 ff ff       	call   c00004c4 <strlen>
c0007e4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007e52:	89 c3                	mov    ebx,eax
c0007e54:	e8 6b 86 ff ff       	call   c00004c4 <strlen>
c0007e59:	83 c4 10             	add    esp,0x10
c0007e5c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007e60:	3d 80 00 00 00       	cmp    eax,0x80
c0007e65:	76 10                	jbe    c0007e77 <VgaText::receiveKey(unsigned char)+0xb7>
c0007e67:	83 ec 0c             	sub    esp,0xc
c0007e6a:	68 db dc 01 c0       	push   0xc001dcdb
c0007e6f:	e8 41 76 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0007e74:	83 c4 10             	add    esp,0x10
c0007e77:	50                   	push   eax
c0007e78:	50                   	push   eax
c0007e79:	57                   	push   edi
c0007e7a:	56                   	push   esi
c0007e7b:	e8 24 88 ff ff       	call   c00006a4 <strcat>
c0007e80:	83 c4 0c             	add    esp,0xc
c0007e83:	6a 30                	push   0x30
c0007e85:	6a 00                	push   0x0
c0007e87:	57                   	push   edi
c0007e88:	e8 1b 86 ff ff       	call   c00004a8 <memset>
c0007e8d:	83 c4 10             	add    esp,0x10
c0007e90:	83 c4 10             	add    esp,0x10
c0007e93:	5b                   	pop    ebx
c0007e94:	5e                   	pop    esi
c0007e95:	5f                   	pop    edi
c0007e96:	c3                   	ret    
c0007e97:	90                   	nop

c0007e98 <VgaText::doUpdate()>:
c0007e98:	c3                   	ret    

c0007e99 <newTerminal(char*)>:
c0007e99:	83 ec 28             	sub    esp,0x28
c0007e9c:	68 34 01 00 00       	push   0x134
c0007ea1:	e8 af eb ff ff       	call   c0006a55 <malloc>
c0007ea6:	5a                   	pop    edx
c0007ea7:	59                   	pop    ecx
c0007ea8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eac:	50                   	push   eax
c0007ead:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007eb1:	e8 be fd ff ff       	call   c0007c74 <VgaText::VgaText(char const*)>
c0007eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007eba:	83 c4 2c             	add    esp,0x2c
c0007ebd:	c3                   	ret    
c0007ebe:	66 90                	xchg   ax,ax

c0007ec0 <TSS::TSS()>:
c0007ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ec4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007ecb:	90                   	nop
c0007ecc:	c3                   	ret    
c0007ecd:	90                   	nop
c0007ece:	66 90                	xchg   ax,ax

c0007ed0 <TSS::setESP(unsigned long)>:
c0007ed0:	55                   	push   ebp
c0007ed1:	89 e5                	mov    ebp,esp
c0007ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ed9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007edc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007edf:	90                   	nop
c0007ee0:	5d                   	pop    ebp
c0007ee1:	c3                   	ret    
c0007ee2:	66 90                	xchg   ax,ax

c0007ee4 <TSS::flush()>:
c0007ee4:	55                   	push   ebp
c0007ee5:	89 e5                	mov    ebp,esp
c0007ee7:	83 ec 10             	sub    esp,0x10
c0007eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007eed:	8b 00                	mov    eax,DWORD PTR [eax]
c0007eef:	83 c8 03             	or     eax,0x3
c0007ef2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0007ef6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0007efa:	66 89 d0             	mov    ax,dx
c0007efd:	0f 00 d8             	ltr    ax
c0007f00:	90                   	nop
c0007f01:	c9                   	leave  
c0007f02:	c3                   	ret    
c0007f03:	90                   	nop

c0007f04 <TSS::setup(unsigned long, unsigned long)>:
c0007f04:	55                   	push   ebp
c0007f05:	89 e5                	mov    ebp,esp
c0007f07:	83 ec 18             	sub    esp,0x18
c0007f0a:	83 ec 0c             	sub    esp,0xc
c0007f0d:	6a 68                	push   0x68
c0007f0f:	e8 41 eb ff ff       	call   c0006a55 <malloc>
c0007f14:	83 c4 10             	add    esp,0x10
c0007f17:	89 c2                	mov    edx,eax
c0007f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f25:	83 ec 04             	sub    esp,0x4
c0007f28:	6a 68                	push   0x68
c0007f2a:	6a 00                	push   0x0
c0007f2c:	50                   	push   eax
c0007f2d:	e8 76 85 ff ff       	call   c00004a8 <memset>
c0007f32:	83 c4 10             	add    esp,0x10
c0007f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f3b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0007f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f47:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0007f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007f56:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f5f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0007f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f6b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0007f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f77:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0007f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f83:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0007f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f8f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0007f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f9b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0007fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fa7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0007faa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0007fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007fb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0007fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fbf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0007fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fcc:	0f 20 da             	mov    edx,cr3
c0007fcf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0007fd2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0007fd5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fde:	83 ec 08             	sub    esp,0x8
c0007fe1:	50                   	push   eax
c0007fe2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0007fe5:	50                   	push   eax
c0007fe6:	e8 b1 e2 ff ff       	call   c000629c <GDTEntry::setBase(unsigned int)>
c0007feb:	83 c4 10             	add    esp,0x10
c0007fee:	83 ec 08             	sub    esp,0x8
c0007ff1:	6a 68                	push   0x68
c0007ff3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0007ff6:	50                   	push   eax
c0007ff7:	e8 bc e2 ff ff       	call   c00062b8 <GDTEntry::setLimit(unsigned int)>
c0007ffc:	83 c4 10             	add    esp,0x10
c0007fff:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008003:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008006:	83 e0 0f             	and    eax,0xf
c0008009:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000800c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000800f:	83 c8 40             	or     eax,0x40
c0008012:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008015:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000801a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008020:	05 78 01 00 00       	add    eax,0x178
c0008025:	83 ec 04             	sub    esp,0x4
c0008028:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000802b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000802e:	50                   	push   eax
c000802f:	e8 b8 e2 ff ff       	call   c00062ec <GDT::addEntry(GDTEntry)>
c0008034:	83 c4 10             	add    esp,0x10
c0008037:	89 c2                	mov    edx,eax
c0008039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000803c:	89 10                	mov    DWORD PTR [eax],edx
c000803e:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0008043:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008049:	05 78 01 00 00       	add    eax,0x178
c000804e:	83 ec 0c             	sub    esp,0xc
c0008051:	50                   	push   eax
c0008052:	e8 bf e2 ff ff       	call   c0006316 <GDT::flush()>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000805d:	8b 00                	mov    eax,DWORD PTR [eax]
c000805f:	c9                   	leave  
c0008060:	c3                   	ret    
c0008061:	90                   	nop

c0008062 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008066:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000806a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000806d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008072:	75 08                	jne    c000807c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008074:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000807a:	eb 38                	jmp    c00080b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000807c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008081:	75 17                	jne    c000809a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008088:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000808b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008091:	8b 10                	mov    edx,DWORD PTR [eax]
c0008093:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008097:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000809a:	89 c1                	mov    ecx,eax
c000809c:	83 e1 fd             	and    ecx,0xfffffffd
c000809f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00080a5:	74 cd                	je     c0008074 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00080a7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00080ac:	83 e0 ef             	and    eax,0xffffffef
c00080af:	83 f8 08             	cmp    eax,0x8
c00080b2:	76 c0                	jbe    c0008074 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00080b4:	31 c0                	xor    eax,eax
c00080b6:	c3                   	ret    
c00080b7:	90                   	nop

c00080b8 <ReservedFilename::isAtty()>:
c00080b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00080bf:	31 c0                	xor    eax,eax
c00080c1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00080c7:	74 09                	je     c00080d2 <ReservedFilename::isAtty()+0x1a>
c00080c9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00080cf:	0f 94 c0             	sete   al
c00080d2:	c3                   	ret    
c00080d3:	90                   	nop

c00080d4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00080d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00080dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00080e8:	75 08                	jne    c00080f2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00080ea:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00080f0:	eb 3d                	jmp    c000812f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00080f2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00080f7:	75 17                	jne    c0008110 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00080f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00080fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008101:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008107:	8b 10                	mov    edx,DWORD PTR [eax]
c0008109:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000810d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008110:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008115:	75 04                	jne    c000811b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008117:	89 0a                	mov    DWORD PTR [edx],ecx
c0008119:	eb 14                	jmp    c000812f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000811b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008120:	74 c8                	je     c00080ea <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008122:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008127:	83 e0 ef             	and    eax,0xffffffef
c000812a:	83 f8 08             	cmp    eax,0x8
c000812d:	76 bb                	jbe    c00080ea <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000812f:	31 c0                	xor    eax,eax
c0008131:	c3                   	ret    

c0008132 <UnixFile::getFileDescriptor()>:
c0008132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008139:	c3                   	ret    

c000813a <UnixFile::UnixFile(int)>:
c000813a:	53                   	push   ebx
c000813b:	83 ec 28             	sub    esp,0x28
c000813e:	ba f8 dd 01 c0       	mov    edx,0xc001ddf8
c0008143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008147:	89 10                	mov    DWORD PTR [eax],edx
c0008149:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008151:	0f 8f 8c 01 00 00    	jg     c00082e3 <UnixFile::UnixFile(int)+0x1a9>
c0008157:	a1 00 fe 01 c0       	mov    eax,ds:0xc001fe00
c000815c:	8d 50 01             	lea    edx,[eax+0x1]
c000815f:	89 15 00 fe 01 c0    	mov    DWORD PTR ds:0xc001fe00,edx
c0008165:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008169:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000816c:	83 ec 08             	sub    esp,0x8
c000816f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008173:	68 38 05 02 c0       	push   0xc0020538
c0008178:	e8 2b 47 01 00       	call   c001c8a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000817d:	83 c4 10             	add    esp,0x10
c0008180:	a0 34 05 02 c0       	mov    al,ds:0xc0020534
c0008185:	83 f0 01             	xor    eax,0x1
c0008188:	84 c0                	test   al,al
c000818a:	0f 84 54 01 00 00    	je     c00082e4 <UnixFile::UnixFile(int)+0x1aa>
c0008190:	c6 05 34 05 02 c0 01 	mov    BYTE PTR ds:0xc0020534,0x1
c0008197:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000819f:	83 ec 0c             	sub    esp,0xc
c00081a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081a6:	e8 aa e8 ff ff       	call   c0006a55 <malloc>
c00081ab:	83 c4 10             	add    esp,0x10
c00081ae:	89 c3                	mov    ebx,eax
c00081b0:	83 ec 08             	sub    esp,0x8
c00081b3:	68 03 ff ff 0f       	push   0xfffff03
c00081b8:	53                   	push   ebx
c00081b9:	e8 2c 01 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c00081be:	83 c4 10             	add    esp,0x10
c00081c1:	89 1d 2c 05 02 c0    	mov    DWORD PTR ds:0xc002052c,ebx
c00081c7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00081cf:	83 ec 0c             	sub    esp,0xc
c00081d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081d6:	e8 7a e8 ff ff       	call   c0006a55 <malloc>
c00081db:	83 c4 10             	add    esp,0x10
c00081de:	89 c3                	mov    ebx,eax
c00081e0:	83 ec 08             	sub    esp,0x8
c00081e3:	68 01 ff ff 0f       	push   0xfffff01
c00081e8:	53                   	push   ebx
c00081e9:	e8 fc 00 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c00081ee:	83 c4 10             	add    esp,0x10
c00081f1:	89 1d 30 05 02 c0    	mov    DWORD PTR ds:0xc0020530,ebx
c00081f7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00081ff:	83 ec 0c             	sub    esp,0xc
c0008202:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008206:	e8 4a e8 ff ff       	call   c0006a55 <malloc>
c000820b:	83 c4 10             	add    esp,0x10
c000820e:	89 c3                	mov    ebx,eax
c0008210:	83 ec 08             	sub    esp,0x8
c0008213:	68 00 ff ff 0f       	push   0xfffff00
c0008218:	53                   	push   ebx
c0008219:	e8 cc 00 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	89 1d 24 05 02 c0    	mov    DWORD PTR ds:0xc0020524,ebx
c0008227:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000822f:	83 ec 0c             	sub    esp,0xc
c0008232:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008236:	e8 1a e8 ff ff       	call   c0006a55 <malloc>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	89 c3                	mov    ebx,eax
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	68 02 ff ff 0f       	push   0xfffff02
c0008248:	53                   	push   ebx
c0008249:	e8 9c 00 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	89 1d 28 05 02 c0    	mov    DWORD PTR ds:0xc0020528,ebx
c0008257:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000825f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008264:	7f 7e                	jg     c00082e4 <UnixFile::UnixFile(int)+0x1aa>
c0008266:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000826e:	83 ec 0c             	sub    esp,0xc
c0008271:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008275:	e8 db e7 ff ff       	call   c0006a55 <malloc>
c000827a:	83 c4 10             	add    esp,0x10
c000827d:	89 c3                	mov    ebx,eax
c000827f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008283:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008288:	83 ec 08             	sub    esp,0x8
c000828b:	50                   	push   eax
c000828c:	53                   	push   ebx
c000828d:	e8 58 00 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008299:	89 1c 85 00 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb00],ebx
c00082a0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00082a8:	83 ec 0c             	sub    esp,0xc
c00082ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00082af:	e8 a1 e7 ff ff       	call   c0006a55 <malloc>
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	89 c3                	mov    ebx,eax
c00082b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082bd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00082c2:	83 ec 08             	sub    esp,0x8
c00082c5:	50                   	push   eax
c00082c6:	53                   	push   ebx
c00082c7:	e8 1e 00 00 00       	call   c00082ea <ReservedFilename::ReservedFilename(int)>
c00082cc:	83 c4 10             	add    esp,0x10
c00082cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d3:	89 1c 85 c0 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb40],ebx
c00082da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00082de:	e9 7c ff ff ff       	jmp    c000825f <UnixFile::UnixFile(int)+0x125>
c00082e3:	90                   	nop
c00082e4:	83 c4 28             	add    esp,0x28
c00082e7:	5b                   	pop    ebx
c00082e8:	c3                   	ret    
c00082e9:	90                   	nop

c00082ea <ReservedFilename::ReservedFilename(int)>:
c00082ea:	83 ec 0c             	sub    esp,0xc
c00082ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082f1:	83 ec 08             	sub    esp,0x8
c00082f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f8:	50                   	push   eax
c00082f9:	e8 3c fe ff ff       	call   c000813a <UnixFile::UnixFile(int)>
c00082fe:	83 c4 10             	add    esp,0x10
c0008301:	ba 14 de 01 c0       	mov    edx,0xc001de14
c0008306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000830a:	89 10                	mov    DWORD PTR [eax],edx
c000830c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008310:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008317:	90                   	nop
c0008318:	83 c4 0c             	add    esp,0xc
c000831b:	c3                   	ret    

c000831c <UnixFile::~UnixFile()>:
c000831c:	83 ec 1c             	sub    esp,0x1c
c000831f:	ba f8 dd 01 c0       	mov    edx,0xc001ddf8
c0008324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008328:	89 10                	mov    DWORD PTR [eax],edx
c000832a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000832e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008331:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008336:	7f 73                	jg     c00083ab <UnixFile::~UnixFile()+0x8f>
c0008338:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008340:	83 ec 0c             	sub    esp,0xc
c0008343:	68 38 05 02 c0       	push   0xc0020538
c0008348:	e8 2f 46 01 00       	call   c001c97c <LinkedList<UnixFile>::getFirstElement()>
c000834d:	83 c4 10             	add    esp,0x10
c0008350:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008354:	83 ec 0c             	sub    esp,0xc
c0008357:	68 38 05 02 c0       	push   0xc0020538
c000835c:	e8 23 46 01 00       	call   c001c984 <LinkedList<UnixFile>::removeFirst()>
c0008361:	83 c4 10             	add    esp,0x10
c0008364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008368:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000836c:	74 40                	je     c00083ae <UnixFile::~UnixFile()+0x92>
c000836e:	83 ec 08             	sub    esp,0x8
c0008371:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008375:	68 38 05 02 c0       	push   0xc0020538
c000837a:	e8 29 45 01 00       	call   c001c8a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008386:	8d 50 01             	lea    edx,[eax+0x1]
c0008389:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000838d:	3d 88 13 00 00       	cmp    eax,0x1388
c0008392:	0f 94 c0             	sete   al
c0008395:	84 c0                	test   al,al
c0008397:	74 a7                	je     c0008340 <UnixFile::~UnixFile()+0x24>
c0008399:	83 ec 0c             	sub    esp,0xc
c000839c:	68 d0 dd 01 c0       	push   0xc001ddd0
c00083a1:	e8 0f 71 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 95                	jmp    c0008340 <UnixFile::~UnixFile()+0x24>
c00083ab:	90                   	nop
c00083ac:	eb 01                	jmp    c00083af <UnixFile::~UnixFile()+0x93>
c00083ae:	90                   	nop
c00083af:	90                   	nop
c00083b0:	83 c4 1c             	add    esp,0x1c
c00083b3:	c3                   	ret    

c00083b4 <UnixFile::~UnixFile()>:
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	83 ec 0c             	sub    esp,0xc
c00083ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083be:	e8 59 ff ff ff       	call   c000831c <UnixFile::~UnixFile()>
c00083c3:	83 c4 10             	add    esp,0x10
c00083c6:	83 ec 08             	sub    esp,0x8
c00083c9:	6a 0c                	push   0xc
c00083cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083cf:	e8 2a 13 00 00       	call   c00096fe <operator delete(void*, unsigned long)>
c00083d4:	83 c4 10             	add    esp,0x10
c00083d7:	83 c4 0c             	add    esp,0xc
c00083da:	c3                   	ret    
c00083db:	90                   	nop

c00083dc <ReservedFilename::~ReservedFilename()>:
c00083dc:	83 ec 0c             	sub    esp,0xc
c00083df:	ba 14 de 01 c0       	mov    edx,0xc001de14
c00083e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083e8:	89 10                	mov    DWORD PTR [eax],edx
c00083ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	50                   	push   eax
c00083f2:	e8 25 ff ff ff       	call   c000831c <UnixFile::~UnixFile()>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	90                   	nop
c00083fb:	83 c4 0c             	add    esp,0xc
c00083fe:	c3                   	ret    
c00083ff:	90                   	nop

c0008400 <ReservedFilename::~ReservedFilename()>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 cd ff ff ff       	call   c00083dc <ReservedFilename::~ReservedFilename()>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	83 ec 08             	sub    esp,0x8
c0008415:	6a 0c                	push   0xc
c0008417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000841b:	e8 de 12 00 00       	call   c00096fe <operator delete(void*, unsigned long)>
c0008420:	83 c4 10             	add    esp,0x10
c0008423:	83 c4 0c             	add    esp,0xc
c0008426:	c3                   	ret    

c0008427 <getFromFileDescriptor(int)>:
c0008427:	53                   	push   ebx
c0008428:	83 ec 08             	sub    esp,0x8
c000842b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000842f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008435:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000843b:	7f 2c                	jg     c0008469 <getFromFileDescriptor(int)+0x42>
c000843d:	83 ec 0c             	sub    esp,0xc
c0008440:	68 38 05 02 c0       	push   0xc0020538
c0008445:	e8 32 45 01 00       	call   c001c97c <LinkedList<UnixFile>::getFirstElement()>
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	85 c0                	test   eax,eax
c000844f:	75 04                	jne    c0008455 <getFromFileDescriptor(int)+0x2e>
c0008451:	31 c0                	xor    eax,eax
c0008453:	eb 6e                	jmp    c00084c3 <getFromFileDescriptor(int)+0x9c>
c0008455:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008458:	74 69                	je     c00084c3 <getFromFileDescriptor(int)+0x9c>
c000845a:	52                   	push   edx
c000845b:	52                   	push   edx
c000845c:	50                   	push   eax
c000845d:	68 38 05 02 c0       	push   0xc0020538
c0008462:	e8 bf 45 01 00       	call   c001ca26 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008467:	eb e1                	jmp    c000844a <getFromFileDescriptor(int)+0x23>
c0008469:	a1 2c 05 02 c0       	mov    eax,ds:0xc002052c
c000846e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008474:	74 4d                	je     c00084c3 <getFromFileDescriptor(int)+0x9c>
c0008476:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c000847b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0008481:	74 40                	je     c00084c3 <getFromFileDescriptor(int)+0x9c>
c0008483:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c0008488:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000848e:	74 33                	je     c00084c3 <getFromFileDescriptor(int)+0x9c>
c0008490:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0008495:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000849b:	74 26                	je     c00084c3 <getFromFileDescriptor(int)+0x9c>
c000849d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00084a3:	83 f8 08             	cmp    eax,0x8
c00084a6:	77 09                	ja     c00084b1 <getFromFileDescriptor(int)+0x8a>
c00084a8:	8b 04 85 00 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb00]
c00084af:	eb 12                	jmp    c00084c3 <getFromFileDescriptor(int)+0x9c>
c00084b1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00084b7:	83 fb 08             	cmp    ebx,0x8
c00084ba:	77 95                	ja     c0008451 <getFromFileDescriptor(int)+0x2a>
c00084bc:	8b 04 9d c0 04 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb40]
c00084c3:	83 c4 08             	add    esp,0x8
c00084c6:	5b                   	pop    ebx
c00084c7:	c3                   	ret    

c00084c8 <__static_initialization_and_destruction_0(int, int)>:
c00084c8:	83 ec 0c             	sub    esp,0xc
c00084cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00084d0:	75 34                	jne    c0008506 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00084d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00084da:	75 2a                	jne    c0008506 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	68 38 05 02 c0       	push   0xc0020538
c00084e4:	e8 7d 43 01 00       	call   c001c866 <LinkedList<UnixFile>::LinkedList()>
c00084e9:	83 c4 10             	add    esp,0x10
c00084ec:	83 ec 04             	sub    esp,0x4
c00084ef:	68 28 fc 01 c0       	push   0xc001fc28
c00084f4:	68 38 05 02 c0       	push   0xc0020538
c00084f9:	68 64 c8 01 c0       	push   0xc001c864
c00084fe:	e8 ab 11 00 00       	call   c00096ae <__cxa_atexit>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000850b:	83 ec 0c             	sub    esp,0xc
c000850e:	83 ec 08             	sub    esp,0x8
c0008511:	68 ff ff 00 00       	push   0xffff
c0008516:	6a 01                	push   0x1
c0008518:	e8 ab ff ff ff       	call   c00084c8 <__static_initialization_and_destruction_0(int, int)>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	83 c4 0c             	add    esp,0xc
c0008523:	c3                   	ret    

c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008524:	53                   	push   ebx
c0008525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008529:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000852d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008533:	89 c8                	mov    eax,ecx
c0008535:	d1 e8                	shr    eax,1
c0008537:	03 05 08 fe 01 c0    	add    eax,DWORD PTR ds:0xc001fe08
c000853d:	83 e1 01             	and    ecx,0x1
c0008540:	8a 10                	mov    dl,BYTE PTR [eax]
c0008542:	75 09                	jne    c000854d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008544:	83 e2 f0             	and    edx,0xfffffff0
c0008547:	09 da                	or     edx,ebx
c0008549:	88 10                	mov    BYTE PTR [eax],dl
c000854b:	5b                   	pop    ebx
c000854c:	c3                   	ret    
c000854d:	c1 e3 04             	shl    ebx,0x4
c0008550:	83 e2 0f             	and    edx,0xf
c0008553:	09 da                	or     edx,ebx
c0008555:	88 10                	mov    BYTE PTR [eax],dl
c0008557:	5b                   	pop    ebx
c0008558:	c3                   	ret    

c0008559 <Virt::getPageState(unsigned long)>:
c0008559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000855d:	8b 0d 08 fe 01 c0    	mov    ecx,DWORD PTR ds:0xc001fe08
c0008563:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008569:	89 d0                	mov    eax,edx
c000856b:	d1 e8                	shr    eax,1
c000856d:	83 e2 01             	and    edx,0x1
c0008570:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008573:	75 04                	jne    c0008579 <Virt::getPageState(unsigned long)+0x20>
c0008575:	83 e0 0f             	and    eax,0xf
c0008578:	c3                   	ret    
c0008579:	c0 e8 04             	shr    al,0x4
c000857c:	c3                   	ret    

c000857d <Virt::allocateKernelVirtualPages(int)>:
c000857d:	55                   	push   ebp
c000857e:	31 ed                	xor    ebp,ebp
c0008580:	57                   	push   edi
c0008581:	56                   	push   esi
c0008582:	53                   	push   ebx
c0008583:	31 db                	xor    ebx,ebx
c0008585:	83 ec 1c             	sub    esp,0x1c
c0008588:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000858c:	8b 3d 04 fe 01 c0    	mov    edi,DWORD PTR ds:0xc001fe04
c0008592:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008597:	57                   	push   edi
c0008598:	e8 bc ff ff ff       	call   c0008559 <Virt::getPageState(unsigned long)>
c000859d:	5a                   	pop    edx
c000859e:	84 c0                	test   al,al
c00085a0:	75 3a                	jne    c00085dc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00085a2:	85 db                	test   ebx,ebx
c00085a4:	75 02                	jne    c00085a8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00085a6:	89 fd                	mov    ebp,edi
c00085a8:	43                   	inc    ebx
c00085a9:	39 f3                	cmp    ebx,esi
c00085ab:	74 5a                	je     c0008607 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00085ad:	47                   	inc    edi
c00085ae:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00085b4:	76 31                	jbe    c00085e7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00085b6:	c7 05 04 fe 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001fe04,0xc8000
c00085c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00085c5:	75 28                	jne    c00085ef <Virt::allocateKernelVirtualPages(int)+0x72>
c00085c7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00085cc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00085d1:	57                   	push   edi
c00085d2:	e8 82 ff ff ff       	call   c0008559 <Virt::getPageState(unsigned long)>
c00085d7:	5a                   	pop    edx
c00085d8:	84 c0                	test   al,al
c00085da:	74 c6                	je     c00085a2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00085dc:	31 db                	xor    ebx,ebx
c00085de:	47                   	inc    edi
c00085df:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00085e5:	77 cf                	ja     c00085b6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00085e7:	89 3d 04 fe 01 c0    	mov    DWORD PTR ds:0xc001fe04,edi
c00085ed:	eb a8                	jmp    c0008597 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	68 28 de 01 c0       	push   0xc001de28
c00085f7:	e8 b9 6e 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00085fc:	8b 3d 04 fe 01 c0    	mov    edi,DWORD PTR ds:0xc001fe04
c0008602:	83 c4 10             	add    esp,0x10
c0008605:	eb 90                	jmp    c0008597 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008607:	89 2d 04 fe 01 c0    	mov    DWORD PTR ds:0xc001fe04,ebp
c000860d:	4b                   	dec    ebx
c000860e:	74 5f                	je     c000866f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008610:	85 f6                	test   esi,esi
c0008612:	74 3d                	je     c0008651 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008614:	89 e8                	mov    eax,ebp
c0008616:	31 db                	xor    ebx,ebx
c0008618:	8d 7e ff             	lea    edi,[esi-0x1]
c000861b:	eb 14                	jmp    c0008631 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000861d:	6a 01                	push   0x1
c000861f:	43                   	inc    ebx
c0008620:	50                   	push   eax
c0008621:	e8 fe fe ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008626:	58                   	pop    eax
c0008627:	39 f3                	cmp    ebx,esi
c0008629:	5a                   	pop    edx
c000862a:	74 25                	je     c0008651 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000862c:	a1 04 fe 01 c0       	mov    eax,ds:0xc001fe04
c0008631:	8d 50 01             	lea    edx,[eax+0x1]
c0008634:	85 db                	test   ebx,ebx
c0008636:	89 15 04 fe 01 c0    	mov    DWORD PTR ds:0xc001fe04,edx
c000863c:	74 20                	je     c000865e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000863e:	39 df                	cmp    edi,ebx
c0008640:	75 db                	jne    c000861d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008642:	6a 03                	push   0x3
c0008644:	43                   	inc    ebx
c0008645:	50                   	push   eax
c0008646:	e8 d9 fe ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000864b:	59                   	pop    ecx
c000864c:	39 f3                	cmp    ebx,esi
c000864e:	58                   	pop    eax
c000864f:	75 db                	jne    c000862c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008651:	83 c4 1c             	add    esp,0x1c
c0008654:	89 e8                	mov    eax,ebp
c0008656:	5b                   	pop    ebx
c0008657:	c1 e0 0c             	shl    eax,0xc
c000865a:	5e                   	pop    esi
c000865b:	5f                   	pop    edi
c000865c:	5d                   	pop    ebp
c000865d:	c3                   	ret    
c000865e:	6a 02                	push   0x2
c0008660:	bb 01 00 00 00       	mov    ebx,0x1
c0008665:	50                   	push   eax
c0008666:	e8 b9 fe ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000866b:	58                   	pop    eax
c000866c:	5a                   	pop    edx
c000866d:	eb bd                	jmp    c000862c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000866f:	6a 04                	push   0x4
c0008671:	8d 45 01             	lea    eax,[ebp+0x1]
c0008674:	55                   	push   ebp
c0008675:	a3 04 fe 01 c0       	mov    ds:0xc001fe04,eax
c000867a:	e8 a5 fe ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000867f:	59                   	pop    ecx
c0008680:	89 e8                	mov    eax,ebp
c0008682:	5b                   	pop    ebx
c0008683:	c1 e0 0c             	shl    eax,0xc
c0008686:	83 c4 1c             	add    esp,0x1c
c0008689:	5b                   	pop    ebx
c000868a:	5e                   	pop    esi
c000868b:	5f                   	pop    edi
c000868c:	5d                   	pop    ebp
c000868d:	c3                   	ret    

c000868e <Virt::freeSwapfilePage(unsigned long)>:
c000868e:	53                   	push   ebx
c000868f:	8b 15 50 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020550
c0008695:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008699:	b8 01 00 00 00       	mov    eax,0x1
c000869e:	89 cb                	mov    ebx,ecx
c00086a0:	d3 e0                	shl    eax,cl
c00086a2:	c1 eb 05             	shr    ebx,0x5
c00086a5:	f7 d0                	not    eax
c00086a7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00086aa:	5b                   	pop    ebx
c00086ab:	c3                   	ret    

c00086ac <Virt::swapIDToSector(unsigned long)>:
c00086ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b0:	0f af 05 0c fe 01 c0 	imul   eax,DWORD PTR ds:0xc001fe0c
c00086b7:	03 05 14 fe 01 c0    	add    eax,DWORD PTR ds:0xc001fe14
c00086bd:	c3                   	ret    

c00086be <Virt::allocateSwapfilePage()>:
c00086be:	55                   	push   ebp
c00086bf:	31 d2                	xor    edx,edx
c00086c1:	57                   	push   edi
c00086c2:	56                   	push   esi
c00086c3:	53                   	push   ebx
c00086c4:	83 ec 0c             	sub    esp,0xc
c00086c7:	8b 0d 0c fe 01 c0    	mov    ecx,DWORD PTR ds:0xc001fe0c
c00086cd:	a1 10 fe 01 c0       	mov    eax,ds:0xc001fe10
c00086d2:	f7 f1                	div    ecx
c00086d4:	39 0d 10 fe 01 c0    	cmp    DWORD PTR ds:0xc001fe10,ecx
c00086da:	72 2d                	jb     c0008709 <Virt::allocateSwapfilePage()+0x4b>
c00086dc:	8b 35 50 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020550
c00086e2:	8b 16                	mov    edx,DWORD PTR [esi]
c00086e4:	f6 c2 01             	test   dl,0x1
c00086e7:	74 3c                	je     c0008725 <Virt::allocateSwapfilePage()+0x67>
c00086e9:	31 c9                	xor    ecx,ecx
c00086eb:	bf 01 00 00 00       	mov    edi,0x1
c00086f0:	eb 12                	jmp    c0008704 <Virt::allocateSwapfilePage()+0x46>
c00086f2:	89 fd                	mov    ebp,edi
c00086f4:	89 ca                	mov    edx,ecx
c00086f6:	d3 e5                	shl    ebp,cl
c00086f8:	c1 ea 05             	shr    edx,0x5
c00086fb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00086fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008700:	85 ea                	test   edx,ebp
c0008702:	74 2a                	je     c000872e <Virt::allocateSwapfilePage()+0x70>
c0008704:	41                   	inc    ecx
c0008705:	39 c8                	cmp    eax,ecx
c0008707:	77 e9                	ja     c00086f2 <Virt::allocateSwapfilePage()+0x34>
c0008709:	83 ec 0c             	sub    esp,0xc
c000870c:	68 8f df 01 c0       	push   0xc001df8f
c0008711:	e8 9f 6d 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	31 c9                	xor    ecx,ecx
c000871b:	83 c4 0c             	add    esp,0xc
c000871e:	89 c8                	mov    eax,ecx
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	c3                   	ret    
c0008725:	89 f3                	mov    ebx,esi
c0008727:	bd 01 00 00 00       	mov    ebp,0x1
c000872c:	31 c9                	xor    ecx,ecx
c000872e:	09 ea                	or     edx,ebp
c0008730:	89 c8                	mov    eax,ecx
c0008732:	89 13                	mov    DWORD PTR [ebx],edx
c0008734:	83 c4 0c             	add    esp,0xc
c0008737:	5b                   	pop    ebx
c0008738:	5e                   	pop    esi
c0008739:	5f                   	pop    edi
c000873a:	5d                   	pop    ebp
c000873b:	c3                   	ret    

c000873c <Virt::virtualMemorySetup()>:
c000873c:	53                   	push   ebx
c000873d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008742:	6a 0f                	push   0xf
c0008744:	53                   	push   ebx
c0008745:	43                   	inc    ebx
c0008746:	e8 d9 fd ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000874b:	58                   	pop    eax
c000874c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008752:	5a                   	pop    edx
c0008753:	75 ed                	jne    c0008742 <Virt::virtualMemorySetup()+0x6>
c0008755:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000875a:	6a 00                	push   0x0
c000875c:	53                   	push   ebx
c000875d:	43                   	inc    ebx
c000875e:	e8 c1 fd ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008763:	59                   	pop    ecx
c0008764:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000876a:	58                   	pop    eax
c000876b:	75 ed                	jne    c000875a <Virt::virtualMemorySetup()+0x1e>
c000876d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008772:	6a 0f                	push   0xf
c0008774:	53                   	push   ebx
c0008775:	43                   	inc    ebx
c0008776:	e8 a9 fd ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000877b:	58                   	pop    eax
c000877c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0008782:	5a                   	pop    edx
c0008783:	75 ed                	jne    c0008772 <Virt::virtualMemorySetup()+0x36>
c0008785:	5b                   	pop    ebx
c0008786:	c3                   	ret    

c0008787 <Virt::setupPageSwapping(int)>:
c0008787:	53                   	push   ebx
c0008788:	83 ec 0c             	sub    esp,0xc
c000878b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000878f:	a1 e8 29 02 c0       	mov    eax,ds:0xc00229e8
c0008794:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000879a:	8b 10                	mov    edx,DWORD PTR [eax]
c000879c:	53                   	push   ebx
c000879d:	c1 e3 0b             	shl    ebx,0xb
c00087a0:	68 a6 df 01 c0       	push   0xc001dfa6
c00087a5:	50                   	push   eax
c00087a6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00087a9:	89 1d 10 fe 01 c0    	mov    DWORD PTR ds:0xc001fe10,ebx
c00087af:	c6 05 18 fe 01 c0 43 	mov    BYTE PTR ds:0xc001fe18,0x43
c00087b6:	c1 eb 08             	shr    ebx,0x8
c00087b9:	a3 14 fe 01 c0       	mov    ds:0xc001fe14,eax
c00087be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087c1:	c7 05 0c fe 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001fe0c,0x8
c00087cb:	e8 85 e2 ff ff       	call   c0006a55 <malloc>
c00087d0:	83 c4 0c             	add    esp,0xc
c00087d3:	89 c1                	mov    ecx,eax
c00087d5:	a3 50 05 02 c0       	mov    ds:0xc0020550,eax
c00087da:	31 d2                	xor    edx,edx
c00087dc:	a1 10 fe 01 c0       	mov    eax,ds:0xc001fe10
c00087e1:	f7 35 0c fe 01 c0    	div    DWORD PTR ds:0xc001fe0c
c00087e7:	c1 e8 05             	shr    eax,0x5
c00087ea:	50                   	push   eax
c00087eb:	6a 00                	push   0x0
c00087ed:	51                   	push   ecx
c00087ee:	e8 b5 7c ff ff       	call   c00004a8 <memset>
c00087f3:	83 c4 18             	add    esp,0x18
c00087f6:	5b                   	pop    ebx
c00087f7:	c3                   	ret    

c00087f8 <VAS::VAS(VAS*)>:
c00087f8:	83 ec 0c             	sub    esp,0xc
c00087fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000880a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008811:	83 ec 0c             	sub    esp,0xc
c0008814:	68 48 de 01 c0       	push   0xc001de48
c0008819:	e8 97 6c 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000881e:	83 c4 10             	add    esp,0x10
c0008821:	90                   	nop
c0008822:	83 c4 0c             	add    esp,0xc
c0008825:	c3                   	ret    

c0008826 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000882a:	89 c2                	mov    edx,eax
c000882c:	c1 e8 0a             	shr    eax,0xa
c000882f:	c1 ea 16             	shr    edx,0x16
c0008832:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008837:	19 c9                	sbb    ecx,ecx
c0008839:	c1 e2 0c             	shl    edx,0xc
c000883c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008842:	25 fc 0f 00 00       	and    eax,0xffc
c0008847:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000884e:	01 d0                	add    eax,edx
c0008850:	c3                   	ret    
c0008851:	90                   	nop

c0008852 <VAS::getPageTableEntry(unsigned long)>:
c0008852:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008856:	89 ca                	mov    edx,ecx
c0008858:	c1 e9 0a             	shr    ecx,0xa
c000885b:	c1 ea 16             	shr    edx,0x16
c000885e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008864:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000886a:	c1 e0 0c             	shl    eax,0xc
c000886d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008870:	c3                   	ret    

c0008871 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008871:	57                   	push   edi
c0008872:	56                   	push   esi
c0008873:	be 01 00 00 00       	mov    esi,0x1
c0008878:	53                   	push   ebx
c0008879:	83 ec 10             	sub    esp,0x10
c000887c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008880:	c1 eb 0c             	shr    ebx,0xc
c0008883:	eb 3f                	jmp    c00088c4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008885:	83 ec 08             	sub    esp,0x8
c0008888:	57                   	push   edi
c0008889:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c000888f:	e8 be ff ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c0008894:	83 c4 10             	add    esp,0x10
c0008897:	8b 00                	mov    eax,DWORD PTR [eax]
c0008899:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000889d:	f6 c4 04             	test   ah,0x4
c00088a0:	75 5f                	jne    c0008901 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00088a2:	80 fa 04             	cmp    dl,0x4
c00088a5:	74 78                	je     c000891f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00088a7:	80 fa 02             	cmp    dl,0x2
c00088aa:	0f 84 88 00 00 00    	je     c0008938 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00088b0:	80 fa 03             	cmp    dl,0x3
c00088b3:	0f 84 ad 00 00 00    	je     c0008966 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00088b9:	fe ca                	dec    dl
c00088bb:	0f 84 92 00 00 00    	je     c0008953 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00088c1:	43                   	inc    ebx
c00088c2:	31 f6                	xor    esi,esi
c00088c4:	53                   	push   ebx
c00088c5:	89 df                	mov    edi,ebx
c00088c7:	e8 8d fc ff ff       	call   c0008559 <Virt::getPageState(unsigned long)>
c00088cc:	c1 e7 0c             	shl    edi,0xc
c00088cf:	59                   	pop    ecx
c00088d0:	84 c0                	test   al,al
c00088d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00088d6:	75 ad                	jne    c0008885 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00088d8:	83 ec 0c             	sub    esp,0xc
c00088db:	68 bd df 01 c0       	push   0xc001dfbd
c00088e0:	e8 d0 6b 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00088e5:	58                   	pop    eax
c00088e6:	5a                   	pop    edx
c00088e7:	57                   	push   edi
c00088e8:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c00088ee:	e8 5f ff ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00088f8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00088fc:	f6 c4 04             	test   ah,0x4
c00088ff:	74 c0                	je     c00088c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008901:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008905:	25 00 f0 ff ff       	and    eax,0xfffff000
c000890a:	83 ec 0c             	sub    esp,0xc
c000890d:	50                   	push   eax
c000890e:	e8 a7 e4 ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000891a:	80 fa 04             	cmp    dl,0x4
c000891d:	75 88                	jne    c00088a7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000891f:	89 f0                	mov    eax,esi
c0008921:	84 c0                	test   al,al
c0008923:	75 47                	jne    c000896c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0008925:	c7 44 24 20 6c de 01 c0 	mov    DWORD PTR [esp+0x20],0xc001de6c
c000892d:	83 c4 10             	add    esp,0x10
c0008930:	5b                   	pop    ebx
c0008931:	5e                   	pop    esi
c0008932:	5f                   	pop    edi
c0008933:	e9 7d 6b 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c0008938:	89 f0                	mov    eax,esi
c000893a:	84 c0                	test   al,al
c000893c:	75 15                	jne    c0008953 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000893e:	83 ec 0c             	sub    esp,0xc
c0008941:	68 d9 df 01 c0       	push   0xc001dfd9
c0008946:	e8 6a 6b 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000894b:	83 c4 10             	add    esp,0x10
c000894e:	e9 6e ff ff ff       	jmp    c00088c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008953:	83 ec 08             	sub    esp,0x8
c0008956:	6a 00                	push   0x0
c0008958:	53                   	push   ebx
c0008959:	e8 c6 fb ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000895e:	83 c4 10             	add    esp,0x10
c0008961:	e9 5b ff ff ff       	jmp    c00088c1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008966:	89 f0                	mov    eax,esi
c0008968:	84 c0                	test   al,al
c000896a:	75 15                	jne    c0008981 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000896c:	83 ec 08             	sub    esp,0x8
c000896f:	6a 00                	push   0x0
c0008971:	53                   	push   ebx
c0008972:	e8 ad fb ff ff       	call   c0008524 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	5b                   	pop    ebx
c000897e:	5e                   	pop    esi
c000897f:	5f                   	pop    edi
c0008980:	c3                   	ret    
c0008981:	c7 44 24 20 f5 df 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dff5
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	5b                   	pop    ebx
c000898d:	5e                   	pop    esi
c000898e:	5f                   	pop    edi
c000898f:	e9 21 6b 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>

c0008994 <VAS::freeAllocatedPages(unsigned long)>:
c0008994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008998:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000899c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00089a0:	74 09                	je     c00089ab <VAS::freeAllocatedPages(unsigned long)+0x17>
c00089a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00089a6:	e9 c6 fe ff ff       	jmp    c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c00089ab:	c7 44 24 04 90 de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001de90
c00089b3:	e9 27 0e 00 00       	jmp    c00097df <Dbg::kprintf(char const*, ...)>

c00089b8 <VAS::virtualToPhysical(unsigned long)>:
c00089b8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00089bc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00089c0:	e8 8d fe ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c00089c5:	5a                   	pop    edx
c00089c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00089c8:	59                   	pop    ecx
c00089c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00089ce:	c3                   	ret    
c00089cf:	90                   	nop

c00089d0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00089d0:	55                   	push   ebp
c00089d1:	57                   	push   edi
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089d8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00089dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00089e0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00089e4:	85 db                	test   ebx,ebx
c00089e6:	7e 22                	jle    c0008a0a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00089e8:	c1 e3 0c             	shl    ebx,0xc
c00089eb:	01 f3                	add    ebx,esi
c00089ed:	56                   	push   esi
c00089ee:	81 c6 00 10 00 00    	add    esi,0x1000
c00089f4:	55                   	push   ebp
c00089f5:	e8 58 fe ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c00089fa:	5a                   	pop    edx
c00089fb:	59                   	pop    ecx
c00089fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00089fe:	21 f9                	and    ecx,edi
c0008a00:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008a04:	39 f3                	cmp    ebx,esi
c0008a06:	89 08                	mov    DWORD PTR [eax],ecx
c0008a08:	75 e3                	jne    c00089ed <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008a0a:	5b                   	pop    ebx
c0008a0b:	5e                   	pop    esi
c0008a0c:	5f                   	pop    edi
c0008a0d:	5d                   	pop    ebp
c0008a0e:	c3                   	ret    
c0008a0f:	90                   	nop

c0008a10 <VAS::setToWriteCombining(unsigned long, int)>:
c0008a10:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0008a15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008a1b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008a22:	75 01                	jne    c0008a25 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008a24:	c3                   	ret    
c0008a25:	68 80 00 00 00       	push   0x80
c0008a2a:	6a ff                	push   0xffffffff
c0008a2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a38:	e8 93 ff ff ff       	call   c00089d0 <VAS::reflagRange(unsigned long, int, int, int)>
c0008a3d:	83 c4 14             	add    esp,0x14
c0008a40:	c3                   	ret    
c0008a41:	90                   	nop

c0008a42 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008a42:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a4b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a52:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008a55:	19 c0                	sbb    eax,eax
c0008a57:	83 ca 03             	or     edx,0x3
c0008a5a:	83 e0 fc             	and    eax,0xfffffffc
c0008a5d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008a64:	0f 20 d8             	mov    eax,cr3
c0008a67:	0f 22 d8             	mov    cr3,eax
c0008a6a:	c3                   	ret    
c0008a6b:	90                   	nop

c0008a6c <VAS::~VAS()>:
c0008a6c:	83 ec 2c             	sub    esp,0x2c
c0008a6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008a77:	fa                   	cli    
c0008a78:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0008a7d:	40                   	inc    eax
c0008a7e:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0008a83:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008a8d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	6a 01                	push   0x1
c0008a99:	50                   	push   eax
c0008a9a:	e8 a3 ff ff ff       	call   c0008a42 <VAS::mapOtherVASIn(bool, VAS*)>
c0008a9f:	83 c4 0c             	add    esp,0xc
c0008aa2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008aaa:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008ab2:	0f 8f d4 00 00 00    	jg     c0008b8c <VAS::~VAS()+0x120>
c0008ab8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008abc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008abf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008ac3:	c1 e2 02             	shl    edx,0x2
c0008ac6:	01 d0                	add    eax,edx
c0008ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008aca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad2:	83 e0 01             	and    eax,0x1
c0008ad5:	0f 84 a8 00 00 00    	je     c0008b83 <VAS::~VAS()+0x117>
c0008adb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008ae3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008aeb:	7f 72                	jg     c0008b5f <VAS::~VAS()+0xf3>
c0008aed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008af1:	c1 e0 0a             	shl    eax,0xa
c0008af4:	89 c2                	mov    edx,eax
c0008af6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008afa:	01 d0                	add    eax,edx
c0008afc:	c1 e0 0c             	shl    eax,0xc
c0008aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b03:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008b0d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008b13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b17:	6a 01                	push   0x1
c0008b19:	50                   	push   eax
c0008b1a:	e8 07 fd ff ff       	call   c0008826 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008b1f:	83 c4 0c             	add    esp,0xc
c0008b22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b34:	25 01 04 00 00       	and    eax,0x401
c0008b39:	3d 01 04 00 00       	cmp    eax,0x401
c0008b3e:	75 19                	jne    c0008b59 <VAS::~VAS()+0xed>
c0008b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	50                   	push   eax
c0008b4d:	e8 68 e2 ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008b59:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008b5d:	eb 84                	jmp    c0008ae3 <VAS::~VAS()+0x77>
c0008b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b63:	25 00 04 00 00       	and    eax,0x400
c0008b68:	74 19                	je     c0008b83 <VAS::~VAS()+0x117>
c0008b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	50                   	push   eax
c0008b77:	e8 3e e2 ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008b83:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008b87:	e9 1e ff ff ff       	jmp    c0008aaa <VAS::~VAS()+0x3e>
c0008b8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008b93:	83 ec 0c             	sub    esp,0xc
c0008b96:	50                   	push   eax
c0008b97:	e8 d5 fc ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c0008b9c:	83 c4 10             	add    esp,0x10
c0008b9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ba3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008ba6:	83 ec 0c             	sub    esp,0xc
c0008ba9:	50                   	push   eax
c0008baa:	e8 0b e2 ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008bb6:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0008bbb:	48                   	dec    eax
c0008bbc:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0008bc1:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0008bc6:	85 c0                	test   eax,eax
c0008bc8:	75 01                	jne    c0008bcb <VAS::~VAS()+0x15f>
c0008bca:	fb                   	sti    
c0008bcb:	90                   	nop
c0008bcc:	83 c4 2c             	add    esp,0x2c
c0008bcf:	c3                   	ret    

c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008bd0:	55                   	push   ebp
c0008bd1:	57                   	push   edi
c0008bd2:	56                   	push   esi
c0008bd3:	53                   	push   ebx
c0008bd4:	83 ec 1c             	sub    esp,0x1c
c0008bd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008bdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008bdf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008be5:	77 0b                	ja     c0008bf2 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008be7:	0f 20 d8             	mov    eax,cr3
c0008bea:	0f 20 d8             	mov    eax,cr3
c0008bed:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008bf0:	75 47                	jne    c0008c39 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008bf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008bf6:	09 d8                	or     eax,ebx
c0008bf8:	a9 ff 0f 00 00       	test   eax,0xfff
c0008bfd:	75 57                	jne    c0008c56 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008bff:	89 de                	mov    esi,ebx
c0008c01:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008c04:	c1 ee 16             	shr    esi,0x16
c0008c07:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008c0e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008c12:	74 54                	je     c0008c68 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008c14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008c18:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008c1e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008c22:	c1 e6 0c             	shl    esi,0xc
c0008c25:	c1 eb 0a             	shr    ebx,0xa
c0008c28:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008c2e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008c31:	83 c4 1c             	add    esp,0x1c
c0008c34:	5b                   	pop    ebx
c0008c35:	5e                   	pop    esi
c0008c36:	5f                   	pop    edi
c0008c37:	5d                   	pop    ebp
c0008c38:	c3                   	ret    
c0008c39:	83 ec 0c             	sub    esp,0xc
c0008c3c:	68 b4 de 01 c0       	push   0xc001deb4
c0008c41:	e8 99 0b 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c4d:	09 d8                	or     eax,ebx
c0008c4f:	a9 ff 0f 00 00       	test   eax,0xfff
c0008c54:	74 a9                	je     c0008bff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008c56:	83 ec 0c             	sub    esp,0xc
c0008c59:	68 1c df 01 c0       	push   0xc001df1c
c0008c5e:	e8 52 68 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	eb 97                	jmp    c0008bff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008c68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c6c:	e8 ab e1 ff ff       	call   c0006e1c <Phys::allocatePage()>
c0008c71:	83 ec 0c             	sub    esp,0xc
c0008c74:	89 c5                	mov    ebp,eax
c0008c76:	8b 0d 54 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020554
c0008c7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008c80:	6a 01                	push   0x1
c0008c82:	e8 f6 f8 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c0008c87:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008c8e:	6a 01                	push   0x1
c0008c90:	50                   	push   eax
c0008c91:	55                   	push   ebp
c0008c92:	81 cd 07 04 00 00    	or     ebp,0x407
c0008c98:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008c9c:	51                   	push   ecx
c0008c9d:	e8 26 02 00 00       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008ca2:	83 c4 1c             	add    esp,0x1c
c0008ca5:	68 00 10 00 00       	push   0x1000
c0008caa:	6a 00                	push   0x0
c0008cac:	50                   	push   eax
c0008cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008cb1:	e8 f2 77 ff ff       	call   c00004a8 <memset>
c0008cb6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008cba:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008cbd:	e8 af fb ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c0008cc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008cc6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008cc9:	83 c4 10             	add    esp,0x10
c0008ccc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ccf:	e9 40 ff ff ff       	jmp    c0008c14 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008cd4 <VAS::allocatePages(int, int)>:
c0008cd4:	55                   	push   ebp
c0008cd5:	57                   	push   edi
c0008cd6:	56                   	push   esi
c0008cd7:	53                   	push   ebx
c0008cd8:	83 ec 1c             	sub    esp,0x1c
c0008cdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008cdf:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0008ce4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008cea:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008cf0:	83 e0 01             	and    eax,0x1
c0008cf3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008cf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008cfb:	0f 85 cc 00 00 00    	jne    c0008dcd <VAS::allocatePages(int, int)+0xf9>
c0008d01:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008d04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d08:	85 c0                	test   eax,eax
c0008d0a:	0f 84 a1 00 00 00    	je     c0008db1 <VAS::allocatePages(int, int)+0xdd>
c0008d10:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008d14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d18:	c1 e6 0c             	shl    esi,0xc
c0008d1b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008d1f:	85 c0                	test   eax,eax
c0008d21:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008d24:	7e 33                	jle    c0008d59 <VAS::allocatePages(int, int)+0x85>
c0008d26:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008d2a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008d2e:	81 cd 00 04 00 00    	or     ebp,0x400
c0008d34:	e8 e3 e0 ff ff       	call   c0006e1c <Phys::allocatePage()>
c0008d39:	55                   	push   ebp
c0008d3a:	53                   	push   ebx
c0008d3b:	50                   	push   eax
c0008d3c:	57                   	push   edi
c0008d3d:	e8 8e fe ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d42:	83 c4 10             	add    esp,0x10
c0008d45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008d4a:	74 03                	je     c0008d4f <VAS::allocatePages(int, int)+0x7b>
c0008d4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008d4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008d55:	39 de                	cmp    esi,ebx
c0008d57:	75 db                	jne    c0008d34 <VAS::allocatePages(int, int)+0x60>
c0008d59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008d5e:	75 12                	jne    c0008d72 <VAS::allocatePages(int, int)+0x9e>
c0008d60:	0f 20 d8             	mov    eax,cr3
c0008d63:	0f 22 d8             	mov    cr3,eax
c0008d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6a:	83 c4 1c             	add    esp,0x1c
c0008d6d:	5b                   	pop    ebx
c0008d6e:	5e                   	pop    esi
c0008d6f:	5f                   	pop    edi
c0008d70:	5d                   	pop    ebp
c0008d71:	c3                   	ret    
c0008d72:	c1 ee 0a             	shr    esi,0xa
c0008d75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008d79:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008d7f:	c1 eb 0a             	shr    ebx,0xa
c0008d82:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008d88:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008d8e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008d94:	39 c3                	cmp    ebx,eax
c0008d96:	77 ce                	ja     c0008d66 <VAS::allocatePages(int, int)+0x92>
c0008d98:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008d9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008da1:	39 d8                	cmp    eax,ebx
c0008da3:	73 f3                	jae    c0008d98 <VAS::allocatePages(int, int)+0xc4>
c0008da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da9:	83 c4 1c             	add    esp,0x1c
c0008dac:	5b                   	pop    ebx
c0008dad:	5e                   	pop    esi
c0008dae:	5f                   	pop    edi
c0008daf:	5d                   	pop    ebp
c0008db0:	c3                   	ret    
c0008db1:	83 ec 0c             	sub    esp,0xc
c0008db4:	68 40 df 01 c0       	push   0xc001df40
c0008db9:	e8 f7 66 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0008dbe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008dc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	e9 43 ff ff ff       	jmp    c0008d10 <VAS::allocatePages(int, int)+0x3c>
c0008dcd:	83 ec 0c             	sub    esp,0xc
c0008dd0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008dd4:	e8 a4 f7 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c0008dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ddd:	83 c4 10             	add    esp,0x10
c0008de0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008de5:	0f 87 9b 00 00 00    	ja     c0008e86 <VAS::allocatePages(int, int)+0x1b2>
c0008deb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008def:	85 d2                	test   edx,edx
c0008df1:	7e 3c                	jle    c0008e2f <VAS::allocatePages(int, int)+0x15b>
c0008df3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008df7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008dfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008dff:	c1 e5 0c             	shl    ebp,0xc
c0008e02:	81 ce 00 04 00 00    	or     esi,0x400
c0008e08:	01 dd                	add    ebp,ebx
c0008e0a:	e8 0d e0 ff ff       	call   c0006e1c <Phys::allocatePage()>
c0008e0f:	56                   	push   esi
c0008e10:	53                   	push   ebx
c0008e11:	50                   	push   eax
c0008e12:	57                   	push   edi
c0008e13:	e8 b8 fd ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e20:	74 03                	je     c0008e25 <VAS::allocatePages(int, int)+0x151>
c0008e22:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e25:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e2b:	39 dd                	cmp    ebp,ebx
c0008e2d:	75 db                	jne    c0008e0a <VAS::allocatePages(int, int)+0x136>
c0008e2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e34:	0f 84 26 ff ff ff    	je     c0008d60 <VAS::allocatePages(int, int)+0x8c>
c0008e3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008e3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e42:	89 d3                	mov    ebx,edx
c0008e44:	c1 e0 0c             	shl    eax,0xc
c0008e47:	c1 eb 0a             	shr    ebx,0xa
c0008e4a:	01 d0                	add    eax,edx
c0008e4c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008e52:	c1 e8 0a             	shr    eax,0xa
c0008e55:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008e5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008e60:	2d 00 00 40 00       	sub    eax,0x400000
c0008e65:	39 c3                	cmp    ebx,eax
c0008e67:	0f 87 f9 fe ff ff    	ja     c0008d66 <VAS::allocatePages(int, int)+0x92>
c0008e6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e76:	39 d8                	cmp    eax,ebx
c0008e78:	73 f3                	jae    c0008e6d <VAS::allocatePages(int, int)+0x199>
c0008e7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e7e:	83 c4 1c             	add    esp,0x1c
c0008e81:	5b                   	pop    ebx
c0008e82:	5e                   	pop    esi
c0008e83:	5f                   	pop    edi
c0008e84:	5d                   	pop    ebp
c0008e85:	c3                   	ret    
c0008e86:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0008e8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e91:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008e98:	0f 84 4d ff ff ff    	je     c0008deb <VAS::allocatePages(int, int)+0x117>
c0008e9e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0008ea6:	e9 40 ff ff ff       	jmp    c0008deb <VAS::allocatePages(int, int)+0x117>
c0008eab:	90                   	nop

c0008eac <VAS::setCPUSpecific(unsigned long)>:
c0008eac:	83 ec 0c             	sub    esp,0xc
c0008eaf:	6a 05                	push   0x5
c0008eb1:	68 00 00 40 c2       	push   0xc2400000
c0008eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ebe:	e8 0d fd ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ec3:	83 c4 1c             	add    esp,0x1c
c0008ec6:	c3                   	ret    
c0008ec7:	90                   	nop

c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0008ec8:	55                   	push   ebp
c0008ec9:	57                   	push   edi
c0008eca:	56                   	push   esi
c0008ecb:	53                   	push   ebx
c0008ecc:	83 ec 1c             	sub    esp,0x1c
c0008ecf:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0008ed4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008ed8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ede:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008ee2:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008ee8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008ef3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008ef7:	85 c0                	test   eax,eax
c0008ef9:	7e 39                	jle    c0008f34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0008efb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008eff:	89 f3                	mov    ebx,esi
c0008f01:	c1 e0 0c             	shl    eax,0xc
c0008f04:	01 f0                	add    eax,esi
c0008f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f0a:	55                   	push   ebp
c0008f0b:	53                   	push   ebx
c0008f0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f10:	29 f0                	sub    eax,esi
c0008f12:	01 d8                	add    eax,ebx
c0008f14:	50                   	push   eax
c0008f15:	57                   	push   edi
c0008f16:	e8 b5 fc ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f23:	74 03                	je     c0008f28 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0008f25:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f28:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f2e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0008f32:	75 d6                	jne    c0008f0a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0008f34:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f39:	75 10                	jne    c0008f4b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0008f3b:	0f 20 d8             	mov    eax,cr3
c0008f3e:	0f 22 d8             	mov    cr3,eax
c0008f41:	83 c4 1c             	add    esp,0x1c
c0008f44:	89 f0                	mov    eax,esi
c0008f46:	5b                   	pop    ebx
c0008f47:	5e                   	pop    esi
c0008f48:	5f                   	pop    edi
c0008f49:	5d                   	pop    ebp
c0008f4a:	c3                   	ret    
c0008f4b:	89 f3                	mov    ebx,esi
c0008f4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f51:	c1 eb 0a             	shr    ebx,0xa
c0008f54:	c1 e0 0c             	shl    eax,0xc
c0008f57:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008f5d:	01 f0                	add    eax,esi
c0008f5f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008f65:	c1 e8 0a             	shr    eax,0xa
c0008f68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008f6d:	2d 00 00 40 00       	sub    eax,0x400000
c0008f72:	39 c3                	cmp    ebx,eax
c0008f74:	77 cb                	ja     c0008f41 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0008f76:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f7f:	39 d8                	cmp    eax,ebx
c0008f81:	73 f3                	jae    c0008f76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0008f83:	83 c4 1c             	add    esp,0x1c
c0008f86:	89 f0                	mov    eax,esi
c0008f88:	5b                   	pop    ebx
c0008f89:	5e                   	pop    esi
c0008f8a:	5f                   	pop    edi
c0008f8b:	5d                   	pop    ebp
c0008f8c:	c3                   	ret    
c0008f8d:	90                   	nop

c0008f8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0008f8e:	55                   	push   ebp
c0008f8f:	57                   	push   edi
c0008f90:	56                   	push   esi
c0008f91:	53                   	push   ebx
c0008f92:	83 ec 1c             	sub    esp,0x1c
c0008f95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008f99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008f9d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0008fa1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0008fa5:	a9 ff 0f 00 00       	test   eax,0xfff
c0008faa:	75 4a                	jne    c0008ff6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0008fac:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008fb0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008fb3:	c1 eb 16             	shr    ebx,0x16
c0008fb6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0008fbd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0008fc1:	74 4d                	je     c0009010 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0008fc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008fc7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0008fcb:	c1 e8 0a             	shr    eax,0xa
c0008fce:	80 fa 01             	cmp    dl,0x1
c0008fd1:	19 d2                	sbb    edx,edx
c0008fd3:	c1 e3 0c             	shl    ebx,0xc
c0008fd6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0008fda:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0008fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0008fe5:	01 d8                	add    eax,ebx
c0008fe7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0008fee:	83 c4 1c             	add    esp,0x1c
c0008ff1:	5b                   	pop    ebx
c0008ff2:	5e                   	pop    esi
c0008ff3:	5f                   	pop    edi
c0008ff4:	5d                   	pop    ebp
c0008ff5:	c3                   	ret    
c0008ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ffa:	83 ec 0c             	sub    esp,0xc
c0008ffd:	68 6c df 01 c0       	push   0xc001df6c
c0009002:	e8 ae 64 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c0009007:	83 c4 10             	add    esp,0x10
c000900a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000900e:	eb 9c                	jmp    c0008fac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009010:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009014:	e8 03 de ff ff       	call   c0006e1c <Phys::allocatePage()>
c0009019:	83 ec 0c             	sub    esp,0xc
c000901c:	89 c5                	mov    ebp,eax
c000901e:	8b 0d 54 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020554
c0009024:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009028:	6a 01                	push   0x1
c000902a:	e8 4e f5 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c000902f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009036:	6a 01                	push   0x1
c0009038:	50                   	push   eax
c0009039:	55                   	push   ebp
c000903a:	81 cd 07 04 00 00    	or     ebp,0x407
c0009040:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009044:	51                   	push   ecx
c0009045:	e8 7e fe ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000904a:	83 c4 1c             	add    esp,0x1c
c000904d:	68 00 10 00 00       	push   0x1000
c0009052:	6a 00                	push   0x0
c0009054:	50                   	push   eax
c0009055:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009059:	e8 4a 74 ff ff       	call   c00004a8 <memset>
c000905e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009062:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009065:	e8 07 f8 ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c000906a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009073:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009077:	e9 47 ff ff ff       	jmp    c0008fc3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000907c <VAS::VAS(bool)>:
c000907c:	53                   	push   ebx
c000907d:	83 ec 28             	sub    esp,0x28
c0009080:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009084:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000908c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009097:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000909e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090a2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00090a6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00090a9:	e8 6e dd ff ff       	call   c0006e1c <Phys::allocatePage()>
c00090ae:	89 c2                	mov    edx,eax
c00090b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090b4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00090b7:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c00090bd:	83 ec 0c             	sub    esp,0xc
c00090c0:	6a 01                	push   0x1
c00090c2:	e8 b6 f4 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	89 c2                	mov    edx,eax
c00090cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00090d3:	83 ec 0c             	sub    esp,0xc
c00090d6:	6a 03                	push   0x3
c00090d8:	6a 01                	push   0x1
c00090da:	52                   	push   edx
c00090db:	50                   	push   eax
c00090dc:	53                   	push   ebx
c00090dd:	e8 e6 fd ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00090e2:	83 c4 20             	add    esp,0x20
c00090e5:	89 c2                	mov    edx,eax
c00090e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00090ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00090f6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00090fe:	7f 1c                	jg     c000911c <VAS::VAS(bool)+0xa0>
c0009100:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009104:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009107:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000910b:	c1 e2 02             	shl    edx,0x2
c000910e:	01 d0                	add    eax,edx
c0009110:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009116:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000911a:	eb da                	jmp    c00090f6 <VAS::VAS(bool)+0x7a>
c000911c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009124:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000912c:	7f 7a                	jg     c00091a8 <VAS::VAS(bool)+0x12c>
c000912e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009132:	2d 00 02 00 00       	sub    eax,0x200
c0009137:	c1 e0 0c             	shl    eax,0xc
c000913a:	83 c8 03             	or     eax,0x3
c000913d:	89 c2                	mov    edx,eax
c000913f:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0009144:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000914a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009150:	83 e0 10             	and    eax,0x10
c0009153:	84 c0                	test   al,al
c0009155:	74 07                	je     c000915e <VAS::VAS(bool)+0xe2>
c0009157:	b8 00 01 00 00       	mov    eax,0x100
c000915c:	eb 05                	jmp    c0009163 <VAS::VAS(bool)+0xe7>
c000915e:	b8 00 00 00 00       	mov    eax,0x0
c0009163:	09 d0                	or     eax,edx
c0009165:	89 c1                	mov    ecx,eax
c0009167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000916b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000916e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009172:	c1 e2 02             	shl    edx,0x2
c0009175:	01 d0                	add    eax,edx
c0009177:	89 ca                	mov    edx,ecx
c0009179:	89 10                	mov    DWORD PTR [eax],edx
c000917b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000917f:	2d 40 03 00 00       	sub    eax,0x340
c0009184:	83 f8 7f             	cmp    eax,0x7f
c0009187:	77 16                	ja     c000919f <VAS::VAS(bool)+0x123>
c0009189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000918d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009194:	c1 e2 02             	shl    edx,0x2
c0009197:	01 d0                	add    eax,edx
c0009199:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000919f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00091a3:	e9 7c ff ff ff       	jmp    c0009124 <VAS::VAS(bool)+0xa8>
c00091a8:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c00091ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00091b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00091b9:	83 e0 10             	and    eax,0x10
c00091bc:	84 c0                	test   al,al
c00091be:	74 07                	je     c00091c7 <VAS::VAS(bool)+0x14b>
c00091c0:	b8 03 41 00 00       	mov    eax,0x4103
c00091c5:	eb 05                	jmp    c00091cc <VAS::VAS(bool)+0x150>
c00091c7:	b8 03 40 00 00       	mov    eax,0x4003
c00091cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00091d3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00091d9:	89 02                	mov    DWORD PTR [edx],eax
c00091db:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c00091e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00091e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00091ec:	83 ec 08             	sub    esp,0x8
c00091ef:	50                   	push   eax
c00091f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00091f4:	e8 b3 fc ff ff       	call   c0008eac <VAS::setCPUSpecific(unsigned long)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009200:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009203:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0009208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000920e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009214:	83 e0 10             	and    eax,0x10
c0009217:	84 c0                	test   al,al
c0009219:	74 07                	je     c0009222 <VAS::VAS(bool)+0x1a6>
c000921b:	b8 00 01 00 00       	mov    eax,0x100
c0009220:	eb 05                	jmp    c0009227 <VAS::VAS(bool)+0x1ab>
c0009222:	b8 00 00 00 00       	mov    eax,0x0
c0009227:	09 c2                	or     edx,eax
c0009229:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000922d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009230:	05 fc 0f 00 00       	add    eax,0xffc
c0009235:	83 ca 03             	or     edx,0x3
c0009238:	89 10                	mov    DWORD PTR [eax],edx
c000923a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000923f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009245:	83 ec 0c             	sub    esp,0xc
c0009248:	50                   	push   eax
c0009249:	e8 48 1c 00 00       	call   c000ae96 <Device::getName()>
c000924e:	83 c4 10             	add    esp,0x10
c0009251:	83 ec 08             	sub    esp,0x8
c0009254:	68 0f e0 01 c0       	push   0xc001e00f
c0009259:	50                   	push   eax
c000925a:	e8 91 73 ff ff       	call   c00005f0 <strcmp>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	85 c0                	test   eax,eax
c0009264:	0f 94 c0             	sete   al
c0009267:	84 c0                	test   al,al
c0009269:	0f 84 87 00 00 00    	je     c00092f6 <VAS::VAS(bool)+0x27a>
c000926f:	fa                   	cli    
c0009270:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0009275:	40                   	inc    eax
c0009276:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000927b:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0009280:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009286:	05 7c 09 00 00       	add    eax,0x97c
c000928b:	83 ec 0c             	sub    esp,0xc
c000928e:	50                   	push   eax
c000928f:	e8 be d2 ff ff       	call   c0006552 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009294:	83 c4 10             	add    esp,0x10
c0009297:	25 00 f0 ff ff       	and    eax,0xfffff000
c000929c:	89 c3                	mov    ebx,eax
c000929e:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c00092a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00092a9:	05 7c 09 00 00       	add    eax,0x97c
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	50                   	push   eax
c00092b2:	e8 9b d2 ff ff       	call   c0006552 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00092b7:	83 c4 10             	add    esp,0x10
c00092ba:	83 ec 08             	sub    esp,0x8
c00092bd:	50                   	push   eax
c00092be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00092c2:	e8 8b f5 ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c00092c7:	83 c4 10             	add    esp,0x10
c00092ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00092cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00092d1:	6a 11                	push   0x11
c00092d3:	53                   	push   ebx
c00092d4:	50                   	push   eax
c00092d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00092d9:	e8 f2 f8 ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00092e6:	48                   	dec    eax
c00092e7:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00092ec:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 01                	jne    c00092f6 <VAS::VAS(bool)+0x27a>
c00092f5:	fb                   	sti    
c00092f6:	90                   	nop
c00092f7:	83 c4 28             	add    esp,0x28
c00092fa:	5b                   	pop    ebx
c00092fb:	c3                   	ret    

c00092fc <VAS::VAS()>:
c00092fc:	53                   	push   ebx
c00092fd:	83 ec 18             	sub    esp,0x18
c0009300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009304:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000930b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000930f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000931a:	a3 54 05 02 c0       	mov    ds:0xc0020554,eax
c000931f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009323:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000932b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000932e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009332:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009339:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c0009341:	83 ec 0c             	sub    esp,0xc
c0009344:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009348:	e8 08 d7 ff ff       	call   c0006a55 <malloc>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 c3                	mov    ebx,eax
c0009352:	83 ec 08             	sub    esp,0x8
c0009355:	6a 01                	push   0x1
c0009357:	53                   	push   ebx
c0009358:	e8 1f fd ff ff       	call   c000907c <VAS::VAS(bool)>
c000935d:	83 c4 10             	add    esp,0x10
c0009360:	89 1d 4c 05 02 c0    	mov    DWORD PTR ds:0xc002054c,ebx
c0009366:	90                   	nop
c0009367:	83 c4 18             	add    esp,0x18
c000936a:	5b                   	pop    ebx
c000936b:	c3                   	ret    

c000936c <VAS::evict(unsigned long)>:
c000936c:	55                   	push   ebp
c000936d:	57                   	push   edi
c000936e:	56                   	push   esi
c000936f:	53                   	push   ebx
c0009370:	83 ec 1c             	sub    esp,0x1c
c0009373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009377:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	e8 3a f3 ff ff       	call   c00086be <Virt::allocateSwapfilePage()>
c0009384:	89 c7                	mov    edi,eax
c0009386:	a1 0c fe 01 c0       	mov    eax,ds:0xc001fe0c
c000938b:	85 c0                	test   eax,eax
c000938d:	7e 3d                	jle    c00093cc <VAS::evict(unsigned long)+0x60>
c000938f:	89 ee                	mov    esi,ebp
c0009391:	31 db                	xor    ebx,ebx
c0009393:	83 ec 0c             	sub    esp,0xc
c0009396:	57                   	push   edi
c0009397:	e8 10 f3 ff ff       	call   c00086ac <Virt::swapIDToSector(unsigned long)>
c000939c:	89 34 24             	mov    DWORD PTR [esp],esi
c000939f:	01 d8                	add    eax,ebx
c00093a1:	6a 01                	push   0x1
c00093a3:	31 d2                	xor    edx,edx
c00093a5:	43                   	inc    ebx
c00093a6:	52                   	push   edx
c00093a7:	81 c6 00 02 00 00    	add    esi,0x200
c00093ad:	50                   	push   eax
c00093ae:	0f be 05 18 fe 01 c0 	movsx  eax,BYTE PTR ds:0xc001fe18
c00093b5:	ff 34 85 dc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd724]
c00093bc:	e8 2d 2b 00 00       	call   c000beee <LogicalDisk::write(unsigned long long, int, void*)>
c00093c1:	83 c4 20             	add    esp,0x20
c00093c4:	39 1d 0c fe 01 c0    	cmp    DWORD PTR ds:0xc001fe0c,ebx
c00093ca:	7f c7                	jg     c0009393 <VAS::evict(unsigned long)+0x27>
c00093cc:	83 ec 08             	sub    esp,0x8
c00093cf:	c1 e7 0b             	shl    edi,0xb
c00093d2:	55                   	push   ebp
c00093d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093d7:	e8 76 f4 ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c00093dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00093de:	89 d1                	mov    ecx,edx
c00093e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00093e6:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00093ec:	09 cf                	or     edi,ecx
c00093ee:	89 38                	mov    DWORD PTR [eax],edi
c00093f0:	89 14 24             	mov    DWORD PTR [esp],edx
c00093f3:	ff 05 48 05 02 c0    	inc    DWORD PTR ds:0xc0020548
c00093f9:	e8 bc d9 ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c00093fe:	0f 20 d8             	mov    eax,cr3
c0009401:	0f 22 d8             	mov    cr3,eax
c0009404:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c0009409:	c7 44 24 40 1d e0 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e01d
c0009411:	8d 50 01             	lea    edx,[eax+0x1]
c0009414:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009418:	89 15 44 05 02 c0    	mov    DWORD PTR ds:0xc0020544,edx
c000941e:	83 c4 2c             	add    esp,0x2c
c0009421:	5b                   	pop    ebx
c0009422:	5e                   	pop    esi
c0009423:	5f                   	pop    edi
c0009424:	5d                   	pop    ebp
c0009425:	e9 b5 03 00 00       	jmp    c00097df <Dbg::kprintf(char const*, ...)>

c000942a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000942a:	55                   	push   ebp
c000942b:	57                   	push   edi
c000942c:	56                   	push   esi
c000942d:	53                   	push   ebx
c000942e:	83 ec 14             	sub    esp,0x14
c0009431:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009435:	53                   	push   ebx
c0009436:	68 2e e0 01 c0       	push   0xc001e02e
c000943b:	e8 9f 03 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0009440:	83 c4 10             	add    esp,0x10
c0009443:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009449:	74 20                	je     c000946b <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c000944b:	83 ec 08             	sub    esp,0x8
c000944e:	53                   	push   ebx
c000944f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009453:	e8 fa f3 ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	89 c6                	mov    esi,eax
c000945d:	85 c0                	test   eax,eax
c000945f:	74 0a                	je     c000946b <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0009461:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009463:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009469:	74 0a                	je     c0009475 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000946b:	31 c0                	xor    eax,eax
c000946d:	83 c4 0c             	add    esp,0xc
c0009470:	5b                   	pop    ebx
c0009471:	5e                   	pop    esi
c0009472:	5f                   	pop    edi
c0009473:	5d                   	pop    ebp
c0009474:	c3                   	ret    
c0009475:	e8 a2 d9 ff ff       	call   c0006e1c <Phys::allocatePage()>
c000947a:	c1 ed 0b             	shr    ebp,0xb
c000947d:	8b 16                	mov    edx,DWORD PTR [esi]
c000947f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0009485:	09 c2                	or     edx,eax
c0009487:	81 ca 01 08 00 00    	or     edx,0x801
c000948d:	89 16                	mov    DWORD PTR [esi],edx
c000948f:	8b 0d 0c fe 01 c0    	mov    ecx,DWORD PTR ds:0xc001fe0c
c0009495:	85 c9                	test   ecx,ecx
c0009497:	7e 3d                	jle    c00094d6 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0009499:	89 df                	mov    edi,ebx
c000949b:	31 f6                	xor    esi,esi
c000949d:	83 ec 0c             	sub    esp,0xc
c00094a0:	55                   	push   ebp
c00094a1:	e8 06 f2 ff ff       	call   c00086ac <Virt::swapIDToSector(unsigned long)>
c00094a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00094a9:	01 f0                	add    eax,esi
c00094ab:	6a 01                	push   0x1
c00094ad:	31 d2                	xor    edx,edx
c00094af:	46                   	inc    esi
c00094b0:	52                   	push   edx
c00094b1:	81 c7 00 02 00 00    	add    edi,0x200
c00094b7:	50                   	push   eax
c00094b8:	0f be 05 18 fe 01 c0 	movsx  eax,BYTE PTR ds:0xc001fe18
c00094bf:	ff 34 85 dc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd724]
c00094c6:	e8 b7 29 00 00       	call   c000be82 <LogicalDisk::read(unsigned long long, int, void*)>
c00094cb:	83 c4 20             	add    esp,0x20
c00094ce:	39 35 0c fe 01 c0    	cmp    DWORD PTR ds:0xc001fe0c,esi
c00094d4:	7f c7                	jg     c000949d <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c00094d6:	a1 48 05 02 c0       	mov    eax,ds:0xc0020548
c00094db:	48                   	dec    eax
c00094dc:	52                   	push   edx
c00094dd:	a3 48 05 02 c0       	mov    ds:0xc0020548,eax
c00094e2:	50                   	push   eax
c00094e3:	53                   	push   ebx
c00094e4:	68 41 e0 01 c0       	push   0xc001e041
c00094e9:	e8 f1 02 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00094ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094f1:	e8 98 f1 ff ff       	call   c000868e <Virt::freeSwapfilePage(unsigned long)>
c00094f6:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00094fb:	83 c4 10             	add    esp,0x10
c00094fe:	48                   	dec    eax
c00094ff:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0009504:	85 c0                	test   eax,eax
c0009506:	75 01                	jne    c0009509 <VAS::tryLoadBackOffDisk(unsigned long)+0xdf>
c0009508:	fb                   	sti    
c0009509:	0f 20 d8             	mov    eax,cr3
c000950c:	0f 22 d8             	mov    cr3,eax
c000950f:	b0 01                	mov    al,0x1
c0009511:	e9 57 ff ff ff       	jmp    c000946d <VAS::tryLoadBackOffDisk(unsigned long)+0x43>

c0009516 <VAS::scanForEviction()>:
c0009516:	57                   	push   edi
c0009517:	31 ff                	xor    edi,edi
c0009519:	56                   	push   esi
c000951a:	53                   	push   ebx
c000951b:	83 ec 10             	sub    esp,0x10
c000951e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009522:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009525:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000952b:	75 0e                	jne    c000953b <VAS::scanForEviction()+0x25>
c000952d:	89 da                	mov    edx,ebx
c000952f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009532:	c1 ea 16             	shr    edx,0x16
c0009535:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009539:	74 4e                	je     c0009589 <VAS::scanForEviction()+0x73>
c000953b:	53                   	push   ebx
c000953c:	56                   	push   esi
c000953d:	e8 10 f3 ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c0009542:	5a                   	pop    edx
c0009543:	8b 10                	mov    edx,DWORD PTR [eax]
c0009545:	59                   	pop    ecx
c0009546:	89 d1                	mov    ecx,edx
c0009548:	81 e1 01 08 00 00    	and    ecx,0x801
c000954e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009554:	74 3e                	je     c0009594 <VAS::scanForEviction()+0x7e>
c0009556:	81 c3 00 10 00 00    	add    ebx,0x1000
c000955c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009562:	76 2b                	jbe    c000958f <VAS::scanForEviction()+0x79>
c0009564:	47                   	inc    edi
c0009565:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000956c:	83 ff 03             	cmp    edi,0x3
c000956f:	74 32                	je     c00095a3 <VAS::scanForEviction()+0x8d>
c0009571:	31 db                	xor    ebx,ebx
c0009573:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009579:	75 c0                	jne    c000953b <VAS::scanForEviction()+0x25>
c000957b:	89 da                	mov    edx,ebx
c000957d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009580:	c1 ea 16             	shr    edx,0x16
c0009583:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009587:	75 b2                	jne    c000953b <VAS::scanForEviction()+0x25>
c0009589:	81 c3 00 00 40 00    	add    ebx,0x400000
c000958f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0009592:	eb 91                	jmp    c0009525 <VAS::scanForEviction()+0xf>
c0009594:	f6 c2 20             	test   dl,0x20
c0009597:	74 13                	je     c00095ac <VAS::scanForEviction()+0x96>
c0009599:	83 e2 df             	and    edx,0xffffffdf
c000959c:	89 10                	mov    DWORD PTR [eax],edx
c000959e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00095a1:	eb b3                	jmp    c0009556 <VAS::scanForEviction()+0x40>
c00095a3:	83 c4 10             	add    esp,0x10
c00095a6:	31 c0                	xor    eax,eax
c00095a8:	5b                   	pop    ebx
c00095a9:	5e                   	pop    esi
c00095aa:	5f                   	pop    edi
c00095ab:	c3                   	ret    
c00095ac:	83 ec 08             	sub    esp,0x8
c00095af:	89 d0                	mov    eax,edx
c00095b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00095ba:	53                   	push   ebx
c00095bb:	68 56 e0 01 c0       	push   0xc001e056
c00095c0:	e8 1a 02 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00095c5:	58                   	pop    eax
c00095c6:	5a                   	pop    edx
c00095c7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00095ca:	56                   	push   esi
c00095cb:	e8 9c fd ff ff       	call   c000936c <VAS::evict(unsigned long)>
c00095d0:	59                   	pop    ecx
c00095d1:	5b                   	pop    ebx
c00095d2:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00095d5:	68 6a e0 01 c0       	push   0xc001e06a
c00095da:	e8 00 02 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00095df:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00095e6:	83 c4 10             	add    esp,0x10
c00095e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095ed:	83 c4 10             	add    esp,0x10
c00095f0:	5b                   	pop    ebx
c00095f1:	5e                   	pop    esi
c00095f2:	5f                   	pop    edi
c00095f3:	c3                   	ret    

c00095f4 <mapVASFirstTime>:
c00095f4:	55                   	push   ebp
c00095f5:	57                   	push   edi
c00095f6:	56                   	push   esi
c00095f7:	53                   	push   ebx
c00095f8:	83 ec 0c             	sub    esp,0xc
c00095fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009600:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009603:	4a                   	dec    edx
c0009604:	0f 84 8c 00 00 00    	je     c0009696 <mapVASFirstTime+0xa2>
c000960a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000960d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009610:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009615:	c1 e5 15             	shl    ebp,0x15
c0009618:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000961d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009623:	29 eb                	sub    ebx,ebp
c0009625:	29 ef                	sub    edi,ebp
c0009627:	e8 f0 d7 ff ff       	call   c0006e1c <Phys::allocatePage()>
c000962c:	83 ec 0c             	sub    esp,0xc
c000962f:	68 03 04 00 00       	push   0x403
c0009634:	6a 01                	push   0x1
c0009636:	53                   	push   ebx
c0009637:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000963d:	50                   	push   eax
c000963e:	56                   	push   esi
c000963f:	e8 84 f8 ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009644:	83 c4 20             	add    esp,0x20
c0009647:	39 fb                	cmp    ebx,edi
c0009649:	75 dc                	jne    c0009627 <mapVASFirstTime+0x33>
c000964b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009650:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009655:	29 eb                	sub    ebx,ebp
c0009657:	29 ef                	sub    edi,ebp
c0009659:	e8 be d7 ff ff       	call   c0006e1c <Phys::allocatePage()>
c000965e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009662:	19 d2                	sbb    edx,edx
c0009664:	83 ec 0c             	sub    esp,0xc
c0009667:	83 e2 04             	and    edx,0x4
c000966a:	81 c2 03 04 00 00    	add    edx,0x403
c0009670:	52                   	push   edx
c0009671:	6a 01                	push   0x1
c0009673:	53                   	push   ebx
c0009674:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000967a:	50                   	push   eax
c000967b:	56                   	push   esi
c000967c:	e8 47 f8 ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	39 df                	cmp    edi,ebx
c0009686:	75 d1                	jne    c0009659 <mapVASFirstTime+0x65>
c0009688:	0f 20 d8             	mov    eax,cr3
c000968b:	0f 22 d8             	mov    cr3,eax
c000968e:	83 c4 0c             	add    esp,0xc
c0009691:	5b                   	pop    ebx
c0009692:	5e                   	pop    esi
c0009693:	5f                   	pop    edi
c0009694:	5d                   	pop    ebp
c0009695:	c3                   	ret    
c0009696:	83 ec 0c             	sub    esp,0xc
c0009699:	68 7d e0 01 c0       	push   0xc001e07d
c000969e:	e8 3c 01 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	83 c4 0c             	add    esp,0xc
c00096a9:	5b                   	pop    ebx
c00096aa:	5e                   	pop    esi
c00096ab:	5f                   	pop    edi
c00096ac:	5d                   	pop    ebp
c00096ad:	c3                   	ret    

c00096ae <__cxa_atexit>:
c00096ae:	31 c0                	xor    eax,eax
c00096b0:	c3                   	ret    

c00096b1 <__cxa_finalize>:
c00096b1:	c3                   	ret    

c00096b2 <__stack_chk_fail>:
c00096b2:	55                   	push   ebp
c00096b3:	89 e5                	mov    ebp,esp
c00096b5:	83 ec 10             	sub    esp,0x10
c00096b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00096bb:	68 96 e0 01 c0       	push   0xc001e096
c00096c0:	e8 1a 01 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00096c5:	58                   	pop    eax
c00096c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00096c9:	5a                   	pop    edx
c00096ca:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096cd:	68 96 e0 01 c0       	push   0xc001e096
c00096d2:	e8 08 01 00 00       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00096d7:	c7 04 24 9e e0 01 c0 	mov    DWORD PTR [esp],0xc001e09e
c00096de:	e8 d2 5d 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00096e3:	83 c4 10             	add    esp,0x10
c00096e6:	c9                   	leave  
c00096e7:	c3                   	ret    

c00096e8 <__cxa_pure_virtual>:
c00096e8:	83 ec 18             	sub    esp,0x18
c00096eb:	68 b6 e0 01 c0       	push   0xc001e0b6
c00096f0:	e8 c0 5d 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c00096f5:	83 c4 1c             	add    esp,0x1c
c00096f8:	c3                   	ret    

c00096f9 <operator new[](unsigned long)>:
c00096f9:	e9 57 d3 ff ff       	jmp    c0006a55 <malloc>

c00096fe <operator delete(void*, unsigned long)>:
c00096fe:	e9 72 d3 ff ff       	jmp    c0006a75 <rfree>

c0009703 <operator delete[](void*)>:
c0009703:	e9 6d d3 ff ff       	jmp    c0006a75 <rfree>

c0009708 <operator delete[](void*, unsigned long)>:
c0009708:	e9 68 d3 ff ff       	jmp    c0006a75 <rfree>

c000970d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000970d:	55                   	push   ebp
c000970e:	b9 11 00 00 00       	mov    ecx,0x11
c0009713:	57                   	push   edi
c0009714:	56                   	push   esi
c0009715:	be ca dc 01 c0       	mov    esi,0xc001dcca
c000971a:	53                   	push   ebx
c000971b:	83 ec 20             	sub    esp,0x20
c000971e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009722:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009726:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000972a:	fc                   	cld    
c000972b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000972d:	89 ee                	mov    esi,ebp
c000972f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009733:	eb 02                	jmp    c0009737 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0009735:	89 c6                	mov    esi,eax
c0009737:	31 d2                	xor    edx,edx
c0009739:	41                   	inc    ecx
c000973a:	89 f0                	mov    eax,esi
c000973c:	f7 f3                	div    ebx
c000973e:	39 de                	cmp    esi,ebx
c0009740:	73 f3                	jae    c0009735 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0009742:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009745:	eb 02                	jmp    c0009749 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009747:	89 c5                	mov    ebp,eax
c0009749:	31 d2                	xor    edx,edx
c000974b:	49                   	dec    ecx
c000974c:	89 e8                	mov    eax,ebp
c000974e:	f7 f3                	div    ebx
c0009750:	39 dd                	cmp    ebp,ebx
c0009752:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009756:	88 11                	mov    BYTE PTR [ecx],dl
c0009758:	73 ed                	jae    c0009747 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000975a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	5b                   	pop    ebx
c0009762:	5e                   	pop    esi
c0009763:	5f                   	pop    edi
c0009764:	5d                   	pop    ebp
c0009765:	c3                   	ret    

c0009766 <Dbg::logc(char)>:
c0009766:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000976a:	f6 05 80 04 02 c0 10 	test   BYTE PTR ds:0xc0020480,0x10
c0009771:	75 12                	jne    c0009785 <Dbg::logc(char)+0x1f>
c0009773:	ba fd 03 00 00       	mov    edx,0x3fd
c0009778:	ec                   	in     al,dx
c0009779:	a8 20                	test   al,0x20
c000977b:	74 fb                	je     c0009778 <Dbg::logc(char)+0x12>
c000977d:	ba f8 03 00 00       	mov    edx,0x3f8
c0009782:	88 c8                	mov    al,cl
c0009784:	ee                   	out    dx,al
c0009785:	c3                   	ret    

c0009786 <Dbg::logs(char*)>:
c0009786:	53                   	push   ebx
c0009787:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000978b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000978e:	84 c0                	test   al,al
c0009790:	74 0f                	je     c00097a1 <Dbg::logs(char*)+0x1b>
c0009792:	50                   	push   eax
c0009793:	43                   	inc    ebx
c0009794:	e8 cd ff ff ff       	call   c0009766 <Dbg::logc(char)>
c0009799:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000979c:	5a                   	pop    edx
c000979d:	84 c0                	test   al,al
c000979f:	75 f1                	jne    c0009792 <Dbg::logs(char*)+0xc>
c00097a1:	5b                   	pop    ebx
c00097a2:	c3                   	ret    

c00097a3 <Dbg::logWriteInt(unsigned int)>:
c00097a3:	83 ec 10             	sub    esp,0x10
c00097a6:	6a 0a                	push   0xa
c00097a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00097ac:	50                   	push   eax
c00097ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097b1:	e8 57 ff ff ff       	call   c000970d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00097b6:	50                   	push   eax
c00097b7:	e8 ca ff ff ff       	call   c0009786 <Dbg::logs(char*)>
c00097bc:	83 c4 20             	add    esp,0x20
c00097bf:	c3                   	ret    

c00097c0 <Dbg::logWriteIntBase(unsigned int, int)>:
c00097c0:	83 ec 10             	sub    esp,0x10
c00097c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00097c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00097cb:	50                   	push   eax
c00097cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d0:	e8 38 ff ff ff       	call   c000970d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00097d5:	50                   	push   eax
c00097d6:	e8 ab ff ff ff       	call   c0009786 <Dbg::logs(char*)>
c00097db:	83 c4 20             	add    esp,0x20
c00097de:	c3                   	ret    

c00097df <Dbg::kprintf(char const*, ...)>:
c00097df:	55                   	push   ebp
c00097e0:	57                   	push   edi
c00097e1:	56                   	push   esi
c00097e2:	53                   	push   ebx
c00097e3:	83 ec 0c             	sub    esp,0xc
c00097e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00097ea:	f6 05 80 04 02 c0 10 	test   BYTE PTR ds:0xc0020480,0x10
c00097f1:	74 08                	je     c00097fb <Dbg::kprintf(char const*, ...)+0x1c>
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    
c00097fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00097ff:	31 db                	xor    ebx,ebx
c0009801:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009805:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009808:	84 c0                	test   al,al
c000980a:	74 e7                	je     c00097f3 <Dbg::kprintf(char const*, ...)+0x14>
c000980c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000980f:	3c 25                	cmp    al,0x25
c0009811:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0009814:	75 44                	jne    c000985a <Dbg::kprintf(char const*, ...)+0x7b>
c0009816:	83 c3 02             	add    ebx,0x2
c0009819:	8a 07                	mov    al,BYTE PTR [edi]
c000981b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000981e:	83 e8 25             	sub    eax,0x25
c0009821:	3c 53                	cmp    al,0x53
c0009823:	0f 87 c9 00 00 00    	ja     c00098f2 <Dbg::kprintf(char const*, ...)+0x113>
c0009829:	0f b6 c0             	movzx  eax,al
c000982c:	ff 24 85 cc e0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1f34]
c0009833:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009837:	89 c8                	mov    eax,ecx
c0009839:	83 c1 04             	add    ecx,0x4
c000983c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009840:	ff 30                	push   DWORD PTR [eax]
c0009842:	e8 5c ff ff ff       	call   c00097a3 <Dbg::logWriteInt(unsigned int)>
c0009847:	5f                   	pop    edi
c0009848:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000984c:	84 c0                	test   al,al
c000984e:	74 a3                	je     c00097f3 <Dbg::kprintf(char const*, ...)+0x14>
c0009850:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009853:	3c 25                	cmp    al,0x25
c0009855:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0009858:	74 bc                	je     c0009816 <Dbg::kprintf(char const*, ...)+0x37>
c000985a:	50                   	push   eax
c000985b:	89 eb                	mov    ebx,ebp
c000985d:	e8 04 ff ff ff       	call   c0009766 <Dbg::logc(char)>
c0009862:	89 fd                	mov    ebp,edi
c0009864:	58                   	pop    eax
c0009865:	eb e1                	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c0009867:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000986b:	89 c8                	mov    eax,ecx
c000986d:	83 c1 04             	add    ecx,0x4
c0009870:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009874:	ff 30                	push   DWORD PTR [eax]
c0009876:	e8 0b ff ff ff       	call   c0009786 <Dbg::logs(char*)>
c000987b:	58                   	pop    eax
c000987c:	eb ca                	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c000987e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009882:	89 d0                	mov    eax,edx
c0009884:	83 c2 04             	add    edx,0x4
c0009887:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000988b:	ff 30                	push   DWORD PTR [eax]
c000988d:	e8 11 ff ff ff       	call   c00097a3 <Dbg::logWriteInt(unsigned int)>
c0009892:	58                   	pop    eax
c0009893:	eb b3                	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c0009895:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009899:	89 d0                	mov    eax,edx
c000989b:	83 c2 04             	add    edx,0x4
c000989e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00098a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00098a5:	50                   	push   eax
c00098a6:	e8 bb fe ff ff       	call   c0009766 <Dbg::logc(char)>
c00098ab:	58                   	pop    eax
c00098ac:	eb 9a                	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c00098ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00098b2:	89 c8                	mov    eax,ecx
c00098b4:	83 c1 04             	add    ecx,0x4
c00098b7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00098bb:	6a 10                	push   0x10
c00098bd:	ff 30                	push   DWORD PTR [eax]
c00098bf:	e8 fc fe ff ff       	call   c00097c0 <Dbg::logWriteIntBase(unsigned int, int)>
c00098c4:	59                   	pop    ecx
c00098c5:	5f                   	pop    edi
c00098c6:	eb 80                	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c00098c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098cc:	89 d0                	mov    eax,edx
c00098ce:	83 c2 08             	add    edx,0x8
c00098d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00098d5:	6a 10                	push   0x10
c00098d7:	ff 30                	push   DWORD PTR [eax]
c00098d9:	e8 e2 fe ff ff       	call   c00097c0 <Dbg::logWriteIntBase(unsigned int, int)>
c00098de:	58                   	pop    eax
c00098df:	5a                   	pop    edx
c00098e0:	e9 63 ff ff ff       	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c00098e5:	6a 25                	push   0x25
c00098e7:	e8 7a fe ff ff       	call   c0009766 <Dbg::logc(char)>
c00098ec:	58                   	pop    eax
c00098ed:	e9 56 ff ff ff       	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c00098f2:	6a 25                	push   0x25
c00098f4:	e8 6d fe ff ff       	call   c0009766 <Dbg::logc(char)>
c00098f9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00098fc:	50                   	push   eax
c00098fd:	e8 64 fe ff ff       	call   c0009766 <Dbg::logc(char)>
c0009902:	5a                   	pop    edx
c0009903:	59                   	pop    ecx
c0009904:	e9 3f ff ff ff       	jmp    c0009848 <Dbg::kprintf(char const*, ...)+0x69>
c0009909:	90                   	nop

c000990a <File::read(unsigned long long, void*, int*)>:
c000990a:	53                   	push   ebx
c000990b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000990f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009913:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000991a:	3c 19                	cmp    al,0x19
c000991c:	77 35                	ja     c0009953 <File::read(unsigned long long, void*, int*)+0x49>
c000991e:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0009925:	85 c0                	test   eax,eax
c0009927:	74 2a                	je     c0009953 <File::read(unsigned long long, void*, int*)+0x49>
c0009929:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000992f:	85 c0                	test   eax,eax
c0009931:	74 20                	je     c0009953 <File::read(unsigned long long, void*, int*)+0x49>
c0009933:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009937:	74 21                	je     c000995a <File::read(unsigned long long, void*, int*)+0x50>
c0009939:	8b 08                	mov    ecx,DWORD PTR [eax]
c000993b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000993f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009949:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000994d:	5b                   	pop    ebx
c000994e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009951:	ff e0                	jmp    eax
c0009953:	b8 0b 00 00 00       	mov    eax,0xb
c0009958:	eb 05                	jmp    c000995f <File::read(unsigned long long, void*, int*)+0x55>
c000995a:	b8 05 00 00 00       	mov    eax,0x5
c000995f:	5b                   	pop    ebx
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <File::write(unsigned long long, void*, int*)>:
c0009962:	53                   	push   ebx
c0009963:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009967:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000996b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009972:	3c 19                	cmp    al,0x19
c0009974:	77 35                	ja     c00099ab <File::write(unsigned long long, void*, int*)+0x49>
c0009976:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c000997d:	85 c0                	test   eax,eax
c000997f:	74 2a                	je     c00099ab <File::write(unsigned long long, void*, int*)+0x49>
c0009981:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009987:	85 c0                	test   eax,eax
c0009989:	74 20                	je     c00099ab <File::write(unsigned long long, void*, int*)+0x49>
c000998b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000998f:	74 21                	je     c00099b2 <File::write(unsigned long long, void*, int*)+0x50>
c0009991:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009993:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009997:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000999d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099a5:	5b                   	pop    ebx
c00099a6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00099a9:	ff e0                	jmp    eax
c00099ab:	b8 0b 00 00 00       	mov    eax,0xb
c00099b0:	eb 05                	jmp    c00099b7 <File::write(unsigned long long, void*, int*)+0x55>
c00099b2:	b8 05 00 00 00       	mov    eax,0x5
c00099b7:	5b                   	pop    ebx
c00099b8:	c3                   	ret    
c00099b9:	90                   	nop

c00099ba <Directory::read(unsigned long long, void*, int*)>:
c00099ba:	53                   	push   ebx
c00099bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00099c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00099ca:	3c 19                	cmp    al,0x19
c00099cc:	77 35                	ja     c0009a03 <Directory::read(unsigned long long, void*, int*)+0x49>
c00099ce:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c00099d5:	85 c0                	test   eax,eax
c00099d7:	74 2a                	je     c0009a03 <Directory::read(unsigned long long, void*, int*)+0x49>
c00099d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00099df:	85 c0                	test   eax,eax
c00099e1:	74 20                	je     c0009a03 <Directory::read(unsigned long long, void*, int*)+0x49>
c00099e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00099e7:	74 21                	je     c0009a0a <Directory::read(unsigned long long, void*, int*)+0x50>
c00099e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00099eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00099ef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00099f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099fd:	5b                   	pop    ebx
c00099fe:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009a01:	ff e0                	jmp    eax
c0009a03:	b8 0b 00 00 00       	mov    eax,0xb
c0009a08:	eb 05                	jmp    c0009a0f <Directory::read(unsigned long long, void*, int*)+0x55>
c0009a0a:	b8 05 00 00 00       	mov    eax,0x5
c0009a0f:	5b                   	pop    ebx
c0009a10:	c3                   	ret    
c0009a11:	90                   	nop

c0009a12 <Directory::write(unsigned long long, void*, int*)>:
c0009a12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a16:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009a1d:	b8 0b 00 00 00       	mov    eax,0xb
c0009a22:	80 fa 19             	cmp    dl,0x19
c0009a25:	77 18                	ja     c0009a3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009a27:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0009a2e:	85 d2                	test   edx,edx
c0009a30:	74 0d                	je     c0009a3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009a32:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009a39:	19 c0                	sbb    eax,eax
c0009a3b:	83 e0 0a             	and    eax,0xa
c0009a3e:	40                   	inc    eax
c0009a3f:	c3                   	ret    

c0009a40 <File::isAtty()>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	c3                   	ret    
c0009a43:	90                   	nop

c0009a44 <Directory::isAtty()>:
c0009a44:	31 c0                	xor    eax,eax
c0009a46:	c3                   	ret    
c0009a47:	90                   	nop

c0009a48 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009a48:	b8 0a 00 00 00       	mov    eax,0xa
c0009a4d:	c3                   	ret    

c0009a4e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009a4e:	b8 0a 00 00 00       	mov    eax,0xa
c0009a53:	c3                   	ret    

c0009a54 <Filesystem::allocateSwapfile(char const*, int)>:
c0009a54:	31 c0                	xor    eax,eax
c0009a56:	31 d2                	xor    edx,edx
c0009a58:	c3                   	ret    
c0009a59:	90                   	nop

c0009a5a <File::~File()>:
c0009a5a:	83 ec 0c             	sub    esp,0xc
c0009a5d:	ba 8c e2 01 c0       	mov    edx,0xc001e28c
c0009a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a66:	89 10                	mov    DWORD PTR [eax],edx
c0009a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a6c:	83 ec 0c             	sub    esp,0xc
c0009a6f:	50                   	push   eax
c0009a70:	e8 a7 e8 ff ff       	call   c000831c <UnixFile::~UnixFile()>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	90                   	nop
c0009a79:	83 c4 0c             	add    esp,0xc
c0009a7c:	c3                   	ret    
c0009a7d:	90                   	nop

c0009a7e <File::~File()>:
c0009a7e:	83 ec 0c             	sub    esp,0xc
c0009a81:	83 ec 0c             	sub    esp,0xc
c0009a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a88:	e8 cd ff ff ff       	call   c0009a5a <File::~File()>
c0009a8d:	83 c4 10             	add    esp,0x10
c0009a90:	83 ec 08             	sub    esp,0x8
c0009a93:	68 14 01 00 00       	push   0x114
c0009a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a9c:	e8 5d fc ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0009aa1:	83 c4 10             	add    esp,0x10
c0009aa4:	83 c4 0c             	add    esp,0xc
c0009aa7:	c3                   	ret    

c0009aa8 <Directory::~Directory()>:
c0009aa8:	83 ec 0c             	sub    esp,0xc
c0009aab:	ba a8 e2 01 c0       	mov    edx,0xc001e2a8
c0009ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ab4:	89 10                	mov    DWORD PTR [eax],edx
c0009ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009aba:	83 ec 0c             	sub    esp,0xc
c0009abd:	50                   	push   eax
c0009abe:	e8 59 e8 ff ff       	call   c000831c <UnixFile::~UnixFile()>
c0009ac3:	83 c4 10             	add    esp,0x10
c0009ac6:	90                   	nop
c0009ac7:	83 c4 0c             	add    esp,0xc
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <Directory::~Directory()>:
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	83 ec 0c             	sub    esp,0xc
c0009ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad6:	e8 cd ff ff ff       	call   c0009aa8 <Directory::~Directory()>
c0009adb:	83 c4 10             	add    esp,0x10
c0009ade:	83 ec 08             	sub    esp,0x8
c0009ae1:	68 14 01 00 00       	push   0x114
c0009ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aea:	e8 0f fc ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0009aef:	83 c4 10             	add    esp,0x10
c0009af2:	83 c4 0c             	add    esp,0xc
c0009af5:	c3                   	ret    

c0009af6 <Filesystem::Filesystem()>:
c0009af6:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c0009afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aff:	89 10                	mov    DWORD PTR [eax],edx
c0009b01:	8b 15 58 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020558
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b12:	a3 58 05 02 c0       	mov    ds:0xc0020558,eax
c0009b17:	90                   	nop
c0009b18:	c3                   	ret    
c0009b19:	90                   	nop

c0009b1a <Filesystem::~Filesystem()>:
c0009b1a:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c0009b1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b23:	89 10                	mov    DWORD PTR [eax],edx
c0009b25:	90                   	nop
c0009b26:	c3                   	ret    
c0009b27:	90                   	nop

c0009b28 <Filesystem::~Filesystem()>:
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009b2f:	e8 e6 ff ff ff       	call   c0009b1a <Filesystem::~Filesystem()>
c0009b34:	83 c4 04             	add    esp,0x4
c0009b37:	83 ec 08             	sub    esp,0x8
c0009b3a:	6a 08                	push   0x8
c0009b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b40:	e8 b9 fb ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0009b45:	83 c4 10             	add    esp,0x10
c0009b48:	83 c4 0c             	add    esp,0xc
c0009b4b:	c3                   	ret    

c0009b4c <Fs::getcwd(Process*, char*, int)>:
c0009b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b50:	31 c0                	xor    eax,eax
c0009b52:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009b55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009b59:	7d 15                	jge    c0009b70 <Fs::getcwd(Process*, char*, int)+0x24>
c0009b5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b5f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009b66:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009b69:	84 c9                	test   cl,cl
c0009b6b:	74 06                	je     c0009b73 <Fs::getcwd(Process*, char*, int)+0x27>
c0009b6d:	40                   	inc    eax
c0009b6e:	eb e2                	jmp    c0009b52 <Fs::getcwd(Process*, char*, int)+0x6>
c0009b70:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009b73:	31 c0                	xor    eax,eax
c0009b75:	c3                   	ret    

c0009b76 <Fs::initVFS()>:
c0009b76:	83 ec 18             	sub    esp,0x18
c0009b79:	6a 08                	push   0x8
c0009b7b:	e8 d5 ce ff ff       	call   c0006a55 <malloc>
c0009b80:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b83:	e8 e0 d4 00 00       	call   c0017068 <FAT::FAT()>
c0009b88:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b8f:	e8 c1 ce ff ff       	call   c0006a55 <malloc>
c0009b94:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b97:	e8 60 e7 00 00       	call   c00182fc <ISO9660::ISO9660()>
c0009b9c:	83 c4 1c             	add    esp,0x1c
c0009b9f:	c3                   	ret    

c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009ba0:	55                   	push   ebp
c0009ba1:	57                   	push   edi
c0009ba2:	56                   	push   esi
c0009ba3:	53                   	push   ebx
c0009ba4:	81 ec 10 04 00 00    	sub    esp,0x410
c0009baa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009bb1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009bb8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009bbf:	68 00 04 00 00       	push   0x400
c0009bc4:	6a 00                	push   0x0
c0009bc6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009bca:	56                   	push   esi
c0009bcb:	e8 d8 68 ff ff       	call   c00004a8 <memset>
c0009bd0:	83 c4 10             	add    esp,0x10
c0009bd3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009bd7:	75 0b                	jne    c0009be4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009bd9:	50                   	push   eax
c0009bda:	50                   	push   eax
c0009bdb:	57                   	push   edi
c0009bdc:	56                   	push   esi
c0009bdd:	e8 82 69 ff ff       	call   c0000564 <strcpy>
c0009be2:	eb 41                	jmp    c0009c25 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009be4:	8a 07                	mov    al,BYTE PTR [edi]
c0009be6:	3c 5c                	cmp    al,0x5c
c0009be8:	74 04                	je     c0009bee <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009bea:	3c 2f                	cmp    al,0x2f
c0009bec:	75 18                	jne    c0009c06 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009bee:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009bf1:	3c 60                	cmp    al,0x60
c0009bf3:	7e 03                	jle    c0009bf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009bf5:	83 e8 20             	sub    eax,0x20
c0009bf8:	88 04 24             	mov    BYTE PTR [esp],al
c0009bfb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009c02:	50                   	push   eax
c0009c03:	50                   	push   eax
c0009c04:	eb 18                	jmp    c0009c1e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009c06:	50                   	push   eax
c0009c07:	50                   	push   eax
c0009c08:	55                   	push   ebp
c0009c09:	56                   	push   esi
c0009c0a:	e8 55 69 ff ff       	call   c0000564 <strcpy>
c0009c0f:	5a                   	pop    edx
c0009c10:	59                   	pop    ecx
c0009c11:	68 43 f0 01 c0       	push   0xc001f043
c0009c16:	56                   	push   esi
c0009c17:	e8 88 6a ff ff       	call   c00006a4 <strcat>
c0009c1c:	5d                   	pop    ebp
c0009c1d:	58                   	pop    eax
c0009c1e:	57                   	push   edi
c0009c1f:	56                   	push   esi
c0009c20:	e8 7f 6a ff ff       	call   c00006a4 <strcat>
c0009c25:	83 c4 10             	add    esp,0x10
c0009c28:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009c2b:	3c 60                	cmp    al,0x60
c0009c2d:	7e 03                	jle    c0009c32 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009c2f:	83 e8 20             	sub    eax,0x20
c0009c32:	88 04 24             	mov    BYTE PTR [esp],al
c0009c35:	88 03                	mov    BYTE PTR [ebx],al
c0009c37:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009c3e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009c44:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009c48:	bf 03 00 00 00       	mov    edi,0x3
c0009c4d:	b8 03 00 00 00       	mov    eax,0x3
c0009c52:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009c55:	84 d2                	test   dl,dl
c0009c57:	0f 84 91 00 00 00    	je     c0009cee <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009c5d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009c60:	80 fa 5c             	cmp    dl,0x5c
c0009c63:	74 05                	je     c0009c6a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009c65:	80 fa 2f             	cmp    dl,0x2f
c0009c68:	75 12                	jne    c0009c7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009c6a:	89 c5                	mov    ebp,eax
c0009c6c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009c71:	74 09                	je     c0009c7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009c73:	40                   	inc    eax
c0009c74:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009c78:	89 cf                	mov    edi,ecx
c0009c7a:	eb d6                	jmp    c0009c52 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009c7c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009c81:	75 5b                	jne    c0009cde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009c83:	80 fa 2e             	cmp    dl,0x2e
c0009c86:	75 56                	jne    c0009cde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009c88:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009c8c:	74 19                	je     c0009ca7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009c8e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009c93:	74 53                	je     c0009ce8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009c95:	89 f9                	mov    ecx,edi
c0009c97:	41                   	inc    ecx
c0009c98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009c9b:	80 fa 2f             	cmp    dl,0x2f
c0009c9e:	74 f7                	je     c0009c97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ca0:	80 fa 5c             	cmp    dl,0x5c
c0009ca3:	74 f2                	je     c0009c97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ca5:	eb d1                	jmp    c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ca7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009cac:	74 3a                	je     c0009ce8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009cae:	83 f8 03             	cmp    eax,0x3
c0009cb1:	74 c5                	je     c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009cb3:	41                   	inc    ecx
c0009cb4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009cb7:	80 fa 2f             	cmp    dl,0x2f
c0009cba:	74 f7                	je     c0009cb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009cbc:	80 fa 5c             	cmp    dl,0x5c
c0009cbf:	74 f2                	je     c0009cb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009cc1:	48                   	dec    eax
c0009cc2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009cc6:	75 06                	jne    c0009cce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009cc8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009ccc:	eb f3                	jmp    c0009cc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009cce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009cd2:	74 07                	je     c0009cdb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009cd4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009cd8:	48                   	dec    eax
c0009cd9:	eb f3                	jmp    c0009cce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009cdb:	40                   	inc    eax
c0009cdc:	eb 9a                	jmp    c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009cde:	80 fa 2f             	cmp    dl,0x2f
c0009ce1:	74 95                	je     c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ce3:	80 fa 5c             	cmp    dl,0x5c
c0009ce6:	74 90                	je     c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ce8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009ceb:	40                   	inc    eax
c0009cec:	eb 8a                	jmp    c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009cee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	53                   	push   ebx
c0009cf6:	e8 c9 67 ff ff       	call   c00004c4 <strlen>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009d03:	75 26                	jne    c0009d2b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009d05:	83 ec 0c             	sub    esp,0xc
c0009d08:	53                   	push   ebx
c0009d09:	e8 b6 67 ff ff       	call   c00004c4 <strlen>
c0009d0e:	83 c4 10             	add    esp,0x10
c0009d11:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009d16:	74 26                	je     c0009d3e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009d18:	83 ec 0c             	sub    esp,0xc
c0009d1b:	53                   	push   ebx
c0009d1c:	e8 a3 67 ff ff       	call   c00004c4 <strlen>
c0009d21:	83 c4 10             	add    esp,0x10
c0009d24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009d29:	eb c7                	jmp    c0009cf2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009d2b:	83 ec 0c             	sub    esp,0xc
c0009d2e:	53                   	push   ebx
c0009d2f:	e8 90 67 ff ff       	call   c00004c4 <strlen>
c0009d34:	83 c4 10             	add    esp,0x10
c0009d37:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009d3c:	74 c7                	je     c0009d05 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009d3e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009d44:	5b                   	pop    ebx
c0009d45:	5e                   	pop    esi
c0009d46:	5f                   	pop    edi
c0009d47:	5d                   	pop    ebp
c0009d48:	c3                   	ret    
c0009d49:	90                   	nop

c0009d4a <File::File(char const*, Process*)>:
c0009d4a:	83 ec 0c             	sub    esp,0xc
c0009d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d51:	83 ec 08             	sub    esp,0x8
c0009d54:	6a 00                	push   0x0
c0009d56:	50                   	push   eax
c0009d57:	e8 de e3 ff ff       	call   c000813a <UnixFile::UnixFile(int)>
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	ba 8c e2 01 c0       	mov    edx,0xc001e28c
c0009d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d68:	89 10                	mov    DWORD PTR [eax],edx
c0009d6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009d6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d78:	83 c0 0d             	add    eax,0xd
c0009d7b:	83 ec 04             	sub    esp,0x4
c0009d7e:	52                   	push   edx
c0009d7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d83:	50                   	push   eax
c0009d84:	e8 17 fe ff ff       	call   c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d90:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009d93:	8d 50 bf             	lea    edx,[eax-0x41]
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dac:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009db2:	0f b6 c0             	movzx  eax,al
c0009db5:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0009dbc:	85 c0                	test   eax,eax
c0009dbe:	74 3e                	je     c0009dfe <File::File(char const*, Process*)+0xb4>
c0009dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009dca:	0f b6 c0             	movzx  eax,al
c0009dcd:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0009dd4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009dda:	85 c0                	test   eax,eax
c0009ddc:	75 20                	jne    c0009dfe <File::File(char const*, Process*)+0xb4>
c0009dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009de8:	0f b6 c0             	movzx  eax,al
c0009deb:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0009df2:	83 ec 0c             	sub    esp,0xc
c0009df5:	50                   	push   eax
c0009df6:	e8 c5 1f 00 00       	call   c000bdc0 <LogicalDisk::mount()>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	90                   	nop
c0009dff:	83 c4 0c             	add    esp,0xc
c0009e02:	c3                   	ret    
c0009e03:	90                   	nop

c0009e04 <File::open(FileOpenMode)>:
c0009e04:	53                   	push   ebx
c0009e05:	b8 0b 00 00 00       	mov    eax,0xb
c0009e0a:	83 ec 08             	sub    esp,0x8
c0009e0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009e11:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009e18:	80 fa 19             	cmp    dl,0x19
c0009e1b:	77 40                	ja     c0009e5d <File::open(FileOpenMode)+0x59>
c0009e1d:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0009e24:	85 d2                	test   edx,edx
c0009e26:	74 35                	je     c0009e5d <File::open(FileOpenMode)+0x59>
c0009e28:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009e2e:	85 d2                	test   edx,edx
c0009e30:	74 2b                	je     c0009e5d <File::open(FileOpenMode)+0x59>
c0009e32:	b8 06 00 00 00       	mov    eax,0x6
c0009e37:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009e3b:	75 20                	jne    c0009e5d <File::open(FileOpenMode)+0x59>
c0009e3d:	8b 02                	mov    eax,DWORD PTR [edx]
c0009e3f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009e45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e49:	51                   	push   ecx
c0009e4a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009e4d:	51                   	push   ecx
c0009e4e:	52                   	push   edx
c0009e4f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009e52:	83 c4 10             	add    esp,0x10
c0009e55:	85 c0                	test   eax,eax
c0009e57:	75 04                	jne    c0009e5d <File::open(FileOpenMode)+0x59>
c0009e59:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009e5d:	83 c4 08             	add    esp,0x8
c0009e60:	5b                   	pop    ebx
c0009e61:	c3                   	ret    

c0009e62 <File::close()>:
c0009e62:	53                   	push   ebx
c0009e63:	b8 0b 00 00 00       	mov    eax,0xb
c0009e68:	83 ec 08             	sub    esp,0x8
c0009e6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e6f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009e76:	80 fa 19             	cmp    dl,0x19
c0009e79:	77 41                	ja     c0009ebc <File::close()+0x5a>
c0009e7b:	8b 1c 95 e0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd620]
c0009e82:	85 db                	test   ebx,ebx
c0009e84:	74 36                	je     c0009ebc <File::close()+0x5a>
c0009e86:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009e8d:	74 2d                	je     c0009ebc <File::close()+0x5a>
c0009e8f:	b8 05 00 00 00       	mov    eax,0x5
c0009e94:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009e98:	74 22                	je     c0009ebc <File::close()+0x5a>
c0009e9a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009e9e:	8b 04 95 e0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd620]
c0009ea5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009eab:	53                   	push   ebx
c0009eac:	53                   	push   ebx
c0009ead:	8b 10                	mov    edx,DWORD PTR [eax]
c0009eaf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009eb5:	50                   	push   eax
c0009eb6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	83 c4 08             	add    esp,0x8
c0009ebf:	5b                   	pop    ebx
c0009ec0:	c3                   	ret    
c0009ec1:	90                   	nop

c0009ec2 <File::seek(unsigned long long)>:
c0009ec2:	56                   	push   esi
c0009ec3:	53                   	push   ebx
c0009ec4:	b8 0b 00 00 00       	mov    eax,0xb
c0009ec9:	51                   	push   ecx
c0009eca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ece:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009ed2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009ed9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009edd:	80 fa 19             	cmp    dl,0x19
c0009ee0:	77 31                	ja     c0009f13 <File::seek(unsigned long long)+0x51>
c0009ee2:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0009ee9:	85 d2                	test   edx,edx
c0009eeb:	74 26                	je     c0009f13 <File::seek(unsigned long long)+0x51>
c0009eed:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009ef3:	85 d2                	test   edx,edx
c0009ef5:	74 1c                	je     c0009f13 <File::seek(unsigned long long)+0x51>
c0009ef7:	b8 05 00 00 00       	mov    eax,0x5
c0009efc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0009f00:	74 11                	je     c0009f13 <File::seek(unsigned long long)+0x51>
c0009f02:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f04:	53                   	push   ebx
c0009f05:	51                   	push   ecx
c0009f06:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0009f0c:	52                   	push   edx
c0009f0d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	5a                   	pop    edx
c0009f14:	5b                   	pop    ebx
c0009f15:	5e                   	pop    esi
c0009f16:	c3                   	ret    
c0009f17:	90                   	nop

c0009f18 <File::tell(unsigned long long*)>:
c0009f18:	83 ec 0c             	sub    esp,0xc
c0009f1b:	b8 0b 00 00 00       	mov    eax,0xb
c0009f20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009f24:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009f2b:	80 fa 19             	cmp    dl,0x19
c0009f2e:	77 34                	ja     c0009f64 <File::tell(unsigned long long*)+0x4c>
c0009f30:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0009f37:	85 d2                	test   edx,edx
c0009f39:	74 29                	je     c0009f64 <File::tell(unsigned long long*)+0x4c>
c0009f3b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009f41:	85 d2                	test   edx,edx
c0009f43:	74 1f                	je     c0009f64 <File::tell(unsigned long long*)+0x4c>
c0009f45:	b8 05 00 00 00       	mov    eax,0x5
c0009f4a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009f4e:	74 14                	je     c0009f64 <File::tell(unsigned long long*)+0x4c>
c0009f50:	50                   	push   eax
c0009f51:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f57:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009f5d:	52                   	push   edx
c0009f5e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0009f61:	83 c4 10             	add    esp,0x10
c0009f64:	83 c4 0c             	add    esp,0xc
c0009f67:	c3                   	ret    

c0009f68 <File::rewind()>:
c0009f68:	83 ec 10             	sub    esp,0x10
c0009f6b:	6a 00                	push   0x0
c0009f6d:	6a 00                	push   0x0
c0009f6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f73:	e8 4a ff ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0009f78:	83 c4 1c             	add    esp,0x1c
c0009f7b:	c3                   	ret    

c0009f7c <File::unlink()>:
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	b8 0b 00 00 00       	mov    eax,0xb
c0009f84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009f88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009f8f:	80 f9 19             	cmp    cl,0x19
c0009f92:	77 2f                	ja     c0009fc3 <File::unlink()+0x47>
c0009f94:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c0009f9b:	85 c9                	test   ecx,ecx
c0009f9d:	74 24                	je     c0009fc3 <File::unlink()+0x47>
c0009f9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009fa5:	85 c9                	test   ecx,ecx
c0009fa7:	74 1a                	je     c0009fc3 <File::unlink()+0x47>
c0009fa9:	b8 06 00 00 00       	mov    eax,0x6
c0009fae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009fb2:	75 0f                	jne    c0009fc3 <File::unlink()+0x47>
c0009fb4:	83 c2 0d             	add    edx,0xd
c0009fb7:	50                   	push   eax
c0009fb8:	50                   	push   eax
c0009fb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009fbb:	52                   	push   edx
c0009fbc:	51                   	push   ecx
c0009fbd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	83 c4 0c             	add    esp,0xc
c0009fc6:	c3                   	ret    
c0009fc7:	90                   	nop

c0009fc8 <File::rename(char const*)>:
c0009fc8:	83 ec 0c             	sub    esp,0xc
c0009fcb:	b8 0b 00 00 00       	mov    eax,0xb
c0009fd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009fd4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009fdb:	80 f9 19             	cmp    cl,0x19
c0009fde:	77 32                	ja     c000a012 <File::rename(char const*)+0x4a>
c0009fe0:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c0009fe7:	85 c9                	test   ecx,ecx
c0009fe9:	74 27                	je     c000a012 <File::rename(char const*)+0x4a>
c0009feb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009ff1:	85 c9                	test   ecx,ecx
c0009ff3:	74 1d                	je     c000a012 <File::rename(char const*)+0x4a>
c0009ff5:	b8 06 00 00 00       	mov    eax,0x6
c0009ffa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009ffe:	75 12                	jne    c000a012 <File::rename(char const*)+0x4a>
c000a000:	83 c2 0d             	add    edx,0xd
c000a003:	50                   	push   eax
c000a004:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a006:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a00a:	52                   	push   edx
c000a00b:	51                   	push   ecx
c000a00c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a00f:	83 c4 10             	add    esp,0x10
c000a012:	83 c4 0c             	add    esp,0xc
c000a015:	c3                   	ret    

c000a016 <File::chfatattr(unsigned char, unsigned char)>:
c000a016:	57                   	push   edi
c000a017:	b8 0b 00 00 00       	mov    eax,0xb
c000a01c:	56                   	push   esi
c000a01d:	53                   	push   ebx
c000a01e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a022:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a026:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a02d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a031:	80 f9 19             	cmp    cl,0x19
c000a034:	77 37                	ja     c000a06d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a036:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a03d:	85 c9                	test   ecx,ecx
c000a03f:	74 2c                	je     c000a06d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a041:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a047:	85 c9                	test   ecx,ecx
c000a049:	74 22                	je     c000a06d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a04b:	b8 06 00 00 00       	mov    eax,0x6
c000a050:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a054:	75 17                	jne    c000a06d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a056:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a058:	89 f0                	mov    eax,esi
c000a05a:	83 c2 0d             	add    edx,0xd
c000a05d:	0f b6 f0             	movzx  esi,al
c000a060:	0f b6 db             	movzx  ebx,bl
c000a063:	56                   	push   esi
c000a064:	53                   	push   ebx
c000a065:	52                   	push   edx
c000a066:	51                   	push   ecx
c000a067:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a06a:	83 c4 10             	add    esp,0x10
c000a06d:	5b                   	pop    ebx
c000a06e:	5e                   	pop    esi
c000a06f:	5f                   	pop    edi
c000a070:	c3                   	ret    
c000a071:	90                   	nop

c000a072 <File::exists()>:
c000a072:	83 ec 0c             	sub    esp,0xc
c000a075:	31 c0                	xor    eax,eax
c000a077:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a07b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a082:	80 f9 19             	cmp    cl,0x19
c000a085:	77 24                	ja     c000a0ab <File::exists()+0x39>
c000a087:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	74 19                	je     c000a0ab <File::exists()+0x39>
c000a092:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a098:	85 c9                	test   ecx,ecx
c000a09a:	74 0f                	je     c000a0ab <File::exists()+0x39>
c000a09c:	83 c2 0d             	add    edx,0xd
c000a09f:	50                   	push   eax
c000a0a0:	50                   	push   eax
c000a0a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a0a3:	52                   	push   edx
c000a0a4:	51                   	push   ecx
c000a0a5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a0a8:	83 c4 10             	add    esp,0x10
c000a0ab:	83 c4 0c             	add    esp,0xc
c000a0ae:	c3                   	ret    
c000a0af:	90                   	nop

c000a0b0 <File::stat(unsigned long long*, bool*)>:
c000a0b0:	56                   	push   esi
c000a0b1:	53                   	push   ebx
c000a0b2:	50                   	push   eax
c000a0b3:	b8 0b 00 00 00       	mov    eax,0xb
c000a0b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a0c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0cb:	80 f9 19             	cmp    cl,0x19
c000a0ce:	77 3d                	ja     c000a10d <File::stat(unsigned long long*, bool*)+0x5d>
c000a0d0:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a0d7:	85 c9                	test   ecx,ecx
c000a0d9:	74 32                	je     c000a10d <File::stat(unsigned long long*, bool*)+0x5d>
c000a0db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a0e1:	85 c9                	test   ecx,ecx
c000a0e3:	74 28                	je     c000a10d <File::stat(unsigned long long*, bool*)+0x5d>
c000a0e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a0e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a0eb:	74 13                	je     c000a100 <File::stat(unsigned long long*, bool*)+0x50>
c000a0ed:	83 ec 04             	sub    esp,0x4
c000a0f0:	56                   	push   esi
c000a0f1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a0f7:	51                   	push   ecx
c000a0f8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a0fb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a0fe:	eb 0a                	jmp    c000a10a <File::stat(unsigned long long*, bool*)+0x5a>
c000a100:	53                   	push   ebx
c000a101:	83 c2 0d             	add    edx,0xd
c000a104:	56                   	push   esi
c000a105:	52                   	push   edx
c000a106:	51                   	push   ecx
c000a107:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a10a:	83 c4 10             	add    esp,0x10
c000a10d:	5a                   	pop    edx
c000a10e:	5b                   	pop    ebx
c000a10f:	5e                   	pop    esi
c000a110:	c3                   	ret    

c000a111 <Fs::setcwd(Process*, char*)>:
c000a111:	55                   	push   ebp
c000a112:	57                   	push   edi
c000a113:	56                   	push   esi
c000a114:	53                   	push   ebx
c000a115:	81 ec 20 02 00 00    	sub    esp,0x220
c000a11b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a122:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a128:	57                   	push   edi
c000a129:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a130:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a134:	56                   	push   esi
c000a135:	e8 66 fa ff ff       	call   c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a13a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a13d:	e8 82 63 ff ff       	call   c00004c4 <strlen>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	83 f8 02             	cmp    eax,0x2
c000a148:	77 15                	ja     c000a15f <Fs::setcwd(Process*, char*)+0x4e>
c000a14a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a14f:	83 eb 41             	sub    ebx,0x41
c000a152:	8b 04 9d e0 29 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd620]
c000a159:	85 c0                	test   eax,eax
c000a15b:	75 1c                	jne    c000a179 <Fs::setcwd(Process*, char*)+0x68>
c000a15d:	eb 2f                	jmp    c000a18e <Fs::setcwd(Process*, char*)+0x7d>
c000a15f:	83 ec 0c             	sub    esp,0xc
c000a162:	56                   	push   esi
c000a163:	e8 5c 63 ff ff       	call   c00004c4 <strlen>
c000a168:	83 c4 10             	add    esp,0x10
c000a16b:	83 f8 03             	cmp    eax,0x3
c000a16e:	75 57                	jne    c000a1c7 <Fs::setcwd(Process*, char*)+0xb6>
c000a170:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a175:	75 50                	jne    c000a1c7 <Fs::setcwd(Process*, char*)+0xb6>
c000a177:	eb d1                	jmp    c000a14a <Fs::setcwd(Process*, char*)+0x39>
c000a179:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a180:	75 0c                	jne    c000a18e <Fs::setcwd(Process*, char*)+0x7d>
c000a182:	83 ec 0c             	sub    esp,0xc
c000a185:	50                   	push   eax
c000a186:	e8 35 1c 00 00       	call   c000bdc0 <LogicalDisk::mount()>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	b8 03 00 00 00       	mov    eax,0x3
c000a193:	83 fb 19             	cmp    ebx,0x19
c000a196:	0f 87 c6 00 00 00    	ja     c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a19c:	8b 14 9d e0 29 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd620]
c000a1a3:	b8 05 00 00 00       	mov    eax,0x5
c000a1a8:	85 d2                	test   edx,edx
c000a1aa:	0f 84 b2 00 00 00    	je     c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a1b0:	b8 06 00 00 00       	mov    eax,0x6
c000a1b5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a1bc:	0f 85 92 00 00 00    	jne    c000a254 <Fs::setcwd(Process*, char*)+0x143>
c000a1c2:	e9 9b 00 00 00       	jmp    c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a1c7:	83 ec 0c             	sub    esp,0xc
c000a1ca:	68 14 01 00 00       	push   0x114
c000a1cf:	e8 81 c8 ff ff       	call   c0006a55 <malloc>
c000a1d4:	83 c4 0c             	add    esp,0xc
c000a1d7:	89 c3                	mov    ebx,eax
c000a1d9:	55                   	push   ebp
c000a1da:	56                   	push   esi
c000a1db:	50                   	push   eax
c000a1dc:	e8 69 fb ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000a1e1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a1e6:	83 c4 0c             	add    esp,0xc
c000a1e9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a1ed:	50                   	push   eax
c000a1ee:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a1f2:	50                   	push   eax
c000a1f3:	53                   	push   ebx
c000a1f4:	e8 b7 fe ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c000a1f9:	83 c4 10             	add    esp,0x10
c000a1fc:	83 f8 02             	cmp    eax,0x2
c000a1ff:	74 04                	je     c000a205 <Fs::setcwd(Process*, char*)+0xf4>
c000a201:	85 c0                	test   eax,eax
c000a203:	74 1c                	je     c000a221 <Fs::setcwd(Process*, char*)+0x110>
c000a205:	b8 01 00 00 00       	mov    eax,0x1
c000a20a:	85 db                	test   ebx,ebx
c000a20c:	74 54                	je     c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a20e:	83 ec 0c             	sub    esp,0xc
c000a211:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a213:	53                   	push   ebx
c000a214:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	b8 01 00 00 00       	mov    eax,0x1
c000a21f:	eb 41                	jmp    c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a221:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a226:	75 1c                	jne    c000a244 <Fs::setcwd(Process*, char*)+0x133>
c000a228:	b8 02 00 00 00       	mov    eax,0x2
c000a22d:	85 db                	test   ebx,ebx
c000a22f:	74 31                	je     c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a231:	83 ec 0c             	sub    esp,0xc
c000a234:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a236:	53                   	push   ebx
c000a237:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	b8 02 00 00 00       	mov    eax,0x2
c000a242:	eb 1e                	jmp    c000a262 <Fs::setcwd(Process*, char*)+0x151>
c000a244:	85 db                	test   ebx,ebx
c000a246:	74 0c                	je     c000a254 <Fs::setcwd(Process*, char*)+0x143>
c000a248:	83 ec 0c             	sub    esp,0xc
c000a24b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a24d:	53                   	push   ebx
c000a24e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a251:	83 c4 10             	add    esp,0x10
c000a254:	50                   	push   eax
c000a255:	50                   	push   eax
c000a256:	56                   	push   esi
c000a257:	57                   	push   edi
c000a258:	e8 07 63 ff ff       	call   c0000564 <strcpy>
c000a25d:	83 c4 10             	add    esp,0x10
c000a260:	31 c0                	xor    eax,eax
c000a262:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a268:	5b                   	pop    ebx
c000a269:	5e                   	pop    esi
c000a26a:	5f                   	pop    edi
c000a26b:	5d                   	pop    ebp
c000a26c:	c3                   	ret    
c000a26d:	90                   	nop

c000a26e <Directory::Directory(char const*, Process*)>:
c000a26e:	83 ec 0c             	sub    esp,0xc
c000a271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a275:	83 ec 08             	sub    esp,0x8
c000a278:	6a 00                	push   0x0
c000a27a:	50                   	push   eax
c000a27b:	e8 ba de ff ff       	call   c000813a <UnixFile::UnixFile(int)>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	ba a8 e2 01 c0       	mov    edx,0xc001e2a8
c000a288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28c:	89 10                	mov    DWORD PTR [eax],edx
c000a28e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a292:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29c:	83 c0 0d             	add    eax,0xd
c000a29f:	83 ec 04             	sub    esp,0x4
c000a2a2:	52                   	push   edx
c000a2a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a7:	50                   	push   eax
c000a2a8:	e8 f3 f8 ff ff       	call   c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a2ad:	83 c4 10             	add    esp,0x10
c000a2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2b4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a2b7:	8d 50 bf             	lea    edx,[eax-0x41]
c000a2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2be:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2c8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a2d6:	0f b6 c0             	movzx  eax,al
c000a2d9:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c000a2e0:	85 c0                	test   eax,eax
c000a2e2:	74 3e                	je     c000a322 <Directory::Directory(char const*, Process*)+0xb4>
c000a2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a2ee:	0f b6 c0             	movzx  eax,al
c000a2f1:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c000a2f8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a2fe:	85 c0                	test   eax,eax
c000a300:	75 20                	jne    c000a322 <Directory::Directory(char const*, Process*)+0xb4>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a30c:	0f b6 c0             	movzx  eax,al
c000a30f:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c000a316:	83 ec 0c             	sub    esp,0xc
c000a319:	50                   	push   eax
c000a31a:	e8 a1 1a 00 00       	call   c000bdc0 <LogicalDisk::mount()>
c000a31f:	83 c4 10             	add    esp,0x10
c000a322:	90                   	nop
c000a323:	83 c4 0c             	add    esp,0xc
c000a326:	c3                   	ret    
c000a327:	90                   	nop

c000a328 <Directory::open()>:
c000a328:	53                   	push   ebx
c000a329:	b8 0b 00 00 00       	mov    eax,0xb
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a335:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a33c:	80 fa 19             	cmp    dl,0x19
c000a33f:	77 3d                	ja     c000a37e <Directory::open()+0x56>
c000a341:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c000a348:	85 d2                	test   edx,edx
c000a34a:	74 32                	je     c000a37e <Directory::open()+0x56>
c000a34c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a352:	85 d2                	test   edx,edx
c000a354:	74 28                	je     c000a37e <Directory::open()+0x56>
c000a356:	b8 06 00 00 00       	mov    eax,0x6
c000a35b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a35f:	75 1d                	jne    c000a37e <Directory::open()+0x56>
c000a361:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a367:	50                   	push   eax
c000a368:	8b 02                	mov    eax,DWORD PTR [edx]
c000a36a:	51                   	push   ecx
c000a36b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a36e:	51                   	push   ecx
c000a36f:	52                   	push   edx
c000a370:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a373:	83 c4 10             	add    esp,0x10
c000a376:	85 c0                	test   eax,eax
c000a378:	75 04                	jne    c000a37e <Directory::open()+0x56>
c000a37a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a37e:	83 c4 08             	add    esp,0x8
c000a381:	5b                   	pop    ebx
c000a382:	c3                   	ret    
c000a383:	90                   	nop

c000a384 <Directory::close()>:
c000a384:	53                   	push   ebx
c000a385:	b8 0b 00 00 00       	mov    eax,0xb
c000a38a:	83 ec 08             	sub    esp,0x8
c000a38d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a391:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a398:	80 fa 19             	cmp    dl,0x19
c000a39b:	77 41                	ja     c000a3de <Directory::close()+0x5a>
c000a39d:	8b 1c 95 e0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd620]
c000a3a4:	85 db                	test   ebx,ebx
c000a3a6:	74 36                	je     c000a3de <Directory::close()+0x5a>
c000a3a8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a3af:	74 2d                	je     c000a3de <Directory::close()+0x5a>
c000a3b1:	b8 05 00 00 00       	mov    eax,0x5
c000a3b6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a3ba:	74 22                	je     c000a3de <Directory::close()+0x5a>
c000a3bc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a3c0:	8b 04 95 e0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd620]
c000a3c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a3cd:	53                   	push   ebx
c000a3ce:	53                   	push   ebx
c000a3cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000a3d1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a3d7:	50                   	push   eax
c000a3d8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a3db:	83 c4 10             	add    esp,0x10
c000a3de:	83 c4 08             	add    esp,0x8
c000a3e1:	5b                   	pop    ebx
c000a3e2:	c3                   	ret    
c000a3e3:	90                   	nop

c000a3e4 <Directory::unlink()>:
c000a3e4:	83 ec 0c             	sub    esp,0xc
c000a3e7:	b8 0b 00 00 00       	mov    eax,0xb
c000a3ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a3f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a3f7:	80 f9 19             	cmp    cl,0x19
c000a3fa:	77 2f                	ja     c000a42b <Directory::unlink()+0x47>
c000a3fc:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a403:	85 c9                	test   ecx,ecx
c000a405:	74 24                	je     c000a42b <Directory::unlink()+0x47>
c000a407:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a40d:	85 c9                	test   ecx,ecx
c000a40f:	74 1a                	je     c000a42b <Directory::unlink()+0x47>
c000a411:	b8 06 00 00 00       	mov    eax,0x6
c000a416:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a41a:	75 0f                	jne    c000a42b <Directory::unlink()+0x47>
c000a41c:	83 c2 0d             	add    edx,0xd
c000a41f:	50                   	push   eax
c000a420:	50                   	push   eax
c000a421:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a423:	52                   	push   edx
c000a424:	51                   	push   ecx
c000a425:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	83 c4 0c             	add    esp,0xc
c000a42e:	c3                   	ret    
c000a42f:	90                   	nop

c000a430 <Directory::rename(char const*)>:
c000a430:	83 ec 0c             	sub    esp,0xc
c000a433:	b8 0b 00 00 00       	mov    eax,0xb
c000a438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a43c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a443:	80 f9 19             	cmp    cl,0x19
c000a446:	77 32                	ja     c000a47a <Directory::rename(char const*)+0x4a>
c000a448:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a44f:	85 c9                	test   ecx,ecx
c000a451:	74 27                	je     c000a47a <Directory::rename(char const*)+0x4a>
c000a453:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a459:	85 c9                	test   ecx,ecx
c000a45b:	74 1d                	je     c000a47a <Directory::rename(char const*)+0x4a>
c000a45d:	b8 06 00 00 00       	mov    eax,0x6
c000a462:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a466:	75 12                	jne    c000a47a <Directory::rename(char const*)+0x4a>
c000a468:	83 c2 0d             	add    edx,0xd
c000a46b:	50                   	push   eax
c000a46c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a46e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a472:	52                   	push   edx
c000a473:	51                   	push   ecx
c000a474:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	83 c4 0c             	add    esp,0xc
c000a47d:	c3                   	ret    

c000a47e <Directory::exists()>:
c000a47e:	83 ec 0c             	sub    esp,0xc
c000a481:	31 c0                	xor    eax,eax
c000a483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a487:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a48e:	80 f9 19             	cmp    cl,0x19
c000a491:	77 24                	ja     c000a4b7 <Directory::exists()+0x39>
c000a493:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a49a:	85 c9                	test   ecx,ecx
c000a49c:	74 19                	je     c000a4b7 <Directory::exists()+0x39>
c000a49e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a4a4:	85 c9                	test   ecx,ecx
c000a4a6:	74 0f                	je     c000a4b7 <Directory::exists()+0x39>
c000a4a8:	83 c2 0d             	add    edx,0xd
c000a4ab:	50                   	push   eax
c000a4ac:	50                   	push   eax
c000a4ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a4af:	52                   	push   edx
c000a4b0:	51                   	push   ecx
c000a4b1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a4b4:	83 c4 10             	add    esp,0x10
c000a4b7:	83 c4 0c             	add    esp,0xc
c000a4ba:	c3                   	ret    
c000a4bb:	90                   	nop

c000a4bc <Directory::read(dirent*)>:
c000a4bc:	83 ec 1c             	sub    esp,0x1c
c000a4bf:	b8 0b 00 00 00       	mov    eax,0xb
c000a4c4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a4c8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a4cf:	80 fa 19             	cmp    dl,0x19
c000a4d2:	77 30                	ja     c000a504 <Directory::read(dirent*)+0x48>
c000a4d4:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c000a4db:	85 d2                	test   edx,edx
c000a4dd:	74 25                	je     c000a504 <Directory::read(dirent*)+0x48>
c000a4df:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a4e6:	74 1c                	je     c000a504 <Directory::read(dirent*)+0x48>
c000a4e8:	83 ec 0c             	sub    esp,0xc
c000a4eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a4ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a4f1:	52                   	push   edx
c000a4f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4f6:	6a 00                	push   0x0
c000a4f8:	68 10 01 00 00       	push   0x110
c000a4fd:	51                   	push   ecx
c000a4fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a501:	83 c4 20             	add    esp,0x20
c000a504:	83 c4 1c             	add    esp,0x1c
c000a507:	c3                   	ret    

c000a508 <Directory::create()>:
c000a508:	83 ec 0c             	sub    esp,0xc
c000a50b:	b8 0b 00 00 00       	mov    eax,0xb
c000a510:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a514:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a51b:	80 f9 19             	cmp    cl,0x19
c000a51e:	77 2f                	ja     c000a54f <Directory::create()+0x47>
c000a520:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000a527:	85 c9                	test   ecx,ecx
c000a529:	74 24                	je     c000a54f <Directory::create()+0x47>
c000a52b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a531:	85 c9                	test   ecx,ecx
c000a533:	74 1a                	je     c000a54f <Directory::create()+0x47>
c000a535:	b8 06 00 00 00       	mov    eax,0x6
c000a53a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a53e:	75 0f                	jne    c000a54f <Directory::create()+0x47>
c000a540:	83 c2 0d             	add    edx,0xd
c000a543:	50                   	push   eax
c000a544:	50                   	push   eax
c000a545:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a547:	52                   	push   edx
c000a548:	51                   	push   ecx
c000a549:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	83 c4 0c             	add    esp,0xc
c000a552:	c3                   	ret    
c000a553:	90                   	nop

c000a554 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a554:	b8 0a 00 00 00       	mov    eax,0xa
c000a559:	c3                   	ret    
c000a55a:	66 90                	xchg   ax,ax

c000a55c <Bus::Bus(char const*)>:
c000a55c:	83 ec 0c             	sub    esp,0xc
c000a55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a563:	83 ec 08             	sub    esp,0x8
c000a566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a56a:	50                   	push   eax
c000a56b:	e8 2a 08 00 00       	call   c000ad9a <Device::Device(char const*)>
c000a570:	83 c4 10             	add    esp,0x10
c000a573:	ba c4 e2 01 c0       	mov    edx,0xc001e2c4
c000a578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a57c:	89 10                	mov    DWORD PTR [eax],edx
c000a57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a582:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a58c:	90                   	nop
c000a58d:	83 c4 0c             	add    esp,0xc
c000a590:	c3                   	ret    
c000a591:	90                   	nop
c000a592:	66 90                	xchg   ax,ax

c000a594 <Bus::~Bus()>:
c000a594:	83 ec 0c             	sub    esp,0xc
c000a597:	ba c4 e2 01 c0       	mov    edx,0xc001e2c4
c000a59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5a0:	89 10                	mov    DWORD PTR [eax],edx
c000a5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5a6:	83 ec 0c             	sub    esp,0xc
c000a5a9:	50                   	push   eax
c000a5aa:	e8 55 05 00 00       	call   c000ab04 <Device::~Device()>
c000a5af:	83 c4 10             	add    esp,0x10
c000a5b2:	90                   	nop
c000a5b3:	83 c4 0c             	add    esp,0xc
c000a5b6:	c3                   	ret    
c000a5b7:	90                   	nop

c000a5b8 <Bus::~Bus()>:
c000a5b8:	83 ec 0c             	sub    esp,0xc
c000a5bb:	83 ec 0c             	sub    esp,0xc
c000a5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5c2:	e8 cd ff ff ff       	call   c000a594 <Bus::~Bus()>
c000a5c7:	83 c4 10             	add    esp,0x10
c000a5ca:	83 ec 08             	sub    esp,0x8
c000a5cd:	68 58 01 00 00       	push   0x158
c000a5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5d6:	e8 23 f1 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	83 c4 0c             	add    esp,0xc
c000a5e1:	c3                   	ret    

c000a5e2 <beepThread(void*)>:
c000a5e2:	83 ec 0c             	sub    esp,0xc
c000a5e5:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000a5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a5ee:	48                   	dec    eax
c000a5ef:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000a5f4:	75 01                	jne    c000a5f7 <beepThread(void*)+0x15>
c000a5f6:	fb                   	sti    
c000a5f7:	83 ec 0c             	sub    esp,0xc
c000a5fa:	6b c2 0a             	imul   eax,edx,0xa
c000a5fd:	50                   	push   eax
c000a5fe:	e8 2d 86 00 00       	call   c0012c30 <milliTenthSleep(unsigned int)>
c000a603:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a60a:	e8 30 b2 00 00       	call   c001583f <Hal::makeBeep(int)>
c000a60f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a617:	83 c4 1c             	add    esp,0x1c
c000a61a:	e9 11 85 00 00       	jmp    c0012b30 <blockTask(TaskState)>

c000a61f <Krnl::beep(int, int, bool)>:
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	83 ec 10             	sub    esp,0x10
c000a624:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a62c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a630:	e8 0a b2 00 00       	call   c001583f <Hal::makeBeep(int)>
c000a635:	83 c4 10             	add    esp,0x10
c000a638:	89 f0                	mov    eax,esi
c000a63a:	84 c0                	test   al,al
c000a63c:	74 1e                	je     c000a65c <Krnl::beep(int, int, bool)+0x3d>
c000a63e:	83 ec 0c             	sub    esp,0xc
c000a641:	6b db 0a             	imul   ebx,ebx,0xa
c000a644:	53                   	push   ebx
c000a645:	e8 e6 85 00 00       	call   c0012c30 <milliTenthSleep(unsigned int)>
c000a64a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a652:	83 c4 14             	add    esp,0x14
c000a655:	5b                   	pop    ebx
c000a656:	5e                   	pop    esi
c000a657:	e9 e3 b1 00 00       	jmp    c001583f <Hal::makeBeep(int)>
c000a65c:	68 e6 00 00 00       	push   0xe6
c000a661:	53                   	push   ebx
c000a662:	68 e2 a5 00 c0       	push   0xc000a5e2
c000a667:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000a66d:	e8 aa 80 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c000a672:	83 c4 14             	add    esp,0x14
c000a675:	5b                   	pop    ebx
c000a676:	5e                   	pop    esi
c000a677:	c3                   	ret    

c000a678 <User::loadClockSettings(int)>:
c000a678:	53                   	push   ebx
c000a679:	83 ec 14             	sub    esp,0x14
c000a67c:	68 14 01 00 00       	push   0x114
c000a681:	e8 cf c3 ff ff       	call   c0006a55 <malloc>
c000a686:	83 c4 0c             	add    esp,0xc
c000a689:	89 c3                	mov    ebx,eax
c000a68b:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000a691:	68 e8 e2 01 c0       	push   0xc001e2e8
c000a696:	50                   	push   eax
c000a697:	e8 ae f6 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000a69c:	58                   	pop    eax
c000a69d:	5a                   	pop    edx
c000a69e:	6a 01                	push   0x1
c000a6a0:	53                   	push   ebx
c000a6a1:	e8 5e f7 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c000a6a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a6a9:	e8 b4 f7 ff ff       	call   c0009e62 <File::close()>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	85 db                	test   ebx,ebx
c000a6b3:	74 0f                	je     c000a6c4 <User::loadClockSettings(int)+0x4c>
c000a6b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a6b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a6be:	83 c4 08             	add    esp,0x8
c000a6c1:	5b                   	pop    ebx
c000a6c2:	ff e0                	jmp    eax
c000a6c4:	83 c4 08             	add    esp,0x8
c000a6c7:	5b                   	pop    ebx
c000a6c8:	c3                   	ret    
c000a6c9:	90                   	nop

c000a6ca <Clock::Clock(char const*)>:
c000a6ca:	83 ec 0c             	sub    esp,0xc
c000a6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d1:	83 ec 08             	sub    esp,0x8
c000a6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d8:	50                   	push   eax
c000a6d9:	e8 bc 06 00 00       	call   c000ad9a <Device::Device(char const*)>
c000a6de:	83 c4 10             	add    esp,0x10
c000a6e1:	ba 10 e3 01 c0       	mov    edx,0xc001e310
c000a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ea:	89 10                	mov    DWORD PTR [eax],edx
c000a6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a6fa:	90                   	nop
c000a6fb:	83 c4 0c             	add    esp,0xc
c000a6fe:	c3                   	ret    
c000a6ff:	90                   	nop

c000a700 <Clock::~Clock()>:
c000a700:	83 ec 0c             	sub    esp,0xc
c000a703:	ba 10 e3 01 c0       	mov    edx,0xc001e310
c000a708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a70c:	89 10                	mov    DWORD PTR [eax],edx
c000a70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a712:	83 ec 0c             	sub    esp,0xc
c000a715:	50                   	push   eax
c000a716:	e8 e9 03 00 00       	call   c000ab04 <Device::~Device()>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	90                   	nop
c000a71f:	83 c4 0c             	add    esp,0xc
c000a722:	c3                   	ret    
c000a723:	90                   	nop

c000a724 <Clock::~Clock()>:
c000a724:	83 ec 0c             	sub    esp,0xc
c000a727:	83 ec 0c             	sub    esp,0xc
c000a72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a72e:	e8 cd ff ff ff       	call   c000a700 <Clock::~Clock()>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	83 ec 08             	sub    esp,0x8
c000a739:	68 58 01 00 00       	push   0x158
c000a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a742:	e8 b7 ef ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000a747:	83 c4 10             	add    esp,0x10
c000a74a:	83 c4 0c             	add    esp,0xc
c000a74d:	c3                   	ret    

c000a74e <Clock::timeInSecondsLocal()>:
c000a74e:	53                   	push   ebx
c000a74f:	83 ec 14             	sub    esp,0x14
c000a752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a756:	8b 10                	mov    edx,DWORD PTR [eax]
c000a758:	50                   	push   eax
c000a759:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a75c:	0f b6 0d 5c 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc002055c
c000a763:	03 0d 60 05 02 c0    	add    ecx,DWORD PTR ds:0xc0020560
c000a769:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a76f:	89 cb                	mov    ebx,ecx
c000a771:	c1 fb 1f             	sar    ebx,0x1f
c000a774:	01 c8                	add    eax,ecx
c000a776:	11 da                	adc    edx,ebx
c000a778:	83 c4 10             	add    esp,0x10
c000a77b:	31 c9                	xor    ecx,ecx
c000a77d:	80 3d 5d 05 02 c0 00 	cmp    BYTE PTR ds:0xc002055d,0x0
c000a784:	74 05                	je     c000a78b <Clock::timeInSecondsLocal()+0x3d>
c000a786:	b9 08 07 00 00       	mov    ecx,0x708
c000a78b:	31 db                	xor    ebx,ebx
c000a78d:	01 c8                	add    eax,ecx
c000a78f:	11 da                	adc    edx,ebx
c000a791:	83 c4 08             	add    esp,0x8
c000a794:	5b                   	pop    ebx
c000a795:	c3                   	ret    

c000a796 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a796:	57                   	push   edi
c000a797:	56                   	push   esi
c000a798:	53                   	push   ebx
c000a799:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a79d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a7a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a7a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a7a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a7aa:	0f b6 05 5c 05 02 c0 	movzx  eax,BYTE PTR ds:0xc002055c
c000a7b1:	03 05 60 05 02 c0    	add    eax,DWORD PTR ds:0xc0020560
c000a7b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a7bd:	99                   	cdq    
c000a7be:	29 c6                	sub    esi,eax
c000a7c0:	19 d7                	sbb    edi,edx
c000a7c2:	89 f0                	mov    eax,esi
c000a7c4:	89 fa                	mov    edx,edi
c000a7c6:	31 f6                	xor    esi,esi
c000a7c8:	80 3d 5d 05 02 c0 00 	cmp    BYTE PTR ds:0xc002055d,0x0
c000a7cf:	74 05                	je     c000a7d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a7d1:	be 08 07 00 00       	mov    esi,0x708
c000a7d6:	31 ff                	xor    edi,edi
c000a7d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a7dc:	29 f0                	sub    eax,esi
c000a7de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a7e2:	19 fa                	sbb    edx,edi
c000a7e4:	89 d8                	mov    eax,ebx
c000a7e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a7ea:	5b                   	pop    ebx
c000a7eb:	5e                   	pop    esi
c000a7ec:	5f                   	pop    edi
c000a7ed:	ff e0                	jmp    eax

c000a7ef <datetimeToSeconds(datetime_t)>:
c000a7ef:	55                   	push   ebp
c000a7f0:	57                   	push   edi
c000a7f1:	56                   	push   esi
c000a7f2:	53                   	push   ebx
c000a7f3:	83 ec 14             	sub    esp,0x14
c000a7f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a7fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a7fe:	89 d3                	mov    ebx,edx
c000a800:	0f b6 c6             	movzx  eax,dh
c000a803:	c1 eb 10             	shr    ebx,0x10
c000a806:	48                   	dec    eax
c000a807:	66 81 eb 6c 07       	sub    bx,0x76c
c000a80c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a810:	0f b6 f5             	movzx  esi,ch
c000a813:	89 cf                	mov    edi,ecx
c000a815:	6b f6 3c             	imul   esi,esi,0x3c
c000a818:	c1 ef 10             	shr    edi,0x10
c000a81b:	0f b6 c9             	movzx  ecx,cl
c000a81e:	89 f8                	mov    eax,edi
c000a820:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a826:	0f b6 f8             	movzx  edi,al
c000a829:	0f b6 d2             	movzx  edx,dl
c000a82c:	01 fe                	add    esi,edi
c000a82e:	01 f1                	add    ecx,esi
c000a830:	0f b7 f3             	movzx  esi,bx
c000a833:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a837:	c1 f9 1f             	sar    ecx,0x1f
c000a83a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a83f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a843:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a848:	8b 0c 8d 60 e3 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1ca0]
c000a84f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a853:	76 29                	jbe    c000a87e <datetimeToSeconds(datetime_t)+0x8f>
c000a855:	f6 c3 03             	test   bl,0x3
c000a858:	75 24                	jne    c000a87e <datetimeToSeconds(datetime_t)+0x8f>
c000a85a:	31 d2                	xor    edx,edx
c000a85c:	bf 64 00 00 00       	mov    edi,0x64
c000a861:	89 d8                	mov    eax,ebx
c000a863:	66 f7 f7             	div    di
c000a866:	66 85 d2             	test   dx,dx
c000a869:	75 12                	jne    c000a87d <datetimeToSeconds(datetime_t)+0x8e>
c000a86b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a871:	bf 90 01 00 00       	mov    edi,0x190
c000a876:	99                   	cdq    
c000a877:	f7 ff                	idiv   edi
c000a879:	85 d2                	test   edx,edx
c000a87b:	75 01                	jne    c000a87e <datetimeToSeconds(datetime_t)+0x8f>
c000a87d:	41                   	inc    ecx
c000a87e:	66 83 fb 46          	cmp    bx,0x46
c000a882:	76 45                	jbe    c000a8c9 <datetimeToSeconds(datetime_t)+0xda>
c000a884:	bb 46 00 00 00       	mov    ebx,0x46
c000a889:	bf 64 00 00 00       	mov    edi,0x64
c000a88e:	bd 90 01 00 00       	mov    ebp,0x190
c000a893:	b8 6d 01 00 00       	mov    eax,0x16d
c000a898:	f6 c3 03             	test   bl,0x3
c000a89b:	75 23                	jne    c000a8c0 <datetimeToSeconds(datetime_t)+0xd1>
c000a89d:	89 d8                	mov    eax,ebx
c000a89f:	99                   	cdq    
c000a8a0:	f7 ff                	idiv   edi
c000a8a2:	b8 6e 01 00 00       	mov    eax,0x16e
c000a8a7:	85 d2                	test   edx,edx
c000a8a9:	75 15                	jne    c000a8c0 <datetimeToSeconds(datetime_t)+0xd1>
c000a8ab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000a8b1:	99                   	cdq    
c000a8b2:	f7 fd                	idiv   ebp
c000a8b4:	83 fa 01             	cmp    edx,0x1
c000a8b7:	19 c0                	sbb    eax,eax
c000a8b9:	f7 d0                	not    eax
c000a8bb:	05 6e 01 00 00       	add    eax,0x16e
c000a8c0:	01 c1                	add    ecx,eax
c000a8c2:	43                   	inc    ebx
c000a8c3:	39 f3                	cmp    ebx,esi
c000a8c5:	7c cc                	jl     c000a893 <datetimeToSeconds(datetime_t)+0xa4>
c000a8c7:	eb 35                	jmp    c000a8fe <datetimeToSeconds(datetime_t)+0x10f>
c000a8c9:	74 33                	je     c000a8fe <datetimeToSeconds(datetime_t)+0x10f>
c000a8cb:	b8 45 00 00 00       	mov    eax,0x45
c000a8d0:	89 c2                	mov    edx,eax
c000a8d2:	83 e2 03             	and    edx,0x3
c000a8d5:	39 f0                	cmp    eax,esi
c000a8d7:	7e 0f                	jle    c000a8e8 <datetimeToSeconds(datetime_t)+0xf9>
c000a8d9:	83 fa 01             	cmp    edx,0x1
c000a8dc:	19 d2                	sbb    edx,edx
c000a8de:	48                   	dec    eax
c000a8df:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000a8e6:	eb e8                	jmp    c000a8d0 <datetimeToSeconds(datetime_t)+0xe1>
c000a8e8:	b8 6d 01 00 00       	mov    eax,0x16d
c000a8ed:	85 d2                	test   edx,edx
c000a8ef:	75 0b                	jne    c000a8fc <datetimeToSeconds(datetime_t)+0x10d>
c000a8f1:	66 83 fb 01          	cmp    bx,0x1
c000a8f5:	19 c0                	sbb    eax,eax
c000a8f7:	05 6e 01 00 00       	add    eax,0x16e
c000a8fc:	29 c1                	sub    ecx,eax
c000a8fe:	b8 80 51 01 00       	mov    eax,0x15180
c000a903:	f7 e9                	imul   ecx
c000a905:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000a909:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000a90d:	83 c4 14             	add    esp,0x14
c000a910:	5b                   	pop    ebx
c000a911:	5e                   	pop    esi
c000a912:	5f                   	pop    edi
c000a913:	5d                   	pop    ebp
c000a914:	c3                   	ret    
c000a915:	90                   	nop

c000a916 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000a916:	57                   	push   edi
c000a917:	56                   	push   esi
c000a918:	53                   	push   ebx
c000a919:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a91d:	8b 06                	mov    eax,DWORD PTR [esi]
c000a91f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000a922:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a92a:	e8 c0 fe ff ff       	call   c000a7ef <datetimeToSeconds(datetime_t)>
c000a92f:	59                   	pop    ecx
c000a930:	0f b6 0d 5c 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc002055c
c000a937:	5b                   	pop    ebx
c000a938:	03 0d 60 05 02 c0    	add    ecx,DWORD PTR ds:0xc0020560
c000a93e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a944:	89 cb                	mov    ebx,ecx
c000a946:	c1 fb 1f             	sar    ebx,0x1f
c000a949:	29 c8                	sub    eax,ecx
c000a94b:	19 da                	sbb    edx,ebx
c000a94d:	31 c9                	xor    ecx,ecx
c000a94f:	80 3d 5d 05 02 c0 00 	cmp    BYTE PTR ds:0xc002055d,0x0
c000a956:	74 05                	je     c000a95d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000a958:	b9 08 07 00 00       	mov    ecx,0x708
c000a95d:	31 db                	xor    ebx,ebx
c000a95f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a963:	29 c8                	sub    eax,ecx
c000a965:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a969:	19 da                	sbb    edx,ebx
c000a96b:	89 f8                	mov    eax,edi
c000a96d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a971:	5b                   	pop    ebx
c000a972:	5e                   	pop    esi
c000a973:	5f                   	pop    edi
c000a974:	ff e0                	jmp    eax

c000a976 <secondsToDatetime(unsigned long long)>:
c000a976:	55                   	push   ebp
c000a977:	57                   	push   edi
c000a978:	56                   	push   esi
c000a979:	53                   	push   ebx
c000a97a:	83 ec 1c             	sub    esp,0x1c
c000a97d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a981:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a985:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a989:	6a 00                	push   0x0
c000a98b:	68 80 51 01 00       	push   0x15180
c000a990:	55                   	push   ebp
c000a991:	57                   	push   edi
c000a992:	e8 29 1c 01 00       	call   c001c5c0 <__udivdi3>
c000a997:	83 c4 10             	add    esp,0x10
c000a99a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000a9a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a4:	6a 00                	push   0x0
c000a9a6:	68 80 51 01 00       	push   0x15180
c000a9ab:	55                   	push   ebp
c000a9ac:	57                   	push   edi
c000a9ad:	bf 10 0e 00 00       	mov    edi,0xe10
c000a9b2:	e8 09 1d 01 00       	call   c001c6c0 <__umoddi3>
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	99                   	cdq    
c000a9bb:	f7 ff                	idiv   edi
c000a9bd:	bf 3c 00 00 00       	mov    edi,0x3c
c000a9c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000a9c5:	89 d0                	mov    eax,edx
c000a9c7:	99                   	cdq    
c000a9c8:	f7 ff                	idiv   edi
c000a9ca:	85 db                	test   ebx,ebx
c000a9cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000a9cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000a9d2:	79 11                	jns    c000a9e5 <secondsToDatetime(unsigned long long)+0x6f>
c000a9d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a9d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000a9de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000a9e3:	eb 07                	jmp    c000a9ec <secondsToDatetime(unsigned long long)+0x76>
c000a9e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000a9ea:	89 d8                	mov    eax,ebx
c000a9ec:	bf b4 05 00 00       	mov    edi,0x5b4
c000a9f1:	99                   	cdq    
c000a9f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000a9f7:	f7 f9                	idiv   ecx
c000a9f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000a9fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa02:	31 d2                	xor    edx,edx
c000aa04:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000aa0c:	01 c3                	add    ebx,eax
c000aa0e:	89 d8                	mov    eax,ebx
c000aa10:	f7 f1                	div    ecx
c000aa12:	31 d2                	xor    edx,edx
c000aa14:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000aa17:	89 d8                	mov    eax,ebx
c000aa19:	f7 f7                	div    edi
c000aa1b:	31 d2                	xor    edx,edx
c000aa1d:	29 c1                	sub    ecx,eax
c000aa1f:	89 d8                	mov    eax,ebx
c000aa21:	f7 f5                	div    ebp
c000aa23:	bd 6d 01 00 00       	mov    ebp,0x16d
c000aa28:	29 c1                	sub    ecx,eax
c000aa2a:	31 d2                	xor    edx,edx
c000aa2c:	89 c8                	mov    eax,ecx
c000aa2e:	f7 f5                	div    ebp
c000aa30:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000aa35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa39:	31 d2                	xor    edx,edx
c000aa3b:	89 c8                	mov    eax,ecx
c000aa3d:	f7 f5                	div    ebp
c000aa3f:	31 d2                	xor    edx,edx
c000aa41:	01 c3                	add    ebx,eax
c000aa43:	89 c8                	mov    eax,ecx
c000aa45:	f7 f7                	div    edi
c000aa47:	bf 99 00 00 00       	mov    edi,0x99
c000aa4c:	29 c3                	sub    ebx,eax
c000aa4e:	31 d2                	xor    edx,edx
c000aa50:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000aa58:	29 c3                	sub    ebx,eax
c000aa5a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa5d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000aa60:	bb 05 00 00 00       	mov    ebx,0x5
c000aa65:	83 c1 02             	add    ecx,0x2
c000aa68:	89 c8                	mov    eax,ecx
c000aa6a:	f7 f7                	div    edi
c000aa6c:	31 d2                	xor    edx,edx
c000aa6e:	89 c7                	mov    edi,eax
c000aa70:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000aa76:	83 c0 02             	add    eax,0x2
c000aa79:	f7 f3                	div    ebx
c000aa7b:	89 eb                	mov    ebx,ebp
c000aa7d:	29 c3                	sub    ebx,eax
c000aa7f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000aa85:	88 1e                	mov    BYTE PTR [esi],bl
c000aa87:	19 c0                	sbb    eax,eax
c000aa89:	31 d2                	xor    edx,edx
c000aa8b:	83 e0 0c             	and    eax,0xc
c000aa8e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000aa92:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000aa9a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000aa9e:	83 f9 01             	cmp    ecx,0x1
c000aaa1:	0f 96 c2             	setbe  dl
c000aaa4:	41                   	inc    ecx
c000aaa5:	01 d0                	add    eax,edx
c000aaa7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000aaaa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000aaae:	83 c4 1c             	add    esp,0x1c
c000aab1:	89 f0                	mov    eax,esi
c000aab3:	5b                   	pop    ebx
c000aab4:	5e                   	pop    esi
c000aab5:	5f                   	pop    edi
c000aab6:	5d                   	pop    ebp
c000aab7:	c2 04 00             	ret    0x4

c000aaba <Clock::timeInDatetimeLocal()>:
c000aaba:	53                   	push   ebx
c000aabb:	83 ec 14             	sub    esp,0x14
c000aabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aac2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aac6:	e8 83 fc ff ff       	call   c000a74e <Clock::timeInSecondsLocal()>
c000aacb:	83 c4 0c             	add    esp,0xc
c000aace:	52                   	push   edx
c000aacf:	50                   	push   eax
c000aad0:	53                   	push   ebx
c000aad1:	e8 a0 fe ff ff       	call   c000a976 <secondsToDatetime(unsigned long long)>
c000aad6:	89 d8                	mov    eax,ebx
c000aad8:	83 c4 14             	add    esp,0x14
c000aadb:	5b                   	pop    ebx
c000aadc:	c2 04 00             	ret    0x4
c000aadf:	90                   	nop

c000aae0 <Device::hibernate()>:
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <Device::wake()>:
c000aae2:	c3                   	ret    
c000aae3:	90                   	nop

c000aae4 <Device::detect()>:
c000aae4:	c3                   	ret    
c000aae5:	90                   	nop

c000aae6 <Device::disableLegacy()>:
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <Device::powerSaving(PowerSavingLevel)>:
c000aae8:	c3                   	ret    
c000aae9:	90                   	nop

c000aaea <DriverlessDevice::close(int, int, void*)>:
c000aaea:	31 c0                	xor    eax,eax
c000aaec:	c3                   	ret    
c000aaed:	90                   	nop

c000aaee <DriverlessDevice::detect()>:
c000aaee:	c3                   	ret    
c000aaef:	90                   	nop

c000aaf0 <DriverlessDevice::open(int, int, void*)>:
c000aaf0:	83 ec 18             	sub    esp,0x18
c000aaf3:	68 90 e3 01 c0       	push   0xc001e390
c000aaf8:	e8 b8 49 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000aafd:	83 c8 ff             	or     eax,0xffffffff
c000ab00:	83 c4 1c             	add    esp,0x1c
c000ab03:	c3                   	ret    

c000ab04 <Device::~Device()>:
c000ab04:	ba f0 e3 01 c0       	mov    edx,0xc001e3f0
c000ab09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab0d:	89 10                	mov    DWORD PTR [eax],edx
c000ab0f:	90                   	nop
c000ab10:	c3                   	ret    
c000ab11:	90                   	nop

c000ab12 <Device::~Device()>:
c000ab12:	83 ec 0c             	sub    esp,0xc
c000ab15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab19:	e8 e6 ff ff ff       	call   c000ab04 <Device::~Device()>
c000ab1e:	83 c4 04             	add    esp,0x4
c000ab21:	83 ec 08             	sub    esp,0x8
c000ab24:	68 58 01 00 00       	push   0x158
c000ab29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2d:	e8 cc eb ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000ab32:	83 c4 10             	add    esp,0x10
c000ab35:	83 c4 0c             	add    esp,0xc
c000ab38:	c3                   	ret    
c000ab39:	90                   	nop

c000ab3a <Device::findAndLoadDriver()>:
c000ab3a:	c7 44 24 04 ae e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e3ae
c000ab42:	e9 98 ec ff ff       	jmp    c00097df <Dbg::kprintf(char const*, ...)>
c000ab47:	90                   	nop

c000ab48 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ab48:	57                   	push   edi
c000ab49:	b9 09 00 00 00       	mov    ecx,0x9
c000ab4e:	56                   	push   esi
c000ab4f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab53:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ab57:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ab61:	81 c7 18 01 00 00    	add    edi,0x118
c000ab67:	fc                   	cld    
c000ab68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab6a:	5e                   	pop    esi
c000ab6b:	5f                   	pop    edi
c000ab6c:	c3                   	ret    
c000ab6d:	90                   	nop

c000ab6e <Device::preOpenACPI(void*, char*, char*)>:
c000ab6e:	57                   	push   edi
c000ab6f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ab74:	56                   	push   esi
c000ab75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ab79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ab7d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ab87:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ab8d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ab93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ab97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab99:	b9 0e 00 00 00       	mov    ecx,0xe
c000ab9e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000aba4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aba8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abaa:	5e                   	pop    esi
c000abab:	5f                   	pop    edi
c000abac:	c3                   	ret    
c000abad:	90                   	nop

c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000abae:	53                   	push   ebx
c000abaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000abb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abbf:	0f b6 c0             	movzx  eax,al
c000abc2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000abc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000abce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000abd2:	5b                   	pop    ebx
c000abd3:	e9 a4 05 00 00       	jmp    c000b17c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000abd8 <Device::getParent()>:
c000abd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abdc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000abe2:	c3                   	ret    
c000abe3:	90                   	nop

c000abe4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000abe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000abe8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000abec:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000abf1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000abf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000abf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abfd:	e9 d9 06 00 00       	jmp    c000b2db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ac02 <Device::addChild(Device*)>:
c000ac02:	53                   	push   ebx
c000ac03:	83 ec 08             	sub    esp,0x8
c000ac06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ac14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ac1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ac1c:	85 d2                	test   edx,edx
c000ac1e:	74 04                	je     c000ac24 <Device::addChild(Device*)+0x22>
c000ac20:	89 d3                	mov    ebx,edx
c000ac22:	eb f6                	jmp    c000ac1a <Device::addChild(Device*)+0x18>
c000ac24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	6a 08                	push   0x8
c000ac2c:	e8 24 be ff ff       	call   c0006a55 <malloc>
c000ac31:	89 03                	mov    DWORD PTR [ebx],eax
c000ac33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ac39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ac40:	83 c4 18             	add    esp,0x18
c000ac43:	5b                   	pop    ebx
c000ac44:	c3                   	ret    
c000ac45:	90                   	nop

c000ac46 <Device::removeAllChildren()>:
c000ac46:	56                   	push   esi
c000ac47:	53                   	push   ebx
c000ac48:	52                   	push   edx
c000ac49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ac53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ac56:	74 17                	je     c000ac6f <Device::removeAllChildren()+0x29>
c000ac58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac5b:	85 c0                	test   eax,eax
c000ac5d:	74 0c                	je     c000ac6b <Device::removeAllChildren()+0x25>
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac64:	50                   	push   eax
c000ac65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ac6d:	eb e4                	jmp    c000ac53 <Device::removeAllChildren()+0xd>
c000ac6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ac75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ac7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ac81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ac88:	58                   	pop    eax
c000ac89:	5b                   	pop    ebx
c000ac8a:	5e                   	pop    esi
c000ac8b:	c3                   	ret    

c000ac8c <Device::hibernateAll()>:
c000ac8c:	53                   	push   ebx
c000ac8d:	83 ec 14             	sub    esp,0x14
c000ac90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ac94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ac96:	53                   	push   ebx
c000ac97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aca6:	74 0f                	je     c000acb7 <Device::hibernateAll()+0x2b>
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000acae:	e8 d9 ff ff ff       	call   c000ac8c <Device::hibernateAll()>
c000acb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000acb5:	eb e9                	jmp    c000aca0 <Device::hibernateAll()+0x14>
c000acb7:	83 c4 08             	add    esp,0x8
c000acba:	5b                   	pop    ebx
c000acbb:	c3                   	ret    

c000acbc <Device::wakeAll()>:
c000acbc:	53                   	push   ebx
c000acbd:	83 ec 14             	sub    esp,0x14
c000acc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000acc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acc6:	53                   	push   ebx
c000acc7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000acca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000acd6:	74 0f                	je     c000ace7 <Device::wakeAll()+0x2b>
c000acd8:	83 ec 0c             	sub    esp,0xc
c000acdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000acde:	e8 d9 ff ff ff       	call   c000acbc <Device::wakeAll()>
c000ace3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ace5:	eb e9                	jmp    c000acd0 <Device::wakeAll()+0x14>
c000ace7:	83 c4 08             	add    esp,0x8
c000acea:	5b                   	pop    ebx
c000aceb:	c3                   	ret    

c000acec <Device::detectAll()>:
c000acec:	53                   	push   ebx
c000aced:	83 ec 14             	sub    esp,0x14
c000acf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000acf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acf6:	53                   	push   ebx
c000acf7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000acfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad06:	74 0f                	je     c000ad17 <Device::detectAll()+0x2b>
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ad0e:	e8 d9 ff ff ff       	call   c000acec <Device::detectAll()>
c000ad13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad15:	eb e9                	jmp    c000ad00 <Device::detectAll()+0x14>
c000ad17:	83 c4 08             	add    esp,0x8
c000ad1a:	5b                   	pop    ebx
c000ad1b:	c3                   	ret    

c000ad1c <Device::disableLegacyAll()>:
c000ad1c:	c3                   	ret    
c000ad1d:	90                   	nop

c000ad1e <Device::loadDriversForAll()>:
c000ad1e:	c3                   	ret    
c000ad1f:	90                   	nop

c000ad20 <Device::closeAll()>:
c000ad20:	53                   	push   ebx
c000ad21:	83 ec 08             	sub    esp,0x8
c000ad24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad28:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad2a:	6a 00                	push   0x0
c000ad2c:	6a 00                	push   0x0
c000ad2e:	6a 00                	push   0x0
c000ad30:	53                   	push   ebx
c000ad31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ad34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ad3a:	83 c4 10             	add    esp,0x10
c000ad3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad40:	74 0f                	je     c000ad51 <Device::closeAll()+0x31>
c000ad42:	83 ec 0c             	sub    esp,0xc
c000ad45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ad48:	e8 d3 ff ff ff       	call   c000ad20 <Device::closeAll()>
c000ad4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad4f:	eb e9                	jmp    c000ad3a <Device::closeAll()+0x1a>
c000ad51:	83 c4 08             	add    esp,0x8
c000ad54:	5b                   	pop    ebx
c000ad55:	c3                   	ret    

c000ad56 <Device::powerSavingAll(PowerSavingLevel)>:
c000ad56:	56                   	push   esi
c000ad57:	53                   	push   ebx
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad5f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ad63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad65:	56                   	push   esi
c000ad66:	53                   	push   ebx
c000ad67:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ad6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ad70:	83 c4 10             	add    esp,0x10
c000ad73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad76:	74 0f                	je     c000ad87 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ad78:	52                   	push   edx
c000ad79:	52                   	push   edx
c000ad7a:	56                   	push   esi
c000ad7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ad7e:	e8 d3 ff ff ff       	call   c000ad56 <Device::powerSavingAll(PowerSavingLevel)>
c000ad83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad85:	eb e9                	jmp    c000ad70 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ad87:	58                   	pop    eax
c000ad88:	5b                   	pop    ebx
c000ad89:	5e                   	pop    esi
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <Device::setName(char const*)>:
c000ad8c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ad94:	e9 cb 57 ff ff       	jmp    c0000564 <strcpy>
c000ad99:	90                   	nop

c000ad9a <Device::Device(char const*)>:
c000ad9a:	83 ec 1c             	sub    esp,0x1c
c000ad9d:	ba f0 e3 01 c0       	mov    edx,0xc001e3f0
c000ada2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ada6:	89 10                	mov    DWORD PTR [eax],edx
c000ada8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adac:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000adb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000adc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000add2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000add6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ade0:	83 ec 08             	sub    esp,0x8
c000ade3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ade7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000adeb:	e8 9c ff ff ff       	call   c000ad8c <Device::setName(char const*)>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000adfb:	83 ec 0c             	sub    esp,0xc
c000adfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae02:	e8 4e bc ff ff       	call   c0006a55 <malloc>
c000ae07:	83 c4 10             	add    esp,0x10
c000ae0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ae17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ae1b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000ae21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae25:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ae2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae35:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ae3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ae42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae46:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ae4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae51:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000ae58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae5c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ae66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae6a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ae74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ae82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae86:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ae90:	90                   	nop
c000ae91:	83 c4 1c             	add    esp,0x1c
c000ae94:	c3                   	ret    
c000ae95:	90                   	nop

c000ae96 <Device::getName()>:
c000ae96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae9a:	05 d0 00 00 00       	add    eax,0xd0
c000ae9f:	c3                   	ret    

c000aea0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000aea0:	83 ec 0c             	sub    esp,0xc
c000aea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea7:	83 ec 08             	sub    esp,0x8
c000aeaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeae:	50                   	push   eax
c000aeaf:	e8 e6 fe ff ff       	call   c000ad9a <Device::Device(char const*)>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	ba 1c e4 01 c0       	mov    edx,0xc001e41c
c000aebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec0:	89 10                	mov    DWORD PTR [eax],edx
c000aec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000aed0:	90                   	nop
c000aed1:	83 c4 0c             	add    esp,0xc
c000aed4:	c3                   	ret    
c000aed5:	90                   	nop

c000aed6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000aed6:	57                   	push   edi
c000aed7:	56                   	push   esi
c000aed8:	53                   	push   ebx
c000aed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000aee1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aee5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000aeeb:	75 0c                	jne    c000aef9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000aeed:	52                   	push   edx
c000aeee:	52                   	push   edx
c000aeef:	53                   	push   ebx
c000aef0:	56                   	push   esi
c000aef1:	e8 7c 1b 01 00       	call   c001ca72 <LinkedList<Device>::addElement(Device*)>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aeff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af02:	74 12                	je     c000af16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000af04:	50                   	push   eax
c000af05:	57                   	push   edi
c000af06:	56                   	push   esi
c000af07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af0a:	e8 c7 ff ff ff       	call   c000aed6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000af0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	eb e9                	jmp    c000aeff <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000af16:	5b                   	pop    ebx
c000af17:	5e                   	pop    esi
c000af18:	5f                   	pop    edi
c000af19:	c3                   	ret    

c000af1a <getDevicesOfType(DeviceType)>:
c000af1a:	53                   	push   ebx
c000af1b:	83 ec 14             	sub    esp,0x14
c000af1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af22:	53                   	push   ebx
c000af23:	e8 26 1c 01 00       	call   c001cb4e <LinkedList<Device>::LinkedList()>
c000af28:	83 c4 0c             	add    esp,0xc
c000af2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af2f:	53                   	push   ebx
c000af30:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000af36:	e8 9b ff ff ff       	call   c000aed6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000af3b:	89 d8                	mov    eax,ebx
c000af3d:	83 c4 18             	add    esp,0x18
c000af40:	5b                   	pop    ebx
c000af41:	c2 04 00             	ret    0x4

c000af44 <HardDiskController::HardDiskController(char const*)>:
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af52:	50                   	push   eax
c000af53:	e8 42 fe ff ff       	call   c000ad9a <Device::Device(char const*)>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	ba 48 e4 01 c0       	mov    edx,0xc001e448
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	89 10                	mov    DWORD PTR [eax],edx
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000af74:	90                   	nop
c000af75:	83 c4 0c             	add    esp,0xc
c000af78:	c3                   	ret    
c000af79:	90                   	nop
c000af7a:	66 90                	xchg   ax,ax

c000af7c <HardDiskController::~HardDiskController()>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	ba 48 e4 01 c0       	mov    edx,0xc001e448
c000af84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af88:	89 10                	mov    DWORD PTR [eax],edx
c000af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8e:	83 ec 0c             	sub    esp,0xc
c000af91:	50                   	push   eax
c000af92:	e8 6d fb ff ff       	call   c000ab04 <Device::~Device()>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	90                   	nop
c000af9b:	83 c4 0c             	add    esp,0xc
c000af9e:	c3                   	ret    
c000af9f:	90                   	nop

c000afa0 <HardDiskController::~HardDiskController()>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	83 ec 0c             	sub    esp,0xc
c000afa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afaa:	e8 cd ff ff ff       	call   c000af7c <HardDiskController::~HardDiskController()>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	83 ec 08             	sub    esp,0x8
c000afb5:	68 58 01 00 00       	push   0x158
c000afba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afbe:	e8 3b e7 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	83 c4 0c             	add    esp,0xc
c000afc9:	c3                   	ret    

c000afca <PhysicalDisk::eject()>:
c000afca:	83 c8 ff             	or     eax,0xffffffff
c000afcd:	c3                   	ret    

c000afce <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000afce:	83 ec 0c             	sub    esp,0xc
c000afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd5:	83 ec 08             	sub    esp,0x8
c000afd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afdc:	50                   	push   eax
c000afdd:	e8 b8 fd ff ff       	call   c000ad9a <Device::Device(char const*)>
c000afe2:	83 c4 10             	add    esp,0x10
c000afe5:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	89 10                	mov    DWORD PTR [eax],edx
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b01c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop

c000b036 <PhysicalDisk::startCache()>:
c000b036:	56                   	push   esi
c000b037:	53                   	push   ebx
c000b038:	83 ec 10             	sub    esp,0x10
c000b03b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b03f:	6a 44                	push   0x44
c000b041:	e8 0f ba ff ff       	call   c0006a55 <malloc>
c000b046:	89 c6                	mov    esi,eax
c000b048:	58                   	pop    eax
c000b049:	5a                   	pop    edx
c000b04a:	53                   	push   ebx
c000b04b:	56                   	push   esi
c000b04c:	e8 87 15 00 00       	call   c000c5d8 <VCache::VCache(PhysicalDisk*)>
c000b051:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b057:	83 c4 14             	add    esp,0x14
c000b05a:	5b                   	pop    ebx
c000b05b:	5e                   	pop    esi
c000b05c:	c3                   	ret    
c000b05d:	90                   	nop

c000b05e <PhysicalDisk::~PhysicalDisk()>:
c000b05e:	83 ec 0c             	sub    esp,0xc
c000b061:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c000b066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06a:	89 10                	mov    DWORD PTR [eax],edx
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	50                   	push   eax
c000b074:	e8 8b fa ff ff       	call   c000ab04 <Device::~Device()>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	90                   	nop
c000b07d:	83 c4 0c             	add    esp,0xc
c000b080:	c3                   	ret    
c000b081:	90                   	nop

c000b082 <PhysicalDisk::~PhysicalDisk()>:
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	83 ec 0c             	sub    esp,0xc
c000b088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08c:	e8 cd ff ff ff       	call   c000b05e <PhysicalDisk::~PhysicalDisk()>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	83 ec 08             	sub    esp,0x8
c000b097:	68 6c 01 00 00       	push   0x16c
c000b09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a0:	e8 59 e6 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	83 c4 0c             	add    esp,0xc
c000b0ab:	c3                   	ret    

c000b0ac <int_handler>:
c000b0ac:	55                   	push   ebp
c000b0ad:	57                   	push   edi
c000b0ae:	56                   	push   esi
c000b0af:	53                   	push   ebx
c000b0b0:	83 ec 0c             	sub    esp,0xc
c000b0b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b0b7:	80 3d 04 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f04,0x0
c000b0be:	74 0b                	je     c000b0cb <int_handler+0x1f>
c000b0c0:	fa                   	cli    
c000b0c1:	f4                   	hlt    
c000b0c2:	80 3d 04 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f04,0x0
c000b0c9:	75 f5                	jne    c000b0c0 <int_handler+0x14>
c000b0cb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b0ce:	8d 46 e0             	lea    eax,[esi-0x20]
c000b0d1:	83 f8 17             	cmp    eax,0x17
c000b0d4:	76 3e                	jbe    c000b114 <int_handler+0x68>
c000b0d6:	c1 e6 04             	shl    esi,0x4
c000b0d9:	31 db                	xor    ebx,ebx
c000b0db:	8d ae 80 15 02 c0    	lea    ebp,[esi-0x3ffdea80]
c000b0e1:	81 c6 80 05 02 c0    	add    esi,0xc0020580
c000b0e7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b0eb:	85 c0                	test   eax,eax
c000b0ed:	74 13                	je     c000b102 <int_handler+0x56>
c000b0ef:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b0f2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b0f6:	74 2a                	je     c000b122 <int_handler+0x76>
c000b0f8:	83 ec 08             	sub    esp,0x8
c000b0fb:	52                   	push   edx
c000b0fc:	57                   	push   edi
c000b0fd:	ff d0                	call   eax
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	43                   	inc    ebx
c000b103:	83 fb 04             	cmp    ebx,0x4
c000b106:	75 df                	jne    c000b0e7 <int_handler+0x3b>
c000b108:	83 c4 0c             	add    esp,0xc
c000b10b:	31 c0                	xor    eax,eax
c000b10d:	5b                   	pop    ebx
c000b10e:	31 d2                	xor    edx,edx
c000b110:	5e                   	pop    esi
c000b111:	5f                   	pop    edi
c000b112:	5d                   	pop    ebp
c000b113:	c3                   	ret    
c000b114:	83 ec 0c             	sub    esp,0xc
c000b117:	50                   	push   eax
c000b118:	e8 5f a7 00 00       	call   c001587c <Hal::endOfInterrupt(int)>
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	eb b4                	jmp    c000b0d6 <int_handler+0x2a>
c000b122:	83 ec 08             	sub    esp,0x8
c000b125:	52                   	push   edx
c000b126:	57                   	push   edi
c000b127:	ff d0                	call   eax
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	83 c4 0c             	add    esp,0xc
c000b12f:	5b                   	pop    ebx
c000b130:	5e                   	pop    esi
c000b131:	5f                   	pop    edi
c000b132:	5d                   	pop    ebp
c000b133:	c3                   	ret    

c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b134:	56                   	push   esi
c000b135:	31 c0                	xor    eax,eax
c000b137:	53                   	push   ebx
c000b138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b13c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b140:	89 ca                	mov    edx,ecx
c000b142:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b146:	c1 e2 04             	shl    edx,0x4
c000b149:	83 bc 82 80 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea80],0x0
c000b151:	74 15                	je     c000b168 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b153:	40                   	inc    eax
c000b154:	83 f8 04             	cmp    eax,0x4
c000b157:	75 f0                	jne    c000b149 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b159:	c7 44 24 0c a4 e4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e4a4
c000b161:	5b                   	pop    ebx
c000b162:	5e                   	pop    esi
c000b163:	e9 4d 43 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c000b168:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b16b:	89 1c 85 80 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea80],ebx
c000b172:	89 34 85 80 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa80],esi
c000b179:	5b                   	pop    ebx
c000b17a:	5e                   	pop    esi
c000b17b:	c3                   	ret    

c000b17c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b17c:	57                   	push   edi
c000b17d:	8b 15 68 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020468
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b18d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b194:	74 55                	je     c000b1eb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b196:	89 c7                	mov    edi,eax
c000b198:	84 c0                	test   al,al
c000b19a:	74 1e                	je     c000b1ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b19c:	83 fe 0f             	cmp    esi,0xf
c000b19f:	0f 8f cc 00 00 00    	jg     c000b271 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000b1a5:	0f b6 b6 20 fe 01 c0 	movzx  esi,BYTE PTR [esi-0x3ffe01e0]
c000b1ac:	66 8b bc 36 20 2d 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffdd2e0]
c000b1b4:	66 d1 ef             	shr    di,1
c000b1b7:	83 e7 01             	and    edi,0x1
c000b1ba:	83 ec 08             	sub    esp,0x8
c000b1bd:	31 db                	xor    ebx,ebx
c000b1bf:	ff 35 a0 43 02 c0    	push   DWORD PTR ds:0xc00243a0
c000b1c5:	68 b1 e4 01 c0       	push   0xc001e4b1
c000b1ca:	e8 10 e6 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c000b1d7:	85 c0                	test   eax,eax
c000b1d9:	7f 51                	jg     c000b22c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000b1db:	83 ec 0c             	sub    esp,0xc
c000b1de:	68 c8 e4 01 c0       	push   0xc001e4c8
c000b1e3:	e8 cd 42 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b1ee:	31 d2                	xor    edx,edx
c000b1f0:	89 c8                	mov    eax,ecx
c000b1f2:	c1 e0 04             	shl    eax,0x4
c000b1f5:	8b 9c 90 80 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea80]
c000b1fc:	85 db                	test   ebx,ebx
c000b1fe:	0f 84 84 00 00 00    	je     c000b288 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000b204:	42                   	inc    edx
c000b205:	83 fa 04             	cmp    edx,0x4
c000b208:	75 eb                	jne    c000b1f5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000b20a:	83 ec 0c             	sub    esp,0xc
c000b20d:	68 1c e5 01 c0       	push   0xc001e51c
c000b212:	e8 9e 42 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b21f:	5b                   	pop    ebx
c000b220:	5e                   	pop    esi
c000b221:	5f                   	pop    edi
c000b222:	c3                   	ret    
c000b223:	43                   	inc    ebx
c000b224:	39 1d a0 43 02 c0    	cmp    DWORD PTR ds:0xc00243a0,ebx
c000b22a:	7e af                	jle    c000b1db <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000b22c:	83 ec 08             	sub    esp,0x8
c000b22f:	56                   	push   esi
c000b230:	ff 34 9d c0 43 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbc40]
c000b237:	e8 8c 08 01 00       	call   c001bac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b23c:	83 c4 10             	add    esp,0x10
c000b23f:	84 c0                	test   al,al
c000b241:	74 e0                	je     c000b223 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000b243:	50                   	push   eax
c000b244:	89 f8                	mov    eax,edi
c000b246:	0f b6 f8             	movzx  edi,al
c000b249:	8d 46 20             	lea    eax,[esi+0x20]
c000b24c:	57                   	push   edi
c000b24d:	0f b6 c0             	movzx  eax,al
c000b250:	6a 00                	push   0x0
c000b252:	50                   	push   eax
c000b253:	89 f0                	mov    eax,esi
c000b255:	6a 00                	push   0x0
c000b257:	0f b6 c0             	movzx  eax,al
c000b25a:	6a 00                	push   0x0
c000b25c:	50                   	push   eax
c000b25d:	ff 34 9d c0 43 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbc40]
c000b264:	e8 c9 09 01 00       	call   c001bc32 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b269:	83 c4 20             	add    esp,0x20
c000b26c:	e9 7a ff ff ff       	jmp    c000b1eb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b271:	83 ec 0c             	sub    esp,0xc
c000b274:	31 ff                	xor    edi,edi
c000b276:	68 e4 e4 01 c0       	push   0xc001e4e4
c000b27b:	e8 35 42 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	e9 32 ff ff ff       	jmp    c000b1ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b288:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b28b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b28f:	89 14 85 80 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea80],edx
c000b296:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b29a:	5b                   	pop    ebx
c000b29b:	89 14 85 80 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa80],edx
c000b2a2:	89 f0                	mov    eax,esi
c000b2a4:	5e                   	pop    esi
c000b2a5:	5f                   	pop    edi
c000b2a6:	c3                   	ret    

c000b2a7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b2a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2af:	c1 e0 04             	shl    eax,0x4
c000b2b2:	8d 50 10             	lea    edx,[eax+0x10]
c000b2b5:	39 88 80 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea80],ecx
c000b2bb:	74 08                	je     c000b2c5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b2bd:	83 c0 04             	add    eax,0x4
c000b2c0:	39 d0                	cmp    eax,edx
c000b2c2:	75 f1                	jne    c000b2b5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b2c4:	c3                   	ret    
c000b2c5:	c7 80 80 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea80],0x0
c000b2cf:	c7 80 80 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa80],0x0
c000b2d9:	eb e2                	jmp    c000b2bd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b2db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b2db:	53                   	push   ebx
c000b2dc:	83 ec 08             	sub    esp,0x8
c000b2df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2e3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b2e8:	74 0e                	je     c000b2f8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b2ea:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000b2ef:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b2f6:	75 37                	jne    c000b32f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fc:	83 c0 20             	add    eax,0x20
c000b2ff:	c1 e0 04             	shl    eax,0x4
c000b302:	8d 50 10             	lea    edx,[eax+0x10]
c000b305:	39 98 80 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea80],ebx
c000b30b:	74 0c                	je     c000b319 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b30d:	83 c0 04             	add    eax,0x4
c000b310:	39 d0                	cmp    eax,edx
c000b312:	75 f1                	jne    c000b305 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b314:	83 c4 08             	add    esp,0x8
c000b317:	5b                   	pop    ebx
c000b318:	c3                   	ret    
c000b319:	c7 80 80 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea80],0x0
c000b323:	c7 80 80 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa80],0x0
c000b32d:	eb de                	jmp    c000b30d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b32f:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b334:	7f 11                	jg     c000b347 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000b336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b33a:	0f b6 80 20 fe 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe01e0]
c000b341:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b345:	eb b1                	jmp    c000b2f8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b347:	83 ec 0c             	sub    esp,0xc
c000b34a:	68 d5 e4 01 c0       	push   0xc001e4d5
c000b34f:	e8 61 41 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000b354:	83 c4 10             	add    esp,0x10
c000b357:	eb 9f                	jmp    c000b2f8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b359 <setupINTS()>:
c000b359:	31 c0                	xor    eax,eax
c000b35b:	c7 80 80 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea80],0x0
c000b365:	c7 80 80 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa80],0x0
c000b36f:	c7 80 84 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea7c],0x0
c000b379:	c7 80 84 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa7c],0x0
c000b383:	c7 80 88 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea78],0x0
c000b38d:	c7 80 88 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa78],0x0
c000b397:	c7 80 8c 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea74],0x0
c000b3a1:	c7 80 8c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa74],0x0
c000b3ab:	83 c0 10             	add    eax,0x10
c000b3ae:	3d 00 10 00 00       	cmp    eax,0x1000
c000b3b3:	75 a6                	jne    c000b35b <setupINTS()+0x2>
c000b3b5:	c3                   	ret    

c000b3b6 <convertLegacyIRQNumber(int)>:
c000b3b6:	83 ec 0c             	sub    esp,0xc
c000b3b9:	8b 15 68 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020468
c000b3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b3ca:	74 0c                	je     c000b3d8 <convertLegacyIRQNumber(int)+0x22>
c000b3cc:	83 f8 0f             	cmp    eax,0xf
c000b3cf:	7f 0b                	jg     c000b3dc <convertLegacyIRQNumber(int)+0x26>
c000b3d1:	0f b6 80 20 fe 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe01e0]
c000b3d8:	83 c4 0c             	add    esp,0xc
c000b3db:	c3                   	ret    
c000b3dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	68 e4 e4 01 c0       	push   0xc001e4e4
c000b3e8:	e8 c8 40 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000b3ed:	83 c4 10             	add    esp,0x10
c000b3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f4:	83 c4 0c             	add    esp,0xc
c000b3f7:	c3                   	ret    

c000b3f8 <startGUI(void*)>:
c000b3f8:	55                   	push   ebp
c000b3f9:	89 e5                	mov    ebp,esp
c000b3fb:	53                   	push   ebx
c000b3fc:	83 ec 04             	sub    esp,0x4
c000b3ff:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b404:	48                   	dec    eax
c000b405:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000b40a:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b40f:	85 c0                	test   eax,eax
c000b411:	75 01                	jne    c000b414 <startGUI(void*)+0x1c>
c000b413:	fb                   	sti    
c000b414:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c000b41a:	83 ec 08             	sub    esp,0x8
c000b41d:	6a 01                	push   0x1
c000b41f:	68 41 e5 01 c0       	push   0xc001e541
c000b424:	e8 31 6b 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	83 ec 08             	sub    esp,0x8
c000b42f:	53                   	push   ebx
c000b430:	50                   	push   eax
c000b431:	e8 55 6d 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000b436:	83 c4 10             	add    esp,0x10
c000b439:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c000b43f:	83 ec 08             	sub    esp,0x8
c000b442:	6a 01                	push   0x1
c000b444:	68 5b e5 01 c0       	push   0xc001e55b
c000b449:	e8 0c 6b 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	83 ec 08             	sub    esp,0x8
c000b454:	53                   	push   ebx
c000b455:	50                   	push   eax
c000b456:	e8 30 6d 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	90                   	nop
c000b45f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b462:	c9                   	leave  
c000b463:	c3                   	ret    

c000b464 <startGUIVESA(void*)>:
c000b464:	55                   	push   ebp
c000b465:	89 e5                	mov    ebp,esp
c000b467:	53                   	push   ebx
c000b468:	83 ec 04             	sub    esp,0x4
c000b46b:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b470:	48                   	dec    eax
c000b471:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000b476:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b47b:	85 c0                	test   eax,eax
c000b47d:	75 01                	jne    c000b480 <startGUIVESA(void*)+0x1c>
c000b47f:	fb                   	sti    
c000b480:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c000b486:	83 ec 08             	sub    esp,0x8
c000b489:	6a 01                	push   0x1
c000b48b:	68 79 e5 01 c0       	push   0xc001e579
c000b490:	e8 c5 6a 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000b495:	83 c4 10             	add    esp,0x10
c000b498:	83 ec 08             	sub    esp,0x8
c000b49b:	53                   	push   ebx
c000b49c:	50                   	push   eax
c000b49d:	e8 e9 6c 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c000b4ab:	83 ec 08             	sub    esp,0x8
c000b4ae:	6a 01                	push   0x1
c000b4b0:	68 5b e5 01 c0       	push   0xc001e55b
c000b4b5:	e8 a0 6a 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	83 ec 08             	sub    esp,0x8
c000b4c0:	53                   	push   ebx
c000b4c1:	50                   	push   eax
c000b4c2:	e8 c4 6c 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	90                   	nop
c000b4cb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b4ce:	c9                   	leave  
c000b4cf:	c3                   	ret    

c000b4d0 <sendKeyToTerminal(unsigned char)>:
c000b4d0:	55                   	push   ebp
c000b4d1:	89 e5                	mov    ebp,esp
c000b4d3:	83 ec 28             	sub    esp,0x28
c000b4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b4dc:	a1 b4 04 02 c0       	mov    eax,ds:0xc00204b4
c000b4e1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000b4e5:	83 ec 08             	sub    esp,0x8
c000b4e8:	52                   	push   edx
c000b4e9:	50                   	push   eax
c000b4ea:	e8 d1 c8 ff ff       	call   c0007dc0 <VgaText::receiveKey(unsigned char)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b4f6:	0f 85 8f 00 00 00    	jne    c000b58b <sendKeyToTerminal(unsigned char)+0xbb>
c000b4fc:	fa                   	cli    
c000b4fd:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b502:	40                   	inc    eax
c000b503:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000b508:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c000b50d:	40                   	inc    eax
c000b50e:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c000b513:	a1 80 25 02 c0       	mov    eax,ds:0xc0022580
c000b518:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b51b:	c7 05 80 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022580,0x0
c000b525:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b529:	74 1f                	je     c000b54a <sendKeyToTerminal(unsigned char)+0x7a>
c000b52b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b52e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b531:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b534:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b537:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b53a:	83 ec 0c             	sub    esp,0xc
c000b53d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b540:	e8 af 78 00 00       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	eb db                	jmp    c000b525 <sendKeyToTerminal(unsigned char)+0x55>
c000b54a:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c000b54f:	48                   	dec    eax
c000b550:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c000b555:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c000b55a:	85 c0                	test   eax,eax
c000b55c:	75 18                	jne    c000b576 <sendKeyToTerminal(unsigned char)+0xa6>
c000b55e:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c000b563:	85 c0                	test   eax,eax
c000b565:	74 0f                	je     c000b576 <sendKeyToTerminal(unsigned char)+0xa6>
c000b567:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c000b571:	e8 c2 73 00 00       	call   c0012938 <schedule()>
c000b576:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b57b:	48                   	dec    eax
c000b57c:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000b581:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000b586:	85 c0                	test   eax,eax
c000b588:	75 01                	jne    c000b58b <sendKeyToTerminal(unsigned char)+0xbb>
c000b58a:	fb                   	sti    
c000b58b:	90                   	nop
c000b58c:	c9                   	leave  
c000b58d:	c3                   	ret    

c000b58e <sendKeyboardToken(KeyboardToken)>:
c000b58e:	55                   	push   ebp
c000b58f:	89 e5                	mov    ebp,esp
c000b591:	83 ec 18             	sub    esp,0x18
c000b594:	e8 e1 41 00 00       	call   c000f77a <Krnl::userIOReceived()>
c000b599:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b59f:	0f b7 c0             	movzx  eax,ax
c000b5a2:	83 f2 01             	xor    edx,0x1
c000b5a5:	88 90 a0 25 02 c0    	mov    BYTE PTR [eax-0x3ffdda60],dl
c000b5ab:	a1 88 25 02 c0       	mov    eax,ds:0xc0022588
c000b5b0:	85 c0                	test   eax,eax
c000b5b2:	74 24                	je     c000b5d8 <sendKeyboardToken(KeyboardToken)+0x4a>
c000b5b4:	8b 0d 88 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022588
c000b5ba:	83 ec 04             	sub    esp,0x4
c000b5bd:	68 a0 25 02 c0       	push   0xc00225a0
c000b5c2:	83 ec 08             	sub    esp,0x8
c000b5c5:	89 e2                	mov    edx,esp
c000b5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5ca:	89 02                	mov    DWORD PTR [edx],eax
c000b5cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b5cf:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b5d3:	ff d1                	call   ecx
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b5dc:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b5df:	a0 a8 29 02 c0       	mov    al,ds:0xc00229a8
c000b5e4:	38 c2                	cmp    dl,al
c000b5e6:	74 1c                	je     c000b604 <sendKeyboardToken(KeyboardToken)+0x76>
c000b5e8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b5eb:	a2 a8 29 02 c0       	mov    ds:0xc00229a8,al
c000b5f0:	a0 a8 29 02 c0       	mov    al,ds:0xc00229a8
c000b5f5:	0f b6 c0             	movzx  eax,al
c000b5f8:	83 ec 0c             	sub    esp,0xc
c000b5fb:	50                   	push   eax
c000b5fc:	e8 15 bf ff ff       	call   c0007516 <setTerminalScrollLock(bool)>
c000b601:	83 c4 10             	add    esp,0x10
c000b604:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b607:	84 c0                	test   al,al
c000b609:	0f 84 ae 00 00 00    	je     c000b6bd <sendKeyboardToken(KeyboardToken)+0x12f>
c000b60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b612:	66 3d 10 03          	cmp    ax,0x310
c000b616:	75 06                	jne    c000b61e <sendKeyboardToken(KeyboardToken)+0x90>
c000b618:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b61e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b621:	66 3d 11 03          	cmp    ax,0x311
c000b625:	75 06                	jne    c000b62d <sendKeyboardToken(KeyboardToken)+0x9f>
c000b627:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b630:	66 3d 12 03          	cmp    ax,0x312
c000b634:	75 06                	jne    c000b63c <sendKeyboardToken(KeyboardToken)+0xae>
c000b636:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b63c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b63f:	66 3d 13 03          	cmp    ax,0x313
c000b643:	75 06                	jne    c000b64b <sendKeyboardToken(KeyboardToken)+0xbd>
c000b645:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b64e:	66 3d 14 03          	cmp    ax,0x314
c000b652:	75 06                	jne    c000b65a <sendKeyboardToken(KeyboardToken)+0xcc>
c000b654:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b65a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b65d:	66 3d 15 03          	cmp    ax,0x315
c000b661:	75 06                	jne    c000b669 <sendKeyboardToken(KeyboardToken)+0xdb>
c000b663:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b66c:	66 3d 16 03          	cmp    ax,0x316
c000b670:	75 06                	jne    c000b678 <sendKeyboardToken(KeyboardToken)+0xea>
c000b672:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b67b:	66 3d 17 03          	cmp    ax,0x317
c000b67f:	75 06                	jne    c000b687 <sendKeyboardToken(KeyboardToken)+0xf9>
c000b681:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b68a:	66 3d 18 03          	cmp    ax,0x318
c000b68e:	75 06                	jne    c000b696 <sendKeyboardToken(KeyboardToken)+0x108>
c000b690:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b699:	66 3d 19 03          	cmp    ax,0x319
c000b69d:	75 06                	jne    c000b6a5 <sendKeyboardToken(KeyboardToken)+0x117>
c000b69f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a8:	66 3d 1a 03          	cmp    ax,0x31a
c000b6ac:	0f 85 c9 00 00 00    	jne    c000b77b <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b6b2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b6b8:	e9 be 00 00 00       	jmp    c000b77b <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c0:	66 3d 10 03          	cmp    ax,0x310
c000b6c4:	75 0a                	jne    c000b6d0 <sendKeyboardToken(KeyboardToken)+0x142>
c000b6c6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b6cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d3:	66 3d 11 03          	cmp    ax,0x311
c000b6d7:	75 0a                	jne    c000b6e3 <sendKeyboardToken(KeyboardToken)+0x155>
c000b6d9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b6df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e6:	66 3d 12 03          	cmp    ax,0x312
c000b6ea:	75 0a                	jne    c000b6f6 <sendKeyboardToken(KeyboardToken)+0x168>
c000b6ec:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b6f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b6f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f9:	66 3d 13 03          	cmp    ax,0x313
c000b6fd:	75 0a                	jne    c000b709 <sendKeyboardToken(KeyboardToken)+0x17b>
c000b6ff:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b705:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	66 3d 14 03          	cmp    ax,0x314
c000b710:	75 0a                	jne    c000b71c <sendKeyboardToken(KeyboardToken)+0x18e>
c000b712:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b718:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b71f:	66 3d 15 03          	cmp    ax,0x315
c000b723:	75 0a                	jne    c000b72f <sendKeyboardToken(KeyboardToken)+0x1a1>
c000b725:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b72b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b732:	66 3d 16 03          	cmp    ax,0x316
c000b736:	75 0a                	jne    c000b742 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000b738:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b73e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b745:	66 3d 17 03          	cmp    ax,0x317
c000b749:	75 0a                	jne    c000b755 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000b74b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b751:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b758:	66 3d 18 03          	cmp    ax,0x318
c000b75c:	75 0a                	jne    c000b768 <sendKeyboardToken(KeyboardToken)+0x1da>
c000b75e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b764:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76b:	66 3d 19 03          	cmp    ax,0x319
c000b76f:	75 0a                	jne    c000b77b <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b771:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b777:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b77b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77e:	66 3d 00 02          	cmp    ax,0x200
c000b782:	75 2c                	jne    c000b7b0 <sendKeyboardToken(KeyboardToken)+0x222>
c000b784:	a0 a0 29 02 c0       	mov    al,ds:0xc00229a0
c000b789:	83 f0 01             	xor    eax,0x1
c000b78c:	84 c0                	test   al,al
c000b78e:	74 20                	je     c000b7b0 <sendKeyboardToken(KeyboardToken)+0x222>
c000b790:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c000b795:	6a 01                	push   0x1
c000b797:	6a 00                	push   0x0
c000b799:	68 f8 b3 00 c0       	push   0xc000b3f8
c000b79e:	50                   	push   eax
c000b79f:	e8 78 6f 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c000b7a4:	83 c4 10             	add    esp,0x10
c000b7a7:	c6 05 a0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229a0,0x1
c000b7ae:	eb 33                	jmp    c000b7e3 <sendKeyboardToken(KeyboardToken)+0x255>
c000b7b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b3:	66 3d 01 02          	cmp    ax,0x201
c000b7b7:	75 2a                	jne    c000b7e3 <sendKeyboardToken(KeyboardToken)+0x255>
c000b7b9:	a0 a0 29 02 c0       	mov    al,ds:0xc00229a0
c000b7be:	83 f0 01             	xor    eax,0x1
c000b7c1:	84 c0                	test   al,al
c000b7c3:	74 1e                	je     c000b7e3 <sendKeyboardToken(KeyboardToken)+0x255>
c000b7c5:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c000b7ca:	6a 01                	push   0x1
c000b7cc:	6a 00                	push   0x0
c000b7ce:	68 64 b4 00 c0       	push   0xc000b464
c000b7d3:	50                   	push   eax
c000b7d4:	e8 43 6f 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c000b7d9:	83 c4 10             	add    esp,0x10
c000b7dc:	c6 05 a0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229a0,0x1
c000b7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e6:	66 3d 1d 03          	cmp    ax,0x31d
c000b7ea:	75 06                	jne    c000b7f2 <sendKeyboardToken(KeyboardToken)+0x264>
c000b7ec:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f5:	66 3d 1c 03          	cmp    ax,0x31c
c000b7f9:	75 06                	jne    c000b801 <sendKeyboardToken(KeyboardToken)+0x273>
c000b7fb:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b804:	66 3d 1b 03          	cmp    ax,0x31b
c000b808:	75 06                	jne    c000b810 <sendKeyboardToken(KeyboardToken)+0x282>
c000b80a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b813:	66 3d 1e 03          	cmp    ax,0x31e
c000b817:	75 06                	jne    c000b81f <sendKeyboardToken(KeyboardToken)+0x291>
c000b819:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b822:	66 3d 1f 03          	cmp    ax,0x31f
c000b826:	75 06                	jne    c000b82e <sendKeyboardToken(KeyboardToken)+0x2a0>
c000b828:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b831:	66 3d 1a 03          	cmp    ax,0x31a
c000b835:	75 06                	jne    c000b83d <sendKeyboardToken(KeyboardToken)+0x2af>
c000b837:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b83d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b841:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b844:	83 f0 01             	xor    eax,0x1
c000b847:	84 c0                	test   al,al
c000b849:	74 77                	je     c000b8c2 <sendKeyboardToken(KeyboardToken)+0x334>
c000b84b:	a0 a1 26 02 c0       	mov    al,ds:0xc00226a1
c000b850:	84 c0                	test   al,al
c000b852:	74 41                	je     c000b895 <sendKeyboardToken(KeyboardToken)+0x307>
c000b854:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b858:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b85c:	74 2b                	je     c000b889 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000b85e:	8b 15 a4 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229a4
c000b864:	89 d0                	mov    eax,edx
c000b866:	c1 e0 02             	shl    eax,0x2
c000b869:	01 d0                	add    eax,edx
c000b86b:	01 c0                	add    eax,eax
c000b86d:	a3 a4 29 02 c0       	mov    ds:0xc00229a4,eax
c000b872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b875:	0f b7 c0             	movzx  eax,ax
c000b878:	8d 50 d0             	lea    edx,[eax-0x30]
c000b87b:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000b880:	01 d0                	add    eax,edx
c000b882:	a3 a4 29 02 c0       	mov    ds:0xc00229a4,eax
c000b887:	eb 6d                	jmp    c000b8f6 <sendKeyboardToken(KeyboardToken)+0x368>
c000b889:	c7 05 a4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229a4,0x0
c000b893:	eb 61                	jmp    c000b8f6 <sendKeyboardToken(KeyboardToken)+0x368>
c000b895:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000b89a:	85 c0                	test   eax,eax
c000b89c:	74 18                	je     c000b8b6 <sendKeyboardToken(KeyboardToken)+0x328>
c000b89e:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000b8a3:	0f b6 c0             	movzx  eax,al
c000b8a6:	83 ec 0c             	sub    esp,0xc
c000b8a9:	50                   	push   eax
c000b8aa:	e8 21 fc ff ff       	call   c000b4d0 <sendKeyToTerminal(unsigned char)>
c000b8af:	83 c4 10             	add    esp,0x10
c000b8b2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b8b6:	c7 05 a4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229a4,0x0
c000b8c0:	eb 34                	jmp    c000b8f6 <sendKeyboardToken(KeyboardToken)+0x368>
c000b8c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c5:	66 3d 01 01          	cmp    ax,0x101
c000b8c9:	75 2b                	jne    c000b8f6 <sendKeyboardToken(KeyboardToken)+0x368>
c000b8cb:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000b8d0:	85 c0                	test   eax,eax
c000b8d2:	74 18                	je     c000b8ec <sendKeyboardToken(KeyboardToken)+0x35e>
c000b8d4:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c000b8d9:	0f b6 c0             	movzx  eax,al
c000b8dc:	83 ec 0c             	sub    esp,0xc
c000b8df:	50                   	push   eax
c000b8e0:	e8 eb fb ff ff       	call   c000b4d0 <sendKeyToTerminal(unsigned char)>
c000b8e5:	83 c4 10             	add    esp,0x10
c000b8e8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b8ec:	c7 05 a4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229a4,0x0
c000b8f6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b8f9:	83 f0 01             	xor    eax,0x1
c000b8fc:	84 c0                	test   al,al
c000b8fe:	74 4c                	je     c000b94c <sendKeyboardToken(KeyboardToken)+0x3be>
c000b900:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b903:	83 f0 01             	xor    eax,0x1
c000b906:	84 c0                	test   al,al
c000b908:	74 42                	je     c000b94c <sendKeyboardToken(KeyboardToken)+0x3be>
c000b90a:	a0 a0 26 02 c0       	mov    al,ds:0xc00226a0
c000b90f:	83 f0 01             	xor    eax,0x1
c000b912:	84 c0                	test   al,al
c000b914:	74 36                	je     c000b94c <sendKeyboardToken(KeyboardToken)+0x3be>
c000b916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b919:	66 83 f8 1f          	cmp    ax,0x1f
c000b91d:	76 09                	jbe    c000b928 <sendKeyboardToken(KeyboardToken)+0x39a>
c000b91f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b922:	66 83 f8 7e          	cmp    ax,0x7e
c000b926:	76 12                	jbe    c000b93a <sendKeyboardToken(KeyboardToken)+0x3ac>
c000b928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b92b:	66 83 f8 0a          	cmp    ax,0xa
c000b92f:	74 09                	je     c000b93a <sendKeyboardToken(KeyboardToken)+0x3ac>
c000b931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b934:	66 83 f8 08          	cmp    ax,0x8
c000b938:	75 12                	jne    c000b94c <sendKeyboardToken(KeyboardToken)+0x3be>
c000b93a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b93d:	0f b6 c0             	movzx  eax,al
c000b940:	83 ec 0c             	sub    esp,0xc
c000b943:	50                   	push   eax
c000b944:	e8 87 fb ff ff       	call   c000b4d0 <sendKeyToTerminal(unsigned char)>
c000b949:	83 c4 10             	add    esp,0x10
c000b94c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b94f:	83 f0 01             	xor    eax,0x1
c000b952:	84 c0                	test   al,al
c000b954:	74 4f                	je     c000b9a5 <sendKeyboardToken(KeyboardToken)+0x417>
c000b956:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b959:	83 f0 01             	xor    eax,0x1
c000b95c:	84 c0                	test   al,al
c000b95e:	74 45                	je     c000b9a5 <sendKeyboardToken(KeyboardToken)+0x417>
c000b960:	a0 a0 26 02 c0       	mov    al,ds:0xc00226a0
c000b965:	84 c0                	test   al,al
c000b967:	74 3c                	je     c000b9a5 <sendKeyboardToken(KeyboardToken)+0x417>
c000b969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b96c:	66 83 f8 3f          	cmp    ax,0x3f
c000b970:	76 33                	jbe    c000b9a5 <sendKeyboardToken(KeyboardToken)+0x417>
c000b972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b975:	66 83 f8 7f          	cmp    ax,0x7f
c000b979:	77 2a                	ja     c000b9a5 <sendKeyboardToken(KeyboardToken)+0x417>
c000b97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97e:	88 c2                	mov    dl,al
c000b980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b983:	66 83 f8 5f          	cmp    ax,0x5f
c000b987:	76 04                	jbe    c000b98d <sendKeyboardToken(KeyboardToken)+0x3ff>
c000b989:	b0 20                	mov    al,0x20
c000b98b:	eb 02                	jmp    c000b98f <sendKeyboardToken(KeyboardToken)+0x401>
c000b98d:	b0 00                	mov    al,0x0
c000b98f:	29 c2                	sub    edx,eax
c000b991:	88 d0                	mov    al,dl
c000b993:	83 e8 40             	sub    eax,0x40
c000b996:	0f b6 c0             	movzx  eax,al
c000b999:	83 ec 0c             	sub    esp,0xc
c000b99c:	50                   	push   eax
c000b99d:	e8 2e fb ff ff       	call   c000b4d0 <sendKeyToTerminal(unsigned char)>
c000b9a2:	83 c4 10             	add    esp,0x10
c000b9a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9a8:	66 3d 00 03          	cmp    ax,0x300
c000b9ac:	75 0f                	jne    c000b9bd <sendKeyboardToken(KeyboardToken)+0x42f>
c000b9ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b9b1:	83 f0 01             	xor    eax,0x1
c000b9b4:	84 c0                	test   al,al
c000b9b6:	74 05                	je     c000b9bd <sendKeyboardToken(KeyboardToken)+0x42f>
c000b9b8:	e8 5a bb ff ff       	call   c0007517 <doTerminalCycle()>
c000b9bd:	90                   	nop
c000b9be:	c9                   	leave  
c000b9bf:	c3                   	ret    

c000b9c0 <clearInternalKeybuffer(VgaText*)>:
c000b9c0:	55                   	push   ebp
c000b9c1:	89 e5                	mov    ebp,esp
c000b9c3:	83 ec 08             	sub    esp,0x8
c000b9c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c9:	05 b2 00 00 00       	add    eax,0xb2
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	50                   	push   eax
c000b9d2:	e8 ed 4a ff ff       	call   c00004c4 <strlen>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b9dd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000b9e3:	83 ec 04             	sub    esp,0x4
c000b9e6:	50                   	push   eax
c000b9e7:	6a 00                	push   0x0
c000b9e9:	52                   	push   edx
c000b9ea:	e8 b9 4a ff ff       	call   c00004a8 <memset>
c000b9ef:	83 c4 10             	add    esp,0x10
c000b9f2:	90                   	nop
c000b9f3:	c9                   	leave  
c000b9f4:	c3                   	ret    

c000b9f5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000b9f5:	55                   	push   ebp
c000b9f6:	89 e5                	mov    ebp,esp
c000b9f8:	83 ec 18             	sub    esp,0x18
c000b9fb:	a1 88 25 02 c0       	mov    eax,ds:0xc0022588
c000ba00:	85 c0                	test   eax,eax
c000ba02:	74 2a                	je     c000ba2e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ba04:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ba0a:	8b 0d 88 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022588
c000ba10:	83 ec 04             	sub    esp,0x4
c000ba13:	68 a0 25 02 c0       	push   0xc00225a0
c000ba18:	83 ec 08             	sub    esp,0x8
c000ba1b:	89 e2                	mov    edx,esp
c000ba1d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ba20:	89 02                	mov    DWORD PTR [edx],eax
c000ba22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ba25:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ba29:	ff d1                	call   ecx
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	fb                   	sti    
c000ba2f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ba36:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ba3a:	0f 84 a1 00 00 00    	je     c000bae1 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ba40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba43:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ba49:	84 c0                	test   al,al
c000ba4b:	75 28                	jne    c000ba75 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ba4d:	fa                   	cli    
c000ba4e:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000ba53:	40                   	inc    eax
c000ba54:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000ba59:	e8 da 6e 00 00       	call   c0012938 <schedule()>
c000ba5e:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000ba63:	48                   	dec    eax
c000ba64:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000ba69:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000ba6e:	85 c0                	test   eax,eax
c000ba70:	75 ce                	jne    c000ba40 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ba72:	fb                   	sti    
c000ba73:	eb cb                	jmp    c000ba40 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ba75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ba78:	8d 50 01             	lea    edx,[eax+0x1]
c000ba7b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ba7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ba81:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ba87:	88 10                	mov    BYTE PTR [eax],dl
c000ba89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba8c:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ba92:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ba95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba98:	05 b2 00 00 00       	add    eax,0xb2
c000ba9d:	83 ec 0c             	sub    esp,0xc
c000baa0:	50                   	push   eax
c000baa1:	e8 1e 4a ff ff       	call   c00004c4 <strlen>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000baac:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bab2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bab5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bab8:	81 c2 b2 00 00 00    	add    edx,0xb2
c000babe:	83 ec 04             	sub    esp,0x4
c000bac1:	50                   	push   eax
c000bac2:	51                   	push   ecx
c000bac3:	52                   	push   edx
c000bac4:	e8 17 49 ff ff       	call   c00003e0 <memmove>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bacf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bad2:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bad6:	0f 85 5a ff ff ff    	jne    c000ba36 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000badc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000badf:	eb 03                	jmp    c000bae4 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bae1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bae4:	c9                   	leave  
c000bae5:	c3                   	ret    

c000bae6 <Keyboard::Keyboard(char const*)>:
c000bae6:	83 ec 0c             	sub    esp,0xc
c000bae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baed:	83 ec 08             	sub    esp,0x8
c000baf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf4:	50                   	push   eax
c000baf5:	e8 a0 f2 ff ff       	call   c000ad9a <Device::Device(char const*)>
c000bafa:	83 c4 10             	add    esp,0x10
c000bafd:	ba 9c e5 01 c0       	mov    edx,0xc001e59c
c000bb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb06:	89 10                	mov    DWORD PTR [eax],edx
c000bb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bb16:	c6 05 84 25 02 c0 01 	mov    BYTE PTR ds:0xc0022584,0x1
c000bb1d:	90                   	nop
c000bb1e:	83 c4 0c             	add    esp,0xc
c000bb21:	c3                   	ret    

c000bb22 <Keyboard::~Keyboard()>:
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	ba 9c e5 01 c0       	mov    edx,0xc001e59c
c000bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2e:	89 10                	mov    DWORD PTR [eax],edx
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	83 ec 0c             	sub    esp,0xc
c000bb37:	50                   	push   eax
c000bb38:	e8 c7 ef ff ff       	call   c000ab04 <Device::~Device()>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	90                   	nop
c000bb41:	83 c4 0c             	add    esp,0xc
c000bb44:	c3                   	ret    
c000bb45:	90                   	nop

c000bb46 <Keyboard::~Keyboard()>:
c000bb46:	83 ec 0c             	sub    esp,0xc
c000bb49:	83 ec 0c             	sub    esp,0xc
c000bb4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb50:	e8 cd ff ff ff       	call   c000bb22 <Keyboard::~Keyboard()>
c000bb55:	83 c4 10             	add    esp,0x10
c000bb58:	83 ec 08             	sub    esp,0x8
c000bb5b:	68 5c 01 00 00       	push   0x15c
c000bb60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb64:	e8 95 db ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000bb69:	83 c4 10             	add    esp,0x10
c000bb6c:	83 c4 0c             	add    esp,0xc
c000bb6f:	c3                   	ret    

c000bb70 <LogicalDisk::close(int, int, void*)>:
c000bb70:	83 c8 ff             	or     eax,0xffffffff
c000bb73:	c3                   	ret    

c000bb74 <LogicalDisk::~LogicalDisk()>:
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	ba 14 e6 01 c0       	mov    edx,0xc001e614
c000bb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb80:	89 10                	mov    DWORD PTR [eax],edx
c000bb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb86:	83 ec 0c             	sub    esp,0xc
c000bb89:	50                   	push   eax
c000bb8a:	e8 75 ef ff ff       	call   c000ab04 <Device::~Device()>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	90                   	nop
c000bb93:	83 c4 0c             	add    esp,0xc
c000bb96:	c3                   	ret    
c000bb97:	90                   	nop

c000bb98 <LogicalDisk::~LogicalDisk()>:
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	83 ec 0c             	sub    esp,0xc
c000bb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba2:	e8 cd ff ff ff       	call   c000bb74 <LogicalDisk::~LogicalDisk()>
c000bba7:	83 c4 10             	add    esp,0x10
c000bbaa:	83 ec 08             	sub    esp,0x8
c000bbad:	68 74 01 00 00       	push   0x174
c000bbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb6:	e8 43 db ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	83 c4 0c             	add    esp,0xc
c000bbc1:	c3                   	ret    

c000bbc2 <LogicalDisk::open(int, int, void*)>:
c000bbc2:	83 ec 18             	sub    esp,0x18
c000bbc5:	68 c8 e5 01 c0       	push   0xc001e5c8
c000bbca:	e8 e6 38 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000bbcf:	83 c8 ff             	or     eax,0xffffffff
c000bbd2:	83 c4 1c             	add    esp,0x1c
c000bbd5:	c3                   	ret    

c000bbd6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000bbd6:	53                   	push   ebx
c000bbd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbe3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bbe9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bbef:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bbf5:	77 10                	ja     c000bc07 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bbf7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bbfd:	89 d3                	mov    ebx,edx
c000bbff:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bc05:	72 05                	jb     c000bc0c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bc07:	83 c8 ff             	or     eax,0xffffffff
c000bc0a:	89 c2                	mov    edx,eax
c000bc0c:	5b                   	pop    ebx
c000bc0d:	c3                   	ret    

c000bc0e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bc0e:	56                   	push   esi
c000bc0f:	83 c8 ff             	or     eax,0xffffffff
c000bc12:	53                   	push   ebx
c000bc13:	89 c2                	mov    edx,eax
c000bc15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bc19:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bc1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc21:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bc27:	77 27                	ja     c000bc50 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bc29:	89 d8                	mov    eax,ebx
c000bc2b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bc31:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bc37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bc3c:	89 c2                	mov    edx,eax
c000bc3e:	73 10                	jae    c000bc50 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bc40:	89 c8                	mov    eax,ecx
c000bc42:	89 da                	mov    edx,ebx
c000bc44:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bc4a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bc50:	5b                   	pop    ebx
c000bc51:	5e                   	pop    esi
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bc54:	83 ec 1c             	sub    esp,0x1c
c000bc57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000bc6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bc72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7a:	83 ec 08             	sub    esp,0x8
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	50                   	push   eax
c000bc82:	e8 13 f1 ff ff       	call   c000ad9a <Device::Device(char const*)>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	ba 14 e6 01 c0       	mov    edx,0xc001e614
c000bc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc93:	89 10                	mov    DWORD PTR [eax],edx
c000bc95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc99:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bcab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcaf:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bcb9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bcbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcc5:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bccb:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bcd1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bcd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bcd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcdc:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bce2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcf0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000bcf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcfa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bd04:	90                   	nop
c000bd05:	83 c4 1c             	add    esp,0x1c
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop

c000bd0a <LogicalDisk::assignDriveLetter()>:
c000bd0a:	55                   	push   ebp
c000bd0b:	57                   	push   edi
c000bd0c:	56                   	push   esi
c000bd0d:	53                   	push   ebx
c000bd0e:	83 ec 14             	sub    esp,0x14
c000bd11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd15:	8b 3d c0 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229c0
c000bd1b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000bd21:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000bd25:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000bd2b:	8b 3d c4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229c4
c000bd31:	3c 01                	cmp    al,0x1
c000bd33:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bd37:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bd3b:	19 c0                	sbb    eax,eax
c000bd3d:	83 e0 02             	and    eax,0x2
c000bd40:	83 c0 41             	add    eax,0x41
c000bd43:	0f be e8             	movsx  ebp,al
c000bd46:	3c 43                	cmp    al,0x43
c000bd48:	75 10                	jne    c000bd5a <LogicalDisk::assignDriveLetter()+0x50>
c000bd4a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bd51:	75 5d                	jne    c000bdb0 <LogicalDisk::assignDriveLetter()+0xa6>
c000bd53:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bd58:	75 56                	jne    c000bdb0 <LogicalDisk::assignDriveLetter()+0xa6>
c000bd5a:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bd5d:	ba 01 00 00 00       	mov    edx,0x1
c000bd62:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bd66:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bd6a:	d3 e2                	shl    edx,cl
c000bd6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd70:	89 d7                	mov    edi,edx
c000bd72:	89 d6                	mov    esi,edx
c000bd74:	c1 ff 1f             	sar    edi,0x1f
c000bd77:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bd7b:	21 f9                	and    ecx,edi
c000bd7d:	09 d1                	or     ecx,edx
c000bd7f:	75 2f                	jne    c000bdb0 <LogicalDisk::assignDriveLetter()+0xa6>
c000bd81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bd85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd89:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bd8f:	09 f2                	or     edx,esi
c000bd91:	89 15 c0 29 02 c0    	mov    DWORD PTR ds:0xc00229c0,edx
c000bd97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd9b:	09 fa                	or     edx,edi
c000bd9d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bda1:	89 15 c4 29 02 c0    	mov    DWORD PTR ds:0xc00229c4,edx
c000bda7:	89 1c bd e0 29 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd620],ebx
c000bdae:	eb 08                	jmp    c000bdb8 <LogicalDisk::assignDriveLetter()+0xae>
c000bdb0:	45                   	inc    ebp
c000bdb1:	40                   	inc    eax
c000bdb2:	3c 5b                	cmp    al,0x5b
c000bdb4:	75 90                	jne    c000bd46 <LogicalDisk::assignDriveLetter()+0x3c>
c000bdb6:	31 c0                	xor    eax,eax
c000bdb8:	83 c4 14             	add    esp,0x14
c000bdbb:	5b                   	pop    ebx
c000bdbc:	5e                   	pop    esi
c000bdbd:	5f                   	pop    edi
c000bdbe:	5d                   	pop    ebp
c000bdbf:	c3                   	ret    

c000bdc0 <LogicalDisk::mount()>:
c000bdc0:	56                   	push   esi
c000bdc1:	53                   	push   ebx
c000bdc2:	53                   	push   ebx
c000bdc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdc7:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c000bdcd:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bdd7:	85 db                	test   ebx,ebx
c000bdd9:	74 27                	je     c000be02 <LogicalDisk::mount()+0x42>
c000bddb:	51                   	push   ecx
c000bddc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bde3:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bde5:	83 e8 41             	sub    eax,0x41
c000bde8:	50                   	push   eax
c000bde9:	56                   	push   esi
c000bdea:	53                   	push   ebx
c000bdeb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bdee:	83 c4 10             	add    esp,0x10
c000bdf1:	84 c0                	test   al,al
c000bdf3:	74 08                	je     c000bdfd <LogicalDisk::mount()+0x3d>
c000bdf5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bdfb:	eb 07                	jmp    c000be04 <LogicalDisk::mount()+0x44>
c000bdfd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000be00:	eb d5                	jmp    c000bdd7 <LogicalDisk::mount()+0x17>
c000be02:	31 c0                	xor    eax,eax
c000be04:	5a                   	pop    edx
c000be05:	5b                   	pop    ebx
c000be06:	5e                   	pop    esi
c000be07:	c3                   	ret    

c000be08 <LogicalDisk::unmount()>:
c000be08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be0c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000be16:	c3                   	ret    
c000be17:	90                   	nop

c000be18 <LogicalDisk::eject()>:
c000be18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be1c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000be22:	8b 10                	mov    edx,DWORD PTR [eax]
c000be24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be28:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000be2b:	90                   	nop

c000be2c <LogicalDisk::unassignDriveLetter()>:
c000be2c:	57                   	push   edi
c000be2d:	56                   	push   esi
c000be2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be32:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000be39:	84 c9                	test   cl,cl
c000be3b:	75 0f                	jne    c000be4c <LogicalDisk::unassignDriveLetter()+0x20>
c000be3d:	c7 44 24 0c ec e5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e5ec
c000be45:	5e                   	pop    esi
c000be46:	5f                   	pop    edi
c000be47:	e9 69 36 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c000be4c:	83 e9 41             	sub    ecx,0x41
c000be4f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000be56:	b8 01 00 00 00       	mov    eax,0x1
c000be5b:	c7 04 8d e0 29 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd620],0x0
c000be66:	d3 e0                	shl    eax,cl
c000be68:	89 c7                	mov    edi,eax
c000be6a:	f7 d0                	not    eax
c000be6c:	c1 ff 1f             	sar    edi,0x1f
c000be6f:	21 05 c0 29 02 c0    	and    DWORD PTR ds:0xc00229c0,eax
c000be75:	89 fe                	mov    esi,edi
c000be77:	f7 d6                	not    esi
c000be79:	21 35 c4 29 02 c0    	and    DWORD PTR ds:0xc00229c4,esi
c000be7f:	5e                   	pop    esi
c000be80:	5f                   	pop    edi
c000be81:	c3                   	ret    

c000be82 <LogicalDisk::read(unsigned long long, int, void*)>:
c000be82:	57                   	push   edi
c000be83:	56                   	push   esi
c000be84:	53                   	push   ebx
c000be85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000be9b:	77 41                	ja     c000bede <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000be9d:	99                   	cdq    
c000be9e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bea4:	01 c8                	add    eax,ecx
c000bea6:	11 da                	adc    edx,ebx
c000bea8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000beae:	19 d7                	sbb    edi,edx
c000beb0:	72 33                	jb     c000bee5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000beb2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000beb8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000bebe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bec2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000bec6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000becc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bed6:	5b                   	pop    ebx
c000bed7:	5e                   	pop    esi
c000bed8:	5f                   	pop    edi
c000bed9:	e9 34 0a 00 00       	jmp    c000c912 <VCache::read(unsigned long long, int, void*)>
c000bede:	b8 05 00 00 00       	mov    eax,0x5
c000bee3:	eb 05                	jmp    c000beea <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000bee5:	b8 07 00 00 00       	mov    eax,0x7
c000beea:	5b                   	pop    ebx
c000beeb:	5e                   	pop    esi
c000beec:	5f                   	pop    edi
c000beed:	c3                   	ret    

c000beee <LogicalDisk::write(unsigned long long, int, void*)>:
c000beee:	57                   	push   edi
c000beef:	56                   	push   esi
c000bef0:	53                   	push   ebx
c000bef1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000befd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf01:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bf07:	77 41                	ja     c000bf4a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000bf09:	99                   	cdq    
c000bf0a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bf10:	01 c8                	add    eax,ecx
c000bf12:	11 da                	adc    edx,ebx
c000bf14:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000bf1a:	19 d7                	sbb    edi,edx
c000bf1c:	72 33                	jb     c000bf51 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000bf1e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000bf24:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000bf2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bf2e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000bf32:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000bf38:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bf3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf42:	5b                   	pop    ebx
c000bf43:	5e                   	pop    esi
c000bf44:	5f                   	pop    edi
c000bf45:	e9 ce 08 00 00       	jmp    c000c818 <VCache::write(unsigned long long, int, void*)>
c000bf4a:	b8 05 00 00 00       	mov    eax,0x5
c000bf4f:	eb 05                	jmp    c000bf56 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000bf51:	b8 07 00 00 00       	mov    eax,0x7
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	c3                   	ret    
c000bf5a:	66 90                	xchg   ax,ax

c000bf5c <Mouse::Mouse(char const*)>:
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf63:	83 ec 08             	sub    esp,0x8
c000bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6a:	50                   	push   eax
c000bf6b:	e8 2a ee ff ff       	call   c000ad9a <Device::Device(char const*)>
c000bf70:	83 c4 10             	add    esp,0x10
c000bf73:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c000bf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf7c:	89 10                	mov    DWORD PTR [eax],edx
c000bf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf82:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000bf8c:	90                   	nop
c000bf8d:	83 c4 0c             	add    esp,0xc
c000bf90:	c3                   	ret    
c000bf91:	90                   	nop
c000bf92:	66 90                	xchg   ax,ax

c000bf94 <Mouse::~Mouse()>:
c000bf94:	83 ec 0c             	sub    esp,0xc
c000bf97:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c000bf9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa0:	89 10                	mov    DWORD PTR [eax],edx
c000bfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	50                   	push   eax
c000bfaa:	e8 55 eb ff ff       	call   c000ab04 <Device::~Device()>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	90                   	nop
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	c3                   	ret    
c000bfb7:	90                   	nop

c000bfb8 <Mouse::~Mouse()>:
c000bfb8:	83 ec 0c             	sub    esp,0xc
c000bfbb:	83 ec 0c             	sub    esp,0xc
c000bfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfc2:	e8 cd ff ff ff       	call   c000bf94 <Mouse::~Mouse()>
c000bfc7:	83 c4 10             	add    esp,0x10
c000bfca:	83 ec 08             	sub    esp,0x8
c000bfcd:	68 58 01 00 00       	push   0x158
c000bfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd6:	e8 23 d7 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000bfdb:	83 c4 10             	add    esp,0x10
c000bfde:	83 c4 0c             	add    esp,0xc
c000bfe1:	c3                   	ret    

c000bfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bfe2:	55                   	push   ebp
c000bfe3:	57                   	push   edi
c000bfe4:	56                   	push   esi
c000bfe5:	53                   	push   ebx
c000bfe6:	81 ec 28 01 00 00    	sub    esp,0x128
c000bfec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000bff3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000bffa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c001:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c008:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c00c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c010:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c017:	e8 7a ee ff ff       	call   c000ae96 <Device::getName()>
c000c01c:	5a                   	pop    edx
c000c01d:	59                   	pop    ecx
c000c01e:	50                   	push   eax
c000c01f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c023:	55                   	push   ebp
c000c024:	e8 3b 45 ff ff       	call   c0000564 <strcpy>
c000c029:	5b                   	pop    ebx
c000c02a:	58                   	pop    eax
c000c02b:	68 64 e6 01 c0       	push   0xc001e664
c000c030:	55                   	push   ebp
c000c031:	e8 6e 46 ff ff       	call   c00006a4 <strcat>
c000c036:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c03d:	e8 13 aa ff ff       	call   c0006a55 <malloc>
c000c042:	83 c4 0c             	add    esp,0xc
c000c045:	89 c3                	mov    ebx,eax
c000c047:	57                   	push   edi
c000c048:	56                   	push   esi
c000c049:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c04d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c051:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c058:	55                   	push   ebp
c000c059:	50                   	push   eax
c000c05a:	e8 f5 fb ff ff       	call   c000bc54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c05f:	83 c4 14             	add    esp,0x14
c000c062:	53                   	push   ebx
c000c063:	e8 a2 fc ff ff       	call   c000bd0a <LogicalDisk::assignDriveLetter()>
c000c068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c06b:	e8 50 fd ff ff       	call   c000bdc0 <LogicalDisk::mount()>
c000c070:	58                   	pop    eax
c000c071:	5a                   	pop    edx
c000c072:	53                   	push   ebx
c000c073:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c07a:	e8 83 eb ff ff       	call   c000ac02 <Device::addChild(Device*)>
c000c07f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c085:	5b                   	pop    ebx
c000c086:	5e                   	pop    esi
c000c087:	5f                   	pop    edi
c000c088:	5d                   	pop    ebp
c000c089:	c3                   	ret    

c000c08a <createPartitionsForDisk(PhysicalDisk*)>:
c000c08a:	55                   	push   ebp
c000c08b:	57                   	push   edi
c000c08c:	56                   	push   esi
c000c08d:	53                   	push   ebx
c000c08e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c094:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c09b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c0a1:	3d 00 02 00 00       	cmp    eax,0x200
c000c0a6:	74 27                	je     c000c0cf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c0a8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c0ae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c0b4:	83 ec 10             	sub    esp,0x10
c000c0b7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c0bb:	99                   	cdq    
c000c0bc:	c1 e6 0a             	shl    esi,0xa
c000c0bf:	52                   	push   edx
c000c0c0:	89 fd                	mov    ebp,edi
c000c0c2:	50                   	push   eax
c000c0c3:	55                   	push   ebp
c000c0c4:	56                   	push   esi
c000c0c5:	e8 f6 04 01 00       	call   c001c5c0 <__udivdi3>
c000c0ca:	e9 b1 00 00 00       	jmp    c000c180 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c0cf:	83 ec 0c             	sub    esp,0xc
c000c0d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0d4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c0d8:	56                   	push   esi
c000c0d9:	6a 01                	push   0x1
c000c0db:	6a 00                	push   0x0
c000c0dd:	6a 00                	push   0x0
c000c0df:	53                   	push   ebx
c000c0e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c0e3:	83 c4 20             	add    esp,0x20
c000c0e6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c0ee:	75 0a                	jne    c000c0fa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c0f0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c0f8:	74 2c                	je     c000c126 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c0fa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c100:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c106:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c10c:	83 ec 10             	sub    esp,0x10
c000c10f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c113:	89 f7                	mov    edi,esi
c000c115:	c1 e0 0a             	shl    eax,0xa
c000c118:	c1 ff 1f             	sar    edi,0x1f
c000c11b:	57                   	push   edi
c000c11c:	56                   	push   esi
c000c11d:	52                   	push   edx
c000c11e:	50                   	push   eax
c000c11f:	e8 9c 04 01 00       	call   c001c5c0 <__udivdi3>
c000c124:	eb 5a                	jmp    c000c180 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c126:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c12d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c134:	83 e1 7f             	and    ecx,0x7f
c000c137:	83 e0 7f             	and    eax,0x7f
c000c13a:	01 c1                	add    ecx,eax
c000c13c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c143:	83 e0 7f             	and    eax,0x7f
c000c146:	01 c1                	add    ecx,eax
c000c148:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c14f:	83 e0 7f             	and    eax,0x7f
c000c152:	00 c1                	add    cl,al
c000c154:	74 41                	je     c000c197 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c156:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c15c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c162:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c168:	83 ec 10             	sub    esp,0x10
c000c16b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c16f:	89 f7                	mov    edi,esi
c000c171:	c1 e0 0a             	shl    eax,0xa
c000c174:	c1 ff 1f             	sar    edi,0x1f
c000c177:	57                   	push   edi
c000c178:	56                   	push   esi
c000c179:	52                   	push   edx
c000c17a:	50                   	push   eax
c000c17b:	e8 40 04 01 00       	call   c001c5c0 <__udivdi3>
c000c180:	83 c4 14             	add    esp,0x14
c000c183:	52                   	push   edx
c000c184:	50                   	push   eax
c000c185:	6a 00                	push   0x0
c000c187:	6a 00                	push   0x0
c000c189:	53                   	push   ebx
c000c18a:	e8 53 fe ff ff       	call   c000bfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c18f:	83 c4 20             	add    esp,0x20
c000c192:	e9 79 01 00 00       	jmp    c000c310 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c197:	89 f0                	mov    eax,esi
c000c199:	31 f6                	xor    esi,esi
c000c19b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c1a2:	75 02                	jne    c000c1a6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c1a4:	89 f1                	mov    ecx,esi
c000c1a6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c1ad:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c1b4:	c1 e2 08             	shl    edx,0x8
c000c1b7:	c1 e7 10             	shl    edi,0x10
c000c1ba:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c1c2:	09 fa                	or     edx,edi
c000c1c4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c1cc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c1d3:	83 c0 10             	add    eax,0x10
c000c1d6:	09 fa                	or     edx,edi
c000c1d8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c1df:	c1 e7 18             	shl    edi,0x18
c000c1e2:	09 fa                	or     edx,edi
c000c1e4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c1eb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c1ef:	c1 e7 10             	shl    edi,0x10
c000c1f2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c1f9:	c1 e2 08             	shl    edx,0x8
c000c1fc:	09 fa                	or     edx,edi
c000c1fe:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c205:	09 fa                	or     edx,edi
c000c207:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c20e:	c1 e7 18             	shl    edi,0x18
c000c211:	09 fa                	or     edx,edi
c000c213:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c217:	46                   	inc    esi
c000c218:	83 fe 04             	cmp    esi,0x4
c000c21b:	0f 85 7a ff ff ff    	jne    c000c19b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c225:	83 f0 01             	xor    eax,0x1
c000c228:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c22c:	75 57                	jne    c000c285 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c22e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c232:	83 f0 01             	xor    eax,0x1
c000c235:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c239:	75 4a                	jne    c000c285 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c23b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c23f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c247:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c24f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c255:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c25b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c261:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c265:	89 f7                	mov    edi,esi
c000c267:	c1 e0 0a             	shl    eax,0xa
c000c26a:	c1 ff 1f             	sar    edi,0x1f
c000c26d:	57                   	push   edi
c000c26e:	56                   	push   esi
c000c26f:	52                   	push   edx
c000c270:	50                   	push   eax
c000c271:	e8 4a 03 01 00       	call   c001c5c0 <__udivdi3>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c285:	84 c9                	test   cl,cl
c000c287:	74 53                	je     c000c2dc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c289:	0f b6 c9             	movzx  ecx,cl
c000c28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c290:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c294:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c298:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c29c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c2a8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c2ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c2b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c2b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2bc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c2c0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c2c4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c2c8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c2cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c2d8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c2dc:	31 ed                	xor    ebp,ebp
c000c2de:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c2e2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c2e6:	89 f8                	mov    eax,edi
c000c2e8:	09 f0                	or     eax,esi
c000c2ea:	74 1e                	je     c000c30a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c2ec:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c2f0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c2f4:	89 d1                	mov    ecx,edx
c000c2f6:	09 c1                	or     ecx,eax
c000c2f8:	74 10                	je     c000c30a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	57                   	push   edi
c000c2fe:	56                   	push   esi
c000c2ff:	52                   	push   edx
c000c300:	50                   	push   eax
c000c301:	53                   	push   ebx
c000c302:	e8 db fc ff ff       	call   c000bfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c307:	83 c4 20             	add    esp,0x20
c000c30a:	45                   	inc    ebp
c000c30b:	83 fd 04             	cmp    ebp,0x4
c000c30e:	75 ce                	jne    c000c2de <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c310:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c316:	5b                   	pop    ebx
c000c317:	5e                   	pop    esi
c000c318:	5f                   	pop    edi
c000c319:	5d                   	pop    ebp
c000c31a:	c3                   	ret    
c000c31b:	90                   	nop

c000c31c <Serial::Serial(char const*)>:
c000c31c:	83 ec 0c             	sub    esp,0xc
c000c31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c323:	83 ec 08             	sub    esp,0x8
c000c326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32a:	50                   	push   eax
c000c32b:	e8 6a ea ff ff       	call   c000ad9a <Device::Device(char const*)>
c000c330:	83 c4 10             	add    esp,0x10
c000c333:	ba 78 e6 01 c0       	mov    edx,0xc001e678
c000c338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33c:	89 10                	mov    DWORD PTR [eax],edx
c000c33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c342:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c34c:	90                   	nop
c000c34d:	83 c4 0c             	add    esp,0xc
c000c350:	c3                   	ret    
c000c351:	90                   	nop
c000c352:	66 90                	xchg   ax,ax

c000c354 <Serial::~Serial()>:
c000c354:	83 ec 0c             	sub    esp,0xc
c000c357:	ba 78 e6 01 c0       	mov    edx,0xc001e678
c000c35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c360:	89 10                	mov    DWORD PTR [eax],edx
c000c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c366:	83 ec 0c             	sub    esp,0xc
c000c369:	50                   	push   eax
c000c36a:	e8 95 e7 ff ff       	call   c000ab04 <Device::~Device()>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	90                   	nop
c000c373:	83 c4 0c             	add    esp,0xc
c000c376:	c3                   	ret    
c000c377:	90                   	nop

c000c378 <Serial::~Serial()>:
c000c378:	83 ec 0c             	sub    esp,0xc
c000c37b:	83 ec 0c             	sub    esp,0xc
c000c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c382:	e8 cd ff ff ff       	call   c000c354 <Serial::~Serial()>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	83 ec 08             	sub    esp,0x8
c000c38d:	68 58 01 00 00       	push   0x158
c000c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c396:	e8 63 d3 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000c39b:	83 c4 10             	add    esp,0x10
c000c39e:	83 c4 0c             	add    esp,0xc
c000c3a1:	c3                   	ret    
c000c3a2:	66 90                	xchg   ax,ax

c000c3a4 <Timer::Timer(char const*)>:
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ab:	83 ec 08             	sub    esp,0x8
c000c3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b2:	50                   	push   eax
c000c3b3:	e8 e2 e9 ff ff       	call   c000ad9a <Device::Device(char const*)>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba bc e6 01 c0       	mov    edx,0xc001e6bc
c000c3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c4:	89 10                	mov    DWORD PTR [eax],edx
c000c3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ca:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c3d4:	90                   	nop
c000c3d5:	83 c4 0c             	add    esp,0xc
c000c3d8:	c3                   	ret    
c000c3d9:	90                   	nop
c000c3da:	66 90                	xchg   ax,ax

c000c3dc <Timer::~Timer()>:
c000c3dc:	83 ec 0c             	sub    esp,0xc
c000c3df:	ba bc e6 01 c0       	mov    edx,0xc001e6bc
c000c3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e8:	89 10                	mov    DWORD PTR [eax],edx
c000c3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ee:	83 ec 0c             	sub    esp,0xc
c000c3f1:	50                   	push   eax
c000c3f2:	e8 0d e7 ff ff       	call   c000ab04 <Device::~Device()>
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	90                   	nop
c000c3fb:	83 c4 0c             	add    esp,0xc
c000c3fe:	c3                   	ret    
c000c3ff:	90                   	nop

c000c400 <Timer::~Timer()>:
c000c400:	83 ec 0c             	sub    esp,0xc
c000c403:	83 ec 0c             	sub    esp,0xc
c000c406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c40a:	e8 cd ff ff ff       	call   c000c3dc <Timer::~Timer()>
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	83 ec 08             	sub    esp,0x8
c000c415:	68 5c 01 00 00       	push   0x15c
c000c41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41e:	e8 db d2 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000c423:	83 c4 10             	add    esp,0x10
c000c426:	83 c4 0c             	add    esp,0xc
c000c429:	c3                   	ret    

c000c42a <Timer::read()>:
c000c42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c42e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c434:	c3                   	ret    

c000c435 <setupTimer(int)>:
c000c435:	53                   	push   ebx
c000c436:	83 ec 14             	sub    esp,0x14
c000c439:	68 5c 01 00 00       	push   0x15c
c000c43e:	e8 12 a6 ff ff       	call   c0006a55 <malloc>
c000c443:	89 04 24             	mov    DWORD PTR [esp],eax
c000c446:	89 c3                	mov    ebx,eax
c000c448:	e8 f3 fa 00 00       	call   c001bf40 <PIT::PIT()>
c000c44d:	58                   	pop    eax
c000c44e:	5a                   	pop    edx
c000c44f:	53                   	push   ebx
c000c450:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000c456:	e8 a7 e7 ff ff       	call   c000ac02 <Device::addChild(Device*)>
c000c45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c45d:	6a 00                	push   0x0
c000c45f:	6a 00                	push   0x0
c000c461:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c465:	53                   	push   ebx
c000c466:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c469:	89 d8                	mov    eax,ebx
c000c46b:	83 c4 28             	add    esp,0x28
c000c46e:	5b                   	pop    ebx
c000c46f:	c3                   	ret    

c000c470 <timerHandler(unsigned int)>:
c000c470:	56                   	push   esi
c000c471:	53                   	push   ebx
c000c472:	51                   	push   ecx
c000c473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c477:	01 05 4c 2a 02 c0    	add    DWORD PTR ds:0xc0022a4c,eax
c000c47d:	80 3d 6d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002046d,0x0
c000c484:	0f 84 4a 01 00 00    	je     c000c5d4 <timerHandler(unsigned int)+0x164>
c000c48a:	fa                   	cli    
c000c48b:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c000c491:	83 ec 0c             	sub    esp,0xc
c000c494:	ff 05 44 39 02 c0    	inc    DWORD PTR ds:0xc0023944
c000c49a:	68 58 39 02 c0       	push   0xc0023958
c000c49f:	e8 ec 06 01 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c4a4:	83 c4 10             	add    esp,0x10
c000c4a7:	84 c0                	test   al,al
c000c4a9:	0f 85 a1 00 00 00    	jne    c000c550 <timerHandler(unsigned int)+0xe0>
c000c4af:	83 ec 0c             	sub    esp,0xc
c000c4b2:	68 58 39 02 c0       	push   0xc0023958
c000c4b7:	e8 f0 06 01 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c4bc:	83 c4 10             	add    esp,0x10
c000c4bf:	89 c6                	mov    esi,eax
c000c4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c4c4:	83 ec 0c             	sub    esp,0xc
c000c4c7:	68 58 39 02 c0       	push   0xc0023958
c000c4cc:	e8 db 06 01 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c4d1:	c7 04 24 58 39 02 c0 	mov    DWORD PTR [esp],0xc0023958
c000c4d8:	89 c3                	mov    ebx,eax
c000c4da:	e8 d5 06 01 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c4df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c4e2:	83 c4 10             	add    esp,0x10
c000c4e5:	3b 05 4c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a4c
c000c4eb:	77 23                	ja     c000c510 <timerHandler(unsigned int)+0xa0>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	53                   	push   ebx
c000c4f1:	e8 fe 68 00 00       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	39 de                	cmp    esi,ebx
c000c4fb:	75 27                	jne    c000c524 <timerHandler(unsigned int)+0xb4>
c000c4fd:	83 ec 0c             	sub    esp,0xc
c000c500:	68 58 39 02 c0       	push   0xc0023958
c000c505:	e8 a2 06 01 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c50a:	89 c6                	mov    esi,eax
c000c50c:	eb 12                	jmp    c000c520 <timerHandler(unsigned int)+0xb0>
c000c50e:	66 90                	xchg   ax,ax
c000c510:	52                   	push   edx
c000c511:	52                   	push   edx
c000c512:	53                   	push   ebx
c000c513:	68 58 39 02 c0       	push   0xc0023958
c000c518:	e8 4f 07 01 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c51d:	8d 76 00             	lea    esi,[esi+0x0]
c000c520:	83 c4 10             	add    esp,0x10
c000c523:	90                   	nop
c000c524:	83 ec 0c             	sub    esp,0xc
c000c527:	68 58 39 02 c0       	push   0xc0023958
c000c52c:	e8 5f 06 01 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c531:	83 c4 10             	add    esp,0x10
c000c534:	84 c0                	test   al,al
c000c536:	75 18                	jne    c000c550 <timerHandler(unsigned int)+0xe0>
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	68 58 39 02 c0       	push   0xc0023958
c000c540:	e8 67 06 01 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c545:	83 c4 10             	add    esp,0x10
c000c548:	39 f0                	cmp    eax,esi
c000c54a:	0f 85 74 ff ff ff    	jne    c000c4c4 <timerHandler(unsigned int)+0x54>
c000c550:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c555:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c559:	74 41                	je     c000c59c <timerHandler(unsigned int)+0x12c>
c000c55b:	80 3d 6c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002046c,0x0
c000c562:	74 38                	je     c000c59c <timerHandler(unsigned int)+0x12c>
c000c564:	fa                   	cli    
c000c565:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c000c56b:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c000c570:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c576:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c579:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c57f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c582:	72 08                	jb     c000c58c <timerHandler(unsigned int)+0x11c>
c000c584:	e8 af 63 00 00       	call   c0012938 <schedule()>
c000c589:	8d 76 00             	lea    esi,[esi+0x0]
c000c58c:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000c591:	48                   	dec    eax
c000c592:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000c597:	75 03                	jne    c000c59c <timerHandler(unsigned int)+0x12c>
c000c599:	fb                   	sti    
c000c59a:	66 90                	xchg   ax,ax
c000c59c:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c000c5a1:	48                   	dec    eax
c000c5a2:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c000c5a7:	75 1b                	jne    c000c5c4 <timerHandler(unsigned int)+0x154>
c000c5a9:	83 3d 40 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023940,0x0
c000c5b0:	74 12                	je     c000c5c4 <timerHandler(unsigned int)+0x154>
c000c5b2:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c000c5bc:	e8 77 63 00 00       	call   c0012938 <schedule()>
c000c5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5c4:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000c5c9:	48                   	dec    eax
c000c5ca:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000c5cf:	75 03                	jne    c000c5d4 <timerHandler(unsigned int)+0x164>
c000c5d1:	fb                   	sti    
c000c5d2:	66 90                	xchg   ax,ax
c000c5d4:	58                   	pop    eax
c000c5d5:	5b                   	pop    ebx
c000c5d6:	5e                   	pop    esi
c000c5d7:	c3                   	ret    

c000c5d8 <VCache::VCache(PhysicalDisk*)>:
c000c5d8:	53                   	push   ebx
c000c5d9:	83 ec 18             	sub    esp,0x18
c000c5dc:	ba ec e6 01 c0       	mov    edx,0xc001e6ec
c000c5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5e5:	89 10                	mov    DWORD PTR [eax],edx
c000c5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c608:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c613:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c61a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c625:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c62c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c630:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c63f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c64a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c652:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c65a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c662:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c669:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c671:	83 ec 0c             	sub    esp,0xc
c000c674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c678:	e8 d8 a3 ff ff       	call   c0006a55 <malloc>
c000c67d:	83 c4 10             	add    esp,0x10
c000c680:	89 c3                	mov    ebx,eax
c000c682:	83 ec 0c             	sub    esp,0xc
c000c685:	53                   	push   ebx
c000c686:	e8 7d 60 00 00       	call   c0012708 <Mutex::Mutex()>
c000c68b:	83 c4 10             	add    esp,0x10
c000c68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c692:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c699:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c69d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6a4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c6ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c6af:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c6c0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c6c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c6d0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c6d3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c6de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c6e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c6e8:	05 00 01 00 00       	add    eax,0x100
c000c6ed:	c1 e0 04             	shl    eax,0x4
c000c6f0:	83 ec 0c             	sub    esp,0xc
c000c6f3:	50                   	push   eax
c000c6f4:	e8 5c a3 ff ff       	call   c0006a55 <malloc>
c000c6f9:	83 c4 10             	add    esp,0x10
c000c6fc:	89 c2                	mov    edx,eax
c000c6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c702:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c709:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c714:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c718:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c71c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c722:	c1 e0 06             	shl    eax,0x6
c000c725:	83 ec 0c             	sub    esp,0xc
c000c728:	50                   	push   eax
c000c729:	e8 27 a3 ff ff       	call   c0006a55 <malloc>
c000c72e:	83 c4 10             	add    esp,0x10
c000c731:	89 c2                	mov    edx,eax
c000c733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c737:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c73a:	90                   	nop
c000c73b:	83 c4 18             	add    esp,0x18
c000c73e:	5b                   	pop    ebx
c000c73f:	c3                   	ret    

c000c740 <VCache::invalidateReadBuffer()>:
c000c740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c744:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c74a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c74e:	c3                   	ret    
c000c74f:	90                   	nop

c000c750 <VCache::writeWriteBuffer()>:
c000c750:	53                   	push   ebx
c000c751:	83 ec 08             	sub    esp,0x8
c000c754:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c758:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c75c:	74 1e                	je     c000c77c <VCache::writeWriteBuffer()+0x2c>
c000c75e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c761:	83 ec 0c             	sub    esp,0xc
c000c764:	8b 10                	mov    edx,DWORD PTR [eax]
c000c766:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c769:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c76c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c76f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c772:	50                   	push   eax
c000c773:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c776:	83 c4 20             	add    esp,0x20
c000c779:	8d 76 00             	lea    esi,[esi+0x0]
c000c77c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c783:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c78a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c78e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c795:	83 c4 08             	add    esp,0x8
c000c798:	5b                   	pop    ebx
c000c799:	c3                   	ret    
c000c79a:	66 90                	xchg   ax,ax

c000c79c <VCache::~VCache()>:
c000c79c:	83 ec 0c             	sub    esp,0xc
c000c79f:	ba ec e6 01 c0       	mov    edx,0xc001e6ec
c000c7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a8:	89 10                	mov    DWORD PTR [eax],edx
c000c7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ae:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c7b1:	84 c0                	test   al,al
c000c7b3:	74 0f                	je     c000c7c4 <VCache::~VCache()+0x28>
c000c7b5:	83 ec 0c             	sub    esp,0xc
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	e8 8f ff ff ff       	call   c000c750 <VCache::writeWriteBuffer()>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c7cb:	83 ec 0c             	sub    esp,0xc
c000c7ce:	50                   	push   eax
c000c7cf:	e8 91 a2 ff ff       	call   c0006a65 <free>
c000c7d4:	83 c4 10             	add    esp,0x10
c000c7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c7de:	83 ec 0c             	sub    esp,0xc
c000c7e1:	50                   	push   eax
c000c7e2:	e8 7e a2 ff ff       	call   c0006a65 <free>
c000c7e7:	83 c4 10             	add    esp,0x10
c000c7ea:	90                   	nop
c000c7eb:	83 c4 0c             	add    esp,0xc
c000c7ee:	c3                   	ret    
c000c7ef:	90                   	nop

c000c7f0 <VCache::~VCache()>:
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	83 ec 0c             	sub    esp,0xc
c000c7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7fa:	e8 9d ff ff ff       	call   c000c79c <VCache::~VCache()>
c000c7ff:	83 c4 10             	add    esp,0x10
c000c802:	83 ec 08             	sub    esp,0x8
c000c805:	6a 44                	push   0x44
c000c807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80b:	e8 ee ce ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	83 c4 0c             	add    esp,0xc
c000c816:	c3                   	ret    
c000c817:	90                   	nop

c000c818 <VCache::write(unsigned long long, int, void*)>:
c000c818:	55                   	push   ebp
c000c819:	31 c0                	xor    eax,eax
c000c81b:	57                   	push   edi
c000c81c:	56                   	push   esi
c000c81d:	53                   	push   ebx
c000c81e:	83 ec 0c             	sub    esp,0xc
c000c821:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c825:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c829:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c82d:	8d 76 00             	lea    esi,[esi+0x0]
c000c830:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c834:	7d 1a                	jge    c000c850 <VCache::write(unsigned long long, int, void*)+0x38>
c000c836:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c839:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c83f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c843:	0f af c8             	imul   ecx,eax
c000c846:	01 ca                	add    edx,ecx
c000c848:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c84a:	40                   	inc    eax
c000c84b:	eb e3                	jmp    c000c830 <VCache::write(unsigned long long, int, void*)+0x18>
c000c84d:	8d 76 00             	lea    esi,[esi+0x0]
c000c850:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c854:	74 0a                	je     c000c860 <VCache::write(unsigned long long, int, void*)+0x48>
c000c856:	53                   	push   ebx
c000c857:	e8 e4 fe ff ff       	call   c000c740 <VCache::invalidateReadBuffer()>
c000c85c:	58                   	pop    eax
c000c85d:	8d 76 00             	lea    esi,[esi+0x0]
c000c860:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c864:	74 5e                	je     c000c8c4 <VCache::write(unsigned long long, int, void*)+0xac>
c000c866:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c869:	89 e8                	mov    eax,ebp
c000c86b:	99                   	cdq    
c000c86c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c86f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c872:	89 c1                	mov    ecx,eax
c000c874:	89 d0                	mov    eax,edx
c000c876:	31 f1                	xor    ecx,esi
c000c878:	31 f8                	xor    eax,edi
c000c87a:	09 c1                	or     ecx,eax
c000c87c:	75 3a                	jne    c000c8b8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000c87e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000c883:	75 33                	jne    c000c8b8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000c885:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c888:	89 ef                	mov    edi,ebp
c000c88a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c890:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c894:	0f af f9             	imul   edi,ecx
c000c897:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000c89a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c89c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000c89f:	40                   	inc    eax
c000c8a0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000c8a3:	83 f8 40             	cmp    eax,0x40
c000c8a6:	75 60                	jne    c000c908 <VCache::write(unsigned long long, int, void*)+0xf0>
c000c8a8:	83 ec 0c             	sub    esp,0xc
c000c8ab:	53                   	push   ebx
c000c8ac:	e8 9f fe ff ff       	call   c000c750 <VCache::writeWriteBuffer()>
c000c8b1:	83 c4 10             	add    esp,0x10
c000c8b4:	eb 52                	jmp    c000c908 <VCache::write(unsigned long long, int, void*)+0xf0>
c000c8b6:	66 90                	xchg   ax,ax
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	53                   	push   ebx
c000c8bc:	e8 8f fe ff ff       	call   c000c750 <VCache::writeWriteBuffer()>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8c7:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000c8cc:	7f 22                	jg     c000c8f0 <VCache::write(unsigned long long, int, void*)+0xd8>
c000c8ce:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000c8d1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000c8d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8d8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000c8dc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000c8df:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000c8e2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c8e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c8ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8ee:	eb 18                	jmp    c000c908 <VCache::write(unsigned long long, int, void*)+0xf0>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8fd:	57                   	push   edi
c000c8fe:	56                   	push   esi
c000c8ff:	50                   	push   eax
c000c900:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c903:	83 c4 20             	add    esp,0x20
c000c906:	66 90                	xchg   ax,ax
c000c908:	83 c4 0c             	add    esp,0xc
c000c90b:	31 c0                	xor    eax,eax
c000c90d:	5b                   	pop    ebx
c000c90e:	5e                   	pop    esi
c000c90f:	5f                   	pop    edi
c000c910:	5d                   	pop    ebp
c000c911:	c3                   	ret    

c000c912 <VCache::read(unsigned long long, int, void*)>:
c000c912:	55                   	push   ebp
c000c913:	31 c0                	xor    eax,eax
c000c915:	57                   	push   edi
c000c916:	56                   	push   esi
c000c917:	53                   	push   ebx
c000c918:	83 ec 1c             	sub    esp,0x1c
c000c91b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c91f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c923:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c927:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c92b:	90                   	nop
c000c92c:	39 e8                	cmp    eax,ebp
c000c92e:	7d 18                	jge    c000c948 <VCache::read(unsigned long long, int, void*)+0x36>
c000c930:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c933:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c939:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c93d:	0f af c8             	imul   ecx,eax
c000c940:	01 ca                	add    edx,ecx
c000c942:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c944:	40                   	inc    eax
c000c945:	eb e5                	jmp    c000c92c <VCache::read(unsigned long long, int, void*)+0x1a>
c000c947:	90                   	nop
c000c948:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c94c:	74 0e                	je     c000c95c <VCache::read(unsigned long long, int, void*)+0x4a>
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	53                   	push   ebx
c000c952:	e8 f9 fd ff ff       	call   c000c750 <VCache::writeWriteBuffer()>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	66 90                	xchg   ax,ax
c000c95c:	83 fd 01             	cmp    ebp,0x1
c000c95f:	0f 85 87 00 00 00    	jne    c000c9ec <VCache::read(unsigned long long, int, void*)+0xda>
c000c965:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c96c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000c973:	75 77                	jne    c000c9ec <VCache::read(unsigned long long, int, void*)+0xda>
c000c975:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000c978:	89 e9                	mov    ecx,ebp
c000c97a:	f7 d9                	neg    ecx
c000c97c:	89 c8                	mov    eax,ecx
c000c97e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c982:	c1 f8 1f             	sar    eax,0x1f
c000c985:	21 f1                	and    ecx,esi
c000c987:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c98b:	89 c8                	mov    eax,ecx
c000c98d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c991:	21 f9                	and    ecx,edi
c000c993:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c997:	89 ca                	mov    edx,ecx
c000c999:	74 0d                	je     c000c9a8 <VCache::read(unsigned long long, int, void*)+0x96>
c000c99b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000c99e:	75 08                	jne    c000c9a8 <VCache::read(unsigned long long, int, void*)+0x96>
c000c9a0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000c9a3:	74 27                	je     c000c9cc <VCache::read(unsigned long long, int, void*)+0xba>
c000c9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9a8:	83 ec 0c             	sub    esp,0xc
c000c9ab:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c9af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9b3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c9b6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9b9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000c9bb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c9be:	55                   	push   ebp
c000c9bf:	52                   	push   edx
c000c9c0:	50                   	push   eax
c000c9c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9c5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000c9c8:	83 c4 20             	add    esp,0x20
c000c9cb:	90                   	nop
c000c9cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c9d3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c9d9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c9dc:	48                   	dec    eax
c000c9dd:	21 c6                	and    esi,eax
c000c9df:	0f af f1             	imul   esi,ecx
c000c9e2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c9e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9e7:	eb 23                	jmp    c000ca0c <VCache::read(unsigned long long, int, void*)+0xfa>
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 ec 0c             	sub    esp,0xc
c000c9ef:	53                   	push   ebx
c000c9f0:	e8 4b fd ff ff       	call   c000c740 <VCache::invalidateReadBuffer()>
c000c9f5:	5a                   	pop    edx
c000c9f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9f9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9ff:	55                   	push   ebp
c000ca00:	57                   	push   edi
c000ca01:	56                   	push   esi
c000ca02:	50                   	push   eax
c000ca03:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ca06:	83 c4 20             	add    esp,0x20
c000ca09:	8d 76 00             	lea    esi,[esi+0x0]
c000ca0c:	83 c4 1c             	add    esp,0x1c
c000ca0f:	31 c0                	xor    eax,eax
c000ca11:	5b                   	pop    ebx
c000ca12:	5e                   	pop    esi
c000ca13:	5f                   	pop    edi
c000ca14:	5d                   	pop    ebp
c000ca15:	c3                   	ret    

c000ca16 <Video::putrect(int, int, int, int, unsigned int)>:
c000ca16:	55                   	push   ebp
c000ca17:	57                   	push   edi
c000ca18:	56                   	push   esi
c000ca19:	53                   	push   ebx
c000ca1a:	83 ec 1c             	sub    esp,0x1c
c000ca1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ca21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ca29:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ca2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ca31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca35:	01 df                	add    edi,ebx
c000ca37:	39 fb                	cmp    ebx,edi
c000ca39:	7d 1f                	jge    c000ca5a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ca3b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca3f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ca43:	7d 12                	jge    c000ca57 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ca45:	8b 16                	mov    edx,DWORD PTR [esi]
c000ca47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca4b:	53                   	push   ebx
c000ca4c:	55                   	push   ebp
c000ca4d:	45                   	inc    ebp
c000ca4e:	56                   	push   esi
c000ca4f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ca52:	83 c4 10             	add    esp,0x10
c000ca55:	eb e8                	jmp    c000ca3f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ca57:	43                   	inc    ebx
c000ca58:	eb dd                	jmp    c000ca37 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ca5a:	83 c4 1c             	add    esp,0x1c
c000ca5d:	5b                   	pop    ebx
c000ca5e:	5e                   	pop    esi
c000ca5f:	5f                   	pop    edi
c000ca60:	5d                   	pop    ebp
c000ca61:	c3                   	ret    

c000ca62 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ca62:	55                   	push   ebp
c000ca63:	57                   	push   edi
c000ca64:	31 ff                	xor    edi,edi
c000ca66:	56                   	push   esi
c000ca67:	53                   	push   ebx
c000ca68:	83 ec 1c             	sub    esp,0x1c
c000ca6b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ca6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca73:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ca7a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ca7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca83:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ca87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ca8b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ca8e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca92:	01 f9                	add    ecx,edi
c000ca94:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ca98:	7d 2f                	jge    c000cac9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ca9a:	31 f6                	xor    esi,esi
c000ca9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000caa0:	01 f2                	add    edx,esi
c000caa2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000caa6:	7d 1a                	jge    c000cac2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000caa8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000caab:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000caae:	46                   	inc    esi
c000caaf:	51                   	push   ecx
c000cab0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cab4:	52                   	push   edx
c000cab5:	55                   	push   ebp
c000cab6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cac0:	eb da                	jmp    c000ca9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cac2:	47                   	inc    edi
c000cac3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cac7:	eb c5                	jmp    c000ca8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cac9:	83 c4 1c             	add    esp,0x1c
c000cacc:	5b                   	pop    ebx
c000cacd:	5e                   	pop    esi
c000cace:	5f                   	pop    edi
c000cacf:	5d                   	pop    ebp
c000cad0:	c3                   	ret    
c000cad1:	90                   	nop

c000cad2 <Video::blit(unsigned int*, int, int, int, int)>:
c000cad2:	55                   	push   ebp
c000cad3:	57                   	push   edi
c000cad4:	56                   	push   esi
c000cad5:	53                   	push   ebx
c000cad6:	83 ec 1c             	sub    esp,0x1c
c000cad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cadd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cae1:	85 c0                	test   eax,eax
c000cae3:	79 02                	jns    c000cae7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cae5:	31 c0                	xor    eax,eax
c000cae7:	c1 e0 02             	shl    eax,0x2
c000caea:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000caee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000caf2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000caf6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cafa:	39 d8                	cmp    eax,ebx
c000cafc:	7e 49                	jle    c000cb47 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cafe:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cb04:	7c 41                	jl     c000cb47 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cb06:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cb0a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb0e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cb12:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cb16:	39 f9                	cmp    ecx,edi
c000cb18:	7e 22                	jle    c000cb3c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cb1a:	83 c5 04             	add    ebp,0x4
c000cb1d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cb23:	7c 14                	jl     c000cb39 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cb25:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cb27:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cb2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cb2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cb32:	56                   	push   esi
c000cb33:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cb36:	83 c4 10             	add    esp,0x10
c000cb39:	47                   	inc    edi
c000cb3a:	eb d2                	jmp    c000cb0e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cb3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb40:	43                   	inc    ebx
c000cb41:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cb45:	eb ab                	jmp    c000caf2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cb47:	83 c4 1c             	add    esp,0x1c
c000cb4a:	5b                   	pop    ebx
c000cb4b:	5e                   	pop    esi
c000cb4c:	5f                   	pop    edi
c000cb4d:	5d                   	pop    ebp
c000cb4e:	c3                   	ret    
c000cb4f:	90                   	nop

c000cb50 <Video::clearScreen(unsigned int)>:
c000cb50:	57                   	push   edi
c000cb51:	56                   	push   esi
c000cb52:	53                   	push   ebx
c000cb53:	31 db                	xor    ebx,ebx
c000cb55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb59:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cb5f:	7e 1f                	jle    c000cb80 <Video::clearScreen(unsigned int)+0x30>
c000cb61:	31 ff                	xor    edi,edi
c000cb63:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cb69:	7e 12                	jle    c000cb7d <Video::clearScreen(unsigned int)+0x2d>
c000cb6b:	8b 06                	mov    eax,DWORD PTR [esi]
c000cb6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb71:	53                   	push   ebx
c000cb72:	57                   	push   edi
c000cb73:	47                   	inc    edi
c000cb74:	56                   	push   esi
c000cb75:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cb78:	83 c4 10             	add    esp,0x10
c000cb7b:	eb e6                	jmp    c000cb63 <Video::clearScreen(unsigned int)+0x13>
c000cb7d:	43                   	inc    ebx
c000cb7e:	eb d9                	jmp    c000cb59 <Video::clearScreen(unsigned int)+0x9>
c000cb80:	5b                   	pop    ebx
c000cb81:	5e                   	pop    esi
c000cb82:	5f                   	pop    edi
c000cb83:	c3                   	ret    

c000cb84 <Video::putpixel(int, int, unsigned int)>:
c000cb84:	c7 44 24 04 f4 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6f4
c000cb8c:	e9 24 29 00 00       	jmp    c000f4b5 <Krnl::panic(char const*)>
c000cb91:	90                   	nop

c000cb92 <Video::Video(char const*)>:
c000cb92:	83 ec 0c             	sub    esp,0xc
c000cb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb99:	83 ec 08             	sub    esp,0x8
c000cb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba0:	50                   	push   eax
c000cba1:	e8 f4 e1 ff ff       	call   c000ad9a <Device::Device(char const*)>
c000cba6:	83 c4 10             	add    esp,0x10
c000cba9:	ba 64 e7 01 c0       	mov    edx,0xc001e764
c000cbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb2:	89 10                	mov    DWORD PTR [eax],edx
c000cbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cbc2:	90                   	nop
c000cbc3:	83 c4 0c             	add    esp,0xc
c000cbc6:	c3                   	ret    
c000cbc7:	90                   	nop

c000cbc8 <Video::~Video()>:
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	ba 64 e7 01 c0       	mov    edx,0xc001e764
c000cbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbd4:	89 10                	mov    DWORD PTR [eax],edx
c000cbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbda:	83 ec 0c             	sub    esp,0xc
c000cbdd:	50                   	push   eax
c000cbde:	e8 21 df ff ff       	call   c000ab04 <Device::~Device()>
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	90                   	nop
c000cbe7:	83 c4 0c             	add    esp,0xc
c000cbea:	c3                   	ret    
c000cbeb:	90                   	nop

c000cbec <Video::~Video()>:
c000cbec:	83 ec 0c             	sub    esp,0xc
c000cbef:	83 ec 0c             	sub    esp,0xc
c000cbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf6:	e8 cd ff ff ff       	call   c000cbc8 <Video::~Video()>
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	83 ec 08             	sub    esp,0x8
c000cc01:	68 64 01 00 00       	push   0x164
c000cc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc0a:	e8 ef ca ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	83 c4 0c             	add    esp,0xc
c000cc15:	c3                   	ret    

c000cc16 <Video::isMonochrome()>:
c000cc16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc1a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cc20:	c3                   	ret    
c000cc21:	90                   	nop

c000cc22 <Video::getWidth()>:
c000cc22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc2c:	c3                   	ret    
c000cc2d:	90                   	nop

c000cc2e <Video::getHeight()>:
c000cc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cc38:	c3                   	ret    
c000cc39:	90                   	nop

c000cc3a <Video::drawCursor(int, int, unsigned char*, int)>:
c000cc3a:	55                   	push   ebp
c000cc3b:	57                   	push   edi
c000cc3c:	56                   	push   esi
c000cc3d:	53                   	push   ebx
c000cc3e:	83 ec 2c             	sub    esp,0x2c
c000cc41:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cc45:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cc49:	83 f8 01             	cmp    eax,0x1
c000cc4c:	19 c9                	sbb    ecx,ecx
c000cc4e:	31 db                	xor    ebx,ebx
c000cc50:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cc54:	89 cd                	mov    ebp,ecx
c000cc56:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cc5e:	f7 d5                	not    ebp
c000cc60:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cc66:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cc6a:	01 d8                	add    eax,ebx
c000cc6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc70:	56                   	push   esi
c000cc71:	e8 b8 ff ff ff       	call   c000cc2e <Video::getHeight()>
c000cc76:	59                   	pop    ecx
c000cc77:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cc7b:	7e 70                	jle    c000cced <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cc7d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cc81:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cc85:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cc88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cc8c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cc90:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cc97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc9b:	89 f8                	mov    eax,edi
c000cc9d:	83 c0 20             	add    eax,0x20
c000cca0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cca4:	56                   	push   esi
c000cca5:	e8 78 ff ff ff       	call   c000cc22 <Video::getWidth()>
c000ccaa:	5a                   	pop    edx
c000ccab:	39 c7                	cmp    edi,eax
c000ccad:	7d 34                	jge    c000cce3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ccaf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ccb4:	74 05                	je     c000ccbb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ccb6:	8b 06                	mov    eax,DWORD PTR [esi]
c000ccb8:	55                   	push   ebp
c000ccb9:	eb 0d                	jmp    c000ccc8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ccbb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ccc0:	74 12                	je     c000ccd4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000ccc2:	8b 06                	mov    eax,DWORD PTR [esi]
c000ccc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cccc:	57                   	push   edi
c000cccd:	56                   	push   esi
c000ccce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ccd1:	83 c4 10             	add    esp,0x10
c000ccd4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ccd8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ccdc:	47                   	inc    edi
c000ccdd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cce1:	75 c1                	jne    c000cca4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cce3:	43                   	inc    ebx
c000cce4:	83 fb 20             	cmp    ebx,0x20
c000cce7:	0f 85 79 ff ff ff    	jne    c000cc66 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cced:	83 c4 2c             	add    esp,0x2c
c000ccf0:	5b                   	pop    ebx
c000ccf1:	5e                   	pop    esi
c000ccf2:	5f                   	pop    edi
c000ccf3:	5d                   	pop    ebp
c000ccf4:	c3                   	ret    
c000ccf5:	90                   	nop

c000ccf6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ccf6:	55                   	push   ebp
c000ccf7:	57                   	push   edi
c000ccf8:	56                   	push   esi
c000ccf9:	53                   	push   ebx
c000ccfa:	83 ec 28             	sub    esp,0x28
c000ccfd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cd01:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000cd05:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000cd09:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000cd0d:	c1 e6 08             	shl    esi,0x8
c000cd10:	01 c6                	add    esi,eax
c000cd12:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000cd16:	c1 e0 08             	shl    eax,0x8
c000cd19:	01 d0                	add    eax,edx
c000cd1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd23:	0f af c6             	imul   eax,esi
c000cd26:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000cd2d:	50                   	push   eax
c000cd2e:	e8 22 9d ff ff       	call   c0006a55 <malloc>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	89 c7                	mov    edi,eax
c000cd38:	85 c0                	test   eax,eax
c000cd3a:	75 10                	jne    c000cd4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	68 15 e7 01 c0       	push   0xc001e715
c000cd44:	e8 6c 27 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000cd49:	83 c4 10             	add    esp,0x10
c000cd4c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cd4f:	ba 12 00 00 00       	mov    edx,0x12
c000cd54:	84 c0                	test   al,al
c000cd56:	74 11                	je     c000cd69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cd58:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cd5c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cd60:	c1 fa 03             	sar    edx,0x3
c000cd63:	0f af d1             	imul   edx,ecx
c000cd66:	83 c2 12             	add    edx,0x12
c000cd69:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cd6d:	74 04                	je     c000cd73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cd6f:	85 f6                	test   esi,esi
c000cd71:	75 12                	jne    c000cd85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cd73:	83 ec 0c             	sub    esp,0xc
c000cd76:	68 25 e7 01 c0       	push   0xc001e725
c000cd7b:	e8 5f ca ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000cd80:	e9 b8 00 00 00       	jmp    c000ce3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000cd85:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cd89:	80 f9 02             	cmp    cl,0x2
c000cd8c:	0f 85 96 00 00 00    	jne    c000ce28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cd92:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cd97:	75 0e                	jne    c000cda7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cd99:	84 c0                	test   al,al
c000cd9b:	75 0a                	jne    c000cda7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cd9d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cda0:	83 e8 18             	sub    eax,0x18
c000cda3:	a8 f7                	test   al,0xf7
c000cda5:	74 0a                	je     c000cdb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cda7:	83 ec 0c             	sub    esp,0xc
c000cdaa:	68 3a e7 01 c0       	push   0xc001e73a
c000cdaf:	eb 7f                	jmp    c000ce30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cdb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cdb9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cdc1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000cdc5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cdcd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cdd1:	75 0c                	jne    c000cddf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000cdd3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cdd8:	c1 e0 18             	shl    eax,0x18
c000cddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cddf:	45                   	inc    ebp
c000cde0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000cde5:	c1 e1 10             	shl    ecx,0x10
c000cde8:	89 c8                	mov    eax,ecx
c000cdea:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000cdef:	c1 e1 08             	shl    ecx,0x8
c000cdf2:	09 c1                	or     ecx,eax
c000cdf4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000cdf8:	09 c1                	or     ecx,eax
c000cdfa:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000cdfe:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ce02:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ce06:	c1 f8 03             	sar    eax,0x3
c000ce09:	01 c2                	add    edx,eax
c000ce0b:	89 e8                	mov    eax,ebp
c000ce0d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ce11:	39 c6                	cmp    esi,eax
c000ce13:	7f b0                	jg     c000cdc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000ce15:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ce19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ce1d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ce20:	7e 22                	jle    c000ce44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ce22:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ce26:	eb 99                	jmp    c000cdc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	51                   	push   ecx
c000ce2b:	68 48 e7 01 c0       	push   0xc001e748
c000ce30:	e8 aa c9 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000ce35:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ce38:	e8 28 9c ff ff       	call   c0006a65 <free>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	31 ff                	xor    edi,edi
c000ce42:	eb 0f                	jmp    c000ce53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ce44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ce48:	89 30                	mov    DWORD PTR [eax],esi
c000ce4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ce51:	89 30                	mov    DWORD PTR [eax],esi
c000ce53:	83 c4 1c             	add    esp,0x1c
c000ce56:	89 f8                	mov    eax,edi
c000ce58:	5b                   	pop    ebx
c000ce59:	5e                   	pop    esi
c000ce5a:	5f                   	pop    edi
c000ce5b:	5d                   	pop    ebp
c000ce5c:	c3                   	ret    
c000ce5d:	90                   	nop

c000ce5e <Video::putTGA(int, int, unsigned char*, int)>:
c000ce5e:	55                   	push   ebp
c000ce5f:	57                   	push   edi
c000ce60:	56                   	push   esi
c000ce61:	53                   	push   ebx
c000ce62:	83 ec 28             	sub    esp,0x28
c000ce65:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ce69:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ce6d:	50                   	push   eax
c000ce6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ce72:	50                   	push   eax
c000ce73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ce77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ce7b:	56                   	push   esi
c000ce7c:	e8 75 fe ff ff       	call   c000ccf6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ce81:	83 c4 20             	add    esp,0x20
c000ce84:	85 c0                	test   eax,eax
c000ce86:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ce8a:	74 35                	je     c000cec1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ce8c:	89 c7                	mov    edi,eax
c000ce8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce92:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ce96:	39 d8                	cmp    eax,ebx
c000ce98:	7e 27                	jle    c000cec1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ce9a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ce9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cea2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000cea6:	39 e8                	cmp    eax,ebp
c000cea8:	7e 14                	jle    c000cebe <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ceaa:	8b 06                	mov    eax,DWORD PTR [esi]
c000ceac:	83 c7 04             	add    edi,0x4
c000ceaf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ceb2:	53                   	push   ebx
c000ceb3:	55                   	push   ebp
c000ceb4:	45                   	inc    ebp
c000ceb5:	56                   	push   esi
c000ceb6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ceb9:	83 c4 10             	add    esp,0x10
c000cebc:	eb e0                	jmp    c000ce9e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000cebe:	43                   	inc    ebx
c000cebf:	eb cd                	jmp    c000ce8e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000cec1:	83 c4 1c             	add    esp,0x1c
c000cec4:	5b                   	pop    ebx
c000cec5:	5e                   	pop    esi
c000cec6:	5f                   	pop    edi
c000cec7:	5d                   	pop    ebp
c000cec8:	c3                   	ret    
c000cec9:	66 90                	xchg   ax,ax
c000cecb:	90                   	nop

c000cecc <ACPI::close(int, int, void*)>:
c000cecc:	83 ec 1c             	sub    esp,0x1c
c000cecf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ced7:	74 0b                	je     c000cee4 <ACPI::close(int, int, void*)+0x18>
c000ced9:	b8 00 00 00 00       	mov    eax,0x0
c000cede:	e9 99 00 00 00       	jmp    c000cf7c <ACPI::close(int, int, void*)+0xb0>
c000cee3:	90                   	nop
c000cee4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000cee9:	75 29                	jne    c000cf14 <ACPI::close(int, int, void*)+0x48>
c000ceeb:	a1 68 2a 02 c0       	mov    eax,ds:0xc0022a68
c000cef0:	85 c0                	test   eax,eax
c000cef2:	74 08                	je     c000cefc <ACPI::close(int, int, void*)+0x30>
c000cef4:	a1 68 2a 02 c0       	mov    eax,ds:0xc0022a68
c000cef9:	ff d0                	call   eax
c000cefb:	90                   	nop
c000cefc:	83 ec 0c             	sub    esp,0xc
c000ceff:	68 a4 e7 01 c0       	push   0xc001e7a4
c000cf04:	e8 ac 25 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000cf09:	83 c4 10             	add    esp,0x10
c000cf0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf11:	eb 69                	jmp    c000cf7c <ACPI::close(int, int, void*)+0xb0>
c000cf13:	90                   	nop
c000cf14:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000cf19:	75 59                	jne    c000cf74 <ACPI::close(int, int, void*)+0xa8>
c000cf1b:	a1 64 2a 02 c0       	mov    eax,ds:0xc0022a64
c000cf20:	85 c0                	test   eax,eax
c000cf22:	74 08                	je     c000cf2c <ACPI::close(int, int, void*)+0x60>
c000cf24:	a1 64 2a 02 c0       	mov    eax,ds:0xc0022a64
c000cf29:	ff d0                	call   eax
c000cf2b:	90                   	nop
c000cf2c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000cf31:	8d 76 00             	lea    esi,[esi+0x0]
c000cf34:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000cf39:	83 e0 02             	and    eax,0x2
c000cf3c:	74 1e                	je     c000cf5c <ACPI::close(int, int, void*)+0x90>
c000cf3e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000cf45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf49:	89 c2                	mov    edx,eax
c000cf4b:	ec                   	in     al,dx
c000cf4c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000cf50:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000cf54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000cf58:	eb da                	jmp    c000cf34 <ACPI::close(int, int, void*)+0x68>
c000cf5a:	66 90                	xchg   ax,ax
c000cf5c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000cf63:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000cf68:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	ee                   	out    dx,al
c000cf71:	8d 76 00             	lea    esi,[esi+0x0]
c000cf74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf79:	8d 76 00             	lea    esi,[esi+0x0]
c000cf7c:	83 c4 1c             	add    esp,0x1c
c000cf7f:	c3                   	ret    

c000cf80 <findRSDP()>:
c000cf80:	83 ec 1c             	sub    esp,0x1c
c000cf83:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000cf88:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000cf8e:	83 e0 04             	and    eax,0x4
c000cf91:	84 c0                	test   al,al
c000cf93:	75 07                	jne    c000cf9c <findRSDP()+0x1c>
c000cf95:	b8 00 00 00 00       	mov    eax,0x0
c000cf9a:	eb 70                	jmp    c000d00c <findRSDP()+0x8c>
c000cf9c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000cfa1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000cfa6:	7f 1c                	jg     c000cfc4 <findRSDP()+0x44>
c000cfa8:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000cfad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000cfb3:	83 e2 fb             	and    edx,0xfffffffb
c000cfb6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000cfbc:	b8 00 00 00 00       	mov    eax,0x0
c000cfc1:	eb 49                	jmp    c000d00c <findRSDP()+0x8c>
c000cfc3:	90                   	nop
c000cfc4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000cfcc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000cfd4:	77 2e                	ja     c000d004 <findRSDP()+0x84>
c000cfd6:	83 ec 04             	sub    esp,0x4
c000cfd9:	6a 08                	push   0x8
c000cfdb:	68 3f e8 01 c0       	push   0xc001e83f
c000cfe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfe4:	e8 bb 33 ff ff       	call   c00003a4 <memcmp>
c000cfe9:	83 c4 10             	add    esp,0x10
c000cfec:	85 c0                	test   eax,eax
c000cfee:	0f 94 c0             	sete   al
c000cff1:	84 c0                	test   al,al
c000cff3:	74 07                	je     c000cffc <findRSDP()+0x7c>
c000cff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cff9:	eb 11                	jmp    c000d00c <findRSDP()+0x8c>
c000cffb:	90                   	nop
c000cffc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d001:	eb c9                	jmp    c000cfcc <findRSDP()+0x4c>
c000d003:	90                   	nop
c000d004:	b8 00 00 00 00       	mov    eax,0x0
c000d009:	8d 76 00             	lea    esi,[esi+0x0]
c000d00c:	83 c4 1c             	add    esp,0x1c
c000d00f:	c3                   	ret    

c000d010 <loadACPITables(unsigned char*)>:
c000d010:	57                   	push   edi
c000d011:	56                   	push   esi
c000d012:	53                   	push   ebx
c000d013:	83 ec 60             	sub    esp,0x60
c000d016:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d01b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d021:	83 e0 04             	and    eax,0x4
c000d024:	84 c0                	test   al,al
c000d026:	0f 84 3c 02 00 00    	je     c000d268 <loadACPITables(unsigned char*)+0x258>
c000d02c:	a0 80 2c 02 c0       	mov    al,ds:0xc0022c80
c000d031:	84 c0                	test   al,al
c000d033:	74 77                	je     c000d0ac <loadACPITables(unsigned char*)+0x9c>
c000d035:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d039:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d03d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d044:	83 e8 24             	sub    eax,0x24
c000d047:	c1 e8 03             	shr    eax,0x3
c000d04a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d04e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d056:	66 90                	xchg   ax,ax
c000d058:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d05c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d060:	0f 8d b6 00 00 00    	jge    c000d11c <loadACPITables(unsigned char*)+0x10c>
c000d066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d06a:	83 c0 24             	add    eax,0x24
c000d06d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d071:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d075:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d079:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d07d:	c1 e0 03             	shl    eax,0x3
c000d080:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d084:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d088:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d08b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d08d:	89 c1                	mov    ecx,eax
c000d08f:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d094:	8d 50 01             	lea    edx,[eax+0x1]
c000d097:	89 15 6c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a6c,edx
c000d09d:	89 ca                	mov    edx,ecx
c000d09f:	89 14 c5 84 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd57c],edx
c000d0a6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d0aa:	eb ac                	jmp    c000d058 <loadACPITables(unsigned char*)+0x48>
c000d0ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d0b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0bb:	83 e8 24             	sub    eax,0x24
c000d0be:	c1 e8 02             	shr    eax,0x2
c000d0c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d0c5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d0d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d0d4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d0d8:	7d 42                	jge    c000d11c <loadACPITables(unsigned char*)+0x10c>
c000d0da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d0de:	83 c0 24             	add    eax,0x24
c000d0e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d0e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d0ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d0f1:	c1 e0 02             	shl    eax,0x2
c000d0f4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d0f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d0fe:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d103:	8d 50 01             	lea    edx,[eax+0x1]
c000d106:	89 15 6c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a6c,edx
c000d10c:	89 ca                	mov    edx,ecx
c000d10e:	89 14 c5 84 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd57c],edx
c000d115:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d119:	eb b5                	jmp    c000d0d0 <loadACPITables(unsigned char*)+0xc0>
c000d11b:	90                   	nop
c000d11c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d124:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d129:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d12d:	0f 8d 39 01 00 00    	jge    c000d26c <loadACPITables(unsigned char*)+0x25c>
c000d133:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d137:	8b 04 c5 84 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd57c]
c000d13e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d146:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d14a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d14e:	25 ff 0f 00 00       	and    eax,0xfff
c000d153:	89 c6                	mov    esi,eax
c000d155:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c000d15b:	83 ec 0c             	sub    esp,0xc
c000d15e:	6a 01                	push   0x1
c000d160:	e8 18 b4 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c000d165:	83 c4 10             	add    esp,0x10
c000d168:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d16c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d172:	83 ec 0c             	sub    esp,0xc
c000d175:	6a 01                	push   0x1
c000d177:	6a 01                	push   0x1
c000d179:	50                   	push   eax
c000d17a:	52                   	push   edx
c000d17b:	53                   	push   ebx
c000d17c:	e8 47 bd ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d181:	83 c4 20             	add    esp,0x20
c000d184:	09 f0                	or     eax,esi
c000d186:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d18a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d18e:	c1 e0 03             	shl    eax,0x3
c000d191:	05 80 2a 02 c0       	add    eax,0xc0022a80
c000d196:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d19a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1a2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d1aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1be:	89 c6                	mov    esi,eax
c000d1c0:	89 d7                	mov    edi,edx
c000d1c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d1c4:	89 c8                	mov    eax,ecx
c000d1c6:	89 fa                	mov    edx,edi
c000d1c8:	89 f3                	mov    ebx,esi
c000d1ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d1ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d1d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d1dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d1e5:	05 00 10 00 00       	add    eax,0x1000
c000d1ea:	c1 e8 0c             	shr    eax,0xc
c000d1ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d1f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1fd:	25 ff 0f 00 00       	and    eax,0xfff
c000d202:	89 c6                	mov    esi,eax
c000d204:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c000d20a:	83 ec 0c             	sub    esp,0xc
c000d20d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d211:	e8 67 b3 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c000d216:	83 c4 10             	add    esp,0x10
c000d219:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d21d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d223:	83 ec 0c             	sub    esp,0xc
c000d226:	6a 01                	push   0x1
c000d228:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22c:	50                   	push   eax
c000d22d:	52                   	push   edx
c000d22e:	53                   	push   ebx
c000d22f:	e8 94 bc ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d234:	83 c4 20             	add    esp,0x20
c000d237:	09 f0                	or     eax,esi
c000d239:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d241:	83 ec 0c             	sub    esp,0xc
c000d244:	50                   	push   eax
c000d245:	e8 27 b6 ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c000d24a:	83 c4 10             	add    esp,0x10
c000d24d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d251:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d255:	89 14 c5 84 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd57c],edx
c000d25c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d260:	e9 bf fe ff ff       	jmp    c000d124 <loadACPITables(unsigned char*)+0x114>
c000d265:	8d 76 00             	lea    esi,[esi+0x0]
c000d268:	90                   	nop
c000d269:	8d 76 00             	lea    esi,[esi+0x0]
c000d26c:	83 c4 60             	add    esp,0x60
c000d26f:	5b                   	pop    ebx
c000d270:	5e                   	pop    esi
c000d271:	5f                   	pop    edi
c000d272:	c3                   	ret    
c000d273:	90                   	nop

c000d274 <findRSDT(unsigned char*)>:
c000d274:	57                   	push   edi
c000d275:	56                   	push   esi
c000d276:	53                   	push   ebx
c000d277:	83 ec 50             	sub    esp,0x50
c000d27a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d27f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d285:	83 e0 04             	and    eax,0x4
c000d288:	84 c0                	test   al,al
c000d28a:	75 0c                	jne    c000d298 <findRSDT(unsigned char*)+0x24>
c000d28c:	b8 00 00 00 00       	mov    eax,0x0
c000d291:	e9 26 01 00 00       	jmp    c000d3bc <findRSDT(unsigned char*)+0x148>
c000d296:	66 90                	xchg   ax,ax
c000d298:	89 e0                	mov    eax,esp
c000d29a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d29e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d2a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d2ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d2ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d2be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d2c2:	89 c6                	mov    esi,eax
c000d2c4:	89 d7                	mov    edi,edx
c000d2c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2c8:	89 c8                	mov    eax,ecx
c000d2ca:	89 fa                	mov    edx,edi
c000d2cc:	89 f3                	mov    ebx,esi
c000d2ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d2d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d2d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d2da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d2de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d2e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d2ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d2ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d2f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d302:	25 ff 0f 00 00       	and    eax,0xfff
c000d307:	89 c6                	mov    esi,eax
c000d309:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	6a 02                	push   0x2
c000d314:	e8 64 b2 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d320:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	6a 01                	push   0x1
c000d32b:	6a 02                	push   0x2
c000d32d:	50                   	push   eax
c000d32e:	52                   	push   edx
c000d32f:	53                   	push   ebx
c000d330:	e8 93 bb ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d335:	83 c4 20             	add    esp,0x20
c000d338:	09 f0                	or     eax,esi
c000d33a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d33e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d342:	25 ff 0f 00 00       	and    eax,0xfff
c000d347:	89 c6                	mov    esi,eax
c000d349:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c000d34f:	83 ec 0c             	sub    esp,0xc
c000d352:	6a 02                	push   0x2
c000d354:	e8 24 b2 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c000d359:	83 c4 10             	add    esp,0x10
c000d35c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d360:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d366:	83 ec 0c             	sub    esp,0xc
c000d369:	6a 01                	push   0x1
c000d36b:	6a 02                	push   0x2
c000d36d:	50                   	push   eax
c000d36e:	52                   	push   edx
c000d36f:	53                   	push   ebx
c000d370:	e8 53 bb ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d375:	83 c4 20             	add    esp,0x20
c000d378:	09 f0                	or     eax,esi
c000d37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d37e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d383:	75 13                	jne    c000d398 <findRSDT(unsigned char*)+0x124>
c000d385:	c6 05 80 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022c80,0x0
c000d38c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d390:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d394:	eb 22                	jmp    c000d3b8 <findRSDT(unsigned char*)+0x144>
c000d396:	66 90                	xchg   ax,ax
c000d398:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d39d:	75 11                	jne    c000d3b0 <findRSDT(unsigned char*)+0x13c>
c000d39f:	c6 05 80 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c80,0x1
c000d3a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d3aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3ae:	eb 08                	jmp    c000d3b8 <findRSDT(unsigned char*)+0x144>
c000d3b0:	b8 00 00 00 00       	mov    eax,0x0
c000d3b5:	eb 05                	jmp    c000d3bc <findRSDT(unsigned char*)+0x148>
c000d3b7:	90                   	nop
c000d3b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d3bc:	83 c4 50             	add    esp,0x50
c000d3bf:	5b                   	pop    ebx
c000d3c0:	5e                   	pop    esi
c000d3c1:	5f                   	pop    edi
c000d3c2:	c3                   	ret    
c000d3c3:	90                   	nop

c000d3c4 <findDataTable(unsigned char*, char*)>:
c000d3c4:	83 ec 1c             	sub    esp,0x1c
c000d3c7:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d3cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d3d2:	83 e0 04             	and    eax,0x4
c000d3d5:	84 c0                	test   al,al
c000d3d7:	75 07                	jne    c000d3e0 <findDataTable(unsigned char*, char*)+0x1c>
c000d3d9:	b8 00 00 00 00       	mov    eax,0x0
c000d3de:	eb 58                	jmp    c000d438 <findDataTable(unsigned char*, char*)+0x74>
c000d3e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d3e8:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d3ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d3f1:	7d 3d                	jge    c000d430 <findDataTable(unsigned char*, char*)+0x6c>
c000d3f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3f7:	c1 e0 03             	shl    eax,0x3
c000d3fa:	05 80 2a 02 c0       	add    eax,0xc0022a80
c000d3ff:	83 ec 04             	sub    esp,0x4
c000d402:	6a 04                	push   0x4
c000d404:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d408:	50                   	push   eax
c000d409:	e8 96 2f ff ff       	call   c00003a4 <memcmp>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	85 c0                	test   eax,eax
c000d413:	0f 94 c0             	sete   al
c000d416:	84 c0                	test   al,al
c000d418:	74 0e                	je     c000d428 <findDataTable(unsigned char*, char*)+0x64>
c000d41a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41e:	8b 04 c5 84 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd57c]
c000d425:	eb 11                	jmp    c000d438 <findDataTable(unsigned char*, char*)+0x74>
c000d427:	90                   	nop
c000d428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d42c:	eb ba                	jmp    c000d3e8 <findDataTable(unsigned char*, char*)+0x24>
c000d42e:	66 90                	xchg   ax,ax
c000d430:	b8 00 00 00 00       	mov    eax,0x0
c000d435:	8d 76 00             	lea    esi,[esi+0x0]
c000d438:	83 c4 1c             	add    esp,0x1c
c000d43b:	c3                   	ret    

c000d43c <scanMADT()>:
c000d43c:	53                   	push   ebx
c000d43d:	83 ec 38             	sub    esp,0x38
c000d440:	a1 80 04 02 c0       	mov    eax,ds:0xc0020480
c000d445:	25 00 04 00 00       	and    eax,0x400
c000d44a:	74 14                	je     c000d460 <scanMADT()+0x24>
c000d44c:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d451:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d457:	83 e2 fb             	and    edx,0xfffffffb
c000d45a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d460:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d465:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d46b:	83 e0 04             	and    eax,0x4
c000d46e:	84 c0                	test   al,al
c000d470:	0f 84 52 04 00 00    	je     c000d8c8 <scanMADT()+0x48c>
c000d476:	e8 05 fb ff ff       	call   c000cf80 <findRSDP()>
c000d47b:	a3 8c 2c 02 c0       	mov    ds:0xc0022c8c,eax
c000d480:	a1 8c 2c 02 c0       	mov    eax,ds:0xc0022c8c
c000d485:	85 c0                	test   eax,eax
c000d487:	75 1b                	jne    c000d4a4 <scanMADT()+0x68>
c000d489:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d48e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d494:	83 e2 fb             	and    edx,0xfffffffb
c000d497:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d49d:	e9 2e 04 00 00       	jmp    c000d8d0 <scanMADT()+0x494>
c000d4a2:	66 90                	xchg   ax,ax
c000d4a4:	a1 8c 2c 02 c0       	mov    eax,ds:0xc0022c8c
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 c2 fd ff ff       	call   c000d274 <findRSDT(unsigned char*)>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	a3 88 2c 02 c0       	mov    ds:0xc0022c88,eax
c000d4ba:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000d4bf:	85 c0                	test   eax,eax
c000d4c1:	75 19                	jne    c000d4dc <scanMADT()+0xa0>
c000d4c3:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d4c8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d4ce:	83 e2 fb             	and    edx,0xfffffffb
c000d4d1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d4d7:	e9 f4 03 00 00       	jmp    c000d8d0 <scanMADT()+0x494>
c000d4dc:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000d4e1:	83 ec 0c             	sub    esp,0xc
c000d4e4:	50                   	push   eax
c000d4e5:	e8 26 fb ff ff       	call   c000d010 <loadACPITables(unsigned char*)>
c000d4ea:	83 c4 10             	add    esp,0x10
c000d4ed:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000d4f2:	83 ec 08             	sub    esp,0x8
c000d4f5:	68 48 e8 01 c0       	push   0xc001e848
c000d4fa:	50                   	push   eax
c000d4fb:	e8 c4 fe ff ff       	call   c000d3c4 <findDataTable(unsigned char*, char*)>
c000d500:	83 c4 10             	add    esp,0x10
c000d503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d507:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d50c:	75 1a                	jne    c000d528 <scanMADT()+0xec>
c000d50e:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000d513:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d519:	83 e2 fe             	and    edx,0xfffffffe
c000d51c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d522:	e9 a9 03 00 00       	jmp    c000d8d0 <scanMADT()+0x494>
c000d527:	90                   	nop
c000d528:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d530:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d537:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d53b:	0f 87 8f 03 00 00    	ja     c000d8d0 <scanMADT()+0x494>
c000d541:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d549:	0f 87 81 03 00 00    	ja     c000d8d0 <scanMADT()+0x494>
c000d54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d553:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d55b:	8d 50 01             	lea    edx,[eax+0x1]
c000d55e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d566:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d56a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d56e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d572:	8d 50 01             	lea    edx,[eax+0x1]
c000d575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d57d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d581:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d585:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d58a:	0f 86 3c 03 00 00    	jbe    c000d8cc <scanMADT()+0x490>
c000d590:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d595:	75 59                	jne    c000d5f0 <scanMADT()+0x1b4>
c000d597:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d59b:	8d 50 01             	lea    edx,[eax+0x1]
c000d59e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5a2:	8a 15 80 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e80
c000d5a8:	0f b6 d2             	movzx  edx,dl
c000d5ab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d5af:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d5b3:	88 82 c0 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd140],al
c000d5b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d5bd:	8d 50 01             	lea    edx,[eax+0x1]
c000d5c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5c4:	8a 15 80 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e80
c000d5ca:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5cd:	88 0d 80 2e 02 c0    	mov    BYTE PTR ds:0xc0022e80,cl
c000d5d3:	0f b6 d2             	movzx  edx,dl
c000d5d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d5da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d5de:	88 82 a0 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd160],al
c000d5e4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d5e9:	e9 c6 02 00 00       	jmp    c000d8b4 <scanMADT()+0x478>
c000d5ee:	66 90                	xchg   ax,ax
c000d5f0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d5f5:	0f 85 15 01 00 00    	jne    c000d710 <scanMADT()+0x2d4>
c000d5fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000d602:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d606:	8a 15 40 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d40
c000d60c:	0f b6 d2             	movzx  edx,dl
c000d60f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d613:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d617:	88 82 60 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd2a0],al
c000d61d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d625:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d629:	01 d0                	add    eax,edx
c000d62b:	83 c0 2c             	add    eax,0x2c
c000d62e:	8a 00                	mov    al,BYTE PTR [eax]
c000d630:	0f b6 d0             	movzx  edx,al
c000d633:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d637:	8d 48 01             	lea    ecx,[eax+0x1]
c000d63a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d63e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d642:	0f b6 c0             	movzx  eax,al
c000d645:	c1 e0 08             	shl    eax,0x8
c000d648:	89 d1                	mov    ecx,edx
c000d64a:	09 c1                	or     ecx,eax
c000d64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d650:	8d 50 02             	lea    edx,[eax+0x2]
c000d653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d657:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d65b:	0f b6 c0             	movzx  eax,al
c000d65e:	c1 e0 10             	shl    eax,0x10
c000d661:	09 c1                	or     ecx,eax
c000d663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d667:	8d 50 03             	lea    edx,[eax+0x3]
c000d66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d66e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d672:	0f b6 c0             	movzx  eax,al
c000d675:	c1 e0 18             	shl    eax,0x18
c000d678:	09 c1                	or     ecx,eax
c000d67a:	89 ca                	mov    edx,ecx
c000d67c:	a0 40 2d 02 c0       	mov    al,ds:0xc0022d40
c000d681:	0f b6 c0             	movzx  eax,al
c000d684:	89 14 85 80 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd280],edx
c000d68b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d690:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d694:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d698:	01 d0                	add    eax,edx
c000d69a:	83 c0 2c             	add    eax,0x2c
c000d69d:	8a 00                	mov    al,BYTE PTR [eax]
c000d69f:	0f b6 d0             	movzx  edx,al
c000d6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6a6:	8d 48 01             	lea    ecx,[eax+0x1]
c000d6a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d6ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d6b1:	0f b6 c0             	movzx  eax,al
c000d6b4:	c1 e0 08             	shl    eax,0x8
c000d6b7:	89 d1                	mov    ecx,edx
c000d6b9:	09 c1                	or     ecx,eax
c000d6bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6bf:	8d 50 02             	lea    edx,[eax+0x2]
c000d6c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d6c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d6ca:	0f b6 c0             	movzx  eax,al
c000d6cd:	c1 e0 10             	shl    eax,0x10
c000d6d0:	09 c1                	or     ecx,eax
c000d6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6d6:	8d 50 03             	lea    edx,[eax+0x3]
c000d6d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d6dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d6e1:	0f b6 c0             	movzx  eax,al
c000d6e4:	c1 e0 18             	shl    eax,0x18
c000d6e7:	09 c1                	or     ecx,eax
c000d6e9:	89 ca                	mov    edx,ecx
c000d6eb:	a0 40 2d 02 c0       	mov    al,ds:0xc0022d40
c000d6f0:	0f b6 c0             	movzx  eax,al
c000d6f3:	89 14 85 00 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd200],edx
c000d6fa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d6ff:	a0 40 2d 02 c0       	mov    al,ds:0xc0022d40
c000d704:	40                   	inc    eax
c000d705:	a2 40 2d 02 c0       	mov    ds:0xc0022d40,al
c000d70a:	e9 a5 01 00 00       	jmp    c000d8b4 <scanMADT()+0x478>
c000d70f:	90                   	nop
c000d710:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d715:	0f 85 e9 00 00 00    	jne    c000d804 <scanMADT()+0x3c8>
c000d71b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d71f:	8d 50 01             	lea    edx,[eax+0x1]
c000d722:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d726:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d72a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d72e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d736:	8d 50 01             	lea    edx,[eax+0x1]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d741:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d745:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d74d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d751:	01 d0                	add    eax,edx
c000d753:	83 c0 2c             	add    eax,0x2c
c000d756:	8a 00                	mov    al,BYTE PTR [eax]
c000d758:	0f b6 d0             	movzx  edx,al
c000d75b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d75f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d766:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d76a:	0f b6 c0             	movzx  eax,al
c000d76d:	c1 e0 08             	shl    eax,0x8
c000d770:	89 d1                	mov    ecx,edx
c000d772:	09 c1                	or     ecx,eax
c000d774:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d778:	8d 50 02             	lea    edx,[eax+0x2]
c000d77b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d77f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d783:	0f b6 c0             	movzx  eax,al
c000d786:	c1 e0 10             	shl    eax,0x10
c000d789:	09 c1                	or     ecx,eax
c000d78b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d78f:	8d 50 03             	lea    edx,[eax+0x3]
c000d792:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d796:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d79a:	0f b6 c0             	movzx  eax,al
c000d79d:	c1 e0 18             	shl    eax,0x18
c000d7a0:	09 c8                	or     eax,ecx
c000d7a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7a6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d7ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7b3:	01 d0                	add    eax,edx
c000d7b5:	83 c0 2c             	add    eax,0x2c
c000d7b8:	8a 00                	mov    al,BYTE PTR [eax]
c000d7ba:	0f b6 c0             	movzx  eax,al
c000d7bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d7c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d7c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7c8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d7cc:	0f b6 d2             	movzx  edx,dl
c000d7cf:	c1 e2 08             	shl    edx,0x8
c000d7d2:	09 d0                	or     eax,edx
c000d7d4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d7d9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d7de:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d7e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d7e7:	88 90 20 fe 01 c0    	mov    BYTE PTR [eax-0x3ffe01e0],dl
c000d7ed:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000d7f2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d7f7:	66 89 84 12 20 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd2e0],ax
c000d7ff:	e9 b0 00 00 00       	jmp    c000d8b4 <scanMADT()+0x478>
c000d804:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d809:	0f 85 99 00 00 00    	jne    c000d8a8 <scanMADT()+0x46c>
c000d80f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d813:	8d 50 01             	lea    edx,[eax+0x1]
c000d816:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d81a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d81e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d822:	0f b6 c0             	movzx  eax,al
c000d825:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d829:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d82d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d831:	01 d0                	add    eax,edx
c000d833:	83 c0 2c             	add    eax,0x2c
c000d836:	8a 00                	mov    al,BYTE PTR [eax]
c000d838:	0f b6 d0             	movzx  edx,al
c000d83b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d83f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d842:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d846:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d84a:	0f b6 c0             	movzx  eax,al
c000d84d:	c1 e0 08             	shl    eax,0x8
c000d850:	09 d0                	or     eax,edx
c000d852:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d856:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d85b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d85f:	8d 50 01             	lea    edx,[eax+0x1]
c000d862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d866:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d86a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d86e:	0f b6 c0             	movzx  eax,al
c000d871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d879:	c1 e0 08             	shl    eax,0x8
c000d87c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d880:	89 c1                	mov    ecx,eax
c000d882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d886:	c1 e0 18             	shl    eax,0x18
c000d889:	89 c3                	mov    ebx,eax
c000d88b:	a1 90 2c 02 c0       	mov    eax,ds:0xc0022c90
c000d890:	8d 50 01             	lea    edx,[eax+0x1]
c000d893:	89 15 90 2c 02 c0    	mov    DWORD PTR ds:0xc0022c90,edx
c000d899:	09 d9                	or     ecx,ebx
c000d89b:	89 ca                	mov    edx,ecx
c000d89d:	89 14 85 a0 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd360],edx
c000d8a4:	eb 0e                	jmp    c000d8b4 <scanMADT()+0x478>
c000d8a6:	66 90                	xchg   ax,ax
c000d8a8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000d8ad:	75 05                	jne    c000d8b4 <scanMADT()+0x478>
c000d8af:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d8b4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d8b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d8bd:	01 d0                	add    eax,edx
c000d8bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d8c3:	e9 68 fc ff ff       	jmp    c000d530 <scanMADT()+0xf4>
c000d8c8:	90                   	nop
c000d8c9:	eb 05                	jmp    c000d8d0 <scanMADT()+0x494>
c000d8cb:	90                   	nop
c000d8cc:	90                   	nop
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	83 c4 38             	add    esp,0x38
c000d8d3:	5b                   	pop    ebx
c000d8d4:	c3                   	ret    
c000d8d5:	90                   	nop
c000d8d6:	66 90                	xchg   ax,ax

c000d8d8 <ACPI::ACPI()>:
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8df:	83 ec 08             	sub    esp,0x8
c000d8e2:	68 4d e8 01 c0       	push   0xc001e84d
c000d8e7:	50                   	push   eax
c000d8e8:	e8 ad d4 ff ff       	call   c000ad9a <Device::Device(char const*)>
c000d8ed:	83 c4 10             	add    esp,0x10
c000d8f0:	ba 84 e9 01 c0       	mov    edx,0xc001e984
c000d8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f9:	89 10                	mov    DWORD PTR [eax],edx
c000d8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d90a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d918:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d922:	e8 15 fb ff ff       	call   c000d43c <scanMADT()>
c000d927:	90                   	nop
c000d928:	83 c4 0c             	add    esp,0xc
c000d92b:	c3                   	ret    

c000d92c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d92c:	83 ec 2c             	sub    esp,0x2c
c000d92f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d933:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d937:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d93b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000d93f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d944:	88 d0                	mov    al,dl
c000d946:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d94a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d94f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d957:	90                   	nop
c000d958:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d95c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d962:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d966:	0f 8d 9c 00 00 00    	jge    c000da08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000d96c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d970:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d974:	83 c2 2a             	add    edx,0x2a
c000d977:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d97b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000d980:	75 7a                	jne    c000d9fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000d982:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d986:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d98a:	83 c2 2a             	add    edx,0x2a
c000d98d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d991:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000d995:	75 65                	jne    c000d9fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000d997:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000d99c:	74 3a                	je     c000d9d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000d99e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d9a6:	83 c2 2a             	add    edx,0x2a
c000d9a9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d9ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d9b4:	39 c2                	cmp    edx,eax
c000d9b6:	74 10                	je     c000d9c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000d9b8:	83 ec 0c             	sub    esp,0xc
c000d9bb:	68 c8 e7 01 c0       	push   0xc001e7c8
c000d9c0:	e8 f0 1a 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	83 ec 0c             	sub    esp,0xc
c000d9cb:	68 52 e8 01 c0       	push   0xc001e852
c000d9d0:	e8 e0 1a 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d9dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d9e4:	83 c2 2a             	add    edx,0x2a
c000d9e7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d9eb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d9ed:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d9f0:	89 01                	mov    DWORD PTR [ecx],eax
c000d9f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d9f5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d9fa:	66 90                	xchg   ax,ax
c000d9fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000da00:	e9 53 ff ff ff       	jmp    c000d958 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000da05:	8d 76 00             	lea    esi,[esi+0x0]
c000da08:	90                   	nop
c000da09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da0d:	83 c4 2c             	add    esp,0x2c
c000da10:	c2 04 00             	ret    0x4
c000da13:	90                   	nop

c000da14 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000da14:	83 ec 1c             	sub    esp,0x1c
c000da17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000da23:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000da28:	88 c8                	mov    al,cl
c000da2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000da2e:	88 d0                	mov    al,dl
c000da30:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000da34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da38:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000da45:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000da49:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000da57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da5b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000da5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da62:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000da67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000da71:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000da75:	8d 48 01             	lea    ecx,[eax+0x1]
c000da78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7c:	83 c2 2a             	add    edx,0x2a
c000da7f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000da83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000da8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da91:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000da94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da98:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000da9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000daa6:	8d 50 01             	lea    edx,[eax+0x1]
c000daa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daad:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dabd:	3d 00 02 00 00       	cmp    eax,0x200
c000dac2:	75 10                	jne    c000dad4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dac4:	83 ec 0c             	sub    esp,0xc
c000dac7:	68 61 e8 01 c0       	push   0xc001e861
c000dacc:	e8 e4 19 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	90                   	nop
c000dad5:	83 c4 1c             	add    esp,0x1c
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop
c000dada:	66 90                	xchg   ax,ax

c000dadc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dadc:	b8 00 00 00 00       	mov    eax,0x0
c000dae1:	c3                   	ret    
c000dae2:	66 90                	xchg   ax,ax

c000dae4 <ACPI::detectPCI()>:
c000dae4:	53                   	push   ebx
c000dae5:	83 ec 28             	sub    esp,0x28
c000dae8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000daed:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000daf2:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000daf7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000dafd:	83 e0 04             	and    eax,0x4
c000db00:	84 c0                	test   al,al
c000db02:	74 2c                	je     c000db30 <ACPI::detectPCI()+0x4c>
c000db04:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000db09:	83 ec 08             	sub    esp,0x8
c000db0c:	68 7e e8 01 c0       	push   0xc001e87e
c000db11:	50                   	push   eax
c000db12:	e8 ad f8 ff ff       	call   c000d3c4 <findDataTable(unsigned char*, char*)>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db1e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000db23:	74 0b                	je     c000db30 <ACPI::detectPCI()+0x4c>
c000db25:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db2a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000db2f:	90                   	nop
c000db30:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000db38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db3c:	8a 00                	mov    al,BYTE PTR [eax]
c000db3e:	3c 01                	cmp    al,0x1
c000db40:	75 0e                	jne    c000db50 <ACPI::detectPCI()+0x6c>
c000db42:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db47:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000db4c:	eb 2a                	jmp    c000db78 <ACPI::detectPCI()+0x94>
c000db4e:	66 90                	xchg   ax,ax
c000db50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db54:	8a 00                	mov    al,BYTE PTR [eax]
c000db56:	3c 02                	cmp    al,0x2
c000db58:	75 1e                	jne    c000db78 <ACPI::detectPCI()+0x94>
c000db5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db5f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000db64:	74 12                	je     c000db78 <ACPI::detectPCI()+0x94>
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	68 f8 e7 01 c0       	push   0xc001e7f8
c000db6e:	e8 42 19 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000db73:	83 c4 10             	add    esp,0x10
c000db76:	66 90                	xchg   ax,ax
c000db78:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000db7c:	83 f0 01             	xor    eax,0x1
c000db7f:	84 c0                	test   al,al
c000db81:	74 41                	je     c000dbc4 <ACPI::detectPCI()+0xe0>
c000db83:	e8 c8 25 ff ff       	call   c0000150 <manualPCIProbe>
c000db88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000db91:	75 0d                	jne    c000dba0 <ACPI::detectPCI()+0xbc>
c000db93:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db98:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000db9d:	eb 25                	jmp    c000dbc4 <ACPI::detectPCI()+0xe0>
c000db9f:	90                   	nop
c000dba0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000dba5:	75 1d                	jne    c000dbc4 <ACPI::detectPCI()+0xe0>
c000dba7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dbac:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dbb1:	74 11                	je     c000dbc4 <ACPI::detectPCI()+0xe0>
c000dbb3:	83 ec 0c             	sub    esp,0xc
c000dbb6:	68 f8 e7 01 c0       	push   0xc001e7f8
c000dbbb:	e8 f5 18 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000dbc0:	83 c4 10             	add    esp,0x10
c000dbc3:	90                   	nop
c000dbc4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dbc9:	0f 84 85 00 00 00    	je     c000dc54 <ACPI::detectPCI()+0x170>
c000dbcf:	83 ec 0c             	sub    esp,0xc
c000dbd2:	68 83 e8 01 c0       	push   0xc001e883
c000dbd7:	e8 d3 8e ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000dbe7:	83 ec 0c             	sub    esp,0xc
c000dbea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dbee:	e8 62 8e ff ff       	call   c0006a55 <malloc>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	89 c3                	mov    ebx,eax
c000dbf8:	83 ec 0c             	sub    esp,0xc
c000dbfb:	53                   	push   ebx
c000dbfc:	e8 25 ad 00 00       	call   c0018926 <PCI::PCI()>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dc08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc0c:	83 ec 08             	sub    esp,0x8
c000dc0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc13:	50                   	push   eax
c000dc14:	e8 e9 cf ff ff       	call   c000ac02 <Device::addChild(Device*)>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc22:	83 c0 08             	add    eax,0x8
c000dc25:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc27:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dc2c:	74 0a                	je     c000dc38 <ACPI::detectPCI()+0x154>
c000dc2e:	ba 01 00 00 00       	mov    edx,0x1
c000dc33:	eb 0b                	jmp    c000dc40 <ACPI::detectPCI()+0x15c>
c000dc35:	8d 76 00             	lea    esi,[esi+0x0]
c000dc38:	ba 02 00 00 00       	mov    edx,0x2
c000dc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc40:	6a 00                	push   0x0
c000dc42:	6a 00                	push   0x0
c000dc44:	52                   	push   edx
c000dc45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc49:	ff d0                	call   eax
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	e9 91 00 00 00       	jmp    c000dce4 <ACPI::detectPCI()+0x200>
c000dc53:	90                   	nop
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	68 9b e8 01 c0       	push   0xc001e89b
c000dc5c:	e8 4e 8e ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000dc61:	83 c4 10             	add    esp,0x10
c000dc64:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000dc6b:	83 ec 0c             	sub    esp,0xc
c000dc6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc72:	e8 de 8d ff ff       	call   c0006a55 <malloc>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	89 c3                	mov    ebx,eax
c000dc7c:	83 ec 0c             	sub    esp,0xc
c000dc7f:	53                   	push   ebx
c000dc80:	e8 c7 b7 00 00       	call   c001944c <IDE::IDE()>
c000dc85:	83 c4 10             	add    esp,0x10
c000dc88:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000dc8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc90:	83 ec 08             	sub    esp,0x8
c000dc93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc97:	50                   	push   eax
c000dc98:	e8 65 cf ff ff       	call   c000ac02 <Device::addChild(Device*)>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dca4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000dcae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dcb2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000dcbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dcbf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000dcc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcce:	83 c0 08             	add    eax,0x8
c000dcd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcd3:	6a 00                	push   0x0
c000dcd5:	6a 00                	push   0x0
c000dcd7:	6a 00                	push   0x0
c000dcd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dcdd:	ff d0                	call   eax
c000dcdf:	83 c4 10             	add    esp,0x10
c000dce2:	66 90                	xchg   ax,ax
c000dce4:	90                   	nop
c000dce5:	83 c4 28             	add    esp,0x28
c000dce8:	5b                   	pop    ebx
c000dce9:	c3                   	ret    
c000dcea:	66 90                	xchg   ax,ax

c000dcec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000dcec:	83 ec 1c             	sub    esp,0x1c
c000dcef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dcf3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dcf6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dcfa:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000dcff:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000dd04:	83 ec 08             	sub    esp,0x8
c000dd07:	52                   	push   edx
c000dd08:	50                   	push   eax
c000dd09:	e8 cc 83 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dd15:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000dd1a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000dd1f:	83 ec 04             	sub    esp,0x4
c000dd22:	6a 01                	push   0x1
c000dd24:	52                   	push   edx
c000dd25:	50                   	push   eax
c000dd26:	e8 c1 84 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	90                   	nop
c000dd2f:	83 c4 1c             	add    esp,0x1c
c000dd32:	c3                   	ret    
c000dd33:	90                   	nop

c000dd34 <ACPI::sleep()>:
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	a1 60 2a 02 c0       	mov    eax,ds:0xc0022a60
c000dd3c:	85 c0                	test   eax,eax
c000dd3e:	74 08                	je     c000dd48 <ACPI::sleep()+0x14>
c000dd40:	a1 60 2a 02 c0       	mov    eax,ds:0xc0022a60
c000dd45:	ff d0                	call   eax
c000dd47:	90                   	nop
c000dd48:	90                   	nop
c000dd49:	83 c4 0c             	add    esp,0xc
c000dd4c:	c3                   	ret    
c000dd4d:	90                   	nop
c000dd4e:	66 90                	xchg   ax,ax

c000dd50 <ACPI::open(int, int, void*)>:
c000dd50:	57                   	push   edi
c000dd51:	56                   	push   esi
c000dd52:	53                   	push   ebx
c000dd53:	81 ec 70 01 00 00    	sub    esp,0x170
c000dd59:	83 ec 0c             	sub    esp,0xc
c000dd5c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000dd63:	e8 7c fd ff ff       	call   c000dae4 <ACPI::detectPCI()>
c000dd68:	83 c4 10             	add    esp,0x10
c000dd6b:	83 ec 0c             	sub    esp,0xc
c000dd6e:	68 20 e8 01 c0       	push   0xc001e820
c000dd73:	e8 37 8d ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 ec 0c             	sub    esp,0xc
c000dd7e:	68 b0 e8 01 c0       	push   0xc001e8b0
c000dd83:	e8 5b 37 00 00       	call   c00114e3 <Thr::loadKernelSymbolTable(char const*)>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000dd93:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000dd9e:	83 ec 0c             	sub    esp,0xc
c000dda1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000dda8:	e8 a8 8c ff ff       	call   c0006a55 <malloc>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	89 c3                	mov    ebx,eax
c000ddb2:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c000ddb7:	83 ec 04             	sub    esp,0x4
c000ddba:	50                   	push   eax
c000ddbb:	68 ce e8 01 c0       	push   0xc001e8ce
c000ddc0:	53                   	push   ebx
c000ddc1:	e8 84 bf ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000ddc6:	83 c4 10             	add    esp,0x10
c000ddc9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ddd0:	83 ec 08             	sub    esp,0x8
c000ddd3:	6a 01                	push   0x1
c000ddd5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dddc:	e8 23 c0 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c000dde1:	83 c4 10             	add    esp,0x10
c000dde4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ddeb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ddf3:	75 17                	jne    c000de0c <ACPI::open(int, int, void*)+0xbc>
c000ddf5:	83 ec 0c             	sub    esp,0xc
c000ddf8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ddff:	e8 5e c0 ff ff       	call   c0009e62 <File::close()>
c000de04:	83 c4 10             	add    esp,0x10
c000de07:	eb 0b                	jmp    c000de14 <ACPI::open(int, int, void*)+0xc4>
c000de09:	8d 76 00             	lea    esi,[esi+0x0]
c000de0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000de14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000de1c:	74 1e                	je     c000de3c <ACPI::open(int, int, void*)+0xec>
c000de1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000de25:	8b 00                	mov    eax,DWORD PTR [eax]
c000de27:	83 c0 08             	add    eax,0x8
c000de2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000de2c:	83 ec 0c             	sub    esp,0xc
c000de2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000de36:	ff d0                	call   eax
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	90                   	nop
c000de3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000de43:	83 f0 01             	xor    eax,0x1
c000de46:	84 c0                	test   al,al
c000de48:	74 42                	je     c000de8c <ACPI::open(int, int, void*)+0x13c>
c000de4a:	83 ec 0c             	sub    esp,0xc
c000de4d:	68 ec e8 01 c0       	push   0xc001e8ec
c000de52:	e8 58 8c ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000de57:	83 c4 10             	add    esp,0x10
c000de5a:	83 ec 04             	sub    esp,0x4
c000de5d:	6a 0c                	push   0xc
c000de5f:	68 07 e9 01 c0       	push   0xc001e907
c000de64:	68 18 e9 01 c0       	push   0xc001e918
c000de69:	e8 ab 1e 00 00       	call   c000fd19 <Reg::readIntWithDefault(char*, char*, int)>
c000de6e:	83 c4 10             	add    esp,0x10
c000de71:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000de82:	e8 00 a9 ff ff       	call   c0008787 <Virt::setupPageSwapping(int)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	66 90                	xchg   ax,ax
c000de8c:	83 ec 0c             	sub    esp,0xc
c000de8f:	68 8f d9 01 c0       	push   0xc001d98f
c000de94:	e8 16 8c ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000de99:	83 c4 10             	add    esp,0x10
c000de9c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000dea3:	83 ec 08             	sub    esp,0x8
c000dea6:	6a 12                	push   0x12
c000dea8:	50                   	push   eax
c000dea9:	e8 6c d0 ff ff       	call   c000af1a <getDevicesOfType(DeviceType)>
c000deae:	83 c4 0c             	add    esp,0xc
c000deb1:	8d 76 00             	lea    esi,[esi+0x0]
c000deb4:	83 ec 0c             	sub    esp,0xc
c000deb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000debe:	50                   	push   eax
c000debf:	e8 d8 ee 00 00       	call   c001cd9c <LinkedList<Device>::isEmpty()>
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	83 f0 01             	xor    eax,0x1
c000deca:	84 c0                	test   al,al
c000decc:	0f 84 46 01 00 00    	je     c000e018 <ACPI::open(int, int, void*)+0x2c8>
c000ded2:	83 ec 0c             	sub    esp,0xc
c000ded5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000dedc:	50                   	push   eax
c000dedd:	e8 d6 ee 00 00       	call   c001cdb8 <LinkedList<Device>::getFirstElement()>
c000dee2:	83 c4 10             	add    esp,0x10
c000dee5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000def6:	50                   	push   eax
c000def7:	e8 c4 ee 00 00       	call   c001cdc0 <LinkedList<Device>::removeFirst()>
c000defc:	83 c4 10             	add    esp,0x10
c000deff:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000df06:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000df0d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000df14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000df18:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000df1e:	ba 09 00 00 00       	mov    edx,0x9
c000df23:	fc                   	cld    
c000df24:	89 c7                	mov    edi,eax
c000df26:	89 de                	mov    esi,ebx
c000df28:	89 d1                	mov    ecx,edx
c000df2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000df2c:	83 ec 08             	sub    esp,0x8
c000df2f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000df33:	50                   	push   eax
c000df34:	83 ec 24             	sub    esp,0x24
c000df37:	89 e0                	mov    eax,esp
c000df39:	89 c3                	mov    ebx,eax
c000df3b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000df3f:	ba 09 00 00 00       	mov    edx,0x9
c000df44:	89 df                	mov    edi,ebx
c000df46:	89 c6                	mov    esi,eax
c000df48:	89 d1                	mov    ecx,edx
c000df4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000df4c:	e8 b3 ae 00 00       	call   c0018e04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000df51:	83 c4 30             	add    esp,0x30
c000df54:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000df5b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000df63:	0f 84 4b ff ff ff    	je     c000deb4 <ACPI::open(int, int, void*)+0x164>
c000df69:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000df74:	83 ec 0c             	sub    esp,0xc
c000df77:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000df7e:	e8 d2 8a ff ff       	call   c0006a55 <malloc>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	89 c3                	mov    ebx,eax
c000df88:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c000df8d:	83 ec 04             	sub    esp,0x4
c000df90:	50                   	push   eax
c000df91:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000df98:	53                   	push   ebx
c000df99:	e8 ac bd ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000dfb2:	e8 bb c0 ff ff       	call   c000a072 <File::exists()>
c000dfb7:	83 c4 10             	add    esp,0x10
c000dfba:	84 c0                	test   al,al
c000dfbc:	74 2a                	je     c000dfe8 <ACPI::open(int, int, void*)+0x298>
c000dfbe:	83 ec 08             	sub    esp,0x8
c000dfc1:	6a 01                	push   0x1
c000dfc3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000dfca:	e8 8b 3f 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	83 ec 08             	sub    esp,0x8
c000dfd5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000dfdc:	50                   	push   eax
c000dfdd:	e8 a9 41 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000dfe2:	83 c4 10             	add    esp,0x10
c000dfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfe8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000dff0:	0f 84 be fe ff ff    	je     c000deb4 <ACPI::open(int, int, void*)+0x164>
c000dff6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000dffd:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfff:	83 c0 08             	add    eax,0x8
c000e002:	8b 00                	mov    eax,DWORD PTR [eax]
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e00e:	ff d0                	call   eax
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	e9 9c fe ff ff       	jmp    c000deb4 <ACPI::open(int, int, void*)+0x164>
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e022:	50                   	push   eax
c000e023:	e8 70 ed 00 00       	call   c001cd98 <LinkedList<Device>::~LinkedList()>
c000e028:	83 c4 10             	add    esp,0x10
c000e02b:	8b 1d 68 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020468
c000e031:	83 ec 08             	sub    esp,0x8
c000e034:	6a 01                	push   0x1
c000e036:	68 1f e9 01 c0       	push   0xc001e91f
c000e03b:	e8 1a 3f 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000e040:	83 c4 10             	add    esp,0x10
c000e043:	83 ec 08             	sub    esp,0x8
c000e046:	53                   	push   ebx
c000e047:	50                   	push   eax
c000e048:	e8 3e 41 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000e055:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000e05b:	83 e0 04             	and    eax,0x4
c000e05e:	84 c0                	test   al,al
c000e060:	0f 84 16 01 00 00    	je     c000e17c <ACPI::open(int, int, void*)+0x42c>
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	68 3c e9 01 c0       	push   0xc001e93c
c000e06e:	e8 3c 8a ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e08b:	e8 c5 89 ff ff       	call   c0006a55 <malloc>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 c3                	mov    ebx,eax
c000e095:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c000e09a:	83 ec 04             	sub    esp,0x4
c000e09d:	50                   	push   eax
c000e09e:	68 59 e9 01 c0       	push   0xc001e959
c000e0a3:	53                   	push   ebx
c000e0a4:	e8 a1 bc ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000e0a9:	83 c4 10             	add    esp,0x10
c000e0ac:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e0b3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e0bb:	74 1b                	je     c000e0d8 <ACPI::open(int, int, void*)+0x388>
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e0c7:	e8 a6 bf ff ff       	call   c000a072 <File::exists()>
c000e0cc:	83 c4 10             	add    esp,0x10
c000e0cf:	84 c0                	test   al,al
c000e0d1:	74 05                	je     c000e0d8 <ACPI::open(int, int, void*)+0x388>
c000e0d3:	b0 01                	mov    al,0x1
c000e0d5:	eb 05                	jmp    c000e0dc <ACPI::open(int, int, void*)+0x38c>
c000e0d7:	90                   	nop
c000e0d8:	b0 00                	mov    al,0x0
c000e0da:	66 90                	xchg   ax,ax
c000e0dc:	84 c0                	test   al,al
c000e0de:	74 28                	je     c000e108 <ACPI::open(int, int, void*)+0x3b8>
c000e0e0:	83 ec 08             	sub    esp,0x8
c000e0e3:	6a 01                	push   0x1
c000e0e5:	68 59 e9 01 c0       	push   0xc001e959
c000e0ea:	e8 6b 3e 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000e0ef:	83 c4 10             	add    esp,0x10
c000e0f2:	83 ec 08             	sub    esp,0x8
c000e0f5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e0fc:	50                   	push   eax
c000e0fd:	e8 89 40 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000e102:	83 c4 10             	add    esp,0x10
c000e105:	8d 76 00             	lea    esi,[esi+0x0]
c000e108:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e110:	74 2a                	je     c000e13c <ACPI::open(int, int, void*)+0x3ec>
c000e112:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e11a:	74 20                	je     c000e13c <ACPI::open(int, int, void*)+0x3ec>
c000e11c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e123:	8b 00                	mov    eax,DWORD PTR [eax]
c000e125:	83 c0 08             	add    eax,0x8
c000e128:	8b 00                	mov    eax,DWORD PTR [eax]
c000e12a:	83 ec 0c             	sub    esp,0xc
c000e12d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e134:	ff d0                	call   eax
c000e136:	83 c4 10             	add    esp,0x10
c000e139:	8d 76 00             	lea    esi,[esi+0x0]
c000e13c:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000e141:	83 ec 08             	sub    esp,0x8
c000e144:	68 76 e9 01 c0       	push   0xc001e976
c000e149:	50                   	push   eax
c000e14a:	e8 75 f2 ff ff       	call   c000d3c4 <findDataTable(unsigned char*, char*)>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e159:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e161:	74 19                	je     c000e17c <ACPI::open(int, int, void*)+0x42c>
c000e163:	83 ec 08             	sub    esp,0x8
c000e166:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e16d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e174:	e8 73 fb ff ff       	call   c000dcec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e179:	83 c4 10             	add    esp,0x10
c000e17c:	b8 00 00 00 00       	mov    eax,0x0
c000e181:	81 c4 70 01 00 00    	add    esp,0x170
c000e187:	5b                   	pop    ebx
c000e188:	5e                   	pop    esi
c000e189:	5f                   	pop    edi
c000e18a:	c3                   	ret    
c000e18b:	90                   	nop

c000e18c <CPU::close(int, int, void*)>:
c000e18c:	31 c0                	xor    eax,eax
c000e18e:	c3                   	ret    
c000e18f:	90                   	nop

c000e190 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e190:	60                   	pusha  
c000e191:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19d:	9c                   	pushf  
c000e19e:	fa                   	cli    
c000e19f:	0f 09                	wbinvd 
c000e1a1:	0f 30                	wrmsr  
c000e1a3:	9d                   	popf   
c000e1a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a8:	89 02                	mov    DWORD PTR [edx],eax
c000e1aa:	61                   	popa   
c000e1ab:	c3                   	ret    

c000e1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e1ac:	60                   	pusha  
c000e1ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e1b1:	9c                   	pushf  
c000e1b2:	fa                   	cli    
c000e1b3:	0f 09                	wbinvd 
c000e1b5:	31 c0                	xor    eax,eax
c000e1b7:	31 d2                	xor    edx,edx
c000e1b9:	0f 32                	rdmsr  
c000e1bb:	9d                   	popf   
c000e1bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1c0:	89 02                	mov    DWORD PTR [edx],eax
c000e1c2:	61                   	popa   
c000e1c3:	c3                   	ret    

c000e1c4 <CPU::AMD_K6_writeback(int, int, int)>:
c000e1c4:	56                   	push   esi
c000e1c5:	53                   	push   ebx
c000e1c6:	83 ec 10             	sub    esp,0x10
c000e1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1cd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e1d2:	75 5d                	jne    c000e231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e1d4:	83 f8 08             	cmp    eax,0x8
c000e1d7:	75 09                	jne    c000e1e2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e1d9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e1de:	7e 13                	jle    c000e1f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e1e0:	eb 30                	jmp    c000e212 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e1e2:	83 f8 06             	cmp    eax,0x6
c000e1e5:	7c 4a                	jl     c000e231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e1e7:	83 f8 07             	cmp    eax,0x7
c000e1ea:	7e 07                	jle    c000e1f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e1ec:	83 f8 09             	cmp    eax,0x9
c000e1ef:	74 21                	je     c000e212 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e1f1:	eb 3e                	jmp    c000e231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e1f3:	89 e6                	mov    esi,esp
c000e1f5:	8b 1d 8c 04 02 c0    	mov    ebx,DWORD PTR ds:0xc002048c
c000e1fb:	56                   	push   esi
c000e1fc:	c1 eb 15             	shr    ebx,0x15
c000e1ff:	68 82 00 00 c0       	push   0xc0000082
c000e204:	83 e3 7e             	and    ebx,0x7e
c000e207:	e8 a0 ff ff ff       	call   c000e1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e20c:	56                   	push   esi
c000e20d:	6a 00                	push   0x0
c000e20f:	53                   	push   ebx
c000e210:	eb 12                	jmp    c000e224 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e212:	89 e3                	mov    ebx,esp
c000e214:	53                   	push   ebx
c000e215:	68 82 00 00 c0       	push   0xc0000082
c000e21a:	e8 8d ff ff ff       	call   c000e1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e21f:	53                   	push   ebx
c000e220:	6a 00                	push   0x0
c000e222:	6a 00                	push   0x0
c000e224:	68 82 00 00 c0       	push   0xc0000082
c000e229:	e8 62 ff ff ff       	call   c000e190 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e22e:	83 c4 18             	add    esp,0x18
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	5b                   	pop    ebx
c000e235:	5e                   	pop    esi
c000e236:	c3                   	ret    
c000e237:	90                   	nop

c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e238:	55                   	push   ebp
c000e239:	57                   	push   edi
c000e23a:	56                   	push   esi
c000e23b:	53                   	push   ebx
c000e23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e240:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e244:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e248:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e24c:	39 05 30 fe 01 c0    	cmp    DWORD PTR ds:0xc001fe30,eax
c000e252:	75 23                	jne    c000e277 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e254:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000e259:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e25d:	89 06                	mov    DWORD PTR [esi],eax
c000e25f:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000e264:	89 07                	mov    DWORD PTR [edi],eax
c000e266:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000e26b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e26e:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c000e273:	89 02                	mov    DWORD PTR [edx],eax
c000e275:	eb 3f                	jmp    c000e2b6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e277:	31 c9                	xor    ecx,ecx
c000e279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e27d:	0f a2                	cpuid  
c000e27f:	89 06                	mov    DWORD PTR [esi],eax
c000e281:	89 1f                	mov    DWORD PTR [edi],ebx
c000e283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e287:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e28a:	89 10                	mov    DWORD PTR [eax],edx
c000e28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e290:	a3 30 fe 01 c0       	mov    ds:0xc001fe30,eax
c000e295:	8b 06                	mov    eax,DWORD PTR [esi]
c000e297:	a3 ec 2e 02 c0       	mov    ds:0xc0022eec,eax
c000e29c:	8b 07                	mov    eax,DWORD PTR [edi]
c000e29e:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c000e2a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e2a6:	a3 e4 2e 02 c0       	mov    ds:0xc0022ee4,eax
c000e2ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2af:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2b1:	a3 e0 2e 02 c0       	mov    ds:0xc0022ee0,eax
c000e2b6:	5b                   	pop    ebx
c000e2b7:	5e                   	pop    esi
c000e2b8:	5f                   	pop    edi
c000e2b9:	5d                   	pop    ebp
c000e2ba:	c3                   	ret    
c000e2bb:	90                   	nop

c000e2bc <CPU::cpuidCheckEDX(unsigned int)>:
c000e2bc:	83 ec 10             	sub    esp,0x10
c000e2bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2c3:	50                   	push   eax
c000e2c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2c8:	50                   	push   eax
c000e2c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2cd:	50                   	push   eax
c000e2ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2d2:	50                   	push   eax
c000e2d3:	6a 01                	push   0x1
c000e2d5:	e8 5e ff ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2de:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e2e2:	0f 95 c0             	setne  al
c000e2e5:	83 c4 24             	add    esp,0x24
c000e2e8:	c3                   	ret    
c000e2e9:	90                   	nop

c000e2ea <CPU::cpuidCheckECX(unsigned int)>:
c000e2ea:	83 ec 10             	sub    esp,0x10
c000e2ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2f1:	50                   	push   eax
c000e2f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2f6:	50                   	push   eax
c000e2f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2fb:	50                   	push   eax
c000e2fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e300:	50                   	push   eax
c000e301:	6a 01                	push   0x1
c000e303:	e8 30 ff ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e308:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e30c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e310:	0f 95 c0             	setne  al
c000e313:	83 c4 24             	add    esp,0x24
c000e316:	c3                   	ret    
c000e317:	90                   	nop

c000e318 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e318:	83 ec 10             	sub    esp,0x10
c000e31b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e31f:	50                   	push   eax
c000e320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e324:	50                   	push   eax
c000e325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e329:	50                   	push   eax
c000e32a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e32e:	50                   	push   eax
c000e32f:	6a 07                	push   0x7
c000e331:	e8 02 ff ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e336:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e33a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e33e:	0f 95 c0             	setne  al
c000e341:	83 c4 24             	add    esp,0x24
c000e344:	c3                   	ret    
c000e345:	90                   	nop

c000e346 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e346:	83 ec 10             	sub    esp,0x10
c000e349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e34d:	50                   	push   eax
c000e34e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e352:	50                   	push   eax
c000e353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e357:	50                   	push   eax
c000e358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e35c:	50                   	push   eax
c000e35d:	6a 07                	push   0x7
c000e35f:	e8 d4 fe ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e368:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e36c:	0f 95 c0             	setne  al
c000e36f:	83 c4 24             	add    esp,0x24
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <CPU::CPU()>:
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37b:	83 ec 08             	sub    esp,0x8
c000e37e:	68 99 ea 01 c0       	push   0xc001ea99
c000e383:	50                   	push   eax
c000e384:	e8 11 ca ff ff       	call   c000ad9a <Device::Device(char const*)>
c000e389:	83 c4 10             	add    esp,0x10
c000e38c:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c000e391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e395:	89 10                	mov    DWORD PTR [eax],edx
c000e397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a9:	05 78 01 00 00       	add    eax,0x178
c000e3ae:	83 ec 0c             	sub    esp,0xc
c000e3b1:	50                   	push   eax
c000e3b2:	e8 1f 7f ff ff       	call   c00062d6 <GDT::GDT()>
c000e3b7:	83 c4 10             	add    esp,0x10
c000e3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3be:	05 7c 09 00 00       	add    eax,0x97c
c000e3c3:	83 ec 0c             	sub    esp,0xc
c000e3c6:	50                   	push   eax
c000e3c7:	e8 84 81 ff ff       	call   c0006550 <IDT::IDT()>
c000e3cc:	83 c4 10             	add    esp,0x10
c000e3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d3:	05 7c 11 00 00       	add    eax,0x117c
c000e3d8:	83 ec 0c             	sub    esp,0xc
c000e3db:	50                   	push   eax
c000e3dc:	e8 df 9a ff ff       	call   c0007ec0 <TSS::TSS()>
c000e3e1:	83 c4 10             	add    esp,0x10
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e3fd:	90                   	nop
c000e3fe:	83 c4 0c             	add    esp,0xc
c000e401:	c3                   	ret    

c000e402 <CPU::displayFeatures()>:
c000e402:	c3                   	ret    
c000e403:	90                   	nop

c000e404 <CPU::detectFeatures()>:
c000e404:	55                   	push   ebp
c000e405:	57                   	push   edi
c000e406:	56                   	push   esi
c000e407:	53                   	push   ebx
c000e408:	83 ec 30             	sub    esp,0x30
c000e40b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e40f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e419:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e420:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e426:	6a 0d                	push   0xd
c000e428:	6a 00                	push   0x0
c000e42a:	55                   	push   ebp
c000e42b:	e8 78 20 ff ff       	call   c00004a8 <memset>
c000e430:	83 c4 10             	add    esp,0x10
c000e433:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000e438:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e43f:	0f 84 e8 05 00 00    	je     c000ea2d <CPU::detectFeatures()+0x629>
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	89 ef                	mov    edi,ebp
c000e44a:	6a 10                	push   0x10
c000e44c:	e8 6b fe ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e451:	83 e0 01             	and    eax,0x1
c000e454:	8d 14 00             	lea    edx,[eax+eax*1]
c000e457:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e45d:	83 e0 fd             	and    eax,0xfffffffd
c000e460:	09 d0                	or     eax,edx
c000e462:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e468:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e46f:	e8 48 fe ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e474:	83 e0 01             	and    eax,0x1
c000e477:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e47e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e484:	83 e0 fb             	and    eax,0xfffffffb
c000e487:	09 d0                	or     eax,edx
c000e489:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e48f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e496:	e8 21 fe ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e49b:	83 e0 01             	and    eax,0x1
c000e49e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e4a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e4ab:	83 e0 f7             	and    eax,0xfffffff7
c000e4ae:	09 d0                	or     eax,edx
c000e4b0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e4b6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e4bd:	e8 fa fd ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e4c2:	83 e0 01             	and    eax,0x1
c000e4c5:	c1 e0 04             	shl    eax,0x4
c000e4c8:	88 c2                	mov    dl,al
c000e4ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e4d0:	83 e0 ef             	and    eax,0xffffffef
c000e4d3:	09 d0                	or     eax,edx
c000e4d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e4db:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e4e2:	e8 d5 fd ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e4e7:	83 e0 01             	and    eax,0x1
c000e4ea:	c1 e0 05             	shl    eax,0x5
c000e4ed:	88 c2                	mov    dl,al
c000e4ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e4f5:	83 e0 df             	and    eax,0xffffffdf
c000e4f8:	09 d0                	or     eax,edx
c000e4fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e500:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e507:	e8 b0 fd ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e50c:	83 e0 01             	and    eax,0x1
c000e50f:	8d 14 00             	lea    edx,[eax+eax*1]
c000e512:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e518:	83 e0 fd             	and    eax,0xfffffffd
c000e51b:	09 d0                	or     eax,edx
c000e51d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e523:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e52a:	e8 8d fd ff ff       	call   c000e2bc <CPU::cpuidCheckEDX(unsigned int)>
c000e52f:	83 e0 01             	and    eax,0x1
c000e532:	c1 e0 06             	shl    eax,0x6
c000e535:	88 c2                	mov    dl,al
c000e537:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e53d:	83 e0 bf             	and    eax,0xffffffbf
c000e540:	09 d0                	or     eax,edx
c000e542:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e548:	58                   	pop    eax
c000e549:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e54d:	50                   	push   eax
c000e54e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e552:	50                   	push   eax
c000e553:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e557:	56                   	push   esi
c000e558:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e55c:	50                   	push   eax
c000e55d:	6a 00                	push   0x0
c000e55f:	e8 d4 fc ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e564:	b8 04 00 00 00       	mov    eax,0x4
c000e569:	89 c1                	mov    ecx,eax
c000e56b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e56d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e573:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e577:	89 c1                	mov    ecx,eax
c000e579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e57b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e581:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e585:	89 c1                	mov    ecx,eax
c000e587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e589:	83 c4 18             	add    esp,0x18
c000e58c:	68 a8 e9 01 c0       	push   0xc001e9a8
c000e591:	55                   	push   ebp
c000e592:	e8 59 20 ff ff       	call   c00005f0 <strcmp>
c000e597:	83 c4 10             	add    esp,0x10
c000e59a:	85 c0                	test   eax,eax
c000e59c:	75 0f                	jne    c000e5ad <CPU::detectFeatures()+0x1a9>
c000e59e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e5a8:	e9 22 02 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e5ad:	50                   	push   eax
c000e5ae:	50                   	push   eax
c000e5af:	68 b5 e9 01 c0       	push   0xc001e9b5
c000e5b4:	55                   	push   ebp
c000e5b5:	e8 36 20 ff ff       	call   c00005f0 <strcmp>
c000e5ba:	83 c4 10             	add    esp,0x10
c000e5bd:	85 c0                	test   eax,eax
c000e5bf:	74 dd                	je     c000e59e <CPU::detectFeatures()+0x19a>
c000e5c1:	50                   	push   eax
c000e5c2:	50                   	push   eax
c000e5c3:	68 c2 e9 01 c0       	push   0xc001e9c2
c000e5c8:	55                   	push   ebp
c000e5c9:	e8 22 20 ff ff       	call   c00005f0 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	74 2a                	je     c000e5ff <CPU::detectFeatures()+0x1fb>
c000e5d5:	50                   	push   eax
c000e5d6:	50                   	push   eax
c000e5d7:	68 cf e9 01 c0       	push   0xc001e9cf
c000e5dc:	55                   	push   ebp
c000e5dd:	e8 0e 20 ff ff       	call   c00005f0 <strcmp>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	85 c0                	test   eax,eax
c000e5e7:	74 16                	je     c000e5ff <CPU::detectFeatures()+0x1fb>
c000e5e9:	50                   	push   eax
c000e5ea:	50                   	push   eax
c000e5eb:	68 dc e9 01 c0       	push   0xc001e9dc
c000e5f0:	55                   	push   ebp
c000e5f1:	e8 fa 1f ff ff       	call   c00005f0 <strcmp>
c000e5f6:	83 c4 10             	add    esp,0x10
c000e5f9:	85 c0                	test   eax,eax
c000e5fb:	74 48                	je     c000e645 <CPU::detectFeatures()+0x241>
c000e5fd:	eb 0f                	jmp    c000e60e <CPU::detectFeatures()+0x20a>
c000e5ff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e609:	e9 c1 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e60e:	50                   	push   eax
c000e60f:	50                   	push   eax
c000e610:	68 e9 e9 01 c0       	push   0xc001e9e9
c000e615:	55                   	push   ebp
c000e616:	e8 d5 1f ff ff       	call   c00005f0 <strcmp>
c000e61b:	83 c4 10             	add    esp,0x10
c000e61e:	85 c0                	test   eax,eax
c000e620:	74 23                	je     c000e645 <CPU::detectFeatures()+0x241>
c000e622:	57                   	push   edi
c000e623:	57                   	push   edi
c000e624:	68 f6 e9 01 c0       	push   0xc001e9f6
c000e629:	55                   	push   ebp
c000e62a:	e8 c1 1f ff ff       	call   c00005f0 <strcmp>
c000e62f:	83 c4 10             	add    esp,0x10
c000e632:	85 c0                	test   eax,eax
c000e634:	75 1e                	jne    c000e654 <CPU::detectFeatures()+0x250>
c000e636:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e640:	e9 8a 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e645:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e64f:	e9 7b 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e654:	56                   	push   esi
c000e655:	56                   	push   esi
c000e656:	68 03 ea 01 c0       	push   0xc001ea03
c000e65b:	55                   	push   ebp
c000e65c:	e8 8f 1f ff ff       	call   c00005f0 <strcmp>
c000e661:	83 c4 10             	add    esp,0x10
c000e664:	85 c0                	test   eax,eax
c000e666:	75 0f                	jne    c000e677 <CPU::detectFeatures()+0x273>
c000e668:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e672:	e9 58 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e677:	51                   	push   ecx
c000e678:	51                   	push   ecx
c000e679:	68 c2 e9 01 c0       	push   0xc001e9c2
c000e67e:	55                   	push   ebp
c000e67f:	e8 6c 1f ff ff       	call   c00005f0 <strcmp>
c000e684:	83 c4 10             	add    esp,0x10
c000e687:	85 c0                	test   eax,eax
c000e689:	75 0f                	jne    c000e69a <CPU::detectFeatures()+0x296>
c000e68b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e695:	e9 35 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e69a:	52                   	push   edx
c000e69b:	52                   	push   edx
c000e69c:	68 10 ea 01 c0       	push   0xc001ea10
c000e6a1:	55                   	push   ebp
c000e6a2:	e8 49 1f ff ff       	call   c00005f0 <strcmp>
c000e6a7:	83 c4 10             	add    esp,0x10
c000e6aa:	85 c0                	test   eax,eax
c000e6ac:	75 0f                	jne    c000e6bd <CPU::detectFeatures()+0x2b9>
c000e6ae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e6b8:	e9 12 01 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e6bd:	50                   	push   eax
c000e6be:	50                   	push   eax
c000e6bf:	68 1d ea 01 c0       	push   0xc001ea1d
c000e6c4:	55                   	push   ebp
c000e6c5:	e8 26 1f ff ff       	call   c00005f0 <strcmp>
c000e6ca:	83 c4 10             	add    esp,0x10
c000e6cd:	85 c0                	test   eax,eax
c000e6cf:	75 0f                	jne    c000e6e0 <CPU::detectFeatures()+0x2dc>
c000e6d1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e6db:	e9 ef 00 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e6e0:	50                   	push   eax
c000e6e1:	50                   	push   eax
c000e6e2:	68 2a ea 01 c0       	push   0xc001ea2a
c000e6e7:	55                   	push   ebp
c000e6e8:	e8 03 1f ff ff       	call   c00005f0 <strcmp>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	85 c0                	test   eax,eax
c000e6f2:	75 0f                	jne    c000e703 <CPU::detectFeatures()+0x2ff>
c000e6f4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e6fe:	e9 cc 00 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e703:	50                   	push   eax
c000e704:	50                   	push   eax
c000e705:	68 37 ea 01 c0       	push   0xc001ea37
c000e70a:	55                   	push   ebp
c000e70b:	e8 e0 1e ff ff       	call   c00005f0 <strcmp>
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	85 c0                	test   eax,eax
c000e715:	75 0f                	jne    c000e726 <CPU::detectFeatures()+0x322>
c000e717:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e721:	e9 a9 00 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e726:	50                   	push   eax
c000e727:	50                   	push   eax
c000e728:	68 44 ea 01 c0       	push   0xc001ea44
c000e72d:	55                   	push   ebp
c000e72e:	e8 bd 1e ff ff       	call   c00005f0 <strcmp>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	85 c0                	test   eax,eax
c000e738:	75 0f                	jne    c000e749 <CPU::detectFeatures()+0x345>
c000e73a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e744:	e9 86 00 00 00       	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e749:	50                   	push   eax
c000e74a:	50                   	push   eax
c000e74b:	68 51 ea 01 c0       	push   0xc001ea51
c000e750:	55                   	push   ebp
c000e751:	e8 9a 1e ff ff       	call   c00005f0 <strcmp>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	85 c0                	test   eax,eax
c000e75b:	75 0c                	jne    c000e769 <CPU::detectFeatures()+0x365>
c000e75d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e767:	eb 66                	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e769:	50                   	push   eax
c000e76a:	50                   	push   eax
c000e76b:	68 5e ea 01 c0       	push   0xc001ea5e
c000e770:	55                   	push   ebp
c000e771:	e8 7a 1e ff ff       	call   c00005f0 <strcmp>
c000e776:	83 c4 10             	add    esp,0x10
c000e779:	85 c0                	test   eax,eax
c000e77b:	75 0c                	jne    c000e789 <CPU::detectFeatures()+0x385>
c000e77d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e787:	eb 46                	jmp    c000e7cf <CPU::detectFeatures()+0x3cb>
c000e789:	57                   	push   edi
c000e78a:	57                   	push   edi
c000e78b:	68 6b ea 01 c0       	push   0xc001ea6b
c000e790:	55                   	push   ebp
c000e791:	e8 5a 1e ff ff       	call   c00005f0 <strcmp>
c000e796:	83 c4 10             	add    esp,0x10
c000e799:	85 c0                	test   eax,eax
c000e79b:	74 e0                	je     c000e77d <CPU::detectFeatures()+0x379>
c000e79d:	56                   	push   esi
c000e79e:	56                   	push   esi
c000e79f:	68 78 ea 01 c0       	push   0xc001ea78
c000e7a4:	55                   	push   ebp
c000e7a5:	e8 46 1e ff ff       	call   c00005f0 <strcmp>
c000e7aa:	83 c4 10             	add    esp,0x10
c000e7ad:	85 c0                	test   eax,eax
c000e7af:	74 cc                	je     c000e77d <CPU::detectFeatures()+0x379>
c000e7b1:	51                   	push   ecx
c000e7b2:	51                   	push   ecx
c000e7b3:	68 85 ea 01 c0       	push   0xc001ea85
c000e7b8:	55                   	push   ebp
c000e7b9:	e8 32 1e ff ff       	call   c00005f0 <strcmp>
c000e7be:	83 c4 10             	add    esp,0x10
c000e7c1:	85 c0                	test   eax,eax
c000e7c3:	74 b8                	je     c000e77d <CPU::detectFeatures()+0x379>
c000e7c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e7cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e7d4:	0f 86 be 00 00 00    	jbe    c000e898 <CPU::detectFeatures()+0x494>
c000e7da:	83 ec 0c             	sub    esp,0xc
c000e7dd:	68 80 00 00 00       	push   0x80
c000e7e2:	e8 31 fb ff ff       	call   c000e318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e7e7:	83 e0 01             	and    eax,0x1
c000e7ea:	c1 e0 06             	shl    eax,0x6
c000e7ed:	88 c2                	mov    dl,al
c000e7ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7f5:	83 e0 bf             	and    eax,0xffffffbf
c000e7f8:	09 d0                	or     eax,edx
c000e7fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e800:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e807:	e8 0c fb ff ff       	call   c000e318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e80c:	83 e0 01             	and    eax,0x1
c000e80f:	c1 e0 04             	shl    eax,0x4
c000e812:	88 c2                	mov    dl,al
c000e814:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e81a:	83 e0 ef             	and    eax,0xffffffef
c000e81d:	09 d0                	or     eax,edx
c000e81f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e825:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e82c:	e8 e7 fa ff ff       	call   c000e318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e831:	c1 e0 07             	shl    eax,0x7
c000e834:	88 c2                	mov    dl,al
c000e836:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e83c:	83 e0 7f             	and    eax,0x7f
c000e83f:	09 d0                	or     eax,edx
c000e841:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e847:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e84e:	e8 f3 fa ff ff       	call   c000e346 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e853:	83 e0 01             	and    eax,0x1
c000e856:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e85d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e863:	83 e0 f7             	and    eax,0xfffffff7
c000e866:	09 d0                	or     eax,edx
c000e868:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e86e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000e875:	e8 cc fa ff ff       	call   c000e346 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	83 e0 01             	and    eax,0x1
c000e880:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e887:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e88d:	83 e0 fb             	and    eax,0xfffffffb
c000e890:	09 d0                	or     eax,edx
c000e892:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e89f:	50                   	push   eax
c000e8a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e8a4:	50                   	push   eax
c000e8a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e8a9:	56                   	push   esi
c000e8aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e8ae:	50                   	push   eax
c000e8af:	6a 01                	push   0x1
c000e8b1:	e8 82 f9 ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e8b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e8ba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000e8c0:	88 ca                	mov    dl,cl
c000e8c2:	83 e0 f0             	and    eax,0xfffffff0
c000e8c5:	83 e2 0f             	and    edx,0xf
c000e8c8:	09 d0                	or     eax,edx
c000e8ca:	88 ca                	mov    dl,cl
c000e8cc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000e8d2:	c0 ea 04             	shr    dl,0x4
c000e8d5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000e8d9:	0f b6 c2             	movzx  eax,dl
c000e8dc:	83 c4 20             	add    esp,0x20
c000e8df:	c1 e0 06             	shl    eax,0x6
c000e8e2:	89 c7                	mov    edi,eax
c000e8e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e8ea:	66 25 3f c0          	and    ax,0xc03f
c000e8ee:	09 f8                	or     eax,edi
c000e8f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000e8f7:	89 c8                	mov    eax,ecx
c000e8f9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000e900:	c1 e8 08             	shr    eax,0x8
c000e903:	83 e5 3f             	and    ebp,0x3f
c000e906:	83 e0 0f             	and    eax,0xf
c000e909:	89 c7                	mov    edi,eax
c000e90b:	c1 e7 06             	shl    edi,0x6
c000e90e:	09 ef                	or     edi,ebp
c000e910:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000e917:	89 fa                	mov    edx,edi
c000e919:	83 e5 c0             	and    ebp,0xffffffc0
c000e91c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000e922:	88 c2                	mov    dl,al
c000e924:	c0 ea 02             	shr    dl,0x2
c000e927:	89 d7                	mov    edi,edx
c000e929:	09 ef                	or     edi,ebp
c000e92b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000e931:	89 fa                	mov    edx,edi
c000e933:	83 e5 cf             	and    ebp,0xffffffcf
c000e936:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000e93c:	89 cf                	mov    edi,ecx
c000e93e:	c1 ef 0c             	shr    edi,0xc
c000e941:	83 e7 03             	and    edi,0x3
c000e944:	c1 e7 04             	shl    edi,0x4
c000e947:	09 ef                	or     edi,ebp
c000e949:	3c 06                	cmp    al,0x6
c000e94b:	89 fa                	mov    edx,edi
c000e94d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000e953:	74 04                	je     c000e959 <CPU::detectFeatures()+0x555>
c000e955:	3c 0f                	cmp    al,0xf
c000e957:	75 5c                	jne    c000e9b5 <CPU::detectFeatures()+0x5b1>
c000e959:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e95d:	89 cf                	mov    edi,ecx
c000e95f:	c1 ef 10             	shr    edi,0x10
c000e962:	c1 e7 04             	shl    edi,0x4
c000e965:	09 fa                	or     edx,edi
c000e967:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000e96d:	0f b6 d2             	movzx  edx,dl
c000e970:	66 81 e7 3f c0       	and    di,0xc03f
c000e975:	c1 e2 06             	shl    edx,0x6
c000e978:	09 fa                	or     edx,edi
c000e97a:	3c 0f                	cmp    al,0xf
c000e97c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000e983:	75 30                	jne    c000e9b5 <CPU::detectFeatures()+0x5b1>
c000e985:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000e98b:	c1 e9 14             	shr    ecx,0x14
c000e98e:	83 e0 3f             	and    eax,0x3f
c000e991:	83 c1 0f             	add    ecx,0xf
c000e994:	88 ca                	mov    dl,cl
c000e996:	c0 e9 02             	shr    cl,0x2
c000e999:	c1 e2 06             	shl    edx,0x6
c000e99c:	09 d0                	or     eax,edx
c000e99e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000e9a4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000e9aa:	83 e0 c0             	and    eax,0xffffffc0
c000e9ad:	09 c1                	or     ecx,eax
c000e9af:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000e9b5:	83 ec 0c             	sub    esp,0xc
c000e9b8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000e9bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e9c3:	50                   	push   eax
c000e9c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000e9c8:	55                   	push   ebp
c000e9c9:	56                   	push   esi
c000e9ca:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000e9ce:	57                   	push   edi
c000e9cf:	68 00 00 00 80       	push   0x80000000
c000e9d4:	e8 5f f8 ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9d9:	83 c4 20             	add    esp,0x20
c000e9dc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000e9e4:	76 22                	jbe    c000ea08 <CPU::detectFeatures()+0x604>
c000e9e6:	83 ec 0c             	sub    esp,0xc
c000e9e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e9ed:	50                   	push   eax
c000e9ee:	55                   	push   ebp
c000e9ef:	56                   	push   esi
c000e9f0:	57                   	push   edi
c000e9f1:	68 01 00 00 80       	push   0x80000001
c000e9f6:	e8 3d f8 ff ff       	call   c000e238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9fb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ea05:	83 c4 20             	add    esp,0x20
c000ea08:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c000ea0e:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea11:	83 fa 03             	cmp    edx,0x3
c000ea14:	76 7e                	jbe    c000ea94 <CPU::detectFeatures()+0x690>
c000ea16:	83 f8 06             	cmp    eax,0x6
c000ea19:	74 79                	je     c000ea94 <CPU::detectFeatures()+0x690>
c000ea1b:	52                   	push   edx
c000ea1c:	52                   	push   edx
c000ea1d:	68 91 ea 01 c0       	push   0xc001ea91
c000ea22:	53                   	push   ebx
c000ea23:	e8 64 c3 ff ff       	call   c000ad8c <Device::setName(char const*)>
c000ea28:	83 c4 10             	add    esp,0x10
c000ea2b:	eb 67                	jmp    c000ea94 <CPU::detectFeatures()+0x690>
c000ea2d:	50                   	push   eax
c000ea2e:	50                   	push   eax
c000ea2f:	68 f6 e9 01 c0       	push   0xc001e9f6
c000ea34:	55                   	push   ebp
c000ea35:	e8 2a 1b ff ff       	call   c0000564 <strcpy>
c000ea3a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ea44:	e8 9a 17 ff ff       	call   c00001e3 <is486>
c000ea49:	83 c4 10             	add    esp,0x10
c000ea4c:	85 c0                	test   eax,eax
c000ea4e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ea54:	74 1d                	je     c000ea73 <CPU::detectFeatures()+0x66f>
c000ea56:	83 c8 07             	or     eax,0x7
c000ea59:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ea5f:	0f 20 c0             	mov    eax,cr0
c000ea62:	83 e0 14             	and    eax,0x14
c000ea65:	83 f8 04             	cmp    eax,0x4
c000ea68:	75 0e                	jne    c000ea78 <CPU::detectFeatures()+0x674>
c000ea6a:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ea71:	eb 21                	jmp    c000ea94 <CPU::detectFeatures()+0x690>
c000ea73:	83 e0 f8             	and    eax,0xfffffff8
c000ea76:	eb e1                	jmp    c000ea59 <CPU::detectFeatures()+0x655>
c000ea78:	e8 41 17 ff ff       	call   c00001be <hasLegacyFPU>
c000ea7d:	83 e0 01             	and    eax,0x1
c000ea80:	8d 14 00             	lea    edx,[eax+eax*1]
c000ea83:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ea89:	83 e0 fd             	and    eax,0xfffffffd
c000ea8c:	09 d0                	or     eax,edx
c000ea8e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ea94:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ea9b:	74 0e                	je     c000eaab <CPU::detectFeatures()+0x6a7>
c000ea9d:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000eaa2:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000eaa9:	eb 20                	jmp    c000eacb <CPU::detectFeatures()+0x6c7>
c000eaab:	e8 0e 17 ff ff       	call   c00001be <hasLegacyFPU>
c000eab0:	83 e0 01             	and    eax,0x1
c000eab3:	8d 14 00             	lea    edx,[eax+eax*1]
c000eab6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000eabc:	83 e0 fd             	and    eax,0xfffffffd
c000eabf:	09 d0                	or     eax,edx
c000eac1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000eac7:	a8 02                	test   al,0x2
c000eac9:	75 d2                	jne    c000ea9d <CPU::detectFeatures()+0x699>
c000eacb:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ead2:	83 c4 2c             	add    esp,0x2c
c000ead5:	5b                   	pop    ebx
c000ead6:	5e                   	pop    esi
c000ead7:	5f                   	pop    edi
c000ead8:	5d                   	pop    ebp
c000ead9:	c3                   	ret    

c000eada <CPU::setupSMEP()>:
c000eada:	0f 20 e0             	mov    eax,cr4
c000eadd:	0d 00 00 10 00       	or     eax,0x100000
c000eae2:	0f 22 e0             	mov    cr4,eax
c000eae5:	c3                   	ret    

c000eae6 <CPU::setupUMIP()>:
c000eae6:	0f 20 e0             	mov    eax,cr4
c000eae9:	80 cc 08             	or     ah,0x8
c000eaec:	0f 22 e0             	mov    cr4,eax
c000eaef:	c3                   	ret    

c000eaf0 <CPU::setupTSC()>:
c000eaf0:	0f 20 e0             	mov    eax,cr4
c000eaf3:	83 c8 04             	or     eax,0x4
c000eaf6:	0f 22 e0             	mov    cr4,eax
c000eaf9:	c3                   	ret    

c000eafa <CPU::setupLargePages()>:
c000eafa:	0f 20 e0             	mov    eax,cr4
c000eafd:	83 c8 10             	or     eax,0x10
c000eb00:	0f 22 e0             	mov    cr4,eax
c000eb03:	c3                   	ret    

c000eb04 <CPU::setupPAT()>:
c000eb04:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000eb09:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb10:	74 2c                	je     c000eb3e <CPU::setupPAT()+0x3a>
c000eb12:	53                   	push   ebx
c000eb13:	83 ec 10             	sub    esp,0x10
c000eb16:	68 77 02 00 00       	push   0x277
c000eb1b:	50                   	push   eax
c000eb1c:	e8 05 75 ff ff       	call   c0006026 <Computer::rdmsr(unsigned int)>
c000eb21:	83 e2 f8             	and    edx,0xfffffff8
c000eb24:	83 ca 01             	or     edx,0x1
c000eb27:	52                   	push   edx
c000eb28:	50                   	push   eax
c000eb29:	68 77 02 00 00       	push   0x277
c000eb2e:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000eb34:	e8 19 75 ff ff       	call   c0006052 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb39:	83 c4 28             	add    esp,0x28
c000eb3c:	5b                   	pop    ebx
c000eb3d:	c3                   	ret    
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <CPU::setupMTRR()>:
c000eb40:	c3                   	ret    
c000eb41:	90                   	nop

c000eb42 <CPU::setupGlobalPages()>:
c000eb42:	0f 20 e0             	mov    eax,cr4
c000eb45:	0c 80                	or     al,0x80
c000eb47:	0f 22 e0             	mov    cr4,eax
c000eb4a:	c3                   	ret    
c000eb4b:	90                   	nop

c000eb4c <CPU::allowUsermodeDataAccess()>:
c000eb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb50:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000eb57:	74 03                	je     c000eb5c <CPU::allowUsermodeDataAccess()+0x10>
c000eb59:	0f 01 cb             	stac   
c000eb5c:	c3                   	ret    
c000eb5d:	90                   	nop

c000eb5e <CPU::prohibitUsermodeDataAccess()>:
c000eb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb62:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000eb69:	74 03                	je     c000eb6e <CPU::prohibitUsermodeDataAccess()+0x10>
c000eb6b:	0f 01 ca             	clac   
c000eb6e:	c3                   	ret    
c000eb6f:	90                   	nop

c000eb70 <CPU::setupSMAP()>:
c000eb70:	0f 20 e0             	mov    eax,cr4
c000eb73:	0d 00 00 20 00       	or     eax,0x200000
c000eb78:	0f 22 e0             	mov    cr4,eax
c000eb7b:	eb e1                	jmp    c000eb5e <CPU::prohibitUsermodeDataAccess()>
c000eb7d:	90                   	nop

c000eb7e <CPU::setupFeatures()>:
c000eb7e:	53                   	push   ebx
c000eb7f:	83 ec 08             	sub    esp,0x8
c000eb82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb86:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000eb8d:	74 18                	je     c000eba7 <CPU::setupFeatures()+0x29>
c000eb8f:	83 ec 0c             	sub    esp,0xc
c000eb92:	68 9d ea 01 c0       	push   0xc001ea9d
c000eb97:	e8 43 ac ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000eb9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb9f:	e8 42 ff ff ff       	call   c000eae6 <CPU::setupUMIP()>
c000eba4:	83 c4 10             	add    esp,0x10
c000eba7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ebae:	74 18                	je     c000ebc8 <CPU::setupFeatures()+0x4a>
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	68 a7 ea 01 c0       	push   0xc001eaa7
c000ebb8:	e8 22 ac ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000ebbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebc0:	e8 2b ff ff ff       	call   c000eaf0 <CPU::setupTSC()>
c000ebc5:	83 c4 10             	add    esp,0x10
c000ebc8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ebcf:	74 18                	je     c000ebe9 <CPU::setupFeatures()+0x6b>
c000ebd1:	83 ec 0c             	sub    esp,0xc
c000ebd4:	68 b0 ea 01 c0       	push   0xc001eab0
c000ebd9:	e8 01 ac ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000ebde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebe1:	e8 14 ff ff ff       	call   c000eafa <CPU::setupLargePages()>
c000ebe6:	83 c4 10             	add    esp,0x10
c000ebe9:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ebf0:	74 18                	je     c000ec0a <CPU::setupFeatures()+0x8c>
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	68 b9 ea 01 c0       	push   0xc001eab9
c000ebfa:	e8 e0 ab ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000ebff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec02:	e8 3b ff ff ff       	call   c000eb42 <CPU::setupGlobalPages()>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ec11:	74 18                	je     c000ec2b <CPU::setupFeatures()+0xad>
c000ec13:	83 ec 0c             	sub    esp,0xc
c000ec16:	68 cb ea 01 c0       	push   0xc001eacb
c000ec1b:	e8 bf ab ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000ec20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec23:	e8 dc fe ff ff       	call   c000eb04 <CPU::setupPAT()>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ec32:	74 11                	je     c000ec45 <CPU::setupFeatures()+0xc7>
c000ec34:	c7 44 24 10 d4 ea 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ead4
c000ec3c:	83 c4 08             	add    esp,0x8
c000ec3f:	5b                   	pop    ebx
c000ec40:	e9 9a ab ff ff       	jmp    c00097df <Dbg::kprintf(char const*, ...)>
c000ec45:	83 c4 08             	add    esp,0x8
c000ec48:	5b                   	pop    ebx
c000ec49:	c3                   	ret    

c000ec4a <CPU::open(int, int, void*)>:
c000ec4a:	57                   	push   edi
c000ec4b:	56                   	push   esi
c000ec4c:	53                   	push   ebx
c000ec4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec55:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ec5b:	83 ec 0c             	sub    esp,0xc
c000ec5e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ec64:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ec6a:	50                   	push   eax
c000ec6b:	e8 c8 76 ff ff       	call   c0006338 <GDT::setup()>
c000ec70:	83 c4 0c             	add    esp,0xc
c000ec73:	6a 00                	push   0x0
c000ec75:	68 ef be ad de       	push   0xdeadbeef
c000ec7a:	57                   	push   edi
c000ec7b:	e8 84 92 ff ff       	call   c0007f04 <TSS::setup(unsigned long, unsigned long)>
c000ec80:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ec83:	e8 5c 92 ff ff       	call   c0007ee4 <TSS::flush()>
c000ec88:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ec8e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec91:	e8 30 79 ff ff       	call   c00065c6 <IDT::setup()>
c000ec96:	b8 00 04 00 00       	mov    eax,0x400
c000ec9b:	0f 23 f8             	mov    db7,eax
c000ec9e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000eca8:	e8 6f 81 ff ff       	call   c0006e1c <Phys::allocatePage()>
c000ecad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ecb3:	89 30                	mov    DWORD PTR [eax],esi
c000ecb5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ecbb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ecbe:	58                   	pop    eax
c000ecbf:	5a                   	pop    edx
c000ecc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ecc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ecca:	e8 dd a1 ff ff       	call   c0008eac <VAS::setCPUSpecific(unsigned long)>
c000eccf:	c7 04 24 de ea 01 c0 	mov    DWORD PTR [esp],0xc001eade
c000ecd6:	e8 d4 7d ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000ecdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecde:	e8 21 f7 ff ff       	call   c000e404 <CPU::detectFeatures()>
c000ece3:	c7 04 24 01 eb 01 c0 	mov    DWORD PTR [esp],0xc001eb01
c000ecea:	e8 c0 7d ff ff       	call   c0006aaf <Krnl::setBootMessage(char const*)>
c000ecef:	e8 82 69 00 00       	call   c0015676 <Hal::initialise()>
c000ecf4:	a1 80 04 02 c0       	mov    eax,ds:0xc0020480
c000ecf9:	83 e0 10             	and    eax,0x10
c000ecfc:	83 f8 01             	cmp    eax,0x1
c000ecff:	19 c0                	sbb    eax,eax
c000ed01:	83 e0 46             	and    eax,0x46
c000ed04:	83 c0 1e             	add    eax,0x1e
c000ed07:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed0a:	e8 26 d7 ff ff       	call   c000c435 <setupTimer(int)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000ed18:	f6 05 80 04 02 c0 20 	test   BYTE PTR ds:0xc0020480,0x20
c000ed1f:	74 0c                	je     c000ed2d <CPU::open(int, int, void*)+0xe3>
c000ed21:	83 ec 0c             	sub    esp,0xc
c000ed24:	53                   	push   ebx
c000ed25:	e8 54 fe ff ff       	call   c000eb7e <CPU::setupFeatures()>
c000ed2a:	83 c4 10             	add    esp,0x10
c000ed2d:	5b                   	pop    ebx
c000ed2e:	31 c0                	xor    eax,eax
c000ed30:	5e                   	pop    esi
c000ed31:	5f                   	pop    edi
c000ed32:	c3                   	ret    
c000ed33:	90                   	nop

c000ed34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c000ed34:	57                   	push   edi
c000ed35:	56                   	push   esi
c000ed36:	53                   	push   ebx
c000ed37:	51                   	push   ecx
c000ed38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed3c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c000ed3f:	0f 02 c0             	lar    eax,ax
c000ed42:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c000ed45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ed49:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c000ed4c:	88 ca                	mov    dl,cl
c000ed4e:	c0 ea 06             	shr    dl,0x6
c000ed51:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c000ed55:	89 ca                	mov    edx,ecx
c000ed57:	66 c1 ea 03          	shr    dx,0x3
c000ed5b:	83 e2 07             	and    edx,0x7
c000ed5e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c000ed63:	88 17                	mov    BYTE PTR [edi],dl
c000ed65:	0f 84 a6 01 00 00    	je     c000ef11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c000ed6b:	83 e1 07             	and    ecx,0x7
c000ed6e:	80 f9 04             	cmp    cl,0x4
c000ed71:	0f 84 98 00 00 00    	je     c000ee0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c000ed77:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000ed7c:	0f 95 c0             	setne  al
c000ed7f:	80 f9 05             	cmp    cl,0x5
c000ed82:	0f 95 c2             	setne  dl
c000ed85:	08 c2                	or     dl,al
c000ed87:	74 79                	je     c000ee02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c000ed89:	84 c9                	test   cl,cl
c000ed8b:	75 05                	jne    c000ed92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c000ed8d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000ed90:	eb 3c                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ed92:	80 f9 01             	cmp    cl,0x1
c000ed95:	75 05                	jne    c000ed9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c000ed97:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000ed9a:	eb 32                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ed9c:	80 f9 02             	cmp    cl,0x2
c000ed9f:	75 05                	jne    c000eda6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c000eda1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000eda4:	eb 28                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000eda6:	31 c0                	xor    eax,eax
c000eda8:	80 f9 03             	cmp    cl,0x3
c000edab:	75 05                	jne    c000edb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c000edad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000edb0:	eb 1c                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000edb2:	80 f9 05             	cmp    cl,0x5
c000edb5:	75 05                	jne    c000edbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c000edb7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000edba:	eb 12                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000edbc:	80 f9 06             	cmp    cl,0x6
c000edbf:	75 05                	jne    c000edc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c000edc1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000edc4:	eb 08                	jmp    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000edc6:	80 f9 07             	cmp    cl,0x7
c000edc9:	75 03                	jne    c000edce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000edcb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000edce:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000edd3:	75 10                	jne    c000ede5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c000edd5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c000edd9:	b9 03 00 00 00       	mov    ecx,0x3
c000edde:	01 d0                	add    eax,edx
c000ede0:	e9 37 01 00 00       	jmp    c000ef1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000ede5:	b9 02 00 00 00       	mov    ecx,0x2
c000edea:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c000edef:	0f 85 27 01 00 00    	jne    c000ef1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000edf5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c000edf8:	b9 06 00 00 00       	mov    ecx,0x6
c000edfd:	e9 1a 01 00 00       	jmp    c000ef1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000ee02:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c000ee05:	b9 06 00 00 00       	mov    ecx,0x6
c000ee0a:	e9 0f 01 00 00       	jmp    c000ef1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ee0f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c000ee12:	88 ca                	mov    dl,cl
c000ee14:	c0 ea 06             	shr    dl,0x6
c000ee17:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c000ee1b:	89 ca                	mov    edx,ecx
c000ee1d:	66 c1 ea 03          	shr    dx,0x3
c000ee21:	83 e2 07             	and    edx,0x7
c000ee24:	80 e1 07             	and    cl,0x7
c000ee27:	75 05                	jne    c000ee2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c000ee29:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c000ee2c:	eb 4c                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee2e:	80 f9 01             	cmp    cl,0x1
c000ee31:	75 05                	jne    c000ee38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c000ee33:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c000ee36:	eb 42                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee38:	80 f9 02             	cmp    cl,0x2
c000ee3b:	75 05                	jne    c000ee42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c000ee3d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000ee40:	eb 38                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee42:	80 f9 03             	cmp    cl,0x3
c000ee45:	75 05                	jne    c000ee4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c000ee47:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000ee4a:	eb 2e                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee4c:	80 f9 04             	cmp    cl,0x4
c000ee4f:	75 12                	jne    c000ee63 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c000ee51:	f6 c4 60             	test   ah,0x60
c000ee54:	75 08                	jne    c000ee5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c000ee56:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000ee59:	8d 78 14             	lea    edi,[eax+0x14]
c000ee5c:	eb 1c                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee5e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c000ee61:	eb 17                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee63:	80 f9 05             	cmp    cl,0x5
c000ee66:	75 05                	jne    c000ee6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c000ee68:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000ee6b:	eb 0d                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee6d:	80 f9 06             	cmp    cl,0x6
c000ee70:	75 05                	jne    c000ee77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c000ee72:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000ee75:	eb 03                	jmp    c000ee7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ee77:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c000ee7a:	84 d2                	test   dl,dl
c000ee7c:	75 05                	jne    c000ee83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c000ee7e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000ee81:	eb 3c                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ee83:	80 fa 01             	cmp    dl,0x1
c000ee86:	75 05                	jne    c000ee8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c000ee88:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000ee8b:	eb 32                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ee8d:	80 fa 02             	cmp    dl,0x2
c000ee90:	75 05                	jne    c000ee97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c000ee92:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000ee95:	eb 28                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ee97:	80 fa 03             	cmp    dl,0x3
c000ee9a:	75 05                	jne    c000eea1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c000ee9c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ee9f:	eb 1e                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000eea1:	31 c0                	xor    eax,eax
c000eea3:	80 fa 04             	cmp    dl,0x4
c000eea6:	74 17                	je     c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000eea8:	80 fa 05             	cmp    dl,0x5
c000eeab:	75 05                	jne    c000eeb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c000eead:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000eeb0:	eb 0d                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000eeb2:	80 fa 06             	cmp    dl,0x6
c000eeb5:	75 05                	jne    c000eebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c000eeb7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000eeba:	eb 03                	jmp    c000eebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000eebc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000eebf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000eec4:	0f 94 c2             	sete   dl
c000eec7:	80 f9 05             	cmp    cl,0x5
c000eeca:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c000eece:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c000eed3:	d3 e0                	shl    eax,cl
c000eed5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c000eed9:	74 0a                	je     c000eee5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c000eedb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000eede:	b9 07 00 00 00       	mov    ecx,0x7
c000eee3:	eb 37                	jmp    c000ef1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000eee5:	01 f8                	add    eax,edi
c000eee7:	b9 03 00 00 00       	mov    ecx,0x3
c000eeec:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000eef1:	74 2b                	je     c000ef1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000eef3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000eef8:	75 0d                	jne    c000ef07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c000eefa:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c000eefe:	01 c8                	add    eax,ecx
c000ef00:	b9 04 00 00 00       	mov    ecx,0x4
c000ef05:	eb 17                	jmp    c000ef1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ef07:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000ef0a:	b9 07 00 00 00       	mov    ecx,0x7
c000ef0f:	eb 0d                	jmp    c000ef1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ef11:	b9 02 00 00 00       	mov    ecx,0x2
c000ef16:	b2 01                	mov    dl,0x1
c000ef18:	31 c0                	xor    eax,eax
c000ef1a:	eb 02                	jmp    c000ef1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ef1c:	31 d2                	xor    edx,edx
c000ef1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ef22:	89 0b                	mov    DWORD PTR [ebx],ecx
c000ef24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ef28:	88 11                	mov    BYTE PTR [ecx],dl
c000ef2a:	5a                   	pop    edx
c000ef2b:	5b                   	pop    ebx
c000ef2c:	5e                   	pop    esi
c000ef2d:	5f                   	pop    edi
c000ef2e:	c3                   	ret    

c000ef2f <Krnl::smpEntry()>:
c000ef2f:	eb fe                	jmp    c000ef2f <Krnl::smpEntry()>

c000ef31 <Krnl::startCPU(int)>:
c000ef31:	c3                   	ret    

c000ef32 <Krnl::startCPUs()>:
c000ef32:	c3                   	ret    
c000ef33:	90                   	nop

c000ef34 <EnvVarContainer::getEnv(char const*)>:
c000ef34:	57                   	push   edi
c000ef35:	56                   	push   esi
c000ef36:	53                   	push   ebx
c000ef37:	31 db                	xor    ebx,ebx
c000ef39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef3d:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ef3f:	7e 2b                	jle    c000ef6c <EnvVarContainer::getEnv(char const*)+0x38>
c000ef41:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ef48:	50                   	push   eax
c000ef49:	50                   	push   eax
c000ef4a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef4d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ef50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef54:	e8 97 16 ff ff       	call   c00005f0 <strcmp>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	85 c0                	test   eax,eax
c000ef5e:	75 09                	jne    c000ef69 <EnvVarContainer::getEnv(char const*)+0x35>
c000ef60:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef63:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ef67:	eb 05                	jmp    c000ef6e <EnvVarContainer::getEnv(char const*)+0x3a>
c000ef69:	43                   	inc    ebx
c000ef6a:	eb d1                	jmp    c000ef3d <EnvVarContainer::getEnv(char const*)+0x9>
c000ef6c:	31 c0                	xor    eax,eax
c000ef6e:	5b                   	pop    ebx
c000ef6f:	5e                   	pop    esi
c000ef70:	5f                   	pop    edi
c000ef71:	c3                   	ret    

c000ef72 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ef72:	55                   	push   ebp
c000ef73:	57                   	push   edi
c000ef74:	56                   	push   esi
c000ef75:	53                   	push   ebx
c000ef76:	83 ec 28             	sub    esp,0x28
c000ef79:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ef7d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ef85:	56                   	push   esi
c000ef86:	e8 39 15 ff ff       	call   c00004c4 <strlen>
c000ef8b:	40                   	inc    eax
c000ef8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef8f:	e8 c1 7a ff ff       	call   c0006a55 <malloc>
c000ef94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef9b:	e8 24 15 ff ff       	call   c00004c4 <strlen>
c000efa0:	40                   	inc    eax
c000efa1:	89 04 24             	mov    DWORD PTR [esp],eax
c000efa4:	e8 ac 7a ff ff       	call   c0006a55 <malloc>
c000efa9:	89 34 24             	mov    DWORD PTR [esp],esi
c000efac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000efb0:	e8 0f 15 ff ff       	call   c00004c4 <strlen>
c000efb5:	83 c4 0c             	add    esp,0xc
c000efb8:	40                   	inc    eax
c000efb9:	50                   	push   eax
c000efba:	6a 00                	push   0x0
c000efbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000efc0:	e8 e3 14 ff ff       	call   c00004a8 <memset>
c000efc5:	89 34 24             	mov    DWORD PTR [esp],esi
c000efc8:	e8 f7 14 ff ff       	call   c00004c4 <strlen>
c000efcd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000efd1:	8d 48 01             	lea    ecx,[eax+0x1]
c000efd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efd9:	89 de                	mov    esi,ebx
c000efdb:	e8 e4 14 ff ff       	call   c00004c4 <strlen>
c000efe0:	83 c4 0c             	add    esp,0xc
c000efe3:	40                   	inc    eax
c000efe4:	50                   	push   eax
c000efe5:	6a 00                	push   0x0
c000efe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efeb:	e8 b8 14 ff ff       	call   c00004a8 <memset>
c000eff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eff3:	e8 cc 14 ff ff       	call   c00004c4 <strlen>
c000eff8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000effc:	8d 48 01             	lea    ecx,[eax+0x1]
c000efff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f004:	40                   	inc    eax
c000f005:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f008:	c1 e0 03             	shl    eax,0x3
c000f00b:	5a                   	pop    edx
c000f00c:	59                   	pop    ecx
c000f00d:	50                   	push   eax
c000f00e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f011:	e8 2b 7a ff ff       	call   c0006a41 <realloc>
c000f016:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f01a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f01d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f020:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f024:	b9 08 00 00 00       	mov    ecx,0x8
c000f029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f02b:	83 c4 2c             	add    esp,0x2c
c000f02e:	5b                   	pop    ebx
c000f02f:	5e                   	pop    esi
c000f030:	5f                   	pop    edi
c000f031:	5d                   	pop    ebp
c000f032:	c3                   	ret    
c000f033:	90                   	nop

c000f034 <EnvVarContainer::deleteEnv(char const*)>:
c000f034:	c3                   	ret    
c000f035:	90                   	nop

c000f036 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f036:	55                   	push   ebp
c000f037:	57                   	push   edi
c000f038:	56                   	push   esi
c000f039:	53                   	push   ebx
c000f03a:	81 ec 38 01 00 00    	sub    esp,0x138
c000f040:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f047:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f04e:	68 14 01 00 00       	push   0x114
c000f053:	e8 fd 79 ff ff       	call   c0006a55 <malloc>
c000f058:	83 c4 0c             	add    esp,0xc
c000f05b:	89 c3                	mov    ebx,eax
c000f05d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f060:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f067:	50                   	push   eax
c000f068:	e8 dd ac ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000f06d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f070:	e8 fd af ff ff       	call   c000a072 <File::exists()>
c000f075:	83 c4 10             	add    esp,0x10
c000f078:	84 c0                	test   al,al
c000f07a:	75 31                	jne    c000f0ad <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f07c:	50                   	push   eax
c000f07d:	50                   	push   eax
c000f07e:	6a 12                	push   0x12
c000f080:	53                   	push   ebx
c000f081:	e8 7e ad ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c000f086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f088:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f08b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f08e:	e8 31 14 ff ff       	call   c00004c4 <strlen>
c000f093:	5a                   	pop    edx
c000f094:	31 d2                	xor    edx,edx
c000f096:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f09a:	51                   	push   ecx
c000f09b:	56                   	push   esi
c000f09c:	52                   	push   edx
c000f09d:	50                   	push   eax
c000f09e:	53                   	push   ebx
c000f09f:	ff d7                	call   edi
c000f0a1:	83 c4 14             	add    esp,0x14
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 b8 ad ff ff       	call   c0009e62 <File::close()>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	56                   	push   esi
c000f0ae:	31 f6                	xor    esi,esi
c000f0b0:	68 00 01 00 00       	push   0x100
c000f0b5:	6a 00                	push   0x0
c000f0b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f0bb:	50                   	push   eax
c000f0bc:	e8 e7 13 ff ff       	call   c00004a8 <memset>
c000f0c1:	5f                   	pop    edi
c000f0c2:	58                   	pop    eax
c000f0c3:	6a 01                	push   0x1
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 39 ad ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c000f0cb:	83 c4 10             	add    esp,0x10
c000f0ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0d6:	83 ec 0c             	sub    esp,0xc
c000f0d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0db:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f0df:	51                   	push   ecx
c000f0e0:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f0e4:	52                   	push   edx
c000f0e5:	6a 00                	push   0x0
c000f0e7:	6a 01                	push   0x1
c000f0e9:	53                   	push   ebx
c000f0ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f0ed:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f0f1:	83 c4 20             	add    esp,0x20
c000f0f4:	3c 0d                	cmp    al,0xd
c000f0f6:	0f 84 09 01 00 00    	je     c000f205 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f0fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f101:	0f 84 ef 00 00 00    	je     c000f1f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f107:	3c 0a                	cmp    al,0xa
c000f109:	74 13                	je     c000f11e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f10b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f110:	74 0c                	je     c000f11e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f112:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f118:	0f 8e d8 00 00 00    	jle    c000f1f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f11e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f122:	83 ec 0c             	sub    esp,0xc
c000f125:	8d 78 01             	lea    edi,[eax+0x1]
c000f128:	57                   	push   edi
c000f129:	e8 27 79 ff ff       	call   c0006a55 <malloc>
c000f12e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f132:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f136:	8d 56 04             	lea    edx,[esi+0x4]
c000f139:	89 14 24             	mov    DWORD PTR [esp],edx
c000f13c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f140:	e8 10 79 ff ff       	call   c0006a55 <malloc>
c000f145:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f149:	83 c4 0c             	add    esp,0xc
c000f14c:	57                   	push   edi
c000f14d:	6a 00                	push   0x0
c000f14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f153:	e8 50 13 ff ff       	call   c00004a8 <memset>
c000f158:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f15c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f160:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f164:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f166:	83 c4 0c             	add    esp,0xc
c000f169:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f16d:	52                   	push   edx
c000f16e:	6a 00                	push   0x0
c000f170:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f174:	e8 2f 13 ff ff       	call   c00004a8 <memset>
c000f179:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f17d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f181:	89 34 24             	mov    DWORD PTR [esp],esi
c000f184:	e8 3b 13 ff ff       	call   c00004c4 <strlen>
c000f189:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f18d:	89 c1                	mov    ecx,eax
c000f18f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f191:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f194:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f197:	40                   	inc    eax
c000f198:	83 c4 10             	add    esp,0x10
c000f19b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f19e:	85 d2                	test   edx,edx
c000f1a0:	75 0c                	jne    c000f1ae <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f1a2:	83 ec 0c             	sub    esp,0xc
c000f1a5:	6a 08                	push   0x8
c000f1a7:	e8 a9 78 ff ff       	call   c0006a55 <malloc>
c000f1ac:	eb 0c                	jmp    c000f1ba <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f1ae:	c1 e0 03             	shl    eax,0x3
c000f1b1:	51                   	push   ecx
c000f1b2:	51                   	push   ecx
c000f1b3:	50                   	push   eax
c000f1b4:	52                   	push   edx
c000f1b5:	e8 87 78 ff ff       	call   c0006a41 <realloc>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f1c0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f1c3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f1c6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f1ca:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f1ce:	b9 08 00 00 00       	mov    ecx,0x8
c000f1d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1d5:	31 f6                	xor    esi,esi
c000f1d7:	50                   	push   eax
c000f1d8:	68 00 01 00 00       	push   0x100
c000f1dd:	6a 00                	push   0x0
c000f1df:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f1e3:	50                   	push   eax
c000f1e4:	e8 bf 12 ff ff       	call   c00004a8 <memset>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f1f4:	eb 0f                	jmp    c000f205 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f1f6:	3c 3d                	cmp    al,0x3d
c000f1f8:	74 07                	je     c000f201 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f1fa:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f1fe:	46                   	inc    esi
c000f1ff:	eb 04                	jmp    c000f205 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f201:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f205:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f20a:	0f 85 c6 fe ff ff    	jne    c000f0d6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f210:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f216:	5b                   	pop    ebx
c000f217:	5e                   	pop    esi
c000f218:	5f                   	pop    edi
c000f219:	5d                   	pop    ebp
c000f21a:	c3                   	ret    
c000f21b:	90                   	nop

c000f21c <EnvVarContainer::__loadSystem()>:
c000f21c:	83 ec 10             	sub    esp,0x10
c000f21f:	68 40 fe 01 c0       	push   0xc001fe40
c000f224:	68 44 eb 01 c0       	push   0xc001eb44
c000f229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f22d:	e8 04 fe ff ff       	call   c000f036 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f232:	83 c4 1c             	add    esp,0x1c
c000f235:	c3                   	ret    

c000f236 <EnvVarContainer::__loadUser()>:
c000f236:	c3                   	ret    
c000f237:	90                   	nop

c000f238 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f23c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f24a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f24d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f251:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f258:	90                   	nop
c000f259:	c3                   	ret    

c000f25a <EnvVarContainer::~EnvVarContainer()>:
c000f25a:	83 ec 0c             	sub    esp,0xc
c000f25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f261:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f264:	85 c0                	test   eax,eax
c000f266:	74 1d                	je     c000f285 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f26c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26e:	85 c0                	test   eax,eax
c000f270:	74 13                	je     c000f285 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f279:	83 ec 0c             	sub    esp,0xc
c000f27c:	50                   	push   eax
c000f27d:	e8 e3 77 ff ff       	call   c0006a65 <free>
c000f282:	83 c4 10             	add    esp,0x10
c000f285:	90                   	nop
c000f286:	83 c4 0c             	add    esp,0xc
c000f289:	c3                   	ret    

c000f28a <Krnl::getEnv(Process*, char const*)>:
c000f28a:	53                   	push   ebx
c000f28b:	83 ec 08             	sub    esp,0x8
c000f28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f292:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f296:	39 05 70 39 02 c0    	cmp    DWORD PTR ds:0xc0023970,eax
c000f29c:	74 04                	je     c000f2a2 <Krnl::getEnv(Process*, char const*)+0x18>
c000f29e:	85 c0                	test   eax,eax
c000f2a0:	75 0b                	jne    c000f2ad <Krnl::getEnv(Process*, char const*)+0x23>
c000f2a2:	a1 f4 2e 02 c0       	mov    eax,ds:0xc0022ef4
c000f2a7:	85 c0                	test   eax,eax
c000f2a9:	75 19                	jne    c000f2c4 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f2ab:	eb 27                	jmp    c000f2d4 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f2ad:	52                   	push   edx
c000f2ae:	52                   	push   edx
c000f2af:	53                   	push   ebx
c000f2b0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f2b6:	e8 79 fc ff ff       	call   c000ef34 <EnvVarContainer::getEnv(char const*)>
c000f2bb:	83 c4 10             	add    esp,0x10
c000f2be:	85 c0                	test   eax,eax
c000f2c0:	75 28                	jne    c000f2ea <Krnl::getEnv(Process*, char const*)+0x60>
c000f2c2:	eb de                	jmp    c000f2a2 <Krnl::getEnv(Process*, char const*)+0x18>
c000f2c4:	52                   	push   edx
c000f2c5:	52                   	push   edx
c000f2c6:	53                   	push   ebx
c000f2c7:	50                   	push   eax
c000f2c8:	e8 67 fc ff ff       	call   c000ef34 <EnvVarContainer::getEnv(char const*)>
c000f2cd:	83 c4 10             	add    esp,0x10
c000f2d0:	85 c0                	test   eax,eax
c000f2d2:	75 16                	jne    c000f2ea <Krnl::getEnv(Process*, char const*)+0x60>
c000f2d4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f2d8:	a1 f8 2e 02 c0       	mov    eax,ds:0xc0022ef8
c000f2dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2e1:	83 c4 08             	add    esp,0x8
c000f2e4:	5b                   	pop    ebx
c000f2e5:	e9 4a fc ff ff       	jmp    c000ef34 <EnvVarContainer::getEnv(char const*)>
c000f2ea:	83 c4 08             	add    esp,0x8
c000f2ed:	5b                   	pop    ebx
c000f2ee:	c3                   	ret    

c000f2ef <Krnl::setEnvSystem(char const*, char const*)>:
c000f2ef:	83 ec 10             	sub    esp,0x10
c000f2f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2fa:	ff 35 f8 2e 02 c0    	push   DWORD PTR ds:0xc0022ef8
c000f300:	e8 6d fc ff ff       	call   c000ef72 <EnvVarContainer::setEnv(char const*, char const*)>
c000f305:	83 c4 1c             	add    esp,0x1c
c000f308:	c3                   	ret    

c000f309 <Krnl::setEnvUser(char const*, char const*)>:
c000f309:	a1 f4 2e 02 c0       	mov    eax,ds:0xc0022ef4
c000f30e:	85 c0                	test   eax,eax
c000f310:	74 15                	je     c000f327 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f312:	83 ec 10             	sub    esp,0x10
c000f315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f319:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f31d:	50                   	push   eax
c000f31e:	e8 4f fc ff ff       	call   c000ef72 <EnvVarContainer::setEnv(char const*, char const*)>
c000f323:	83 c4 1c             	add    esp,0x1c
c000f326:	c3                   	ret    
c000f327:	c3                   	ret    

c000f328 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f332:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f336:	e9 37 fc ff ff       	jmp    c000ef72 <EnvVarContainer::setEnv(char const*, char const*)>

c000f33b <Krnl::deleteEnvSystem(char const*)>:
c000f33b:	c3                   	ret    

c000f33c <Krnl::deleteEnvUser(char const*)>:
c000f33c:	c3                   	ret    

c000f33d <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f33d:	c3                   	ret    

c000f33e <Krnl::newProcessEnv(Process*)>:
c000f33e:	83 ec 28             	sub    esp,0x28
c000f341:	6a 0c                	push   0xc
c000f343:	e8 0d 77 ff ff       	call   c0006a55 <malloc>
c000f348:	5a                   	pop    edx
c000f349:	59                   	pop    ecx
c000f34a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f34e:	50                   	push   eax
c000f34f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f353:	e8 e0 fe ff ff       	call   c000f238 <EnvVarContainer::EnvVarContainer(Process*)>
c000f358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f35c:	83 c4 2c             	add    esp,0x2c
c000f35f:	c3                   	ret    

c000f360 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f360:	57                   	push   edi
c000f361:	56                   	push   esi
c000f362:	53                   	push   ebx
c000f363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f370:	6a 0c                	push   0xc
c000f372:	e8 de 76 ff ff       	call   c0006a55 <malloc>
c000f377:	89 c3                	mov    ebx,eax
c000f379:	58                   	pop    eax
c000f37a:	5a                   	pop    edx
c000f37b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f37f:	53                   	push   ebx
c000f380:	e8 b3 fe ff ff       	call   c000f238 <EnvVarContainer::EnvVarContainer(Process*)>
c000f385:	8b 07                	mov    eax,DWORD PTR [edi]
c000f387:	89 03                	mov    DWORD PTR [ebx],eax
c000f389:	c1 e0 03             	shl    eax,0x3
c000f38c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f38f:	e8 c1 76 ff ff       	call   c0006a55 <malloc>
c000f394:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f397:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f399:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f39c:	c1 e1 03             	shl    ecx,0x3
c000f39f:	89 c7                	mov    edi,eax
c000f3a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	89 d8                	mov    eax,ebx
c000f3a8:	5b                   	pop    ebx
c000f3a9:	5e                   	pop    esi
c000f3aa:	5f                   	pop    edi
c000f3ab:	c3                   	ret    

c000f3ac <Krnl::loadSystemEnv()>:
c000f3ac:	53                   	push   ebx
c000f3ad:	83 ec 14             	sub    esp,0x14
c000f3b0:	6a 0c                	push   0xc
c000f3b2:	e8 9e 76 ff ff       	call   c0006a55 <malloc>
c000f3b7:	89 c3                	mov    ebx,eax
c000f3b9:	58                   	pop    eax
c000f3ba:	5a                   	pop    edx
c000f3bb:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000f3c1:	53                   	push   ebx
c000f3c2:	e8 71 fe ff ff       	call   c000f238 <EnvVarContainer::EnvVarContainer(Process*)>
c000f3c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ca:	89 1d f8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ef8,ebx
c000f3d0:	e8 47 fe ff ff       	call   c000f21c <EnvVarContainer::__loadSystem()>
c000f3d5:	83 c4 18             	add    esp,0x18
c000f3d8:	5b                   	pop    ebx
c000f3d9:	c3                   	ret    

c000f3da <Krnl::loadUserEnv()>:
c000f3da:	53                   	push   ebx
c000f3db:	83 ec 14             	sub    esp,0x14
c000f3de:	6a 0c                	push   0xc
c000f3e0:	e8 70 76 ff ff       	call   c0006a55 <malloc>
c000f3e5:	89 c3                	mov    ebx,eax
c000f3e7:	58                   	pop    eax
c000f3e8:	5a                   	pop    edx
c000f3e9:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000f3ef:	53                   	push   ebx
c000f3f0:	e8 43 fe ff ff       	call   c000f238 <EnvVarContainer::EnvVarContainer(Process*)>
c000f3f5:	89 1d f4 2e 02 c0    	mov    DWORD PTR ds:0xc0022ef4,ebx
c000f3fb:	83 c4 18             	add    esp,0x18
c000f3fe:	5b                   	pop    ebx
c000f3ff:	c3                   	ret    

c000f400 <Krnl::flushEnv()>:
c000f400:	c3                   	ret    

c000f401 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f405:	8b 15 f4 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ef4
c000f40b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f411:	a1 f8 2e 02 c0       	mov    eax,ds:0xc0022ef8
c000f416:	8b 00                	mov    eax,DWORD PTR [eax]
c000f418:	03 01                	add    eax,DWORD PTR [ecx]
c000f41a:	85 d2                	test   edx,edx
c000f41c:	74 02                	je     c000f420 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f41e:	03 02                	add    eax,DWORD PTR [edx]
c000f420:	c3                   	ret    

c000f421 <Krnl::getProcessEnvPair(Process*, int)>:
c000f421:	57                   	push   edi
c000f422:	56                   	push   esi
c000f423:	8b 35 f4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ef4
c000f429:	53                   	push   ebx
c000f42a:	85 f6                	test   esi,esi
c000f42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f434:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f43a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f43e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f440:	75 16                	jne    c000f458 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f442:	39 c2                	cmp    edx,eax
c000f444:	7c 16                	jl     c000f45c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f446:	8b 0d f8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ef8
c000f44c:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f44e:	01 c6                	add    esi,eax
c000f450:	39 d6                	cmp    esi,edx
c000f452:	7e 3c                	jle    c000f490 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f454:	29 c2                	sub    edx,eax
c000f456:	eb 04                	jmp    c000f45c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f458:	39 c2                	cmp    edx,eax
c000f45a:	7d 05                	jge    c000f461 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f45c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f45f:	eb 20                	jmp    c000f481 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f461:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f463:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f466:	39 d1                	cmp    ecx,edx
c000f468:	7e 04                	jle    c000f46e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f46a:	29 c2                	sub    edx,eax
c000f46c:	eb 10                	jmp    c000f47e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f46e:	8b 35 f8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ef8
c000f474:	03 0e                	add    ecx,DWORD PTR [esi]
c000f476:	39 d1                	cmp    ecx,edx
c000f478:	7e 16                	jle    c000f490 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f47a:	29 c2                	sub    edx,eax
c000f47c:	29 fa                	sub    edx,edi
c000f47e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f481:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f484:	8b 02                	mov    eax,DWORD PTR [edx]
c000f486:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f489:	89 03                	mov    DWORD PTR [ebx],eax
c000f48b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f48e:	eb 1d                	jmp    c000f4ad <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	68 66 eb 01 c0       	push   0xc001eb66
c000f498:	e8 18 00 00 00       	call   c000f4b5 <Krnl::panic(char const*)>
c000f49d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f4a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	89 d8                	mov    eax,ebx
c000f4af:	5b                   	pop    ebx
c000f4b0:	5e                   	pop    esi
c000f4b1:	5f                   	pop    edi
c000f4b2:	c2 04 00             	ret    0x4

c000f4b5 <Krnl::panic(char const*)>:
c000f4b5:	53                   	push   ebx
c000f4b6:	83 ec 10             	sub    esp,0x10
c000f4b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f4bd:	fa                   	cli    
c000f4be:	c6 05 04 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f04,0x1
c000f4c5:	53                   	push   ebx
c000f4c6:	68 80 eb 01 c0       	push   0xc001eb80
c000f4cb:	e8 0f a3 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c000f4d0:	83 c4 0c             	add    esp,0xc
c000f4d3:	6a 01                	push   0x1
c000f4d5:	6a 0f                	push   0xf
c000f4d7:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f4dd:	e8 e6 80 ff ff       	call   c00075c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4e2:	59                   	pop    ecx
c000f4e3:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f4e9:	e8 d2 82 ff ff       	call   c00077c0 <VgaText::clearScreen()>
c000f4ee:	58                   	pop    eax
c000f4ef:	5a                   	pop    edx
c000f4f0:	68 d7 eb 01 c0       	push   0xc001ebd7
c000f4f5:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f4fb:	e8 00 81 ff ff       	call   c0007600 <VgaText::setTitle(char*)>
c000f500:	83 c4 0c             	add    esp,0xc
c000f503:	6a 01                	push   0x1
c000f505:	6a 0f                	push   0xf
c000f507:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f50d:	e8 b6 80 ff ff       	call   c00075c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f512:	59                   	pop    ecx
c000f513:	58                   	pop    eax
c000f514:	68 99 eb 01 c0       	push   0xc001eb99
c000f519:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f51f:	e8 90 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f524:	58                   	pop    eax
c000f525:	5a                   	pop    edx
c000f526:	68 20 ec 01 c0       	push   0xc001ec20
c000f52b:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f531:	e8 7e 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f536:	59                   	pop    ecx
c000f537:	58                   	pop    eax
c000f538:	68 b5 eb 01 c0       	push   0xc001ebb5
c000f53d:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f543:	e8 6c 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f548:	58                   	pop    eax
c000f549:	5a                   	pop    edx
c000f54a:	53                   	push   ebx
c000f54b:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f551:	e8 5e 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f556:	59                   	pop    ecx
c000f557:	5b                   	pop    ebx
c000f558:	68 d5 eb 01 c0       	push   0xc001ebd5
c000f55d:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f563:	e8 4c 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f568:	58                   	pop    eax
c000f569:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f56d:	e8 97 29 00 00       	call   c0011f09 <Thr::getDriverNameFromAddress(unsigned long)>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	85 c0                	test   eax,eax
c000f577:	0f 84 4e 01 00 00    	je     c000f6cb <Krnl::panic(char const*)+0x216>
c000f57d:	83 ec 08             	sub    esp,0x8
c000f580:	89 c3                	mov    ebx,eax
c000f582:	68 5c ec 01 c0       	push   0xc001ec5c
c000f587:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f58d:	e8 22 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f592:	59                   	pop    ecx
c000f593:	58                   	pop    eax
c000f594:	68 b5 eb 01 c0       	push   0xc001ebb5
c000f599:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f59f:	e8 10 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5a4:	58                   	pop    eax
c000f5a5:	5a                   	pop    edx
c000f5a6:	53                   	push   ebx
c000f5a7:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f5ad:	e8 02 85 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5b2:	83 c4 10             	add    esp,0x10
c000f5b5:	83 ec 08             	sub    esp,0x8
c000f5b8:	68 d4 eb 01 c0       	push   0xc001ebd4
c000f5bd:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f5c3:	e8 ec 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5c8:	58                   	pop    eax
c000f5c9:	5a                   	pop    edx
c000f5ca:	68 b4 ec 01 c0       	push   0xc001ecb4
c000f5cf:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f5d5:	e8 da 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5da:	59                   	pop    ecx
c000f5db:	5b                   	pop    ebx
c000f5dc:	68 f4 ec 01 c0       	push   0xc001ecf4
c000f5e1:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f5e7:	e8 c8 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5ec:	58                   	pop    eax
c000f5ed:	5a                   	pop    edx
c000f5ee:	68 c0 eb 01 c0       	push   0xc001ebc0
c000f5f3:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f5f9:	e8 b6 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f5fe:	59                   	pop    ecx
c000f5ff:	5b                   	pop    ebx
c000f600:	68 38 ed 01 c0       	push   0xc001ed38
c000f605:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f60b:	e8 a4 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f610:	58                   	pop    eax
c000f611:	5a                   	pop    edx
c000f612:	68 d8 eb 01 c0       	push   0xc001ebd8
c000f617:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f61d:	e8 92 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f622:	0f 20 c0             	mov    eax,cr0
c000f625:	59                   	pop    ecx
c000f626:	5b                   	pop    ebx
c000f627:	50                   	push   eax
c000f628:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f62e:	e8 3b 84 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c000f633:	58                   	pop    eax
c000f634:	5a                   	pop    edx
c000f635:	68 e2 eb 01 c0       	push   0xc001ebe2
c000f63a:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f640:	e8 6f 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f645:	0f 20 d0             	mov    eax,cr2
c000f648:	59                   	pop    ecx
c000f649:	5b                   	pop    ebx
c000f64a:	50                   	push   eax
c000f64b:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f651:	e8 18 84 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c000f656:	58                   	pop    eax
c000f657:	5a                   	pop    edx
c000f658:	68 ec eb 01 c0       	push   0xc001ebec
c000f65d:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f663:	e8 4c 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f668:	0f 20 d8             	mov    eax,cr3
c000f66b:	59                   	pop    ecx
c000f66c:	5b                   	pop    ebx
c000f66d:	50                   	push   eax
c000f66e:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f674:	e8 f5 83 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c000f679:	58                   	pop    eax
c000f67a:	5a                   	pop    edx
c000f67b:	68 ff eb 01 c0       	push   0xc001ebff
c000f680:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f686:	e8 29 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f68b:	0f 20 e0             	mov    eax,cr4
c000f68e:	59                   	pop    ecx
c000f68f:	5b                   	pop    ebx
c000f690:	50                   	push   eax
c000f691:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f697:	e8 d2 83 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c000f69c:	58                   	pop    eax
c000f69d:	5a                   	pop    edx
c000f69e:	68 09 ec 01 c0       	push   0xc001ec09
c000f6a3:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f6a9:	e8 06 84 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f6ae:	83 c4 10             	add    esp,0x10
c000f6b1:	b2 fe                	mov    dl,0xfe
c000f6b3:	e4 60                	in     al,0x60
c000f6b5:	3c 1c                	cmp    al,0x1c
c000f6b7:	74 04                	je     c000f6bd <Krnl::panic(char const*)+0x208>
c000f6b9:	3c 5a                	cmp    al,0x5a
c000f6bb:	75 f6                	jne    c000f6b3 <Krnl::panic(char const*)+0x1fe>
c000f6bd:	e4 64                	in     al,0x64
c000f6bf:	a8 02                	test   al,0x2
c000f6c1:	75 fa                	jne    c000f6bd <Krnl::panic(char const*)+0x208>
c000f6c3:	88 d0                	mov    al,dl
c000f6c5:	e6 64                	out    0x64,al
c000f6c7:	fa                   	cli    
c000f6c8:	f4                   	hlt    
c000f6c9:	eb e8                	jmp    c000f6b3 <Krnl::panic(char const*)+0x1fe>
c000f6cb:	51                   	push   ecx
c000f6cc:	51                   	push   ecx
c000f6cd:	68 88 ec 01 c0       	push   0xc001ec88
c000f6d2:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f6d8:	e8 d7 83 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f6dd:	5b                   	pop    ebx
c000f6de:	58                   	pop    eax
c000f6df:	68 b5 eb 01 c0       	push   0xc001ebb5
c000f6e4:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f6ea:	e8 c5 83 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f6ef:	58                   	pop    eax
c000f6f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6f5:	5a                   	pop    edx
c000f6f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f6f9:	83 c0 0c             	add    eax,0xc
c000f6fc:	50                   	push   eax
c000f6fd:	ff 35 b4 04 02 c0    	push   DWORD PTR ds:0xc00204b4
c000f703:	e8 ac 83 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c000f708:	83 c4 10             	add    esp,0x10
c000f70b:	e9 a5 fe ff ff       	jmp    c000f5b5 <Krnl::panic(char const*)+0x100>

c000f710 <Krnl::powerThread(void*)>:
c000f710:	53                   	push   ebx
c000f711:	83 ec 08             	sub    esp,0x8
c000f714:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c000f719:	48                   	dec    eax
c000f71a:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c000f71f:	75 01                	jne    c000f722 <Krnl::powerThread(void*)+0x12>
c000f721:	fb                   	sti    
c000f722:	83 ec 0c             	sub    esp,0xc
c000f725:	8b 1d 54 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f54
c000f72b:	6a 0a                	push   0xa
c000f72d:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c000f734:	e8 07 35 00 00       	call   c0012c40 <sleep(unsigned int)>
c000f739:	a1 64 2f 02 c0       	mov    eax,ds:0xc0022f64
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	83 c0 0a             	add    eax,0xa
c000f744:	85 db                	test   ebx,ebx
c000f746:	a3 64 2f 02 c0       	mov    ds:0xc0022f64,eax
c000f74b:	74 d5                	je     c000f722 <Krnl::powerThread(void*)+0x12>
c000f74d:	39 d8                	cmp    eax,ebx
c000f74f:	7e d1                	jle    c000f722 <Krnl::powerThread(void*)+0x12>
c000f751:	83 ec 0c             	sub    esp,0xc
c000f754:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000f75a:	e8 5b 69 ff ff       	call   c00060ba <Computer::sleep()>
c000f75f:	83 c4 10             	add    esp,0x10
c000f762:	eb be                	jmp    c000f722 <Krnl::powerThread(void*)+0x12>

c000f764 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f764:	57                   	push   edi
c000f765:	b9 09 00 00 00       	mov    ecx,0x9
c000f76a:	56                   	push   esi
c000f76b:	bf 40 2f 02 c0       	mov    edi,0xc0022f40
c000f770:	fc                   	cld    
c000f771:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f775:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f777:	5e                   	pop    esi
c000f778:	5f                   	pop    edi
c000f779:	c3                   	ret    

c000f77a <Krnl::userIOReceived()>:
c000f77a:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c000f784:	c3                   	ret    

c000f785 <Krnl::handlePowerButton()>:
c000f785:	83 ec 0c             	sub    esp,0xc
c000f788:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c000f78d:	83 f8 02             	cmp    eax,0x2
c000f790:	75 10                	jne    c000f7a2 <Krnl::handlePowerButton()+0x1d>
c000f792:	83 ec 0c             	sub    esp,0xc
c000f795:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000f79b:	e8 ea 68 ff ff       	call   c000608a <Computer::shutdown()>
c000f7a0:	eb 11                	jmp    c000f7b3 <Krnl::handlePowerButton()+0x2e>
c000f7a2:	48                   	dec    eax
c000f7a3:	75 11                	jne    c000f7b6 <Krnl::handlePowerButton()+0x31>
c000f7a5:	83 ec 0c             	sub    esp,0xc
c000f7a8:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000f7ae:	e8 07 69 ff ff       	call   c00060ba <Computer::sleep()>
c000f7b3:	83 c4 10             	add    esp,0x10
c000f7b6:	83 c4 0c             	add    esp,0xc
c000f7b9:	c3                   	ret    

c000f7ba <Krnl::handleSleepButton()>:
c000f7ba:	83 ec 0c             	sub    esp,0xc
c000f7bd:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c000f7c2:	83 f8 02             	cmp    eax,0x2
c000f7c5:	75 10                	jne    c000f7d7 <Krnl::handleSleepButton()+0x1d>
c000f7c7:	83 ec 0c             	sub    esp,0xc
c000f7ca:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000f7d0:	e8 b5 68 ff ff       	call   c000608a <Computer::shutdown()>
c000f7d5:	eb 11                	jmp    c000f7e8 <Krnl::handleSleepButton()+0x2e>
c000f7d7:	48                   	dec    eax
c000f7d8:	75 11                	jne    c000f7eb <Krnl::handleSleepButton()+0x31>
c000f7da:	83 ec 0c             	sub    esp,0xc
c000f7dd:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000f7e3:	e8 d2 68 ff ff       	call   c00060ba <Computer::sleep()>
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	83 c4 0c             	add    esp,0xc
c000f7ee:	c3                   	ret    

c000f7ef <Krnl::setupPowerManager()>:
c000f7ef:	83 ec 0c             	sub    esp,0xc
c000f7f2:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c000f7fc:	68 f0 00 00 00       	push   0xf0
c000f801:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c000f808:	6a 00                	push   0x0
c000f80a:	68 10 f7 00 c0       	push   0xc000f710
c000f80f:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000f815:	e8 02 2f 00 00       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c000f81a:	c7 05 40 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f40,0x2
c000f824:	c7 05 44 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f44,0x1
c000f82e:	c7 05 48 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f48,0x3
c000f838:	c7 05 4c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f4c,0x0
c000f842:	c7 05 58 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f58,0x0
c000f84c:	c7 05 50 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f50,0x0
c000f856:	c7 05 5c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f5c,0x0
c000f860:	c7 05 54 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f54,0x3c
c000f86a:	c7 05 60 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f60,0x3c
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f878:	55                   	push   ebp
c000f879:	57                   	push   edi
c000f87a:	56                   	push   esi
c000f87b:	53                   	push   ebx
c000f87c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f882:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f889:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f88b:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f88e:	80 fb 40             	cmp    bl,0x40
c000f891:	75 1b                	jne    c000f8ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f893:	8a 16                	mov    dl,BYTE PTR [esi]
c000f895:	84 d2                	test   dl,dl
c000f897:	0f 84 f1 00 00 00    	je     c000f98e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f89d:	8d 46 01             	lea    eax,[esi+0x1]
c000f8a0:	80 fa 3a             	cmp    dl,0x3a
c000f8a3:	74 04                	je     c000f8a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f8a5:	89 c6                	mov    esi,eax
c000f8a7:	eb ea                	jmp    c000f893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f8a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f8ac:	89 c6                	mov    esi,eax
c000f8ae:	50                   	push   eax
c000f8af:	6a 40                	push   0x40
c000f8b1:	6a 00                	push   0x0
c000f8b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f8b7:	50                   	push   eax
c000f8b8:	e8 eb 0b ff ff       	call   c00004a8 <memset>
c000f8bd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f8cb:	84 c9                	test   cl,cl
c000f8cd:	0f 84 bb 00 00 00    	je     c000f98e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8d3:	3d c7 00 00 00       	cmp    eax,0xc7
c000f8d8:	0f 8f b0 00 00 00    	jg     c000f98e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8de:	80 f9 0a             	cmp    cl,0xa
c000f8e1:	0f 85 98 00 00 00    	jne    c000f97f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f8e7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f8ec:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f8f0:	a8 df                	test   al,0xdf
c000f8f2:	0f 94 c1             	sete   cl
c000f8f5:	3c 23                	cmp    al,0x23
c000f8f7:	0f 94 c2             	sete   dl
c000f8fa:	08 d1                	or     cl,dl
c000f8fc:	75 4a                	jne    c000f948 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f8fe:	8d 50 f7             	lea    edx,[eax-0x9]
c000f901:	80 fa 01             	cmp    dl,0x1
c000f904:	76 42                	jbe    c000f948 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f906:	3c 5b                	cmp    al,0x5b
c000f908:	75 42                	jne    c000f94c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f90a:	80 fb 40             	cmp    bl,0x40
c000f90d:	75 39                	jne    c000f948 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f90f:	83 ec 0c             	sub    esp,0xc
c000f912:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f916:	52                   	push   edx
c000f917:	e8 a8 0b ff ff       	call   c00004c4 <strlen>
c000f91c:	83 c4 10             	add    esp,0x10
c000f91f:	83 f8 3f             	cmp    eax,0x3f
c000f922:	77 6a                	ja     c000f98e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f924:	50                   	push   eax
c000f925:	50                   	push   eax
c000f926:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f92a:	52                   	push   edx
c000f92b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f92f:	52                   	push   edx
c000f930:	e8 2f 0c ff ff       	call   c0000564 <strcpy>
c000f935:	58                   	pop    eax
c000f936:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f93a:	52                   	push   edx
c000f93b:	e8 84 0b ff ff       	call   c00004c4 <strlen>
c000f940:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f945:	83 c4 10             	add    esp,0x10
c000f948:	31 d2                	xor    edx,edx
c000f94a:	eb 3a                	jmp    c000f986 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f94c:	80 fb 40             	cmp    bl,0x40
c000f94f:	74 06                	je     c000f957 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f951:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f955:	eb 20                	jmp    c000f977 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f957:	50                   	push   eax
c000f958:	50                   	push   eax
c000f959:	55                   	push   ebp
c000f95a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f95e:	50                   	push   eax
c000f95f:	e8 8c 0c ff ff       	call   c00005f0 <strcmp>
c000f964:	83 c4 10             	add    esp,0x10
c000f967:	85 c0                	test   eax,eax
c000f969:	75 dd                	jne    c000f948 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f96b:	eb e4                	jmp    c000f951 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f96d:	8d 50 01             	lea    edx,[eax+0x1]
c000f970:	80 f9 3d             	cmp    cl,0x3d
c000f973:	74 1d                	je     c000f992 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f975:	89 d0                	mov    eax,edx
c000f977:	8a 08                	mov    cl,BYTE PTR [eax]
c000f979:	84 c9                	test   cl,cl
c000f97b:	75 f0                	jne    c000f96d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f97d:	eb 0f                	jmp    c000f98e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f97f:	8d 50 01             	lea    edx,[eax+0x1]
c000f982:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f986:	47                   	inc    edi
c000f987:	89 d0                	mov    eax,edx
c000f989:	e9 3b ff ff ff       	jmp    c000f8c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f98e:	31 c0                	xor    eax,eax
c000f990:	eb 33                	jmp    c000f9c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f992:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f996:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f999:	50                   	push   eax
c000f99a:	50                   	push   eax
c000f99b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f99f:	50                   	push   eax
c000f9a0:	56                   	push   esi
c000f9a1:	e8 4a 0c ff ff       	call   c00005f0 <strcmp>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	85 c0                	test   eax,eax
c000f9ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9af:	75 97                	jne    c000f948 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9b1:	51                   	push   ecx
c000f9b2:	51                   	push   ecx
c000f9b3:	52                   	push   edx
c000f9b4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f9bb:	e8 a4 0b ff ff       	call   c0000564 <strcpy>
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	b0 01                	mov    al,0x1
c000f9c5:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f9cb:	5b                   	pop    ebx
c000f9cc:	5e                   	pop    esi
c000f9cd:	5f                   	pop    edi
c000f9ce:	5d                   	pop    ebp
c000f9cf:	c3                   	ret    

c000f9d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f9d0:	57                   	push   edi
c000f9d1:	56                   	push   esi
c000f9d2:	53                   	push   ebx
c000f9d3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f9d9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f9e0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f9e7:	53                   	push   ebx
c000f9e8:	e8 d7 0a ff ff       	call   c00004c4 <strlen>
c000f9ed:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9f0:	89 c7                	mov    edi,eax
c000f9f2:	e8 cd 0a ff ff       	call   c00004c4 <strlen>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f9fe:	3d ff 00 00 00       	cmp    eax,0xff
c000fa03:	0f 87 d3 00 00 00    	ja     c000fadc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fa09:	57                   	push   edi
c000fa0a:	57                   	push   edi
c000fa0b:	56                   	push   esi
c000fa0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fa10:	56                   	push   esi
c000fa11:	e8 4e 0b ff ff       	call   c0000564 <strcpy>
c000fa16:	58                   	pop    eax
c000fa17:	5a                   	pop    edx
c000fa18:	68 43 f0 01 c0       	push   0xc001f043
c000fa1d:	56                   	push   esi
c000fa1e:	e8 81 0c ff ff       	call   c00006a4 <strcat>
c000fa23:	59                   	pop    ecx
c000fa24:	5f                   	pop    edi
c000fa25:	53                   	push   ebx
c000fa26:	56                   	push   esi
c000fa27:	e8 78 0c ff ff       	call   c00006a4 <strcat>
c000fa2c:	58                   	pop    eax
c000fa2d:	5a                   	pop    edx
c000fa2e:	68 5e ed 01 c0       	push   0xc001ed5e
c000fa33:	56                   	push   esi
c000fa34:	e8 6b 0c ff ff       	call   c00006a4 <strcat>
c000fa39:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000fa40:	e8 10 70 ff ff       	call   c0006a55 <malloc>
c000fa45:	83 c4 0c             	add    esp,0xc
c000fa48:	89 c3                	mov    ebx,eax
c000fa4a:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c000fa50:	56                   	push   esi
c000fa51:	50                   	push   eax
c000fa52:	e8 f3 a2 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	85 db                	test   ebx,ebx
c000fa5c:	74 7e                	je     c000fadc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fa5e:	51                   	push   ecx
c000fa5f:	51                   	push   ecx
c000fa60:	6a 01                	push   0x1
c000fa62:	53                   	push   ebx
c000fa63:	e8 9c a3 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	85 c0                	test   eax,eax
c000fa6d:	74 08                	je     c000fa77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000fa6f:	83 ec 0c             	sub    esp,0xc
c000fa72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa74:	53                   	push   ebx
c000fa75:	eb 5f                	jmp    c000fad6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000fa77:	52                   	push   edx
c000fa78:	8d 44 24 17          	lea    eax,[esp+0x17]
c000fa7c:	50                   	push   eax
c000fa7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c000fa81:	50                   	push   eax
c000fa82:	53                   	push   ebx
c000fa83:	e8 28 a6 ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c000fa88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa8c:	83 c4 10             	add    esp,0x10
c000fa8f:	89 c1                	mov    ecx,eax
c000fa91:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000fa95:	74 31                	je     c000fac8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fa97:	83 ec 0c             	sub    esp,0xc
c000fa9a:	50                   	push   eax
c000fa9b:	e8 b5 6f ff ff       	call   c0006a55 <malloc>
c000faa0:	89 c6                	mov    esi,eax
c000faa2:	58                   	pop    eax
c000faa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000faa5:	8d 54 24 20          	lea    edx,[esp+0x20]
c000faa9:	52                   	push   edx
c000faaa:	56                   	push   esi
c000faab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000faaf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fab3:	53                   	push   ebx
c000fab4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fab7:	83 c4 20             	add    esp,0x20
c000faba:	85 c0                	test   eax,eax
c000fabc:	75 0a                	jne    c000fac8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fabe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fac2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fac6:	74 18                	je     c000fae0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fac8:	83 ec 0c             	sub    esp,0xc
c000facb:	53                   	push   ebx
c000facc:	e8 91 a3 ff ff       	call   c0009e62 <File::close()>
c000fad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fad3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fad6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	31 c0                	xor    eax,eax
c000fade:	eb 3b                	jmp    c000fb1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fae0:	83 ec 0c             	sub    esp,0xc
c000fae3:	53                   	push   ebx
c000fae4:	e8 79 a3 ff ff       	call   c0009e62 <File::close()>
c000fae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000faeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000faf1:	83 c4 0c             	add    esp,0xc
c000faf4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fafb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fb02:	56                   	push   esi
c000fb03:	e8 70 fd ff ff       	call   c000f878 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fb08:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb0b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fb0f:	e8 51 6f ff ff       	call   c0006a65 <free>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb1b:	81 c4 20 01 00 00    	add    esp,0x120
c000fb21:	5b                   	pop    ebx
c000fb22:	5e                   	pop    esi
c000fb23:	5f                   	pop    edi
c000fb24:	c3                   	ret    

c000fb25 <Reg::getLine(char*, char*, char*)>:
c000fb25:	57                   	push   edi
c000fb26:	56                   	push   esi
c000fb27:	53                   	push   ebx
c000fb28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb2c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb30:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb34:	57                   	push   edi
c000fb35:	56                   	push   esi
c000fb36:	53                   	push   ebx
c000fb37:	68 63 ed 01 c0       	push   0xc001ed63
c000fb3c:	e8 8f fe ff ff       	call   c000f9d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	84 c0                	test   al,al
c000fb46:	75 10                	jne    c000fb58 <Reg::getLine(char*, char*, char*)+0x33>
c000fb48:	57                   	push   edi
c000fb49:	56                   	push   esi
c000fb4a:	53                   	push   ebx
c000fb4b:	68 88 ed 01 c0       	push   0xc001ed88
c000fb50:	e8 7b fe ff ff       	call   c000f9d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	5b                   	pop    ebx
c000fb59:	5e                   	pop    esi
c000fb5a:	5f                   	pop    edi
c000fb5b:	c3                   	ret    

c000fb5c <Reg::readInt(char*, char*, int*)>:
c000fb5c:	55                   	push   ebp
c000fb5d:	57                   	push   edi
c000fb5e:	56                   	push   esi
c000fb5f:	53                   	push   ebx
c000fb60:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fb66:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fb6a:	57                   	push   edi
c000fb6b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fb72:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fb79:	e8 a7 ff ff ff       	call   c000fb25 <Reg::getLine(char*, char*, char*)>
c000fb7e:	83 c4 10             	add    esp,0x10
c000fb81:	84 c0                	test   al,al
c000fb83:	0f 84 b3 00 00 00    	je     c000fc3c <Reg::readInt(char*, char*, int*)+0xe0>
c000fb89:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fb8d:	80 fa 2b             	cmp    dl,0x2b
c000fb90:	74 0c                	je     c000fb9e <Reg::readInt(char*, char*, int*)+0x42>
c000fb92:	80 fa 2d             	cmp    dl,0x2d
c000fb95:	75 0e                	jne    c000fba5 <Reg::readInt(char*, char*, int*)+0x49>
c000fb97:	ba 01 00 00 00       	mov    edx,0x1
c000fb9c:	eb 0b                	jmp    c000fba9 <Reg::readInt(char*, char*, int*)+0x4d>
c000fb9e:	ba 01 00 00 00       	mov    edx,0x1
c000fba3:	eb 02                	jmp    c000fba7 <Reg::readInt(char*, char*, int*)+0x4b>
c000fba5:	31 d2                	xor    edx,edx
c000fba7:	31 c0                	xor    eax,eax
c000fba9:	be 0a 00 00 00       	mov    esi,0xa
c000fbae:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fbb3:	75 20                	jne    c000fbd5 <Reg::readInt(char*, char*, int*)+0x79>
c000fbb5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fbb9:	80 f9 78             	cmp    cl,0x78
c000fbbc:	75 0a                	jne    c000fbc8 <Reg::readInt(char*, char*, int*)+0x6c>
c000fbbe:	83 c2 02             	add    edx,0x2
c000fbc1:	be 10 00 00 00       	mov    esi,0x10
c000fbc6:	eb 0d                	jmp    c000fbd5 <Reg::readInt(char*, char*, int*)+0x79>
c000fbc8:	80 f9 62             	cmp    cl,0x62
c000fbcb:	75 08                	jne    c000fbd5 <Reg::readInt(char*, char*, int*)+0x79>
c000fbcd:	83 c2 02             	add    edx,0x2
c000fbd0:	be 02 00 00 00       	mov    esi,0x2
c000fbd5:	01 d7                	add    edi,edx
c000fbd7:	31 d2                	xor    edx,edx
c000fbd9:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fbdb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fbdf:	80 fb 0d             	cmp    bl,0xd
c000fbe2:	0f 94 c3             	sete   bl
c000fbe5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fbea:	0f 94 c1             	sete   cl
c000fbed:	08 cb                	or     bl,cl
c000fbef:	75 3a                	jne    c000fc2b <Reg::readInt(char*, char*, int*)+0xcf>
c000fbf1:	0f af d6             	imul   edx,esi
c000fbf4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fbf9:	83 fe 10             	cmp    esi,0x10
c000fbfc:	75 26                	jne    c000fc24 <Reg::readInt(char*, char*, int*)+0xc8>
c000fbfe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fc02:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fc05:	89 e9                	mov    ecx,ebp
c000fc07:	80 f9 05             	cmp    cl,0x5
c000fc0a:	77 06                	ja     c000fc12 <Reg::readInt(char*, char*, int*)+0xb6>
c000fc0c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fc10:	eb 16                	jmp    c000fc28 <Reg::readInt(char*, char*, int*)+0xcc>
c000fc12:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fc16:	83 e9 61             	sub    ecx,0x61
c000fc19:	80 f9 05             	cmp    cl,0x5
c000fc1c:	77 06                	ja     c000fc24 <Reg::readInt(char*, char*, int*)+0xc8>
c000fc1e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fc22:	eb 04                	jmp    c000fc28 <Reg::readInt(char*, char*, int*)+0xcc>
c000fc24:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fc28:	47                   	inc    edi
c000fc29:	eb ae                	jmp    c000fbd9 <Reg::readInt(char*, char*, int*)+0x7d>
c000fc2b:	84 c0                	test   al,al
c000fc2d:	74 02                	je     c000fc31 <Reg::readInt(char*, char*, int*)+0xd5>
c000fc2f:	f7 da                	neg    edx
c000fc31:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fc38:	89 10                	mov    DWORD PTR [eax],edx
c000fc3a:	88 d8                	mov    al,bl
c000fc3c:	81 c4 ec 00 00 00    	add    esp,0xec
c000fc42:	5b                   	pop    ebx
c000fc43:	5e                   	pop    esi
c000fc44:	5f                   	pop    edi
c000fc45:	5d                   	pop    ebp
c000fc46:	c3                   	ret    

c000fc47 <Reg::readString(char*, char*, char*, int)>:
c000fc47:	57                   	push   edi
c000fc48:	56                   	push   esi
c000fc49:	53                   	push   ebx
c000fc4a:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fc50:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fc57:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fc5b:	57                   	push   edi
c000fc5c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fc63:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fc6a:	e8 b6 fe ff ff       	call   c000fb25 <Reg::getLine(char*, char*, char*)>
c000fc6f:	83 c4 10             	add    esp,0x10
c000fc72:	89 c6                	mov    esi,eax
c000fc74:	84 c0                	test   al,al
c000fc76:	74 44                	je     c000fcbc <Reg::readString(char*, char*, char*, int)+0x75>
c000fc78:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fc7f:	31 c0                	xor    eax,eax
c000fc81:	4a                   	dec    edx
c000fc82:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fc85:	84 c9                	test   cl,cl
c000fc87:	74 0f                	je     c000fc98 <Reg::readString(char*, char*, char*, int)+0x51>
c000fc89:	39 c2                	cmp    edx,eax
c000fc8b:	7e 0b                	jle    c000fc98 <Reg::readString(char*, char*, char*, int)+0x51>
c000fc8d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fc90:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fc95:	40                   	inc    eax
c000fc96:	eb ea                	jmp    c000fc82 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	53                   	push   ebx
c000fc9c:	e8 23 08 ff ff       	call   c00004c4 <strlen>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fca9:	75 11                	jne    c000fcbc <Reg::readString(char*, char*, char*, int)+0x75>
c000fcab:	83 ec 0c             	sub    esp,0xc
c000fcae:	53                   	push   ebx
c000fcaf:	e8 10 08 ff ff       	call   c00004c4 <strlen>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fcbc:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fcc2:	89 f0                	mov    eax,esi
c000fcc4:	5b                   	pop    ebx
c000fcc5:	5e                   	pop    esi
c000fcc6:	5f                   	pop    edi
c000fcc7:	c3                   	ret    

c000fcc8 <Reg::readBool(char*, char*, bool*)>:
c000fcc8:	83 ec 20             	sub    esp,0x20
c000fccb:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fccf:	50                   	push   eax
c000fcd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcd8:	e8 7f fe ff ff       	call   c000fb5c <Reg::readInt(char*, char*, int*)>
c000fcdd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fce6:	0f 95 02             	setne  BYTE PTR [edx]
c000fce9:	83 c4 2c             	add    esp,0x2c
c000fcec:	c3                   	ret    

c000fced <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fced:	53                   	push   ebx
c000fcee:	83 ec 1c             	sub    esp,0x1c
c000fcf1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fcf5:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fcf9:	50                   	push   eax
c000fcfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd02:	e8 c1 ff ff ff       	call   c000fcc8 <Reg::readBool(char*, char*, bool*)>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	84 c0                	test   al,al
c000fd0c:	74 04                	je     c000fd12 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fd0e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fd12:	88 d8                	mov    al,bl
c000fd14:	83 c4 18             	add    esp,0x18
c000fd17:	5b                   	pop    ebx
c000fd18:	c3                   	ret    

c000fd19 <Reg::readIntWithDefault(char*, char*, int)>:
c000fd19:	53                   	push   ebx
c000fd1a:	83 ec 1c             	sub    esp,0x1c
c000fd1d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd21:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fd25:	50                   	push   eax
c000fd26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd2e:	e8 29 fe ff ff       	call   c000fb5c <Reg::readInt(char*, char*, int*)>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	84 c0                	test   al,al
c000fd38:	74 04                	je     c000fd3e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fd3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fd3e:	89 d8                	mov    eax,ebx
c000fd40:	83 c4 18             	add    esp,0x18
c000fd43:	5b                   	pop    ebx
c000fd44:	c3                   	ret    

c000fd45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fd45:	57                   	push   edi
c000fd46:	56                   	push   esi
c000fd47:	56                   	push   esi
c000fd48:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd4c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fd50:	56                   	push   esi
c000fd51:	57                   	push   edi
c000fd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd5a:	e8 e8 fe ff ff       	call   c000fc47 <Reg::readString(char*, char*, char*, int)>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	84 c0                	test   al,al
c000fd64:	75 1a                	jne    c000fd80 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fd66:	51                   	push   ecx
c000fd67:	56                   	push   esi
c000fd68:	6a 00                	push   0x0
c000fd6a:	57                   	push   edi
c000fd6b:	e8 38 07 ff ff       	call   c00004a8 <memset>
c000fd70:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fd73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fd77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fd80:	89 f8                	mov    eax,edi
c000fd82:	5a                   	pop    edx
c000fd83:	5e                   	pop    esi
c000fd84:	5f                   	pop    edi
c000fd85:	c3                   	ret    

c000fd86 <Sys::eject(regs*)>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ca ff             	or     edx,0xffffffff
c000fd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd90:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fd93:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fd98:	83 e9 41             	sub    ecx,0x41
c000fd9b:	83 f9 19             	cmp    ecx,0x19
c000fd9e:	77 18                	ja     c000fdb8 <Sys::eject(regs*)+0x32>
c000fda0:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c000fda7:	85 c9                	test   ecx,ecx
c000fda9:	74 0d                	je     c000fdb8 <Sys::eject(regs*)+0x32>
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	51                   	push   ecx
c000fdaf:	e8 64 c0 ff ff       	call   c000be18 <LogicalDisk::eject()>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	99                   	cdq    
c000fdb8:	83 c4 0c             	add    esp,0xc
c000fdbb:	c3                   	ret    

c000fdbc <Sys::exit(regs*)>:
c000fdbc:	83 ec 18             	sub    esp,0x18
c000fdbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdc3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fdc6:	e8 85 34 00 00       	call   c0013250 <terminateTask(int)>
c000fdcb:	83 c8 ff             	or     eax,0xffffffff
c000fdce:	83 c4 1c             	add    esp,0x1c
c000fdd1:	89 c2                	mov    edx,eax
c000fdd3:	c3                   	ret    

c000fdd4 <Sys::getCwd(regs*)>:
c000fdd4:	83 ec 10             	sub    esp,0x10
c000fdd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fddb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fdde:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fde1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fde6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fde9:	e8 5e 9d ff ff       	call   c0009b4c <Fs::getcwd(Process*, char*, int)>
c000fdee:	83 c4 1c             	add    esp,0x1c
c000fdf1:	99                   	cdq    
c000fdf2:	c3                   	ret    

c000fdf3 <Sys::getPID(regs*)>:
c000fdf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fdfb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfd:	99                   	cdq    
c000fdfe:	c3                   	ret    

c000fdff <Sys::getRAMData(regs*)>:
c000fdff:	8b 0d 98 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020498
c000fe05:	69 05 94 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020494,0xc8
c000fe0f:	99                   	cdq    
c000fe10:	f7 f9                	idiv   ecx
c000fe12:	c1 e0 18             	shl    eax,0x18
c000fe15:	09 c8                	or     eax,ecx
c000fe17:	99                   	cdq    
c000fe18:	c3                   	ret    

c000fe19 <Sys::getVGAPtr(regs*)>:
c000fe19:	55                   	push   ebp
c000fe1a:	57                   	push   edi
c000fe1b:	56                   	push   esi
c000fe1c:	53                   	push   ebx
c000fe1d:	83 ec 18             	sub    esp,0x18
c000fe20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fe27:	e8 28 2f 00 00       	call   c0012d54 <Thr::processFromPID(int)>
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	89 c1                	mov    ecx,eax
c000fe31:	b8 01 00 00 00       	mov    eax,0x1
c000fe36:	85 c9                	test   ecx,ecx
c000fe38:	74 57                	je     c000fe91 <Sys::getVGAPtr(regs*)+0x78>
c000fe3a:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fe40:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fe44:	74 0c                	je     c000fe52 <Sys::getVGAPtr(regs*)+0x39>
c000fe46:	83 ec 0c             	sub    esp,0xc
c000fe49:	55                   	push   ebp
c000fe4a:	e8 26 79 ff ff       	call   c0007775 <setActiveTerminal(VgaText*)>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fe55:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fe58:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fe5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe65:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fe6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe6e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fe71:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fe77:	50                   	push   eax
c000fe78:	50                   	push   eax
c000fe79:	68 a3 ed 01 c0       	push   0xc001eda3
c000fe7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe81:	05 a8 0f 00 00       	add    eax,0xfa8
c000fe86:	50                   	push   eax
c000fe87:	e8 d8 06 ff ff       	call   c0000564 <strcpy>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	31 c0                	xor    eax,eax
c000fe91:	83 c4 0c             	add    esp,0xc
c000fe94:	31 d2                	xor    edx,edx
c000fe96:	5b                   	pop    ebx
c000fe97:	5e                   	pop    esi
c000fe98:	5f                   	pop    edi
c000fe99:	5d                   	pop    ebp
c000fe9a:	c3                   	ret    

c000fe9b <Sys::loadDLL(regs*)>:
c000fe9b:	56                   	push   esi
c000fe9c:	53                   	push   ebx
c000fe9d:	31 d2                	xor    edx,edx
c000fe9f:	51                   	push   ecx
c000fea0:	b8 01 00 00 00       	mov    eax,0x1
c000fea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fea9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fead:	0f 84 8c 00 00 00    	je     c000ff3f <Sys::loadDLL(regs*)+0xa4>
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	68 14 01 00 00       	push   0x114
c000febb:	e8 95 6b ff ff       	call   c0006a55 <malloc>
c000fec0:	83 c4 0c             	add    esp,0xc
c000fec3:	89 c3                	mov    ebx,eax
c000fec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000feca:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fecd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fed0:	53                   	push   ebx
c000fed1:	e8 74 9e ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	31 d2                	xor    edx,edx
c000fedb:	b8 02 00 00 00       	mov    eax,0x2
c000fee0:	85 db                	test   ebx,ebx
c000fee2:	74 5b                	je     c000ff3f <Sys::loadDLL(regs*)+0xa4>
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	53                   	push   ebx
c000fee8:	e8 85 a1 ff ff       	call   c000a072 <File::exists()>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	84 c0                	test   al,al
c000fef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fef4:	75 11                	jne    c000ff07 <Sys::loadDLL(regs*)+0x6c>
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	53                   	push   ebx
c000fefa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	b8 03 00 00 00       	mov    eax,0x3
c000ff05:	eb 36                	jmp    c000ff3d <Sys::loadDLL(regs*)+0xa2>
c000ff07:	83 ec 0c             	sub    esp,0xc
c000ff0a:	53                   	push   ebx
c000ff0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ff0e:	58                   	pop    eax
c000ff0f:	5a                   	pop    edx
c000ff10:	6a 00                	push   0x0
c000ff12:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ff15:	e8 40 20 00 00       	call   c0011f5a <Thr::loadDLL(char const*, bool)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	89 c1                	mov    ecx,eax
c000ff1f:	31 d2                	xor    edx,edx
c000ff21:	b8 04 00 00 00       	mov    eax,0x4
c000ff26:	85 c9                	test   ecx,ecx
c000ff28:	74 15                	je     c000ff3f <Sys::loadDLL(regs*)+0xa4>
c000ff2a:	53                   	push   ebx
c000ff2b:	53                   	push   ebx
c000ff2c:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c000ff32:	51                   	push   ecx
c000ff33:	e8 53 22 00 00       	call   c001218b <Thr::executeDLL(unsigned long, void*)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	31 c0                	xor    eax,eax
c000ff3d:	31 d2                	xor    edx,edx
c000ff3f:	59                   	pop    ecx
c000ff40:	5b                   	pop    ebx
c000ff41:	5e                   	pop    esi
c000ff42:	c3                   	ret    

c000ff43 <Sys::read(regs*)>:
c000ff43:	57                   	push   edi
c000ff44:	56                   	push   esi
c000ff45:	53                   	push   ebx
c000ff46:	83 ec 10             	sub    esp,0x10
c000ff49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ff4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff50:	83 f8 02             	cmp    eax,0x2
c000ff53:	77 10                	ja     c000ff65 <Sys::read(regs*)+0x22>
c000ff55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff5d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000ff63:	eb 0e                	jmp    c000ff73 <Sys::read(regs*)+0x30>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	50                   	push   eax
c000ff69:	e8 b9 84 ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	89 c1                	mov    ecx,eax
c000ff73:	83 c8 ff             	or     eax,0xffffffff
c000ff76:	85 c9                	test   ecx,ecx
c000ff78:	89 c2                	mov    edx,eax
c000ff7a:	74 28                	je     c000ffa4 <Sys::read(regs*)+0x61>
c000ff7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff84:	31 ff                	xor    edi,edi
c000ff86:	83 ec 0c             	sub    esp,0xc
c000ff89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff8b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ff8f:	52                   	push   edx
c000ff90:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ff93:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000ff96:	57                   	push   edi
c000ff97:	56                   	push   esi
c000ff98:	51                   	push   ecx
c000ff99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ffa0:	83 c4 20             	add    esp,0x20
c000ffa3:	99                   	cdq    
c000ffa4:	83 c4 10             	add    esp,0x10
c000ffa7:	5b                   	pop    ebx
c000ffa8:	5e                   	pop    esi
c000ffa9:	5f                   	pop    edi
c000ffaa:	c3                   	ret    

c000ffab <Sys::sbrk(regs*)>:
c000ffab:	56                   	push   esi
c000ffac:	53                   	push   ebx
c000ffad:	50                   	push   eax
c000ffae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffba:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000ffbd:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000ffc3:	85 db                	test   ebx,ebx
c000ffc5:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000ffc8:	74 02                	je     c000ffcc <Sys::sbrk(regs*)+0x21>
c000ffca:	79 06                	jns    c000ffd2 <Sys::sbrk(regs*)+0x27>
c000ffcc:	89 f0                	mov    eax,esi
c000ffce:	31 d2                	xor    edx,edx
c000ffd0:	eb 2a                	jmp    c000fffc <Sys::sbrk(regs*)+0x51>
c000ffd2:	83 c8 ff             	or     eax,0xffffffff
c000ffd5:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000ffdb:	89 c2                	mov    edx,eax
c000ffdd:	77 1d                	ja     c000fffc <Sys::sbrk(regs*)+0x51>
c000ffdf:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000ffe5:	50                   	push   eax
c000ffe6:	c1 ea 0c             	shr    edx,0xc
c000ffe9:	68 07 0c 00 00       	push   0xc07
c000ffee:	52                   	push   edx
c000ffef:	51                   	push   ecx
c000fff0:	e8 df 8c ff ff       	call   c0008cd4 <VAS::allocatePages(int, int)>
c000fff5:	89 f0                	mov    eax,esi
c000fff7:	31 d2                	xor    edx,edx
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	59                   	pop    ecx
c000fffd:	5b                   	pop    ebx
c000fffe:	5e                   	pop    esi
c000ffff:	c3                   	ret    

c0010000 <Sys::setCwd(regs*)>:
c0010000:	83 ec 14             	sub    esp,0x14
c0010003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010007:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001000a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001000f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010012:	e8 fa a0 ff ff       	call   c000a111 <Fs::setcwd(Process*, char*)>
c0010017:	83 c4 1c             	add    esp,0x1c
c001001a:	99                   	cdq    
c001001b:	c3                   	ret    

c001001c <Sys::setTime(regs*)>:
c001001c:	55                   	push   ebp
c001001d:	31 c9                	xor    ecx,ecx
c001001f:	57                   	push   edi
c0010020:	bd 0c 00 00 00       	mov    ebp,0xc
c0010025:	56                   	push   esi
c0010026:	53                   	push   ebx
c0010027:	31 db                	xor    ebx,ebx
c0010029:	83 ec 10             	sub    esp,0x10
c001002c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010030:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0010033:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010036:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0010039:	89 c2                	mov    edx,eax
c001003b:	66 81 ef 6c 07       	sub    di,0x76c
c0010040:	83 e2 1f             	and    edx,0x1f
c0010043:	c1 e7 10             	shl    edi,0x10
c0010046:	42                   	inc    edx
c0010047:	c1 e8 05             	shr    eax,0x5
c001004a:	88 d1                	mov    cl,dl
c001004c:	31 d2                	xor    edx,edx
c001004e:	f7 f5                	div    ebp
c0010050:	89 dd                	mov    ebp,ebx
c0010052:	88 d5                	mov    ch,dl
c0010054:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001005a:	0f b7 c1             	movzx  eax,cx
c001005d:	31 d2                	xor    edx,edx
c001005f:	09 f8                	or     eax,edi
c0010061:	bf 3c 00 00 00       	mov    edi,0x3c
c0010066:	89 c1                	mov    ecx,eax
c0010068:	89 f0                	mov    eax,esi
c001006a:	f7 f7                	div    edi
c001006c:	c1 e2 10             	shl    edx,0x10
c001006f:	09 d5                	or     ebp,edx
c0010071:	31 d2                	xor    edx,edx
c0010073:	89 eb                	mov    ebx,ebp
c0010075:	f7 f7                	div    edi
c0010077:	bf 10 0e 00 00       	mov    edi,0xe10
c001007c:	88 d7                	mov    bh,dl
c001007e:	89 f0                	mov    eax,esi
c0010080:	31 d2                	xor    edx,edx
c0010082:	f7 f7                	div    edi
c0010084:	bf 18 00 00 00       	mov    edi,0x18
c0010089:	31 d2                	xor    edx,edx
c001008b:	f7 f7                	div    edi
c001008d:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0010092:	88 d3                	mov    bl,dl
c0010094:	53                   	push   ebx
c0010095:	51                   	push   ecx
c0010096:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001009c:	e8 75 a8 ff ff       	call   c000a916 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00100a1:	83 c4 1c             	add    esp,0x1c
c00100a4:	83 f0 01             	xor    eax,0x1
c00100a7:	5b                   	pop    ebx
c00100a8:	0f b6 c0             	movzx  eax,al
c00100ab:	5e                   	pop    esi
c00100ac:	31 d2                	xor    edx,edx
c00100ae:	5f                   	pop    edi
c00100af:	5d                   	pop    ebp
c00100b0:	c3                   	ret    

c00100b1 <Sys::timezone(regs*)>:
c00100b1:	53                   	push   ebx
c00100b2:	83 ec 08             	sub    esp,0x8
c00100b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100b9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00100bd:	75 17                	jne    c00100d6 <Sys::timezone(regs*)+0x25>
c00100bf:	83 ec 0c             	sub    esp,0xc
c00100c2:	68 ad ed 01 c0       	push   0xc001edad
c00100c7:	e8 13 97 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00100cc:	83 c8 ff             	or     eax,0xffffffff
c00100cf:	83 c4 10             	add    esp,0x10
c00100d2:	89 c2                	mov    edx,eax
c00100d4:	eb 20                	jmp    c00100f6 <Sys::timezone(regs*)+0x45>
c00100d6:	83 ec 0c             	sub    esp,0xc
c00100d9:	68 c2 ed 01 c0       	push   0xc001edc2
c00100de:	e8 fc 96 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00100e3:	58                   	pop    eax
c00100e4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00100e7:	e8 8c a5 ff ff       	call   c000a678 <User::loadClockSettings(int)>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	b8 01 00 00 00       	mov    eax,0x1
c00100f4:	31 d2                	xor    edx,edx
c00100f6:	83 c4 08             	add    esp,0x8
c00100f9:	5b                   	pop    ebx
c00100fa:	c3                   	ret    

c00100fb <Sys::write(regs*)>:
c00100fb:	57                   	push   edi
c00100fc:	56                   	push   esi
c00100fd:	53                   	push   ebx
c00100fe:	83 ec 10             	sub    esp,0x10
c0010101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010105:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010108:	83 f8 02             	cmp    eax,0x2
c001010b:	77 10                	ja     c001011d <Sys::write(regs*)+0x22>
c001010d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010112:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010115:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001011b:	eb 0e                	jmp    c001012b <Sys::write(regs*)+0x30>
c001011d:	83 ec 0c             	sub    esp,0xc
c0010120:	50                   	push   eax
c0010121:	e8 01 83 ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	89 c1                	mov    ecx,eax
c001012b:	83 c8 ff             	or     eax,0xffffffff
c001012e:	85 c9                	test   ecx,ecx
c0010130:	89 c2                	mov    edx,eax
c0010132:	74 28                	je     c001015c <Sys::write(regs*)+0x61>
c0010134:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001013c:	31 ff                	xor    edi,edi
c001013e:	83 ec 0c             	sub    esp,0xc
c0010141:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010143:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010147:	52                   	push   edx
c0010148:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001014b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001014e:	57                   	push   edi
c001014f:	56                   	push   esi
c0010150:	51                   	push   ecx
c0010151:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010154:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010158:	83 c4 20             	add    esp,0x20
c001015b:	99                   	cdq    
c001015c:	83 c4 10             	add    esp,0x10
c001015f:	5b                   	pop    ebx
c0010160:	5e                   	pop    esi
c0010161:	5f                   	pop    edi
c0010162:	c3                   	ret    

c0010163 <Sys::wsbe(regs*)>:
c0010163:	57                   	push   edi
c0010164:	b9 0b 00 00 00       	mov    ecx,0xb
c0010169:	56                   	push   esi
c001016a:	be 01 ee 01 c0       	mov    esi,0xc001ee01
c001016f:	53                   	push   ebx
c0010170:	83 ec 30             	sub    esp,0x30
c0010173:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010177:	fc                   	cld    
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001017d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010186:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010189:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001018f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010191:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010194:	57                   	push   edi
c0010195:	e8 2a 03 ff ff       	call   c00004c4 <strlen>
c001019a:	5a                   	pop    edx
c001019b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001019f:	52                   	push   edx
c00101a0:	31 d2                	xor    edx,edx
c00101a2:	57                   	push   edi
c00101a3:	52                   	push   edx
c00101a4:	50                   	push   eax
c00101a5:	56                   	push   esi
c00101a6:	ff d3                	call   ebx
c00101a8:	83 c4 14             	add    esp,0x14
c00101ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00101af:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00101b2:	e8 99 30 00 00       	call   c0013250 <terminateTask(int)>
c00101b7:	83 c4 40             	add    esp,0x40
c00101ba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00101bf:	5b                   	pop    ebx
c00101c0:	31 d2                	xor    edx,edx
c00101c2:	5e                   	pop    esi
c00101c3:	5f                   	pop    edi
c00101c4:	c3                   	ret    

c00101c5 <Sys::yield(regs*)>:
c00101c5:	83 ec 0c             	sub    esp,0xc
c00101c8:	fa                   	cli    
c00101c9:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00101cf:	e8 64 27 00 00       	call   c0012938 <schedule()>
c00101d4:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00101d9:	48                   	dec    eax
c00101da:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00101df:	75 01                	jne    c00101e2 <Sys::yield(regs*)+0x1d>
c00101e1:	fb                   	sti    
c00101e2:	31 c0                	xor    eax,eax
c00101e4:	31 d2                	xor    edx,edx
c00101e6:	83 c4 0c             	add    esp,0xc
c00101e9:	c3                   	ret    

c00101ea <sysCallSeekDir(regs*)>:
c00101ea:	31 c0                	xor    eax,eax
c00101ec:	31 d2                	xor    edx,edx
c00101ee:	c3                   	ret    

c00101ef <sysCallTellDir(regs*)>:
c00101ef:	31 c0                	xor    eax,eax
c00101f1:	31 d2                	xor    edx,edx
c00101f3:	c3                   	ret    

c00101f4 <sysCallVerify(regs*)>:
c00101f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f8:	31 d2                	xor    edx,edx
c00101fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00101fd:	c3                   	ret    

c00101fe <sysCallGetArgc(regs*)>:
c00101fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010203:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010206:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001020c:	99                   	cdq    
c001020d:	c3                   	ret    

c001020e <sysCallTTYName(regs*)>:
c001020e:	b8 01 00 00 00       	mov    eax,0x1
c0010213:	31 d2                	xor    edx,edx
c0010215:	c3                   	ret    

c0010216 <sysFormatDisk(regs*)>:
c0010216:	56                   	push   esi
c0010217:	53                   	push   ebx
c0010218:	53                   	push   ebx
c0010219:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001021d:	8b 1d 58 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020558
c0010223:	eb 25                	jmp    c001024a <sysFormatDisk(regs*)+0x34>
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001022b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001022d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010230:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0010233:	50                   	push   eax
c0010234:	ff 34 85 e0 29 02 c0 	push   DWORD PTR [eax*4-0x3ffdd620]
c001023b:	53                   	push   ebx
c001023c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001023f:	83 c4 20             	add    esp,0x20
c0010242:	83 f8 08             	cmp    eax,0x8
c0010245:	75 12                	jne    c0010259 <sysFormatDisk(regs*)+0x43>
c0010247:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001024a:	85 db                	test   ebx,ebx
c001024c:	75 d7                	jne    c0010225 <sysFormatDisk(regs*)+0xf>
c001024e:	59                   	pop    ecx
c001024f:	b8 03 00 00 00       	mov    eax,0x3
c0010254:	31 d2                	xor    edx,edx
c0010256:	5b                   	pop    ebx
c0010257:	5e                   	pop    esi
c0010258:	c3                   	ret    
c0010259:	85 c0                	test   eax,eax
c001025b:	74 1b                	je     c0010278 <sysFormatDisk(regs*)+0x62>
c001025d:	83 f8 09             	cmp    eax,0x9
c0010260:	74 0b                	je     c001026d <sysFormatDisk(regs*)+0x57>
c0010262:	59                   	pop    ecx
c0010263:	b8 02 00 00 00       	mov    eax,0x2
c0010268:	31 d2                	xor    edx,edx
c001026a:	5b                   	pop    ebx
c001026b:	5e                   	pop    esi
c001026c:	c3                   	ret    
c001026d:	59                   	pop    ecx
c001026e:	b8 01 00 00 00       	mov    eax,0x1
c0010273:	31 d2                	xor    edx,edx
c0010275:	5b                   	pop    ebx
c0010276:	5e                   	pop    esi
c0010277:	c3                   	ret    
c0010278:	59                   	pop    ecx
c0010279:	31 c0                	xor    eax,eax
c001027b:	31 d2                	xor    edx,edx
c001027d:	5b                   	pop    ebx
c001027e:	5e                   	pop    esi
c001027f:	c3                   	ret    

c0010280 <sysSetDiskVolumeLabel(regs*)>:
c0010280:	56                   	push   esi
c0010281:	53                   	push   ebx
c0010282:	53                   	push   ebx
c0010283:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010287:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001028a:	83 f8 19             	cmp    eax,0x19
c001028d:	77 2d                	ja     c00102bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c001028f:	8b 0c 85 e0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd620]
c0010296:	85 c9                	test   ecx,ecx
c0010298:	74 22                	je     c00102bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c001029a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001029d:	85 db                	test   ebx,ebx
c001029f:	74 1b                	je     c00102bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102a1:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00102a7:	85 d2                	test   edx,edx
c00102a9:	74 11                	je     c00102bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102ab:	8b 32                	mov    esi,DWORD PTR [edx]
c00102ad:	53                   	push   ebx
c00102ae:	50                   	push   eax
c00102af:	51                   	push   ecx
c00102b0:	52                   	push   edx
c00102b1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	99                   	cdq    
c00102b8:	59                   	pop    ecx
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	c3                   	ret    
c00102bc:	59                   	pop    ecx
c00102bd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00102c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102c7:	5b                   	pop    ebx
c00102c8:	5e                   	pop    esi
c00102c9:	c3                   	ret    

c00102ca <sysGetDiskVolumeLabel(regs*)>:
c00102ca:	57                   	push   edi
c00102cb:	56                   	push   esi
c00102cc:	53                   	push   ebx
c00102cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00102d4:	83 fa 19             	cmp    edx,0x19
c00102d7:	77 38                	ja     c0010311 <sysGetDiskVolumeLabel(regs*)+0x47>
c00102d9:	8b 0c 95 e0 29 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd620]
c00102e0:	85 c9                	test   ecx,ecx
c00102e2:	74 2d                	je     c0010311 <sysGetDiskVolumeLabel(regs*)+0x47>
c00102e4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00102e7:	85 db                	test   ebx,ebx
c00102e9:	74 26                	je     c0010311 <sysGetDiskVolumeLabel(regs*)+0x47>
c00102eb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00102ee:	85 f6                	test   esi,esi
c00102f0:	74 1f                	je     c0010311 <sysGetDiskVolumeLabel(regs*)+0x47>
c00102f2:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00102f8:	85 c0                	test   eax,eax
c00102fa:	74 15                	je     c0010311 <sysGetDiskVolumeLabel(regs*)+0x47>
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	8b 38                	mov    edi,DWORD PTR [eax]
c0010301:	56                   	push   esi
c0010302:	53                   	push   ebx
c0010303:	52                   	push   edx
c0010304:	51                   	push   ecx
c0010305:	50                   	push   eax
c0010306:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010309:	83 c4 20             	add    esp,0x20
c001030c:	99                   	cdq    
c001030d:	5b                   	pop    ebx
c001030e:	5e                   	pop    esi
c001030f:	5f                   	pop    edi
c0010310:	c3                   	ret    
c0010311:	5b                   	pop    ebx
c0010312:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010317:	ba ff ff ff ff       	mov    edx,0xffffffff
c001031c:	5e                   	pop    esi
c001031d:	5f                   	pop    edi
c001031e:	c3                   	ret    

c001031f <sysShutdown(regs*)>:
c001031f:	83 ec 0c             	sub    esp,0xc
c0010322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010326:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010329:	85 c0                	test   eax,eax
c001032b:	74 18                	je     c0010345 <sysShutdown(regs*)+0x26>
c001032d:	83 f8 01             	cmp    eax,0x1
c0010330:	74 38                	je     c001036a <sysShutdown(regs*)+0x4b>
c0010332:	83 f8 02             	cmp    eax,0x2
c0010335:	74 24                	je     c001035b <sysShutdown(regs*)+0x3c>
c0010337:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001033c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010341:	83 c4 0c             	add    esp,0xc
c0010344:	c3                   	ret    
c0010345:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001034a:	8b 10                	mov    edx,DWORD PTR [eax]
c001034c:	6a 00                	push   0x0
c001034e:	6a 00                	push   0x0
c0010350:	6a 00                	push   0x0
c0010352:	50                   	push   eax
c0010353:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010356:	83 c4 10             	add    esp,0x10
c0010359:	eb dc                	jmp    c0010337 <sysShutdown(regs*)+0x18>
c001035b:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0010360:	8b 10                	mov    edx,DWORD PTR [eax]
c0010362:	6a 00                	push   0x0
c0010364:	6a 00                	push   0x0
c0010366:	6a 01                	push   0x1
c0010368:	eb e8                	jmp    c0010352 <sysShutdown(regs*)+0x33>
c001036a:	a1 60 2a 02 c0       	mov    eax,ds:0xc0022a60
c001036f:	85 c0                	test   eax,eax
c0010371:	74 02                	je     c0010375 <sysShutdown(regs*)+0x56>
c0010373:	ff d0                	call   eax
c0010375:	31 c0                	xor    eax,eax
c0010377:	31 d2                	xor    edx,edx
c0010379:	83 c4 0c             	add    esp,0xc
c001037c:	c3                   	ret    

c001037d <sysCallRealpath(regs*)>:
c001037d:	83 ec 0c             	sub    esp,0xc
c0010380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010384:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010387:	85 d2                	test   edx,edx
c0010389:	74 07                	je     c0010392 <sysCallRealpath(regs*)+0x15>
c001038b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001038e:	85 c0                	test   eax,eax
c0010390:	75 0b                	jne    c001039d <sysCallRealpath(regs*)+0x20>
c0010392:	b8 01 00 00 00       	mov    eax,0x1
c0010397:	31 d2                	xor    edx,edx
c0010399:	83 c4 0c             	add    esp,0xc
c001039c:	c3                   	ret    
c001039d:	51                   	push   ecx
c001039e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00103a4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00103a7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00103ad:	51                   	push   ecx
c00103ae:	52                   	push   edx
c00103af:	50                   	push   eax
c00103b0:	e8 eb 97 ff ff       	call   c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	31 c0                	xor    eax,eax
c00103ba:	31 d2                	xor    edx,edx
c00103bc:	83 c4 0c             	add    esp,0xc
c00103bf:	c3                   	ret    

c00103c0 <sysCallReadDir(regs*)>:
c00103c0:	53                   	push   ebx
c00103c1:	83 ec 18             	sub    esp,0x18
c00103c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103cb:	83 f8 02             	cmp    eax,0x2
c00103ce:	76 60                	jbe    c0010430 <sysCallReadDir(regs*)+0x70>
c00103d0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00103d7:	77 48                	ja     c0010421 <sysCallReadDir(regs*)+0x61>
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 45 80 ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	85 c0                	test   eax,eax
c00103e7:	74 38                	je     c0010421 <sysCallReadDir(regs*)+0x61>
c00103e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00103f1:	83 ec 0c             	sub    esp,0xc
c00103f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00103f6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00103fa:	51                   	push   ecx
c00103fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00103fe:	6a 00                	push   0x0
c0010400:	68 10 01 00 00       	push   0x110
c0010405:	50                   	push   eax
c0010406:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010409:	83 c4 20             	add    esp,0x20
c001040c:	85 c0                	test   eax,eax
c001040e:	74 29                	je     c0010439 <sysCallReadDir(regs*)+0x79>
c0010410:	83 f8 07             	cmp    eax,0x7
c0010413:	74 1b                	je     c0010430 <sysCallReadDir(regs*)+0x70>
c0010415:	b8 02 00 00 00       	mov    eax,0x2
c001041a:	31 d2                	xor    edx,edx
c001041c:	83 c4 18             	add    esp,0x18
c001041f:	5b                   	pop    ebx
c0010420:	c3                   	ret    
c0010421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010426:	ba ff ff ff ff       	mov    edx,0xffffffff
c001042b:	83 c4 18             	add    esp,0x18
c001042e:	5b                   	pop    ebx
c001042f:	c3                   	ret    
c0010430:	b8 01 00 00 00       	mov    eax,0x1
c0010435:	31 d2                	xor    edx,edx
c0010437:	eb e3                	jmp    c001041c <sysCallReadDir(regs*)+0x5c>
c0010439:	31 c0                	xor    eax,eax
c001043b:	31 d2                	xor    edx,edx
c001043d:	eb dd                	jmp    c001041c <sysCallReadDir(regs*)+0x5c>

c001043f <sysCallIsATTY(regs*)>:
c001043f:	83 ec 0c             	sub    esp,0xc
c0010442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010446:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010449:	83 f8 02             	cmp    eax,0x2
c001044c:	76 07                	jbe    c0010455 <sysCallIsATTY(regs*)+0x16>
c001044e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010453:	75 26                	jne    c001047b <sysCallIsATTY(regs*)+0x3c>
c0010455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001045a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001045d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010463:	85 c0                	test   eax,eax
c0010465:	74 24                	je     c001048b <sysCallIsATTY(regs*)+0x4c>
c0010467:	83 ec 0c             	sub    esp,0xc
c001046a:	8b 10                	mov    edx,DWORD PTR [eax]
c001046c:	50                   	push   eax
c001046d:	ff 12                	call   DWORD PTR [edx]
c001046f:	31 d2                	xor    edx,edx
c0010471:	0f b6 c0             	movzx  eax,al
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	83 c4 0c             	add    esp,0xc
c001047a:	c3                   	ret    
c001047b:	83 ec 0c             	sub    esp,0xc
c001047e:	50                   	push   eax
c001047f:	e8 a3 7f ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c0010484:	83 c4 10             	add    esp,0x10
c0010487:	85 c0                	test   eax,eax
c0010489:	75 dc                	jne    c0010467 <sysCallIsATTY(regs*)+0x28>
c001048b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010490:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010495:	83 c4 0c             	add    esp,0xc
c0010498:	c3                   	ret    

c0010499 <sysCallSeek(regs*)>:
c0010499:	53                   	push   ebx
c001049a:	83 ec 08             	sub    esp,0x8
c001049d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104a4:	8d 50 fd             	lea    edx,[eax-0x3]
c00104a7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00104ad:	77 32                	ja     c00104e1 <sysCallSeek(regs*)+0x48>
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 6f 7f ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c00104b8:	83 c4 0c             	add    esp,0xc
c00104bb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00104be:	31 db                	xor    ebx,ebx
c00104c0:	53                   	push   ebx
c00104c1:	51                   	push   ecx
c00104c2:	50                   	push   eax
c00104c3:	e8 fa 99 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	85 c0                	test   eax,eax
c00104cd:	0f 95 c0             	setne  al
c00104d0:	31 d2                	xor    edx,edx
c00104d2:	0f b6 c0             	movzx  eax,al
c00104d5:	f7 d8                	neg    eax
c00104d7:	83 d2 00             	adc    edx,0x0
c00104da:	83 c4 08             	add    esp,0x8
c00104dd:	f7 da                	neg    edx
c00104df:	5b                   	pop    ebx
c00104e0:	c3                   	ret    
c00104e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104eb:	83 c4 08             	add    esp,0x8
c00104ee:	5b                   	pop    ebx
c00104ef:	c3                   	ret    

c00104f0 <sysCallTell(regs*)>:
c00104f0:	53                   	push   ebx
c00104f1:	83 ec 08             	sub    esp,0x8
c00104f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104fb:	83 f8 02             	cmp    eax,0x2
c00104fe:	76 4d                	jbe    c001054d <sysCallTell(regs*)+0x5d>
c0010500:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010505:	76 19                	jbe    c0010520 <sysCallTell(regs*)+0x30>
c0010507:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001050a:	31 d2                	xor    edx,edx
c001050c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010519:	31 c0                	xor    eax,eax
c001051b:	83 c4 08             	add    esp,0x8
c001051e:	5b                   	pop    ebx
c001051f:	c3                   	ret    
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	50                   	push   eax
c0010524:	e8 fe 7e ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c0010529:	5a                   	pop    edx
c001052a:	59                   	pop    ecx
c001052b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001052e:	50                   	push   eax
c001052f:	e8 e4 99 ff ff       	call   c0009f18 <File::tell(unsigned long long*)>
c0010534:	83 c4 10             	add    esp,0x10
c0010537:	85 c0                	test   eax,eax
c0010539:	0f 95 c0             	setne  al
c001053c:	31 d2                	xor    edx,edx
c001053e:	0f b6 c0             	movzx  eax,al
c0010541:	f7 d8                	neg    eax
c0010543:	83 d2 00             	adc    edx,0x0
c0010546:	83 c4 08             	add    esp,0x8
c0010549:	f7 da                	neg    edx
c001054b:	5b                   	pop    ebx
c001054c:	c3                   	ret    
c001054d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010552:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010557:	83 c4 08             	add    esp,0x8
c001055a:	5b                   	pop    ebx
c001055b:	c3                   	ret    

c001055c <sysCallSize(regs*)>:
c001055c:	53                   	push   ebx
c001055d:	83 ec 18             	sub    esp,0x18
c0010560:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010564:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010567:	83 f8 02             	cmp    eax,0x2
c001056a:	76 53                	jbe    c00105bf <sysCallSize(regs*)+0x63>
c001056c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010571:	76 19                	jbe    c001058c <sysCallSize(regs*)+0x30>
c0010573:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010576:	31 d2                	xor    edx,edx
c0010578:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001057e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010585:	31 c0                	xor    eax,eax
c0010587:	83 c4 18             	add    esp,0x18
c001058a:	5b                   	pop    ebx
c001058b:	c3                   	ret    
c001058c:	83 ec 0c             	sub    esp,0xc
c001058f:	50                   	push   eax
c0010590:	e8 92 7e ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c0010595:	83 c4 0c             	add    esp,0xc
c0010598:	8d 54 24 13          	lea    edx,[esp+0x13]
c001059c:	52                   	push   edx
c001059d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00105a0:	50                   	push   eax
c00105a1:	e8 0a 9b ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c00105a6:	83 c4 10             	add    esp,0x10
c00105a9:	85 c0                	test   eax,eax
c00105ab:	0f 95 c0             	setne  al
c00105ae:	31 d2                	xor    edx,edx
c00105b0:	0f b6 c0             	movzx  eax,al
c00105b3:	f7 d8                	neg    eax
c00105b5:	83 d2 00             	adc    edx,0x0
c00105b8:	83 c4 18             	add    esp,0x18
c00105bb:	f7 da                	neg    edx
c00105bd:	5b                   	pop    ebx
c00105be:	c3                   	ret    
c00105bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105c9:	83 c4 18             	add    esp,0x18
c00105cc:	5b                   	pop    ebx
c00105cd:	c3                   	ret    

c00105ce <sysCallSizeFromFilename(regs*)>:
c00105ce:	57                   	push   edi
c00105cf:	56                   	push   esi
c00105d0:	53                   	push   ebx
c00105d1:	83 ec 20             	sub    esp,0x20
c00105d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105d8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00105db:	83 fb 02             	cmp    ebx,0x2
c00105de:	0f 86 88 00 00 00    	jbe    c001066c <sysCallSizeFromFilename(regs*)+0x9e>
c00105e4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00105ea:	76 1b                	jbe    c0010607 <sysCallSizeFromFilename(regs*)+0x39>
c00105ec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00105ef:	31 d2                	xor    edx,edx
c00105f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105fe:	83 c4 20             	add    esp,0x20
c0010601:	31 c0                	xor    eax,eax
c0010603:	5b                   	pop    ebx
c0010604:	5e                   	pop    esi
c0010605:	5f                   	pop    edi
c0010606:	c3                   	ret    
c0010607:	83 ec 0c             	sub    esp,0xc
c001060a:	68 14 01 00 00       	push   0x114
c001060f:	e8 41 64 ff ff       	call   c0006a55 <malloc>
c0010614:	83 c4 0c             	add    esp,0xc
c0010617:	89 c7                	mov    edi,eax
c0010619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001061e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010621:	53                   	push   ebx
c0010622:	57                   	push   edi
c0010623:	e8 22 97 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0010628:	83 c4 0c             	add    esp,0xc
c001062b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001062f:	50                   	push   eax
c0010630:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010633:	57                   	push   edi
c0010634:	e8 77 9a ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	85 ff                	test   edi,edi
c001063e:	74 14                	je     c0010654 <sysCallSizeFromFilename(regs*)+0x86>
c0010640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010644:	8b 17                	mov    edx,DWORD PTR [edi]
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	57                   	push   edi
c001064a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010654:	85 c0                	test   eax,eax
c0010656:	0f 95 c0             	setne  al
c0010659:	31 d2                	xor    edx,edx
c001065b:	0f b6 c0             	movzx  eax,al
c001065e:	f7 d8                	neg    eax
c0010660:	83 d2 00             	adc    edx,0x0
c0010663:	83 c4 20             	add    esp,0x20
c0010666:	f7 da                	neg    edx
c0010668:	5b                   	pop    ebx
c0010669:	5e                   	pop    esi
c001066a:	5f                   	pop    edi
c001066b:	c3                   	ret    
c001066c:	83 c4 20             	add    esp,0x20
c001066f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010674:	5b                   	pop    ebx
c0010675:	ba ff ff ff ff       	mov    edx,0xffffffff
c001067a:	5e                   	pop    esi
c001067b:	5f                   	pop    edi
c001067c:	c3                   	ret    

c001067d <sysCallClose(regs*)>:
c001067d:	53                   	push   ebx
c001067e:	83 ec 08             	sub    esp,0x8
c0010681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010685:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010688:	83 f8 02             	cmp    eax,0x2
c001068b:	76 41                	jbe    c00106ce <sysCallClose(regs*)+0x51>
c001068d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010693:	83 fa 01             	cmp    edx,0x1
c0010696:	76 2d                	jbe    c00106c5 <sysCallClose(regs*)+0x48>
c0010698:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001069d:	77 2f                	ja     c00106ce <sysCallClose(regs*)+0x51>
c001069f:	83 ec 0c             	sub    esp,0xc
c00106a2:	50                   	push   eax
c00106a3:	e8 7f 7d ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c00106a8:	89 c3                	mov    ebx,eax
c00106aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00106ad:	e8 b0 97 ff ff       	call   c0009e62 <File::close()>
c00106b2:	83 c4 10             	add    esp,0x10
c00106b5:	85 db                	test   ebx,ebx
c00106b7:	74 0c                	je     c00106c5 <sysCallClose(regs*)+0x48>
c00106b9:	83 ec 0c             	sub    esp,0xc
c00106bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106be:	53                   	push   ebx
c00106bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	31 c0                	xor    eax,eax
c00106c7:	31 d2                	xor    edx,edx
c00106c9:	83 c4 08             	add    esp,0x8
c00106cc:	5b                   	pop    ebx
c00106cd:	c3                   	ret    
c00106ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106d8:	83 c4 08             	add    esp,0x8
c00106db:	5b                   	pop    ebx
c00106dc:	c3                   	ret    

c00106dd <sysCallOpenDir(regs*)>:
c00106dd:	56                   	push   esi
c00106de:	53                   	push   ebx
c00106df:	53                   	push   ebx
c00106e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106e4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00106e7:	85 f6                	test   esi,esi
c00106e9:	74 59                	je     c0010744 <sysCallOpenDir(regs*)+0x67>
c00106eb:	83 ec 0c             	sub    esp,0xc
c00106ee:	68 14 01 00 00       	push   0x114
c00106f3:	e8 5d 63 ff ff       	call   c0006a55 <malloc>
c00106f8:	83 c4 0c             	add    esp,0xc
c00106fb:	89 c6                	mov    esi,eax
c00106fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010702:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010705:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010708:	56                   	push   esi
c0010709:	e8 60 9b ff ff       	call   c000a26e <Directory::Directory(char const*, Process*)>
c001070e:	83 c4 10             	add    esp,0x10
c0010711:	85 f6                	test   esi,esi
c0010713:	74 2f                	je     c0010744 <sysCallOpenDir(regs*)+0x67>
c0010715:	83 ec 0c             	sub    esp,0xc
c0010718:	56                   	push   esi
c0010719:	e8 0a 9c ff ff       	call   c000a328 <Directory::open()>
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	85 c0                	test   eax,eax
c0010723:	75 1f                	jne    c0010744 <sysCallOpenDir(regs*)+0x67>
c0010725:	83 ec 0c             	sub    esp,0xc
c0010728:	56                   	push   esi
c0010729:	e8 04 7a ff ff       	call   c0008132 <UnixFile::getFileDescriptor()>
c001072e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010731:	83 c4 10             	add    esp,0x10
c0010734:	89 02                	mov    DWORD PTR [edx],eax
c0010736:	c1 f8 1f             	sar    eax,0x1f
c0010739:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001073c:	31 c0                	xor    eax,eax
c001073e:	59                   	pop    ecx
c001073f:	31 d2                	xor    edx,edx
c0010741:	5b                   	pop    ebx
c0010742:	5e                   	pop    esi
c0010743:	c3                   	ret    
c0010744:	59                   	pop    ecx
c0010745:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001074a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001074f:	5b                   	pop    ebx
c0010750:	5e                   	pop    esi
c0010751:	c3                   	ret    

c0010752 <sysCallCloseDir(regs*)>:
c0010752:	53                   	push   ebx
c0010753:	83 ec 08             	sub    esp,0x8
c0010756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001075d:	8d 50 fd             	lea    edx,[eax-0x3]
c0010760:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010766:	77 2f                	ja     c0010797 <sysCallCloseDir(regs*)+0x45>
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	50                   	push   eax
c001076c:	e8 b6 7c ff ff       	call   c0008427 <getFromFileDescriptor(int)>
c0010771:	89 c3                	mov    ebx,eax
c0010773:	89 04 24             	mov    DWORD PTR [esp],eax
c0010776:	e8 09 9c ff ff       	call   c000a384 <Directory::close()>
c001077b:	83 c4 10             	add    esp,0x10
c001077e:	85 db                	test   ebx,ebx
c0010780:	74 0c                	je     c001078e <sysCallCloseDir(regs*)+0x3c>
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010787:	53                   	push   ebx
c0010788:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001078b:	83 c4 10             	add    esp,0x10
c001078e:	31 c0                	xor    eax,eax
c0010790:	31 d2                	xor    edx,edx
c0010792:	83 c4 08             	add    esp,0x8
c0010795:	5b                   	pop    ebx
c0010796:	c3                   	ret    
c0010797:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001079c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107a1:	83 c4 08             	add    esp,0x8
c00107a4:	5b                   	pop    ebx
c00107a5:	c3                   	ret    

c00107a6 <sysCallMakeDir(regs*)>:
c00107a6:	56                   	push   esi
c00107a7:	53                   	push   ebx
c00107a8:	83 ec 10             	sub    esp,0x10
c00107ab:	68 14 01 00 00       	push   0x114
c00107b0:	e8 a0 62 ff ff       	call   c0006a55 <malloc>
c00107b5:	83 c4 0c             	add    esp,0xc
c00107b8:	89 c3                	mov    ebx,eax
c00107ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107bf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00107c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00107c6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00107c9:	53                   	push   ebx
c00107ca:	e8 9f 9a ff ff       	call   c000a26e <Directory::Directory(char const*, Process*)>
c00107cf:	83 c4 10             	add    esp,0x10
c00107d2:	85 db                	test   ebx,ebx
c00107d4:	74 32                	je     c0010808 <sysCallMakeDir(regs*)+0x62>
c00107d6:	83 ec 0c             	sub    esp,0xc
c00107d9:	53                   	push   ebx
c00107da:	e8 29 9d ff ff       	call   c000a508 <Directory::create()>
c00107df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107e2:	89 c6                	mov    esi,eax
c00107e4:	e8 9b 9b ff ff       	call   c000a384 <Directory::close()>
c00107e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	31 c0                	xor    eax,eax
c00107f6:	59                   	pop    ecx
c00107f7:	85 f6                	test   esi,esi
c00107f9:	5b                   	pop    ebx
c00107fa:	0f 95 c0             	setne  al
c00107fd:	5e                   	pop    esi
c00107fe:	31 d2                	xor    edx,edx
c0010800:	f7 d8                	neg    eax
c0010802:	83 d2 00             	adc    edx,0x0
c0010805:	f7 da                	neg    edx
c0010807:	c3                   	ret    
c0010808:	59                   	pop    ecx
c0010809:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001080e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	c3                   	ret    

c0010816 <sysCallWait(regs*)>:
c0010816:	83 ec 10             	sub    esp,0x10
c0010819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001081d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010820:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010823:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010826:	e8 35 23 00 00       	call   c0012b60 <waitTask(int, int*, int)>
c001082b:	83 c4 1c             	add    esp,0x1c
c001082e:	99                   	cdq    
c001082f:	c3                   	ret    

c0010830 <sysCallNotImpl(regs*)>:
c0010830:	83 ec 18             	sub    esp,0x18
c0010833:	68 2d ee 01 c0       	push   0xc001ee2d
c0010838:	e8 78 ec ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001083d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010842:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010847:	83 c4 1c             	add    esp,0x1c
c001084a:	c3                   	ret    

c001084b <sysPanic(regs*)>:
c001084b:	83 ec 18             	sub    esp,0x18
c001084e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010852:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010855:	e8 5b ec ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001085a:	b8 01 00 00 00       	mov    eax,0x1
c001085f:	31 d2                	xor    edx,edx
c0010861:	83 c4 1c             	add    esp,0x1c
c0010864:	c3                   	ret    

c0010865 <sysCallRmdir(regs*)>:
c0010865:	56                   	push   esi
c0010866:	53                   	push   ebx
c0010867:	83 ec 20             	sub    esp,0x20
c001086a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001086e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010871:	68 14 01 00 00       	push   0x114
c0010876:	e8 da 61 ff ff       	call   c0006a55 <malloc>
c001087b:	83 c4 0c             	add    esp,0xc
c001087e:	89 c3                	mov    ebx,eax
c0010880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010885:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010888:	56                   	push   esi
c0010889:	53                   	push   ebx
c001088a:	e8 bb 94 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c001088f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010892:	e8 e5 96 ff ff       	call   c0009f7c <File::unlink()>
c0010897:	83 c4 10             	add    esp,0x10
c001089a:	85 db                	test   ebx,ebx
c001089c:	74 14                	je     c00108b2 <sysCallRmdir(regs*)+0x4d>
c001089e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108a4:	83 ec 0c             	sub    esp,0xc
c00108a7:	53                   	push   ebx
c00108a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108ab:	83 c4 10             	add    esp,0x10
c00108ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108b2:	85 c0                	test   eax,eax
c00108b4:	0f 95 c0             	setne  al
c00108b7:	31 d2                	xor    edx,edx
c00108b9:	0f b6 c0             	movzx  eax,al
c00108bc:	f7 d8                	neg    eax
c00108be:	83 d2 00             	adc    edx,0x0
c00108c1:	83 c4 14             	add    esp,0x14
c00108c4:	f7 da                	neg    edx
c00108c6:	5b                   	pop    ebx
c00108c7:	5e                   	pop    esi
c00108c8:	c3                   	ret    

c00108c9 <sysCallUnlink(regs*)>:
c00108c9:	56                   	push   esi
c00108ca:	53                   	push   ebx
c00108cb:	83 ec 20             	sub    esp,0x20
c00108ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108d2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108d5:	68 14 01 00 00       	push   0x114
c00108da:	e8 76 61 ff ff       	call   c0006a55 <malloc>
c00108df:	83 c4 0c             	add    esp,0xc
c00108e2:	89 c3                	mov    ebx,eax
c00108e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108e9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00108ec:	56                   	push   esi
c00108ed:	53                   	push   ebx
c00108ee:	e8 57 94 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c00108f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f6:	e8 81 96 ff ff       	call   c0009f7c <File::unlink()>
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	85 db                	test   ebx,ebx
c0010900:	74 14                	je     c0010916 <sysCallUnlink(regs*)+0x4d>
c0010902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010906:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010908:	83 ec 0c             	sub    esp,0xc
c001090b:	53                   	push   ebx
c001090c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001090f:	83 c4 10             	add    esp,0x10
c0010912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010916:	85 c0                	test   eax,eax
c0010918:	0f 95 c0             	setne  al
c001091b:	31 d2                	xor    edx,edx
c001091d:	0f b6 c0             	movzx  eax,al
c0010920:	f7 d8                	neg    eax
c0010922:	83 d2 00             	adc    edx,0x0
c0010925:	83 c4 14             	add    esp,0x14
c0010928:	f7 da                	neg    edx
c001092a:	5b                   	pop    ebx
c001092b:	5e                   	pop    esi
c001092c:	c3                   	ret    

c001092d <sysCallGetArgv(regs*)>:
c001092d:	83 ec 0c             	sub    esp,0xc
c0010930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010934:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010937:	85 c0                	test   eax,eax
c0010939:	78 2b                	js     c0010966 <sysCallGetArgv(regs*)+0x39>
c001093b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010941:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010944:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001094a:	7d 1a                	jge    c0010966 <sysCallGetArgv(regs*)+0x39>
c001094c:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010953:	85 c0                	test   eax,eax
c0010955:	74 17                	je     c001096e <sysCallGetArgv(regs*)+0x41>
c0010957:	83 ec 08             	sub    esp,0x8
c001095a:	50                   	push   eax
c001095b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001095e:	e8 01 fc fe ff       	call   c0000564 <strcpy>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	31 c0                	xor    eax,eax
c0010968:	31 d2                	xor    edx,edx
c001096a:	83 c4 0c             	add    esp,0xc
c001096d:	c3                   	ret    
c001096e:	b8 01 00 00 00       	mov    eax,0x1
c0010973:	31 d2                	xor    edx,edx
c0010975:	83 c4 0c             	add    esp,0xc
c0010978:	c3                   	ret    

c0010979 <sysCallUSleep(regs*)>:
c0010979:	83 ec 1c             	sub    esp,0x1c
c001097c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010980:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010983:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010986:	6a 00                	push   0x0
c0010988:	6a 64                	push   0x64
c001098a:	52                   	push   edx
c001098b:	50                   	push   eax
c001098c:	e8 2f bc 00 00       	call   c001c5c0 <__udivdi3>
c0010991:	83 c4 14             	add    esp,0x14
c0010994:	50                   	push   eax
c0010995:	e8 96 22 00 00       	call   c0012c30 <milliTenthSleep(unsigned int)>
c001099a:	31 c0                	xor    eax,eax
c001099c:	31 d2                	xor    edx,edx
c001099e:	83 c4 1c             	add    esp,0x1c
c00109a1:	c3                   	ret    

c00109a2 <sysCallSpawn(regs*)>:
c00109a2:	56                   	push   esi
c00109a3:	53                   	push   ebx
c00109a4:	50                   	push   eax
c00109a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00109ac:	85 c0                	test   eax,eax
c00109ae:	75 08                	jne    c00109b8 <sysCallSpawn(regs*)+0x16>
c00109b0:	59                   	pop    ecx
c00109b1:	31 c0                	xor    eax,eax
c00109b3:	31 d2                	xor    edx,edx
c00109b5:	5b                   	pop    ebx
c00109b6:	5e                   	pop    esi
c00109b7:	c3                   	ret    
c00109b8:	83 ec 0c             	sub    esp,0xc
c00109bb:	68 1f 07 00 00       	push   0x71f
c00109c0:	e8 90 60 ff ff       	call   c0006a55 <malloc>
c00109c5:	83 c4 10             	add    esp,0x10
c00109c8:	89 c6                	mov    esi,eax
c00109ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00109cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00109d0:	85 c0                	test   eax,eax
c00109d2:	75 32                	jne    c0010a06 <sysCallSpawn(regs*)+0x64>
c00109d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109dc:	52                   	push   edx
c00109dd:	50                   	push   eax
c00109de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00109e1:	56                   	push   esi
c00109e2:	e8 41 19 00 00       	call   c0012328 <Process::Process(char const*, Process*, char**)>
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00109f1:	75 bd                	jne    c00109b0 <sysCallSpawn(regs*)+0xe>
c00109f3:	83 ec 0c             	sub    esp,0xc
c00109f6:	56                   	push   esi
c00109f7:	e8 18 1e 00 00       	call   c0012814 <Process::createUserThread()>
c00109fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00109fe:	83 c4 10             	add    esp,0x10
c0010a01:	99                   	cdq    
c0010a02:	59                   	pop    ecx
c0010a03:	5b                   	pop    ebx
c0010a04:	5e                   	pop    esi
c0010a05:	c3                   	ret    
c0010a06:	31 c0                	xor    eax,eax
c0010a08:	eb d2                	jmp    c00109dc <sysCallSpawn(regs*)+0x3a>

c0010a0a <sysCallGetEnv(regs*)>:
c0010a0a:	57                   	push   edi
c0010a0b:	56                   	push   esi
c0010a0c:	53                   	push   ebx
c0010a0d:	83 ec 1c             	sub    esp,0x1c
c0010a10:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a19:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a1c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a1f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010a22:	e8 da e9 ff ff       	call   c000f401 <Krnl::getProcessTotalEnvCount(Process*)>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	39 c7                	cmp    edi,eax
c0010a2c:	7c 14                	jl     c0010a42 <sysCallGetEnv(regs*)+0x38>
c0010a2e:	85 f6                	test   esi,esi
c0010a30:	75 0b                	jne    c0010a3d <sysCallGetEnv(regs*)+0x33>
c0010a32:	83 c4 10             	add    esp,0x10
c0010a35:	31 c0                	xor    eax,eax
c0010a37:	5b                   	pop    ebx
c0010a38:	31 d2                	xor    edx,edx
c0010a3a:	5e                   	pop    esi
c0010a3b:	5f                   	pop    edi
c0010a3c:	c3                   	ret    
c0010a3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a40:	eb f0                	jmp    c0010a32 <sysCallGetEnv(regs*)+0x28>
c0010a42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a46:	52                   	push   edx
c0010a47:	57                   	push   edi
c0010a48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a4e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0010a51:	50                   	push   eax
c0010a52:	e8 ca e9 ff ff       	call   c000f421 <Krnl::getProcessEnvPair(Process*, int)>
c0010a57:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a62:	83 c4 0c             	add    esp,0xc
c0010a65:	85 c9                	test   ecx,ecx
c0010a67:	75 23                	jne    c0010a8c <sysCallGetEnv(regs*)+0x82>
c0010a69:	83 ec 0c             	sub    esp,0xc
c0010a6c:	50                   	push   eax
c0010a6d:	e8 52 fa fe ff       	call   c00004c4 <strlen>
c0010a72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a75:	89 c3                	mov    ebx,eax
c0010a77:	e8 48 fa fe ff       	call   c00004c4 <strlen>
c0010a7c:	83 c4 10             	add    esp,0x10
c0010a7f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a83:	83 c4 10             	add    esp,0x10
c0010a86:	31 d2                	xor    edx,edx
c0010a88:	5b                   	pop    ebx
c0010a89:	5e                   	pop    esi
c0010a8a:	5f                   	pop    edi
c0010a8b:	c3                   	ret    
c0010a8c:	83 ec 08             	sub    esp,0x8
c0010a8f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a92:	50                   	push   eax
c0010a93:	56                   	push   esi
c0010a94:	e8 cb fa fe ff       	call   c0000564 <strcpy>
c0010a99:	58                   	pop    eax
c0010a9a:	5a                   	pop    edx
c0010a9b:	68 47 ee 01 c0       	push   0xc001ee47
c0010aa0:	56                   	push   esi
c0010aa1:	e8 fe fb fe ff       	call   c00006a4 <strcat>
c0010aa6:	59                   	pop    ecx
c0010aa7:	5b                   	pop    ebx
c0010aa8:	57                   	push   edi
c0010aa9:	56                   	push   esi
c0010aaa:	e8 f5 fb fe ff       	call   c00006a4 <strcat>
c0010aaf:	83 c4 10             	add    esp,0x10
c0010ab2:	e9 7b ff ff ff       	jmp    c0010a32 <sysCallGetEnv(regs*)+0x28>

c0010ab7 <sysSetFatAttrib(regs*)>:
c0010ab7:	57                   	push   edi
c0010ab8:	56                   	push   esi
c0010ab9:	53                   	push   ebx
c0010aba:	83 ec 1c             	sub    esp,0x1c
c0010abd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010ac1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010ac4:	68 14 01 00 00       	push   0x114
c0010ac9:	e8 87 5f ff ff       	call   c0006a55 <malloc>
c0010ace:	83 c4 0c             	add    esp,0xc
c0010ad1:	89 c3                	mov    ebx,eax
c0010ad3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ad8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010adb:	57                   	push   edi
c0010adc:	53                   	push   ebx
c0010add:	e8 68 92 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0010ae2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010ae5:	83 c4 0c             	add    esp,0xc
c0010ae8:	0f b6 d4             	movzx  edx,ah
c0010aeb:	0f b6 c0             	movzx  eax,al
c0010aee:	52                   	push   edx
c0010aef:	50                   	push   eax
c0010af0:	53                   	push   ebx
c0010af1:	e8 20 95 ff ff       	call   c000a016 <File::chfatattr(unsigned char, unsigned char)>
c0010af6:	83 c4 10             	add    esp,0x10
c0010af9:	85 db                	test   ebx,ebx
c0010afb:	74 14                	je     c0010b11 <sysSetFatAttrib(regs*)+0x5a>
c0010afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b01:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b03:	83 ec 0c             	sub    esp,0xc
c0010b06:	53                   	push   ebx
c0010b07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b0a:	83 c4 10             	add    esp,0x10
c0010b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b11:	85 c0                	test   eax,eax
c0010b13:	0f 95 c0             	setne  al
c0010b16:	31 d2                	xor    edx,edx
c0010b18:	0f b6 c0             	movzx  eax,al
c0010b1b:	f7 d8                	neg    eax
c0010b1d:	83 d2 00             	adc    edx,0x0
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	f7 da                	neg    edx
c0010b25:	5b                   	pop    ebx
c0010b26:	5e                   	pop    esi
c0010b27:	5f                   	pop    edi
c0010b28:	c3                   	ret    

c0010b29 <sysPipe(regs*)>:
c0010b29:	57                   	push   edi
c0010b2a:	56                   	push   esi
c0010b2b:	53                   	push   ebx
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b36:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b39:	6a 20                	push   0x20
c0010b3b:	e8 15 5f ff ff       	call   c0006a55 <malloc>
c0010b40:	89 c3                	mov    ebx,eax
c0010b42:	58                   	pop    eax
c0010b43:	5a                   	pop    edx
c0010b44:	68 00 50 00 00       	push   0x5000
c0010b49:	53                   	push   ebx
c0010b4a:	e8 ed 68 ff ff       	call   c000743c <Pipe::Pipe(int)>
c0010b4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b52:	e8 db 75 ff ff       	call   c0008132 <UnixFile::getFileDescriptor()>
c0010b57:	89 07                	mov    DWORD PTR [edi],eax
c0010b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b5c:	e8 d1 75 ff ff       	call   c0008132 <UnixFile::getFileDescriptor()>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	89 06                	mov    DWORD PTR [esi],eax
c0010b66:	31 d2                	xor    edx,edx
c0010b68:	5b                   	pop    ebx
c0010b69:	31 c0                	xor    eax,eax
c0010b6b:	5e                   	pop    esi
c0010b6c:	5f                   	pop    edi
c0010b6d:	c3                   	ret    

c0010b6e <sysGetUnixTime(regs*)>:
c0010b6e:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0010b73:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b7d:	e9 cc 9b ff ff       	jmp    c000a74e <Clock::timeInSecondsLocal()>

c0010b82 <string_ends_with(char const*, char const*)>:
c0010b82:	57                   	push   edi
c0010b83:	56                   	push   esi
c0010b84:	53                   	push   ebx
c0010b85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b89:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010b8d:	83 ec 0c             	sub    esp,0xc
c0010b90:	53                   	push   ebx
c0010b91:	e8 2e f9 fe ff       	call   c00004c4 <strlen>
c0010b96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b99:	89 c6                	mov    esi,eax
c0010b9b:	e8 24 f9 fe ff       	call   c00004c4 <strlen>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	39 c6                	cmp    esi,eax
c0010ba5:	7d 06                	jge    c0010bad <string_ends_with(char const*, char const*)+0x2b>
c0010ba7:	5b                   	pop    ebx
c0010ba8:	31 c0                	xor    eax,eax
c0010baa:	5e                   	pop    esi
c0010bab:	5f                   	pop    edi
c0010bac:	c3                   	ret    
c0010bad:	83 ec 08             	sub    esp,0x8
c0010bb0:	29 c6                	sub    esi,eax
c0010bb2:	57                   	push   edi
c0010bb3:	01 f3                	add    ebx,esi
c0010bb5:	53                   	push   ebx
c0010bb6:	e8 35 fa fe ff       	call   c00005f0 <strcmp>
c0010bbb:	83 c4 10             	add    esp,0x10
c0010bbe:	85 c0                	test   eax,eax
c0010bc0:	5b                   	pop    ebx
c0010bc1:	0f 94 c0             	sete   al
c0010bc4:	5e                   	pop    esi
c0010bc5:	0f b6 c0             	movzx  eax,al
c0010bc8:	5f                   	pop    edi
c0010bc9:	c3                   	ret    

c0010bca <sysCallOpen(regs*)>:
c0010bca:	56                   	push   esi
c0010bcb:	53                   	push   ebx
c0010bcc:	81 ec 04 01 00 00    	sub    esp,0x104
c0010bd2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010bd9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010bdc:	85 c9                	test   ecx,ecx
c0010bde:	0f 84 ad 01 00 00    	je     c0010d91 <sysCallOpen(regs*)+0x1c7>
c0010be4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be7:	85 c0                	test   eax,eax
c0010be9:	0f 84 a2 01 00 00    	je     c0010d91 <sysCallOpen(regs*)+0x1c7>
c0010bef:	52                   	push   edx
c0010bf0:	68 49 ee 01 c0       	push   0xc001ee49
c0010bf5:	50                   	push   eax
c0010bf6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010bfa:	56                   	push   esi
c0010bfb:	e8 a0 8f ff ff       	call   c0009ba0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010c00:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c03:	e8 bc f8 fe ff       	call   c00004c4 <strlen>
c0010c08:	83 c4 10             	add    esp,0x10
c0010c0b:	48                   	dec    eax
c0010c0c:	74 1d                	je     c0010c2b <sysCallOpen(regs*)+0x61>
c0010c0e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010c11:	eb 0f                	jmp    c0010c22 <sysCallOpen(regs*)+0x58>
c0010c13:	80 fa 3a             	cmp    dl,0x3a
c0010c16:	74 0f                	je     c0010c27 <sysCallOpen(regs*)+0x5d>
c0010c18:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c1c:	48                   	dec    eax
c0010c1d:	74 0c                	je     c0010c2b <sysCallOpen(regs*)+0x61>
c0010c1f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010c22:	80 fa 2e             	cmp    dl,0x2e
c0010c25:	75 ec                	jne    c0010c13 <sysCallOpen(regs*)+0x49>
c0010c27:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c2b:	83 ec 08             	sub    esp,0x8
c0010c2e:	68 4d ee 01 c0       	push   0xc001ee4d
c0010c33:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c36:	e8 47 ff ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	85 c0                	test   eax,eax
c0010c40:	74 1d                	je     c0010c5f <sysCallOpen(regs*)+0x95>
c0010c42:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c45:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c52:	81 c4 04 01 00 00    	add    esp,0x104
c0010c58:	31 c0                	xor    eax,eax
c0010c5a:	31 d2                	xor    edx,edx
c0010c5c:	5b                   	pop    ebx
c0010c5d:	5e                   	pop    esi
c0010c5e:	c3                   	ret    
c0010c5f:	83 ec 08             	sub    esp,0x8
c0010c62:	68 52 ee 01 c0       	push   0xc001ee52
c0010c67:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c6a:	e8 13 ff ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010c6f:	83 c4 10             	add    esp,0x10
c0010c72:	85 c0                	test   eax,eax
c0010c74:	75 cc                	jne    c0010c42 <sysCallOpen(regs*)+0x78>
c0010c76:	83 ec 08             	sub    esp,0x8
c0010c79:	68 4e ee 01 c0       	push   0xc001ee4e
c0010c7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c81:	e8 6a f9 fe ff       	call   c00005f0 <strcmp>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	85 c0                	test   eax,eax
c0010c8b:	74 b5                	je     c0010c42 <sysCallOpen(regs*)+0x78>
c0010c8d:	83 ec 08             	sub    esp,0x8
c0010c90:	68 4d ee 01 c0       	push   0xc001ee4d
c0010c95:	56                   	push   esi
c0010c96:	e8 e7 fe ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010c9b:	83 c4 10             	add    esp,0x10
c0010c9e:	85 c0                	test   eax,eax
c0010ca0:	75 a0                	jne    c0010c42 <sysCallOpen(regs*)+0x78>
c0010ca2:	83 ec 08             	sub    esp,0x8
c0010ca5:	68 57 ee 01 c0       	push   0xc001ee57
c0010caa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010cad:	e8 d0 fe ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	85 c0                	test   eax,eax
c0010cb7:	0f 85 e7 00 00 00    	jne    c0010da4 <sysCallOpen(regs*)+0x1da>
c0010cbd:	83 ec 08             	sub    esp,0x8
c0010cc0:	68 5c ee 01 c0       	push   0xc001ee5c
c0010cc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010cc8:	e8 b5 fe ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	85 c0                	test   eax,eax
c0010cd2:	0f 85 cc 00 00 00    	jne    c0010da4 <sysCallOpen(regs*)+0x1da>
c0010cd8:	83 ec 08             	sub    esp,0x8
c0010cdb:	68 58 ee 01 c0       	push   0xc001ee58
c0010ce0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ce3:	e8 08 f9 fe ff       	call   c00005f0 <strcmp>
c0010ce8:	83 c4 10             	add    esp,0x10
c0010ceb:	85 c0                	test   eax,eax
c0010ced:	0f 84 b1 00 00 00    	je     c0010da4 <sysCallOpen(regs*)+0x1da>
c0010cf3:	83 ec 08             	sub    esp,0x8
c0010cf6:	68 57 ee 01 c0       	push   0xc001ee57
c0010cfb:	56                   	push   esi
c0010cfc:	e8 81 fe ff ff       	call   c0010b82 <string_ends_with(char const*, char const*)>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	85 c0                	test   eax,eax
c0010d06:	0f 85 98 00 00 00    	jne    c0010da4 <sysCallOpen(regs*)+0x1da>
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	68 14 01 00 00       	push   0x114
c0010d14:	e8 3c 5d ff ff       	call   c0006a55 <malloc>
c0010d19:	83 c4 0c             	add    esp,0xc
c0010d1c:	89 c6                	mov    esi,eax
c0010d1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d23:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010d26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010d29:	56                   	push   esi
c0010d2a:	e8 1b 90 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	85 f6                	test   esi,esi
c0010d34:	74 5b                	je     c0010d91 <sysCallOpen(regs*)+0x1c7>
c0010d36:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d39:	0f b6 c2             	movzx  eax,dl
c0010d3c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d3f:	89 d0                	mov    eax,edx
c0010d41:	83 e0 01             	and    eax,0x1
c0010d44:	f6 c2 02             	test   dl,0x2
c0010d47:	74 03                	je     c0010d4c <sysCallOpen(regs*)+0x182>
c0010d49:	83 c8 02             	or     eax,0x2
c0010d4c:	f6 c2 04             	test   dl,0x4
c0010d4f:	74 03                	je     c0010d54 <sysCallOpen(regs*)+0x18a>
c0010d51:	83 c8 04             	or     eax,0x4
c0010d54:	f6 c2 08             	test   dl,0x8
c0010d57:	74 03                	je     c0010d5c <sysCallOpen(regs*)+0x192>
c0010d59:	83 c8 0a             	or     eax,0xa
c0010d5c:	83 e2 10             	and    edx,0x10
c0010d5f:	74 03                	je     c0010d64 <sysCallOpen(regs*)+0x19a>
c0010d61:	83 c8 12             	or     eax,0x12
c0010d64:	83 ec 08             	sub    esp,0x8
c0010d67:	50                   	push   eax
c0010d68:	56                   	push   esi
c0010d69:	e8 96 90 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0010d6e:	83 c4 10             	add    esp,0x10
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 1c                	jne    c0010d91 <sysCallOpen(regs*)+0x1c7>
c0010d75:	83 ec 0c             	sub    esp,0xc
c0010d78:	56                   	push   esi
c0010d79:	e8 b4 73 ff ff       	call   c0008132 <UnixFile::getFileDescriptor()>
c0010d7e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d81:	83 c4 10             	add    esp,0x10
c0010d84:	89 02                	mov    DWORD PTR [edx],eax
c0010d86:	c1 f8 1f             	sar    eax,0x1f
c0010d89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d8c:	e9 c1 fe ff ff       	jmp    c0010c52 <sysCallOpen(regs*)+0x88>
c0010d91:	81 c4 04 01 00 00    	add    esp,0x104
c0010d97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d9c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010da1:	5b                   	pop    ebx
c0010da2:	5e                   	pop    esi
c0010da3:	c3                   	ret    
c0010da4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010da7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010dad:	e9 99 fe ff ff       	jmp    c0010c4b <sysCallOpen(regs*)+0x81>

c0010db2 <Sys::loadSyscalls()>:
c0010db2:	c7 05 80 2f 02 c0 c5 01 01 c0 	mov    DWORD PTR ds:0xc0022f80,0xc00101c5
c0010dbc:	c7 05 84 2f 02 c0 bc fd 00 c0 	mov    DWORD PTR ds:0xc0022f84,0xc000fdbc
c0010dc6:	c7 05 88 2f 02 c0 ab ff 00 c0 	mov    DWORD PTR ds:0xc0022f88,0xc000ffab
c0010dd0:	c7 05 8c 2f 02 c0 fb 00 01 c0 	mov    DWORD PTR ds:0xc0022f8c,0xc00100fb
c0010dda:	c7 05 90 2f 02 c0 43 ff 00 c0 	mov    DWORD PTR ds:0xc0022f90,0xc000ff43
c0010de4:	c7 05 94 2f 02 c0 f3 fd 00 c0 	mov    DWORD PTR ds:0xc0022f94,0xc000fdf3
c0010dee:	c7 05 98 2f 02 c0 d4 fd 00 c0 	mov    DWORD PTR ds:0xc0022f98,0xc000fdd4
c0010df8:	c7 05 9c 2f 02 c0 00 00 01 c0 	mov    DWORD PTR ds:0xc0022f9c,0xc0010000
c0010e02:	c7 05 a4 2f 02 c0 7d 06 01 c0 	mov    DWORD PTR ds:0xc0022fa4,0xc001067d
c0010e0c:	c7 05 a0 2f 02 c0 ca 0b 01 c0 	mov    DWORD PTR ds:0xc0022fa0,0xc0010bca
c0010e16:	c7 05 a8 2f 02 c0 dd 06 01 c0 	mov    DWORD PTR ds:0xc0022fa8,0xc00106dd
c0010e20:	c7 05 ac 2f 02 c0 c0 03 01 c0 	mov    DWORD PTR ds:0xc0022fac,0xc00103c0
c0010e2a:	c7 05 b0 2f 02 c0 ea 01 01 c0 	mov    DWORD PTR ds:0xc0022fb0,0xc00101ea
c0010e34:	c7 05 b4 2f 02 c0 ef 01 01 c0 	mov    DWORD PTR ds:0xc0022fb4,0xc00101ef
c0010e3e:	c7 05 b8 2f 02 c0 a6 07 01 c0 	mov    DWORD PTR ds:0xc0022fb8,0xc00107a6
c0010e48:	c7 05 bc 2f 02 c0 52 07 01 c0 	mov    DWORD PTR ds:0xc0022fbc,0xc0010752
c0010e52:	c7 05 c0 2f 02 c0 99 04 01 c0 	mov    DWORD PTR ds:0xc0022fc0,0xc0010499
c0010e5c:	c7 05 c4 2f 02 c0 f0 04 01 c0 	mov    DWORD PTR ds:0xc0022fc4,0xc00104f0
c0010e66:	c7 05 c8 2f 02 c0 5c 05 01 c0 	mov    DWORD PTR ds:0xc0022fc8,0xc001055c
c0010e70:	c7 05 cc 2f 02 c0 f4 01 01 c0 	mov    DWORD PTR ds:0xc0022fcc,0xc00101f4
c0010e7a:	c7 05 d0 2f 02 c0 16 08 01 c0 	mov    DWORD PTR ds:0xc0022fd0,0xc0010816
c0010e84:	c7 05 d4 2f 02 c0 30 08 01 c0 	mov    DWORD PTR ds:0xc0022fd4,0xc0010830
c0010e8e:	c7 05 d8 2f 02 c0 30 08 01 c0 	mov    DWORD PTR ds:0xc0022fd8,0xc0010830
c0010e98:	c7 05 dc 2f 02 c0 65 08 01 c0 	mov    DWORD PTR ds:0xc0022fdc,0xc0010865
c0010ea2:	c7 05 e0 2f 02 c0 c9 08 01 c0 	mov    DWORD PTR ds:0xc0022fe0,0xc00108c9
c0010eac:	c7 05 e4 2f 02 c0 fe 01 01 c0 	mov    DWORD PTR ds:0xc0022fe4,0xc00101fe
c0010eb6:	c7 05 e8 2f 02 c0 2d 09 01 c0 	mov    DWORD PTR ds:0xc0022fe8,0xc001092d
c0010ec0:	c7 05 ec 2f 02 c0 7d 03 01 c0 	mov    DWORD PTR ds:0xc0022fec,0xc001037d
c0010eca:	c7 05 f0 2f 02 c0 0e 02 01 c0 	mov    DWORD PTR ds:0xc0022ff0,0xc001020e
c0010ed4:	c7 05 f4 2f 02 c0 3f 04 01 c0 	mov    DWORD PTR ds:0xc0022ff4,0xc001043f
c0010ede:	c7 05 f8 2f 02 c0 79 09 01 c0 	mov    DWORD PTR ds:0xc0022ff8,0xc0010979
c0010ee8:	c7 05 fc 2f 02 c0 ce 05 01 c0 	mov    DWORD PTR ds:0xc0022ffc,0xc00105ce
c0010ef2:	c7 05 00 30 02 c0 a2 09 01 c0 	mov    DWORD PTR ds:0xc0023000,0xc00109a2
c0010efc:	c7 05 04 30 02 c0 0a 0a 01 c0 	mov    DWORD PTR ds:0xc0023004,0xc0010a0a
c0010f06:	c7 05 0c 30 02 c0 16 02 01 c0 	mov    DWORD PTR ds:0xc002300c,0xc0010216
c0010f10:	c7 05 10 30 02 c0 80 02 01 c0 	mov    DWORD PTR ds:0xc0023010,0xc0010280
c0010f1a:	c7 05 14 30 02 c0 ca 02 01 c0 	mov    DWORD PTR ds:0xc0023014,0xc00102ca
c0010f24:	c7 05 18 30 02 c0 b7 0a 01 c0 	mov    DWORD PTR ds:0xc0023018,0xc0010ab7
c0010f2e:	c7 05 1c 30 02 c0 4b 08 01 c0 	mov    DWORD PTR ds:0xc002301c,0xc001084b
c0010f38:	c7 05 20 30 02 c0 1f 03 01 c0 	mov    DWORD PTR ds:0xc0023020,0xc001031f
c0010f42:	c7 05 24 30 02 c0 29 0b 01 c0 	mov    DWORD PTR ds:0xc0023024,0xc0010b29
c0010f4c:	c7 05 28 30 02 c0 6e 0b 01 c0 	mov    DWORD PTR ds:0xc0023028,0xc0010b6e
c0010f56:	c7 05 2c 30 02 c0 9b fe 00 c0 	mov    DWORD PTR ds:0xc002302c,0xc000fe9b
c0010f60:	c7 05 30 30 02 c0 1c 00 01 c0 	mov    DWORD PTR ds:0xc0023030,0xc001001c
c0010f6a:	c7 05 34 30 02 c0 b1 00 01 c0 	mov    DWORD PTR ds:0xc0023034,0xc00100b1
c0010f74:	c7 05 38 30 02 c0 86 fd 00 c0 	mov    DWORD PTR ds:0xc0023038,0xc000fd86
c0010f7e:	c7 05 3c 30 02 c0 63 01 01 c0 	mov    DWORD PTR ds:0xc002303c,0xc0010163
c0010f88:	c7 05 40 30 02 c0 ff fd 00 c0 	mov    DWORD PTR ds:0xc0023040,0xc000fdff
c0010f92:	c7 05 44 30 02 c0 19 fe 00 c0 	mov    DWORD PTR ds:0xc0023044,0xc000fe19
c0010f9c:	c3                   	ret    

c0010f9d <Sys::systemCall(regs*, void*)>:
c0010f9d:	53                   	push   ebx
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fa8:	83 f8 7f             	cmp    eax,0x7f
c0010fab:	77 16                	ja     c0010fc3 <Sys::systemCall(regs*, void*)+0x26>
c0010fad:	8b 14 85 80 2f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd080]
c0010fb4:	85 d2                	test   edx,edx
c0010fb6:	74 0b                	je     c0010fc3 <Sys::systemCall(regs*, void*)+0x26>
c0010fb8:	83 ec 0c             	sub    esp,0xc
c0010fbb:	53                   	push   ebx
c0010fbc:	ff d2                	call   edx
c0010fbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010fc1:	eb 0d                	jmp    c0010fd0 <Sys::systemCall(regs*, void*)+0x33>
c0010fc3:	52                   	push   edx
c0010fc4:	52                   	push   edx
c0010fc5:	50                   	push   eax
c0010fc6:	68 61 ee 01 c0       	push   0xc001ee61
c0010fcb:	e8 0f 88 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010fd8:	31 d2                	xor    edx,edx
c0010fda:	83 c4 08             	add    esp,0x8
c0010fdd:	5b                   	pop    ebx
c0010fde:	c3                   	ret    

c0010fdf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010fdf:	55                   	push   ebp
c0010fe0:	57                   	push   edi
c0010fe1:	56                   	push   esi
c0010fe2:	53                   	push   ebx
c0010fe3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010fe9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010ff1:	0f 95 c2             	setne  dl
c0010ff4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010ffc:	0f 94 c0             	sete   al
c0010fff:	84 c2                	test   dl,al
c0011001:	74 34                	je     c0011037 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011003:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001100e:	74 27                	je     c0011037 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011010:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011017:	05 00 10 00 00       	add    eax,0x1000
c001101c:	89 c1                	mov    ecx,eax
c001101e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011023:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011029:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011030:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011037:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011047:	6a 01                	push   0x1
c0011049:	e8 2f 75 ff ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	89 c3                	mov    ebx,eax
c0011053:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011059:	0f 86 25 01 00 00    	jbe    c0011184 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001105f:	c1 ee 0c             	shr    esi,0xc
c0011062:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011069:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001106d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011075:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001107c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011080:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011087:	29 ef                	sub    edi,ebp
c0011089:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001108d:	0f 83 f8 00 00 00    	jae    c001118b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011093:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011099:	76 05                	jbe    c00110a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001109b:	bf 00 10 00 00       	mov    edi,0x1000
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	31 d2                	xor    edx,edx
c00110a5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00110ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00110ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00110b2:	50                   	push   eax
c00110b3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00110b7:	56                   	push   esi
c00110b8:	52                   	push   edx
c00110b9:	57                   	push   edi
c00110ba:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00110c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00110c4:	83 c4 20             	add    esp,0x20
c00110c7:	85 c0                	test   eax,eax
c00110c9:	75 06                	jne    c00110d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00110cb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00110cf:	74 13                	je     c00110e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00110d1:	83 ec 0c             	sub    esp,0xc
c00110d4:	53                   	push   ebx
c00110d5:	e8 97 77 ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c00110da:	83 c4 10             	add    esp,0x10
c00110dd:	31 c0                	xor    eax,eax
c00110df:	e9 7c 01 00 00       	jmp    c0011260 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00110e4:	fa                   	cli    
c00110e5:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00110eb:	e8 2c 5d ff ff       	call   c0006e1c <Phys::allocatePage()>
c00110f0:	6a 07                	push   0x7
c00110f2:	89 c7                	mov    edi,eax
c00110f4:	53                   	push   ebx
c00110f5:	50                   	push   eax
c00110f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110fe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011104:	e8 c7 7a ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011109:	83 c4 0c             	add    esp,0xc
c001110c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011113:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011119:	6a 00                	push   0x0
c001111b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011120:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011123:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011129:	e8 14 79 ff ff       	call   c0008a42 <VAS::mapOtherVASIn(bool, VAS*)>
c001112e:	58                   	pop    eax
c001112f:	5a                   	pop    edx
c0011130:	68 07 0c 00 00       	push   0xc07
c0011135:	55                   	push   ebp
c0011136:	57                   	push   edi
c0011137:	89 df                	mov    edi,ebx
c0011139:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011140:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011146:	6a 00                	push   0x0
c0011148:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011150:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011156:	e8 33 7e ff ff       	call   c0008f8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001115b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011160:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011162:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0011167:	83 c4 20             	add    esp,0x20
c001116a:	48                   	dec    eax
c001116b:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0011170:	85 c0                	test   eax,eax
c0011172:	75 01                	jne    c0011175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011174:	fb                   	sti    
c0011175:	81 c5 00 10 00 00    	add    ebp,0x1000
c001117b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001117f:	e9 f1 fe ff ff       	jmp    c0011075 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011184:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001118b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011192:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011198:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001119e:	0f 86 ae 00 00 00    	jbe    c0011252 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00111a4:	fa                   	cli    
c00111a5:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00111ab:	c1 ee 0c             	shr    esi,0xc
c00111ae:	51                   	push   ecx
c00111af:	31 ff                	xor    edi,edi
c00111b1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00111b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111be:	6a 00                	push   0x0
c00111c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111ce:	e8 6f 78 ff ff       	call   c0008a42 <VAS::mapOtherVASIn(bool, VAS*)>
c00111d3:	83 c4 10             	add    esp,0x10
c00111d6:	e8 41 5c ff ff       	call   c0006e1c <Phys::allocatePage()>
c00111db:	47                   	inc    edi
c00111dc:	6a 07                	push   0x7
c00111de:	53                   	push   ebx
c00111df:	50                   	push   eax
c00111e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00111e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111ea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00111ed:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00111f3:	e8 d8 79 ff ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00111f8:	58                   	pop    eax
c00111f9:	5a                   	pop    edx
c00111fa:	68 07 0c 00 00       	push   0xc07
c00111ff:	55                   	push   ebp
c0011200:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001120a:	50                   	push   eax
c001120b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011212:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011218:	6a 00                	push   0x0
c001121a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011222:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011228:	e8 61 7d ff ff       	call   c0008f8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001122d:	83 c4 1c             	add    esp,0x1c
c0011230:	68 00 10 00 00       	push   0x1000
c0011235:	6a 00                	push   0x0
c0011237:	53                   	push   ebx
c0011238:	e8 6b f2 fe ff       	call   c00004a8 <memset>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	39 fe                	cmp    esi,edi
c0011242:	77 92                	ja     c00111d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011244:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0011249:	48                   	dec    eax
c001124a:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c001124f:	75 01                	jne    c0011252 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011251:	fb                   	sti    
c0011252:	83 ec 0c             	sub    esp,0xc
c0011255:	53                   	push   ebx
c0011256:	e8 16 76 ff ff       	call   c0008871 <Virt::freeKernelVirtualPages(unsigned long)>
c001125b:	83 c4 10             	add    esp,0x10
c001125e:	b0 01                	mov    al,0x1
c0011260:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011266:	5b                   	pop    ebx
c0011267:	5e                   	pop    esi
c0011268:	5f                   	pop    edi
c0011269:	5d                   	pop    ebp
c001126a:	c3                   	ret    

c001126b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001126b:	55                   	push   ebp
c001126c:	57                   	push   edi
c001126d:	56                   	push   esi
c001126e:	53                   	push   ebx
c001126f:	83 ec 48             	sub    esp,0x48
c0011272:	68 14 01 00 00       	push   0x114
c0011277:	e8 d9 57 ff ff       	call   c0006a55 <malloc>
c001127c:	83 c4 0c             	add    esp,0xc
c001127f:	89 c6                	mov    esi,eax
c0011281:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011285:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011289:	50                   	push   eax
c001128a:	e8 bb 8a ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c001128f:	58                   	pop    eax
c0011290:	5a                   	pop    edx
c0011291:	6a 01                	push   0x1
c0011293:	56                   	push   esi
c0011294:	e8 6b 8b ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	85 c0                	test   eax,eax
c001129e:	0f 85 47 01 00 00    	jne    c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00112ac:	83 ec 0c             	sub    esp,0xc
c00112af:	6a 34                	push   0x34
c00112b1:	e8 9f 57 ff ff       	call   c0006a55 <malloc>
c00112b6:	89 c3                	mov    ebx,eax
c00112b8:	58                   	pop    eax
c00112b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00112bb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00112bf:	57                   	push   edi
c00112c0:	53                   	push   ebx
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 34                	push   0x34
c00112c5:	56                   	push   esi
c00112c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	85 c0                	test   eax,eax
c00112ce:	0f 85 17 01 00 00    	jne    c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112d4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00112da:	0f 85 0b 01 00 00    	jne    c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112e3:	85 c0                	test   eax,eax
c00112e5:	0f 84 00 01 00 00    	je     c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112eb:	31 d2                	xor    edx,edx
c00112ed:	55                   	push   ebp
c00112ee:	52                   	push   edx
c00112ef:	50                   	push   eax
c00112f0:	56                   	push   esi
c00112f1:	e8 cc 8b ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	85 c0                	test   eax,eax
c00112fb:	0f 85 ea 00 00 00    	jne    c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011307:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001130b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001130f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011313:	0f af c2             	imul   eax,edx
c0011316:	50                   	push   eax
c0011317:	e8 39 57 ff ff       	call   c0006a55 <malloc>
c001131c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001131e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011322:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011329:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001132d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011331:	0f af c2             	imul   eax,edx
c0011334:	99                   	cdq    
c0011335:	52                   	push   edx
c0011336:	50                   	push   eax
c0011337:	56                   	push   esi
c0011338:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001133b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001133e:	83 c4 20             	add    esp,0x20
c0011341:	85 c0                	test   eax,eax
c0011343:	0f 84 a2 00 00 00    	je     c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011349:	31 d2                	xor    edx,edx
c001134b:	51                   	push   ecx
c001134c:	52                   	push   edx
c001134d:	50                   	push   eax
c001134e:	56                   	push   esi
c001134f:	e8 6e 8b ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	85 c0                	test   eax,eax
c0011359:	0f 85 8c 00 00 00    	jne    c00113eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001135f:	83 ec 0c             	sub    esp,0xc
c0011362:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011366:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001136a:	31 ed                	xor    ebp,ebp
c001136c:	0f af c2             	imul   eax,edx
c001136f:	50                   	push   eax
c0011370:	e8 e0 56 ff ff       	call   c0006a55 <malloc>
c0011375:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011377:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001137b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001137e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011382:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011386:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001138a:	0f af c2             	imul   eax,edx
c001138d:	99                   	cdq    
c001138e:	52                   	push   edx
c001138f:	50                   	push   eax
c0011390:	56                   	push   esi
c0011391:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011394:	83 c4 20             	add    esp,0x20
c0011397:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001139f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00113a3:	0f 86 80 00 00 00    	jbe    c0011429 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00113a9:	0f b7 fd             	movzx  edi,bp
c00113ac:	c1 e7 05             	shl    edi,0x5
c00113af:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00113b3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00113b6:	75 6b                	jne    c0011423 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00113b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00113bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00113bf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00113c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113c6:	52                   	push   edx
c00113c7:	31 d2                	xor    edx,edx
c00113c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00113cc:	52                   	push   edx
c00113cd:	50                   	push   eax
c00113ce:	56                   	push   esi
c00113cf:	e8 ee 8a ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	85 c0                	test   eax,eax
c00113d9:	74 17                	je     c00113f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	68 75 ee 01 c0       	push   0xc001ee75
c00113e3:	e8 f7 83 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	31 c0                	xor    eax,eax
c00113ed:	e9 87 00 00 00       	jmp    c0011479 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00113f8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00113fb:	50                   	push   eax
c00113fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011404:	56                   	push   esi
c0011405:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011409:	e8 d1 fb ff ff       	call   c0010fdf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001140e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011412:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011416:	83 c4 20             	add    esp,0x20
c0011419:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001141d:	73 04                	jae    c0011423 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001141f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011423:	45                   	inc    ebp
c0011424:	e9 76 ff ff ff       	jmp    c001139f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011429:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001142d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011431:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011435:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001143b:	83 ec 0c             	sub    esp,0xc
c001143e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011444:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011449:	05 00 10 00 00       	add    eax,0x1000
c001144e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011455:	e8 0b 56 ff ff       	call   c0006a65 <free>
c001145a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001145d:	e8 03 56 ff ff       	call   c0006a65 <free>
c0011462:	58                   	pop    eax
c0011463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011467:	e8 f9 55 ff ff       	call   c0006a65 <free>
c001146c:	89 34 24             	mov    DWORD PTR [esp],esi
c001146f:	e8 ee 89 ff ff       	call   c0009e62 <File::close()>
c0011474:	83 c4 10             	add    esp,0x10
c0011477:	b0 01                	mov    al,0x1
c0011479:	83 c4 3c             	add    esp,0x3c
c001147c:	5b                   	pop    ebx
c001147d:	5e                   	pop    esi
c001147e:	5f                   	pop    edi
c001147f:	5d                   	pop    ebp
c0011480:	c3                   	ret    

c0011481 <Thr::runtimeReferenceHelper()>:
c0011481:	83 ec 18             	sub    esp,0x18
c0011484:	68 7d ee 01 c0       	push   0xc001ee7d
c0011489:	e8 51 83 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001148e:	fa                   	cli    
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	eb fe                	jmp    c0011492 <Thr::runtimeReferenceHelper()+0x11>

c0011494 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011494:	57                   	push   edi
c0011495:	56                   	push   esi
c0011496:	53                   	push   ebx
c0011497:	31 db                	xor    ebx,ebx
c0011499:	39 1d 20 39 02 c0    	cmp    DWORD PTR ds:0xc0023920,ebx
c001149f:	7e 3c                	jle    c00114dd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00114a1:	8b 34 9d a0 38 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc760]
c00114a8:	31 ff                	xor    edi,edi
c00114aa:	39 3c 9d a0 37 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc860],edi
c00114b1:	7e 27                	jle    c00114da <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00114b3:	50                   	push   eax
c00114b4:	50                   	push   eax
c00114b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00114bb:	03 04 9d 20 38 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc7e0]
c00114c2:	50                   	push   eax
c00114c3:	e8 28 f1 fe ff       	call   c00005f0 <strcmp>
c00114c8:	83 c4 10             	add    esp,0x10
c00114cb:	85 c0                	test   eax,eax
c00114cd:	75 05                	jne    c00114d4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00114cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00114d2:	eb 0b                	jmp    c00114df <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00114d4:	83 c6 10             	add    esi,0x10
c00114d7:	47                   	inc    edi
c00114d8:	eb d0                	jmp    c00114aa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00114da:	43                   	inc    ebx
c00114db:	eb bc                	jmp    c0011499 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00114dd:	31 c0                	xor    eax,eax
c00114df:	5b                   	pop    ebx
c00114e0:	5e                   	pop    esi
c00114e1:	5f                   	pop    edi
c00114e2:	c3                   	ret    

c00114e3 <Thr::loadKernelSymbolTable(char const*)>:
c00114e3:	55                   	push   ebp
c00114e4:	57                   	push   edi
c00114e5:	56                   	push   esi
c00114e6:	53                   	push   ebx
c00114e7:	83 ec 68             	sub    esp,0x68
c00114ea:	8b 35 70 39 02 c0    	mov    esi,DWORD PTR ds:0xc0023970
c00114f0:	68 14 01 00 00       	push   0x114
c00114f5:	e8 5b 55 ff ff       	call   c0006a55 <malloc>
c00114fa:	83 c4 0c             	add    esp,0xc
c00114fd:	89 c3                	mov    ebx,eax
c00114ff:	56                   	push   esi
c0011500:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011504:	50                   	push   eax
c0011505:	e8 40 88 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c001150a:	5e                   	pop    esi
c001150b:	5f                   	pop    edi
c001150c:	6a 01                	push   0x1
c001150e:	53                   	push   ebx
c001150f:	e8 f0 88 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0011514:	83 c4 10             	add    esp,0x10
c0011517:	85 c0                	test   eax,eax
c0011519:	74 0a                	je     c0011525 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	68 9f ee 01 c0       	push   0xc001ee9f
c0011523:	eb 34                	jmp    c0011559 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011525:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001152d:	83 ec 0c             	sub    esp,0xc
c0011530:	6a 34                	push   0x34
c0011532:	e8 1e 55 ff ff       	call   c0006a55 <malloc>
c0011537:	59                   	pop    ecx
c0011538:	89 c7                	mov    edi,eax
c001153a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001153e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011540:	56                   	push   esi
c0011541:	57                   	push   edi
c0011542:	6a 00                	push   0x0
c0011544:	6a 34                	push   0x34
c0011546:	53                   	push   ebx
c0011547:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001154a:	83 c4 20             	add    esp,0x20
c001154d:	85 c0                	test   eax,eax
c001154f:	74 17                	je     c0011568 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011551:	83 ec 0c             	sub    esp,0xc
c0011554:	68 b6 ee 01 c0       	push   0xc001eeb6
c0011559:	e8 57 df ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001155e:	83 c4 10             	add    esp,0x10
c0011561:	31 c0                	xor    eax,eax
c0011563:	e9 31 02 00 00       	jmp    c0011799 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011568:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001156e:	75 e1                	jne    c0011551 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011570:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011573:	85 c0                	test   eax,eax
c0011575:	74 da                	je     c0011551 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011577:	52                   	push   edx
c0011578:	31 d2                	xor    edx,edx
c001157a:	52                   	push   edx
c001157b:	50                   	push   eax
c001157c:	53                   	push   ebx
c001157d:	e8 40 89 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	85 c0                	test   eax,eax
c0011587:	75 c8                	jne    c0011551 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011589:	83 ec 0c             	sub    esp,0xc
c001158c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011590:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011594:	31 ed                	xor    ebp,ebp
c0011596:	0f af c2             	imul   eax,edx
c0011599:	50                   	push   eax
c001159a:	e8 b6 54 ff ff       	call   c0006a55 <malloc>
c001159f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00115a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00115a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00115b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00115b4:	0f af c2             	imul   eax,edx
c00115b7:	99                   	cdq    
c00115b8:	52                   	push   edx
c00115b9:	50                   	push   eax
c00115ba:	53                   	push   ebx
c00115bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00115be:	83 c4 20             	add    esp,0x20
c00115c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00115c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00115d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00115d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00115e1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00115e5:	0f 86 aa 00 00 00    	jbe    c0011695 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00115eb:	0f b7 f5             	movzx  esi,bp
c00115ee:	6b f6 28             	imul   esi,esi,0x28
c00115f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00115f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	50                   	push   eax
c00115fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011601:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011605:	8b 16                	mov    edx,DWORD PTR [esi]
c0011607:	6b c0 28             	imul   eax,eax,0x28
c001160a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001160e:	89 d0                	mov    eax,edx
c0011610:	31 d2                	xor    edx,edx
c0011612:	52                   	push   edx
c0011613:	50                   	push   eax
c0011614:	53                   	push   ebx
c0011615:	e8 a8 88 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c001161a:	83 c4 0c             	add    esp,0xc
c001161d:	6a 20                	push   0x20
c001161f:	6a 00                	push   0x0
c0011621:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011625:	52                   	push   edx
c0011626:	e8 7d ee fe ff       	call   c00004a8 <memset>
c001162b:	58                   	pop    eax
c001162c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001162e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011632:	51                   	push   ecx
c0011633:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011637:	52                   	push   edx
c0011638:	6a 00                	push   0x0
c001163a:	6a 1f                	push   0x1f
c001163c:	53                   	push   ebx
c001163d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011640:	83 c4 18             	add    esp,0x18
c0011643:	68 cd ee 01 c0       	push   0xc001eecd
c0011648:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001164c:	52                   	push   edx
c001164d:	e8 9e ef fe ff       	call   c00005f0 <strcmp>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	85 c0                	test   eax,eax
c0011657:	75 0f                	jne    c0011668 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0011659:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001165c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011668:	50                   	push   eax
c0011669:	50                   	push   eax
c001166a:	68 d5 ee 01 c0       	push   0xc001eed5
c001166f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011673:	50                   	push   eax
c0011674:	e8 77 ef fe ff       	call   c00005f0 <strcmp>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	85 c0                	test   eax,eax
c001167e:	75 0f                	jne    c001168f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0011680:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011683:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011687:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001168b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001168f:	45                   	inc    ebp
c0011690:	e9 4c ff ff ff       	jmp    c00115e1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0011695:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001169a:	75 10                	jne    c00116ac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	68 dd ee 01 c0       	push   0xc001eedd
c00116a4:	e8 0c de ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00116b1:	75 10                	jne    c00116c3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	68 dd ee 01 c0       	push   0xc001eedd
c00116bb:	e8 f5 dd ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	31 d2                	xor    edx,edx
c00116c5:	50                   	push   eax
c00116c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ca:	52                   	push   edx
c00116cb:	50                   	push   eax
c00116cc:	53                   	push   ebx
c00116cd:	e8 f0 87 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c00116d2:	5a                   	pop    edx
c00116d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116d7:	e8 79 53 ff ff       	call   c0006a55 <malloc>
c00116dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116e4:	31 c9                	xor    ecx,ecx
c00116e6:	5e                   	pop    esi
c00116e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00116ed:	55                   	push   ebp
c00116ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f2:	51                   	push   ecx
c00116f3:	52                   	push   edx
c00116f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00116f8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00116fc:	53                   	push   ebx
c00116fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011700:	83 c4 14             	add    esp,0x14
c0011703:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011707:	e8 49 53 ff ff       	call   c0006a55 <malloc>
c001170c:	89 c6                	mov    esi,eax
c001170e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011710:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011713:	56                   	push   esi
c0011714:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011718:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001171c:	51                   	push   ecx
c001171d:	52                   	push   edx
c001171e:	53                   	push   ebx
c001171f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011722:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011726:	8b 15 20 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023920
c001172c:	83 c4 1c             	add    esp,0x1c
c001172f:	c1 e8 04             	shr    eax,0x4
c0011732:	89 04 95 a0 37 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc860],eax
c0011739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001173d:	31 d2                	xor    edx,edx
c001173f:	52                   	push   edx
c0011740:	50                   	push   eax
c0011741:	53                   	push   ebx
c0011742:	e8 7b 87 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011747:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011749:	31 d2                	xor    edx,edx
c001174b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001174e:	56                   	push   esi
c001174f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011753:	52                   	push   edx
c0011754:	50                   	push   eax
c0011755:	53                   	push   ebx
c0011756:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011759:	83 c4 14             	add    esp,0x14
c001175c:	53                   	push   ebx
c001175d:	e8 00 87 ff ff       	call   c0009e62 <File::close()>
c0011762:	5d                   	pop    ebp
c0011763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011767:	e8 f9 52 ff ff       	call   c0006a65 <free>
c001176c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001176f:	e8 f1 52 ff ff       	call   c0006a65 <free>
c0011774:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c0011779:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001177d:	8d 50 01             	lea    edx,[eax+0x1]
c0011780:	89 0c 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],ecx
c0011787:	89 34 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],esi
c001178e:	89 15 20 39 02 c0    	mov    DWORD PTR ds:0xc0023920,edx
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	b0 01                	mov    al,0x1
c0011799:	83 c4 5c             	add    esp,0x5c
c001179c:	5b                   	pop    ebx
c001179d:	5e                   	pop    esi
c001179e:	5f                   	pop    edi
c001179f:	5d                   	pop    ebp
c00117a0:	c3                   	ret    

c00117a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00117a1:	55                   	push   ebp
c00117a2:	57                   	push   edi
c00117a3:	56                   	push   esi
c00117a4:	53                   	push   ebx
c00117a5:	81 ec 68 03 00 00    	sub    esp,0x368
c00117ab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00117b2:	8b 1d 70 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023970
c00117b8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00117bc:	68 14 01 00 00       	push   0x114
c00117c1:	e8 8f 52 ff ff       	call   c0006a55 <malloc>
c00117c6:	83 c4 0c             	add    esp,0xc
c00117c9:	89 c5                	mov    ebp,eax
c00117cb:	53                   	push   ebx
c00117cc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00117d3:	50                   	push   eax
c00117d4:	e8 71 85 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c00117d9:	5e                   	pop    esi
c00117da:	5f                   	pop    edi
c00117db:	6a 01                	push   0x1
c00117dd:	55                   	push   ebp
c00117de:	e8 21 86 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	85 c0                	test   eax,eax
c00117e8:	0f 85 a7 06 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00117f6:	83 ec 0c             	sub    esp,0xc
c00117f9:	6a 34                	push   0x34
c00117fb:	e8 55 52 ff ff       	call   c0006a55 <malloc>
c0011800:	5b                   	pop    ebx
c0011801:	89 c7                	mov    edi,eax
c0011803:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011807:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001180a:	53                   	push   ebx
c001180b:	57                   	push   edi
c001180c:	6a 00                	push   0x0
c001180e:	6a 34                	push   0x34
c0011810:	55                   	push   ebp
c0011811:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011814:	83 c4 20             	add    esp,0x20
c0011817:	85 c0                	test   eax,eax
c0011819:	0f 85 76 06 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001181f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011825:	0f 85 6a 06 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001182b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001182e:	85 c0                	test   eax,eax
c0011830:	0f 84 5f 06 00 00    	je     c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011836:	31 d2                	xor    edx,edx
c0011838:	51                   	push   ecx
c0011839:	52                   	push   edx
c001183a:	50                   	push   eax
c001183b:	55                   	push   ebp
c001183c:	e8 81 86 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	85 c0                	test   eax,eax
c0011846:	0f 85 49 06 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011852:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011856:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001185a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001185e:	0f af c2             	imul   eax,edx
c0011861:	50                   	push   eax
c0011862:	e8 ee 51 ff ff       	call   c0006a55 <malloc>
c0011867:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001186a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001186e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011871:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011875:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011879:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001187d:	0f af c2             	imul   eax,edx
c0011880:	99                   	cdq    
c0011881:	52                   	push   edx
c0011882:	50                   	push   eax
c0011883:	55                   	push   ebp
c0011884:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011887:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001188a:	83 c4 20             	add    esp,0x20
c001188d:	85 c0                	test   eax,eax
c001188f:	0f 84 00 06 00 00    	je     c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011895:	52                   	push   edx
c0011896:	31 d2                	xor    edx,edx
c0011898:	52                   	push   edx
c0011899:	50                   	push   eax
c001189a:	55                   	push   ebp
c001189b:	e8 22 86 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	85 c0                	test   eax,eax
c00118a5:	0f 85 ea 05 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00118ab:	83 ec 0c             	sub    esp,0xc
c00118ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00118b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00118b6:	31 f6                	xor    esi,esi
c00118b8:	0f af c2             	imul   eax,edx
c00118bb:	50                   	push   eax
c00118bc:	e8 94 51 ff ff       	call   c0006a55 <malloc>
c00118c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00118c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118cf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00118d3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00118d7:	0f af c2             	imul   eax,edx
c00118da:	99                   	cdq    
c00118db:	52                   	push   edx
c00118dc:	50                   	push   eax
c00118dd:	55                   	push   ebp
c00118de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00118e1:	83 c4 20             	add    esp,0x20
c00118e4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00118e8:	0f 86 8a 00 00 00    	jbe    c0011978 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00118ee:	0f b7 de             	movzx  ebx,si
c00118f1:	c1 e3 05             	shl    ebx,0x5
c00118f4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00118f8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00118fb:	75 75                	jne    c0011972 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00118fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011900:	31 d2                	xor    edx,edx
c0011902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011906:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001190d:	50                   	push   eax
c001190e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011911:	52                   	push   edx
c0011912:	50                   	push   eax
c0011913:	55                   	push   ebp
c0011914:	e8 a9 85 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 85 71 05 00 00    	jne    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011924:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001192b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001192e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011932:	31 d2                	xor    edx,edx
c0011934:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001193f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011946:	50                   	push   eax
c0011947:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001194b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194f:	52                   	push   edx
c0011950:	50                   	push   eax
c0011951:	55                   	push   ebp
c0011952:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011955:	83 c4 1c             	add    esp,0x1c
c0011958:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001195b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001195e:	50                   	push   eax
c001195f:	6a 00                	push   0x0
c0011961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011965:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0011969:	50                   	push   eax
c001196a:	e8 39 eb fe ff       	call   c00004a8 <memset>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	46                   	inc    esi
c0011973:	e9 6c ff ff ff       	jmp    c00118e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0011978:	53                   	push   ebx
c0011979:	31 db                	xor    ebx,ebx
c001197b:	68 00 01 00 00       	push   0x100
c0011980:	6a 00                	push   0x0
c0011982:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0011986:	50                   	push   eax
c0011987:	e8 1c eb fe ff       	call   c00004a8 <memset>
c001198c:	83 c4 0c             	add    esp,0xc
c001198f:	68 00 01 00 00       	push   0x100
c0011994:	6a 00                	push   0x0
c0011996:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001199d:	50                   	push   eax
c001199e:	e8 05 eb fe ff       	call   c00004a8 <memset>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00119ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00119b6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00119be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00119c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00119ce:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00119d2:	0f 86 30 01 00 00    	jbe    c0011b08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00119d8:	0f b7 f3             	movzx  esi,bx
c00119db:	6b f6 28             	imul   esi,esi,0x28
c00119de:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00119e2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00119e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119e9:	52                   	push   edx
c00119ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00119ee:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00119f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00119f4:	6b d2 28             	imul   edx,edx,0x28
c00119f7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00119fb:	31 d2                	xor    edx,edx
c00119fd:	52                   	push   edx
c00119fe:	50                   	push   eax
c00119ff:	55                   	push   ebp
c0011a00:	e8 bd 84 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011a05:	83 c4 0c             	add    esp,0xc
c0011a08:	6a 20                	push   0x20
c0011a0a:	6a 00                	push   0x0
c0011a0c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011a13:	51                   	push   ecx
c0011a14:	e8 8f ea fe ff       	call   c00004a8 <memset>
c0011a19:	59                   	pop    ecx
c0011a1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011a1d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011a21:	52                   	push   edx
c0011a22:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011a29:	51                   	push   ecx
c0011a2a:	6a 00                	push   0x0
c0011a2c:	6a 1f                	push   0x1f
c0011a2e:	55                   	push   ebp
c0011a2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011a32:	83 c4 1c             	add    esp,0x1c
c0011a35:	6a 09                	push   0x9
c0011a37:	68 f7 ee 01 c0       	push   0xc001eef7
c0011a3c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011a43:	51                   	push   ecx
c0011a44:	e8 5b e9 fe ff       	call   c00003a4 <memcmp>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	85 c0                	test   eax,eax
c0011a4e:	75 21                	jne    c0011a71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a58:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011a5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a60:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a63:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011a6a:	89 d0                	mov    eax,edx
c0011a6c:	40                   	inc    eax
c0011a6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a71:	50                   	push   eax
c0011a72:	6a 09                	push   0x9
c0011a74:	68 01 ef 01 c0       	push   0xc001ef01
c0011a79:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a80:	50                   	push   eax
c0011a81:	e8 1e e9 fe ff       	call   c00003a4 <memcmp>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	85 c0                	test   eax,eax
c0011a8b:	75 21                	jne    c0011aae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a95:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011a99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011aa0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011aa7:	89 d0                	mov    eax,edx
c0011aa9:	40                   	inc    eax
c0011aaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011aae:	50                   	push   eax
c0011aaf:	50                   	push   eax
c0011ab0:	68 cd ee 01 c0       	push   0xc001eecd
c0011ab5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011abc:	50                   	push   eax
c0011abd:	e8 2e eb fe ff       	call   c00005f0 <strcmp>
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	85 c0                	test   eax,eax
c0011ac7:	75 0f                	jne    c0011ad8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011ac9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ad8:	50                   	push   eax
c0011ad9:	50                   	push   eax
c0011ada:	68 d5 ee 01 c0       	push   0xc001eed5
c0011adf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ae6:	50                   	push   eax
c0011ae7:	e8 04 eb fe ff       	call   c00005f0 <strcmp>
c0011aec:	83 c4 10             	add    esp,0x10
c0011aef:	85 c0                	test   eax,eax
c0011af1:	75 0f                	jne    c0011b02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011af3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011af6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011afa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011afe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b02:	43                   	inc    ebx
c0011b03:	e9 c6 fe ff ff       	jmp    c00119ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011b08:	31 d2                	xor    edx,edx
c0011b0a:	50                   	push   eax
c0011b0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b0f:	52                   	push   edx
c0011b10:	50                   	push   eax
c0011b11:	55                   	push   ebp
c0011b12:	e8 ab 83 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011b17:	58                   	pop    eax
c0011b18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011b1c:	e8 34 4f ff ff       	call   c0006a55 <malloc>
c0011b21:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b24:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b28:	31 d2                	xor    edx,edx
c0011b2a:	58                   	pop    eax
c0011b2b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011b2f:	53                   	push   ebx
c0011b30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011b34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b38:	52                   	push   edx
c0011b39:	50                   	push   eax
c0011b3a:	55                   	push   ebp
c0011b3b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b3e:	83 c4 14             	add    esp,0x14
c0011b41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b45:	e8 0b 4f ff ff       	call   c0006a55 <malloc>
c0011b4a:	31 d2                	xor    edx,edx
c0011b4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011b50:	83 c4 0c             	add    esp,0xc
c0011b53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b57:	52                   	push   edx
c0011b58:	50                   	push   eax
c0011b59:	55                   	push   ebp
c0011b5a:	e8 63 83 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011b5f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b62:	31 d2                	xor    edx,edx
c0011b64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b67:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011b6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b6f:	52                   	push   edx
c0011b70:	50                   	push   eax
c0011b71:	55                   	push   ebp
c0011b72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b75:	83 c4 20             	add    esp,0x20
c0011b78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011b80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011b84:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011b88:	0f 84 0b 03 00 00    	je     c0011e99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011b8e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011b95:	31 d2                	xor    edx,edx
c0011b97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b9b:	c1 e8 03             	shr    eax,0x3
c0011b9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011ba2:	51                   	push   ecx
c0011ba3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ba7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011bab:	52                   	push   edx
c0011bac:	50                   	push   eax
c0011bad:	55                   	push   ebp
c0011bae:	e8 0f 83 ff ff       	call   c0009ec2 <File::seek(unsigned long long)>
c0011bb3:	5b                   	pop    ebx
c0011bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bb8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011bbf:	e8 91 4e ff ff       	call   c0006a55 <malloc>
c0011bc4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011bc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcb:	31 d2                	xor    edx,edx
c0011bcd:	5e                   	pop    esi
c0011bce:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011bd2:	50                   	push   eax
c0011bd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bdb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011be2:	52                   	push   edx
c0011be3:	50                   	push   eax
c0011be4:	55                   	push   ebp
c0011be5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011be8:	83 c4 20             	add    esp,0x20
c0011beb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011bf3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bf7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011bfb:	0f 8d 7c 02 00 00    	jge    c0011e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011c01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c09:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011c0e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c19:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011c1d:	89 d8                	mov    eax,ebx
c0011c1f:	c1 e8 08             	shr    eax,0x8
c0011c22:	89 c6                	mov    esi,eax
c0011c24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c28:	c1 e6 04             	shl    esi,0x4
c0011c2b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011c2f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011c32:	85 d2                	test   edx,edx
c0011c34:	0f 85 bf 00 00 00    	jne    c0011cf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011c3a:	83 ec 0c             	sub    esp,0xc
c0011c3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c41:	03 06                	add    eax,DWORD PTR [esi]
c0011c43:	50                   	push   eax
c0011c44:	e8 4b f8 ff ff       	call   c0011494 <Thr::getAddressOfKernelSymbol(char const*)>
c0011c49:	83 c4 10             	add    esp,0x10
c0011c4c:	89 c2                	mov    edx,eax
c0011c4e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011c53:	85 c0                	test   eax,eax
c0011c55:	0f 85 9e 00 00 00    	jne    c0011cf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c62:	03 06                	add    eax,DWORD PTR [esi]
c0011c64:	50                   	push   eax
c0011c65:	e8 ae 3d ff ff       	call   c0005a18 <Krnl::resolveCompatibilitySymbol(char*)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	89 c2                	mov    edx,eax
c0011c6f:	85 c0                	test   eax,eax
c0011c71:	0f 85 82 00 00 00    	jne    c0011cf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011c77:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011c7b:	50                   	push   eax
c0011c7c:	50                   	push   eax
c0011c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c81:	03 06                	add    eax,DWORD PTR [esi]
c0011c83:	50                   	push   eax
c0011c84:	68 0b ef 01 c0       	push   0xc001ef0b
c0011c89:	e8 51 7b ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0011c8e:	58                   	pop    eax
c0011c8f:	5a                   	pop    edx
c0011c90:	68 25 ef 01 c0       	push   0xc001ef25
c0011c95:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c9c:	50                   	push   eax
c0011c9d:	e8 c2 e8 fe ff       	call   c0000564 <strcpy>
c0011ca2:	59                   	pop    ecx
c0011ca3:	58                   	pop    eax
c0011ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ca8:	03 06                	add    eax,DWORD PTR [esi]
c0011caa:	50                   	push   eax
c0011cab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011cb2:	50                   	push   eax
c0011cb3:	e8 ec e9 fe ff       	call   c00006a4 <strcat>
c0011cb8:	58                   	pop    eax
c0011cb9:	5a                   	pop    edx
c0011cba:	68 bb ef 01 c0       	push   0xc001efbb
c0011cbf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011cc6:	50                   	push   eax
c0011cc7:	e8 d8 e9 fe ff       	call   c00006a4 <strcat>
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011cd4:	0f 84 5d 01 00 00    	je     c0011e37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ce4:	50                   	push   eax
c0011ce5:	e8 cb d7 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0011cea:	83 c4 10             	add    esp,0x10
c0011ced:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011cf1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011cf5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011cf9:	80 fb 01             	cmp    bl,0x1
c0011cfc:	0f 85 88 00 00 00    	jne    c0011d8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011d02:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011d09:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011d0d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011d11:	01 ce                	add    esi,ecx
c0011d13:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011d19:	0f 94 c0             	sete   al
c0011d1c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011d22:	0f 94 c3             	sete   bl
c0011d25:	09 c3                	or     ebx,eax
c0011d27:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d29:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011d2e:	74 41                	je     c0011d71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011d30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011d33:	84 db                	test   bl,bl
c0011d35:	75 15                	jne    c0011d4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011d37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d3b:	66 83 f8 0c          	cmp    ax,0xc
c0011d3f:	76 05                	jbe    c0011d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011d41:	b8 0c 00 00 00       	mov    eax,0xc
c0011d46:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011d4a:	76 37                	jbe    c0011d83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d4c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011d50:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d55:	0f 84 dc 00 00 00    	je     c0011e37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d5b:	83 ec 0c             	sub    esp,0xc
c0011d5e:	68 3c ef 01 c0       	push   0xc001ef3c
c0011d63:	e8 4d d7 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d6f:	eb 12                	jmp    c0011d83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d71:	01 c1                	add    ecx,eax
c0011d73:	84 db                	test   bl,bl
c0011d75:	75 0c                	jne    c0011d83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d7b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011d7f:	77 02                	ja     c0011d83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d81:	01 d1                	add    ecx,edx
c0011d83:	89 0e                	mov    DWORD PTR [esi],ecx
c0011d85:	e9 ea 00 00 00       	jmp    c0011e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011d8a:	80 fb 02             	cmp    bl,0x2
c0011d8d:	75 7c                	jne    c0011e0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011d8f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011d96:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011d9a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011d9e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011da4:	74 20                	je     c0011dc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011da6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011dac:	74 18                	je     c0011dc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011dae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011db2:	b9 0a 00 00 00       	mov    ecx,0xa
c0011db7:	66 83 f8 0e          	cmp    ax,0xe
c0011dbb:	77 03                	ja     c0011dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011dbd:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011dc0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011dc4:	76 1f                	jbe    c0011de5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011dc6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011dca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011dcf:	74 66                	je     c0011e37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011dd1:	83 ec 0c             	sub    esp,0xc
c0011dd4:	68 58 ef 01 c0       	push   0xc001ef58
c0011dd9:	e8 d7 d6 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011de5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011de7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011dec:	74 13                	je     c0011e01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011dee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011df2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011df9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011dfd:	01 c8                	add    eax,ecx
c0011dff:	eb 04                	jmp    c0011e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011e01:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011e05:	01 c2                	add    edx,eax
c0011e07:	89 16                	mov    DWORD PTR [esi],edx
c0011e09:	eb 69                	jmp    c0011e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011e0b:	0f b6 db             	movzx  ebx,bl
c0011e0e:	50                   	push   eax
c0011e0f:	50                   	push   eax
c0011e10:	53                   	push   ebx
c0011e11:	68 74 ef 01 c0       	push   0xc001ef74
c0011e16:	e8 c4 79 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0011e1b:	83 c4 10             	add    esp,0x10
c0011e1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e23:	74 12                	je     c0011e37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e25:	83 ec 0c             	sub    esp,0xc
c0011e28:	68 7f ef 01 c0       	push   0xc001ef7f
c0011e2d:	e8 83 d6 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	eb 3d                	jmp    c0011e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011e37:	83 ec 0c             	sub    esp,0xc
c0011e3a:	55                   	push   ebp
c0011e3b:	e8 22 80 ff ff       	call   c0009e62 <File::close()>
c0011e40:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e49:	59                   	pop    ecx
c0011e4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e4e:	e8 12 4c ff ff       	call   c0006a65 <free>
c0011e53:	5b                   	pop    ebx
c0011e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e58:	e8 08 4c ff ff       	call   c0006a65 <free>
c0011e5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e60:	e8 00 4c ff ff       	call   c0006a65 <free>
c0011e65:	5e                   	pop    esi
c0011e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e6a:	e8 f6 4b ff ff       	call   c0006a65 <free>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	eb 21                	jmp    c0011e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011e74:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011e78:	e9 76 fd ff ff       	jmp    c0011bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011e7d:	83 ec 0c             	sub    esp,0xc
c0011e80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e84:	e8 dc 4b ff ff       	call   c0006a65 <free>
c0011e89:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	e9 eb fc ff ff       	jmp    c0011b80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011e95:	31 c0                	xor    eax,eax
c0011e97:	eb 33                	jmp    c0011ecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	55                   	push   ebp
c0011e9d:	e8 c0 7f ff ff       	call   c0009e62 <File::close()>
c0011ea2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ea5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011ea8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011eab:	58                   	pop    eax
c0011eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011eb0:	e8 b0 4b ff ff       	call   c0006a65 <free>
c0011eb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011eb8:	e8 a8 4b ff ff       	call   c0006a65 <free>
c0011ebd:	5a                   	pop    edx
c0011ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ec2:	e8 9e 4b ff ff       	call   c0006a65 <free>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	b0 01                	mov    al,0x1
c0011ecc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011ed2:	5b                   	pop    ebx
c0011ed3:	5e                   	pop    esi
c0011ed4:	5f                   	pop    edi
c0011ed5:	5d                   	pop    ebp
c0011ed6:	c3                   	ret    

c0011ed7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011ed7:	56                   	push   esi
c0011ed8:	31 d2                	xor    edx,edx
c0011eda:	53                   	push   ebx
c0011edb:	8b 1d 80 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023180
c0011ee1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ee5:	39 d3                	cmp    ebx,edx
c0011ee7:	7e 1b                	jle    c0011f04 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011ee9:	8b 04 95 a0 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcc60]
c0011ef0:	39 c8                	cmp    eax,ecx
c0011ef2:	77 0d                	ja     c0011f01 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011ef4:	8b 34 95 a0 31 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdce60]
c0011efb:	01 c6                	add    esi,eax
c0011efd:	39 ce                	cmp    esi,ecx
c0011eff:	77 05                	ja     c0011f06 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011f01:	42                   	inc    edx
c0011f02:	eb e1                	jmp    c0011ee5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011f04:	31 c0                	xor    eax,eax
c0011f06:	5b                   	pop    ebx
c0011f07:	5e                   	pop    esi
c0011f08:	c3                   	ret    

c0011f09 <Thr::getDriverNameFromAddress(unsigned long)>:
c0011f09:	53                   	push   ebx
c0011f0a:	31 c0                	xor    eax,eax
c0011f0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f10:	8b 1d 80 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023180
c0011f16:	39 c3                	cmp    ebx,eax
c0011f18:	7e 22                	jle    c0011f3c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011f1a:	8b 14 85 a0 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc60]
c0011f21:	39 ca                	cmp    edx,ecx
c0011f23:	77 14                	ja     c0011f39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011f25:	03 14 85 a0 31 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdce60]
c0011f2c:	39 ca                	cmp    edx,ecx
c0011f2e:	76 09                	jbe    c0011f39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011f30:	8b 04 85 a0 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca60]
c0011f37:	eb 05                	jmp    c0011f3e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011f39:	40                   	inc    eax
c0011f3a:	eb da                	jmp    c0011f16 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011f3c:	31 c0                	xor    eax,eax
c0011f3e:	5b                   	pop    ebx
c0011f3f:	c3                   	ret    

c0011f40 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011f40:	53                   	push   ebx
c0011f41:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011f45:	53                   	push   ebx
c0011f46:	e8 8c ff ff ff       	call   c0011ed7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0011f4b:	5a                   	pop    edx
c0011f4c:	31 d2                	xor    edx,edx
c0011f4e:	85 c0                	test   eax,eax
c0011f50:	74 04                	je     c0011f56 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011f52:	89 da                	mov    edx,ebx
c0011f54:	29 c2                	sub    edx,eax
c0011f56:	89 d0                	mov    eax,edx
c0011f58:	5b                   	pop    ebx
c0011f59:	c3                   	ret    

c0011f5a <Thr::loadDLL(char const*, bool)>:
c0011f5a:	55                   	push   ebp
c0011f5b:	57                   	push   edi
c0011f5c:	56                   	push   esi
c0011f5d:	53                   	push   ebx
c0011f5e:	81 ec 34 01 00 00    	sub    esp,0x134
c0011f64:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011f6b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011f72:	56                   	push   esi
c0011f73:	68 97 ef 01 c0       	push   0xc001ef97
c0011f78:	e8 62 78 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0011f7d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011f84:	e8 cc 4a ff ff       	call   c0006a55 <malloc>
c0011f89:	83 c4 0c             	add    esp,0xc
c0011f8c:	89 c3                	mov    ebx,eax
c0011f8e:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c0011f94:	56                   	push   esi
c0011f95:	50                   	push   eax
c0011f96:	e8 af 7d ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	85 db                	test   ebx,ebx
c0011fa0:	75 3c                	jne    c0011fde <Thr::loadDLL(char const*, bool)+0x84>
c0011fa2:	89 f8                	mov    eax,edi
c0011fa4:	84 c0                	test   al,al
c0011fa6:	0f 84 d2 01 00 00    	je     c001217e <Thr::loadDLL(char const*, bool)+0x224>
c0011fac:	55                   	push   ebp
c0011fad:	55                   	push   ebp
c0011fae:	68 a8 ef 01 c0       	push   0xc001efa8
c0011fb3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011fb7:	55                   	push   ebp
c0011fb8:	e8 a7 e5 fe ff       	call   c0000564 <strcpy>
c0011fbd:	58                   	pop    eax
c0011fbe:	5a                   	pop    edx
c0011fbf:	56                   	push   esi
c0011fc0:	55                   	push   ebp
c0011fc1:	e8 de e6 fe ff       	call   c00006a4 <strcat>
c0011fc6:	59                   	pop    ecx
c0011fc7:	58                   	pop    eax
c0011fc8:	68 bb ef 01 c0       	push   0xc001efbb
c0011fcd:	55                   	push   ebp
c0011fce:	e8 d1 e6 fe ff       	call   c00006a4 <strcat>
c0011fd3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011fd6:	e8 da d4 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	51                   	push   ecx
c0011fdf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011fe3:	50                   	push   eax
c0011fe4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011fe8:	50                   	push   eax
c0011fe9:	53                   	push   ebx
c0011fea:	e8 c1 80 ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	85 db                	test   ebx,ebx
c0011ff4:	74 0c                	je     c0012002 <Thr::loadDLL(char const*, bool)+0xa8>
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ffb:	53                   	push   ebx
c0011ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012007:	75 0a                	jne    c0012013 <Thr::loadDLL(char const*, bool)+0xb9>
c0012009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001200d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012011:	75 3c                	jne    c001204f <Thr::loadDLL(char const*, bool)+0xf5>
c0012013:	89 f8                	mov    eax,edi
c0012015:	84 c0                	test   al,al
c0012017:	0f 84 49 01 00 00    	je     c0012166 <Thr::loadDLL(char const*, bool)+0x20c>
c001201d:	51                   	push   ecx
c001201e:	51                   	push   ecx
c001201f:	68 a8 ef 01 c0       	push   0xc001efa8
c0012024:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012028:	53                   	push   ebx
c0012029:	e8 36 e5 fe ff       	call   c0000564 <strcpy>
c001202e:	5d                   	pop    ebp
c001202f:	58                   	pop    eax
c0012030:	56                   	push   esi
c0012031:	53                   	push   ebx
c0012032:	e8 6d e6 fe ff       	call   c00006a4 <strcat>
c0012037:	58                   	pop    eax
c0012038:	5a                   	pop    edx
c0012039:	68 bb ef 01 c0       	push   0xc001efbb
c001203e:	53                   	push   ebx
c001203f:	e8 60 e6 fe ff       	call   c00006a4 <strcat>
c0012044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012047:	e8 69 d4 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	52                   	push   edx
c0012050:	6a 03                	push   0x3
c0012052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012056:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001205a:	05 ff 0f 00 00       	add    eax,0xfff
c001205f:	83 d2 00             	adc    edx,0x0
c0012062:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012066:	50                   	push   eax
c0012067:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c001206d:	e8 62 6c ff ff       	call   c0008cd4 <VAS::allocatePages(int, int)>
c0012072:	59                   	pop    ecx
c0012073:	89 c3                	mov    ebx,eax
c0012075:	5d                   	pop    ebp
c0012076:	50                   	push   eax
c0012077:	68 2e dc 01 c0       	push   0xc001dc2e
c001207c:	e8 5e 77 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0012081:	89 34 24             	mov    DWORD PTR [esp],esi
c0012084:	e8 3b e4 fe ff       	call   c00004c4 <strlen>
c0012089:	8b 2d 80 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023180
c001208f:	40                   	inc    eax
c0012090:	89 04 24             	mov    DWORD PTR [esp],eax
c0012093:	e8 bd 49 ff ff       	call   c0006a55 <malloc>
c0012098:	89 04 ad a0 35 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdca60],eax
c001209f:	58                   	pop    eax
c00120a0:	a1 80 31 02 c0       	mov    eax,ds:0xc0023180
c00120a5:	5a                   	pop    edx
c00120a6:	56                   	push   esi
c00120a7:	ff 34 85 a0 35 02 c0 	push   DWORD PTR [eax*4-0x3ffdca60]
c00120ae:	e8 b1 e4 fe ff       	call   c0000564 <strcpy>
c00120b3:	a1 80 31 02 c0       	mov    eax,ds:0xc0023180
c00120b8:	8d 50 01             	lea    edx,[eax+0x1]
c00120bb:	89 1c 85 a0 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc60],ebx
c00120c2:	89 15 80 31 02 c0    	mov    DWORD PTR ds:0xc0023180,edx
c00120c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120cc:	83 c4 0c             	add    esp,0xc
c00120cf:	89 14 85 a0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce60],edx
c00120d6:	6a 01                	push   0x1
c00120d8:	53                   	push   ebx
c00120d9:	56                   	push   esi
c00120da:	e8 c2 f6 ff ff       	call   c00117a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00120df:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120e3:	83 c4 10             	add    esp,0x10
c00120e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120eb:	0f 85 89 00 00 00    	jne    c001217a <Thr::loadDLL(char const*, bool)+0x220>
c00120f1:	89 f8                	mov    eax,edi
c00120f3:	84 c0                	test   al,al
c00120f5:	74 73                	je     c001216a <Thr::loadDLL(char const*, bool)+0x210>
c00120f7:	83 ec 0c             	sub    esp,0xc
c00120fa:	68 bd ef 01 c0       	push   0xc001efbd
c00120ff:	e8 b1 d3 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	eb 61                	jmp    c001216a <Thr::loadDLL(char const*, bool)+0x210>
c0012109:	50                   	push   eax
c001210a:	50                   	push   eax
c001210b:	89 e8                	mov    eax,ebp
c001210d:	c1 e0 0c             	shl    eax,0xc
c0012110:	01 d8                	add    eax,ebx
c0012112:	50                   	push   eax
c0012113:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c0012119:	e8 34 67 ff ff       	call   c0008852 <VAS::getPageTableEntry(unsigned long)>
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	8b 00                	mov    eax,DWORD PTR [eax]
c0012123:	a8 60                	test   al,0x60
c0012125:	75 11                	jne    c0012138 <Thr::loadDLL(char const*, bool)+0x1de>
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001212f:	50                   	push   eax
c0012130:	e8 85 4c ff ff       	call   c0006dba <Phys::freePage(unsigned long)>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	45                   	inc    ebp
c0012139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001213d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012141:	05 ff 0f 00 00       	add    eax,0xfff
c0012146:	bf 00 00 00 00       	mov    edi,0x0
c001214b:	83 d2 00             	adc    edx,0x0
c001214e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012152:	c1 ea 0c             	shr    edx,0xc
c0012155:	39 c5                	cmp    ebp,eax
c0012157:	89 d1                	mov    ecx,edx
c0012159:	89 f8                	mov    eax,edi
c001215b:	19 c8                	sbb    eax,ecx
c001215d:	72 aa                	jb     c0012109 <Thr::loadDLL(char const*, bool)+0x1af>
c001215f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012164:	75 18                	jne    c001217e <Thr::loadDLL(char const*, bool)+0x224>
c0012166:	31 db                	xor    ebx,ebx
c0012168:	eb 14                	jmp    c001217e <Thr::loadDLL(char const*, bool)+0x224>
c001216a:	83 ec 0c             	sub    esp,0xc
c001216d:	68 dc ef 01 c0       	push   0xc001efdc
c0012172:	e8 3e d3 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	31 ed                	xor    ebp,ebp
c001217c:	eb bb                	jmp    c0012139 <Thr::loadDLL(char const*, bool)+0x1df>
c001217e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012184:	89 d8                	mov    eax,ebx
c0012186:	5b                   	pop    ebx
c0012187:	5e                   	pop    esi
c0012188:	5f                   	pop    edi
c0012189:	5d                   	pop    ebp
c001218a:	c3                   	ret    

c001218b <Thr::executeDLL(unsigned long, void*)>:
c001218b:	56                   	push   esi
c001218c:	53                   	push   ebx
c001218d:	52                   	push   edx
c001218e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012192:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012196:	85 db                	test   ebx,ebx
c0012198:	75 10                	jne    c00121aa <Thr::executeDLL(unsigned long, void*)+0x1f>
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	68 f8 ef 01 c0       	push   0xc001eff8
c00121a2:	e8 0e d3 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	50                   	push   eax
c00121ab:	50                   	push   eax
c00121ac:	53                   	push   ebx
c00121ad:	68 22 f0 01 c0       	push   0xc001f022
c00121b2:	e8 28 76 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00121b7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00121bb:	89 d8                	mov    eax,ebx
c00121bd:	83 c4 14             	add    esp,0x14
c00121c0:	5b                   	pop    ebx
c00121c1:	5e                   	pop    esi
c00121c2:	ff e0                	jmp    eax

c00121c4 <userModeEntryPoint(void*)>:
c00121c4:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00121c9:	48                   	dec    eax
c00121ca:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00121cf:	75 03                	jne    c00121d4 <userModeEntryPoint(void*)+0x10>
c00121d1:	fb                   	sti    
c00121d2:	66 90                	xchg   ax,ax
c00121d4:	fb                   	sti    
c00121d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121dd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00121e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121e7:	e9 73 e0 fe ff       	jmp    c000025f <goToUsermode>

c00121ec <changeTSS>:
c00121ec:	83 ec 14             	sub    esp,0x14
c00121ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00121f7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00121fc:	c1 e2 15             	shl    edx,0x15
c00121ff:	29 d0                	sub    eax,edx
c0012201:	50                   	push   eax
c0012202:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0012207:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001220d:	05 7c 11 00 00       	add    eax,0x117c
c0012212:	50                   	push   eax
c0012213:	e8 b8 5c ff ff       	call   c0007ed0 <TSS::setESP(unsigned long)>
c0012218:	83 c4 1c             	add    esp,0x1c
c001221b:	c3                   	ret    

c001221c <switchToThread(ThreadControlBlock*)>:
c001221c:	57                   	push   edi
c001221d:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012222:	56                   	push   esi
c0012223:	85 c0                	test   eax,eax
c0012225:	53                   	push   ebx
c0012226:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001222a:	0f 85 88 00 00 00    	jne    c00122b8 <switchToThread(ThreadControlBlock*)+0x9c>
c0012230:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0012233:	3c ff                	cmp    al,0xff
c0012235:	74 7d                	je     c00122b4 <switchToThread(ThreadControlBlock*)+0x98>
c0012237:	0f b6 d0             	movzx  edx,al
c001223a:	b8 00 04 00 00       	mov    eax,0x400
c001223f:	29 d0                	sub    eax,edx
c0012241:	d1 f8                	sar    eax,1
c0012243:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012246:	66 90                	xchg   ax,ax
c0012248:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001224b:	ff 15 38 3a 02 c0    	call   DWORD PTR ds:0xc0023a38
c0012251:	a3 88 39 02 c0       	mov    ds:0xc0023988,eax
c0012256:	89 15 8c 39 02 c0    	mov    DWORD PTR ds:0xc002398c,edx
c001225c:	89 c6                	mov    esi,eax
c001225e:	89 d7                	mov    edi,edx
c0012260:	2b 35 78 39 02 c0    	sub    esi,DWORD PTR ds:0xc0023978
c0012266:	a3 78 39 02 c0       	mov    ds:0xc0023978,eax
c001226b:	1b 3d 7c 39 02 c0    	sbb    edi,DWORD PTR ds:0xc002397c
c0012271:	89 35 80 39 02 c0    	mov    DWORD PTR ds:0xc0023980,esi
c0012277:	89 3d 84 39 02 c0    	mov    DWORD PTR ds:0xc0023984,edi
c001227d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012283:	89 15 7c 39 02 c0    	mov    DWORD PTR ds:0xc002397c,edx
c0012289:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001228c:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001228f:	01 c6                	add    esi,eax
c0012291:	11 d7                	adc    edi,edx
c0012293:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001229c:	53                   	push   ebx
c001229d:	e8 f5 df fe ff       	call   c0000297 <switchToThreadASM>
c00122a2:	0f 20 c0             	mov    eax,cr0
c00122a5:	83 c8 08             	or     eax,0x8
c00122a8:	0f 22 c0             	mov    cr0,eax
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	5b                   	pop    ebx
c00122af:	5e                   	pop    esi
c00122b0:	5f                   	pop    edi
c00122b1:	c3                   	ret    
c00122b2:	66 90                	xchg   ax,ax
c00122b4:	31 c0                	xor    eax,eax
c00122b6:	eb 90                	jmp    c0012248 <switchToThread(ThreadControlBlock*)+0x2c>
c00122b8:	5b                   	pop    ebx
c00122b9:	c7 05 40 39 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x1
c00122c3:	5e                   	pop    esi
c00122c4:	5f                   	pop    edi
c00122c5:	c3                   	ret    
c00122c6:	66 90                	xchg   ax,ax

c00122c8 <Process::addArgs(char**)>:
c00122c8:	57                   	push   edi
c00122c9:	56                   	push   esi
c00122ca:	53                   	push   ebx
c00122cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122d3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00122dd:	85 ff                	test   edi,edi
c00122df:	74 43                	je     c0012324 <Process::addArgs(char**)+0x5c>
c00122e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00122e3:	85 c0                	test   eax,eax
c00122e5:	74 3d                	je     c0012324 <Process::addArgs(char**)+0x5c>
c00122e7:	31 db                	xor    ebx,ebx
c00122e9:	8d 76 00             	lea    esi,[esi+0x0]
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	50                   	push   eax
c00122f0:	e8 cf e1 fe ff       	call   c00004c4 <strlen>
c00122f5:	40                   	inc    eax
c00122f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00122f9:	e8 57 47 ff ff       	call   c0006a55 <malloc>
c00122fe:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012305:	5a                   	pop    edx
c0012306:	59                   	pop    ecx
c0012307:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001230a:	43                   	inc    ebx
c001230b:	50                   	push   eax
c001230c:	e8 53 e2 fe ff       	call   c0000564 <strcpy>
c0012311:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001231d:	85 c0                	test   eax,eax
c001231f:	75 cb                	jne    c00122ec <Process::addArgs(char**)+0x24>
c0012321:	8d 76 00             	lea    esi,[esi+0x0]
c0012324:	5b                   	pop    ebx
c0012325:	5e                   	pop    esi
c0012326:	5f                   	pop    edi
c0012327:	c3                   	ret    

c0012328 <Process::Process(char const*, Process*, char**)>:
c0012328:	56                   	push   esi
c0012329:	53                   	push   ebx
c001232a:	83 ec 14             	sub    esp,0x14
c001232d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012331:	05 0c 02 00 00       	add    eax,0x20c
c0012336:	bb 07 00 00 00       	mov    ebx,0x7
c001233b:	89 c6                	mov    esi,eax
c001233d:	8d 76 00             	lea    esi,[esi+0x0]
c0012340:	85 db                	test   ebx,ebx
c0012342:	78 14                	js     c0012358 <Process::Process(char const*, Process*, char**)+0x30>
c0012344:	83 ec 0c             	sub    esp,0xc
c0012347:	56                   	push   esi
c0012348:	e8 7f ab 00 00       	call   c001cecc <ThreadControlBlock::ThreadControlBlock()>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	83 c6 5f             	add    esi,0x5f
c0012353:	4b                   	dec    ebx
c0012354:	eb ea                	jmp    c0012340 <Process::Process(char const*, Process*, char**)+0x18>
c0012356:	66 90                	xchg   ax,ax
c0012358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001235c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012363:	83 ec 0c             	sub    esp,0xc
c0012366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001236a:	e8 cf cf ff ff       	call   c000f33e <Krnl::newProcessEnv(Process*)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	89 c2                	mov    edx,eax
c0012374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012378:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001237e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012382:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001238b:	a1 90 fe 01 c0       	mov    eax,ds:0xc001fe90
c0012390:	8d 50 01             	lea    edx,[eax+0x1]
c0012393:	89 15 90 fe 01 c0    	mov    DWORD PTR ds:0xc001fe90,edx
c0012399:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001239d:	89 02                	mov    DWORD PTR [edx],eax
c001239f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00123a7:	83 ec 0c             	sub    esp,0xc
c00123aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00123ae:	e8 a2 46 ff ff       	call   c0006a55 <malloc>
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	89 c3                	mov    ebx,eax
c00123b8:	83 ec 08             	sub    esp,0x8
c00123bb:	6a 00                	push   0x0
c00123bd:	53                   	push   ebx
c00123be:	e8 b9 6c ff ff       	call   c000907c <VAS::VAS(bool)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123ca:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00123d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00123de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123e6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00123ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00123f6:	85 c0                	test   eax,eax
c00123f8:	74 42                	je     c001243c <Process::Process(char const*, Process*, char**)+0x114>
c00123fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123fe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012404:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001240a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001240e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012418:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001241e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012428:	05 0c 01 00 00       	add    eax,0x10c
c001242d:	83 ec 08             	sub    esp,0x8
c0012430:	52                   	push   edx
c0012431:	50                   	push   eax
c0012432:	e8 2d e1 fe ff       	call   c0000564 <strcpy>
c0012437:	83 c4 10             	add    esp,0x10
c001243a:	eb 64                	jmp    c00124a0 <Process::Process(char const*, Process*, char**)+0x178>
c001243c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012444:	83 ec 0c             	sub    esp,0xc
c0012447:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001244b:	e8 05 46 ff ff       	call   c0006a55 <malloc>
c0012450:	83 c4 10             	add    esp,0x10
c0012453:	89 c3                	mov    ebx,eax
c0012455:	83 ec 08             	sub    esp,0x8
c0012458:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001245c:	53                   	push   ebx
c001245d:	e8 12 58 ff ff       	call   c0007c74 <VgaText::VgaText(char const*)>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012469:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001246f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012473:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012479:	83 ec 0c             	sub    esp,0xc
c001247c:	50                   	push   eax
c001247d:	e8 96 50 ff ff       	call   c0007518 <addToTerminalCycle(VgaText*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012489:	05 0c 01 00 00       	add    eax,0x10c
c001248e:	83 ec 08             	sub    esp,0x8
c0012491:	68 41 f0 01 c0       	push   0xc001f041
c0012496:	50                   	push   eax
c0012497:	e8 c8 e0 fe ff       	call   c0000564 <strcpy>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	90                   	nop
c00124a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124a4:	83 c0 0c             	add    eax,0xc
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124ae:	50                   	push   eax
c00124af:	e8 b0 e0 fe ff       	call   c0000564 <strcpy>
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	83 ec 08             	sub    esp,0x8
c00124ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00124be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124c2:	e8 01 fe ff ff       	call   c00122c8 <Process::addArgs(char**)>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	83 ec 08             	sub    esp,0x8
c00124cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124d5:	e8 91 ed ff ff       	call   c001126b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124e5:	83 f0 01             	xor    eax,0x1
c00124e8:	88 c2                	mov    dl,al
c00124ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124ee:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00124f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00124f9:	83 ec 08             	sub    esp,0x8
c00124fc:	50                   	push   eax
c00124fd:	68 98 f0 01 c0       	push   0xc001f098
c0012502:	e8 d8 72 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	90                   	nop
c001250b:	83 c4 14             	add    esp,0x14
c001250e:	5b                   	pop    ebx
c001250f:	5e                   	pop    esi
c0012510:	c3                   	ret    
c0012511:	90                   	nop
c0012512:	66 90                	xchg   ax,ax

c0012514 <Process::Process(bool, char const*, Process*, char**)>:
c0012514:	56                   	push   esi
c0012515:	53                   	push   ebx
c0012516:	83 ec 24             	sub    esp,0x24
c0012519:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001251d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012525:	05 0c 02 00 00       	add    eax,0x20c
c001252a:	bb 07 00 00 00       	mov    ebx,0x7
c001252f:	89 c6                	mov    esi,eax
c0012531:	8d 76 00             	lea    esi,[esi+0x0]
c0012534:	85 db                	test   ebx,ebx
c0012536:	78 14                	js     c001254c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012538:	83 ec 0c             	sub    esp,0xc
c001253b:	56                   	push   esi
c001253c:	e8 8b a9 00 00       	call   c001cecc <ThreadControlBlock::ThreadControlBlock()>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	83 c6 5f             	add    esi,0x5f
c0012547:	4b                   	dec    ebx
c0012548:	eb ea                	jmp    c0012534 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001254a:	66 90                	xchg   ax,ax
c001254c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012550:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012557:	83 ec 0c             	sub    esp,0xc
c001255a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001255e:	e8 db cd ff ff       	call   c000f33e <Krnl::newProcessEnv(Process*)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	89 c2                	mov    edx,eax
c0012568:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001256c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012576:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001257f:	a1 90 fe 01 c0       	mov    eax,ds:0xc001fe90
c0012584:	8d 50 01             	lea    edx,[eax+0x1]
c0012587:	89 15 90 fe 01 c0    	mov    DWORD PTR ds:0xc001fe90,edx
c001258d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012591:	89 02                	mov    DWORD PTR [edx],eax
c0012593:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001259b:	83 ec 0c             	sub    esp,0xc
c001259e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00125a2:	e8 ae 44 ff ff       	call   c0006a55 <malloc>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	89 c3                	mov    ebx,eax
c00125ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00125b1:	83 ec 08             	sub    esp,0x8
c00125b4:	50                   	push   eax
c00125b5:	53                   	push   ebx
c00125b6:	e8 c1 6a ff ff       	call   c000907c <VAS::VAS(bool)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125c2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00125c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00125d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00125de:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00125e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00125ee:	85 c0                	test   eax,eax
c00125f0:	74 42                	je     c0012634 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00125f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00125fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012602:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012606:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001260c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012610:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012616:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001261c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012620:	05 0c 01 00 00       	add    eax,0x10c
c0012625:	83 ec 08             	sub    esp,0x8
c0012628:	52                   	push   edx
c0012629:	50                   	push   eax
c001262a:	e8 35 df fe ff       	call   c0000564 <strcpy>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	eb 64                	jmp    c0012698 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0012634:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012643:	e8 0d 44 ff ff       	call   c0006a55 <malloc>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	89 c3                	mov    ebx,eax
c001264d:	83 ec 08             	sub    esp,0x8
c0012650:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012654:	53                   	push   ebx
c0012655:	e8 1a 56 ff ff       	call   c0007c74 <VgaText::VgaText(char const*)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012661:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012667:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001266b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012671:	83 ec 0c             	sub    esp,0xc
c0012674:	50                   	push   eax
c0012675:	e8 9e 4e ff ff       	call   c0007518 <addToTerminalCycle(VgaText*)>
c001267a:	83 c4 10             	add    esp,0x10
c001267d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012681:	05 0c 01 00 00       	add    eax,0x10c
c0012686:	83 ec 08             	sub    esp,0x8
c0012689:	68 41 f0 01 c0       	push   0xc001f041
c001268e:	50                   	push   eax
c001268f:	e8 d0 de fe ff       	call   c0000564 <strcpy>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	90                   	nop
c0012698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001269c:	83 c0 0c             	add    eax,0xc
c001269f:	83 ec 08             	sub    esp,0x8
c00126a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126a6:	50                   	push   eax
c00126a7:	e8 b8 de fe ff       	call   c0000564 <strcpy>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	83 ec 08             	sub    esp,0x8
c00126b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00126b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126ba:	e8 09 fc ff ff       	call   c00122c8 <Process::addArgs(char**)>
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	90                   	nop
c00126c3:	83 c4 24             	add    esp,0x24
c00126c6:	5b                   	pop    ebx
c00126c7:	5e                   	pop    esi
c00126c8:	c3                   	ret    
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]

c00126cc <taskStartupFunction>:
c00126cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00126d4:	c3                   	ret    
c00126d5:	90                   	nop
c00126d6:	66 90                	xchg   ax,ax

c00126d8 <Semaphore::Semaphore(int)>:
c00126d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126e0:	89 10                	mov    DWORD PTR [eax],edx
c00126e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00126ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012703:	90                   	nop
c0012704:	c3                   	ret    
c0012705:	90                   	nop
c0012706:	66 90                	xchg   ax,ax

c0012708 <Mutex::Mutex()>:
c0012708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001270c:	6a 01                	push   0x1
c001270e:	50                   	push   eax
c001270f:	e8 c4 ff ff ff       	call   c00126d8 <Semaphore::Semaphore(int)>
c0012714:	83 c4 08             	add    esp,0x8
c0012717:	90                   	nop
c0012718:	c3                   	ret    
c0012719:	90                   	nop
c001271a:	66 90                	xchg   ax,ax

c001271c <Process::createThread(void (*)(void*), void*, int)>:
c001271c:	57                   	push   edi
c001271d:	31 c9                	xor    ecx,ecx
c001271f:	56                   	push   esi
c0012720:	53                   	push   ebx
c0012721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012725:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001272c:	89 f2                	mov    edx,esi
c001272e:	66 90                	xchg   ax,ax
c0012730:	0f b7 c2             	movzx  eax,dx
c0012733:	83 e2 01             	and    edx,0x1
c0012736:	74 14                	je     c001274c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0012738:	d1 f8                	sar    eax,1
c001273a:	41                   	inc    ecx
c001273b:	89 c2                	mov    edx,eax
c001273d:	83 f9 10             	cmp    ecx,0x10
c0012740:	75 ee                	jne    c0012730 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012742:	31 db                	xor    ebx,ebx
c0012744:	89 d8                	mov    eax,ebx
c0012746:	5b                   	pop    ebx
c0012747:	5e                   	pop    esi
c0012748:	5f                   	pop    edi
c0012749:	c3                   	ret    
c001274a:	66 90                	xchg   ax,ax
c001274c:	b8 01 00 00 00       	mov    eax,0x1
c0012751:	d3 e0                	shl    eax,cl
c0012753:	09 c6                	or     esi,eax
c0012755:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012758:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001275f:	01 c0                	add    eax,eax
c0012761:	01 c8                	add    eax,ecx
c0012763:	8d 04 80             	lea    eax,[eax+eax*4]
c0012766:	01 d8                	add    eax,ebx
c0012768:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001276f:	75 0b                	jne    c001277c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0012771:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001277b:	90                   	nop
c001277c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012782:	83 ec 08             	sub    esp,0x8
c0012785:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012788:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001278b:	01 c0                	add    eax,eax
c001278d:	01 c8                	add    eax,ecx
c001278f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0012792:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0012795:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001279b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00127a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00127a5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00127ab:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00127b1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00127b8:	89 ca                	mov    edx,ecx
c00127ba:	f7 da                	neg    edx
c00127bc:	c1 e2 15             	shl    edx,0x15
c00127bf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00127c5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00127cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00127cf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00127d9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00127df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127e3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00127e9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00127f3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00127fd:	53                   	push   ebx
c00127fe:	68 64 39 02 c0       	push   0xc0023964
c0012803:	e8 64 a4 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012808:	83 c4 10             	add    esp,0x10
c001280b:	89 d8                	mov    eax,ebx
c001280d:	5b                   	pop    ebx
c001280e:	5e                   	pop    esi
c001280f:	5f                   	pop    edi
c0012810:	c3                   	ret    
c0012811:	90                   	nop
c0012812:	66 90                	xchg   ax,ax

c0012814 <Process::createUserThread()>:
c0012814:	83 ec 0c             	sub    esp,0xc
c0012817:	68 80 00 00 00       	push   0x80
c001281c:	6a 00                	push   0x0
c001281e:	68 c4 21 01 c0       	push   0xc00121c4
c0012823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012827:	e8 f0 fe ff ff       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c001282c:	83 c4 1c             	add    esp,0x1c
c001282f:	c3                   	ret    

c0012830 <setupMultitasking(void (*)())>:
c0012830:	56                   	push   esi
c0012831:	53                   	push   ebx
c0012832:	51                   	push   ecx
c0012833:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012837:	eb 13                	jmp    c001284c <setupMultitasking(void (*)())+0x1c>
c0012839:	8d 76 00             	lea    esi,[esi+0x0]
c001283c:	83 ec 0c             	sub    esp,0xc
c001283f:	68 64 39 02 c0       	push   0xc0023964
c0012844:	e8 6b a3 00 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012849:	83 c4 10             	add    esp,0x10
c001284c:	83 ec 0c             	sub    esp,0xc
c001284f:	68 64 39 02 c0       	push   0xc0023964
c0012854:	e8 37 a3 00 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	84 c0                	test   al,al
c001285e:	74 dc                	je     c001283c <setupMultitasking(void (*)())+0xc>
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	68 1f 07 00 00       	push   0x71f
c0012868:	e8 e8 41 ff ff       	call   c0006a55 <malloc>
c001286d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0012874:	89 c3                	mov    ebx,eax
c0012876:	6a 00                	push   0x0
c0012878:	68 45 f0 01 c0       	push   0xc001f045
c001287d:	6a 01                	push   0x1
c001287f:	50                   	push   eax
c0012880:	e8 8f fc ff ff       	call   c0012514 <Process::Process(bool, char const*, Process*, char**)>
c0012885:	83 c4 14             	add    esp,0x14
c0012888:	89 1d 70 39 02 c0    	mov    DWORD PTR ds:0xc0023970,ebx
c001288e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0012894:	e8 dc 4e ff ff       	call   c0007775 <setActiveTerminal(VgaText*)>
c0012899:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00128a1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00128ab:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00128b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00128b4:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00128be:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00128c4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00128ca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00128d4:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00128de:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00128e8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00128ee:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00128f8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00128fe:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012908:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001290e:	58                   	pop    eax
c001290f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012915:	5a                   	pop    edx
c0012916:	68 41 f0 01 c0       	push   0xc001f041
c001291b:	50                   	push   eax
c001291c:	e8 43 dc fe ff       	call   c0000564 <strcpy>
c0012921:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012928:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001292c:	83 c4 14             	add    esp,0x14
c001292f:	5b                   	pop    ebx
c0012930:	5e                   	pop    esi
c0012931:	e9 53 d9 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0012936:	66 90                	xchg   ax,ax

c0012938 <schedule()>:
c0012938:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c001293d:	85 c0                	test   eax,eax
c001293f:	74 0b                	je     c001294c <schedule()+0x14>
c0012941:	c7 05 40 39 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x1
c001294b:	c3                   	ret    
c001294c:	53                   	push   ebx
c001294d:	83 ec 14             	sub    esp,0x14
c0012950:	68 64 39 02 c0       	push   0xc0023964
c0012955:	e8 36 a2 00 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	84 c0                	test   al,al
c001295f:	75 3b                	jne    c001299c <schedule()+0x64>
c0012961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012966:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0012969:	4a                   	dec    edx
c001296a:	74 38                	je     c00129a4 <schedule()+0x6c>
c001296c:	83 ec 0c             	sub    esp,0xc
c001296f:	68 64 39 02 c0       	push   0xc0023964
c0012974:	e8 33 a2 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012979:	c7 04 24 64 39 02 c0 	mov    DWORD PTR [esp],0xc0023964
c0012980:	89 c3                	mov    ebx,eax
c0012982:	e8 2d a2 00 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012987:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001298e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012991:	e8 86 f8 ff ff       	call   c001221c <switchToThread(ThreadControlBlock*)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	8d 76 00             	lea    esi,[esi+0x0]
c001299c:	83 c4 08             	add    esp,0x8
c001299f:	5b                   	pop    ebx
c00129a0:	c3                   	ret    
c00129a1:	8d 76 00             	lea    esi,[esi+0x0]
c00129a4:	83 ec 08             	sub    esp,0x8
c00129a7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00129ae:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00129b4:	68 64 39 02 c0       	push   0xc0023964
c00129b9:	e8 ae a2 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	eb a9                	jmp    c001296c <schedule()+0x34>
c00129c3:	90                   	nop

c00129c4 <Semaphore::tryAcquire()>:
c00129c4:	53                   	push   ebx
c00129c5:	83 ec 08             	sub    esp,0x8
c00129c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00129cc:	fa                   	cli    
c00129cd:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00129d2:	8d 50 01             	lea    edx,[eax+0x1]
c00129d5:	89 15 48 39 02 c0    	mov    DWORD PTR ds:0xc0023948,edx
c00129db:	8b 15 44 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023944
c00129e1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00129e4:	89 1d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,ebx
c00129ea:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00129ed:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00129ef:	7c 33                	jl     c0012a24 <Semaphore::tryAcquire()+0x60>
c00129f1:	89 15 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,edx
c00129f7:	85 d2                	test   edx,edx
c00129f9:	75 0d                	jne    c0012a08 <Semaphore::tryAcquire()+0x44>
c00129fb:	8b 15 40 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023940
c0012a01:	85 d2                	test   edx,edx
c0012a03:	75 6b                	jne    c0012a70 <Semaphore::tryAcquire()+0xac>
c0012a05:	8d 76 00             	lea    esi,[esi+0x0]
c0012a08:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 0b                	je     c0012a1c <Semaphore::tryAcquire()+0x58>
c0012a11:	8d 76 00             	lea    esi,[esi+0x0]
c0012a14:	31 c0                	xor    eax,eax
c0012a16:	83 c4 08             	add    esp,0x8
c0012a19:	5b                   	pop    ebx
c0012a1a:	c3                   	ret    
c0012a1b:	90                   	nop
c0012a1c:	fb                   	sti    
c0012a1d:	83 c4 08             	add    esp,0x8
c0012a20:	5b                   	pop    ebx
c0012a21:	c3                   	ret    
c0012a22:	66 90                	xchg   ax,ax
c0012a24:	43                   	inc    ebx
c0012a25:	89 15 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,edx
c0012a2b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012a2e:	85 d2                	test   edx,edx
c0012a30:	75 22                	jne    c0012a54 <Semaphore::tryAcquire()+0x90>
c0012a32:	8b 0d 40 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023940
c0012a38:	85 c9                	test   ecx,ecx
c0012a3a:	74 18                	je     c0012a54 <Semaphore::tryAcquire()+0x90>
c0012a3c:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0012a46:	e8 ed fe ff ff       	call   c0012938 <schedule()>
c0012a4b:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012a50:	48                   	dec    eax
c0012a51:	8d 76 00             	lea    esi,[esi+0x0]
c0012a54:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012a59:	85 c0                	test   eax,eax
c0012a5b:	75 0b                	jne    c0012a68 <Semaphore::tryAcquire()+0xa4>
c0012a5d:	fb                   	sti    
c0012a5e:	b0 01                	mov    al,0x1
c0012a60:	83 c4 08             	add    esp,0x8
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	8d 76 00             	lea    esi,[esi+0x0]
c0012a68:	b0 01                	mov    al,0x1
c0012a6a:	83 c4 08             	add    esp,0x8
c0012a6d:	5b                   	pop    ebx
c0012a6e:	c3                   	ret    
c0012a6f:	90                   	nop
c0012a70:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0012a7a:	e8 b9 fe ff ff       	call   c0012938 <schedule()>
c0012a7f:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012a84:	48                   	dec    eax
c0012a85:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012a8a:	85 c0                	test   eax,eax
c0012a8c:	75 86                	jne    c0012a14 <Semaphore::tryAcquire()+0x50>
c0012a8e:	eb 8c                	jmp    c0012a1c <Semaphore::tryAcquire()+0x58>

c0012a90 <Semaphore::assertLocked(char const*)>:
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a97:	fa                   	cli    
c0012a98:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012a9e:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012aa3:	8d 48 01             	lea    ecx,[eax+0x1]
c0012aa6:	89 0d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,ecx
c0012aac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012aae:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012ab1:	7c 29                	jl     c0012adc <Semaphore::assertLocked(char const*)+0x4c>
c0012ab3:	90                   	nop
c0012ab4:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c0012ab9:	85 c0                	test   eax,eax
c0012abb:	75 0b                	jne    c0012ac8 <Semaphore::assertLocked(char const*)+0x38>
c0012abd:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c0012ac2:	85 c0                	test   eax,eax
c0012ac4:	75 2e                	jne    c0012af4 <Semaphore::assertLocked(char const*)+0x64>
c0012ac6:	66 90                	xchg   ax,ax
c0012ac8:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012acd:	48                   	dec    eax
c0012ace:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012ad3:	75 03                	jne    c0012ad8 <Semaphore::assertLocked(char const*)+0x48>
c0012ad5:	fb                   	sti    
c0012ad6:	66 90                	xchg   ax,ax
c0012ad8:	83 c4 0c             	add    esp,0xc
c0012adb:	c3                   	ret    
c0012adc:	83 ec 0c             	sub    esp,0xc
c0012adf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ae3:	e8 cd c9 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0012ae8:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	48                   	dec    eax
c0012af1:	eb c1                	jmp    c0012ab4 <Semaphore::assertLocked(char const*)+0x24>
c0012af3:	90                   	nop
c0012af4:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0012afe:	e8 35 fe ff ff       	call   c0012938 <schedule()>
c0012b03:	eb c3                	jmp    c0012ac8 <Semaphore::assertLocked(char const*)+0x38>
c0012b05:	8d 76 00             	lea    esi,[esi+0x0]

c0012b08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012b17:	e8 1c fe ff ff       	call   c0012938 <schedule()>
c0012b1c:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012b21:	48                   	dec    eax
c0012b22:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012b27:	75 03                	jne    c0012b2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012b29:	fb                   	sti    
c0012b2a:	66 90                	xchg   ax,ax
c0012b2c:	83 c4 0c             	add    esp,0xc
c0012b2f:	c3                   	ret    

c0012b30 <blockTask(TaskState)>:
c0012b30:	83 ec 0c             	sub    esp,0xc
c0012b33:	fa                   	cli    
c0012b34:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012b3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012b46:	e8 ed fd ff ff       	call   c0012938 <schedule()>
c0012b4b:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012b50:	48                   	dec    eax
c0012b51:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012b56:	75 04                	jne    c0012b5c <blockTask(TaskState)+0x2c>
c0012b58:	fb                   	sti    
c0012b59:	8d 76 00             	lea    esi,[esi+0x0]
c0012b5c:	83 c4 0c             	add    esp,0xc
c0012b5f:	c3                   	ret    

c0012b60 <waitTask(int, int*, int)>:
c0012b60:	83 ec 18             	sub    esp,0x18
c0012b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b6c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012b6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012b73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b78:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012b7b:	6a 07                	push   0x7
c0012b7d:	e8 ae ff ff ff       	call   c0012b30 <blockTask(TaskState)>
c0012b82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012b8d:	85 d2                	test   edx,edx
c0012b8f:	74 0b                	je     c0012b9c <waitTask(int, int*, int)+0x3c>
c0012b91:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012b94:	89 02                	mov    DWORD PTR [edx],eax
c0012b96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b9b:	90                   	nop
c0012b9c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012b9f:	83 c4 0c             	add    esp,0xc
c0012ba2:	c3                   	ret    
c0012ba3:	90                   	nop

c0012ba4 <milliTenthSleepUntil(unsigned int)>:
c0012ba4:	83 ec 0c             	sub    esp,0xc
c0012ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bab:	39 05 4c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a4c,eax
c0012bb1:	76 05                	jbe    c0012bb8 <milliTenthSleepUntil(unsigned int)+0x14>
c0012bb3:	90                   	nop
c0012bb4:	83 c4 0c             	add    esp,0xc
c0012bb7:	c3                   	ret    
c0012bb8:	fa                   	cli    
c0012bb9:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012bbf:	83 ec 08             	sub    esp,0x8
c0012bc2:	ff 05 44 39 02 c0    	inc    DWORD PTR ds:0xc0023944
c0012bc8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012bce:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012bd1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0012bd7:	68 58 39 02 c0       	push   0xc0023958
c0012bdc:	e8 8b a0 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012be1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012be8:	e8 43 ff ff ff       	call   c0012b30 <blockTask(TaskState)>
c0012bed:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	48                   	dec    eax
c0012bf6:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c0012bfb:	85 c0                	test   eax,eax
c0012bfd:	75 09                	jne    c0012c08 <milliTenthSleepUntil(unsigned int)+0x64>
c0012bff:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c0012c04:	85 c0                	test   eax,eax
c0012c06:	75 14                	jne    c0012c1c <milliTenthSleepUntil(unsigned int)+0x78>
c0012c08:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012c0d:	48                   	dec    eax
c0012c0e:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012c13:	75 9f                	jne    c0012bb4 <milliTenthSleepUntil(unsigned int)+0x10>
c0012c15:	fb                   	sti    
c0012c16:	83 c4 0c             	add    esp,0xc
c0012c19:	c3                   	ret    
c0012c1a:	66 90                	xchg   ax,ax
c0012c1c:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0012c26:	e8 0d fd ff ff       	call   c0012938 <schedule()>
c0012c2b:	eb db                	jmp    c0012c08 <milliTenthSleepUntil(unsigned int)+0x64>
c0012c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0012c30 <milliTenthSleep(unsigned int)>:
c0012c30:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c0012c35:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012c39:	e9 66 ff ff ff       	jmp    c0012ba4 <milliTenthSleepUntil(unsigned int)>
c0012c3e:	66 90                	xchg   ax,ax

c0012c40 <sleep(unsigned int)>:
c0012c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c44:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c47:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c4a:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c4d:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c50:	c1 e0 04             	shl    eax,0x4
c0012c53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c57:	eb d7                	jmp    c0012c30 <milliTenthSleep(unsigned int)>
c0012c59:	90                   	nop
c0012c5a:	66 90                	xchg   ax,ax

c0012c5c <Semaphore::acquire()>:
c0012c5c:	83 ec 0c             	sub    esp,0xc
c0012c5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c63:	fa                   	cli    
c0012c64:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012c69:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012c6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012c72:	89 0d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,ecx
c0012c78:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012c7b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012c7d:	7d 2d                	jge    c0012cac <Semaphore::acquire()+0x50>
c0012c7f:	41                   	inc    ecx
c0012c80:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012c83:	90                   	nop
c0012c84:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c0012c89:	85 c0                	test   eax,eax
c0012c8b:	75 0b                	jne    c0012c98 <Semaphore::acquire()+0x3c>
c0012c8d:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c0012c92:	85 c0                	test   eax,eax
c0012c94:	75 62                	jne    c0012cf8 <Semaphore::acquire()+0x9c>
c0012c96:	66 90                	xchg   ax,ax
c0012c98:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012c9d:	48                   	dec    eax
c0012c9e:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012ca3:	75 03                	jne    c0012ca8 <Semaphore::acquire()+0x4c>
c0012ca5:	fb                   	sti    
c0012ca6:	66 90                	xchg   ax,ax
c0012ca8:	83 c4 0c             	add    esp,0xc
c0012cab:	c3                   	ret    
c0012cac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012cb8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012cbb:	85 c9                	test   ecx,ecx
c0012cbd:	74 4d                	je     c0012d0c <Semaphore::acquire()+0xb0>
c0012cbf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012cc2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012cc8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012ccb:	90                   	nop
c0012ccc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012cd7:	68 c0 f0 01 c0       	push   0xc001f0c0
c0012cdc:	e8 fe 6a ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0012ce1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012ce8:	e8 43 fe ff ff       	call   c0012b30 <blockTask(TaskState)>
c0012ced:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	48                   	dec    eax
c0012cf6:	eb 8c                	jmp    c0012c84 <Semaphore::acquire()+0x28>
c0012cf8:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0012d02:	e8 31 fc ff ff       	call   c0012938 <schedule()>
c0012d07:	eb 8f                	jmp    c0012c98 <Semaphore::acquire()+0x3c>
c0012d09:	8d 76 00             	lea    esi,[esi+0x0]
c0012d0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d11:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012d14:	eb b6                	jmp    c0012ccc <Semaphore::acquire()+0x70>
c0012d16:	66 90                	xchg   ax,ax

c0012d18 <taskReturned>:
c0012d18:	83 ec 18             	sub    esp,0x18
c0012d1b:	68 e0 f0 01 c0       	push   0xc001f0e0
c0012d20:	e8 90 c7 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	6a 02                	push   0x2
c0012d2d:	e8 fe fd ff ff       	call   c0012b30 <blockTask(TaskState)>
c0012d32:	fa                   	cli    
c0012d33:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012d39:	e8 fa fb ff ff       	call   c0012938 <schedule()>
c0012d3e:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012d43:	83 c4 10             	add    esp,0x10
c0012d46:	48                   	dec    eax
c0012d47:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012d4c:	85 c0                	test   eax,eax
c0012d4e:	75 d8                	jne    c0012d28 <taskReturned+0x10>
c0012d50:	fb                   	sti    
c0012d51:	eb d5                	jmp    c0012d28 <taskReturned+0x10>
c0012d53:	90                   	nop

c0012d54 <Thr::processFromPID(int)>:
c0012d54:	57                   	push   edi
c0012d55:	56                   	push   esi
c0012d56:	53                   	push   ebx
c0012d57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d5b:	fa                   	cli    
c0012d5c:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	68 64 39 02 c0       	push   0xc0023964
c0012d6a:	e8 3d 9e 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	89 c7                	mov    edi,eax
c0012d74:	eb 16                	jmp    c0012d8c <Thr::processFromPID(int)+0x38>
c0012d76:	66 90                	xchg   ax,ax
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	68 64 39 02 c0       	push   0xc0023964
c0012d80:	e8 27 9e 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	39 f8                	cmp    eax,edi
c0012d8a:	74 4c                	je     c0012dd8 <Thr::processFromPID(int)+0x84>
c0012d8c:	83 ec 0c             	sub    esp,0xc
c0012d8f:	68 64 39 02 c0       	push   0xc0023964
c0012d94:	e8 13 9e 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d99:	c7 04 24 64 39 02 c0 	mov    DWORD PTR [esp],0xc0023964
c0012da0:	89 c3                	mov    ebx,eax
c0012da2:	e8 0d 9e 00 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012da7:	58                   	pop    eax
c0012da8:	5a                   	pop    edx
c0012da9:	53                   	push   ebx
c0012daa:	68 64 39 02 c0       	push   0xc0023964
c0012daf:	e8 b8 9e 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012db4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	39 30                	cmp    DWORD PTR [eax],esi
c0012dbc:	75 ba                	jne    c0012d78 <Thr::processFromPID(int)+0x24>
c0012dbe:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012dc3:	48                   	dec    eax
c0012dc4:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012dc9:	74 09                	je     c0012dd4 <Thr::processFromPID(int)+0x80>
c0012dcb:	90                   	nop
c0012dcc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012dcf:	5b                   	pop    ebx
c0012dd0:	5e                   	pop    esi
c0012dd1:	5f                   	pop    edi
c0012dd2:	c3                   	ret    
c0012dd3:	90                   	nop
c0012dd4:	fb                   	sti    
c0012dd5:	eb f5                	jmp    c0012dcc <Thr::processFromPID(int)+0x78>
c0012dd7:	90                   	nop
c0012dd8:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012ddd:	48                   	dec    eax
c0012dde:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012de3:	75 07                	jne    c0012dec <Thr::processFromPID(int)+0x98>
c0012de5:	fb                   	sti    
c0012de6:	5b                   	pop    ebx
c0012de7:	5e                   	pop    esi
c0012de8:	5f                   	pop    edi
c0012de9:	c3                   	ret    
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	5b                   	pop    ebx
c0012ded:	31 c0                	xor    eax,eax
c0012def:	5e                   	pop    esi
c0012df0:	5f                   	pop    edi
c0012df1:	c3                   	ret    
c0012df2:	66 90                	xchg   ax,ax

c0012df4 <unblockTask(ThreadControlBlock*)>:
c0012df4:	53                   	push   ebx
c0012df5:	83 ec 08             	sub    esp,0x8
c0012df8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dfc:	fa                   	cli    
c0012dfd:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0012e03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012e06:	85 c0                	test   eax,eax
c0012e08:	74 66                	je     c0012e70 <unblockTask(ThreadControlBlock*)+0x7c>
c0012e0a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012e0d:	48                   	dec    eax
c0012e0e:	74 38                	je     c0012e48 <unblockTask(ThreadControlBlock*)+0x54>
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	68 64 39 02 c0       	push   0xc0023964
c0012e18:	e8 8f 9d 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	85 c0                	test   eax,eax
c0012e22:	75 1c                	jne    c0012e40 <unblockTask(ThreadControlBlock*)+0x4c>
c0012e24:	eb 5e                	jmp    c0012e84 <unblockTask(ThreadControlBlock*)+0x90>
c0012e26:	66 90                	xchg   ax,ax
c0012e28:	83 ec 08             	sub    esp,0x8
c0012e2b:	50                   	push   eax
c0012e2c:	68 64 39 02 c0       	push   0xc0023964
c0012e31:	e8 26 a1 00 00       	call   c001cf5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	85 c0                	test   eax,eax
c0012e3b:	74 47                	je     c0012e84 <unblockTask(ThreadControlBlock*)+0x90>
c0012e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e40:	39 c3                	cmp    ebx,eax
c0012e42:	75 e4                	jne    c0012e28 <unblockTask(ThreadControlBlock*)+0x34>
c0012e44:	eb 12                	jmp    c0012e58 <unblockTask(ThreadControlBlock*)+0x64>
c0012e46:	66 90                	xchg   ax,ax
c0012e48:	83 ec 0c             	sub    esp,0xc
c0012e4b:	68 63 f0 01 c0       	push   0xc001f063
c0012e50:	e8 8a 69 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0012e5d:	48                   	dec    eax
c0012e5e:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0012e63:	75 03                	jne    c0012e68 <unblockTask(ThreadControlBlock*)+0x74>
c0012e65:	fb                   	sti    
c0012e66:	66 90                	xchg   ax,ax
c0012e68:	83 c4 08             	add    esp,0x8
c0012e6b:	5b                   	pop    ebx
c0012e6c:	c3                   	ret    
c0012e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	68 4c f0 01 c0       	push   0xc001f04c
c0012e78:	e8 62 69 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0012e7d:	83 c4 10             	add    esp,0x10
c0012e80:	eb d6                	jmp    c0012e58 <unblockTask(ThreadControlBlock*)+0x64>
c0012e82:	66 90                	xchg   ax,ax
c0012e84:	83 ec 08             	sub    esp,0x8
c0012e87:	53                   	push   ebx
c0012e88:	68 64 39 02 c0       	push   0xc0023964
c0012e8d:	e8 da 9d 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	eb c1                	jmp    c0012e58 <unblockTask(ThreadControlBlock*)+0x64>
c0012e97:	90                   	nop

c0012e98 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012e98:	55                   	push   ebp
c0012e99:	57                   	push   edi
c0012e9a:	56                   	push   esi
c0012e9b:	53                   	push   ebx
c0012e9c:	83 ec 1c             	sub    esp,0x1c
c0012e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012ea3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ea6:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0012eac:	85 ff                	test   edi,edi
c0012eae:	7e 24                	jle    c0012ed4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012eb0:	31 f6                	xor    esi,esi
c0012eb2:	66 90                	xchg   ax,ax
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0012ebe:	46                   	inc    esi
c0012ebf:	e8 a1 3b ff ff       	call   c0006a65 <free>
c0012ec4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012ed0:	7f e2                	jg     c0012eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012ed2:	66 90                	xchg   ax,ax
c0012ed4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012ede:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012ee3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012ee6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012ee9:	d3 c0                	rol    eax,cl
c0012eeb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012ef2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012ef5:	89 f7                	mov    edi,esi
c0012ef7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012eff:	0f 85 73 01 00 00    	jne    c0013078 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0012f05:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012f0b:	85 ed                	test   ebp,ebp
c0012f0d:	74 1d                	je     c0012f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012f0f:	83 ec 0c             	sub    esp,0xc
c0012f12:	55                   	push   ebp
c0012f13:	e8 42 c3 ff ff       	call   c000f25a <EnvVarContainer::~EnvVarContainer()>
c0012f18:	59                   	pop    ecx
c0012f19:	5e                   	pop    esi
c0012f1a:	6a 0c                	push   0xc
c0012f1c:	55                   	push   ebp
c0012f1d:	e8 dc 67 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0012f22:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	89 f7                	mov    edi,esi
c0012f2a:	66 90                	xchg   ax,ax
c0012f2c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f32:	85 c0                	test   eax,eax
c0012f34:	0f 84 b2 00 00 00    	je     c0012fec <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0012f3a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012f3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012f41:	31 c9                	xor    ecx,ecx
c0012f43:	eb 17                	jmp    c0012f5c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012f45:	8d 76 00             	lea    esi,[esi+0x0]
c0012f48:	41                   	inc    ecx
c0012f49:	83 f9 10             	cmp    ecx,0x10
c0012f4c:	0f 84 9a 00 00 00    	je     c0012fec <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0012f52:	66 90                	xchg   ax,ax
c0012f54:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f5a:	66 90                	xchg   ax,ax
c0012f5c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0012f63:	d3 fa                	sar    edx,cl
c0012f65:	83 e2 01             	and    edx,0x1
c0012f68:	74 de                	je     c0012f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f6a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012f6d:	01 d2                	add    edx,edx
c0012f6f:	01 ca                	add    edx,ecx
c0012f71:	8d 14 92             	lea    edx,[edx+edx*4]
c0012f74:	01 d0                	add    eax,edx
c0012f76:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012f7c:	83 fd 07             	cmp    ebp,0x7
c0012f7f:	75 c7                	jne    c0012f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f81:	05 40 02 00 00       	add    eax,0x240
c0012f86:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012f89:	83 fd ff             	cmp    ebp,0xffffffff
c0012f8c:	0f 8c ee 00 00 00    	jl     c0013080 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0012f92:	0f 84 ac 01 00 00    	je     c0013144 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0012f98:	85 ed                	test   ebp,ebp
c0012f9a:	0f 84 90 01 00 00    	je     c0013130 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0012fa0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012fa2:	75 a4                	jne    c0012f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012fa4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012faa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012fae:	01 d0                	add    eax,edx
c0012fb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012fb4:	83 ec 0c             	sub    esp,0xc
c0012fb7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012fbd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fc6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012fcd:	50                   	push   eax
c0012fce:	e8 21 fe ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012fd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fdd:	89 f7                	mov    edi,esi
c0012fdf:	41                   	inc    ecx
c0012fe0:	83 f9 10             	cmp    ecx,0x10
c0012fe3:	0f 85 6b ff ff ff    	jne    c0012f54 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0012fec:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012ff2:	85 c0                	test   eax,eax
c0012ff4:	74 62                	je     c0013058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0012ff6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012ffc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013002:	74 54                	je     c0013058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0013004:	83 ec 0c             	sub    esp,0xc
c0013007:	68 64 39 02 c0       	push   0xc0023964
c001300c:	e8 9b 9b 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013011:	c7 04 24 64 39 02 c0 	mov    DWORD PTR [esp],0xc0023964
c0013018:	89 c7                	mov    edi,eax
c001301a:	e8 71 9b 00 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	84 c0                	test   al,al
c0013024:	0f 84 ce 00 00 00    	je     c00130f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c001302a:	66 90                	xchg   ax,ax
c001302c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001302f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013035:	85 d2                	test   edx,edx
c0013037:	74 0f                	je     c0013048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0013039:	83 ec 0c             	sub    esp,0xc
c001303c:	8b 02                	mov    eax,DWORD PTR [edx]
c001303e:	52                   	push   edx
c001303f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013042:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013052:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013055:	8d 76 00             	lea    esi,[esi+0x0]
c0013058:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001305e:	85 db                	test   ebx,ebx
c0013060:	74 16                	je     c0013078 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	53                   	push   ebx
c0013066:	e8 01 5a ff ff       	call   c0008a6c <VAS::~VAS()>
c001306b:	58                   	pop    eax
c001306c:	5a                   	pop    edx
c001306d:	6a 14                	push   0x14
c001306f:	53                   	push   ebx
c0013070:	e8 89 66 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	83 c4 1c             	add    esp,0x1c
c001307b:	5b                   	pop    ebx
c001307c:	5e                   	pop    esi
c001307d:	5f                   	pop    edi
c001307e:	5d                   	pop    ebp
c001307f:	c3                   	ret    
c0013080:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013084:	83 ec 0c             	sub    esp,0xc
c0013087:	68 14 f1 01 c0       	push   0xc001f114
c001308c:	e8 24 c4 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0013091:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	89 f7                	mov    edi,esi
c0013099:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001309d:	e9 a6 fe ff ff       	jmp    c0012f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00130a2:	66 90                	xchg   ax,ax
c00130a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00130aa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00130b0:	75 1e                	jne    c00130d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	68 7c f1 01 c0       	push   0xc001f17c
c00130ba:	e8 20 67 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00130bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00130c6:	e8 65 fa ff ff       	call   c0012b30 <blockTask(TaskState)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	66 90                	xchg   ax,ax
c00130d0:	83 ec 08             	sub    esp,0x8
c00130d3:	56                   	push   esi
c00130d4:	68 64 39 02 c0       	push   0xc0023964
c00130d9:	e8 8e 9b 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00130de:	c7 04 24 64 39 02 c0 	mov    DWORD PTR [esp],0xc0023964
c00130e5:	e8 c2 9a 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	39 f8                	cmp    eax,edi
c00130ef:	0f 84 37 ff ff ff    	je     c001302c <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00130f5:	8d 76 00             	lea    esi,[esi+0x0]
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	68 64 39 02 c0       	push   0xc0023964
c0013100:	e8 a7 9a 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013105:	c7 04 24 64 39 02 c0 	mov    DWORD PTR [esp],0xc0023964
c001310c:	89 c6                	mov    esi,eax
c001310e:	e8 a1 9a 00 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	39 f3                	cmp    ebx,esi
c0013118:	74 b6                	je     c00130d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001311a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001311d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013120:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013126:	75 a8                	jne    c00130d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0013128:	e9 77 ff ff ff       	jmp    c00130a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	68 48 f1 01 c0       	push   0xc001f148
c001313c:	e9 4b ff ff ff       	jmp    c001308c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0013141:	8d 76 00             	lea    esi,[esi+0x0]
c0013144:	8b 36                	mov    esi,DWORD PTR [esi]
c0013146:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001314a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001314d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013150:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013156:	01 d7                	add    edi,edx
c0013158:	89 f8                	mov    eax,edi
c001315a:	e9 51 fe ff ff       	jmp    c0012fb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001315f:	90                   	nop

c0013160 <cleanerTaskFunction(void*)>:
c0013160:	53                   	push   ebx
c0013161:	83 ec 08             	sub    esp,0x8
c0013164:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0013169:	48                   	dec    eax
c001316a:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c001316f:	75 03                	jne    c0013174 <cleanerTaskFunction(void*)+0x14>
c0013171:	fb                   	sti    
c0013172:	66 90                	xchg   ax,ax
c0013174:	fa                   	cli    
c0013175:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c001317a:	80 3d 2c 39 02 c0 00 	cmp    BYTE PTR ds:0xc002392c,0x0
c0013181:	8d 50 01             	lea    edx,[eax+0x1]
c0013184:	89 15 48 39 02 c0    	mov    DWORD PTR ds:0xc0023948,edx
c001318a:	0f 84 ac 00 00 00    	je     c001323c <cleanerTaskFunction(void*)+0xdc>
c0013190:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013195:	85 c0                	test   eax,eax
c0013197:	75 03                	jne    c001319c <cleanerTaskFunction(void*)+0x3c>
c0013199:	fb                   	sti    
c001319a:	66 90                	xchg   ax,ax
c001319c:	c6 05 2c 39 02 c0 00 	mov    BYTE PTR ds:0xc002392c,0x0
c00131a3:	fa                   	cli    
c00131a4:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00131aa:	ff 05 44 39 02 c0    	inc    DWORD PTR ds:0xc0023944
c00131b0:	fa                   	cli    
c00131b1:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00131b7:	eb 2b                	jmp    c00131e4 <cleanerTaskFunction(void*)+0x84>
c00131b9:	8d 76 00             	lea    esi,[esi+0x0]
c00131bc:	83 ec 0c             	sub    esp,0xc
c00131bf:	68 4c 39 02 c0       	push   0xc002394c
c00131c4:	e8 e3 99 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00131c9:	c7 04 24 4c 39 02 c0 	mov    DWORD PTR [esp],0xc002394c
c00131d0:	89 c3                	mov    ebx,eax
c00131d2:	e8 dd 99 00 00       	call   c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00131d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00131da:	e8 b9 fc ff ff       	call   c0012e98 <cleanupTerminatedTask(ThreadControlBlock*)>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	66 90                	xchg   ax,ax
c00131e4:	83 ec 0c             	sub    esp,0xc
c00131e7:	68 4c 39 02 c0       	push   0xc002394c
c00131ec:	e8 9f 99 00 00       	call   c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	84 c0                	test   al,al
c00131f6:	74 c4                	je     c00131bc <cleanerTaskFunction(void*)+0x5c>
c00131f8:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00131fd:	48                   	dec    eax
c00131fe:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013203:	75 03                	jne    c0013208 <cleanerTaskFunction(void*)+0xa8>
c0013205:	fb                   	sti    
c0013206:	66 90                	xchg   ax,ax
c0013208:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c001320d:	48                   	dec    eax
c001320e:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c0013213:	0f 85 4b ff ff ff    	jne    c0013164 <cleanerTaskFunction(void*)+0x4>
c0013219:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c001321e:	85 c0                	test   eax,eax
c0013220:	0f 84 3e ff ff ff    	je     c0013164 <cleanerTaskFunction(void*)+0x4>
c0013226:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c0013230:	e8 03 f7 ff ff       	call   c0012938 <schedule()>
c0013235:	e9 2a ff ff ff       	jmp    c0013164 <cleanerTaskFunction(void*)+0x4>
c001323a:	66 90                	xchg   ax,ax
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	6a 02                	push   0x2
c0013241:	e8 c2 f8 ff ff       	call   c0012b08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	e9 4e ff ff ff       	jmp    c001319c <cleanerTaskFunction(void*)+0x3c>
c001324e:	66 90                	xchg   ax,ax

c0013250 <terminateTask(int)>:
c0013250:	83 ec 14             	sub    esp,0x14
c0013253:	fa                   	cli    
c0013254:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c001325a:	ff 05 44 39 02 c0    	inc    DWORD PTR ds:0xc0023944
c0013260:	fa                   	cli    
c0013261:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0013267:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001326b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013270:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013278:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001327b:	50                   	push   eax
c001327c:	68 4c 39 02 c0       	push   0xc002394c
c0013281:	e8 e6 99 00 00       	call   c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013295:	a1 28 39 02 c0       	mov    eax,ds:0xc0023928
c001329a:	85 c0                	test   eax,eax
c001329c:	74 5e                	je     c00132fc <terminateTask(int)+0xac>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	c6 05 2c 39 02 c0 01 	mov    BYTE PTR ds:0xc002392c,0x1
c00132a8:	50                   	push   eax
c00132a9:	e8 46 fb ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	8d 76 00             	lea    esi,[esi+0x0]
c00132b4:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00132b9:	48                   	dec    eax
c00132ba:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00132bf:	75 03                	jne    c00132c4 <terminateTask(int)+0x74>
c00132c1:	fb                   	sti    
c00132c2:	66 90                	xchg   ax,ax
c00132c4:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c00132c9:	48                   	dec    eax
c00132ca:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c00132cf:	75 0b                	jne    c00132dc <terminateTask(int)+0x8c>
c00132d1:	83 3d 40 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023940,0x0
c00132d8:	75 36                	jne    c0013310 <terminateTask(int)+0xc0>
c00132da:	66 90                	xchg   ax,ax
c00132dc:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00132e1:	48                   	dec    eax
c00132e2:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00132e7:	75 03                	jne    c00132ec <terminateTask(int)+0x9c>
c00132e9:	fb                   	sti    
c00132ea:	66 90                	xchg   ax,ax
c00132ec:	fa                   	cli    
c00132ed:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00132f3:	90                   	nop
c00132f4:	e8 3f f6 ff ff       	call   c0012938 <schedule()>
c00132f9:	eb e1                	jmp    c00132dc <terminateTask(int)+0x8c>
c00132fb:	90                   	nop
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	68 7a f0 01 c0       	push   0xc001f07a
c0013304:	e8 d6 64 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	eb a6                	jmp    c00132b4 <terminateTask(int)+0x64>
c001330e:	66 90                	xchg   ax,ax
c0013310:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c001331a:	eb d8                	jmp    c00132f4 <terminateTask(int)+0xa4>

c001331c <Thr::terminateFromIRQ(int)>:
c001331c:	83 ec 18             	sub    esp,0x18
c001331f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013323:	e8 28 ff ff ff       	call   c0013250 <terminateTask(int)>

c0013328 <Semaphore::release()>:
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001332f:	fa                   	cli    
c0013330:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c0013335:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c001333b:	8d 48 01             	lea    ecx,[eax+0x1]
c001333e:	89 0d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,ecx
c0013344:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013347:	85 c9                	test   ecx,ecx
c0013349:	74 41                	je     c001338c <Semaphore::release()+0x64>
c001334b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001334e:	83 ec 0c             	sub    esp,0xc
c0013351:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013354:	51                   	push   ecx
c0013355:	e8 9a fa ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c001335a:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	48                   	dec    eax
c0013363:	90                   	nop
c0013364:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c0013369:	85 c0                	test   eax,eax
c001336b:	75 0b                	jne    c0013378 <Semaphore::release()+0x50>
c001336d:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c0013372:	85 c0                	test   eax,eax
c0013374:	75 1e                	jne    c0013394 <Semaphore::release()+0x6c>
c0013376:	66 90                	xchg   ax,ax
c0013378:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c001337d:	48                   	dec    eax
c001337e:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013383:	75 03                	jne    c0013388 <Semaphore::release()+0x60>
c0013385:	fb                   	sti    
c0013386:	66 90                	xchg   ax,ax
c0013388:	83 c4 0c             	add    esp,0xc
c001338b:	c3                   	ret    
c001338c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001338f:	eb d3                	jmp    c0013364 <Semaphore::release()+0x3c>
c0013391:	8d 76 00             	lea    esi,[esi+0x0]
c0013394:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c001339e:	e8 95 f5 ff ff       	call   c0012938 <schedule()>
c00133a3:	eb d3                	jmp    c0013378 <Semaphore::release()+0x50>
c00133a5:	8d 76 00             	lea    esi,[esi+0x0]

c00133a8 <__static_initialization_and_destruction_0(int, int)>:
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00133b0:	0f 85 8e 00 00 00    	jne    c0013444 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00133b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00133be:	0f 85 80 00 00 00    	jne    c0013444 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	68 64 39 02 c0       	push   0xc0023964
c00133cc:	e8 47 9b 00 00       	call   c001cf18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	83 ec 04             	sub    esp,0x4
c00133d7:	68 28 fc 01 c0       	push   0xc001fc28
c00133dc:	68 64 39 02 c0       	push   0xc0023964
c00133e1:	68 c8 ce 01 c0       	push   0xc001cec8
c00133e6:	e8 c3 62 ff ff       	call   c00096ae <__cxa_atexit>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	83 ec 0c             	sub    esp,0xc
c00133f1:	68 58 39 02 c0       	push   0xc0023958
c00133f6:	e8 1d 9b 00 00       	call   c001cf18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00133fb:	83 c4 10             	add    esp,0x10
c00133fe:	83 ec 04             	sub    esp,0x4
c0013401:	68 28 fc 01 c0       	push   0xc001fc28
c0013406:	68 58 39 02 c0       	push   0xc0023958
c001340b:	68 c8 ce 01 c0       	push   0xc001cec8
c0013410:	e8 99 62 ff ff       	call   c00096ae <__cxa_atexit>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	68 4c 39 02 c0       	push   0xc002394c
c0013420:	e8 f3 9a 00 00       	call   c001cf18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	83 ec 04             	sub    esp,0x4
c001342b:	68 28 fc 01 c0       	push   0xc001fc28
c0013430:	68 4c 39 02 c0       	push   0xc002394c
c0013435:	68 c8 ce 01 c0       	push   0xc001cec8
c001343a:	e8 6f 62 ff ff       	call   c00096ae <__cxa_atexit>
c001343f:	83 c4 10             	add    esp,0x10
c0013442:	66 90                	xchg   ax,ax
c0013444:	90                   	nop
c0013445:	83 c4 0c             	add    esp,0xc
c0013448:	c3                   	ret    
c0013449:	8d 76 00             	lea    esi,[esi+0x0]

c001344c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	83 ec 08             	sub    esp,0x8
c0013452:	68 ff ff 00 00       	push   0xffff
c0013457:	6a 01                	push   0x1
c0013459:	e8 4a ff ff ff       	call   c00133a8 <__static_initialization_and_destruction_0(int, int)>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	83 c4 0c             	add    esp,0xc
c0013464:	c3                   	ret    

c0013465 <Vm::inbv(unsigned short)>:
c0013465:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013469:	66 81 fa fe fe       	cmp    dx,0xfefe
c001346e:	75 06                	jne    c0013476 <Vm::inbv(unsigned short)+0x11>
c0013470:	a0 ac 39 02 c0       	mov    al,ds:0xc00239ac
c0013475:	c3                   	ret    
c0013476:	ec                   	in     al,dx
c0013477:	c3                   	ret    

c0013478 <Vm::outbv(unsigned short, unsigned char)>:
c0013478:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001347c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013480:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013485:	75 25                	jne    c00134ac <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013487:	8b 0d ac 39 02 c0    	mov    ecx,DWORD PTR ds:0xc00239ac
c001348d:	8d 51 01             	lea    edx,[ecx+0x1]
c0013490:	88 81 c0 39 02 c0    	mov    BYTE PTR [ecx-0x3ffdc640],al
c0013496:	89 15 ac 39 02 c0    	mov    DWORD PTR ds:0xc00239ac,edx
c001349c:	83 fa 20             	cmp    edx,0x20
c001349f:	75 0c                	jne    c00134ad <Vm::outbv(unsigned short, unsigned char)+0x35>
c00134a1:	c7 05 ac 39 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00239ac,0x1f
c00134ab:	c3                   	ret    
c00134ac:	ee                   	out    dx,al
c00134ad:	c3                   	ret    

c00134ae <Vm::realToLinear(unsigned short, unsigned short)>:
c00134ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00134b8:	c1 e0 04             	shl    eax,0x4
c00134bb:	01 d0                	add    eax,edx
c00134bd:	c3                   	ret    

c00134be <Vm::getSegment(unsigned int)>:
c00134be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134c2:	c1 e8 10             	shr    eax,0x10
c00134c5:	c3                   	ret    

c00134c6 <Vm::getOffset(unsigned int)>:
c00134c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134ca:	c3                   	ret    

c00134cb <Vm::mainloop2()>:
c00134cb:	83 ec 18             	sub    esp,0x18
c00134ce:	fa                   	cli    
c00134cf:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00134d5:	6a 02                	push   0x2
c00134d7:	c6 05 a5 39 02 c0 01 	mov    BYTE PTR ds:0xc00239a5,0x1
c00134de:	e8 25 f6 ff ff       	call   c0012b08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00134e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134e8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00134ec:	52                   	push   edx
c00134ed:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00134f1:	52                   	push   edx
c00134f2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00134f6:	52                   	push   edx
c00134f7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00134fb:	50                   	push   eax
c00134fc:	e8 2e cd fe ff       	call   c000022f <goToVM86>
c0013501:	83 c4 2c             	add    esp,0x2c
c0013504:	c3                   	ret    

c0013505 <Vm::mainVm8086Loop(void*)>:
c0013505:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c001350a:	48                   	dec    eax
c001350b:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013510:	75 01                	jne    c0013513 <Vm::mainVm8086Loop(void*)+0xe>
c0013512:	fb                   	sti    
c0013513:	eb b6                	jmp    c00134cb <Vm::mainloop2()>

c0013515 <Vm::mainloop3(unsigned long)>:
c0013515:	83 ec 18             	sub    esp,0x18
c0013518:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001351c:	fa                   	cli    
c001351d:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0013523:	6a 02                	push   0x2
c0013525:	c6 05 a4 39 02 c0 01 	mov    BYTE PTR ds:0xc00239a4,0x1
c001352c:	a3 a0 39 02 c0       	mov    ds:0xc00239a0,eax
c0013531:	e8 d2 f5 ff ff       	call   c0012b08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013536:	83 c4 1c             	add    esp,0x1c
c0013539:	eb 90                	jmp    c00134cb <Vm::mainloop2()>

c001353b <Vm::initialise8086()>:
c001353b:	83 ec 0c             	sub    esp,0xc
c001353e:	68 80 00 00 00       	push   0x80
c0013543:	6a 00                	push   0x0
c0013545:	68 05 35 01 c0       	push   0xc0013505
c001354a:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c0013550:	e8 c7 f1 ff ff       	call   c001271c <Process::createThread(void (*)(void*), void*, int)>
c0013555:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001355c:	a3 a8 39 02 c0       	mov    ds:0xc00239a8,eax
c0013561:	68 00 01 00 00       	push   0x100
c0013566:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c001356b:	6a 00                	push   0x0
c001356d:	6a 00                	push   0x0
c001356f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013575:	e8 4e 59 ff ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001357a:	83 c4 2c             	add    esp,0x2c
c001357d:	c3                   	ret    

c001357e <Vm::finish8086()>:
c001357e:	53                   	push   ebx
c001357f:	83 ec 08             	sub    esp,0x8
c0013582:	fa                   	cli    
c0013583:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0013589:	80 3d a4 39 02 c0 00 	cmp    BYTE PTR ds:0xc00239a4,0x0
c0013590:	75 15                	jne    c00135a7 <Vm::finish8086()+0x29>
c0013592:	e8 a1 f3 ff ff       	call   c0012938 <schedule()>
c0013597:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c001359c:	48                   	dec    eax
c001359d:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00135a2:	75 de                	jne    c0013582 <Vm::finish8086()+0x4>
c00135a4:	fb                   	sti    
c00135a5:	eb db                	jmp    c0013582 <Vm::finish8086()+0x4>
c00135a7:	83 ec 0c             	sub    esp,0xc
c00135aa:	8b 1d a0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239a0
c00135b0:	ff 35 a8 39 02 c0    	push   DWORD PTR ds:0xc00239a8
c00135b6:	c6 05 a4 39 02 c0 00 	mov    BYTE PTR ds:0xc00239a4,0x0
c00135bd:	e8 32 f8 ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c00135c2:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00135c7:	83 c4 10             	add    esp,0x10
c00135ca:	8d 50 ff             	lea    edx,[eax-0x1]
c00135cd:	89 15 48 39 02 c0    	mov    DWORD PTR ds:0xc0023948,edx
c00135d3:	85 d2                	test   edx,edx
c00135d5:	75 01                	jne    c00135d8 <Vm::finish8086()+0x5a>
c00135d7:	fb                   	sti    
c00135d8:	89 d8                	mov    eax,ebx
c00135da:	83 c4 08             	add    esp,0x8
c00135dd:	5b                   	pop    ebx
c00135de:	c3                   	ret    

c00135df <Vm::getOutput8086(unsigned char*)>:
c00135df:	57                   	push   edi
c00135e0:	8b 0d ac 39 02 c0    	mov    ecx,DWORD PTR ds:0xc00239ac
c00135e6:	56                   	push   esi
c00135e7:	be c0 39 02 c0       	mov    esi,0xc00239c0
c00135ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00135f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135f2:	a1 ac 39 02 c0       	mov    eax,ds:0xc00239ac
c00135f7:	5e                   	pop    esi
c00135f8:	c7 05 ac 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239ac,0x0
c0013602:	5f                   	pop    edi
c0013603:	c3                   	ret    

c0013604 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013604:	55                   	push   ebp
c0013605:	57                   	push   edi
c0013606:	56                   	push   esi
c0013607:	53                   	push   ebx
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001360f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013613:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001361b:	fa                   	cli    
c001361c:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c0013622:	80 3d a5 39 02 c0 00 	cmp    BYTE PTR ds:0xc00239a5,0x0
c0013629:	75 15                	jne    c0013640 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001362b:	e8 08 f3 ff ff       	call   c0012938 <schedule()>
c0013630:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0013635:	48                   	dec    eax
c0013636:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c001363b:	75 de                	jne    c001361b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001363d:	fb                   	sti    
c001363e:	eb db                	jmp    c001361b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013640:	a1 a8 39 02 c0       	mov    eax,ds:0xc00239a8
c0013645:	c7 05 ac 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239ac,0x0
c001364f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0013653:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0013657:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001365b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001365f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013663:	0f b7 ff             	movzx  edi,di
c0013666:	0f b7 f6             	movzx  esi,si
c0013669:	50                   	push   eax
c001366a:	6a 20                	push   0x20
c001366c:	6a 00                	push   0x0
c001366e:	68 c0 39 02 c0       	push   0xc00239c0
c0013673:	e8 30 ce fe ff       	call   c00004a8 <memset>
c0013678:	5a                   	pop    edx
c0013679:	59                   	pop    ecx
c001367a:	57                   	push   edi
c001367b:	56                   	push   esi
c001367c:	e8 2d fe ff ff       	call   c00134ae <Vm::realToLinear(unsigned short, unsigned short)>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	89 c7                	mov    edi,eax
c0013686:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001368a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001368e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013690:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0013695:	c6 05 a5 39 02 c0 00 	mov    BYTE PTR ds:0xc00239a5,0x0
c001369c:	48                   	dec    eax
c001369d:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00136a2:	75 01                	jne    c00136a5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00136a4:	fb                   	sti    
c00136a5:	83 ec 0c             	sub    esp,0xc
c00136a8:	ff 35 a8 39 02 c0    	push   DWORD PTR ds:0xc00239a8
c00136ae:	e8 41 f7 ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	b0 01                	mov    al,0x1
c00136b8:	5b                   	pop    ebx
c00136b9:	5e                   	pop    esi
c00136ba:	5f                   	pop    edi
c00136bb:	5d                   	pop    ebp
c00136bc:	c3                   	ret    

c00136bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00136bd:	55                   	push   ebp
c00136be:	57                   	push   edi
c00136bf:	56                   	push   esi
c00136c0:	53                   	push   ebx
c00136c1:	83 ec 2c             	sub    esp,0x2c
c00136c4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00136c8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00136cc:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00136d0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00136d4:	fa                   	cli    
c00136d5:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c00136db:	0f b6 35 a5 39 02 c0 	movzx  esi,BYTE PTR ds:0xc00239a5
c00136e2:	89 f0                	mov    eax,esi
c00136e4:	84 c0                	test   al,al
c00136e6:	75 1d                	jne    c0013705 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00136e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136ec:	e8 47 f2 ff ff       	call   c0012938 <schedule()>
c00136f1:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00136f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136fa:	48                   	dec    eax
c00136fb:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013700:	75 d2                	jne    c00136d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013702:	fb                   	sti    
c0013703:	eb cf                	jmp    c00136d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013705:	a1 a8 39 02 c0       	mov    eax,ds:0xc00239a8
c001370a:	c7 05 ac 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239ac,0x0
c0013714:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013718:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001371c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013720:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013724:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013728:	50                   	push   eax
c0013729:	6a 20                	push   0x20
c001372b:	6a 00                	push   0x0
c001372d:	68 c0 39 02 c0       	push   0xc00239c0
c0013732:	e8 71 cd fe ff       	call   c00004a8 <memset>
c0013737:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001373e:	e8 12 33 ff ff       	call   c0006a55 <malloc>
c0013743:	83 c4 0c             	add    esp,0xc
c0013746:	89 c3                	mov    ebx,eax
c0013748:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c001374e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013752:	50                   	push   eax
c0013753:	e8 f2 65 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	85 db                	test   ebx,ebx
c001375d:	75 0a                	jne    c0013769 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001375f:	83 ec 0c             	sub    esp,0xc
c0013762:	68 a4 f1 01 c0       	push   0xc001f1a4
c0013767:	eb 3e                	jmp    c00137a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013769:	50                   	push   eax
c001376a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001376e:	50                   	push   eax
c001376f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013773:	50                   	push   eax
c0013774:	53                   	push   ebx
c0013775:	e8 36 69 ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c001377a:	83 c4 10             	add    esp,0x10
c001377d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013782:	74 0a                	je     c001378e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	68 b8 f1 01 c0       	push   0xc001f1b8
c001378c:	eb 19                	jmp    c00137a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001378e:	51                   	push   ecx
c001378f:	51                   	push   ecx
c0013790:	6a 01                	push   0x1
c0013792:	53                   	push   ebx
c0013793:	e8 6c 66 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	85 c0                	test   eax,eax
c001379d:	74 24                	je     c00137c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001379f:	83 ec 0c             	sub    esp,0xc
c00137a2:	68 d1 f1 01 c0       	push   0xc001f1d1
c00137a7:	e8 09 bd ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00137ac:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	48                   	dec    eax
c00137b5:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00137ba:	85 c0                	test   eax,eax
c00137bc:	75 01                	jne    c00137bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00137be:	fb                   	sti    
c00137bf:	31 f6                	xor    esi,esi
c00137c1:	eb 58                	jmp    c001381b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00137c3:	0f b7 ed             	movzx  ebp,bp
c00137c6:	50                   	push   eax
c00137c7:	0f b7 ff             	movzx  edi,di
c00137ca:	50                   	push   eax
c00137cb:	55                   	push   ebp
c00137cc:	57                   	push   edi
c00137cd:	e8 dc fc ff ff       	call   c00134ae <Vm::realToLinear(unsigned short, unsigned short)>
c00137d2:	5a                   	pop    edx
c00137d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00137d5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00137d9:	51                   	push   ecx
c00137da:	50                   	push   eax
c00137db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137e3:	53                   	push   ebx
c00137e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00137e7:	83 c4 14             	add    esp,0x14
c00137ea:	53                   	push   ebx
c00137eb:	e8 72 66 ff ff       	call   c0009e62 <File::close()>
c00137f0:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	48                   	dec    eax
c00137f9:	c6 05 a5 39 02 c0 00 	mov    BYTE PTR ds:0xc00239a5,0x0
c0013800:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0013805:	85 c0                	test   eax,eax
c0013807:	75 01                	jne    c001380a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013809:	fb                   	sti    
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	ff 35 a8 39 02 c0    	push   DWORD PTR ds:0xc00239a8
c0013813:	e8 dc f5 ff ff       	call   c0012df4 <unblockTask(ThreadControlBlock*)>
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 c4 2c             	add    esp,0x2c
c001381e:	89 f0                	mov    eax,esi
c0013820:	5b                   	pop    ebx
c0013821:	5e                   	pop    esi
c0013822:	5f                   	pop    edi
c0013823:	5d                   	pop    ebp
c0013824:	c3                   	ret    

c0013825 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013825:	57                   	push   edi
c0013826:	56                   	push   esi
c0013827:	53                   	push   ebx
c0013828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001382c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013830:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013834:	83 e8 06             	sub    eax,0x6
c0013837:	0f b7 c0             	movzx  eax,ax
c001383a:	50                   	push   eax
c001383b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013840:	50                   	push   eax
c0013841:	e8 68 fc ff ff       	call   c00134ae <Vm::realToLinear(unsigned short, unsigned short)>
c0013846:	5a                   	pop    edx
c0013847:	5e                   	pop    esi
c0013848:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001384b:	8d 56 fa             	lea    edx,[esi-0x6]
c001384e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0013854:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0013857:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001385a:	83 c2 02             	add    edx,0x2
c001385d:	66 89 10             	mov    WORD PTR [eax],dx
c0013860:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0013863:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013867:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001386a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001386e:	89 d6                	mov    esi,edx
c0013870:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0013876:	66 81 e6 ff fd       	and    si,0xfdff
c001387b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001387f:	74 07                	je     c0013888 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0013881:	89 d6                	mov    esi,edx
c0013883:	66 81 ce 00 02       	or     si,0x200
c0013888:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001388c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013891:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013895:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001389d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00138a0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00138a8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00138ab:	5b                   	pop    ebx
c00138ac:	5e                   	pop    esi
c00138ad:	5f                   	pop    edi
c00138ae:	c3                   	ret    

c00138af <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00138af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138b9:	c1 e0 04             	shl    eax,0x4
c00138bc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00138bf:	c3                   	ret    

c00138c0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00138c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138ca:	c1 e0 04             	shl    eax,0x4
c00138cd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00138d1:	c3                   	ret    

c00138d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00138d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138dc:	c1 e0 04             	shl    eax,0x4
c00138df:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00138e2:	c3                   	ret    

c00138e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00138e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138ed:	c1 e0 04             	shl    eax,0x4
c00138f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00138f4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00138f7:	c3                   	ret    

c00138f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00138f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013902:	c1 e0 04             	shl    eax,0x4
c0013905:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013909:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001390d:	c3                   	ret    

c001390e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001390e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013913:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013918:	c1 e0 04             	shl    eax,0x4
c001391b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001391f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013922:	c3                   	ret    

c0013923 <Vm::faultHandler(regs*)>:
c0013923:	55                   	push   ebp
c0013924:	57                   	push   edi
c0013925:	56                   	push   esi
c0013926:	53                   	push   ebx
c0013927:	83 ec 1c             	sub    esp,0x1c
c001392a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001392e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013931:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0013935:	0f b7 f8             	movzx  edi,ax
c0013938:	52                   	push   edx
c0013939:	0f b7 c0             	movzx  eax,ax
c001393c:	50                   	push   eax
c001393d:	e8 6c fb ff ff       	call   c00134ae <Vm::realToLinear(unsigned short, unsigned short)>
c0013942:	5a                   	pop    edx
c0013943:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0013946:	59                   	pop    ecx
c0013947:	89 c1                	mov    ecx,eax
c0013949:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001394c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013950:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013955:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013959:	0f b7 c5             	movzx  eax,bp
c001395c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013960:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013964:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013968:	e8 41 fb ff ff       	call   c00134ae <Vm::realToLinear(unsigned short, unsigned short)>
c001396d:	5e                   	pop    esi
c001396e:	be 06 00 00 00       	mov    esi,0x6
c0013973:	5a                   	pop    edx
c0013974:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013979:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001397e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013981:	80 fa 9d             	cmp    dl,0x9d
c0013984:	0f 84 2c 02 00 00    	je     c0013bb6 <Vm::faultHandler(regs*)+0x293>
c001398a:	0f 87 91 00 00 00    	ja     c0013a21 <Vm::faultHandler(regs*)+0xfe>
c0013990:	80 fa 66             	cmp    dl,0x66
c0013993:	0f 84 98 01 00 00    	je     c0013b31 <Vm::faultHandler(regs*)+0x20e>
c0013999:	77 47                	ja     c00139e2 <Vm::faultHandler(regs*)+0xbf>
c001399b:	80 fa 36             	cmp    dl,0x36
c001399e:	0f 84 80 01 00 00    	je     c0013b24 <Vm::faultHandler(regs*)+0x201>
c00139a4:	77 1a                	ja     c00139c0 <Vm::faultHandler(regs*)+0x9d>
c00139a6:	80 fa 26             	cmp    dl,0x26
c00139a9:	0f 84 4e 01 00 00    	je     c0013afd <Vm::faultHandler(regs*)+0x1da>
c00139af:	80 fa 2e             	cmp    dl,0x2e
c00139b2:	0f 85 e2 05 00 00    	jne    c0013f9a <Vm::faultHandler(regs*)+0x677>
c00139b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139bb:	31 f6                	xor    esi,esi
c00139bd:	41                   	inc    ecx
c00139be:	eb be                	jmp    c001397e <Vm::faultHandler(regs*)+0x5b>
c00139c0:	80 fa 64             	cmp    dl,0x64
c00139c3:	0f 84 41 01 00 00    	je     c0013b0a <Vm::faultHandler(regs*)+0x1e7>
c00139c9:	0f 87 48 01 00 00    	ja     c0013b17 <Vm::faultHandler(regs*)+0x1f4>
c00139cf:	80 fa 3e             	cmp    dl,0x3e
c00139d2:	0f 85 c2 05 00 00    	jne    c0013f9a <Vm::faultHandler(regs*)+0x677>
c00139d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139db:	be 01 00 00 00       	mov    esi,0x1
c00139e0:	eb db                	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c00139e2:	80 fa 6d             	cmp    dl,0x6d
c00139e5:	0f 84 ec 02 00 00    	je     c0013cd7 <Vm::faultHandler(regs*)+0x3b4>
c00139eb:	77 17                	ja     c0013a04 <Vm::faultHandler(regs*)+0xe1>
c00139ed:	80 fa 67             	cmp    dl,0x67
c00139f0:	0f 84 48 01 00 00    	je     c0013b3e <Vm::faultHandler(regs*)+0x21b>
c00139f6:	80 fa 6c             	cmp    dl,0x6c
c00139f9:	0f 84 69 02 00 00    	je     c0013c68 <Vm::faultHandler(regs*)+0x345>
c00139ff:	e9 96 05 00 00       	jmp    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013a04:	80 fa 6f             	cmp    dl,0x6f
c0013a07:	0f 84 f4 03 00 00    	je     c0013e01 <Vm::faultHandler(regs*)+0x4de>
c0013a0d:	0f 82 59 03 00 00    	jb     c0013d6c <Vm::faultHandler(regs*)+0x449>
c0013a13:	80 fa 9c             	cmp    dl,0x9c
c0013a16:	0f 84 2f 01 00 00    	je     c0013b4b <Vm::faultHandler(regs*)+0x228>
c0013a1c:	e9 79 05 00 00       	jmp    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013a21:	80 fa ec             	cmp    dl,0xec
c0013a24:	0f 84 14 05 00 00    	je     c0013f3e <Vm::faultHandler(regs*)+0x61b>
c0013a2a:	77 7b                	ja     c0013aa7 <Vm::faultHandler(regs*)+0x184>
c0013a2c:	80 fa e4             	cmp    dl,0xe4
c0013a2f:	0f 84 93 04 00 00    	je     c0013ec8 <Vm::faultHandler(regs*)+0x5a5>
c0013a35:	77 53                	ja     c0013a8a <Vm::faultHandler(regs*)+0x167>
c0013a37:	80 fa cd             	cmp    dl,0xcd
c0013a3a:	0f 84 d9 01 00 00    	je     c0013c19 <Vm::faultHandler(regs*)+0x2f6>
c0013a40:	80 fa cf             	cmp    dl,0xcf
c0013a43:	0f 85 51 05 00 00    	jne    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013a49:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013a4c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013a4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013a53:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013a56:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013a5a:	81 ca 00 02 02 00    	or     edx,0x20200
c0013a60:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013a63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013a67:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a6d:	66 c1 e8 09          	shr    ax,0x9
c0013a71:	83 e0 01             	and    eax,0x1
c0013a74:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a77:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a7a:	83 c0 06             	add    eax,0x6
c0013a7d:	25 ff ff 00 00       	and    eax,0xffff
c0013a82:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013a85:	e9 0c 05 00 00       	jmp    c0013f96 <Vm::faultHandler(regs*)+0x673>
c0013a8a:	80 fa e6             	cmp    dl,0xe6
c0013a8d:	0f 84 7f 04 00 00    	je     c0013f12 <Vm::faultHandler(regs*)+0x5ef>
c0013a93:	0f 82 4b 04 00 00    	jb     c0013ee4 <Vm::faultHandler(regs*)+0x5c1>
c0013a99:	80 fa e7             	cmp    dl,0xe7
c0013a9c:	0f 84 87 04 00 00    	je     c0013f29 <Vm::faultHandler(regs*)+0x606>
c0013aa2:	e9 f3 04 00 00       	jmp    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013aa7:	80 fa ef             	cmp    dl,0xef
c0013aaa:	0f 84 d1 04 00 00    	je     c0013f81 <Vm::faultHandler(regs*)+0x65e>
c0013ab0:	77 28                	ja     c0013ada <Vm::faultHandler(regs*)+0x1b7>
c0013ab2:	80 fa ed             	cmp    dl,0xed
c0013ab5:	0f 84 9f 04 00 00    	je     c0013f5a <Vm::faultHandler(regs*)+0x637>
c0013abb:	80 fa ee             	cmp    dl,0xee
c0013abe:	0f 85 d6 04 00 00    	jne    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013ac4:	50                   	push   eax
c0013ac5:	50                   	push   eax
c0013ac6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013aca:	50                   	push   eax
c0013acb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013acf:	50                   	push   eax
c0013ad0:	e8 a3 f9 ff ff       	call   c0013478 <Vm::outbv(unsigned short, unsigned char)>
c0013ad5:	e9 9f 04 00 00       	jmp    c0013f79 <Vm::faultHandler(regs*)+0x656>
c0013ada:	80 fa fa             	cmp    dl,0xfa
c0013add:	0f 84 69 01 00 00    	je     c0013c4c <Vm::faultHandler(regs*)+0x329>
c0013ae3:	80 fa fb             	cmp    dl,0xfb
c0013ae6:	0f 84 6e 01 00 00    	je     c0013c5a <Vm::faultHandler(regs*)+0x337>
c0013aec:	80 fa f3             	cmp    dl,0xf3
c0013aef:	0f 85 a5 04 00 00    	jne    c0013f9a <Vm::faultHandler(regs*)+0x677>
c0013af5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013af8:	e9 c0 fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013afd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b00:	be 02 00 00 00       	mov    esi,0x2
c0013b05:	e9 b3 fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b0d:	be 03 00 00 00       	mov    esi,0x3
c0013b12:	e9 a6 fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b1a:	be 04 00 00 00       	mov    esi,0x4
c0013b1f:	e9 99 fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b24:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b27:	be 05 00 00 00       	mov    esi,0x5
c0013b2c:	e9 8c fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b34:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013b39:	e9 7f fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b41:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013b46:	e9 72 fe ff ff       	jmp    c00139bd <Vm::faultHandler(regs*)+0x9a>
c0013b4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013b4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b52:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b57:	74 30                	je     c0013b89 <Vm::faultHandler(regs*)+0x266>
c0013b59:	83 e9 04             	sub    ecx,0x4
c0013b5c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013b62:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013b68:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013b6b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013b6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b74:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013b78:	0f 84 15 04 00 00    	je     c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013b7e:	80 ce 02             	or     dh,0x2
c0013b81:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013b84:	e9 0a 04 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013b89:	83 e9 02             	sub    ecx,0x2
c0013b8c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013b92:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013b95:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013b99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b9f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013ba3:	74 05                	je     c0013baa <Vm::faultHandler(regs*)+0x287>
c0013ba5:	80 ce 02             	or     dh,0x2
c0013ba8:	eb 03                	jmp    c0013bad <Vm::faultHandler(regs*)+0x28a>
c0013baa:	80 e6 fd             	and    dh,0xfd
c0013bad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013bb1:	e9 dd 03 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013bb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013bbb:	74 2a                	je     c0013be7 <Vm::faultHandler(regs*)+0x2c4>
c0013bbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bbf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013bc5:	81 ca 00 02 02 00    	or     edx,0x20200
c0013bcb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bd0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bd6:	c1 e8 09             	shr    eax,0x9
c0013bd9:	83 e0 01             	and    eax,0x1
c0013bdc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013bdf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013be2:	83 c0 04             	add    eax,0x4
c0013be5:	eb 25                	jmp    c0013c0c <Vm::faultHandler(regs*)+0x2e9>
c0013be7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013bea:	81 ca 00 02 02 00    	or     edx,0x20200
c0013bf0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013bf3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013bf6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bfc:	66 c1 e8 09          	shr    ax,0x9
c0013c00:	83 e0 01             	and    eax,0x1
c0013c03:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013c06:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013c09:	83 c0 02             	add    eax,0x2
c0013c0c:	25 ff ff 00 00       	and    eax,0xffff
c0013c11:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013c14:	e9 7a 03 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013c19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c1d:	3c ee                	cmp    al,0xee
c0013c1f:	75 10                	jne    c0013c31 <Vm::faultHandler(regs*)+0x30e>
c0013c21:	83 ec 0c             	sub    esp,0xc
c0013c24:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013c27:	e8 e9 f8 ff ff       	call   c0013515 <Vm::mainloop3(unsigned long)>
c0013c2c:	e9 4b 03 00 00       	jmp    c0013f7c <Vm::faultHandler(regs*)+0x659>
c0013c31:	83 ec 0c             	sub    esp,0xc
c0013c34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3c:	51                   	push   ecx
c0013c3d:	50                   	push   eax
c0013c3e:	53                   	push   ebx
c0013c3f:	e8 e1 fb ff ff       	call   c0013825 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013c44:	83 c4 20             	add    esp,0x20
c0013c47:	e9 4a 03 00 00       	jmp    c0013f96 <Vm::faultHandler(regs*)+0x673>
c0013c4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c51:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013c55:	e9 39 03 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013c63:	e9 2b 03 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013c68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013c6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c70:	74 2b                	je     c0013c9d <Vm::faultHandler(regs*)+0x37a>
c0013c72:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013c79:	76 22                	jbe    c0013c9d <Vm::faultHandler(regs*)+0x37a>
c0013c7b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c7f:	50                   	push   eax
c0013c80:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c84:	50                   	push   eax
c0013c85:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c89:	50                   	push   eax
c0013c8a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c8e:	50                   	push   eax
c0013c8f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c93:	50                   	push   eax
c0013c94:	6a 6c                	push   0x6c
c0013c96:	6a 6c                	push   0x6c
c0013c98:	e9 b9 01 00 00       	jmp    c0013e56 <Vm::faultHandler(regs*)+0x533>
c0013c9d:	83 ec 0c             	sub    esp,0xc
c0013ca0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013ca4:	0f b7 f6             	movzx  esi,si
c0013ca7:	50                   	push   eax
c0013ca8:	e8 b8 f7 ff ff       	call   c0013465 <Vm::inbv(unsigned short)>
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	0f b6 c0             	movzx  eax,al
c0013cb3:	50                   	push   eax
c0013cb4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013cb8:	50                   	push   eax
c0013cb9:	56                   	push   esi
c0013cba:	e8 24 fc ff ff       	call   c00138e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013cc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013cc9:	74 03                	je     c0013cce <Vm::faultHandler(regs*)+0x3ab>
c0013ccb:	48                   	dec    eax
c0013ccc:	eb 01                	jmp    c0013ccf <Vm::faultHandler(regs*)+0x3ac>
c0013cce:	40                   	inc    eax
c0013ccf:	0f b7 c0             	movzx  eax,ax
c0013cd2:	e9 8d 00 00 00       	jmp    c0013d64 <Vm::faultHandler(regs*)+0x441>
c0013cd7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013cda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013cdd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ce2:	74 29                	je     c0013d0d <Vm::faultHandler(regs*)+0x3ea>
c0013ce4:	3d ff ff 00 00       	cmp    eax,0xffff
c0013ce9:	76 22                	jbe    c0013d0d <Vm::faultHandler(regs*)+0x3ea>
c0013ceb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013cef:	50                   	push   eax
c0013cf0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013cf4:	50                   	push   eax
c0013cf5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013cf9:	50                   	push   eax
c0013cfa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013cfe:	50                   	push   eax
c0013cff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d03:	50                   	push   eax
c0013d04:	6a 6d                	push   0x6d
c0013d06:	6a 6d                	push   0x6d
c0013d08:	e9 49 01 00 00       	jmp    c0013e56 <Vm::faultHandler(regs*)+0x533>
c0013d0d:	0f b7 c8             	movzx  ecx,ax
c0013d10:	0f b7 f6             	movzx  esi,si
c0013d13:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013d16:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d1b:	74 20                	je     c0013d3d <Vm::faultHandler(regs*)+0x41a>
c0013d1d:	ed                   	in     eax,dx
c0013d1e:	55                   	push   ebp
c0013d1f:	50                   	push   eax
c0013d20:	51                   	push   ecx
c0013d21:	56                   	push   esi
c0013d22:	e8 e7 fb ff ff       	call   c001390e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013d27:	83 c4 10             	add    esp,0x10
c0013d2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013d31:	74 05                	je     c0013d38 <Vm::faultHandler(regs*)+0x415>
c0013d33:	83 e8 04             	sub    eax,0x4
c0013d36:	eb 27                	jmp    c0013d5f <Vm::faultHandler(regs*)+0x43c>
c0013d38:	83 c0 04             	add    eax,0x4
c0013d3b:	eb 22                	jmp    c0013d5f <Vm::faultHandler(regs*)+0x43c>
c0013d3d:	66 ed                	in     ax,dx
c0013d3f:	0f b7 c0             	movzx  eax,ax
c0013d42:	57                   	push   edi
c0013d43:	50                   	push   eax
c0013d44:	51                   	push   ecx
c0013d45:	56                   	push   esi
c0013d46:	e8 ad fb ff ff       	call   c00138f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013d55:	74 05                	je     c0013d5c <Vm::faultHandler(regs*)+0x439>
c0013d57:	83 e8 02             	sub    eax,0x2
c0013d5a:	eb 03                	jmp    c0013d5f <Vm::faultHandler(regs*)+0x43c>
c0013d5c:	83 c0 02             	add    eax,0x2
c0013d5f:	25 ff ff 00 00       	and    eax,0xffff
c0013d64:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013d67:	e9 27 02 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013d6c:	8d 46 ff             	lea    eax,[esi-0x1]
c0013d6f:	3c 05                	cmp    al,0x5
c0013d71:	77 24                	ja     c0013d97 <Vm::faultHandler(regs*)+0x474>
c0013d73:	0f b6 c0             	movzx  eax,al
c0013d76:	ff 24 85 44 f2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0dbc]
c0013d7d:	0f b7 fd             	movzx  edi,bp
c0013d80:	eb 15                	jmp    c0013d97 <Vm::faultHandler(regs*)+0x474>
c0013d82:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013d86:	eb 0f                	jmp    c0013d97 <Vm::faultHandler(regs*)+0x474>
c0013d88:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013d8c:	eb 09                	jmp    c0013d97 <Vm::faultHandler(regs*)+0x474>
c0013d8e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013d92:	eb 03                	jmp    c0013d97 <Vm::faultHandler(regs*)+0x474>
c0013d94:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013d97:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013d9a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d9f:	74 29                	je     c0013dca <Vm::faultHandler(regs*)+0x4a7>
c0013da1:	3d ff ff 00 00       	cmp    eax,0xffff
c0013da6:	76 22                	jbe    c0013dca <Vm::faultHandler(regs*)+0x4a7>
c0013da8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013dac:	50                   	push   eax
c0013dad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013db1:	50                   	push   eax
c0013db2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013db6:	50                   	push   eax
c0013db7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013dbb:	50                   	push   eax
c0013dbc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013dc0:	50                   	push   eax
c0013dc1:	6a 6e                	push   0x6e
c0013dc3:	6a 6e                	push   0x6e
c0013dc5:	e9 8c 00 00 00       	jmp    c0013e56 <Vm::faultHandler(regs*)+0x533>
c0013dca:	0f b7 c0             	movzx  eax,ax
c0013dcd:	52                   	push   edx
c0013dce:	52                   	push   edx
c0013dcf:	50                   	push   eax
c0013dd0:	57                   	push   edi
c0013dd1:	e8 d9 fa ff ff       	call   c00138af <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013dd6:	59                   	pop    ecx
c0013dd7:	0f b6 c0             	movzx  eax,al
c0013dda:	5e                   	pop    esi
c0013ddb:	50                   	push   eax
c0013ddc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013de0:	50                   	push   eax
c0013de1:	e8 92 f6 ff ff       	call   c0013478 <Vm::outbv(unsigned short, unsigned char)>
c0013de6:	83 c4 10             	add    esp,0x10
c0013de9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013dec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013df0:	74 03                	je     c0013df5 <Vm::faultHandler(regs*)+0x4d2>
c0013df2:	48                   	dec    eax
c0013df3:	eb 01                	jmp    c0013df6 <Vm::faultHandler(regs*)+0x4d3>
c0013df5:	40                   	inc    eax
c0013df6:	0f b7 c0             	movzx  eax,ax
c0013df9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013dfc:	e9 92 01 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013e01:	8d 46 ff             	lea    eax,[esi-0x1]
c0013e04:	3c 05                	cmp    al,0x5
c0013e06:	77 1f                	ja     c0013e27 <Vm::faultHandler(regs*)+0x504>
c0013e08:	0f b6 c0             	movzx  eax,al
c0013e0b:	ff 24 85 5c f2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0da4]
c0013e12:	89 ef                	mov    edi,ebp
c0013e14:	eb 11                	jmp    c0013e27 <Vm::faultHandler(regs*)+0x504>
c0013e16:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013e19:	eb 0c                	jmp    c0013e27 <Vm::faultHandler(regs*)+0x504>
c0013e1b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013e1e:	eb 07                	jmp    c0013e27 <Vm::faultHandler(regs*)+0x504>
c0013e20:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013e23:	eb 02                	jmp    c0013e27 <Vm::faultHandler(regs*)+0x504>
c0013e25:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013e27:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013e2a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013e2f:	74 37                	je     c0013e68 <Vm::faultHandler(regs*)+0x545>
c0013e31:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013e37:	76 2f                	jbe    c0013e68 <Vm::faultHandler(regs*)+0x545>
c0013e39:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e3d:	50                   	push   eax
c0013e3e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e42:	50                   	push   eax
c0013e43:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e47:	50                   	push   eax
c0013e48:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e4c:	50                   	push   eax
c0013e4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e51:	50                   	push   eax
c0013e52:	6a 6f                	push   0x6f
c0013e54:	6a 6f                	push   0x6f
c0013e56:	68 ea f1 01 c0       	push   0xc001f1ea
c0013e5b:	e8 7f 59 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0013e60:	83 c4 20             	add    esp,0x20
c0013e63:	e9 86 01 00 00       	jmp    c0013fee <Vm::faultHandler(regs*)+0x6cb>
c0013e68:	0f b7 d7             	movzx  edx,di
c0013e6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013e6e:	0f b7 c6             	movzx  eax,si
c0013e71:	81 e1 00 04 00 00    	and    ecx,0x400
c0013e77:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013e7a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e7f:	74 1d                	je     c0013e9e <Vm::faultHandler(regs*)+0x57b>
c0013e81:	55                   	push   ebp
c0013e82:	55                   	push   ebp
c0013e83:	50                   	push   eax
c0013e84:	52                   	push   edx
c0013e85:	e8 48 fa ff ff       	call   c00138d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013e8a:	83 c4 10             	add    esp,0x10
c0013e8d:	89 fa                	mov    edx,edi
c0013e8f:	ef                   	out    dx,eax
c0013e90:	85 c9                	test   ecx,ecx
c0013e92:	74 05                	je     c0013e99 <Vm::faultHandler(regs*)+0x576>
c0013e94:	83 ee 04             	sub    esi,0x4
c0013e97:	eb 21                	jmp    c0013eba <Vm::faultHandler(regs*)+0x597>
c0013e99:	83 c6 04             	add    esi,0x4
c0013e9c:	eb 1c                	jmp    c0013eba <Vm::faultHandler(regs*)+0x597>
c0013e9e:	55                   	push   ebp
c0013e9f:	55                   	push   ebp
c0013ea0:	50                   	push   eax
c0013ea1:	52                   	push   edx
c0013ea2:	e8 19 fa ff ff       	call   c00138c0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	89 fa                	mov    edx,edi
c0013eac:	66 ef                	out    dx,ax
c0013eae:	85 c9                	test   ecx,ecx
c0013eb0:	74 05                	je     c0013eb7 <Vm::faultHandler(regs*)+0x594>
c0013eb2:	83 ee 02             	sub    esi,0x2
c0013eb5:	eb 03                	jmp    c0013eba <Vm::faultHandler(regs*)+0x597>
c0013eb7:	83 c6 02             	add    esi,0x2
c0013eba:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013ec0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013ec3:	e9 cb 00 00 00       	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013ec8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013ecf:	83 ec 0c             	sub    esp,0xc
c0013ed2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ed6:	50                   	push   eax
c0013ed7:	e8 89 f5 ff ff       	call   c0013465 <Vm::inbv(unsigned short)>
c0013edc:	0f b6 c0             	movzx  eax,al
c0013edf:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013ee2:	eb 3f                	jmp    c0013f23 <Vm::faultHandler(regs*)+0x600>
c0013ee4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ee9:	74 07                	je     c0013ef2 <Vm::faultHandler(regs*)+0x5cf>
c0013eeb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013eef:	ed                   	in     eax,dx
c0013ef0:	eb 14                	jmp    c0013f06 <Vm::faultHandler(regs*)+0x5e3>
c0013ef2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013ef5:	66 31 f6             	xor    si,si
c0013ef8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013efb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013eff:	66 ed                	in     ax,dx
c0013f01:	0f b7 c0             	movzx  eax,ax
c0013f04:	09 f0                	or     eax,esi
c0013f06:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013f09:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013f0d:	e9 84 00 00 00       	jmp    c0013f96 <Vm::faultHandler(regs*)+0x673>
c0013f12:	52                   	push   edx
c0013f13:	52                   	push   edx
c0013f14:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013f18:	50                   	push   eax
c0013f19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f1d:	50                   	push   eax
c0013f1e:	e8 55 f5 ff ff       	call   c0013478 <Vm::outbv(unsigned short, unsigned char)>
c0013f23:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013f27:	eb 53                	jmp    c0013f7c <Vm::faultHandler(regs*)+0x659>
c0013f29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013f2c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013f30:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f35:	74 03                	je     c0013f3a <Vm::faultHandler(regs*)+0x617>
c0013f37:	ef                   	out    dx,eax
c0013f38:	eb cf                	jmp    c0013f09 <Vm::faultHandler(regs*)+0x5e6>
c0013f3a:	66 ef                	out    dx,ax
c0013f3c:	eb cb                	jmp    c0013f09 <Vm::faultHandler(regs*)+0x5e6>
c0013f3e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013f45:	83 ec 0c             	sub    esp,0xc
c0013f48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013f4c:	50                   	push   eax
c0013f4d:	e8 13 f5 ff ff       	call   c0013465 <Vm::inbv(unsigned short)>
c0013f52:	0f b6 c0             	movzx  eax,al
c0013f55:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013f58:	eb 1f                	jmp    c0013f79 <Vm::faultHandler(regs*)+0x656>
c0013f5a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013f5d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f62:	74 03                	je     c0013f67 <Vm::faultHandler(regs*)+0x644>
c0013f64:	ed                   	in     eax,dx
c0013f65:	eb 0d                	jmp    c0013f74 <Vm::faultHandler(regs*)+0x651>
c0013f67:	66 ed                	in     ax,dx
c0013f69:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013f6c:	0f b7 c0             	movzx  eax,ax
c0013f6f:	66 31 d2             	xor    dx,dx
c0013f72:	09 d0                	or     eax,edx
c0013f74:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013f77:	eb 1a                	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013f79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f7c:	83 c4 10             	add    esp,0x10
c0013f7f:	eb 15                	jmp    c0013f96 <Vm::faultHandler(regs*)+0x673>
c0013f81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013f84:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013f87:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f8c:	74 03                	je     c0013f91 <Vm::faultHandler(regs*)+0x66e>
c0013f8e:	ef                   	out    dx,eax
c0013f8f:	eb 02                	jmp    c0013f93 <Vm::faultHandler(regs*)+0x670>
c0013f91:	66 ef                	out    dx,ax
c0013f93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f96:	b0 01                	mov    al,0x1
c0013f98:	eb 56                	jmp    c0013ff0 <Vm::faultHandler(regs*)+0x6cd>
c0013f9a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f9e:	50                   	push   eax
c0013f9f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013fa3:	50                   	push   eax
c0013fa4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013fa8:	50                   	push   eax
c0013fa9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013fad:	50                   	push   eax
c0013fae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013fb2:	50                   	push   eax
c0013fb3:	52                   	push   edx
c0013fb4:	52                   	push   edx
c0013fb5:	68 17 f2 01 c0       	push   0xc001f217
c0013fba:	e8 20 58 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0013fbf:	83 c4 20             	add    esp,0x20
c0013fc2:	83 ec 0c             	sub    esp,0xc
c0013fc5:	6a 60                	push   0x60
c0013fc7:	e8 99 f4 ff ff       	call   c0013465 <Vm::inbv(unsigned short)>
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	3c 1c                	cmp    al,0x1c
c0013fd1:	74 04                	je     c0013fd7 <Vm::faultHandler(regs*)+0x6b4>
c0013fd3:	3c 5a                	cmp    al,0x5a
c0013fd5:	75 eb                	jne    c0013fc2 <Vm::faultHandler(regs*)+0x69f>
c0013fd7:	3c 5a                	cmp    al,0x5a
c0013fd9:	74 04                	je     c0013fdf <Vm::faultHandler(regs*)+0x6bc>
c0013fdb:	3c 1c                	cmp    al,0x1c
c0013fdd:	75 0f                	jne    c0013fee <Vm::faultHandler(regs*)+0x6cb>
c0013fdf:	83 ec 0c             	sub    esp,0xc
c0013fe2:	6a 60                	push   0x60
c0013fe4:	e8 7c f4 ff ff       	call   c0013465 <Vm::inbv(unsigned short)>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	eb e9                	jmp    c0013fd7 <Vm::faultHandler(regs*)+0x6b4>
c0013fee:	31 c0                	xor    eax,eax
c0013ff0:	83 c4 1c             	add    esp,0x1c
c0013ff3:	5b                   	pop    ebx
c0013ff4:	5e                   	pop    esi
c0013ff5:	5f                   	pop    edi
c0013ff6:	5d                   	pop    ebp
c0013ff7:	c3                   	ret    

c0013ff8 <Vm::fpuInternalTo32(unsigned long long)>:
c0013ff8:	57                   	push   edi
c0013ff9:	56                   	push   esi
c0013ffa:	53                   	push   ebx
c0013ffb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014003:	89 d6                	mov    esi,edx
c0014005:	89 d7                	mov    edi,edx
c0014007:	89 c1                	mov    ecx,eax
c0014009:	c1 ef 14             	shr    edi,0x14
c001400c:	89 d3                	mov    ebx,edx
c001400e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0014014:	31 d2                	xor    edx,edx
c0014016:	89 f8                	mov    eax,edi
c0014018:	81 e6 00 00 00 80    	and    esi,0x80000000
c001401e:	bf ff 00 00 00       	mov    edi,0xff
c0014023:	05 80 fc ff ff       	add    eax,0xfffffc80
c0014028:	83 d2 ff             	adc    edx,0xffffffff
c001402b:	39 c7                	cmp    edi,eax
c001402d:	bf 00 00 00 00       	mov    edi,0x0
c0014032:	19 d7                	sbb    edi,edx
c0014034:	72 16                	jb     c001404c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0014036:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001403a:	c1 e0 17             	shl    eax,0x17
c001403d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0014043:	09 f1                	or     ecx,esi
c0014045:	09 c1                	or     ecx,eax
c0014047:	89 cf                	mov    edi,ecx
c0014049:	eb 05                	jmp    c0014050 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001404b:	90                   	nop
c001404c:	31 ff                	xor    edi,edi
c001404e:	66 90                	xchg   ax,ax
c0014050:	89 f8                	mov    eax,edi
c0014052:	5b                   	pop    ebx
c0014053:	5e                   	pop    esi
c0014054:	5f                   	pop    edi
c0014055:	c3                   	ret    

c0014056 <Vm::fpuInternalTo64(unsigned long long)>:
c0014056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001405a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001405e:	c3                   	ret    

c001405f <Vm::fpu32ToInternal(unsigned int)>:
c001405f:	57                   	push   edi
c0014060:	31 ff                	xor    edi,edi
c0014062:	56                   	push   esi
c0014063:	53                   	push   ebx
c0014064:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014068:	89 cb                	mov    ebx,ecx
c001406a:	89 ce                	mov    esi,ecx
c001406c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0014072:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0014078:	c1 e9 17             	shr    ecx,0x17
c001407b:	89 f0                	mov    eax,esi
c001407d:	0f b6 d1             	movzx  edx,cl
c0014080:	81 c2 80 03 00 00    	add    edx,0x380
c0014086:	89 d1                	mov    ecx,edx
c0014088:	89 fa                	mov    edx,edi
c001408a:	c1 e1 14             	shl    ecx,0x14
c001408d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0014091:	c1 e0 1d             	shl    eax,0x1d
c0014094:	89 d7                	mov    edi,edx
c0014096:	89 c6                	mov    esi,eax
c0014098:	89 ca                	mov    edx,ecx
c001409a:	89 f0                	mov    eax,esi
c001409c:	09 fa                	or     edx,edi
c001409e:	09 da                	or     edx,ebx
c00140a0:	5b                   	pop    ebx
c00140a1:	5e                   	pop    esi
c00140a2:	5f                   	pop    edi
c00140a3:	c3                   	ret    

c00140a4 <Vm::fpu64ToInternal(unsigned long long)>:
c00140a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140ac:	c3                   	ret    

c00140ad <Vm::fpuFloatToLong(unsigned long long)>:
c00140ad:	57                   	push   edi
c00140ae:	31 c0                	xor    eax,eax
c00140b0:	56                   	push   esi
c00140b1:	31 d2                	xor    edx,edx
c00140b3:	53                   	push   ebx
c00140b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140bc:	89 d9                	mov    ecx,ebx
c00140be:	c1 e9 14             	shr    ecx,0x14
c00140c1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00140c7:	89 cf                	mov    edi,ecx
c00140c9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00140cf:	78 37                	js     c0014108 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00140d1:	89 d9                	mov    ecx,ebx
c00140d3:	89 f0                	mov    eax,esi
c00140d5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00140db:	81 c9 00 00 10 00    	or     ecx,0x100000
c00140e1:	89 ca                	mov    edx,ecx
c00140e3:	b9 34 00 00 00       	mov    ecx,0x34
c00140e8:	29 f9                	sub    ecx,edi
c00140ea:	0f ad d0             	shrd   eax,edx,cl
c00140ed:	d3 fa                	sar    edx,cl
c00140ef:	f6 c1 20             	test   cl,0x20
c00140f2:	74 08                	je     c00140fc <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00140f4:	89 d0                	mov    eax,edx
c00140f6:	c1 fa 1f             	sar    edx,0x1f
c00140f9:	8d 76 00             	lea    esi,[esi+0x0]
c00140fc:	85 db                	test   ebx,ebx
c00140fe:	79 08                	jns    c0014108 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0014100:	f7 d8                	neg    eax
c0014102:	83 d2 00             	adc    edx,0x0
c0014105:	f7 da                	neg    edx
c0014107:	90                   	nop
c0014108:	5b                   	pop    ebx
c0014109:	5e                   	pop    esi
c001410a:	5f                   	pop    edi
c001410b:	c3                   	ret    

c001410c <Vm::fpuULongToFloat(unsigned long long)>:
c001410c:	57                   	push   edi
c001410d:	31 c9                	xor    ecx,ecx
c001410f:	56                   	push   esi
c0014110:	53                   	push   ebx
c0014111:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014115:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	0f ba e7 14          	bt     edi,0x14
c0014120:	72 0a                	jb     c001412c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0014122:	01 f6                	add    esi,esi
c0014124:	11 ff                	adc    edi,edi
c0014126:	41                   	inc    ecx
c0014127:	eb f3                	jmp    c001411c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0014129:	8d 76 00             	lea    esi,[esi+0x0]
c001412c:	89 fa                	mov    edx,edi
c001412e:	89 f0                	mov    eax,esi
c0014130:	bb 33 04 00 00       	mov    ebx,0x433
c0014135:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001413b:	29 cb                	sub    ebx,ecx
c001413d:	89 d9                	mov    ecx,ebx
c001413f:	5b                   	pop    ebx
c0014140:	c1 e1 14             	shl    ecx,0x14
c0014143:	5e                   	pop    esi
c0014144:	09 ca                	or     edx,ecx
c0014146:	5f                   	pop    edi
c0014147:	c3                   	ret    

c0014148 <Vm::fpuLongToFloat(long long)>:
c0014148:	56                   	push   esi
c0014149:	31 c0                	xor    eax,eax
c001414b:	53                   	push   ebx
c001414c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014150:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014154:	39 c8                	cmp    eax,ecx
c0014156:	19 d8                	sbb    eax,ebx
c0014158:	7d 06                	jge    c0014160 <Vm::fpuLongToFloat(long long)+0x18>
c001415a:	31 f6                	xor    esi,esi
c001415c:	eb 0e                	jmp    c001416c <Vm::fpuLongToFloat(long long)+0x24>
c001415e:	66 90                	xchg   ax,ax
c0014160:	f7 d9                	neg    ecx
c0014162:	be 01 00 00 00       	mov    esi,0x1
c0014167:	83 d3 00             	adc    ebx,0x0
c001416a:	f7 db                	neg    ebx
c001416c:	31 c0                	xor    eax,eax
c001416e:	66 90                	xchg   ax,ax
c0014170:	0f ba e3 14          	bt     ebx,0x14
c0014174:	72 0a                	jb     c0014180 <Vm::fpuLongToFloat(long long)+0x38>
c0014176:	01 c9                	add    ecx,ecx
c0014178:	11 db                	adc    ebx,ebx
c001417a:	40                   	inc    eax
c001417b:	eb f3                	jmp    c0014170 <Vm::fpuLongToFloat(long long)+0x28>
c001417d:	8d 76 00             	lea    esi,[esi+0x0]
c0014180:	ba 33 04 00 00       	mov    edx,0x433
c0014185:	29 c2                	sub    edx,eax
c0014187:	89 c8                	mov    eax,ecx
c0014189:	c1 e2 14             	shl    edx,0x14
c001418c:	89 d9                	mov    ecx,ebx
c001418e:	89 f3                	mov    ebx,esi
c0014190:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0014196:	09 ca                	or     edx,ecx
c0014198:	84 db                	test   bl,bl
c001419a:	74 08                	je     c00141a4 <Vm::fpuLongToFloat(long long)+0x5c>
c001419c:	81 ca 00 00 00 80    	or     edx,0x80000000
c00141a2:	66 90                	xchg   ax,ax
c00141a4:	5b                   	pop    ebx
c00141a5:	5e                   	pop    esi
c00141a6:	c3                   	ret    

c00141a7 <Vm::fpuGet0()>:
c00141a7:	31 c0                	xor    eax,eax
c00141a9:	31 d2                	xor    edx,edx
c00141ab:	c3                   	ret    

c00141ac <Vm::fpuGet1()>:
c00141ac:	b8 01 00 00 00       	mov    eax,0x1
c00141b1:	31 d2                	xor    edx,edx
c00141b3:	c3                   	ret    

c00141b4 <Vm::fpuGetPi()>:
c00141b4:	b8 03 00 00 00       	mov    eax,0x3
c00141b9:	31 d2                	xor    edx,edx
c00141bb:	c3                   	ret    

c00141bc <Vm::fpuGetLog2E()>:
c00141bc:	83 ec 18             	sub    esp,0x18
c00141bf:	68 74 f2 01 c0       	push   0xc001f274
c00141c4:	e8 ec b2 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00141c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141ce:	31 d2                	xor    edx,edx
c00141d0:	83 c4 1c             	add    esp,0x1c
c00141d3:	c3                   	ret    

c00141d4 <Vm::fpuGetLogE2()>:
c00141d4:	83 ec 18             	sub    esp,0x18
c00141d7:	68 80 f2 01 c0       	push   0xc001f280
c00141dc:	e8 d4 b2 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00141e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141e6:	31 d2                	xor    edx,edx
c00141e8:	83 c4 1c             	add    esp,0x1c
c00141eb:	c3                   	ret    

c00141ec <Vm::fpuGetLog210()>:
c00141ec:	83 ec 18             	sub    esp,0x18
c00141ef:	68 8c f2 01 c0       	push   0xc001f28c
c00141f4:	e8 bc b2 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00141f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141fe:	31 d2                	xor    edx,edx
c0014200:	83 c4 1c             	add    esp,0x1c
c0014203:	c3                   	ret    

c0014204 <Vm::fpuGetLog102()>:
c0014204:	83 ec 18             	sub    esp,0x18
c0014207:	68 99 f2 01 c0       	push   0xc001f299
c001420c:	e8 a4 b2 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0014211:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014216:	31 d2                	xor    edx,edx
c0014218:	83 c4 1c             	add    esp,0x1c
c001421b:	c3                   	ret    

c001421c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001421c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014220:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0014224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014228:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001422c:	0f 92 c0             	setb   al
c001422f:	c3                   	ret    

c0014230 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0014230:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014238:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001423c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0014240:	09 c2                	or     edx,eax
c0014242:	0f 94 c0             	sete   al
c0014245:	c3                   	ret    

c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0014246:	57                   	push   edi
c0014247:	56                   	push   esi
c0014248:	53                   	push   ebx
c0014249:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001424d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014251:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014255:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014259:	57                   	push   edi
c001425a:	56                   	push   esi
c001425b:	53                   	push   ebx
c001425c:	51                   	push   ecx
c001425d:	e8 ce ff ff ff       	call   c0014230 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	88 c2                	mov    dl,al
c0014267:	31 c0                	xor    eax,eax
c0014269:	84 d2                	test   dl,dl
c001426b:	75 0f                	jne    c001427c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001426d:	57                   	push   edi
c001426e:	56                   	push   esi
c001426f:	53                   	push   ebx
c0014270:	51                   	push   ecx
c0014271:	e8 a6 ff ff ff       	call   c001421c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0014276:	83 c4 10             	add    esp,0x10
c0014279:	8d 76 00             	lea    esi,[esi+0x0]
c001427c:	83 e0 01             	and    eax,0x1
c001427f:	5b                   	pop    ebx
c0014280:	88 c1                	mov    cl,al
c0014282:	83 e2 01             	and    edx,0x1
c0014285:	a0 e1 39 02 c0       	mov    al,ds:0xc00239e1
c001428a:	c1 e2 06             	shl    edx,0x6
c001428d:	83 e0 ba             	and    eax,0xffffffba
c0014290:	5e                   	pop    esi
c0014291:	09 c8                	or     eax,ecx
c0014293:	5f                   	pop    edi
c0014294:	09 d0                	or     eax,edx
c0014296:	a2 e1 39 02 c0       	mov    ds:0xc00239e1,al
c001429b:	c3                   	ret    

c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001429c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142a4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00142a8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00142ac:	c3                   	ret    

c00142ad <Vm::fpuAbs(unsigned long long)>:
c00142ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00142b5:	c3                   	ret    

c00142b6 <Vm::fpuChs(unsigned long long)>:
c00142b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00142be:	f7 d8                	neg    eax
c00142c0:	83 d2 00             	adc    edx,0x0
c00142c3:	f7 da                	neg    edx
c00142c5:	c3                   	ret    

c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00142c6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00142ca:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00142cf:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00142d3:	eb c7                	jmp    c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00142d5:	53                   	push   ebx
c00142d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142e6:	0f af ca             	imul   ecx,edx
c00142e9:	0f af d8             	imul   ebx,eax
c00142ec:	f7 e2                	mul    edx
c00142ee:	01 d9                	add    ecx,ebx
c00142f0:	5b                   	pop    ebx
c00142f1:	01 ca                	add    edx,ecx
c00142f3:	c3                   	ret    

c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014307:	e8 b4 82 00 00       	call   c001c5c0 <__udivdi3>
c001430c:	83 c4 1c             	add    esp,0x1c
c001430f:	c3                   	ret    

c0014310 <Vm::fpuSquare(unsigned long long)>:
c0014310:	50                   	push   eax
c0014311:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014315:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014319:	52                   	push   edx
c001431a:	50                   	push   eax
c001431b:	52                   	push   edx
c001431c:	50                   	push   eax
c001431d:	e8 b3 ff ff ff       	call   c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014322:	83 c4 14             	add    esp,0x14
c0014325:	c3                   	ret    

c0014326 <Vm::fpuGetReg(int)>:
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001432e:	76 10                	jbe    c0014340 <Vm::fpuGetReg(int)+0x1a>
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	68 a6 f2 01 c0       	push   0xc001f2a6
c0014338:	e8 78 b1 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	a0 e1 39 02 c0       	mov    al,ds:0xc00239e1
c0014345:	b9 08 00 00 00       	mov    ecx,0x8
c001434a:	c0 e8 03             	shr    al,0x3
c001434d:	83 e0 07             	and    eax,0x7
c0014350:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0014354:	99                   	cdq    
c0014355:	f7 f9                	idiv   ecx
c0014357:	8b 04 d5 e4 39 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffdc61c]
c001435e:	8b 14 d5 e8 39 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffdc618]
c0014365:	83 c4 0c             	add    esp,0xc
c0014368:	c3                   	ret    

c0014369 <Vm::fpuSetReg(int, unsigned long long)>:
c0014369:	57                   	push   edi
c001436a:	56                   	push   esi
c001436b:	52                   	push   edx
c001436c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014370:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014374:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0014379:	76 11                	jbe    c001438c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001437b:	83 ec 0c             	sub    esp,0xc
c001437e:	68 b9 f2 01 c0       	push   0xc001f2b9
c0014383:	e8 2d b1 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	90                   	nop
c001438c:	a0 e1 39 02 c0       	mov    al,ds:0xc00239e1
c0014391:	b9 08 00 00 00       	mov    ecx,0x8
c0014396:	c0 e8 03             	shr    al,0x3
c0014399:	83 e0 07             	and    eax,0x7
c001439c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00143a0:	99                   	cdq    
c00143a1:	f7 f9                	idiv   ecx
c00143a3:	89 34 d5 e4 39 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc61c],esi
c00143aa:	89 3c d5 e8 39 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc618],edi
c00143b1:	58                   	pop    eax
c00143b2:	5e                   	pop    esi
c00143b3:	5f                   	pop    edi
c00143b4:	c3                   	ret    

c00143b5 <Vm::fpuPush(unsigned long long)>:
c00143b5:	a0 e1 39 02 c0       	mov    al,ds:0xc00239e1
c00143ba:	c0 e8 03             	shr    al,0x3
c00143bd:	83 e0 07             	and    eax,0x7
c00143c0:	83 c0 07             	add    eax,0x7
c00143c3:	88 c2                	mov    dl,al
c00143c5:	83 e0 07             	and    eax,0x7
c00143c8:	83 e2 07             	and    edx,0x7
c00143cb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00143d2:	8a 15 e1 39 02 c0    	mov    dl,BYTE PTR ds:0xc00239e1
c00143d8:	83 e2 c7             	and    edx,0xffffffc7
c00143db:	09 ca                	or     edx,ecx
c00143dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00143e1:	88 15 e1 39 02 c0    	mov    BYTE PTR ds:0xc00239e1,dl
c00143e7:	89 0c c5 e8 39 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc618],ecx
c00143ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143f2:	89 14 c5 e4 39 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc61c],edx
c00143f9:	a1 24 3a 02 c0       	mov    eax,ds:0xc0023a24
c00143fe:	83 f8 08             	cmp    eax,0x8
c0014401:	75 09                	jne    c001440c <Vm::fpuPush(unsigned long long)+0x57>
c0014403:	80 0d e0 39 02 c0 40 	or     BYTE PTR ds:0xc00239e0,0x40
c001440a:	c3                   	ret    
c001440b:	90                   	nop
c001440c:	40                   	inc    eax
c001440d:	a3 24 3a 02 c0       	mov    ds:0xc0023a24,eax
c0014412:	c3                   	ret    

c0014413 <Vm::fpuPop()>:
c0014413:	8a 0d e1 39 02 c0    	mov    cl,BYTE PTR ds:0xc00239e1
c0014419:	53                   	push   ebx
c001441a:	c0 e9 03             	shr    cl,0x3
c001441d:	8a 1d e1 39 02 c0    	mov    bl,BYTE PTR ds:0xc00239e1
c0014423:	83 e1 07             	and    ecx,0x7
c0014426:	83 e3 c7             	and    ebx,0xffffffc7
c0014429:	8b 04 cd e4 39 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffdc61c]
c0014430:	8b 14 cd e8 39 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffdc618]
c0014437:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001443e:	83 e1 38             	and    ecx,0x38
c0014441:	09 d9                	or     ecx,ebx
c0014443:	88 0d e1 39 02 c0    	mov    BYTE PTR ds:0xc00239e1,cl
c0014449:	8b 0d 24 3a 02 c0    	mov    ecx,DWORD PTR ds:0xc0023a24
c001444f:	85 c9                	test   ecx,ecx
c0014451:	74 09                	je     c001445c <Vm::fpuPop()+0x49>
c0014453:	49                   	dec    ecx
c0014454:	89 0d 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,ecx
c001445a:	eb 08                	jmp    c0014464 <Vm::fpuPop()+0x51>
c001445c:	80 0d e0 39 02 c0 40 	or     BYTE PTR ds:0xc00239e0,0x40
c0014463:	90                   	nop
c0014464:	5b                   	pop    ebx
c0014465:	c3                   	ret    

c0014466 <Vm::x87Handler(regs*)>:
c0014466:	55                   	push   ebp
c0014467:	57                   	push   edi
c0014468:	56                   	push   esi
c0014469:	53                   	push   ebx
c001446a:	83 ec 1c             	sub    esp,0x1c
c001446d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014471:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0014476:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0014479:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0014481:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0014485:	50                   	push   eax
c0014486:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001448a:	50                   	push   eax
c001448b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001448f:	50                   	push   eax
c0014490:	53                   	push   ebx
c0014491:	e8 9e a8 ff ff       	call   c000ed34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014496:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	89 c6                	mov    esi,eax
c001449e:	80 fa d9             	cmp    dl,0xd9
c00144a1:	0f 85 79 01 00 00    	jne    c0014620 <Vm::x87Handler(regs*)+0x1ba>
c00144a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00144ab:	8d 50 20             	lea    edx,[eax+0x20]
c00144ae:	80 fa 0e             	cmp    dl,0xe
c00144b1:	0f 87 a5 00 00 00    	ja     c001455c <Vm::x87Handler(regs*)+0xf6>
c00144b7:	0f b6 d2             	movzx  edx,dl
c00144ba:	ff 24 95 cc f2 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0d34]
c00144c1:	8d 76 00             	lea    esi,[esi+0x0]
c00144c4:	e8 de fc ff ff       	call   c00141a7 <Vm::fpuGet0()>
c00144c9:	eb 09                	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c00144cb:	90                   	nop
c00144cc:	e8 db fc ff ff       	call   c00141ac <Vm::fpuGet1()>
c00144d1:	8d 76 00             	lea    esi,[esi+0x0]
c00144d4:	57                   	push   edi
c00144d5:	57                   	push   edi
c00144d6:	66 90                	xchg   ax,ax
c00144d8:	52                   	push   edx
c00144d9:	50                   	push   eax
c00144da:	e8 d6 fe ff ff       	call   c00143b5 <Vm::fpuPush(unsigned long long)>
c00144df:	90                   	nop
c00144e0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	90                   	nop
c00144e8:	b0 01                	mov    al,0x1
c00144ea:	e9 89 0a 00 00       	jmp    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c00144ef:	90                   	nop
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	6a 00                	push   0x0
c00144f5:	e8 2c fe ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00144fa:	59                   	pop    ecx
c00144fb:	5e                   	pop    esi
c00144fc:	52                   	push   edx
c00144fd:	50                   	push   eax
c00144fe:	e8 b3 fd ff ff       	call   c00142b6 <Vm::fpuChs(unsigned long long)>
c0014503:	eb 17                	jmp    c001451c <Vm::x87Handler(regs*)+0xb6>
c0014505:	8d 76 00             	lea    esi,[esi+0x0]
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	6a 00                	push   0x0
c001450d:	e8 14 fe ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014512:	5f                   	pop    edi
c0014513:	5d                   	pop    ebp
c0014514:	52                   	push   edx
c0014515:	50                   	push   eax
c0014516:	e8 92 fd ff ff       	call   c00142ad <Vm::fpuAbs(unsigned long long)>
c001451b:	90                   	nop
c001451c:	83 c4 0c             	add    esp,0xc
c001451f:	90                   	nop
c0014520:	52                   	push   edx
c0014521:	50                   	push   eax
c0014522:	66 90                	xchg   ax,ax
c0014524:	6a 00                	push   0x0
c0014526:	66 90                	xchg   ax,ax
c0014528:	e8 3c fe ff ff       	call   c0014369 <Vm::fpuSetReg(int, unsigned long long)>
c001452d:	eb b1                	jmp    c00144e0 <Vm::x87Handler(regs*)+0x7a>
c001452f:	90                   	nop
c0014530:	e8 b7 fc ff ff       	call   c00141ec <Vm::fpuGetLog210()>
c0014535:	eb 9d                	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c0014537:	90                   	nop
c0014538:	e8 7f fc ff ff       	call   c00141bc <Vm::fpuGetLog2E()>
c001453d:	eb 95                	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c001453f:	90                   	nop
c0014540:	e8 6f fc ff ff       	call   c00141b4 <Vm::fpuGetPi()>
c0014545:	eb 8d                	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c0014547:	90                   	nop
c0014548:	e8 b7 fc ff ff       	call   c0014204 <Vm::fpuGetLog102()>
c001454d:	eb 85                	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c001454f:	90                   	nop
c0014550:	e8 7f fc ff ff       	call   c00141d4 <Vm::fpuGetLogE2()>
c0014555:	e9 7a ff ff ff       	jmp    c00144d4 <Vm::x87Handler(regs*)+0x6e>
c001455a:	66 90                	xchg   ax,ax
c001455c:	8d 50 40             	lea    edx,[eax+0x40]
c001455f:	80 fa 07             	cmp    dl,0x7
c0014562:	77 18                	ja     c001457c <Vm::x87Handler(regs*)+0x116>
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	2d c0 00 00 00       	sub    eax,0xc0
c001456c:	50                   	push   eax
c001456d:	e8 b4 fd ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014572:	59                   	pop    ecx
c0014573:	5e                   	pop    esi
c0014574:	e9 5f ff ff ff       	jmp    c00144d8 <Vm::x87Handler(regs*)+0x72>
c0014579:	8d 76 00             	lea    esi,[esi+0x0]
c001457c:	8d 50 38             	lea    edx,[eax+0x38]
c001457f:	80 fa 07             	cmp    dl,0x7
c0014582:	77 3c                	ja     c00145c0 <Vm::x87Handler(regs*)+0x15a>
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	2d c8 00 00 00       	sub    eax,0xc8
c001458c:	50                   	push   eax
c001458d:	e8 94 fd ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014599:	89 c6                	mov    esi,eax
c001459b:	89 d7                	mov    edi,edx
c001459d:	e8 84 fd ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00145a2:	83 c4 0c             	add    esp,0xc
c00145a5:	52                   	push   edx
c00145a6:	50                   	push   eax
c00145a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00145ab:	2d c8 00 00 00       	sub    eax,0xc8
c00145b0:	50                   	push   eax
c00145b1:	e8 b3 fd ff ff       	call   c0014369 <Vm::fpuSetReg(int, unsigned long long)>
c00145b6:	83 c4 0c             	add    esp,0xc
c00145b9:	57                   	push   edi
c00145ba:	56                   	push   esi
c00145bb:	e9 64 ff ff ff       	jmp    c0014524 <Vm::x87Handler(regs*)+0xbe>
c00145c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00145c4:	84 d2                	test   dl,dl
c00145c6:	75 10                	jne    c00145d8 <Vm::x87Handler(regs*)+0x172>
c00145c8:	83 ec 0c             	sub    esp,0xc
c00145cb:	ff 36                	push   DWORD PTR [esi]
c00145cd:	e8 8d fa ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c00145d2:	e9 c9 00 00 00       	jmp    c00146a0 <Vm::x87Handler(regs*)+0x23a>
c00145d7:	90                   	nop
c00145d8:	80 fa 03             	cmp    dl,0x3
c00145db:	75 13                	jne    c00145f0 <Vm::x87Handler(regs*)+0x18a>
c00145dd:	e8 31 fe ff ff       	call   c0014413 <Vm::fpuPop()>
c00145e2:	55                   	push   ebp
c00145e3:	55                   	push   ebp
c00145e4:	52                   	push   edx
c00145e5:	50                   	push   eax
c00145e6:	e8 0d fa ff ff       	call   c0013ff8 <Vm::fpuInternalTo32(unsigned long long)>
c00145eb:	e9 90 00 00 00       	jmp    c0014680 <Vm::x87Handler(regs*)+0x21a>
c00145f0:	80 fa 05             	cmp    dl,0x5
c00145f3:	75 0f                	jne    c0014604 <Vm::x87Handler(regs*)+0x19e>
c00145f5:	66 8b 06             	mov    ax,WORD PTR [esi]
c00145f8:	66 a3 e2 39 02 c0    	mov    ds:0xc00239e2,ax
c00145fe:	e9 ed 00 00 00       	jmp    c00146f0 <Vm::x87Handler(regs*)+0x28a>
c0014603:	90                   	nop
c0014604:	31 c0                	xor    eax,eax
c0014606:	80 fa 07             	cmp    dl,0x7
c0014609:	0f 85 69 09 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c001460f:	66 a1 e2 39 02 c0    	mov    ax,ds:0xc00239e2
c0014615:	66 89 06             	mov    WORD PTR [esi],ax
c0014618:	e9 d3 00 00 00       	jmp    c00146f0 <Vm::x87Handler(regs*)+0x28a>
c001461d:	8d 76 00             	lea    esi,[esi+0x0]
c0014620:	80 fa d8             	cmp    dl,0xd8
c0014623:	0f 84 d3 00 00 00    	je     c00146fc <Vm::x87Handler(regs*)+0x296>
c0014629:	80 fa dc             	cmp    dl,0xdc
c001462c:	0f 84 2a 02 00 00    	je     c001485c <Vm::x87Handler(regs*)+0x3f6>
c0014632:	80 fa de             	cmp    dl,0xde
c0014635:	0f 84 f1 02 00 00    	je     c001492c <Vm::x87Handler(regs*)+0x4c6>
c001463b:	80 fa dd             	cmp    dl,0xdd
c001463e:	0f 84 94 04 00 00    	je     c0014ad8 <Vm::x87Handler(regs*)+0x672>
c0014644:	80 fa da             	cmp    dl,0xda
c0014647:	0f 84 5f 05 00 00    	je     c0014bac <Vm::x87Handler(regs*)+0x746>
c001464d:	80 fa df             	cmp    dl,0xdf
c0014650:	0f 84 aa 05 00 00    	je     c0014c00 <Vm::x87Handler(regs*)+0x79a>
c0014656:	31 c0                	xor    eax,eax
c0014658:	80 fa db             	cmp    dl,0xdb
c001465b:	0f 85 17 09 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014661:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014665:	80 fa 03             	cmp    dl,0x3
c0014668:	0f 85 c2 06 00 00    	jne    c0014d30 <Vm::x87Handler(regs*)+0x8ca>
c001466e:	e8 a0 fd ff ff       	call   c0014413 <Vm::fpuPop()>
c0014673:	55                   	push   ebp
c0014674:	55                   	push   ebp
c0014675:	8d 76 00             	lea    esi,[esi+0x0]
c0014678:	52                   	push   edx
c0014679:	50                   	push   eax
c001467a:	e8 2e fa ff ff       	call   c00140ad <Vm::fpuFloatToLong(unsigned long long)>
c001467f:	90                   	nop
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	89 06                	mov    DWORD PTR [esi],eax
c0014685:	eb 69                	jmp    c00146f0 <Vm::x87Handler(regs*)+0x28a>
c0014687:	90                   	nop
c0014688:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001468c:	84 d2                	test   dl,dl
c001468e:	0f 85 2c 06 00 00    	jne    c0014cc0 <Vm::x87Handler(regs*)+0x85a>
c0014694:	57                   	push   edi
c0014695:	57                   	push   edi
c0014696:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014699:	ff 36                	push   DWORD PTR [esi]
c001469b:	e8 04 fa ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c00146a0:	5e                   	pop    esi
c00146a1:	5f                   	pop    edi
c00146a2:	52                   	push   edx
c00146a3:	50                   	push   eax
c00146a4:	e8 0c fd ff ff       	call   c00143b5 <Vm::fpuPush(unsigned long long)>
c00146a9:	8d 76 00             	lea    esi,[esi+0x0]
c00146ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146b0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00146b3:	e9 2c fe ff ff       	jmp    c00144e4 <Vm::x87Handler(regs*)+0x7e>
c00146b8:	80 fa 03             	cmp    dl,0x3
c00146bb:	0f 85 2b 07 00 00    	jne    c0014dec <Vm::x87Handler(regs*)+0x986>
c00146c1:	57                   	push   edi
c00146c2:	57                   	push   edi
c00146c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00146c6:	ff 36                	push   DWORD PTR [esi]
c00146c8:	e8 d7 f9 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c00146cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00146d4:	89 c6                	mov    esi,eax
c00146d6:	89 d7                	mov    edi,edx
c00146d8:	e8 49 fc ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00146dd:	57                   	push   edi
c00146de:	56                   	push   esi
c00146df:	52                   	push   edx
c00146e0:	50                   	push   eax
c00146e1:	e8 60 fb ff ff       	call   c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00146e6:	83 c4 20             	add    esp,0x20
c00146e9:	e8 25 fd ff ff       	call   c0014413 <Vm::fpuPop()>
c00146ee:	66 90                	xchg   ax,ax
c00146f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146f4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00146f7:	e9 ec fd ff ff       	jmp    c00144e8 <Vm::x87Handler(regs*)+0x82>
c00146fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014700:	8d 50 40             	lea    edx,[eax+0x40]
c0014703:	80 fa 07             	cmp    dl,0x7
c0014706:	77 2c                	ja     c0014734 <Vm::x87Handler(regs*)+0x2ce>
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	2d c0 00 00 00       	sub    eax,0xc0
c0014710:	50                   	push   eax
c0014711:	e8 10 fc ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001471d:	89 c6                	mov    esi,eax
c001471f:	89 d7                	mov    edi,edx
c0014721:	e8 00 fc ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014726:	57                   	push   edi
c0014727:	56                   	push   esi
c0014728:	52                   	push   edx
c0014729:	50                   	push   eax
c001472a:	e8 6d fb ff ff       	call   c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001472f:	eb 33                	jmp    c0014764 <Vm::x87Handler(regs*)+0x2fe>
c0014731:	8d 76 00             	lea    esi,[esi+0x0]
c0014734:	8d 50 38             	lea    edx,[eax+0x38]
c0014737:	80 fa 07             	cmp    dl,0x7
c001473a:	77 30                	ja     c001476c <Vm::x87Handler(regs*)+0x306>
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	2d c8 00 00 00       	sub    eax,0xc8
c0014744:	50                   	push   eax
c0014745:	e8 dc fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001474a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014751:	89 c6                	mov    esi,eax
c0014753:	89 d7                	mov    edi,edx
c0014755:	e8 cc fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001475a:	57                   	push   edi
c001475b:	56                   	push   esi
c001475c:	52                   	push   edx
c001475d:	50                   	push   eax
c001475e:	e8 72 fb ff ff       	call   c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014763:	90                   	nop
c0014764:	83 c4 1c             	add    esp,0x1c
c0014767:	e9 b4 fd ff ff       	jmp    c0014520 <Vm::x87Handler(regs*)+0xba>
c001476c:	8d 50 30             	lea    edx,[eax+0x30]
c001476f:	80 fa 07             	cmp    dl,0x7
c0014772:	77 10                	ja     c0014784 <Vm::x87Handler(regs*)+0x31e>
c0014774:	83 ec 0c             	sub    esp,0xc
c0014777:	2d d0 00 00 00       	sub    eax,0xd0
c001477c:	e9 c3 03 00 00       	jmp    c0014b44 <Vm::x87Handler(regs*)+0x6de>
c0014781:	8d 76 00             	lea    esi,[esi+0x0]
c0014784:	8d 50 28             	lea    edx,[eax+0x28]
c0014787:	80 fa 07             	cmp    dl,0x7
c001478a:	77 10                	ja     c001479c <Vm::x87Handler(regs*)+0x336>
c001478c:	83 ec 0c             	sub    esp,0xc
c001478f:	2d d8 00 00 00       	sub    eax,0xd8
c0014794:	e9 e7 03 00 00       	jmp    c0014b80 <Vm::x87Handler(regs*)+0x71a>
c0014799:	8d 76 00             	lea    esi,[esi+0x0]
c001479c:	8d 50 20             	lea    edx,[eax+0x20]
c001479f:	80 fa 07             	cmp    dl,0x7
c00147a2:	77 1c                	ja     c00147c0 <Vm::x87Handler(regs*)+0x35a>
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	2d e0 00 00 00       	sub    eax,0xe0
c00147ac:	50                   	push   eax
c00147ad:	e8 74 fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00147b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00147b9:	89 c6                	mov    esi,eax
c00147bb:	89 d7                	mov    edi,edx
c00147bd:	eb 25                	jmp    c00147e4 <Vm::x87Handler(regs*)+0x37e>
c00147bf:	90                   	nop
c00147c0:	8d 50 18             	lea    edx,[eax+0x18]
c00147c3:	80 fa 07             	cmp    dl,0x7
c00147c6:	77 30                	ja     c00147f8 <Vm::x87Handler(regs*)+0x392>
c00147c8:	83 ec 0c             	sub    esp,0xc
c00147cb:	6a 00                	push   0x0
c00147cd:	e8 54 fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00147d2:	89 c6                	mov    esi,eax
c00147d4:	89 d7                	mov    edi,edx
c00147d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00147da:	2d e8 00 00 00       	sub    eax,0xe8
c00147df:	89 04 24             	mov    DWORD PTR [esp],eax
c00147e2:	66 90                	xchg   ax,ax
c00147e4:	e8 3d fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00147e9:	57                   	push   edi
c00147ea:	56                   	push   esi
c00147eb:	52                   	push   edx
c00147ec:	50                   	push   eax
c00147ed:	e8 d4 fa ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00147f2:	e9 6d ff ff ff       	jmp    c0014764 <Vm::x87Handler(regs*)+0x2fe>
c00147f7:	90                   	nop
c00147f8:	8d 50 10             	lea    edx,[eax+0x10]
c00147fb:	80 fa 07             	cmp    dl,0x7
c00147fe:	77 1c                	ja     c001481c <Vm::x87Handler(regs*)+0x3b6>
c0014800:	83 ec 0c             	sub    esp,0xc
c0014803:	2d f0 00 00 00       	sub    eax,0xf0
c0014808:	50                   	push   eax
c0014809:	e8 18 fb ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001480e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014815:	89 c6                	mov    esi,eax
c0014817:	89 d7                	mov    edi,edx
c0014819:	eb 25                	jmp    c0014840 <Vm::x87Handler(regs*)+0x3da>
c001481b:	90                   	nop
c001481c:	3c f7                	cmp    al,0xf7
c001481e:	0f 86 00 04 00 00    	jbe    c0014c24 <Vm::x87Handler(regs*)+0x7be>
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	6a 00                	push   0x0
c0014829:	e8 f8 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001482e:	89 c6                	mov    esi,eax
c0014830:	89 d7                	mov    edi,edx
c0014832:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014836:	2d f8 00 00 00       	sub    eax,0xf8
c001483b:	89 04 24             	mov    DWORD PTR [esp],eax
c001483e:	66 90                	xchg   ax,ax
c0014840:	e8 e1 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014845:	57                   	push   edi
c0014846:	56                   	push   esi
c0014847:	52                   	push   edx
c0014848:	50                   	push   eax
c0014849:	e8 a6 fa ff ff       	call   c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001484e:	83 c4 1c             	add    esp,0x1c
c0014851:	52                   	push   edx
c0014852:	50                   	push   eax
c0014853:	6a 00                	push   0x0
c0014855:	e9 6a 02 00 00       	jmp    c0014ac4 <Vm::x87Handler(regs*)+0x65e>
c001485a:	66 90                	xchg   ax,ax
c001485c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014860:	8d 50 40             	lea    edx,[eax+0x40]
c0014863:	80 fa 07             	cmp    dl,0x7
c0014866:	77 38                	ja     c00148a0 <Vm::x87Handler(regs*)+0x43a>
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	2d c0 00 00 00       	sub    eax,0xc0
c0014870:	50                   	push   eax
c0014871:	e8 b0 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014876:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001487d:	89 c6                	mov    esi,eax
c001487f:	89 d7                	mov    edi,edx
c0014881:	e8 a0 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014886:	57                   	push   edi
c0014887:	56                   	push   esi
c0014888:	52                   	push   edx
c0014889:	50                   	push   eax
c001488a:	e8 0d fa ff ff       	call   c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001488f:	83 c4 1c             	add    esp,0x1c
c0014892:	52                   	push   edx
c0014893:	50                   	push   eax
c0014894:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014898:	2d c0 00 00 00       	sub    eax,0xc0
c001489d:	eb 41                	jmp    c00148e0 <Vm::x87Handler(regs*)+0x47a>
c001489f:	90                   	nop
c00148a0:	8d 50 38             	lea    edx,[eax+0x38]
c00148a3:	80 fa 07             	cmp    dl,0x7
c00148a6:	77 40                	ja     c00148e8 <Vm::x87Handler(regs*)+0x482>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	2d c8 00 00 00       	sub    eax,0xc8
c00148b0:	50                   	push   eax
c00148b1:	e8 70 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00148b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00148bd:	89 c6                	mov    esi,eax
c00148bf:	89 d7                	mov    edi,edx
c00148c1:	e8 60 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00148c6:	57                   	push   edi
c00148c7:	56                   	push   esi
c00148c8:	52                   	push   edx
c00148c9:	50                   	push   eax
c00148ca:	e8 06 fa ff ff       	call   c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00148cf:	83 c4 1c             	add    esp,0x1c
c00148d2:	52                   	push   edx
c00148d3:	50                   	push   eax
c00148d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00148d8:	2d c8 00 00 00       	sub    eax,0xc8
c00148dd:	8d 76 00             	lea    esi,[esi+0x0]
c00148e0:	50                   	push   eax
c00148e1:	e9 42 fc ff ff       	jmp    c0014528 <Vm::x87Handler(regs*)+0xc2>
c00148e6:	66 90                	xchg   ax,ax
c00148e8:	83 c0 18             	add    eax,0x18
c00148eb:	3c 07                	cmp    al,0x7
c00148ed:	0f 87 6d 04 00 00    	ja     c0014d60 <Vm::x87Handler(regs*)+0x8fa>
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	6a 00                	push   0x0
c00148f8:	e8 29 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00148fd:	89 c6                	mov    esi,eax
c00148ff:	89 d7                	mov    edi,edx
c0014901:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014905:	2d e8 00 00 00       	sub    eax,0xe8
c001490a:	89 04 24             	mov    DWORD PTR [esp],eax
c001490d:	e8 14 fa ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014912:	57                   	push   edi
c0014913:	56                   	push   esi
c0014914:	52                   	push   edx
c0014915:	50                   	push   eax
c0014916:	e8 ab f9 ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001491b:	83 c4 1c             	add    esp,0x1c
c001491e:	52                   	push   edx
c001491f:	50                   	push   eax
c0014920:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014924:	2d e8 00 00 00       	sub    eax,0xe8
c0014929:	eb b5                	jmp    c00148e0 <Vm::x87Handler(regs*)+0x47a>
c001492b:	90                   	nop
c001492c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014930:	8d 50 40             	lea    edx,[eax+0x40]
c0014933:	80 fa 07             	cmp    dl,0x7
c0014936:	77 3c                	ja     c0014974 <Vm::x87Handler(regs*)+0x50e>
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	2d c0 00 00 00       	sub    eax,0xc0
c0014940:	50                   	push   eax
c0014941:	e8 e0 f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001494d:	89 c6                	mov    esi,eax
c001494f:	89 d7                	mov    edi,edx
c0014951:	e8 d0 f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014956:	57                   	push   edi
c0014957:	56                   	push   esi
c0014958:	52                   	push   edx
c0014959:	50                   	push   eax
c001495a:	e8 3d f9 ff ff       	call   c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001495f:	83 c4 1c             	add    esp,0x1c
c0014962:	52                   	push   edx
c0014963:	50                   	push   eax
c0014964:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014968:	2d c0 00 00 00       	sub    eax,0xc0
c001496d:	e9 b2 01 00 00       	jmp    c0014b24 <Vm::x87Handler(regs*)+0x6be>
c0014972:	66 90                	xchg   ax,ax
c0014974:	8d 50 20             	lea    edx,[eax+0x20]
c0014977:	80 fa 07             	cmp    dl,0x7
c001497a:	77 3c                	ja     c00149b8 <Vm::x87Handler(regs*)+0x552>
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	2d e0 00 00 00       	sub    eax,0xe0
c0014984:	50                   	push   eax
c0014985:	e8 9c f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001498a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014991:	89 c6                	mov    esi,eax
c0014993:	89 d7                	mov    edi,edx
c0014995:	e8 8c f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c001499a:	57                   	push   edi
c001499b:	56                   	push   esi
c001499c:	52                   	push   edx
c001499d:	50                   	push   eax
c001499e:	e8 23 f9 ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00149a3:	83 c4 1c             	add    esp,0x1c
c00149a6:	52                   	push   edx
c00149a7:	50                   	push   eax
c00149a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149ac:	2d e0 00 00 00       	sub    eax,0xe0
c00149b1:	e9 6e 01 00 00       	jmp    c0014b24 <Vm::x87Handler(regs*)+0x6be>
c00149b6:	66 90                	xchg   ax,ax
c00149b8:	8d 50 18             	lea    edx,[eax+0x18]
c00149bb:	80 fa 07             	cmp    dl,0x7
c00149be:	77 3c                	ja     c00149fc <Vm::x87Handler(regs*)+0x596>
c00149c0:	83 ec 0c             	sub    esp,0xc
c00149c3:	6a 00                	push   0x0
c00149c5:	e8 5c f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00149ca:	89 c6                	mov    esi,eax
c00149cc:	89 d7                	mov    edi,edx
c00149ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149d2:	2d e8 00 00 00       	sub    eax,0xe8
c00149d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00149da:	e8 47 f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c00149df:	57                   	push   edi
c00149e0:	56                   	push   esi
c00149e1:	52                   	push   edx
c00149e2:	50                   	push   eax
c00149e3:	e8 de f8 ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00149e8:	83 c4 1c             	add    esp,0x1c
c00149eb:	52                   	push   edx
c00149ec:	50                   	push   eax
c00149ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149f1:	2d e8 00 00 00       	sub    eax,0xe8
c00149f6:	e9 29 01 00 00       	jmp    c0014b24 <Vm::x87Handler(regs*)+0x6be>
c00149fb:	90                   	nop
c00149fc:	8d 50 38             	lea    edx,[eax+0x38]
c00149ff:	80 fa 07             	cmp    dl,0x7
c0014a02:	77 3c                	ja     c0014a40 <Vm::x87Handler(regs*)+0x5da>
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	2d c8 00 00 00       	sub    eax,0xc8
c0014a0c:	50                   	push   eax
c0014a0d:	e8 14 f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014a12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a19:	89 c6                	mov    esi,eax
c0014a1b:	89 d7                	mov    edi,edx
c0014a1d:	e8 04 f9 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014a22:	57                   	push   edi
c0014a23:	56                   	push   esi
c0014a24:	52                   	push   edx
c0014a25:	50                   	push   eax
c0014a26:	e8 aa f8 ff ff       	call   c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014a2b:	83 c4 1c             	add    esp,0x1c
c0014a2e:	52                   	push   edx
c0014a2f:	50                   	push   eax
c0014a30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014a34:	2d c8 00 00 00       	sub    eax,0xc8
c0014a39:	e9 82 00 00 00       	jmp    c0014ac0 <Vm::x87Handler(regs*)+0x65a>
c0014a3e:	66 90                	xchg   ax,ax
c0014a40:	3c f7                	cmp    al,0xf7
c0014a42:	76 38                	jbe    c0014a7c <Vm::x87Handler(regs*)+0x616>
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	6a 00                	push   0x0
c0014a49:	e8 d8 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014a4e:	89 c6                	mov    esi,eax
c0014a50:	89 d7                	mov    edi,edx
c0014a52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014a56:	2d f8 00 00 00       	sub    eax,0xf8
c0014a5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a5e:	e8 c3 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014a63:	57                   	push   edi
c0014a64:	56                   	push   esi
c0014a65:	52                   	push   edx
c0014a66:	50                   	push   eax
c0014a67:	e8 88 f8 ff ff       	call   c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014a6c:	83 c4 1c             	add    esp,0x1c
c0014a6f:	52                   	push   edx
c0014a70:	50                   	push   eax
c0014a71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014a75:	2d f8 00 00 00       	sub    eax,0xf8
c0014a7a:	eb 44                	jmp    c0014ac0 <Vm::x87Handler(regs*)+0x65a>
c0014a7c:	8d 50 10             	lea    edx,[eax+0x10]
c0014a7f:	80 fa 07             	cmp    dl,0x7
c0014a82:	0f 87 6c 01 00 00    	ja     c0014bf4 <Vm::x87Handler(regs*)+0x78e>
c0014a88:	83 ec 0c             	sub    esp,0xc
c0014a8b:	2d f0 00 00 00       	sub    eax,0xf0
c0014a90:	50                   	push   eax
c0014a91:	e8 90 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014a96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a9d:	89 c6                	mov    esi,eax
c0014a9f:	89 d7                	mov    edi,edx
c0014aa1:	e8 80 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014aa6:	57                   	push   edi
c0014aa7:	56                   	push   esi
c0014aa8:	52                   	push   edx
c0014aa9:	50                   	push   eax
c0014aaa:	e8 45 f8 ff ff       	call   c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014aaf:	83 c4 1c             	add    esp,0x1c
c0014ab2:	52                   	push   edx
c0014ab3:	50                   	push   eax
c0014ab4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014ab8:	2d f0 00 00 00       	sub    eax,0xf0
c0014abd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac0:	50                   	push   eax
c0014ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac4:	e8 a0 f8 ff ff       	call   c0014369 <Vm::fpuSetReg(int, unsigned long long)>
c0014ac9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014acd:	e8 41 f9 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014ad2:	e9 0d fa ff ff       	jmp    c00144e4 <Vm::x87Handler(regs*)+0x7e>
c0014ad7:	90                   	nop
c0014ad8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014adc:	8d 50 30             	lea    edx,[eax+0x30]
c0014adf:	80 fa 07             	cmp    dl,0x7
c0014ae2:	77 20                	ja     c0014b04 <Vm::x87Handler(regs*)+0x69e>
c0014ae4:	83 ec 0c             	sub    esp,0xc
c0014ae7:	6a 00                	push   0x0
c0014ae9:	e8 38 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014aee:	83 c4 0c             	add    esp,0xc
c0014af1:	52                   	push   edx
c0014af2:	50                   	push   eax
c0014af3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014af7:	2d d0 00 00 00       	sub    eax,0xd0
c0014afc:	e9 df fd ff ff       	jmp    c00148e0 <Vm::x87Handler(regs*)+0x47a>
c0014b01:	8d 76 00             	lea    esi,[esi+0x0]
c0014b04:	8d 50 28             	lea    edx,[eax+0x28]
c0014b07:	80 fa 07             	cmp    dl,0x7
c0014b0a:	77 28                	ja     c0014b34 <Vm::x87Handler(regs*)+0x6ce>
c0014b0c:	83 ec 0c             	sub    esp,0xc
c0014b0f:	6a 00                	push   0x0
c0014b11:	e8 10 f8 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014b16:	83 c4 0c             	add    esp,0xc
c0014b19:	52                   	push   edx
c0014b1a:	50                   	push   eax
c0014b1b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014b1f:	2d d8 00 00 00       	sub    eax,0xd8
c0014b24:	50                   	push   eax
c0014b25:	e8 3f f8 ff ff       	call   c0014369 <Vm::fpuSetReg(int, unsigned long long)>
c0014b2a:	e8 e4 f8 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014b2f:	e9 ac f9 ff ff       	jmp    c00144e0 <Vm::x87Handler(regs*)+0x7a>
c0014b34:	8d 50 20             	lea    edx,[eax+0x20]
c0014b37:	80 fa 07             	cmp    dl,0x7
c0014b3a:	77 30                	ja     c0014b6c <Vm::x87Handler(regs*)+0x706>
c0014b3c:	83 ec 0c             	sub    esp,0xc
c0014b3f:	2d e0 00 00 00       	sub    eax,0xe0
c0014b44:	50                   	push   eax
c0014b45:	e8 dc f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014b4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014b51:	89 c6                	mov    esi,eax
c0014b53:	89 d7                	mov    edi,edx
c0014b55:	e8 cc f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014b5a:	57                   	push   edi
c0014b5b:	56                   	push   esi
c0014b5c:	52                   	push   edx
c0014b5d:	50                   	push   eax
c0014b5e:	e8 e3 f6 ff ff       	call   c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014b63:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014b67:	e9 78 02 00 00       	jmp    c0014de4 <Vm::x87Handler(regs*)+0x97e>
c0014b6c:	8d 50 18             	lea    edx,[eax+0x18]
c0014b6f:	80 fa 07             	cmp    dl,0x7
c0014b72:	0f 87 10 fb ff ff    	ja     c0014688 <Vm::x87Handler(regs*)+0x222>
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	2d e8 00 00 00       	sub    eax,0xe8
c0014b80:	50                   	push   eax
c0014b81:	e8 a0 f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014b86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014b8d:	89 c6                	mov    esi,eax
c0014b8f:	89 d7                	mov    edi,edx
c0014b91:	e8 90 f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014b96:	57                   	push   edi
c0014b97:	56                   	push   esi
c0014b98:	52                   	push   edx
c0014b99:	50                   	push   eax
c0014b9a:	e8 a7 f6 ff ff       	call   c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014b9f:	83 c4 20             	add    esp,0x20
c0014ba2:	e8 6c f8 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014ba7:	eb 6f                	jmp    c0014c18 <Vm::x87Handler(regs*)+0x7b2>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0014bb0:	0f 85 22 01 00 00    	jne    c0014cd8 <Vm::x87Handler(regs*)+0x872>
c0014bb6:	66 90                	xchg   ax,ax
c0014bb8:	83 ec 0c             	sub    esp,0xc
c0014bbb:	6a 01                	push   0x1
c0014bbd:	e8 64 f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014bc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014bc9:	89 c6                	mov    esi,eax
c0014bcb:	89 d7                	mov    edi,edx
c0014bcd:	e8 54 f7 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014bd2:	57                   	push   edi
c0014bd3:	56                   	push   esi
c0014bd4:	52                   	push   edx
c0014bd5:	50                   	push   eax
c0014bd6:	e8 6b f6 ff ff       	call   c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014bdb:	83 c4 20             	add    esp,0x20
c0014bde:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014be2:	e8 2c f8 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014be7:	e8 27 f8 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014bec:	e9 f7 f8 ff ff       	jmp    c00144e8 <Vm::x87Handler(regs*)+0x82>
c0014bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf4:	3c d9                	cmp    al,0xd9
c0014bf6:	0f 85 e8 02 00 00    	jne    c0014ee4 <Vm::x87Handler(regs*)+0xa7e>
c0014bfc:	eb ba                	jmp    c0014bb8 <Vm::x87Handler(regs*)+0x752>
c0014bfe:	66 90                	xchg   ax,ax
c0014c00:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0014c04:	0f 85 2a 03 00 00    	jne    c0014f34 <Vm::x87Handler(regs*)+0xace>
c0014c0a:	0f b7 05 e0 39 02 c0 	movzx  eax,WORD PTR ds:0xc00239e0
c0014c11:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0014c15:	8d 76 00             	lea    esi,[esi+0x0]
c0014c18:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014c1c:	e9 c7 f8 ff ff       	jmp    c00144e8 <Vm::x87Handler(regs*)+0x82>
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014c28:	84 d2                	test   dl,dl
c0014c2a:	75 10                	jne    c0014c3c <Vm::x87Handler(regs*)+0x7d6>
c0014c2c:	83 ec 0c             	sub    esp,0xc
c0014c2f:	ff 36                	push   DWORD PTR [esi]
c0014c31:	e8 29 f4 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014c36:	e9 39 01 00 00       	jmp    c0014d74 <Vm::x87Handler(regs*)+0x90e>
c0014c3b:	90                   	nop
c0014c3c:	80 fa 01             	cmp    dl,0x1
c0014c3f:	75 0f                	jne    c0014c50 <Vm::x87Handler(regs*)+0x7ea>
c0014c41:	83 ec 0c             	sub    esp,0xc
c0014c44:	ff 36                	push   DWORD PTR [esi]
c0014c46:	e8 14 f4 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014c4b:	e9 b4 02 00 00       	jmp    c0014f04 <Vm::x87Handler(regs*)+0xa9e>
c0014c50:	80 fa 04             	cmp    dl,0x4
c0014c53:	75 0f                	jne    c0014c64 <Vm::x87Handler(regs*)+0x7fe>
c0014c55:	83 ec 0c             	sub    esp,0xc
c0014c58:	ff 36                	push   DWORD PTR [esi]
c0014c5a:	e8 00 f4 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014c5f:	e9 9c 01 00 00       	jmp    c0014e00 <Vm::x87Handler(regs*)+0x99a>
c0014c64:	80 fa 05             	cmp    dl,0x5
c0014c67:	75 1b                	jne    c0014c84 <Vm::x87Handler(regs*)+0x81e>
c0014c69:	83 ec 0c             	sub    esp,0xc
c0014c6c:	6a 00                	push   0x0
c0014c6e:	e8 b3 f6 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014c73:	89 c7                	mov    edi,eax
c0014c75:	89 d5                	mov    ebp,edx
c0014c77:	58                   	pop    eax
c0014c78:	ff 36                	push   DWORD PTR [esi]
c0014c7a:	e8 e0 f3 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014c7f:	e9 bc 01 00 00       	jmp    c0014e40 <Vm::x87Handler(regs*)+0x9da>
c0014c84:	80 fa 06             	cmp    dl,0x6
c0014c87:	75 0f                	jne    c0014c98 <Vm::x87Handler(regs*)+0x832>
c0014c89:	83 ec 0c             	sub    esp,0xc
c0014c8c:	ff 36                	push   DWORD PTR [esi]
c0014c8e:	e8 cc f3 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014c93:	e9 cc 01 00 00       	jmp    c0014e64 <Vm::x87Handler(regs*)+0x9fe>
c0014c98:	31 c0                	xor    eax,eax
c0014c9a:	80 fa 07             	cmp    dl,0x7
c0014c9d:	0f 85 d5 02 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014ca3:	83 ec 0c             	sub    esp,0xc
c0014ca6:	6a 00                	push   0x0
c0014ca8:	e8 79 f6 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014cad:	89 c7                	mov    edi,eax
c0014caf:	89 d5                	mov    ebp,edx
c0014cb1:	58                   	pop    eax
c0014cb2:	ff 36                	push   DWORD PTR [esi]
c0014cb4:	e8 a6 f3 ff ff       	call   c001405f <Vm::fpu32ToInternal(unsigned int)>
c0014cb9:	e9 ee 01 00 00       	jmp    c0014eac <Vm::x87Handler(regs*)+0xa46>
c0014cbe:	66 90                	xchg   ax,ax
c0014cc0:	80 fa 03             	cmp    dl,0x3
c0014cc3:	0f 85 f7 01 00 00    	jne    c0014ec0 <Vm::x87Handler(regs*)+0xa5a>
c0014cc9:	e8 45 f7 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014cce:	51                   	push   ecx
c0014ccf:	51                   	push   ecx
c0014cd0:	e9 03 02 00 00       	jmp    c0014ed8 <Vm::x87Handler(regs*)+0xa72>
c0014cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014cdc:	80 fa 01             	cmp    dl,0x1
c0014cdf:	75 0b                	jne    c0014cec <Vm::x87Handler(regs*)+0x886>
c0014ce1:	57                   	push   edi
c0014ce2:	57                   	push   edi
c0014ce3:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ce5:	e9 0e 02 00 00       	jmp    c0014ef8 <Vm::x87Handler(regs*)+0xa92>
c0014cea:	66 90                	xchg   ax,ax
c0014cec:	80 fa 04             	cmp    dl,0x4
c0014cef:	75 13                	jne    c0014d04 <Vm::x87Handler(regs*)+0x89e>
c0014cf1:	31 d2                	xor    edx,edx
c0014cf3:	51                   	push   ecx
c0014cf4:	51                   	push   ecx
c0014cf5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cf7:	52                   	push   edx
c0014cf8:	50                   	push   eax
c0014cf9:	e8 4a f4 ff ff       	call   c0014148 <Vm::fpuLongToFloat(long long)>
c0014cfe:	e9 fd 00 00 00       	jmp    c0014e00 <Vm::x87Handler(regs*)+0x99a>
c0014d03:	90                   	nop
c0014d04:	31 c0                	xor    eax,eax
c0014d06:	80 fa 07             	cmp    dl,0x7
c0014d09:	0f 85 69 02 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014d0f:	83 ec 0c             	sub    esp,0xc
c0014d12:	6a 00                	push   0x0
c0014d14:	e8 0d f6 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014d19:	89 c7                	mov    edi,eax
c0014d1b:	89 d5                	mov    ebp,edx
c0014d1d:	58                   	pop    eax
c0014d1e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d20:	5a                   	pop    edx
c0014d21:	31 d2                	xor    edx,edx
c0014d23:	52                   	push   edx
c0014d24:	50                   	push   eax
c0014d25:	e8 1e f4 ff ff       	call   c0014148 <Vm::fpuLongToFloat(long long)>
c0014d2a:	e9 7d 01 00 00       	jmp    c0014eac <Vm::x87Handler(regs*)+0xa46>
c0014d2f:	90                   	nop
c0014d30:	84 d2                	test   dl,dl
c0014d32:	75 10                	jne    c0014d44 <Vm::x87Handler(regs*)+0x8de>
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	55                   	push   ebp
c0014d37:	55                   	push   ebp
c0014d38:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d3a:	52                   	push   edx
c0014d3b:	50                   	push   eax
c0014d3c:	e9 03 02 00 00       	jmp    c0014f44 <Vm::x87Handler(regs*)+0xade>
c0014d41:	8d 76 00             	lea    esi,[esi+0x0]
c0014d44:	31 c0                	xor    eax,eax
c0014d46:	80 fa 02             	cmp    dl,0x2
c0014d49:	0f 85 29 02 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014d4f:	83 ec 0c             	sub    esp,0xc
c0014d52:	6a 00                	push   0x0
c0014d54:	e8 cd f5 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014d59:	59                   	pop    ecx
c0014d5a:	5f                   	pop    edi
c0014d5b:	e9 18 f9 ff ff       	jmp    c0014678 <Vm::x87Handler(regs*)+0x212>
c0014d60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014d64:	84 d2                	test   dl,dl
c0014d66:	75 2c                	jne    c0014d94 <Vm::x87Handler(regs*)+0x92e>
c0014d68:	50                   	push   eax
c0014d69:	50                   	push   eax
c0014d6a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014d6d:	ff 36                	push   DWORD PTR [esi]
c0014d6f:	e8 30 f3 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014d74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014d7b:	89 c6                	mov    esi,eax
c0014d7d:	89 d7                	mov    edi,edx
c0014d7f:	e8 a2 f5 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014d84:	57                   	push   edi
c0014d85:	56                   	push   esi
c0014d86:	52                   	push   edx
c0014d87:	50                   	push   eax
c0014d88:	e8 0f f5 ff ff       	call   c001429c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014d8d:	e9 8e 01 00 00       	jmp    c0014f20 <Vm::x87Handler(regs*)+0xaba>
c0014d92:	66 90                	xchg   ax,ax
c0014d94:	80 fa 01             	cmp    dl,0x1
c0014d97:	75 13                	jne    c0014dac <Vm::x87Handler(regs*)+0x946>
c0014d99:	50                   	push   eax
c0014d9a:	50                   	push   eax
c0014d9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014d9e:	ff 36                	push   DWORD PTR [esi]
c0014da0:	e8 ff f2 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014da5:	e9 5a 01 00 00       	jmp    c0014f04 <Vm::x87Handler(regs*)+0xa9e>
c0014daa:	66 90                	xchg   ax,ax
c0014dac:	80 fa 02             	cmp    dl,0x2
c0014daf:	0f 85 03 f9 ff ff    	jne    c00146b8 <Vm::x87Handler(regs*)+0x252>
c0014db5:	55                   	push   ebp
c0014db6:	55                   	push   ebp
c0014db7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014dba:	ff 36                	push   DWORD PTR [esi]
c0014dbc:	e8 e3 f2 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014dc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014dc8:	89 c6                	mov    esi,eax
c0014dca:	89 d7                	mov    edi,edx
c0014dcc:	e8 55 f5 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014dd1:	57                   	push   edi
c0014dd2:	56                   	push   esi
c0014dd3:	52                   	push   edx
c0014dd4:	50                   	push   eax
c0014dd5:	e8 6c f4 ff ff       	call   c0014246 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014dda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014dde:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0014de1:	8d 76 00             	lea    esi,[esi+0x0]
c0014de4:	83 c4 20             	add    esp,0x20
c0014de7:	e9 fc f6 ff ff       	jmp    c00144e8 <Vm::x87Handler(regs*)+0x82>
c0014dec:	80 fa 04             	cmp    dl,0x4
c0014def:	75 2f                	jne    c0014e20 <Vm::x87Handler(regs*)+0x9ba>
c0014df1:	51                   	push   ecx
c0014df2:	51                   	push   ecx
c0014df3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014df6:	ff 36                	push   DWORD PTR [esi]
c0014df8:	e8 a7 f2 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0014e00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014e07:	89 c6                	mov    esi,eax
c0014e09:	89 d7                	mov    edi,edx
c0014e0b:	e8 16 f5 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014e10:	57                   	push   edi
c0014e11:	56                   	push   esi
c0014e12:	52                   	push   edx
c0014e13:	50                   	push   eax
c0014e14:	e8 ad f4 ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014e19:	e9 02 01 00 00       	jmp    c0014f20 <Vm::x87Handler(regs*)+0xaba>
c0014e1e:	66 90                	xchg   ax,ax
c0014e20:	80 fa 05             	cmp    dl,0x5
c0014e23:	75 2b                	jne    c0014e50 <Vm::x87Handler(regs*)+0x9ea>
c0014e25:	83 ec 0c             	sub    esp,0xc
c0014e28:	6a 00                	push   0x0
c0014e2a:	e8 f7 f4 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014e2f:	89 c7                	mov    edi,eax
c0014e31:	89 d5                	mov    ebp,edx
c0014e33:	58                   	pop    eax
c0014e34:	5a                   	pop    edx
c0014e35:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014e38:	ff 36                	push   DWORD PTR [esi]
c0014e3a:	e8 65 f2 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014e3f:	90                   	nop
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	55                   	push   ebp
c0014e44:	57                   	push   edi
c0014e45:	52                   	push   edx
c0014e46:	50                   	push   eax
c0014e47:	e8 7a f4 ff ff       	call   c00142c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014e4c:	eb 6a                	jmp    c0014eb8 <Vm::x87Handler(regs*)+0xa52>
c0014e4e:	66 90                	xchg   ax,ax
c0014e50:	80 fa 06             	cmp    dl,0x6
c0014e53:	75 2f                	jne    c0014e84 <Vm::x87Handler(regs*)+0xa1e>
c0014e55:	51                   	push   ecx
c0014e56:	51                   	push   ecx
c0014e57:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014e5a:	ff 36                	push   DWORD PTR [esi]
c0014e5c:	e8 43 f2 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014e61:	8d 76 00             	lea    esi,[esi+0x0]
c0014e64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014e6b:	89 c6                	mov    esi,eax
c0014e6d:	89 d7                	mov    edi,edx
c0014e6f:	e8 b2 f4 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014e74:	57                   	push   edi
c0014e75:	56                   	push   esi
c0014e76:	52                   	push   edx
c0014e77:	50                   	push   eax
c0014e78:	e8 77 f4 ff ff       	call   c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014e7d:	e9 9e 00 00 00       	jmp    c0014f20 <Vm::x87Handler(regs*)+0xaba>
c0014e82:	66 90                	xchg   ax,ax
c0014e84:	31 c0                	xor    eax,eax
c0014e86:	80 fa 07             	cmp    dl,0x7
c0014e89:	0f 85 e9 00 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014e8f:	83 ec 0c             	sub    esp,0xc
c0014e92:	6a 00                	push   0x0
c0014e94:	e8 8d f4 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014e99:	89 c7                	mov    edi,eax
c0014e9b:	89 d5                	mov    ebp,edx
c0014e9d:	58                   	pop    eax
c0014e9e:	5a                   	pop    edx
c0014e9f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014ea2:	ff 36                	push   DWORD PTR [esi]
c0014ea4:	e8 fb f1 ff ff       	call   c00140a4 <Vm::fpu64ToInternal(unsigned long long)>
c0014ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	55                   	push   ebp
c0014eb0:	57                   	push   edi
c0014eb1:	52                   	push   edx
c0014eb2:	50                   	push   eax
c0014eb3:	e8 3c f4 ff ff       	call   c00142f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014eb8:	83 c4 0c             	add    esp,0xc
c0014ebb:	eb 67                	jmp    c0014f24 <Vm::x87Handler(regs*)+0xabe>
c0014ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ec0:	31 c0                	xor    eax,eax
c0014ec2:	80 fa 02             	cmp    dl,0x2
c0014ec5:	0f 85 ad 00 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014ecb:	83 ec 0c             	sub    esp,0xc
c0014ece:	6a 00                	push   0x0
c0014ed0:	e8 51 f4 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014ed5:	59                   	pop    ecx
c0014ed6:	5f                   	pop    edi
c0014ed7:	90                   	nop
c0014ed8:	52                   	push   edx
c0014ed9:	50                   	push   eax
c0014eda:	e8 77 f1 ff ff       	call   c0014056 <Vm::fpuInternalTo64(unsigned long long)>
c0014edf:	e9 84 00 00 00       	jmp    c0014f68 <Vm::x87Handler(regs*)+0xb02>
c0014ee4:	31 c0                	xor    eax,eax
c0014ee6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0014eeb:	0f 85 87 00 00 00    	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014ef1:	50                   	push   eax
c0014ef2:	50                   	push   eax
c0014ef3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0014ef6:	66 90                	xchg   ax,ax
c0014ef8:	31 d2                	xor    edx,edx
c0014efa:	52                   	push   edx
c0014efb:	50                   	push   eax
c0014efc:	e8 47 f2 ff ff       	call   c0014148 <Vm::fpuLongToFloat(long long)>
c0014f01:	8d 76 00             	lea    esi,[esi+0x0]
c0014f04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f0b:	89 c6                	mov    esi,eax
c0014f0d:	89 d7                	mov    edi,edx
c0014f0f:	e8 12 f4 ff ff       	call   c0014326 <Vm::fpuGetReg(int)>
c0014f14:	57                   	push   edi
c0014f15:	56                   	push   esi
c0014f16:	52                   	push   edx
c0014f17:	50                   	push   eax
c0014f18:	e8 b8 f3 ff ff       	call   c00142d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f20:	83 c4 1c             	add    esp,0x1c
c0014f23:	90                   	nop
c0014f24:	52                   	push   edx
c0014f25:	50                   	push   eax
c0014f26:	6a 00                	push   0x0
c0014f28:	e8 3c f4 ff ff       	call   c0014369 <Vm::fpuSetReg(int, unsigned long long)>
c0014f2d:	e9 7a f7 ff ff       	jmp    c00146ac <Vm::x87Handler(regs*)+0x246>
c0014f32:	66 90                	xchg   ax,ax
c0014f34:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014f38:	80 fa 05             	cmp    dl,0x5
c0014f3b:	75 13                	jne    c0014f50 <Vm::x87Handler(regs*)+0xaea>
c0014f3d:	55                   	push   ebp
c0014f3e:	55                   	push   ebp
c0014f3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014f42:	ff 36                	push   DWORD PTR [esi]
c0014f44:	e8 c3 f1 ff ff       	call   c001410c <Vm::fpuULongToFloat(unsigned long long)>
c0014f49:	e9 52 f7 ff ff       	jmp    c00146a0 <Vm::x87Handler(regs*)+0x23a>
c0014f4e:	66 90                	xchg   ax,ax
c0014f50:	31 c0                	xor    eax,eax
c0014f52:	80 fa 07             	cmp    dl,0x7
c0014f55:	75 21                	jne    c0014f78 <Vm::x87Handler(regs*)+0xb12>
c0014f57:	e8 b7 f4 ff ff       	call   c0014413 <Vm::fpuPop()>
c0014f5c:	51                   	push   ecx
c0014f5d:	51                   	push   ecx
c0014f5e:	52                   	push   edx
c0014f5f:	50                   	push   eax
c0014f60:	e8 48 f1 ff ff       	call   c00140ad <Vm::fpuFloatToLong(unsigned long long)>
c0014f65:	8d 76 00             	lea    esi,[esi+0x0]
c0014f68:	83 c4 10             	add    esp,0x10
c0014f6b:	89 06                	mov    DWORD PTR [esi],eax
c0014f6d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0014f70:	e9 7b f7 ff ff       	jmp    c00146f0 <Vm::x87Handler(regs*)+0x28a>
c0014f75:	8d 76 00             	lea    esi,[esi+0x0]
c0014f78:	83 c4 1c             	add    esp,0x1c
c0014f7b:	5b                   	pop    ebx
c0014f7c:	5e                   	pop    esi
c0014f7d:	5f                   	pop    edi
c0014f7e:	5d                   	pop    ebp
c0014f7f:	c3                   	ret    

c0014f80 <__static_initialization_and_destruction_0(int, int)>:
c0014f80:	83 ec 0c             	sub    esp,0xc
c0014f83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014f88:	75 1a                	jne    c0014fa4 <__static_initialization_and_destruction_0(int, int)+0x24>
c0014f8a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014f92:	75 10                	jne    c0014fa4 <__static_initialization_and_destruction_0(int, int)+0x24>
c0014f94:	83 ec 0c             	sub    esp,0xc
c0014f97:	68 e0 39 02 c0       	push   0xc00239e0
c0014f9c:	e8 c3 7f 00 00       	call   c001cf64 <Vm::_FPUState::_FPUState()>
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	90                   	nop
c0014fa5:	83 c4 0c             	add    esp,0xc
c0014fa8:	c3                   	ret    
c0014fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0014fac <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0014fac:	83 ec 0c             	sub    esp,0xc
c0014faf:	83 ec 08             	sub    esp,0x8
c0014fb2:	68 ff ff 00 00       	push   0xffff
c0014fb7:	6a 01                	push   0x1
c0014fb9:	e8 c2 ff ff ff       	call   c0014f80 <__static_initialization_and_destruction_0(int, int)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	83 c4 0c             	add    esp,0xc
c0014fc4:	c3                   	ret    

c0014fc5 <Hal::noCopro(unsigned long)>:
c0014fc5:	c3                   	ret    

c0014fc6 <Hal::noTSC()>:
c0014fc6:	31 c0                	xor    eax,eax
c0014fc8:	31 d2                	xor    edx,edx
c0014fca:	c3                   	ret    

c0014fcb <Hal::readTSC()>:
c0014fcb:	0f 31                	rdtsc  
c0014fcd:	c3                   	ret    

c0014fce <nmiHandler(regs*, void*)>:
c0014fce:	83 ec 0c             	sub    esp,0xc
c0014fd1:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0014fd6:	83 ec 0c             	sub    esp,0xc
c0014fd9:	50                   	push   eax
c0014fda:	e8 2b 12 ff ff       	call   c000620a <Computer::handleNMI()>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	90                   	nop
c0014fe3:	83 c4 0c             	add    esp,0xc
c0014fe6:	c3                   	ret    

c0014fe7 <doubleFault(regs*, void*)>:
c0014fe7:	55                   	push   ebp
c0014fe8:	89 e5                	mov    ebp,esp
c0014fea:	83 ec 08             	sub    esp,0x8
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	68 08 f3 01 c0       	push   0xc001f308
c0014ff5:	e8 bb a4 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	90                   	nop
c0014ffe:	c9                   	leave  
c0014fff:	c3                   	ret    

c0015000 <displayDebugInfo(regs*)>:
c0015000:	83 ec 1c             	sub    esp,0x1c
c0015003:	0f 20 c0             	mov    eax,cr0
c0015006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001500a:	0f 20 d0             	mov    eax,cr2
c001500d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015011:	0f 20 d8             	mov    eax,cr3
c0015014:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015018:	0f 20 e0             	mov    eax,cr4
c001501b:	89 04 24             	mov    DWORD PTR [esp],eax
c001501e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015022:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015025:	83 ec 08             	sub    esp,0x8
c0015028:	50                   	push   eax
c0015029:	68 24 f3 01 c0       	push   0xc001f324
c001502e:	e8 ac 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001503a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001503d:	83 ec 08             	sub    esp,0x8
c0015040:	50                   	push   eax
c0015041:	68 15 f3 01 c0       	push   0xc001f315
c0015046:	e8 94 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015052:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015055:	83 ec 08             	sub    esp,0x8
c0015058:	50                   	push   eax
c0015059:	68 20 f3 01 c0       	push   0xc001f320
c001505e:	e8 7c 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001506a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001506d:	83 ec 08             	sub    esp,0x8
c0015070:	50                   	push   eax
c0015071:	68 2f f3 01 c0       	push   0xc001f32f
c0015076:	e8 64 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015082:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015085:	83 ec 08             	sub    esp,0x8
c0015088:	50                   	push   eax
c0015089:	68 3a f3 01 c0       	push   0xc001f33a
c001508e:	e8 4c 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0015093:	83 c4 10             	add    esp,0x10
c0015096:	83 ec 08             	sub    esp,0x8
c0015099:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001509d:	68 45 f3 01 c0       	push   0xc001f345
c00150a2:	e8 38 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	83 ec 08             	sub    esp,0x8
c00150ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150b1:	68 50 f3 01 c0       	push   0xc001f350
c00150b6:	e8 24 47 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00150c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c9:	83 ec 0c             	sub    esp,0xc
c00150cc:	50                   	push   eax
c00150cd:	e8 a3 26 ff ff       	call   c0007775 <setActiveTerminal(VgaText*)>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00150da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e0:	83 ec 08             	sub    esp,0x8
c00150e3:	68 5b f3 01 c0       	push   0xc001f35b
c00150e8:	50                   	push   eax
c00150e9:	e8 c6 29 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00150f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150fc:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015101:	8b 12                	mov    edx,DWORD PTR [edx]
c0015103:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015106:	83 c2 0c             	add    edx,0xc
c0015109:	83 ec 08             	sub    esp,0x8
c001510c:	52                   	push   edx
c001510d:	50                   	push   eax
c001510e:	e8 a1 29 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c0015113:	83 c4 10             	add    esp,0x10
c0015116:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c001511b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015121:	83 ec 08             	sub    esp,0x8
c0015124:	68 64 f3 01 c0       	push   0xc001f364
c0015129:	50                   	push   eax
c001512a:	e8 85 29 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015137:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001513d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015141:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015144:	83 ec 08             	sub    esp,0x8
c0015147:	52                   	push   edx
c0015148:	50                   	push   eax
c0015149:	e8 20 29 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015156:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515c:	83 ec 08             	sub    esp,0x8
c001515f:	68 6c f3 01 c0       	push   0xc001f36c
c0015164:	50                   	push   eax
c0015165:	e8 4a 29 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015172:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015178:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001517c:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001517f:	83 ec 08             	sub    esp,0x8
c0015182:	52                   	push   edx
c0015183:	50                   	push   eax
c0015184:	e8 e5 28 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015191:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015197:	83 ec 08             	sub    esp,0x8
c001519a:	68 74 f3 01 c0       	push   0xc001f374
c001519f:	50                   	push   eax
c00151a0:	e8 0f 29 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c00151a5:	83 c4 10             	add    esp,0x10
c00151a8:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00151ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151b7:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151ba:	83 ec 08             	sub    esp,0x8
c00151bd:	52                   	push   edx
c00151be:	50                   	push   eax
c00151bf:	e8 aa 28 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00151cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d2:	83 ec 08             	sub    esp,0x8
c00151d5:	68 7c f3 01 c0       	push   0xc001f37c
c00151da:	50                   	push   eax
c00151db:	e8 d4 28 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00151e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151f2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00151f5:	83 ec 08             	sub    esp,0x8
c00151f8:	52                   	push   edx
c00151f9:	50                   	push   eax
c00151fa:	e8 6f 28 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015207:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520d:	83 ec 08             	sub    esp,0x8
c0015210:	68 84 f3 01 c0       	push   0xc001f384
c0015215:	50                   	push   eax
c0015216:	e8 99 28 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015223:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015229:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001522d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015230:	83 ec 08             	sub    esp,0x8
c0015233:	52                   	push   edx
c0015234:	50                   	push   eax
c0015235:	e8 34 28 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015242:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015248:	83 ec 08             	sub    esp,0x8
c001524b:	68 8c f3 01 c0       	push   0xc001f38c
c0015250:	50                   	push   eax
c0015251:	e8 5e 28 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c001525e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015264:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015268:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001526b:	83 ec 08             	sub    esp,0x8
c001526e:	52                   	push   edx
c001526f:	50                   	push   eax
c0015270:	e8 f9 27 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c001527d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015283:	83 ec 08             	sub    esp,0x8
c0015286:	68 94 f3 01 c0       	push   0xc001f394
c001528b:	50                   	push   eax
c001528c:	e8 23 28 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015299:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529f:	83 ec 08             	sub    esp,0x8
c00152a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152a6:	50                   	push   eax
c00152a7:	e8 c2 27 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00152b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ba:	83 ec 08             	sub    esp,0x8
c00152bd:	68 9d f3 01 c0       	push   0xc001f39d
c00152c2:	50                   	push   eax
c00152c3:	e8 ec 27 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00152d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d6:	83 ec 08             	sub    esp,0x8
c00152d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152dd:	50                   	push   eax
c00152de:	e8 8b 27 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c00152eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f1:	83 ec 08             	sub    esp,0x8
c00152f4:	68 a5 f3 01 c0       	push   0xc001f3a5
c00152f9:	50                   	push   eax
c00152fa:	e8 b5 27 ff ff       	call   c0007ab4 <VgaText::puts(char const*)>
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0015307:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001530d:	83 ec 08             	sub    esp,0x8
c0015310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015314:	50                   	push   eax
c0015315:	e8 54 27 ff ff       	call   c0007a6e <VgaText::putx(unsigned int)>
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	fa                   	cli    
c001531e:	f4                   	hlt    
c001531f:	eb fe                	jmp    c001531f <displayDebugInfo(regs*)+0x31f>

c0015321 <displayProgramFault(char const*)>:
c0015321:	83 ec 0c             	sub    esp,0xc
c0015324:	83 ec 0c             	sub    esp,0xc
c0015327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001532b:	e8 af 44 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015338:	8b 00                	mov    eax,DWORD PTR [eax]
c001533a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001533d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015343:	85 c0                	test   eax,eax
c0015345:	74 21                	je     c0015368 <displayProgramFault(char const*)+0x47>
c0015347:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001534c:	8b 00                	mov    eax,DWORD PTR [eax]
c001534e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015351:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015357:	6a 04                	push   0x4
c0015359:	6a 0f                	push   0xf
c001535b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001535f:	50                   	push   eax
c0015360:	e8 c1 27 ff ff       	call   c0007b26 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	90                   	nop
c0015369:	83 c4 0c             	add    esp,0xc
c001536c:	c3                   	ret    

c001536d <gpFault(regs*, void*)>:
c001536d:	83 ec 1c             	sub    esp,0x1c
c0015370:	c7 05 3c 3a 02 c0 23 39 01 c0 	mov    DWORD PTR ds:0xc0023a3c,0xc0013923
c001537a:	a1 3c 3a 02 c0       	mov    eax,ds:0xc0023a3c
c001537f:	85 c0                	test   eax,eax
c0015381:	74 1c                	je     c001539f <gpFault(regs*, void*)+0x32>
c0015383:	a1 3c 3a 02 c0       	mov    eax,ds:0xc0023a3c
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001538f:	ff d0                	call   eax
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015398:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001539d:	75 2e                	jne    c00153cd <gpFault(regs*, void*)+0x60>
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153a6:	e8 55 fc ff ff       	call   c0015000 <displayDebugInfo(regs*)>
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	83 ec 0c             	sub    esp,0xc
c00153b1:	68 ad f3 01 c0       	push   0xc001f3ad
c00153b6:	e8 66 ff ff ff       	call   c0015321 <displayProgramFault(char const*)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	83 ec 0c             	sub    esp,0xc
c00153c1:	6a 00                	push   0x0
c00153c3:	e8 54 df ff ff       	call   c001331c <Thr::terminateFromIRQ(int)>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	eb 01                	jmp    c00153ce <gpFault(regs*, void*)+0x61>
c00153cd:	90                   	nop
c00153ce:	83 c4 1c             	add    esp,0x1c
c00153d1:	c3                   	ret    

c00153d2 <pgFault(regs*, void*)>:
c00153d2:	83 ec 1c             	sub    esp,0x1c
c00153d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153df:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153e5:	0f 20 d2             	mov    edx,cr2
c00153e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153f0:	83 ec 08             	sub    esp,0x8
c00153f3:	52                   	push   edx
c00153f4:	50                   	push   eax
c00153f5:	e8 30 40 ff ff       	call   c000942a <VAS::tryLoadBackOffDisk(unsigned long)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	84 c0                	test   al,al
c00153ff:	75 2e                	jne    c001542f <pgFault(regs*, void*)+0x5d>
c0015401:	83 ec 0c             	sub    esp,0xc
c0015404:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015408:	e8 f3 fb ff ff       	call   c0015000 <displayDebugInfo(regs*)>
c001540d:	83 c4 10             	add    esp,0x10
c0015410:	83 ec 0c             	sub    esp,0xc
c0015413:	68 c6 f3 01 c0       	push   0xc001f3c6
c0015418:	e8 04 ff ff ff       	call   c0015321 <displayProgramFault(char const*)>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	83 ec 0c             	sub    esp,0xc
c0015423:	6a 00                	push   0x0
c0015425:	e8 f2 de ff ff       	call   c001331c <Thr::terminateFromIRQ(int)>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	eb 01                	jmp    c0015430 <pgFault(regs*, void*)+0x5e>
c001542f:	90                   	nop
c0015430:	83 c4 1c             	add    esp,0x1c
c0015433:	c3                   	ret    

c0015434 <otherISRHandler(regs*, void*)>:
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	83 ec 0c             	sub    esp,0xc
c001543a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001543e:	e8 bd fb ff ff       	call   c0015000 <displayDebugInfo(regs*)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	83 ec 0c             	sub    esp,0xc
c0015449:	68 18 f4 01 c0       	push   0xc001f418
c001544e:	e8 ce fe ff ff       	call   c0015321 <displayProgramFault(char const*)>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	83 ec 0c             	sub    esp,0xc
c0015459:	6a 00                	push   0x0
c001545b:	e8 bc de ff ff       	call   c001331c <Thr::terminateFromIRQ(int)>
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	90                   	nop
c0015464:	83 c4 0c             	add    esp,0xc
c0015467:	c3                   	ret    

c0015468 <opcodeFault(regs*, void*)>:
c0015468:	55                   	push   ebp
c0015469:	89 e5                	mov    ebp,esp
c001546b:	83 ec 08             	sub    esp,0x8
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	83 ec 08             	sub    esp,0x8
c0015477:	50                   	push   eax
c0015478:	68 d1 f3 01 c0       	push   0xc001f3d1
c001547d:	e8 5d 43 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001548a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015490:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015496:	84 c0                	test   al,al
c0015498:	74 21                	je     c00154bb <opcodeFault(regs*, void*)+0x53>
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	68 40 f4 01 c0       	push   0xc001f440
c00154a2:	e8 38 43 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00154a7:	83 c4 10             	add    esp,0x10
c00154aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b0:	8d 50 19             	lea    edx,[eax+0x19]
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b9:	eb 2b                	jmp    c00154e6 <opcodeFault(regs*, void*)+0x7e>
c00154bb:	83 ec 0c             	sub    esp,0xc
c00154be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154c1:	e8 3a fb ff ff       	call   c0015000 <displayDebugInfo(regs*)>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	68 df f3 01 c0       	push   0xc001f3df
c00154d1:	e8 4b fe ff ff       	call   c0015321 <displayProgramFault(char const*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	6a 00                	push   0x0
c00154de:	e8 39 de ff ff       	call   c001331c <Thr::terminateFromIRQ(int)>
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	c9                   	leave  
c00154e7:	c3                   	ret    

c00154e8 <i386SaveCoprocessor(void*)>:
c00154e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154ec:	83 c0 3f             	add    eax,0x3f
c00154ef:	83 e0 c0             	and    eax,0xffffffc0
c00154f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154f6:	ff 25 34 3a 02 c0    	jmp    DWORD PTR ds:0xc0023a34

c00154fc <i386LoadCoprocessor(void*)>:
c00154fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015500:	83 c0 3f             	add    eax,0x3f
c0015503:	83 e0 c0             	and    eax,0xffffffc0
c0015506:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001550a:	ff 25 30 3a 02 c0    	jmp    DWORD PTR ds:0xc0023a30

c0015510 <x87EmulHandler(regs*, void*)>:
c0015510:	53                   	push   ebx
c0015511:	83 ec 08             	sub    esp,0x8
c0015514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001551d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015521:	74 10                	je     c0015533 <x87EmulHandler(regs*, void*)+0x23>
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	68 ec f3 01 c0       	push   0xc001f3ec
c001552b:	e8 85 9f ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	0f 20 c0             	mov    eax,cr0
c0015536:	a8 08                	test   al,0x8
c0015538:	74 56                	je     c0015590 <x87EmulHandler(regs*, void*)+0x80>
c001553a:	0f 06                	clts   
c001553c:	a1 2c 3a 02 c0       	mov    eax,ds:0xc0023a2c
c0015541:	85 c0                	test   eax,eax
c0015543:	74 0e                	je     c0015553 <x87EmulHandler(regs*, void*)+0x43>
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001554b:	e8 98 ff ff ff       	call   c00154e8 <i386SaveCoprocessor(void*)>
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015559:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001555d:	75 12                	jne    c0015571 <x87EmulHandler(regs*, void*)+0x61>
c001555f:	83 ec 0c             	sub    esp,0xc
c0015562:	68 40 02 00 00       	push   0x240
c0015567:	e8 e9 14 ff ff       	call   c0006a55 <malloc>
c001556c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001556f:	eb 10                	jmp    c0015581 <x87EmulHandler(regs*, void*)+0x71>
c0015571:	83 ec 0c             	sub    esp,0xc
c0015574:	a1 2c 3a 02 c0       	mov    eax,ds:0xc0023a2c
c0015579:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001557c:	e8 7b ff ff ff       	call   c00154fc <i386LoadCoprocessor(void*)>
c0015581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015586:	83 c4 10             	add    esp,0x10
c0015589:	a3 2c 3a 02 c0       	mov    ds:0xc0023a2c,eax
c001558e:	eb 2e                	jmp    c00155be <x87EmulHandler(regs*, void*)+0xae>
c0015590:	83 ec 0c             	sub    esp,0xc
c0015593:	53                   	push   ebx
c0015594:	e8 cd ee ff ff       	call   c0014466 <Vm::x87Handler(regs*)>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	84 c0                	test   al,al
c001559e:	75 1e                	jne    c00155be <x87EmulHandler(regs*, void*)+0xae>
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 00 f4 01 c0       	push   0xc001f400
c00155a8:	e8 32 42 ff ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c00155ad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00155b5:	83 c4 18             	add    esp,0x18
c00155b8:	5b                   	pop    ebx
c00155b9:	e9 5e dd ff ff       	jmp    c001331c <Thr::terminateFromIRQ(int)>
c00155be:	83 c4 08             	add    esp,0x8
c00155c1:	5b                   	pop    ebx
c00155c2:	c3                   	ret    

c00155c3 <Hal::initialiseCoprocessor()>:
c00155c3:	83 ec 10             	sub    esp,0x10
c00155c6:	c7 05 2c 3a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023a2c,0x0
c00155d0:	6a 00                	push   0x0
c00155d2:	68 10 55 01 c0       	push   0xc0015510
c00155d7:	6a 07                	push   0x7
c00155d9:	e8 56 5b ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155de:	e8 dd 69 00 00       	call   c001bfc0 <avxDetect>
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	85 c0                	test   eax,eax
c00155e8:	74 1c                	je     c0015606 <Hal::initialiseCoprocessor()+0x43>
c00155ea:	c7 05 34 3a 02 c0 ea bf 01 c0 	mov    DWORD PTR ds:0xc0023a34,0xc001bfea
c00155f4:	c7 05 30 3a 02 c0 fb bf 01 c0 	mov    DWORD PTR ds:0xc0023a30,0xc001bffb
c00155fe:	83 c4 0c             	add    esp,0xc
c0015601:	e9 06 6a 00 00       	jmp    c001c00c <avxInit>
c0015606:	e8 35 6c 00 00       	call   c001c240 <absolutelyNoChanceInHell>
c001560b:	85 c0                	test   eax,eax
c001560d:	74 1c                	je     c001562b <Hal::initialiseCoprocessor()+0x68>
c001560f:	c7 05 34 3a 02 c0 58 c2 01 c0 	mov    DWORD PTR ds:0xc0023a34,0xc001c258
c0015619:	c7 05 30 3a 02 c0 60 c2 01 c0 	mov    DWORD PTR ds:0xc0023a30,0xc001c260
c0015623:	83 c4 0c             	add    esp,0xc
c0015626:	e9 3d 6c 00 00       	jmp    c001c268 <sseInit>
c001562b:	e8 56 6c 00 00       	call   c001c286 <x87Detect>
c0015630:	85 c0                	test   eax,eax
c0015632:	74 1c                	je     c0015650 <Hal::initialiseCoprocessor()+0x8d>
c0015634:	c7 05 34 3a 02 c0 a1 c2 01 c0 	mov    DWORD PTR ds:0xc0023a34,0xc001c2a1
c001563e:	c7 05 30 3a 02 c0 a8 c2 01 c0 	mov    DWORD PTR ds:0xc0023a30,0xc001c2a8
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	e9 5f 6c 00 00       	jmp    c001c2af <x87Init>
c0015650:	c7 05 34 3a 02 c0 c5 4f 01 c0 	mov    DWORD PTR ds:0xc0023a34,0xc0014fc5
c001565a:	c7 05 30 3a 02 c0 c5 4f 01 c0 	mov    DWORD PTR ds:0xc0023a30,0xc0014fc5
c0015664:	0f 20 c0             	mov    eax,cr0
c0015667:	83 c8 04             	or     eax,0x4
c001566a:	0f 22 c0             	mov    cr0,eax
c001566d:	83 c4 0c             	add    esp,0xc
c0015670:	c3                   	ret    

c0015671 <Hal::panic(char const*)>:
c0015671:	e9 3f 9e ff ff       	jmp    c000f4b5 <Krnl::panic(char const*)>

c0015676 <Hal::initialise()>:
c0015676:	53                   	push   ebx
c0015677:	83 ec 08             	sub    esp,0x8
c001567a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001567f:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0015685:	b8 c6 4f 01 c0       	mov    eax,0xc0014fc6
c001568a:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0015691:	74 05                	je     c0015698 <Hal::initialise()+0x22>
c0015693:	b8 cb 4f 01 c0       	mov    eax,0xc0014fcb
c0015698:	a3 38 3a 02 c0       	mov    ds:0xc0023a38,eax
c001569d:	e8 b7 5c ff ff       	call   c000b359 <setupINTS()>
c00156a2:	80 3d 40 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d40,0x0
c00156a9:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c00156ae:	75 07                	jne    c00156b7 <Hal::initialise()+0x41>
c00156b0:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00156b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00156bd:	83 e0 01             	and    eax,0x1
c00156c0:	a2 28 3a 02 c0       	mov    ds:0xc0023a28,al
c00156c5:	e8 9e 02 00 00       	call   c0015968 <picOpen()>
c00156ca:	80 3d 28 3a 02 c0 00 	cmp    BYTE PTR ds:0xc0023a28,0x0
c00156d1:	74 0a                	je     c00156dd <Hal::initialise()+0x67>
c00156d3:	e8 e0 01 00 00       	call   c00158b8 <picDisable()>
c00156d8:	e8 91 62 00 00       	call   c001b96e <apicOpen()>
c00156dd:	bb 0f 00 00 00       	mov    ebx,0xf
c00156e2:	50                   	push   eax
c00156e3:	6a 00                	push   0x0
c00156e5:	68 34 54 01 c0       	push   0xc0015434
c00156ea:	6a 00                	push   0x0
c00156ec:	e8 43 5a ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156f1:	83 c4 0c             	add    esp,0xc
c00156f4:	6a 00                	push   0x0
c00156f6:	68 34 54 01 c0       	push   0xc0015434
c00156fb:	6a 01                	push   0x1
c00156fd:	e8 32 5a ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015702:	83 c4 0c             	add    esp,0xc
c0015705:	6a 00                	push   0x0
c0015707:	68 ce 4f 01 c0       	push   0xc0014fce
c001570c:	6a 02                	push   0x2
c001570e:	e8 21 5a ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015713:	83 c4 0c             	add    esp,0xc
c0015716:	6a 00                	push   0x0
c0015718:	68 34 54 01 c0       	push   0xc0015434
c001571d:	6a 03                	push   0x3
c001571f:	e8 10 5a ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015724:	83 c4 0c             	add    esp,0xc
c0015727:	6a 00                	push   0x0
c0015729:	68 34 54 01 c0       	push   0xc0015434
c001572e:	6a 04                	push   0x4
c0015730:	e8 ff 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015735:	83 c4 0c             	add    esp,0xc
c0015738:	6a 00                	push   0x0
c001573a:	68 34 54 01 c0       	push   0xc0015434
c001573f:	6a 05                	push   0x5
c0015741:	e8 ee 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015746:	83 c4 0c             	add    esp,0xc
c0015749:	6a 00                	push   0x0
c001574b:	68 68 54 01 c0       	push   0xc0015468
c0015750:	6a 06                	push   0x6
c0015752:	e8 dd 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015757:	83 c4 0c             	add    esp,0xc
c001575a:	6a 00                	push   0x0
c001575c:	68 e7 4f 01 c0       	push   0xc0014fe7
c0015761:	6a 08                	push   0x8
c0015763:	e8 cc 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015768:	83 c4 0c             	add    esp,0xc
c001576b:	6a 00                	push   0x0
c001576d:	68 34 54 01 c0       	push   0xc0015434
c0015772:	6a 09                	push   0x9
c0015774:	e8 bb 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015779:	83 c4 0c             	add    esp,0xc
c001577c:	6a 00                	push   0x0
c001577e:	68 34 54 01 c0       	push   0xc0015434
c0015783:	6a 0a                	push   0xa
c0015785:	e8 aa 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578a:	83 c4 0c             	add    esp,0xc
c001578d:	6a 00                	push   0x0
c001578f:	68 34 54 01 c0       	push   0xc0015434
c0015794:	6a 0b                	push   0xb
c0015796:	e8 99 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001579b:	83 c4 0c             	add    esp,0xc
c001579e:	6a 00                	push   0x0
c00157a0:	68 6d 53 01 c0       	push   0xc001536d
c00157a5:	6a 0d                	push   0xd
c00157a7:	e8 88 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ac:	83 c4 0c             	add    esp,0xc
c00157af:	6a 00                	push   0x0
c00157b1:	68 d2 53 01 c0       	push   0xc00153d2
c00157b6:	6a 0e                	push   0xe
c00157b8:	e8 77 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157bd:	83 c4 10             	add    esp,0x10
c00157c0:	50                   	push   eax
c00157c1:	6a 00                	push   0x0
c00157c3:	68 34 54 01 c0       	push   0xc0015434
c00157c8:	53                   	push   ebx
c00157c9:	43                   	inc    ebx
c00157ca:	e8 65 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	83 fb 1e             	cmp    ebx,0x1e
c00157d5:	75 e9                	jne    c00157c0 <Hal::initialise()+0x14a>
c00157d7:	50                   	push   eax
c00157d8:	6a 00                	push   0x0
c00157da:	68 9d 0f 01 c0       	push   0xc0010f9d
c00157df:	6a 60                	push   0x60
c00157e1:	e8 4e 59 ff ff       	call   c000b134 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e6:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c00157eb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00157f5:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00157fc:	e8 54 12 ff ff       	call   c0006a55 <malloc>
c0015801:	89 04 24             	mov    DWORD PTR [esp],eax
c0015804:	89 c3                	mov    ebx,eax
c0015806:	e8 15 09 00 00       	call   c0016120 <RTC::RTC()>
c001580b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015815:	5a                   	pop    edx
c0015816:	59                   	pop    ecx
c0015817:	53                   	push   ebx
c0015818:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c001581e:	e8 df 53 ff ff       	call   c000ac02 <Device::addChild(Device*)>
c0015823:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015825:	6a 00                	push   0x0
c0015827:	6a 00                	push   0x0
c0015829:	6a 00                	push   0x0
c001582b:	53                   	push   ebx
c001582c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001582f:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0015834:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001583a:	83 c4 28             	add    esp,0x28
c001583d:	5b                   	pop    ebx
c001583e:	c3                   	ret    

c001583f <Hal::makeBeep(int)>:
c001583f:	53                   	push   ebx
c0015840:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015844:	85 db                	test   ebx,ebx
c0015846:	75 07                	jne    c001584f <Hal::makeBeep(int)+0x10>
c0015848:	e4 61                	in     al,0x61
c001584a:	83 e0 fc             	and    eax,0xfffffffc
c001584d:	eb 26                	jmp    c0015875 <Hal::makeBeep(int)+0x36>
c001584f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015854:	99                   	cdq    
c0015855:	f7 fb                	idiv   ebx
c0015857:	89 c1                	mov    ecx,eax
c0015859:	b0 b6                	mov    al,0xb6
c001585b:	e6 43                	out    0x43,al
c001585d:	88 c8                	mov    al,cl
c001585f:	e6 42                	out    0x42,al
c0015861:	89 c8                	mov    eax,ecx
c0015863:	c1 e8 08             	shr    eax,0x8
c0015866:	e6 42                	out    0x42,al
c0015868:	e4 61                	in     al,0x61
c001586a:	88 c2                	mov    dl,al
c001586c:	83 ca 03             	or     edx,0x3
c001586f:	38 c2                	cmp    dl,al
c0015871:	74 04                	je     c0015877 <Hal::makeBeep(int)+0x38>
c0015873:	88 d0                	mov    al,dl
c0015875:	e6 61                	out    0x61,al
c0015877:	5b                   	pop    ebx
c0015878:	c3                   	ret    

c0015879 <Hal::getRand()>:
c0015879:	31 c0                	xor    eax,eax
c001587b:	c3                   	ret    

c001587c <Hal::endOfInterrupt(int)>:
c001587c:	80 3d 28 3a 02 c0 00 	cmp    BYTE PTR ds:0xc0023a28,0x0
c0015883:	74 23                	je     c00158a8 <Hal::endOfInterrupt(int)+0x2c>
c0015885:	83 ec 14             	sub    esp,0x14
c0015888:	6a 1b                	push   0x1b
c001588a:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015890:	e8 91 07 ff ff       	call   c0006026 <Computer::rdmsr(unsigned int)>
c0015895:	25 00 f0 ff ff       	and    eax,0xfffff000
c001589a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158a4:	83 c4 1c             	add    esp,0x1c
c00158a7:	c3                   	ret    
c00158a8:	e9 3f 02 00 00       	jmp    c0015aec <picEOI(int)>
c00158ad:	66 90                	xchg   ax,ax
c00158af:	90                   	nop

c00158b0 <picIoWait()>:
c00158b0:	eb 00                	jmp    c00158b2 <picIoWait()+0x2>
c00158b2:	eb 00                	jmp    c00158b4 <picIoWait()+0x4>
c00158b4:	90                   	nop
c00158b5:	c3                   	ret    
c00158b6:	66 90                	xchg   ax,ax

c00158b8 <picDisable()>:
c00158b8:	83 ec 10             	sub    esp,0x10
c00158bb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158c2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158d0:	ee                   	out    dx,al
c00158d1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158d8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158dd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158e1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158e6:	ee                   	out    dx,al
c00158e7:	90                   	nop
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	c3                   	ret    

c00158ec <picGetIRQReg(int)>:
c00158ec:	83 ec 10             	sub    esp,0x10
c00158ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158f3:	0f b6 c0             	movzx  eax,al
c00158f6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00158fd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015901:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015905:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001590a:	ee                   	out    dx,al
c001590b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001590f:	0f b6 c0             	movzx  eax,al
c0015912:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015919:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001591d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015921:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015926:	ee                   	out    dx,al
c0015927:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001592e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015933:	89 c2                	mov    edx,eax
c0015935:	ec                   	in     al,dx
c0015936:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001593a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001593e:	0f b6 c0             	movzx  eax,al
c0015941:	c1 e0 08             	shl    eax,0x8
c0015944:	89 c1                	mov    ecx,eax
c0015946:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001594d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015952:	89 c2                	mov    edx,eax
c0015954:	ec                   	in     al,dx
c0015955:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015959:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001595d:	0f b6 c0             	movzx  eax,al
c0015960:	09 c8                	or     eax,ecx
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	c3                   	ret    
c0015966:	66 90                	xchg   ax,ax

c0015968 <picOpen()>:
c0015968:	83 ec 50             	sub    esp,0x50
c001596b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015972:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015977:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001597b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001597f:	ee                   	out    dx,al
c0015980:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015987:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001598c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015990:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015994:	ee                   	out    dx,al
c0015995:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001599d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159a5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159b0:	89 c2                	mov    edx,eax
c00159b2:	ec                   	in     al,dx
c00159b3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159bb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159bf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159ca:	89 c2                	mov    edx,eax
c00159cc:	ec                   	in     al,dx
c00159cd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159d1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159d5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159d9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00159e0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00159e5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00159e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159ed:	ee                   	out    dx,al
c00159ee:	e8 bd fe ff ff       	call   c00158b0 <picIoWait()>
c00159f3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00159fa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00159ff:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a07:	ee                   	out    dx,al
c0015a08:	e8 a3 fe ff ff       	call   c00158b0 <picIoWait()>
c0015a0d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a11:	0f b6 c0             	movzx  eax,al
c0015a14:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a1b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a1f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a27:	ee                   	out    dx,al
c0015a28:	e8 83 fe ff ff       	call   c00158b0 <picIoWait()>
c0015a2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a31:	0f b6 c0             	movzx  eax,al
c0015a34:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a3b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a3f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a47:	ee                   	out    dx,al
c0015a48:	e8 63 fe ff ff       	call   c00158b0 <picIoWait()>
c0015a4d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a54:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a59:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a61:	ee                   	out    dx,al
c0015a62:	e8 49 fe ff ff       	call   c00158b0 <picIoWait()>
c0015a67:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a6e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a73:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a7b:	ee                   	out    dx,al
c0015a7c:	e8 2f fe ff ff       	call   c00158b0 <picIoWait()>
c0015a81:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015a88:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015a8d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015a91:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015a95:	ee                   	out    dx,al
c0015a96:	e8 15 fe ff ff       	call   c00158b0 <picIoWait()>
c0015a9b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015aa2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015aa7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015aab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015aaf:	ee                   	out    dx,al
c0015ab0:	e8 fb fd ff ff       	call   c00158b0 <picIoWait()>
c0015ab5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0015aba:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ac1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015ac5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015ac9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015acd:	ee                   	out    dx,al
c0015ace:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0015ad3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015ada:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015ade:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015ae2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015ae6:	ee                   	out    dx,al
c0015ae7:	90                   	nop
c0015ae8:	83 c4 50             	add    esp,0x50
c0015aeb:	c3                   	ret    

c0015aec <picEOI(int)>:
c0015aec:	83 ec 10             	sub    esp,0x10
c0015aef:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015af4:	75 1e                	jne    c0015b14 <picEOI(int)+0x28>
c0015af6:	6a 0b                	push   0xb
c0015af8:	e8 ef fd ff ff       	call   c00158ec <picGetIRQReg(int)>
c0015afd:	83 c4 04             	add    esp,0x4
c0015b00:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b05:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0015b0a:	25 80 00 00 00       	and    eax,0x80
c0015b0f:	74 73                	je     c0015b84 <picEOI(int)+0x98>
c0015b11:	8d 76 00             	lea    esi,[esi+0x0]
c0015b14:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b19:	75 31                	jne    c0015b4c <picEOI(int)+0x60>
c0015b1b:	6a 0b                	push   0xb
c0015b1d:	e8 ca fd ff ff       	call   c00158ec <picGetIRQReg(int)>
c0015b22:	83 c4 04             	add    esp,0x4
c0015b25:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b2e:	66 85 c0             	test   ax,ax
c0015b31:	78 19                	js     c0015b4c <picEOI(int)+0x60>
c0015b33:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b3a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b3f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b43:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b48:	ee                   	out    dx,al
c0015b49:	eb 3d                	jmp    c0015b88 <picEOI(int)+0x9c>
c0015b4b:	90                   	nop
c0015b4c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b51:	7e 19                	jle    c0015b6c <picEOI(int)+0x80>
c0015b53:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b5a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b5f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b63:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b68:	ee                   	out    dx,al
c0015b69:	8d 76 00             	lea    esi,[esi+0x0]
c0015b6c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015b73:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015b78:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015b7c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015b81:	ee                   	out    dx,al
c0015b82:	eb 04                	jmp    c0015b88 <picEOI(int)+0x9c>
c0015b84:	90                   	nop
c0015b85:	8d 76 00             	lea    esi,[esi+0x0]
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	c3                   	ret    

c0015b8c <RTC::open(int, int, void*)>:
c0015b8c:	31 c0                	xor    eax,eax
c0015b8e:	c3                   	ret    
c0015b8f:	90                   	nop

c0015b90 <RTC::close(int, int, void*)>:
c0015b90:	31 c0                	xor    eax,eax
c0015b92:	c3                   	ret    
c0015b93:	90                   	nop

c0015b94 <RTC::timeInSecondsUTC()>:
c0015b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b98:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015b9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ba4:	c3                   	ret    
c0015ba5:	90                   	nop

c0015ba6 <RTC::timeInDatetimeUTC()>:
c0015ba6:	53                   	push   ebx
c0015ba7:	83 ec 14             	sub    esp,0x14
c0015baa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bb4:	50                   	push   eax
c0015bb5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bb8:	83 c4 0c             	add    esp,0xc
c0015bbb:	52                   	push   edx
c0015bbc:	50                   	push   eax
c0015bbd:	53                   	push   ebx
c0015bbe:	e8 b3 4d ff ff       	call   c000a976 <secondsToDatetime(unsigned long long)>
c0015bc3:	89 d8                	mov    eax,ebx
c0015bc5:	83 c4 14             	add    esp,0x14
c0015bc8:	5b                   	pop    ebx
c0015bc9:	c2 04 00             	ret    0x4

c0015bcc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bcc:	56                   	push   esi
c0015bcd:	53                   	push   ebx
c0015bce:	83 ec 14             	sub    esp,0x14
c0015bd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bd7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015bda:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015bde:	52                   	push   edx
c0015bdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be7:	50                   	push   eax
c0015be8:	e8 89 4d ff ff       	call   c000a976 <secondsToDatetime(unsigned long long)>
c0015bed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bf1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015bf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015bf9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015bfd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c01:	89 f0                	mov    eax,esi
c0015c03:	83 c4 20             	add    esp,0x20
c0015c06:	5b                   	pop    ebx
c0015c07:	5e                   	pop    esi
c0015c08:	ff e0                	jmp    eax

c0015c0a <RTC::~RTC()>:
c0015c0a:	83 ec 0c             	sub    esp,0xc
c0015c0d:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c0015c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c16:	89 10                	mov    DWORD PTR [eax],edx
c0015c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	50                   	push   eax
c0015c20:	e8 db 4a ff ff       	call   c000a700 <Clock::~Clock()>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	90                   	nop
c0015c29:	83 c4 0c             	add    esp,0xc
c0015c2c:	c3                   	ret    
c0015c2d:	90                   	nop

c0015c2e <RTC::~RTC()>:
c0015c2e:	83 ec 0c             	sub    esp,0xc
c0015c31:	83 ec 0c             	sub    esp,0xc
c0015c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c38:	e8 cd ff ff ff       	call   c0015c0a <RTC::~RTC()>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	83 ec 08             	sub    esp,0x8
c0015c43:	68 60 01 00 00       	push   0x160
c0015c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c4c:	e8 ad 3a ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	83 c4 0c             	add    esp,0xc
c0015c57:	c3                   	ret    

c0015c58 <RTC::get_update_in_progress_flag()>:
c0015c58:	83 ec 14             	sub    esp,0x14
c0015c5b:	6a 0a                	push   0xa
c0015c5d:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015c63:	e8 72 04 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015c68:	83 c4 1c             	add    esp,0x1c
c0015c6b:	c0 e8 07             	shr    al,0x7
c0015c6e:	c3                   	ret    
c0015c6f:	90                   	nop

c0015c70 <RTC::completeRTCRefresh()>:
c0015c70:	55                   	push   ebp
c0015c71:	57                   	push   edi
c0015c72:	56                   	push   esi
c0015c73:	53                   	push   ebx
c0015c74:	83 ec 2c             	sub    esp,0x2c
c0015c77:	8b 1d 4c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a4c
c0015c7d:	83 ec 0c             	sub    esp,0xc
c0015c80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c84:	e8 cf ff ff ff       	call   c0015c58 <RTC::get_update_in_progress_flag()>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	84 c0                	test   al,al
c0015c8e:	74 0e                	je     c0015c9e <RTC::completeRTCRefresh()+0x2e>
c0015c90:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015c96:	3b 05 4c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a4c
c0015c9c:	73 df                	jae    c0015c7d <RTC::completeRTCRefresh()+0xd>
c0015c9e:	55                   	push   ebp
c0015c9f:	55                   	push   ebp
c0015ca0:	6a 00                	push   0x0
c0015ca2:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015ca8:	e8 2d 04 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015cad:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cb1:	58                   	pop    eax
c0015cb2:	5a                   	pop    edx
c0015cb3:	6a 02                	push   0x2
c0015cb5:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015cbb:	e8 1a 04 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015cc0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015cc4:	59                   	pop    ecx
c0015cc5:	5b                   	pop    ebx
c0015cc6:	6a 04                	push   0x4
c0015cc8:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015cce:	e8 07 04 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015cd3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015cd7:	5e                   	pop    esi
c0015cd8:	5f                   	pop    edi
c0015cd9:	6a 07                	push   0x7
c0015cdb:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015ce1:	e8 f4 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015ce6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015cea:	5d                   	pop    ebp
c0015ceb:	58                   	pop    eax
c0015cec:	6a 08                	push   0x8
c0015cee:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015cf4:	e8 e1 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015cf9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015cfd:	58                   	pop    eax
c0015cfe:	5a                   	pop    edx
c0015cff:	6a 09                	push   0x9
c0015d01:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d07:	e8 ce 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	0f b6 e8             	movzx  ebp,al
c0015d12:	8b 1d 4c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a4c
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d1f:	e8 34 ff ff ff       	call   c0015c58 <RTC::get_update_in_progress_flag()>
c0015d24:	83 c4 10             	add    esp,0x10
c0015d27:	84 c0                	test   al,al
c0015d29:	74 0e                	je     c0015d39 <RTC::completeRTCRefresh()+0xc9>
c0015d2b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d31:	3b 05 4c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a4c
c0015d37:	73 df                	jae    c0015d18 <RTC::completeRTCRefresh()+0xa8>
c0015d39:	50                   	push   eax
c0015d3a:	50                   	push   eax
c0015d3b:	6a 00                	push   0x0
c0015d3d:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d43:	e8 92 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d48:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d4c:	58                   	pop    eax
c0015d4d:	5a                   	pop    edx
c0015d4e:	6a 02                	push   0x2
c0015d50:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d56:	e8 7f 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d5b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d5f:	59                   	pop    ecx
c0015d60:	5b                   	pop    ebx
c0015d61:	6a 04                	push   0x4
c0015d63:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d69:	e8 6c 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d6e:	5e                   	pop    esi
c0015d6f:	88 c3                	mov    bl,al
c0015d71:	5f                   	pop    edi
c0015d72:	6a 07                	push   0x7
c0015d74:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d7a:	e8 5b 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d7f:	89 c6                	mov    esi,eax
c0015d81:	58                   	pop    eax
c0015d82:	5a                   	pop    edx
c0015d83:	6a 08                	push   0x8
c0015d85:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d8b:	e8 4a 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015d90:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015d94:	59                   	pop    ecx
c0015d95:	5f                   	pop    edi
c0015d96:	6a 09                	push   0x9
c0015d98:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015d9e:	e8 37 03 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015da3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015da7:	0f b6 f8             	movzx  edi,al
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015db1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015db5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015db9:	89 f1                	mov    ecx,esi
c0015dbb:	0f 94 c0             	sete   al
c0015dbe:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015dc2:	0f 94 c2             	sete   dl
c0015dc5:	21 d0                	and    eax,edx
c0015dc7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015dcb:	0f 94 c2             	sete   dl
c0015dce:	21 c2                	and    edx,eax
c0015dd0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015dd4:	0f 94 c0             	sete   al
c0015dd7:	21 d0                	and    eax,edx
c0015dd9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ddd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015de1:	0f 94 c1             	sete   cl
c0015de4:	84 c8                	test   al,cl
c0015de6:	75 29                	jne    c0015e11 <RTC::completeRTCRefresh()+0x1a1>
c0015de8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015dec:	89 fd                	mov    ebp,edi
c0015dee:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015df2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015df6:	89 f0                	mov    eax,esi
c0015df8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015dfc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e00:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e04:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e08:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e0c:	e9 01 ff ff ff       	jmp    c0015d12 <RTC::completeRTCRefresh()+0xa2>
c0015e11:	39 fd                	cmp    ebp,edi
c0015e13:	75 d3                	jne    c0015de8 <RTC::completeRTCRefresh()+0x178>
c0015e15:	55                   	push   ebp
c0015e16:	55                   	push   ebp
c0015e17:	6a 0b                	push   0xb
c0015e19:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015e1f:	e8 b6 02 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	89 c5                	mov    ebp,eax
c0015e29:	a8 04                	test   al,0x4
c0015e2b:	75 78                	jne    c0015ea5 <RTC::completeRTCRefresh()+0x235>
c0015e2d:	b1 0a                	mov    cl,0xa
c0015e2f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e33:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e37:	83 e2 0f             	and    edx,0xf
c0015e3a:	c0 e8 04             	shr    al,0x4
c0015e3d:	c1 ef 04             	shr    edi,0x4
c0015e40:	f6 e1                	mul    cl
c0015e42:	6b ff 0a             	imul   edi,edi,0xa
c0015e45:	01 d0                	add    eax,edx
c0015e47:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e4b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e4f:	83 e2 0f             	and    edx,0xf
c0015e52:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e56:	c0 e8 04             	shr    al,0x4
c0015e59:	f6 e1                	mul    cl
c0015e5b:	01 d0                	add    eax,edx
c0015e5d:	88 da                	mov    dl,bl
c0015e5f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e63:	83 e2 0f             	and    edx,0xf
c0015e66:	88 d8                	mov    al,bl
c0015e68:	83 e3 80             	and    ebx,0xffffff80
c0015e6b:	c0 e8 04             	shr    al,0x4
c0015e6e:	83 e0 07             	and    eax,0x7
c0015e71:	f6 e1                	mul    cl
c0015e73:	01 d0                	add    eax,edx
c0015e75:	89 f2                	mov    edx,esi
c0015e77:	09 c3                	or     ebx,eax
c0015e79:	83 e2 0f             	and    edx,0xf
c0015e7c:	89 f0                	mov    eax,esi
c0015e7e:	c0 e8 04             	shr    al,0x4
c0015e81:	f6 e1                	mul    cl
c0015e83:	8d 34 02             	lea    esi,[edx+eax*1]
c0015e86:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e8a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e8e:	83 e2 0f             	and    edx,0xf
c0015e91:	c0 e8 04             	shr    al,0x4
c0015e94:	f6 e1                	mul    cl
c0015e96:	01 d0                	add    eax,edx
c0015e98:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ea0:	83 e0 0f             	and    eax,0xf
c0015ea3:	01 c7                	add    edi,eax
c0015ea5:	83 e5 02             	and    ebp,0x2
c0015ea8:	75 14                	jne    c0015ebe <RTC::completeRTCRefresh()+0x24e>
c0015eaa:	84 db                	test   bl,bl
c0015eac:	79 10                	jns    c0015ebe <RTC::completeRTCRefresh()+0x24e>
c0015eae:	83 e3 7f             	and    ebx,0x7f
c0015eb1:	b9 18 00 00 00       	mov    ecx,0x18
c0015eb6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015eb9:	99                   	cdq    
c0015eba:	f7 f9                	idiv   ecx
c0015ebc:	88 d3                	mov    bl,dl
c0015ebe:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ec4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015eca:	77 06                	ja     c0015ed2 <RTC::completeRTCRefresh()+0x262>
c0015ecc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015ed2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015ed7:	31 d2                	xor    edx,edx
c0015ed9:	c1 e1 10             	shl    ecx,0x10
c0015edc:	89 d7                	mov    edi,edx
c0015ede:	c1 e5 10             	shl    ebp,0x10
c0015ee1:	31 c0                	xor    eax,eax
c0015ee3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015ee9:	09 cf                	or     edi,ecx
c0015eeb:	89 fa                	mov    edx,edi
c0015eed:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015ef1:	88 da                	mov    dl,bl
c0015ef3:	89 f3                	mov    ebx,esi
c0015ef5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015ef9:	88 d8                	mov    al,bl
c0015efb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015eff:	0f b7 c8             	movzx  ecx,ax
c0015f02:	09 e9                	or     ecx,ebp
c0015f04:	89 c8                	mov    eax,ecx
c0015f06:	51                   	push   ecx
c0015f07:	51                   	push   ecx
c0015f08:	52                   	push   edx
c0015f09:	50                   	push   eax
c0015f0a:	e8 e0 48 ff ff       	call   c000a7ef <datetimeToSeconds(datetime_t)>
c0015f0f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f13:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f19:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f1f:	83 c4 3c             	add    esp,0x3c
c0015f22:	5b                   	pop    ebx
c0015f23:	5e                   	pop    esi
c0015f24:	5f                   	pop    edi
c0015f25:	5d                   	pop    ebp
c0015f26:	c3                   	ret    
c0015f27:	90                   	nop

c0015f28 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f28:	55                   	push   ebp
c0015f29:	57                   	push   edi
c0015f2a:	56                   	push   esi
c0015f2b:	53                   	push   ebx
c0015f2c:	83 ec 30             	sub    esp,0x30
c0015f2f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f33:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f37:	6a 00                	push   0x0
c0015f39:	6a 00                	push   0x0
c0015f3b:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015f41:	e8 a6 02 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f46:	83 c4 0c             	add    esp,0xc
c0015f49:	6a 00                	push   0x0
c0015f4b:	6a 02                	push   0x2
c0015f4d:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015f53:	e8 94 02 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f58:	31 d2                	xor    edx,edx
c0015f5a:	89 f9                	mov    ecx,edi
c0015f5c:	89 f8                	mov    eax,edi
c0015f5e:	c1 e9 10             	shr    ecx,0x10
c0015f61:	0f b6 c4             	movzx  eax,ah
c0015f64:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f68:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f70:	b9 64 00 00 00       	mov    ecx,0x64
c0015f75:	89 f0                	mov    eax,esi
c0015f77:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015f7b:	89 f0                	mov    eax,esi
c0015f7d:	0f b6 c4             	movzx  eax,ah
c0015f80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f84:	89 f0                	mov    eax,esi
c0015f86:	c1 e8 10             	shr    eax,0x10
c0015f89:	66 f7 f1             	div    cx
c0015f8c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015f91:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015f96:	59                   	pop    ecx
c0015f97:	5b                   	pop    ebx
c0015f98:	89 fb                	mov    ebx,edi
c0015f9a:	6a 0b                	push   0xb
c0015f9c:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0015fa2:	e8 33 01 ff ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0015fa7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fb3:	75 74                	jne    c0016029 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fb5:	b2 0a                	mov    dl,0xa
c0015fb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fbb:	0f b6 c1             	movzx  eax,cl
c0015fbe:	f6 f2                	div    dl
c0015fc0:	88 c3                	mov    bl,al
c0015fc2:	88 e0                	mov    al,ah
c0015fc4:	c1 e3 04             	shl    ebx,0x4
c0015fc7:	09 c3                	or     ebx,eax
c0015fc9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015fce:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015fd2:	f6 f2                	div    dl
c0015fd4:	88 c1                	mov    cl,al
c0015fd6:	88 e0                	mov    al,ah
c0015fd8:	c1 e1 04             	shl    ecx,0x4
c0015fdb:	09 c1                	or     ecx,eax
c0015fdd:	89 f8                	mov    eax,edi
c0015fdf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015fe3:	0f b6 c0             	movzx  eax,al
c0015fe6:	f6 f2                	div    dl
c0015fe8:	88 c3                	mov    bl,al
c0015fea:	88 e0                	mov    al,ah
c0015fec:	c1 e3 04             	shl    ebx,0x4
c0015fef:	09 c3                	or     ebx,eax
c0015ff1:	89 f0                	mov    eax,esi
c0015ff3:	0f b6 c0             	movzx  eax,al
c0015ff6:	f6 f2                	div    dl
c0015ff8:	88 c1                	mov    cl,al
c0015ffa:	88 e0                	mov    al,ah
c0015ffc:	c1 e1 04             	shl    ecx,0x4
c0015fff:	09 c1                	or     ecx,eax
c0016001:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016006:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001600a:	f6 f2                	div    dl
c001600c:	88 c1                	mov    cl,al
c001600e:	88 e0                	mov    al,ah
c0016010:	c1 e1 04             	shl    ecx,0x4
c0016013:	09 c1                	or     ecx,eax
c0016015:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001601a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001601e:	f6 f2                	div    dl
c0016020:	89 c5                	mov    ebp,eax
c0016022:	88 e0                	mov    al,ah
c0016024:	c1 e5 04             	shl    ebp,0x4
c0016027:	09 c5                	or     ebp,eax
c0016029:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001602e:	75 17                	jne    c0016047 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016030:	80 fb 0b             	cmp    bl,0xb
c0016033:	76 0c                	jbe    c0016041 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016035:	80 eb 0c             	sub    bl,0xc
c0016038:	75 02                	jne    c001603c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001603a:	b3 0c                	mov    bl,0xc
c001603c:	83 cb 80             	or     ebx,0xffffff80
c001603f:	eb 06                	jmp    c0016047 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016041:	84 db                	test   bl,bl
c0016043:	75 02                	jne    c0016047 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016045:	b3 0c                	mov    bl,0xc
c0016047:	0f b6 db             	movzx  ebx,bl
c001604a:	50                   	push   eax
c001604b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016050:	50                   	push   eax
c0016051:	6a 00                	push   0x0
c0016053:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0016059:	e8 8e 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c001605e:	83 c4 0c             	add    esp,0xc
c0016061:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016066:	50                   	push   eax
c0016067:	6a 02                	push   0x2
c0016069:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c001606f:	e8 78 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c0016074:	83 c4 0c             	add    esp,0xc
c0016077:	53                   	push   ebx
c0016078:	6a 04                	push   0x4
c001607a:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0016080:	e8 67 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c0016085:	83 c4 0c             	add    esp,0xc
c0016088:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001608d:	50                   	push   eax
c001608e:	6a 07                	push   0x7
c0016090:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c0016096:	e8 51 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c001609b:	83 c4 0c             	add    esp,0xc
c001609e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160a3:	50                   	push   eax
c00160a4:	6a 08                	push   0x8
c00160a6:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c00160ac:	e8 3b 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b1:	83 c4 0c             	add    esp,0xc
c00160b4:	89 e8                	mov    eax,ebp
c00160b6:	0f b6 e8             	movzx  ebp,al
c00160b9:	55                   	push   ebp
c00160ba:	6a 09                	push   0x9
c00160bc:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c00160c2:	e8 25 01 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c7:	5a                   	pop    edx
c00160c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160cc:	e8 9f fb ff ff       	call   c0015c70 <RTC::completeRTCRefresh()>
c00160d1:	83 c4 3c             	add    esp,0x3c
c00160d4:	b0 01                	mov    al,0x1
c00160d6:	5b                   	pop    ebx
c00160d7:	5e                   	pop    esi
c00160d8:	5f                   	pop    edi
c00160d9:	5d                   	pop    ebp
c00160da:	c3                   	ret    

c00160db <rtcIRQHandler(regs*, void*)>:
c00160db:	53                   	push   ebx
c00160dc:	83 ec 10             	sub    esp,0x10
c00160df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160e3:	6a 0c                	push   0xc
c00160e5:	ff 35 68 04 02 c0    	push   DWORD PTR ds:0xc0020468
c00160eb:	e8 ea ff fe ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c00160f0:	83 c4 10             	add    esp,0x10
c00160f3:	84 c0                	test   al,al
c00160f5:	79 24                	jns    c001611b <rtcIRQHandler(regs*, void*)+0x40>
c00160f7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00160fe:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016105:	66 ff 05 40 3a 02 c0 	inc    WORD PTR ds:0xc0023a40
c001610c:	75 0d                	jne    c001611b <rtcIRQHandler(regs*, void*)+0x40>
c001610e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016112:	83 c4 08             	add    esp,0x8
c0016115:	5b                   	pop    ebx
c0016116:	e9 55 fb ff ff       	jmp    c0015c70 <RTC::completeRTCRefresh()>
c001611b:	83 c4 08             	add    esp,0x8
c001611e:	5b                   	pop    ebx
c001611f:	c3                   	ret    

c0016120 <RTC::RTC()>:
c0016120:	83 ec 1c             	sub    esp,0x1c
c0016123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016127:	83 ec 08             	sub    esp,0x8
c001612a:	68 63 f4 01 c0       	push   0xc001f463
c001612f:	50                   	push   eax
c0016130:	e8 95 45 ff ff       	call   c000a6ca <Clock::Clock(char const*)>
c0016135:	83 c4 10             	add    esp,0x10
c0016138:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c001613d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016141:	89 10                	mov    DWORD PTR [eax],edx
c0016143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016147:	83 ec 0c             	sub    esp,0xc
c001614a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001614e:	6a 01                	push   0x1
c0016150:	68 db 60 01 c0       	push   0xc00160db
c0016155:	6a 08                	push   0x8
c0016157:	50                   	push   eax
c0016158:	e8 51 4a ff ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001615d:	83 c4 20             	add    esp,0x20
c0016160:	89 c2                	mov    edx,eax
c0016162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016166:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001616c:	fa                   	cli    
c001616d:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c0016172:	40                   	inc    eax
c0016173:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c0016178:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001617d:	83 ec 08             	sub    esp,0x8
c0016180:	6a 0b                	push   0xb
c0016182:	50                   	push   eax
c0016183:	e8 52 ff fe ff       	call   c00060da <Computer::readCMOS(unsigned char)>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001618f:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0016194:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016198:	83 ca 10             	or     edx,0x10
c001619b:	0f b6 d2             	movzx  edx,dl
c001619e:	83 ec 04             	sub    esp,0x4
c00161a1:	52                   	push   edx
c00161a2:	6a 0b                	push   0xb
c00161a4:	50                   	push   eax
c00161a5:	e8 42 00 ff ff       	call   c00061ec <Computer::writeCMOS(unsigned char, unsigned char)>
c00161aa:	83 c4 10             	add    esp,0x10
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161b4:	e8 b7 fa ff ff       	call   c0015c70 <RTC::completeRTCRefresh()>
c00161b9:	83 c4 10             	add    esp,0x10
c00161bc:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00161c1:	48                   	dec    eax
c00161c2:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c00161c7:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c00161cc:	85 c0                	test   eax,eax
c00161ce:	75 01                	jne    c00161d1 <RTC::RTC()+0xb1>
c00161d0:	fb                   	sti    
c00161d1:	90                   	nop
c00161d2:	83 c4 1c             	add    esp,0x1c
c00161d5:	c3                   	ret    
c00161d6:	66 90                	xchg   ax,ax

c00161d8 <Hal::consoleScroll(int, int)>:
c00161d8:	83 ec 10             	sub    esp,0x10
c00161db:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00161e3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00161eb:	90                   	nop
c00161ec:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00161f1:	0f 8f e1 00 00 00    	jg     c00162d8 <Hal::consoleScroll(int, int)+0x100>
c00161f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00161ff:	90                   	nop
c0016200:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016208:	0f 8f be 00 00 00    	jg     c00162cc <Hal::consoleScroll(int, int)+0xf4>
c001620e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016212:	89 d0                	mov    eax,edx
c0016214:	c1 e0 02             	shl    eax,0x2
c0016217:	01 d0                	add    eax,edx
c0016219:	c1 e0 05             	shl    eax,0x5
c001621c:	89 c2                	mov    edx,eax
c001621e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016222:	01 d0                	add    eax,edx
c0016224:	89 c2                	mov    edx,eax
c0016226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001622a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001622d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016231:	89 d0                	mov    eax,edx
c0016233:	c1 e0 02             	shl    eax,0x2
c0016236:	01 d0                	add    eax,edx
c0016238:	c1 e0 05             	shl    eax,0x5
c001623b:	89 c2                	mov    edx,eax
c001623d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016241:	01 d0                	add    eax,edx
c0016243:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001624d:	01 c2                	add    edx,eax
c001624f:	8a 01                	mov    al,BYTE PTR [ecx]
c0016251:	88 02                	mov    BYTE PTR [edx],al
c0016253:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016258:	75 66                	jne    c00162c0 <Hal::consoleScroll(int, int)+0xe8>
c001625a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001625e:	83 e0 01             	and    eax,0x1
c0016261:	74 39                	je     c001629c <Hal::consoleScroll(int, int)+0xc4>
c0016263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016267:	83 e0 0f             	and    eax,0xf
c001626a:	88 c2                	mov    dl,al
c001626c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016270:	c1 e0 04             	shl    eax,0x4
c0016273:	88 d1                	mov    cl,dl
c0016275:	09 c1                	or     ecx,eax
c0016277:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627b:	89 d0                	mov    eax,edx
c001627d:	c1 e0 02             	shl    eax,0x2
c0016280:	01 d0                	add    eax,edx
c0016282:	c1 e0 05             	shl    eax,0x5
c0016285:	89 c2                	mov    edx,eax
c0016287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001628b:	01 d0                	add    eax,edx
c001628d:	89 c2                	mov    edx,eax
c001628f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016293:	01 d0                	add    eax,edx
c0016295:	88 ca                	mov    dl,cl
c0016297:	88 10                	mov    BYTE PTR [eax],dl
c0016299:	eb 25                	jmp    c00162c0 <Hal::consoleScroll(int, int)+0xe8>
c001629b:	90                   	nop
c001629c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162a0:	89 d0                	mov    eax,edx
c00162a2:	c1 e0 02             	shl    eax,0x2
c00162a5:	01 d0                	add    eax,edx
c00162a7:	c1 e0 05             	shl    eax,0x5
c00162aa:	89 c2                	mov    edx,eax
c00162ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162b0:	01 d0                	add    eax,edx
c00162b2:	89 c2                	mov    edx,eax
c00162b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b8:	01 d0                	add    eax,edx
c00162ba:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162bd:	8d 76 00             	lea    esi,[esi+0x0]
c00162c0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162c4:	e9 37 ff ff ff       	jmp    c0016200 <Hal::consoleScroll(int, int)+0x28>
c00162c9:	8d 76 00             	lea    esi,[esi+0x0]
c00162cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00162d0:	e9 17 ff ff ff       	jmp    c00161ec <Hal::consoleScroll(int, int)+0x14>
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]
c00162d8:	90                   	nop
c00162d9:	83 c4 10             	add    esp,0x10
c00162dc:	c3                   	ret    
c00162dd:	8d 76 00             	lea    esi,[esi+0x0]

c00162e0 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c00162e0:	83 ec 14             	sub    esp,0x14
c00162e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162e7:	88 04 24             	mov    BYTE PTR [esp],al
c00162ea:	8a 04 24             	mov    al,BYTE PTR [esp]
c00162ed:	0f b6 c0             	movzx  eax,al
c00162f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162f4:	89 d1                	mov    ecx,edx
c00162f6:	83 e1 0f             	and    ecx,0xf
c00162f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162fd:	c1 e2 04             	shl    edx,0x4
c0016300:	0f b6 d2             	movzx  edx,dl
c0016303:	09 ca                	or     edx,ecx
c0016305:	c1 e2 08             	shl    edx,0x8
c0016308:	09 d0                	or     eax,edx
c001630a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001630f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016317:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001631b:	89 d0                	mov    eax,edx
c001631d:	c1 e0 02             	shl    eax,0x2
c0016320:	01 d0                	add    eax,edx
c0016322:	c1 e0 04             	shl    eax,0x4
c0016325:	89 c2                	mov    edx,eax
c0016327:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001632b:	01 d0                	add    eax,edx
c001632d:	01 c0                	add    eax,eax
c001632f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016333:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016337:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001633c:	66 89 02             	mov    WORD PTR [edx],ax
c001633f:	90                   	nop
c0016340:	83 c4 14             	add    esp,0x14
c0016343:	c3                   	ret    

c0016344 <Hal::consoleCursorUpdate(int, int)>:
c0016344:	83 ec 20             	sub    esp,0x20
c0016347:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001634b:	89 c2                	mov    edx,eax
c001634d:	89 d0                	mov    eax,edx
c001634f:	c1 e0 02             	shl    eax,0x2
c0016352:	01 d0                	add    eax,edx
c0016354:	c1 e0 04             	shl    eax,0x4
c0016357:	89 c2                	mov    edx,eax
c0016359:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001635d:	01 d0                	add    eax,edx
c001635f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016364:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001636b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016370:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016378:	ee                   	out    dx,al
c0016379:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001637e:	0f b6 c0             	movzx  eax,al
c0016381:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016388:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001638c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016394:	ee                   	out    dx,al
c0016395:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001639c:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163a1:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163a9:	ee                   	out    dx,al
c00163aa:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163af:	66 c1 e8 08          	shr    ax,0x8
c00163b3:	0f b6 c0             	movzx  eax,al
c00163b6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163bd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00163c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00163c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163c9:	ee                   	out    dx,al
c00163ca:	90                   	nop
c00163cb:	83 c4 20             	add    esp,0x20
c00163ce:	c3                   	ret    
c00163cf:	90                   	nop

c00163d0 <FAT::getName()>:
c00163d0:	b8 b4 f4 01 c0       	mov    eax,0xc001f4b4
c00163d5:	c3                   	ret    
c00163d6:	66 90                	xchg   ax,ax

c00163d8 <FAT::tell(void*, unsigned long long*)>:
c00163d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00163dd:	75 09                	jne    c00163e8 <FAT::tell(void*, unsigned long long*)+0x10>
c00163df:	b8 04 00 00 00       	mov    eax,0x4
c00163e4:	c3                   	ret    
c00163e5:	8d 76 00             	lea    esi,[esi+0x0]
c00163e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00163ed:	75 09                	jne    c00163f8 <FAT::tell(void*, unsigned long long*)+0x20>
c00163ef:	b8 04 00 00 00       	mov    eax,0x4
c00163f4:	c3                   	ret    
c00163f5:	8d 76 00             	lea    esi,[esi+0x0]
c00163f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00163ff:	ba 00 00 00 00       	mov    edx,0x0
c0016404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016408:	89 01                	mov    DWORD PTR [ecx],eax
c001640a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001640d:	b8 00 00 00 00       	mov    eax,0x0
c0016412:	c3                   	ret    
c0016413:	90                   	nop

c0016414 <FAT::stat(void*, unsigned long long*)>:
c0016414:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016419:	75 09                	jne    c0016424 <FAT::stat(void*, unsigned long long*)+0x10>
c001641b:	b8 04 00 00 00       	mov    eax,0x4
c0016420:	c3                   	ret    
c0016421:	8d 76 00             	lea    esi,[esi+0x0]
c0016424:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016429:	75 09                	jne    c0016434 <FAT::stat(void*, unsigned long long*)+0x20>
c001642b:	b8 04 00 00 00       	mov    eax,0x4
c0016430:	c3                   	ret    
c0016431:	8d 76 00             	lea    esi,[esi+0x0]
c0016434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016438:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001643b:	ba 00 00 00 00       	mov    edx,0x0
c0016440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016444:	89 01                	mov    DWORD PTR [ecx],eax
c0016446:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016449:	b8 00 00 00 00       	mov    eax,0x0
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <FAT::~FAT()>:
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	89 10                	mov    DWORD PTR [eax],edx
c001645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	50                   	push   eax
c0016466:	e8 af 36 ff ff       	call   c0009b1a <Filesystem::~Filesystem()>
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	90                   	nop
c001646f:	83 c4 0c             	add    esp,0xc
c0016472:	c3                   	ret    
c0016473:	90                   	nop

c0016474 <FAT::~FAT()>:
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	83 ec 0c             	sub    esp,0xc
c001647a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647e:	e8 cd ff ff ff       	call   c0016450 <FAT::~FAT()>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	83 ec 08             	sub    esp,0x8
c0016489:	6a 08                	push   0x8
c001648b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648f:	e8 6a 32 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0016494:	83 c4 10             	add    esp,0x10
c0016497:	83 c4 0c             	add    esp,0xc
c001649a:	c3                   	ret    
c001649b:	90                   	nop

c001649c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001649c:	83 ec 1c             	sub    esp,0x1c
c001649f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164a6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164af:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00164b6:	83 f8 ff             	cmp    eax,0xffffffff
c00164b9:	75 35                	jne    c00164f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164bf:	88 c2                	mov    dl,al
c00164c1:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c00164c6:	01 d0                	add    eax,edx
c00164c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00164cc:	8b 15 60 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a60
c00164d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164d6:	89 14 85 80 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc580],edx
c00164dd:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c00164e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164e6:	89 14 85 00 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc500],edx
c00164ed:	eb 19                	jmp    c0016508 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00164ef:	90                   	nop
c00164f0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164f4:	88 c2                	mov    dl,al
c00164f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164fa:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c0016501:	01 d0                	add    eax,edx
c0016503:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016507:	90                   	nop
c0016508:	83 ec 04             	sub    esp,0x4
c001650b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001650f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016513:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016517:	50                   	push   eax
c0016518:	e8 98 e5 fe ff       	call   c0004ab5 <f_getlabel>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016529:	75 09                	jne    c0016534 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001652b:	b8 00 00 00 00       	mov    eax,0x0
c0016530:	eb 0a                	jmp    c001653c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016532:	66 90                	xchg   ax,ax
c0016534:	b8 01 00 00 00       	mov    eax,0x1
c0016539:	8d 76 00             	lea    esi,[esi+0x0]
c001653c:	83 c4 1c             	add    esp,0x1c
c001653f:	c3                   	ret    

c0016540 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016540:	57                   	push   edi
c0016541:	83 ec 58             	sub    esp,0x58
c0016544:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001654c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016550:	b9 0f 00 00 00       	mov    ecx,0xf
c0016555:	b8 00 00 00 00       	mov    eax,0x0
c001655a:	fc                   	cld    
c001655b:	89 d7                	mov    edi,edx
c001655d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001655f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016563:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c001656a:	83 f8 ff             	cmp    eax,0xffffffff
c001656d:	75 35                	jne    c00165a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001656f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016573:	88 c2                	mov    dl,al
c0016575:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c001657a:	01 d0                	add    eax,edx
c001657c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016580:	8b 15 60 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a60
c0016586:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001658a:	89 14 85 80 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc580],edx
c0016591:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c0016596:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001659a:	89 14 85 00 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc500],edx
c00165a1:	eb 19                	jmp    c00165bc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165a3:	90                   	nop
c00165a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165a8:	88 c2                	mov    dl,al
c00165aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ae:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00165b5:	01 d0                	add    eax,edx
c00165b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165bb:	90                   	nop
c00165bc:	83 ec 08             	sub    esp,0x8
c00165bf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00165c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165c7:	50                   	push   eax
c00165c8:	e8 d7 a0 fe ff       	call   c00006a4 <strcat>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165d7:	50                   	push   eax
c00165d8:	e8 29 e6 fe ff       	call   c0004c06 <f_setlabel>
c00165dd:	83 c4 10             	add    esp,0x10
c00165e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00165e4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00165e9:	75 09                	jne    c00165f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00165eb:	b8 00 00 00 00       	mov    eax,0x0
c00165f0:	eb 0a                	jmp    c00165fc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00165f2:	66 90                	xchg   ax,ax
c00165f4:	b8 01 00 00 00       	mov    eax,0x1
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	83 c4 58             	add    esp,0x58
c00165ff:	5f                   	pop    edi
c0016600:	c3                   	ret    
c0016601:	90                   	nop
c0016602:	66 90                	xchg   ax,ax

c0016604 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016604:	83 ec 2c             	sub    esp,0x2c
c0016607:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001660f:	83 ec 08             	sub    esp,0x8
c0016612:	68 d8 f4 01 c0       	push   0xc001f4d8
c0016617:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001661b:	e8 d0 9f fe ff       	call   c00005f0 <strcmp>
c0016620:	83 c4 10             	add    esp,0x10
c0016623:	85 c0                	test   eax,eax
c0016625:	0f 94 c0             	sete   al
c0016628:	84 c0                	test   al,al
c001662a:	74 10                	je     c001663c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001662c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016634:	e9 b3 00 00 00       	jmp    c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016639:	8d 76 00             	lea    esi,[esi+0x0]
c001663c:	83 ec 08             	sub    esp,0x8
c001663f:	68 ca f4 01 c0       	push   0xc001f4ca
c0016644:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016648:	e8 a3 9f fe ff       	call   c00005f0 <strcmp>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	85 c0                	test   eax,eax
c0016652:	0f 94 c0             	sete   al
c0016655:	84 c0                	test   al,al
c0016657:	74 0f                	je     c0016668 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016659:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016661:	e9 86 00 00 00       	jmp    c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016666:	66 90                	xchg   ax,ax
c0016668:	83 ec 08             	sub    esp,0x8
c001666b:	68 d0 f4 01 c0       	push   0xc001f4d0
c0016670:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016674:	e8 77 9f fe ff       	call   c00005f0 <strcmp>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	85 c0                	test   eax,eax
c001667e:	0f 94 c0             	sete   al
c0016681:	84 c0                	test   al,al
c0016683:	74 0b                	je     c0016690 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016685:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001668d:	eb 5d                	jmp    c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001668f:	90                   	nop
c0016690:	83 ec 08             	sub    esp,0x8
c0016693:	68 bc d3 01 c0       	push   0xc001d3bc
c0016698:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001669c:	e8 4f 9f fe ff       	call   c00005f0 <strcmp>
c00166a1:	83 c4 10             	add    esp,0x10
c00166a4:	85 c0                	test   eax,eax
c00166a6:	0f 94 c0             	sete   al
c00166a9:	84 c0                	test   al,al
c00166ab:	74 0b                	je     c00166b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166ad:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166b5:	eb 35                	jmp    c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166b7:	90                   	nop
c00166b8:	83 ec 08             	sub    esp,0x8
c00166bb:	68 d6 f4 01 c0       	push   0xc001f4d6
c00166c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166c4:	e8 27 9f fe ff       	call   c00005f0 <strcmp>
c00166c9:	83 c4 10             	add    esp,0x10
c00166cc:	85 c0                	test   eax,eax
c00166ce:	0f 94 c0             	sete   al
c00166d1:	84 c0                	test   al,al
c00166d3:	74 0b                	je     c00166e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00166d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00166dd:	eb 0d                	jmp    c00166ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166df:	90                   	nop
c00166e0:	b8 08 00 00 00       	mov    eax,0x8
c00166e5:	e9 ea 00 00 00       	jmp    c00167d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00166f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00166f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00166fc:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c0016703:	83 f8 ff             	cmp    eax,0xffffffff
c0016706:	75 34                	jne    c001673c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016708:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001670c:	88 c2                	mov    dl,al
c001670e:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c0016713:	01 d0                	add    eax,edx
c0016715:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016719:	8b 15 60 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a60
c001671f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016723:	89 14 85 80 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc580],edx
c001672a:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c001672f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016733:	89 14 85 00 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc500],edx
c001673a:	eb 18                	jmp    c0016754 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001673c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016740:	88 c2                	mov    dl,al
c0016742:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016746:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c001674d:	01 d0                	add    eax,edx
c001674f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016753:	90                   	nop
c0016754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016758:	88 04 24             	mov    BYTE PTR [esp],al
c001675b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001675f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016763:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001676b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016770:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 00 20 00 00       	push   0x2000
c0016780:	e8 d0 02 ff ff       	call   c0006a55 <malloc>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001678c:	68 00 20 00 00       	push   0x2000
c0016791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016795:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016799:	50                   	push   eax
c001679a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001679e:	50                   	push   eax
c001679f:	e8 52 e7 fe ff       	call   c0004ef6 <f_mkfs>
c00167a4:	83 c4 10             	add    esp,0x10
c00167a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167b0:	75 0a                	jne    c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167b2:	b8 00 00 00 00       	mov    eax,0x0
c00167b7:	eb 1b                	jmp    c00167d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167b9:	8d 76 00             	lea    esi,[esi+0x0]
c00167bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00167c1:	75 09                	jne    c00167cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00167c3:	b8 09 00 00 00       	mov    eax,0x9
c00167c8:	eb 0a                	jmp    c00167d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167ca:	66 90                	xchg   ax,ax
c00167cc:	b8 01 00 00 00       	mov    eax,0x1
c00167d1:	8d 76 00             	lea    esi,[esi+0x0]
c00167d4:	83 c4 2c             	add    esp,0x2c
c00167d7:	c3                   	ret    

c00167d8 <FAT::tryMount(LogicalDisk*, int)>:
c00167d8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00167de:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c00167e3:	83 f8 14             	cmp    eax,0x14
c00167e6:	75 18                	jne    c0016800 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	68 dc f4 01 c0       	push   0xc001f4dc
c00167f0:	e8 c0 8c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	b0 00                	mov    al,0x0
c00167fa:	e9 e9 01 00 00       	jmp    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00167ff:	90                   	nop
c0016800:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016807:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001680d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016813:	3d 00 02 00 00       	cmp    eax,0x200
c0016818:	74 0a                	je     c0016824 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001681a:	b0 00                	mov    al,0x0
c001681c:	e9 c7 01 00 00       	jmp    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016821:	8d 76 00             	lea    esi,[esi+0x0]
c0016824:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001682c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016833:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c001683a:	83 f8 ff             	cmp    eax,0xffffffff
c001683d:	74 09                	je     c0016848 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001683f:	b0 01                	mov    al,0x1
c0016841:	e9 a2 01 00 00       	jmp    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016846:	66 90                	xchg   ax,ax
c0016848:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016852:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001685a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016861:	88 c2                	mov    dl,al
c0016863:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c0016868:	01 d0                	add    eax,edx
c001686a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016871:	8b 15 60 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a60
c0016877:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001687e:	89 14 85 80 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc580],edx
c0016885:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c001688a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016891:	89 14 85 00 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc500],edx
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	68 34 02 00 00       	push   0x234
c00168a0:	e8 b0 01 ff ff       	call   c0006a55 <malloc>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168af:	83 ec 04             	sub    esp,0x4
c00168b2:	6a 00                	push   0x0
c00168b4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168bb:	50                   	push   eax
c00168bc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168c3:	e8 54 ce fe ff       	call   c000371c <f_mount>
c00168c8:	83 c4 10             	add    esp,0x10
c00168cb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00168d2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00168da:	74 1c                	je     c00168f8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168e6:	e8 8a 01 ff ff       	call   c0006a75 <rfree>
c00168eb:	83 c4 10             	add    esp,0x10
c00168ee:	b0 00                	mov    al,0x0
c00168f0:	e9 f3 00 00 00       	jmp    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168f5:	8d 76 00             	lea    esi,[esi+0x0]
c00168f8:	83 ec 04             	sub    esp,0x4
c00168fb:	68 00 01 00 00       	push   0x100
c0016900:	6a 00                	push   0x0
c0016902:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016909:	50                   	push   eax
c001690a:	e8 99 9b fe ff       	call   c00004a8 <memset>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	83 ec 08             	sub    esp,0x8
c0016915:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001691c:	50                   	push   eax
c001691d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016924:	50                   	push   eax
c0016925:	e8 7a 9d fe ff       	call   c00006a4 <strcat>
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	83 ec 08             	sub    esp,0x8
c0016930:	68 ea f4 01 c0       	push   0xc001f4ea
c0016935:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001693c:	50                   	push   eax
c001693d:	e8 62 9d fe ff       	call   c00006a4 <strcat>
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	83 ec 04             	sub    esp,0x4
c0016948:	6a 01                	push   0x1
c001694a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016951:	50                   	push   eax
c0016952:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016956:	50                   	push   eax
c0016957:	e8 22 ce fe ff       	call   c000377e <f_open>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016966:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001696d:	85 c0                	test   eax,eax
c001696f:	74 0b                	je     c001697c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016971:	78 31                	js     c00169a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016973:	83 e8 04             	sub    eax,0x4
c0016976:	83 f8 01             	cmp    eax,0x1
c0016979:	77 29                	ja     c00169a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001697b:	90                   	nop
c001697c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016984:	83 ec 0c             	sub    esp,0xc
c0016987:	8d 44 24 14          	lea    eax,[esp+0x14]
c001698b:	50                   	push   eax
c001698c:	e8 a0 d5 fe ff       	call   c0003f31 <f_close>
c0016991:	83 c4 10             	add    esp,0x10
c0016994:	90                   	nop
c0016995:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c001699d:	74 41                	je     c00169e0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001699f:	eb 33                	jmp    c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]
c00169a4:	83 ec 0c             	sub    esp,0xc
c00169a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ae:	e8 c2 00 ff ff       	call   c0006a75 <rfree>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	83 ec 04             	sub    esp,0x4
c00169b9:	6a 00                	push   0x0
c00169bb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169c2:	50                   	push   eax
c00169c3:	6a 00                	push   0x0
c00169c5:	e8 52 cd fe ff       	call   c000371c <f_mount>
c00169ca:	83 c4 10             	add    esp,0x10
c00169cd:	b0 00                	mov    al,0x0
c00169cf:	eb 17                	jmp    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c00169d9:	40                   	inc    eax
c00169da:	a3 60 3a 02 c0       	mov    ds:0xc0023a60,eax
c00169df:	90                   	nop
c00169e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00169e7:	90                   	nop
c00169e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00169ee:	c3                   	ret    
c00169ef:	90                   	nop

c00169f0 <FAT::allocateSwapfile(char const*, int)>:
c00169f0:	55                   	push   ebp
c00169f1:	57                   	push   edi
c00169f2:	56                   	push   esi
c00169f3:	53                   	push   ebx
c00169f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00169fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a0f:	e8 41 00 ff ff       	call   c0006a55 <malloc>
c0016a14:	83 c4 10             	add    esp,0x10
c0016a17:	89 c7                	mov    edi,eax
c0016a19:	a1 70 39 02 c0       	mov    eax,ds:0xc0023970
c0016a1e:	83 ec 04             	sub    esp,0x4
c0016a21:	50                   	push   eax
c0016a22:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a29:	57                   	push   edi
c0016a2a:	e8 1b 33 ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a39:	83 ec 04             	sub    esp,0x4
c0016a3c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a40:	50                   	push   eax
c0016a41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a45:	50                   	push   eax
c0016a46:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a4d:	e8 5e 36 ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a5c:	c1 e0 14             	shl    eax,0x14
c0016a5f:	89 c7                	mov    edi,eax
c0016a61:	89 c5                	mov    ebp,eax
c0016a63:	c1 fd 1f             	sar    ebp,0x1f
c0016a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a6e:	89 f9                	mov    ecx,edi
c0016a70:	31 c1                	xor    ecx,eax
c0016a72:	89 cb                	mov    ebx,ecx
c0016a74:	89 e9                	mov    ecx,ebp
c0016a76:	31 d1                	xor    ecx,edx
c0016a78:	89 ce                	mov    esi,ecx
c0016a7a:	89 f0                	mov    eax,esi
c0016a7c:	09 d8                	or     eax,ebx
c0016a7e:	0f 84 9c 00 00 00    	je     c0016b20 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a8e:	e8 e9 34 ff ff       	call   c0009f7c <File::unlink()>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	83 ec 08             	sub    esp,0x8
c0016a99:	6a 12                	push   0x12
c0016a9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aa2:	e8 5d 33 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ab1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ab7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016abe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ac5:	c1 e0 14             	shl    eax,0x14
c0016ac8:	83 ec 04             	sub    esp,0x4
c0016acb:	6a 01                	push   0x1
c0016acd:	50                   	push   eax
c0016ace:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016ad5:	e8 bc e2 fe ff       	call   c0004d96 <f_expand>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ae6:	83 c0 10             	add    eax,0x10
c0016ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016aeb:	83 ec 0c             	sub    esp,0xc
c0016aee:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016af2:	52                   	push   edx
c0016af3:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016af7:	52                   	push   edx
c0016af8:	6a 00                	push   0x0
c0016afa:	68 00 04 00 00       	push   0x400
c0016aff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b06:	ff d0                	call   eax
c0016b08:	83 c4 20             	add    esp,0x20
c0016b0b:	83 ec 0c             	sub    esp,0xc
c0016b0e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b15:	e8 48 33 ff ff       	call   c0009e62 <File::close()>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b20:	83 ec 08             	sub    esp,0x8
c0016b23:	6a 01                	push   0x1
c0016b25:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b2c:	e8 d3 32 ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b3d:	83 c0 0c             	add    eax,0xc
c0016b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b42:	83 ec 0c             	sub    esp,0xc
c0016b45:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b49:	52                   	push   edx
c0016b4a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b4e:	52                   	push   edx
c0016b4f:	6a 00                	push   0x0
c0016b51:	6a 04                	push   0x4
c0016b53:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b5a:	ff d0                	call   eax
c0016b5c:	83 c4 20             	add    esp,0x20
c0016b5f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b66:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b6c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b73:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016b7a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016b7d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b8e:	e8 cf 32 ff ff       	call   c0009e62 <File::close()>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016b9d:	ba 00 00 00 00       	mov    edx,0x0
c0016ba2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016ba8:	5b                   	pop    ebx
c0016ba9:	5e                   	pop    esi
c0016baa:	5f                   	pop    edi
c0016bab:	5d                   	pop    ebp
c0016bac:	c3                   	ret    
c0016bad:	90                   	nop
c0016bae:	66 90                	xchg   ax,ax

c0016bb0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016bb0:	57                   	push   edi
c0016bb1:	56                   	push   esi
c0016bb2:	53                   	push   ebx
c0016bb3:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bb9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016bc1:	74 0d                	je     c0016bd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016bc3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016bcb:	75 0f                	jne    c0016bdc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd0:	b8 04 00 00 00       	mov    eax,0x4
c0016bd5:	e9 36 01 00 00       	jmp    c0016d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016bda:	66 90                	xchg   ax,ax
c0016bdc:	83 ec 08             	sub    esp,0x8
c0016bdf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016be6:	50                   	push   eax
c0016be7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016bee:	e8 01 d6 fe ff       	call   c00041f4 <f_readdir>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016bfd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c0e:	83 c0 16             	add    eax,0x16
c0016c11:	50                   	push   eax
c0016c12:	e8 ad 98 fe ff       	call   c00004c4 <strlen>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	ba 00 00 00 00       	mov    edx,0x0
c0016c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c27:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c2e:	0f b6 c0             	movzx  eax,al
c0016c31:	83 e0 10             	and    eax,0x10
c0016c34:	74 0a                	je     c0016c40 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c36:	b8 02 00 00 00       	mov    eax,0x2
c0016c3b:	eb 0b                	jmp    c0016c48 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c40:	b8 01 00 00 00       	mov    eax,0x1
c0016c45:	8d 76 00             	lea    esi,[esi+0x0]
c0016c48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c4c:	83 ec 08             	sub    esp,0x8
c0016c4f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c56:	83 c0 16             	add    eax,0x16
c0016c59:	50                   	push   eax
c0016c5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c5e:	83 c0 10             	add    eax,0x10
c0016c61:	50                   	push   eax
c0016c62:	e8 fd 98 fe ff       	call   c0000564 <strcpy>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016c71:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016c78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c7c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016c83:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016c8a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016c91:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016c98:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016c9f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016ca6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016cad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016cb4:	89 c6                	mov    esi,eax
c0016cb6:	89 d7                	mov    edi,edx
c0016cb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cba:	89 c8                	mov    eax,ecx
c0016cbc:	89 fa                	mov    edx,edi
c0016cbe:	89 f3                	mov    ebx,esi
c0016cc0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016cc7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016cce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016cd5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016cdc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016ce2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ce9:	84 c0                	test   al,al
c0016ceb:	75 07                	jne    c0016cf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ced:	b8 07 00 00 00       	mov    eax,0x7
c0016cf2:	eb 1c                	jmp    c0016d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016cf4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016cfb:	85 c0                	test   eax,eax
c0016cfd:	75 09                	jne    c0016d08 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016cff:	b8 00 00 00 00       	mov    eax,0x0
c0016d04:	eb 0a                	jmp    c0016d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d06:	66 90                	xchg   ax,ax
c0016d08:	b8 01 00 00 00       	mov    eax,0x1
c0016d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d10:	81 c4 50 02 00 00    	add    esp,0x250
c0016d16:	5b                   	pop    ebx
c0016d17:	5e                   	pop    esi
c0016d18:	5f                   	pop    edi
c0016d19:	c3                   	ret    
c0016d1a:	66 90                	xchg   ax,ax

c0016d1c <FAT::read(void*, unsigned long, void*, int*)>:
c0016d1c:	83 ec 1c             	sub    esp,0x1c
c0016d1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d24:	74 0a                	je     c0016d30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d2b:	75 0b                	jne    c0016d38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d30:	b8 04 00 00 00       	mov    eax,0x4
c0016d35:	eb 41                	jmp    c0016d78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d37:	90                   	nop
c0016d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d3c:	50                   	push   eax
c0016d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d49:	e8 fb cc fe ff       	call   c0003a49 <f_read>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d59:	89 c2                	mov    edx,eax
c0016d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d5f:	89 10                	mov    DWORD PTR [eax],edx
c0016d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d65:	85 c0                	test   eax,eax
c0016d67:	75 07                	jne    c0016d70 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016d69:	b8 00 00 00 00       	mov    eax,0x0
c0016d6e:	eb 08                	jmp    c0016d78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d70:	b8 01 00 00 00       	mov    eax,0x1
c0016d75:	8d 76 00             	lea    esi,[esi+0x0]
c0016d78:	83 c4 1c             	add    esp,0x1c
c0016d7b:	c3                   	ret    

c0016d7c <FAT::write(void*, unsigned long, void*, int*)>:
c0016d7c:	83 ec 1c             	sub    esp,0x1c
c0016d7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d84:	74 0a                	je     c0016d90 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016d86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d8b:	75 0b                	jne    c0016d98 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d90:	b8 04 00 00 00       	mov    eax,0x4
c0016d95:	eb 41                	jmp    c0016dd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016d97:	90                   	nop
c0016d98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d9c:	50                   	push   eax
c0016d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016da5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016da9:	e8 9a ce fe ff       	call   c0003c48 <f_write>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016db9:	89 c2                	mov    edx,eax
c0016dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dbf:	89 10                	mov    DWORD PTR [eax],edx
c0016dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dc5:	85 c0                	test   eax,eax
c0016dc7:	75 07                	jne    c0016dd0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016dc9:	b8 00 00 00 00       	mov    eax,0x0
c0016dce:	eb 08                	jmp    c0016dd8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016dd0:	b8 01 00 00 00       	mov    eax,0x1
c0016dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd8:	83 c4 1c             	add    esp,0x1c
c0016ddb:	c3                   	ret    

c0016ddc <FAT::close(void*)>:
c0016ddc:	83 ec 1c             	sub    esp,0x1c
c0016ddf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016de4:	75 0a                	jne    c0016df0 <FAT::close(void*)+0x14>
c0016de6:	b8 04 00 00 00       	mov    eax,0x4
c0016deb:	eb 3f                	jmp    c0016e2c <FAT::close(void*)+0x50>
c0016ded:	8d 76 00             	lea    esi,[esi+0x0]
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016df7:	e8 35 d1 fe ff       	call   c0003f31 <f_close>
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e03:	83 ec 0c             	sub    esp,0xc
c0016e06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e0a:	e8 56 fc fe ff       	call   c0006a65 <free>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e16:	85 c0                	test   eax,eax
c0016e18:	75 0a                	jne    c0016e24 <FAT::close(void*)+0x48>
c0016e1a:	b8 00 00 00 00       	mov    eax,0x0
c0016e1f:	eb 0b                	jmp    c0016e2c <FAT::close(void*)+0x50>
c0016e21:	8d 76 00             	lea    esi,[esi+0x0]
c0016e24:	b8 01 00 00 00       	mov    eax,0x1
c0016e29:	8d 76 00             	lea    esi,[esi+0x0]
c0016e2c:	83 c4 1c             	add    esp,0x1c
c0016e2f:	c3                   	ret    

c0016e30 <FAT::closeDir(void*)>:
c0016e30:	83 ec 1c             	sub    esp,0x1c
c0016e33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e38:	75 0a                	jne    c0016e44 <FAT::closeDir(void*)+0x14>
c0016e3a:	b8 04 00 00 00       	mov    eax,0x4
c0016e3f:	eb 3f                	jmp    c0016e80 <FAT::closeDir(void*)+0x50>
c0016e41:	8d 76 00             	lea    esi,[esi+0x0]
c0016e44:	83 ec 0c             	sub    esp,0xc
c0016e47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e4b:	e8 82 d3 fe ff       	call   c00041d2 <f_closedir>
c0016e50:	83 c4 10             	add    esp,0x10
c0016e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e57:	83 ec 0c             	sub    esp,0xc
c0016e5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e5e:	e8 02 fc fe ff       	call   c0006a65 <free>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e6a:	85 c0                	test   eax,eax
c0016e6c:	75 0a                	jne    c0016e78 <FAT::closeDir(void*)+0x48>
c0016e6e:	b8 00 00 00 00       	mov    eax,0x0
c0016e73:	eb 0b                	jmp    c0016e80 <FAT::closeDir(void*)+0x50>
c0016e75:	8d 76 00             	lea    esi,[esi+0x0]
c0016e78:	b8 01 00 00 00       	mov    eax,0x1
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	83 c4 1c             	add    esp,0x1c
c0016e83:	c3                   	ret    

c0016e84 <FAT::seek(void*, unsigned long long)>:
c0016e84:	83 ec 2c             	sub    esp,0x2c
c0016e87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e97:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016e9c:	75 0a                	jne    c0016ea8 <FAT::seek(void*, unsigned long long)+0x24>
c0016e9e:	b8 04 00 00 00       	mov    eax,0x4
c0016ea3:	eb 33                	jmp    c0016ed8 <FAT::seek(void*, unsigned long long)+0x54>
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016eac:	83 ec 08             	sub    esp,0x8
c0016eaf:	50                   	push   eax
c0016eb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016eb4:	e8 a7 d0 fe ff       	call   c0003f60 <f_lseek>
c0016eb9:	83 c4 10             	add    esp,0x10
c0016ebc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ec4:	85 c0                	test   eax,eax
c0016ec6:	75 08                	jne    c0016ed0 <FAT::seek(void*, unsigned long long)+0x4c>
c0016ec8:	b8 00 00 00 00       	mov    eax,0x0
c0016ecd:	eb 09                	jmp    c0016ed8 <FAT::seek(void*, unsigned long long)+0x54>
c0016ecf:	90                   	nop
c0016ed0:	b8 01 00 00 00       	mov    eax,0x1
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	83 c4 2c             	add    esp,0x2c
c0016edb:	c3                   	ret    

c0016edc <fatWrapperReadDisk>:
c0016edc:	53                   	push   ebx
c0016edd:	83 ec 18             	sub    esp,0x18
c0016ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ee8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016eed:	8b 0c 85 e0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd620]
c0016ef4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ef8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016efc:	ba 00 00 00 00       	mov    edx,0x0
c0016f01:	83 ec 0c             	sub    esp,0xc
c0016f04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f08:	53                   	push   ebx
c0016f09:	52                   	push   edx
c0016f0a:	50                   	push   eax
c0016f0b:	51                   	push   ecx
c0016f0c:	e8 71 4f ff ff       	call   c000be82 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f11:	83 c4 20             	add    esp,0x20
c0016f14:	83 c4 18             	add    esp,0x18
c0016f17:	5b                   	pop    ebx
c0016f18:	c3                   	ret    
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]

c0016f1c <fatWrapperWriteDisk>:
c0016f1c:	53                   	push   ebx
c0016f1d:	83 ec 18             	sub    esp,0x18
c0016f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f28:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016f2d:	8b 0c 85 e0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd620]
c0016f34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f3c:	ba 00 00 00 00       	mov    edx,0x0
c0016f41:	83 ec 0c             	sub    esp,0xc
c0016f44:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f48:	53                   	push   ebx
c0016f49:	52                   	push   edx
c0016f4a:	50                   	push   eax
c0016f4b:	51                   	push   ecx
c0016f4c:	e8 9d 4f ff ff       	call   c000beee <LogicalDisk::write(unsigned long long, int, void*)>
c0016f51:	83 c4 20             	add    esp,0x20
c0016f54:	83 c4 18             	add    esp,0x18
c0016f57:	5b                   	pop    ebx
c0016f58:	c3                   	ret    
c0016f59:	8d 76 00             	lea    esi,[esi+0x0]

c0016f5c <fatWrapperIoctl>:
c0016f5c:	53                   	push   ebx
c0016f5d:	83 ec 28             	sub    esp,0x28
c0016f60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f68:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016f6c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f70:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016f75:	75 31                	jne    c0016fa8 <fatWrapperIoctl+0x4c>
c0016f77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f7f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016f84:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0016f8b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016f91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f9b:	66 89 02             	mov    WORD PTR [edx],ax
c0016f9e:	b8 00 00 00 00       	mov    eax,0x0
c0016fa3:	e9 b8 00 00 00       	jmp    c0017060 <fatWrapperIoctl+0x104>
c0016fa8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016fad:	75 69                	jne    c0017018 <fatWrapperIoctl+0xbc>
c0016faf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016fbc:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0016fc3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fc9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016fcf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016fd5:	89 c8                	mov    eax,ecx
c0016fd7:	89 da                	mov    edx,ebx
c0016fd9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016fdd:	c1 e0 0a             	shl    eax,0xa
c0016fe0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0016fe5:	8b 0c 8d e0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd620]
c0016fec:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016ff2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016ff8:	89 cb                	mov    ebx,ecx
c0016ffa:	c1 fb 1f             	sar    ebx,0x1f
c0016ffd:	53                   	push   ebx
c0016ffe:	51                   	push   ecx
c0016fff:	52                   	push   edx
c0017000:	50                   	push   eax
c0017001:	e8 ba 55 00 00       	call   c001c5c0 <__udivdi3>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	89 c2                	mov    edx,eax
c001700b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001700f:	89 10                	mov    DWORD PTR [eax],edx
c0017011:	b8 00 00 00 00       	mov    eax,0x0
c0017016:	eb 48                	jmp    c0017060 <fatWrapperIoctl+0x104>
c0017018:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001701d:	75 09                	jne    c0017028 <fatWrapperIoctl+0xcc>
c001701f:	b8 00 00 00 00       	mov    eax,0x0
c0017024:	eb 3a                	jmp    c0017060 <fatWrapperIoctl+0x104>
c0017026:	66 90                	xchg   ax,ax
c0017028:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001702d:	75 19                	jne    c0017048 <fatWrapperIoctl+0xec>
c001702f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017033:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017037:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001703b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017041:	b8 00 00 00 00       	mov    eax,0x0
c0017046:	eb 18                	jmp    c0017060 <fatWrapperIoctl+0x104>
c0017048:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001704d:	75 09                	jne    c0017058 <fatWrapperIoctl+0xfc>
c001704f:	b8 00 00 00 00       	mov    eax,0x0
c0017054:	eb 0a                	jmp    c0017060 <fatWrapperIoctl+0x104>
c0017056:	66 90                	xchg   ax,ax
c0017058:	b8 04 00 00 00       	mov    eax,0x4
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	83 c4 28             	add    esp,0x28
c0017063:	5b                   	pop    ebx
c0017064:	c3                   	ret    
c0017065:	90                   	nop
c0017066:	66 90                	xchg   ax,ax

c0017068 <FAT::FAT()>:
c0017068:	83 ec 1c             	sub    esp,0x1c
c001706b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706f:	83 ec 0c             	sub    esp,0xc
c0017072:	50                   	push   eax
c0017073:	e8 7e 2a ff ff       	call   c0009af6 <Filesystem::Filesystem()>
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	ba 00 f5 01 c0       	mov    edx,0xc001f500
c0017080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017084:	89 10                	mov    DWORD PTR [eax],edx
c0017086:	c7 05 60 3a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023a60,0x0
c0017090:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017098:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001709d:	7f 15                	jg     c00170b4 <FAT::FAT()+0x4c>
c001709f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170a3:	c7 04 85 80 3a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc580],0xffffffff
c00170ae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170b2:	eb e4                	jmp    c0017098 <FAT::FAT()+0x30>
c00170b4:	90                   	nop
c00170b5:	83 c4 1c             	add    esp,0x1c
c00170b8:	c3                   	ret    
c00170b9:	90                   	nop
c00170ba:	66 90                	xchg   ax,ax

c00170bc <FAT::fixFilepath(char*)>:
c00170bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170c0:	8a 00                	mov    al,BYTE PTR [eax]
c00170c2:	3c 40                	cmp    al,0x40
c00170c4:	7e 2e                	jle    c00170f4 <FAT::fixFilepath(char*)+0x38>
c00170c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170ca:	8a 00                	mov    al,BYTE PTR [eax]
c00170cc:	83 e8 41             	sub    eax,0x41
c00170cf:	88 c2                	mov    dl,al
c00170d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170d5:	88 10                	mov    BYTE PTR [eax],dl
c00170d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170db:	8a 00                	mov    al,BYTE PTR [eax]
c00170dd:	0f be c0             	movsx  eax,al
c00170e0:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00170e7:	83 c0 30             	add    eax,0x30
c00170ea:	88 c2                	mov    dl,al
c00170ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170f0:	88 10                	mov    BYTE PTR [eax],dl
c00170f2:	66 90                	xchg   ax,ax
c00170f4:	90                   	nop
c00170f5:	c3                   	ret    
c00170f6:	66 90                	xchg   ax,ax

c00170f8 <FAT::open(char const*, void**, FileOpenMode)>:
c00170f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00170fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017106:	74 0c                	je     c0017114 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017108:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017110:	75 0e                	jne    c0017120 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017112:	66 90                	xchg   ax,ax
c0017114:	b8 04 00 00 00       	mov    eax,0x4
c0017119:	e9 06 01 00 00       	jmp    c0017224 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001711e:	66 90                	xchg   ax,ax
c0017120:	83 ec 08             	sub    esp,0x8
c0017123:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001712a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001712e:	50                   	push   eax
c001712f:	e8 30 94 fe ff       	call   c0000564 <strcpy>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	83 ec 08             	sub    esp,0x8
c001713a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001713e:	50                   	push   eax
c001713f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017146:	e8 71 ff ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017156:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001715d:	83 e0 01             	and    eax,0x1
c0017160:	74 0a                	je     c001716c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017162:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001716a:	66 90                	xchg   ax,ax
c001716c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017173:	83 e0 04             	and    eax,0x4
c0017176:	74 10                	je     c0017188 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017178:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017180:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017188:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001718f:	83 e0 02             	and    eax,0x2
c0017192:	74 08                	je     c001719c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017194:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001719c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171a3:	83 e0 08             	and    eax,0x8
c00171a6:	74 08                	je     c00171b0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00171a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00171b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171b7:	83 e0 10             	and    eax,0x10
c00171ba:	74 08                	je     c00171c4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00171bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00171c4:	83 ec 0c             	sub    esp,0xc
c00171c7:	68 28 02 00 00       	push   0x228
c00171cc:	e8 84 f8 fe ff       	call   c0006a55 <malloc>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	89 c2                	mov    edx,eax
c00171d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00171dd:	89 10                	mov    DWORD PTR [eax],edx
c00171df:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00171e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00171ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00171f0:	83 ec 04             	sub    esp,0x4
c00171f3:	52                   	push   edx
c00171f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00171f8:	52                   	push   edx
c00171f9:	50                   	push   eax
c00171fa:	e8 7f c5 fe ff       	call   c000377e <f_open>
c00171ff:	83 c4 10             	add    esp,0x10
c0017202:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017209:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017211:	74 09                	je     c001721c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c0017213:	b8 01 00 00 00       	mov    eax,0x1
c0017218:	eb 0a                	jmp    c0017224 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001721a:	66 90                	xchg   ax,ax
c001721c:	b8 00 00 00 00       	mov    eax,0x0
c0017221:	8d 76 00             	lea    esi,[esi+0x0]
c0017224:	81 c4 1c 01 00 00    	add    esp,0x11c
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <FAT::openDir(char const*, void**)>:
c001722c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017232:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001723a:	74 0c                	je     c0017248 <FAT::openDir(char const*, void**)+0x1c>
c001723c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017244:	75 0e                	jne    c0017254 <FAT::openDir(char const*, void**)+0x28>
c0017246:	66 90                	xchg   ax,ax
c0017248:	b8 04 00 00 00       	mov    eax,0x4
c001724d:	e9 82 00 00 00       	jmp    c00172d4 <FAT::openDir(char const*, void**)+0xa8>
c0017252:	66 90                	xchg   ax,ax
c0017254:	83 ec 08             	sub    esp,0x8
c0017257:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001725e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017262:	50                   	push   eax
c0017263:	e8 fc 92 fe ff       	call   c0000564 <strcpy>
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	83 ec 08             	sub    esp,0x8
c001726e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017272:	50                   	push   eax
c0017273:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001727a:	e8 3d fe ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	83 ec 0c             	sub    esp,0xc
c0017285:	6a 30                	push   0x30
c0017287:	e8 c9 f7 fe ff       	call   c0006a55 <malloc>
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	89 c2                	mov    edx,eax
c0017291:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017298:	89 10                	mov    DWORD PTR [eax],edx
c001729a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00172a3:	83 ec 08             	sub    esp,0x8
c00172a6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00172aa:	52                   	push   edx
c00172ab:	50                   	push   eax
c00172ac:	e8 56 ce fe ff       	call   c0004107 <f_opendir>
c00172b1:	83 c4 10             	add    esp,0x10
c00172b4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00172bb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00172c3:	74 07                	je     c00172cc <FAT::openDir(char const*, void**)+0xa0>
c00172c5:	b8 01 00 00 00       	mov    eax,0x1
c00172ca:	eb 08                	jmp    c00172d4 <FAT::openDir(char const*, void**)+0xa8>
c00172cc:	b8 00 00 00 00       	mov    eax,0x0
c00172d1:	8d 76 00             	lea    esi,[esi+0x0]
c00172d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172da:	c3                   	ret    
c00172db:	90                   	nop

c00172dc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00172dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00172e2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00172ea:	75 0c                	jne    c00172f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00172ec:	b8 04 00 00 00       	mov    eax,0x4
c00172f1:	e9 d6 00 00 00       	jmp    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00172f6:	66 90                	xchg   ax,ax
c00172f8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017300:	75 0a                	jne    c001730c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017302:	b8 04 00 00 00       	mov    eax,0x4
c0017307:	e9 c0 00 00 00       	jmp    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001730c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017314:	75 0a                	jne    c0017320 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017316:	b8 04 00 00 00       	mov    eax,0x4
c001731b:	e9 ac 00 00 00       	jmp    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017320:	83 ec 08             	sub    esp,0x8
c0017323:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001732a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017331:	50                   	push   eax
c0017332:	e8 2d 92 fe ff       	call   c0000564 <strcpy>
c0017337:	83 c4 10             	add    esp,0x10
c001733a:	83 ec 08             	sub    esp,0x8
c001733d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017344:	50                   	push   eax
c0017345:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001734c:	e8 6b fd ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	83 ec 08             	sub    esp,0x8
c0017357:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001735b:	50                   	push   eax
c001735c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017363:	50                   	push   eax
c0017364:	e8 1d cf fe ff       	call   c0004286 <f_stat>
c0017369:	83 c4 10             	add    esp,0x10
c001736c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017373:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001737a:	85 c0                	test   eax,eax
c001737c:	74 0a                	je     c0017388 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001737e:	83 f8 04             	cmp    eax,0x4
c0017381:	74 39                	je     c00173bc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017383:	eb 3f                	jmp    c00173c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017385:	8d 76 00             	lea    esi,[esi+0x0]
c0017388:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001738c:	0f b6 c0             	movzx  eax,al
c001738f:	83 e0 10             	and    eax,0x10
c0017392:	0f 95 c2             	setne  dl
c0017395:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001739c:	88 10                	mov    BYTE PTR [eax],dl
c001739e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173a2:	ba 00 00 00 00       	mov    edx,0x0
c00173a7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00173ae:	89 01                	mov    DWORD PTR [ecx],eax
c00173b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00173b3:	b8 00 00 00 00       	mov    eax,0x0
c00173b8:	eb 12                	jmp    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173ba:	66 90                	xchg   ax,ax
c00173bc:	b8 02 00 00 00       	mov    eax,0x2
c00173c1:	eb 09                	jmp    c00173cc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173c3:	90                   	nop
c00173c4:	b8 01 00 00 00       	mov    eax,0x1
c00173c9:	8d 76 00             	lea    esi,[esi+0x0]
c00173cc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00173d2:	c3                   	ret    
c00173d3:	90                   	nop

c00173d4 <FAT::unlink(char const*)>:
c00173d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173e2:	75 08                	jne    c00173ec <FAT::unlink(char const*)+0x18>
c00173e4:	b8 04 00 00 00       	mov    eax,0x4
c00173e9:	eb 61                	jmp    c001744c <FAT::unlink(char const*)+0x78>
c00173eb:	90                   	nop
c00173ec:	83 ec 08             	sub    esp,0x8
c00173ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173fa:	50                   	push   eax
c00173fb:	e8 64 91 fe ff       	call   c0000564 <strcpy>
c0017400:	83 c4 10             	add    esp,0x10
c0017403:	83 ec 08             	sub    esp,0x8
c0017406:	8d 44 24 14          	lea    eax,[esp+0x14]
c001740a:	50                   	push   eax
c001740b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017412:	e8 a5 fc ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c0017417:	83 c4 10             	add    esp,0x10
c001741a:	83 ec 0c             	sub    esp,0xc
c001741d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017421:	50                   	push   eax
c0017422:	e8 c4 d0 fe ff       	call   c00044eb <f_unlink>
c0017427:	83 c4 10             	add    esp,0x10
c001742a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017431:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017438:	85 c0                	test   eax,eax
c001743a:	75 08                	jne    c0017444 <FAT::unlink(char const*)+0x70>
c001743c:	b8 00 00 00 00       	mov    eax,0x0
c0017441:	eb 09                	jmp    c001744c <FAT::unlink(char const*)+0x78>
c0017443:	90                   	nop
c0017444:	b8 01 00 00 00       	mov    eax,0x1
c0017449:	8d 76 00             	lea    esi,[esi+0x0]
c001744c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017454:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001745a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017461:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017468:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001746c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017470:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017478:	75 0a                	jne    c0017484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001747a:	b8 04 00 00 00       	mov    eax,0x4
c001747f:	e9 30 01 00 00       	jmp    c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001748e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017492:	50                   	push   eax
c0017493:	e8 cc 90 fe ff       	call   c0000564 <strcpy>
c0017498:	83 c4 10             	add    esp,0x10
c001749b:	83 ec 08             	sub    esp,0x8
c001749e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174a2:	50                   	push   eax
c00174a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174aa:	e8 0d fc ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00174ba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00174c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00174c7:	83 e0 01             	and    eax,0x1
c00174ca:	74 08                	je     c00174d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00174cc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00174d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00174d9:	83 e0 02             	and    eax,0x2
c00174dc:	74 0a                	je     c00174e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c00174de:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00174e6:	66 90                	xchg   ax,ax
c00174e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00174ed:	83 e0 04             	and    eax,0x4
c00174f0:	74 0a                	je     c00174fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c00174f2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00174fa:	66 90                	xchg   ax,ax
c00174fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017501:	83 e0 08             	and    eax,0x8
c0017504:	74 0a                	je     c0017510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c0017506:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001750e:	66 90                	xchg   ax,ax
c0017510:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017515:	83 e0 01             	and    eax,0x1
c0017518:	74 0a                	je     c0017524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001751a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017522:	66 90                	xchg   ax,ax
c0017524:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017529:	83 e0 02             	and    eax,0x2
c001752c:	74 0a                	je     c0017538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001752e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017536:	66 90                	xchg   ax,ax
c0017538:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001753d:	83 e0 04             	and    eax,0x4
c0017540:	74 0a                	je     c001754c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c0017542:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001754a:	66 90                	xchg   ax,ax
c001754c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017551:	83 e0 08             	and    eax,0x8
c0017554:	74 0a                	je     c0017560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c0017556:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001755e:	66 90                	xchg   ax,ax
c0017560:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017567:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001756e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0017576:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001757e:	83 ec 04             	sub    esp,0x4
c0017581:	52                   	push   edx
c0017582:	50                   	push   eax
c0017583:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017587:	50                   	push   eax
c0017588:	e8 d1 d3 fe ff       	call   c000495e <f_chmod>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017597:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001759e:	85 c0                	test   eax,eax
c00175a0:	75 0a                	jne    c00175ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c00175a2:	b8 00 00 00 00       	mov    eax,0x0
c00175a7:	eb 0b                	jmp    c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c00175a9:	8d 76 00             	lea    esi,[esi+0x0]
c00175ac:	b8 01 00 00 00       	mov    eax,0x1
c00175b1:	8d 76 00             	lea    esi,[esi+0x0]
c00175b4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00175ba:	c3                   	ret    
c00175bb:	90                   	nop

c00175bc <FAT::rename(char const*, char const*)>:
c00175bc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00175c2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00175ca:	74 0c                	je     c00175d8 <FAT::rename(char const*, char const*)+0x1c>
c00175cc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00175d4:	75 0e                	jne    c00175e4 <FAT::rename(char const*, char const*)+0x28>
c00175d6:	66 90                	xchg   ax,ax
c00175d8:	b8 04 00 00 00       	mov    eax,0x4
c00175dd:	e9 9e 00 00 00       	jmp    c0017680 <FAT::rename(char const*, char const*)+0xc4>
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	83 ec 08             	sub    esp,0x8
c00175e7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00175ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00175f5:	50                   	push   eax
c00175f6:	e8 69 8f fe ff       	call   c0000564 <strcpy>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 ec 08             	sub    esp,0x8
c0017601:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017608:	50                   	push   eax
c0017609:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017610:	e8 a7 fa ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	83 ec 08             	sub    esp,0x8
c001761b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017622:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017626:	50                   	push   eax
c0017627:	e8 38 8f fe ff       	call   c0000564 <strcpy>
c001762c:	83 c4 10             	add    esp,0x10
c001762f:	83 ec 08             	sub    esp,0x8
c0017632:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017636:	50                   	push   eax
c0017637:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001763e:	e8 79 fa ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	83 ec 08             	sub    esp,0x8
c0017649:	8d 44 24 14          	lea    eax,[esp+0x14]
c001764d:	50                   	push   eax
c001764e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017655:	50                   	push   eax
c0017656:	e8 4d d1 fe ff       	call   c00047a8 <f_rename>
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017665:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001766c:	85 c0                	test   eax,eax
c001766e:	75 08                	jne    c0017678 <FAT::rename(char const*, char const*)+0xbc>
c0017670:	b8 00 00 00 00       	mov    eax,0x0
c0017675:	eb 09                	jmp    c0017680 <FAT::rename(char const*, char const*)+0xc4>
c0017677:	90                   	nop
c0017678:	b8 01 00 00 00       	mov    eax,0x1
c001767d:	8d 76 00             	lea    esi,[esi+0x0]
c0017680:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017686:	c3                   	ret    
c0017687:	90                   	nop

c0017688 <FAT::mkdir(char const*)>:
c0017688:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001768e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017696:	75 08                	jne    c00176a0 <FAT::mkdir(char const*)+0x18>
c0017698:	b8 04 00 00 00       	mov    eax,0x4
c001769d:	eb 61                	jmp    c0017700 <FAT::mkdir(char const*)+0x78>
c001769f:	90                   	nop
c00176a0:	83 ec 08             	sub    esp,0x8
c00176a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00176aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176ae:	50                   	push   eax
c00176af:	e8 b0 8e fe ff       	call   c0000564 <strcpy>
c00176b4:	83 c4 10             	add    esp,0x10
c00176b7:	83 ec 08             	sub    esp,0x8
c00176ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176be:	50                   	push   eax
c00176bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00176c6:	e8 f1 f9 ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	83 ec 0c             	sub    esp,0xc
c00176d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176d5:	50                   	push   eax
c00176d6:	e8 32 cf fe ff       	call   c000460d <f_mkdir>
c00176db:	83 c4 10             	add    esp,0x10
c00176de:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00176e5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00176ec:	85 c0                	test   eax,eax
c00176ee:	75 08                	jne    c00176f8 <FAT::mkdir(char const*)+0x70>
c00176f0:	b8 00 00 00 00       	mov    eax,0x0
c00176f5:	eb 09                	jmp    c0017700 <FAT::mkdir(char const*)+0x78>
c00176f7:	90                   	nop
c00176f8:	b8 01 00 00 00       	mov    eax,0x1
c00176fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017700:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017706:	c3                   	ret    
c0017707:	90                   	nop

c0017708 <FAT::exists(char const*)>:
c0017708:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001770e:	83 ec 08             	sub    esp,0x8
c0017711:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017718:	8d 44 24 10          	lea    eax,[esp+0x10]
c001771c:	50                   	push   eax
c001771d:	e8 42 8e fe ff       	call   c0000564 <strcpy>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	83 ec 08             	sub    esp,0x8
c0017728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001772c:	50                   	push   eax
c001772d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017734:	e8 83 f9 ff ff       	call   c00170bc <FAT::fixFilepath(char*)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	83 ec 08             	sub    esp,0x8
c001773f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017746:	50                   	push   eax
c0017747:	8d 44 24 10          	lea    eax,[esp+0x10]
c001774b:	50                   	push   eax
c001774c:	e8 35 cb fe ff       	call   c0004286 <f_stat>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001775b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017762:	85 c0                	test   eax,eax
c0017764:	75 06                	jne    c001776c <FAT::exists(char const*)+0x64>
c0017766:	b0 01                	mov    al,0x1
c0017768:	eb 06                	jmp    c0017770 <FAT::exists(char const*)+0x68>
c001776a:	66 90                	xchg   ax,ax
c001776c:	b0 00                	mov    al,0x0
c001776e:	66 90                	xchg   ax,ax
c0017770:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017776:	c3                   	ret    
c0017777:	90                   	nop

c0017778 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017778:	b8 08 00 00 00       	mov    eax,0x8
c001777d:	c3                   	ret    

c001777e <ISO9660::seek(void*, unsigned long long)>:
c001777e:	53                   	push   ebx
c001777f:	b8 04 00 00 00       	mov    eax,0x4
c0017784:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001778c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017790:	85 d2                	test   edx,edx
c0017792:	74 17                	je     c00177ab <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017794:	89 c8                	mov    eax,ecx
c0017796:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0017799:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001779c:	b8 01 00 00 00       	mov    eax,0x1
c00177a1:	73 08                	jae    c00177ab <ISO9660::seek(void*, unsigned long long)+0x2d>
c00177a3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00177a6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00177a9:	31 c0                	xor    eax,eax
c00177ab:	5b                   	pop    ebx
c00177ac:	c3                   	ret    
c00177ad:	90                   	nop

c00177ae <ISO9660::tell(void*, unsigned long long*)>:
c00177ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177b6:	85 d2                	test   edx,edx
c00177b8:	74 12                	je     c00177cc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00177ba:	85 c0                	test   eax,eax
c00177bc:	74 0e                	je     c00177cc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00177be:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00177c1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00177c4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00177c7:	89 10                	mov    DWORD PTR [eax],edx
c00177c9:	31 c0                	xor    eax,eax
c00177cb:	c3                   	ret    
c00177cc:	b8 04 00 00 00       	mov    eax,0x4
c00177d1:	c3                   	ret    

c00177d2 <ISO9660::getName()>:
c00177d2:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c00177d7:	c3                   	ret    

c00177d8 <ISO9660::stat(void*, unsigned long long*)>:
c00177d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177e0:	85 d2                	test   edx,edx
c00177e2:	74 12                	je     c00177f6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00177e4:	85 c0                	test   eax,eax
c00177e6:	74 0e                	je     c00177f6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00177e8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00177eb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00177ee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00177f1:	89 10                	mov    DWORD PTR [eax],edx
c00177f3:	31 c0                	xor    eax,eax
c00177f5:	c3                   	ret    
c00177f6:	b8 04 00 00 00       	mov    eax,0x4
c00177fb:	c3                   	ret    

c00177fc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00177fc:	b8 01 00 00 00       	mov    eax,0x1
c0017801:	c3                   	ret    

c0017802 <ISO9660::unlink(char const*)>:
c0017802:	b8 01 00 00 00       	mov    eax,0x1
c0017807:	c3                   	ret    

c0017808 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017808:	b8 01 00 00 00       	mov    eax,0x1
c001780d:	c3                   	ret    

c001780e <ISO9660::rename(char const*, char const*)>:
c001780e:	b8 01 00 00 00       	mov    eax,0x1
c0017813:	c3                   	ret    

c0017814 <ISO9660::mkdir(char const*)>:
c0017814:	b8 01 00 00 00       	mov    eax,0x1
c0017819:	c3                   	ret    

c001781a <ISO9660::close(void*)>:
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	b8 04 00 00 00       	mov    eax,0x4
c0017822:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017826:	85 d2                	test   edx,edx
c0017828:	74 0e                	je     c0017838 <ISO9660::close(void*)+0x1e>
c001782a:	83 ec 0c             	sub    esp,0xc
c001782d:	52                   	push   edx
c001782e:	e8 32 f2 fe ff       	call   c0006a65 <free>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	31 c0                	xor    eax,eax
c0017838:	83 c4 0c             	add    esp,0xc
c001783b:	c3                   	ret    

c001783c <ISO9660::closeDir(void*)>:
c001783c:	83 ec 0c             	sub    esp,0xc
c001783f:	b8 04 00 00 00       	mov    eax,0x4
c0017844:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017848:	85 d2                	test   edx,edx
c001784a:	74 0e                	je     c001785a <ISO9660::closeDir(void*)+0x1e>
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	52                   	push   edx
c0017850:	e8 10 f2 fe ff       	call   c0006a65 <free>
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	31 c0                	xor    eax,eax
c001785a:	83 c4 0c             	add    esp,0xc
c001785d:	c3                   	ret    

c001785e <ISO9660::~ISO9660()>:
c001785e:	83 ec 0c             	sub    esp,0xc
c0017861:	ba 84 f5 01 c0       	mov    edx,0xc001f584
c0017866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786a:	89 10                	mov    DWORD PTR [eax],edx
c001786c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	50                   	push   eax
c0017874:	e8 a1 22 ff ff       	call   c0009b1a <Filesystem::~Filesystem()>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	90                   	nop
c001787d:	83 c4 0c             	add    esp,0xc
c0017880:	c3                   	ret    
c0017881:	90                   	nop

c0017882 <ISO9660::~ISO9660()>:
c0017882:	83 ec 0c             	sub    esp,0xc
c0017885:	83 ec 0c             	sub    esp,0xc
c0017888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001788c:	e8 cd ff ff ff       	call   c001785e <ISO9660::~ISO9660()>
c0017891:	83 c4 10             	add    esp,0x10
c0017894:	83 ec 08             	sub    esp,0x8
c0017897:	6a 08                	push   0x8
c0017899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001789d:	e8 5c 1e ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	83 c4 0c             	add    esp,0xc
c00178a8:	c3                   	ret    

c00178a9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00178a9:	55                   	push   ebp
c00178aa:	31 c9                	xor    ecx,ecx
c00178ac:	57                   	push   edi
c00178ad:	56                   	push   esi
c00178ae:	53                   	push   ebx
c00178af:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00178b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00178b7:	89 eb                	mov    ebx,ebp
c00178b9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00178bd:	39 ce                	cmp    esi,ecx
c00178bf:	7e 17                	jle    c00178d8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00178c1:	31 d2                	xor    edx,edx
c00178c3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00178c7:	7d 13                	jge    c00178dc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00178c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00178cd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00178d0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00178d3:	75 0d                	jne    c00178e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00178d5:	42                   	inc    edx
c00178d6:	eb eb                	jmp    c00178c3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00178d8:	31 c0                	xor    eax,eax
c00178da:	eb 0a                	jmp    c00178e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00178dc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00178e0:	eb 04                	jmp    c00178e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00178e2:	41                   	inc    ecx
c00178e3:	43                   	inc    ebx
c00178e4:	eb d7                	jmp    c00178bd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00178e6:	5b                   	pop    ebx
c00178e7:	5e                   	pop    esi
c00178e8:	5f                   	pop    edi
c00178e9:	5d                   	pop    ebp
c00178ea:	c3                   	ret    

c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00178eb:	57                   	push   edi
c00178ec:	56                   	push   esi
c00178ed:	53                   	push   ebx
c00178ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178fa:	39 35 60 3b 02 c0    	cmp    DWORD PTR ds:0xc0023b60,esi
c0017900:	75 08                	jne    c001790a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017902:	38 1d 94 fe 01 c0    	cmp    BYTE PTR ds:0xc001fe94,bl
c0017908:	74 4a                	je     c0017954 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001790a:	83 ec 0c             	sub    esp,0xc
c001790d:	31 d2                	xor    edx,edx
c001790f:	68 80 3b 02 c0       	push   0xc0023b80
c0017914:	0f be c3             	movsx  eax,bl
c0017917:	6a 01                	push   0x1
c0017919:	52                   	push   edx
c001791a:	56                   	push   esi
c001791b:	ff 34 85 dc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd724]
c0017922:	e8 5b 45 ff ff       	call   c000be82 <LogicalDisk::read(unsigned long long, int, void*)>
c0017927:	83 c4 20             	add    esp,0x20
c001792a:	85 c0                	test   eax,eax
c001792c:	75 0e                	jne    c001793c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001792e:	89 35 60 3b 02 c0    	mov    DWORD PTR ds:0xc0023b60,esi
c0017934:	88 1d 94 fe 01 c0    	mov    BYTE PTR ds:0xc001fe94,bl
c001793a:	eb 18                	jmp    c0017954 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001793c:	50                   	push   eax
c001793d:	68 00 08 00 00       	push   0x800
c0017942:	6a 00                	push   0x0
c0017944:	57                   	push   edi
c0017945:	e8 5e 8b fe ff       	call   c00004a8 <memset>
c001794a:	83 c4 10             	add    esp,0x10
c001794d:	b8 01 00 00 00       	mov    eax,0x1
c0017952:	eb 0e                	jmp    c0017962 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017954:	be 80 3b 02 c0       	mov    esi,0xc0023b80
c0017959:	b9 00 08 00 00       	mov    ecx,0x800
c001795e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017960:	31 c0                	xor    eax,eax
c0017962:	5b                   	pop    ebx
c0017963:	5e                   	pop    esi
c0017964:	5f                   	pop    edi
c0017965:	c3                   	ret    

c0017966 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017966:	81 ec 10 08 00 00    	sub    esp,0x810
c001796c:	c7 05 60 3b 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023b60,0xdeadbeef
c0017976:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001797d:	83 c0 41             	add    eax,0x41
c0017980:	0f be c0             	movsx  eax,al
c0017983:	50                   	push   eax
c0017984:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017988:	50                   	push   eax
c0017989:	6a 10                	push   0x10
c001798b:	e8 5b ff ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	31 d2                	xor    edx,edx
c0017995:	85 c0                	test   eax,eax
c0017997:	75 24                	jne    c00179bd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017999:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001799e:	75 1d                	jne    c00179bd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00179a0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00179a5:	75 16                	jne    c00179bd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00179a7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00179ac:	75 0f                	jne    c00179bd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00179ae:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00179b3:	75 08                	jne    c00179bd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00179b5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00179ba:	0f 94 c2             	sete   dl
c00179bd:	88 d0                	mov    al,dl
c00179bf:	81 c4 0c 08 00 00    	add    esp,0x80c
c00179c5:	c3                   	ret    

c00179c6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00179c6:	55                   	push   ebp
c00179c7:	57                   	push   edi
c00179c8:	56                   	push   esi
c00179c9:	53                   	push   ebx
c00179ca:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00179d0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00179d7:	85 ed                	test   ebp,ebp
c00179d9:	0f 84 da 01 00 00    	je     c0017bb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00179df:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00179e7:	0f 84 cc 01 00 00    	je     c0017bb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00179ed:	b8 01 00 00 00       	mov    eax,0x1
c00179f2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00179f6:	0f 85 c2 01 00 00    	jne    c0017bbe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00179fc:	31 d2                	xor    edx,edx
c00179fe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0017a05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017a08:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017a0b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017a0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017a15:	01 c8                	add    eax,ecx
c0017a17:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017a1a:	11 da                	adc    edx,ebx
c0017a1c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017a20:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017a24:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017a28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017a2c:	19 d7                	sbb    edi,edx
c0017a2e:	72 11                	jb     c0017a41 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0017a30:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017a33:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0017a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017a3f:	eb 0c                	jmp    c0017a4d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0017a41:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0017a45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017a49:	29 ce                	sub    esi,ecx
c0017a4b:	19 df                	sbb    edi,ebx
c0017a4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017a50:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0017a53:	0f a4 c2 0b          	shld   edx,eax,0xb
c0017a57:	c1 e0 0b             	shl    eax,0xb
c0017a5a:	01 c8                	add    eax,ecx
c0017a5c:	11 da                	adc    edx,ebx
c0017a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a61:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017a65:	51                   	push   ecx
c0017a66:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017a6a:	50                   	push   eax
c0017a6b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0017a6f:	53                   	push   ebx
c0017a70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a78:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017a7c:	50                   	push   eax
c0017a7d:	e8 69 fe ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017a82:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017a85:	b8 00 08 00 00       	mov    eax,0x800
c0017a8a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0017a90:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0017a94:	29 d0                	sub    eax,edx
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	89 f9                	mov    ecx,edi
c0017a9b:	39 c6                	cmp    esi,eax
c0017a9d:	83 d9 00             	sbb    ecx,0x0
c0017aa0:	7d 1b                	jge    c0017abd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0017aa2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017aa7:	75 12                	jne    c0017abb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0017aa9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017ab0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017ab6:	e9 fa 00 00 00       	jmp    c0017bb5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0017abb:	89 f0                	mov    eax,esi
c0017abd:	01 d3                	add    ebx,edx
c0017abf:	31 d2                	xor    edx,edx
c0017ac1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017ac5:	39 c2                	cmp    edx,eax
c0017ac7:	7d 14                	jge    c0017add <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0017ac9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0017ad0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017ad4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0017ad7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0017ada:	42                   	inc    edx
c0017adb:	eb e8                	jmp    c0017ac5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0017add:	89 c2                	mov    edx,eax
c0017adf:	85 c0                	test   eax,eax
c0017ae1:	79 02                	jns    c0017ae5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0017ae3:	31 d2                	xor    edx,edx
c0017ae5:	01 c2                	add    edx,eax
c0017ae7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017aea:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0017af1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0017af5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017af9:	99                   	cdq    
c0017afa:	01 c1                	add    ecx,eax
c0017afc:	11 d3                	adc    ebx,edx
c0017afe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017b02:	29 c6                	sub    esi,eax
c0017b04:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0017b08:	19 d7                	sbb    edi,edx
c0017b0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b0d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0017b11:	b8 ff 07 00 00       	mov    eax,0x7ff
c0017b16:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0017b19:	b8 00 00 00 00       	mov    eax,0x0
c0017b1e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0017b22:	7d 43                	jge    c0017b67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0017b24:	52                   	push   edx
c0017b25:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017b29:	50                   	push   eax
c0017b2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b36:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017b3a:	50                   	push   eax
c0017b3b:	e8 ab fd ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017b40:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0017b48:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0017b4d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0017b55:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0017b5d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	eb aa                	jmp    c0017b11 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0017b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b6b:	0b 04 24             	or     eax,DWORD PTR [esp]
c0017b6e:	74 2a                	je     c0017b9a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0017b70:	50                   	push   eax
c0017b71:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017b75:	50                   	push   eax
c0017b76:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017b7a:	56                   	push   esi
c0017b7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b83:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0017b87:	51                   	push   ecx
c0017b88:	e8 5e fd ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017b8d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017b91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b97:	83 c4 10             	add    esp,0x10
c0017b9a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017ba1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ba5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ba9:	89 18                	mov    DWORD PTR [eax],ebx
c0017bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017baf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017bb2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017bb5:	31 c0                	xor    eax,eax
c0017bb7:	eb 05                	jmp    c0017bbe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0017bb9:	b8 04 00 00 00       	mov    eax,0x4
c0017bbe:	81 c4 2c 08 00 00    	add    esp,0x82c
c0017bc4:	5b                   	pop    ebx
c0017bc5:	5e                   	pop    esi
c0017bc6:	5f                   	pop    edi
c0017bc7:	5d                   	pop    ebp
c0017bc8:	c3                   	ret    
c0017bc9:	90                   	nop

c0017bca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017bca:	55                   	push   ebp
c0017bcb:	57                   	push   edi
c0017bcc:	56                   	push   esi
c0017bcd:	53                   	push   ebx
c0017bce:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0017bd4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0017bdb:	85 ed                	test   ebp,ebp
c0017bdd:	0f 84 51 02 00 00    	je     c0017e34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017be3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0017beb:	0f 84 43 02 00 00    	je     c0017e34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017bf1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017bf4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0017bf7:	75 0a                	jne    c0017c03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0017bf9:	b8 07 00 00 00       	mov    eax,0x7
c0017bfe:	e9 36 02 00 00       	jmp    c0017e39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0017c03:	50                   	push   eax
c0017c04:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017c08:	50                   	push   eax
c0017c09:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017c10:	53                   	push   ebx
c0017c11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c14:	c1 e0 0b             	shl    eax,0xb
c0017c17:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0017c1a:	c1 e8 0b             	shr    eax,0xb
c0017c1d:	50                   	push   eax
c0017c1e:	e8 c8 fc ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017c23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017c26:	83 c4 10             	add    esp,0x10
c0017c29:	89 c1                	mov    ecx,eax
c0017c2b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017c2e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017c34:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0017c37:	84 db                	test   bl,bl
c0017c39:	0f 85 8b 00 00 00    	jne    c0017cca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0017c3f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0017c45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017c48:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0017c4e:	29 c6                	sub    esi,eax
c0017c50:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0017c54:	89 f3                	mov    ebx,esi
c0017c56:	89 f1                	mov    ecx,esi
c0017c58:	c1 fb 1f             	sar    ebx,0x1f
c0017c5b:	01 f0                	add    eax,esi
c0017c5d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017c60:	11 da                	adc    edx,ebx
c0017c62:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017c69:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017c6c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017c6f:	89 d8                	mov    eax,ebx
c0017c71:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0017c75:	ba 00 00 00 00       	mov    edx,0x0
c0017c7a:	19 f8                	sbb    eax,edi
c0017c7c:	b8 00 00 00 00       	mov    eax,0x0
c0017c81:	73 08                	jae    c0017c8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0017c83:	89 f0                	mov    eax,esi
c0017c85:	89 fa                	mov    edx,edi
c0017c87:	29 c8                	sub    eax,ecx
c0017c89:	19 da                	sbb    edx,ebx
c0017c8b:	89 d7                	mov    edi,edx
c0017c8d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017c90:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017c93:	09 c7                	or     edi,eax
c0017c95:	0f 84 5e ff ff ff    	je     c0017bf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0017c9b:	57                   	push   edi
c0017c9c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017ca0:	50                   	push   eax
c0017ca1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017ca8:	53                   	push   ebx
c0017ca9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017cac:	c1 e0 0b             	shl    eax,0xb
c0017caf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017cb3:	c1 e8 0b             	shr    eax,0xb
c0017cb6:	50                   	push   eax
c0017cb7:	e8 2f fc ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017cbc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017cbf:	83 c4 10             	add    esp,0x10
c0017cc2:	25 ff 07 00 00       	and    eax,0x7ff
c0017cc7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0017cca:	31 ff                	xor    edi,edi
c0017ccc:	56                   	push   esi
c0017ccd:	6a 28                	push   0x28
c0017ccf:	6a 00                	push   0x0
c0017cd1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017cd5:	50                   	push   eax
c0017cd6:	e8 cd 87 fe ff       	call   c00004a8 <memset>
c0017cdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017cde:	25 ff 07 00 00       	and    eax,0x7ff
c0017ce3:	89 c6                	mov    esi,eax
c0017ce5:	83 c6 21             	add    esi,0x21
c0017ce8:	83 d7 00             	adc    edi,0x0
c0017ceb:	83 c4 10             	add    esp,0x10
c0017cee:	31 c9                	xor    ecx,ecx
c0017cf0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0017cf7:	83 f9 28             	cmp    ecx,0x28
c0017cfa:	88 04 24             	mov    BYTE PTR [esp],al
c0017cfd:	0f 94 c2             	sete   dl
c0017d00:	88 d0                	mov    al,dl
c0017d02:	ba ff 07 00 00       	mov    edx,0x7ff
c0017d07:	39 f2                	cmp    edx,esi
c0017d09:	ba 00 00 00 00       	mov    edx,0x0
c0017d0e:	19 fa                	sbb    edx,edi
c0017d10:	0f 92 c2             	setb   dl
c0017d13:	09 c2                	or     edx,eax
c0017d15:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0017d19:	0f 94 c0             	sete   al
c0017d1c:	08 d0                	or     al,dl
c0017d1e:	75 16                	jne    c0017d36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017d20:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0017d24:	74 10                	je     c0017d36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017d26:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d29:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0017d2d:	41                   	inc    ecx
c0017d2e:	83 c6 01             	add    esi,0x1
c0017d31:	83 d7 00             	adc    edi,0x0
c0017d34:	eb ba                	jmp    c0017cf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0017d36:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	8d 74 24 24          	lea    esi,[esp+0x24]
c0017d44:	56                   	push   esi
c0017d45:	e8 7a 87 fe ff       	call   c00004c4 <strlen>
c0017d4a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0017d51:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017d55:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017d5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017d60:	5a                   	pop    edx
c0017d61:	25 ff 07 00 00       	and    eax,0x7ff
c0017d66:	59                   	pop    ecx
c0017d67:	01 f8                	add    eax,edi
c0017d69:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0017d6f:	83 e0 02             	and    eax,0x2
c0017d72:	3c 01                	cmp    al,0x1
c0017d74:	19 c0                	sbb    eax,eax
c0017d76:	83 c0 02             	add    eax,0x2
c0017d79:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017d7d:	56                   	push   esi
c0017d7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d82:	50                   	push   eax
c0017d83:	e8 dc 87 fe ff       	call   c0000564 <strcpy>
c0017d88:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	84 c0                	test   al,al
c0017d91:	75 21                	jne    c0017db4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0017d93:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0017d9b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017da3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017dab:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0017db2:	eb 28                	jmp    c0017ddc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0017db4:	fe c8                	dec    al
c0017db6:	75 24                	jne    c0017ddc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0017db8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0017dc0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017dc8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017dd0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0017dd7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0017ddc:	8d 74 24 40          	lea    esi,[esp+0x40]
c0017de0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0017de7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0017dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017df0:	0f b6 f3             	movzx  esi,bl
c0017df3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0017dfa:	31 db                	xor    ebx,ebx
c0017dfc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017e02:	89 df                	mov    edi,ebx
c0017e04:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0017e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e0a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0017e0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017e10:	39 c6                	cmp    esi,eax
c0017e12:	19 d7                	sbb    edi,edx
c0017e14:	72 10                	jb     c0017e26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0017e16:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0017e1d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0017e24:	eb 0a                	jmp    c0017e30 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0017e26:	29 f0                	sub    eax,esi
c0017e28:	19 da                	sbb    edx,ebx
c0017e2a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017e2d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017e30:	31 c0                	xor    eax,eax
c0017e32:	eb 05                	jmp    c0017e39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0017e34:	b8 04 00 00 00       	mov    eax,0x4
c0017e39:	81 c4 5c 09 00 00    	add    esp,0x95c
c0017e3f:	5b                   	pop    ebx
c0017e40:	5e                   	pop    esi
c0017e41:	5f                   	pop    edi
c0017e42:	5d                   	pop    ebp
c0017e43:	c3                   	ret    

c0017e44 <readRoot(unsigned int*, unsigned int*, char)>:
c0017e44:	57                   	push   edi
c0017e45:	56                   	push   esi
c0017e46:	81 ec 38 08 00 00    	sub    esp,0x838
c0017e4c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0017e54:	50                   	push   eax
c0017e55:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017e59:	50                   	push   eax
c0017e5a:	6a 10                	push   0x10
c0017e5c:	e8 8a fa ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e61:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0017e68:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0017e6c:	b9 22 00 00 00       	mov    ecx,0x22
c0017e71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e73:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017e7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e7e:	89 10                	mov    DWORD PTR [eax],edx
c0017e80:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0017e87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e8b:	89 10                	mov    DWORD PTR [eax],edx
c0017e8d:	81 c4 44 08 00 00    	add    esp,0x844
c0017e93:	b0 01                	mov    al,0x1
c0017e95:	5e                   	pop    esi
c0017e96:	5f                   	pop    edi
c0017e97:	c3                   	ret    

c0017e98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0017e98:	55                   	push   ebp
c0017e99:	57                   	push   edi
c0017e9a:	56                   	push   esi
c0017e9b:	53                   	push   ebx
c0017e9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017ea2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0017ea9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017eb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017eb4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0017eb8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017ebc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ec0:	75 03                	jne    c0017ec5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017ec2:	83 c3 02             	add    ebx,0x2
c0017ec5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0017ec8:	75 03                	jne    c0017ecd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0017eca:	43                   	inc    ebx
c0017ecb:	eb f8                	jmp    c0017ec5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017ecd:	52                   	push   edx
c0017ece:	68 00 01 00 00       	push   0x100
c0017ed3:	6a 00                	push   0x0
c0017ed5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017ed9:	50                   	push   eax
c0017eda:	e8 c9 85 fe ff       	call   c00004a8 <memset>
c0017edf:	83 c4 10             	add    esp,0x10
c0017ee2:	31 d2                	xor    edx,edx
c0017ee4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0017ee7:	84 c0                	test   al,al
c0017ee9:	74 21                	je     c0017f0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0017eeb:	3c 2f                	cmp    al,0x2f
c0017eed:	75 0b                	jne    c0017efa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0017eef:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0017ef3:	bd 01 00 00 00       	mov    ebp,0x1
c0017ef8:	eb 14                	jmp    c0017f0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0017efa:	8d 48 9f             	lea    ecx,[eax-0x61]
c0017efd:	80 f9 19             	cmp    cl,0x19
c0017f00:	77 03                	ja     c0017f05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0017f02:	83 e8 20             	sub    eax,0x20
c0017f05:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0017f09:	42                   	inc    edx
c0017f0a:	eb d8                	jmp    c0017ee4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0017f0c:	31 ed                	xor    ebp,ebp
c0017f0e:	83 ec 0c             	sub    esp,0xc
c0017f11:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0017f18:	e8 38 eb fe ff       	call   c0006a55 <malloc>
c0017f1d:	89 c6                	mov    esi,eax
c0017f1f:	89 c2                	mov    edx,eax
c0017f21:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0017f28:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0017f2e:	c1 ef 0b             	shr    edi,0xb
c0017f31:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0017f38:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0017f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f48:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0017f4f:	74 29                	je     c0017f7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c0017f51:	50                   	push   eax
c0017f52:	57                   	push   edi
c0017f53:	52                   	push   edx
c0017f54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017f58:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0017f5f:	e8 87 f9 ff ff       	call   c00178eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f68:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017f6f:	81 c2 00 08 00 00    	add    edx,0x800
c0017f75:	83 c4 10             	add    esp,0x10
c0017f78:	eb ca                	jmp    c0017f44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017f81:	57                   	push   edi
c0017f82:	e8 3d 85 fe ff       	call   c00004c4 <strlen>
c0017f87:	50                   	push   eax
c0017f88:	57                   	push   edi
c0017f89:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0017f90:	56                   	push   esi
c0017f91:	e8 13 f9 ff ff       	call   c00178a9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0017f96:	83 c4 20             	add    esp,0x20
c0017f99:	85 c0                	test   eax,eax
c0017f9b:	75 13                	jne    c0017fb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0017f9d:	83 ec 0c             	sub    esp,0xc
c0017fa0:	56                   	push   esi
c0017fa1:	e8 bf ea fe ff       	call   c0006a65 <free>
c0017fa6:	83 c4 10             	add    esp,0x10
c0017fa9:	31 c0                	xor    eax,eax
c0017fab:	e9 b3 00 00 00       	jmp    c0018063 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0017fb0:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0017fb4:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0017fb8:	c1 e7 08             	shl    edi,0x8
c0017fbb:	c1 e2 10             	shl    edx,0x10
c0017fbe:	09 d7                	or     edi,edx
c0017fc0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0017fc4:	09 d7                	or     edi,edx
c0017fc6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0017fca:	c1 e2 18             	shl    edx,0x18
c0017fcd:	09 d7                	or     edi,edx
c0017fcf:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0017fd3:	89 d1                	mov    ecx,edx
c0017fd5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0017fd9:	c1 e1 08             	shl    ecx,0x8
c0017fdc:	c1 e2 10             	shl    edx,0x10
c0017fdf:	09 ca                	or     edx,ecx
c0017fe1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0017fe5:	09 ca                	or     edx,ecx
c0017fe7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017feb:	c1 e1 18             	shl    ecx,0x18
c0017fee:	09 ca                	or     edx,ecx
c0017ff0:	89 e9                	mov    ecx,ebp
c0017ff2:	84 c9                	test   cl,cl
c0017ff4:	74 3c                	je     c0018032 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c0017ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017ffa:	83 ec 0c             	sub    esp,0xc
c0017ffd:	56                   	push   esi
c0017ffe:	e8 62 ea fe ff       	call   c0006a65 <free>
c0018003:	83 c4 0c             	add    esp,0xc
c0018006:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001800d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018012:	50                   	push   eax
c0018013:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001801a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018021:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018025:	52                   	push   edx
c0018026:	57                   	push   edi
c0018027:	53                   	push   ebx
c0018028:	e8 6b fe ff ff       	call   c0017e98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001802d:	83 c4 20             	add    esp,0x20
c0018030:	eb 31                	jmp    c0018063 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0018032:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0018035:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001803c:	d0 e8                	shr    al,1
c001803e:	89 3b                	mov    DWORD PTR [ebx],edi
c0018040:	83 e0 01             	and    eax,0x1
c0018043:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001804a:	83 ec 0c             	sub    esp,0xc
c001804d:	89 13                	mov    DWORD PTR [ebx],edx
c001804f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0018056:	89 03                	mov    DWORD PTR [ebx],eax
c0018058:	56                   	push   esi
c0018059:	e8 07 ea fe ff       	call   c0006a65 <free>
c001805e:	83 c4 10             	add    esp,0x10
c0018061:	b0 01                	mov    al,0x1
c0018063:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018069:	5b                   	pop    ebx
c001806a:	5e                   	pop    esi
c001806b:	5f                   	pop    edi
c001806c:	5d                   	pop    ebp
c001806d:	c3                   	ret    

c001806e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001806e:	55                   	push   ebp
c001806f:	57                   	push   edi
c0018070:	56                   	push   esi
c0018071:	53                   	push   ebx
c0018072:	83 ec 20             	sub    esp,0x20
c0018075:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018079:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001807d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018081:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018089:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0018091:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0018096:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001809c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00180a2:	57                   	push   edi
c00180a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00180a7:	50                   	push   eax
c00180a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00180ac:	50                   	push   eax
c00180ad:	e8 92 fd ff ff       	call   c0017e44 <readRoot(unsigned int*, unsigned int*, char)>
c00180b2:	5a                   	pop    edx
c00180b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00180b7:	e8 08 84 fe ff       	call   c00004c4 <strlen>
c00180bc:	83 c4 10             	add    esp,0x10
c00180bf:	83 f8 03             	cmp    eax,0x3
c00180c2:	77 17                	ja     c00180db <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00180c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180c8:	89 03                	mov    DWORD PTR [ebx],eax
c00180ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ce:	89 06                	mov    DWORD PTR [esi],eax
c00180d0:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00180d7:	b0 01                	mov    al,0x1
c00180d9:	eb 19                	jmp    c00180f4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00180db:	50                   	push   eax
c00180dc:	55                   	push   ebp
c00180dd:	57                   	push   edi
c00180de:	56                   	push   esi
c00180df:	53                   	push   ebx
c00180e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00180ec:	e8 a7 fd ff ff       	call   c0017e98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00180f1:	83 c4 20             	add    esp,0x20
c00180f4:	83 c4 1c             	add    esp,0x1c
c00180f7:	5b                   	pop    ebx
c00180f8:	5e                   	pop    esi
c00180f9:	5f                   	pop    edi
c00180fa:	5d                   	pop    ebp
c00180fb:	c3                   	ret    

c00180fc <ISO9660::open(char const*, void**, FileOpenMode)>:
c00180fc:	57                   	push   edi
c00180fd:	56                   	push   esi
c00180fe:	53                   	push   ebx
c00180ff:	83 ec 10             	sub    esp,0x10
c0018102:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018106:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001810a:	85 ff                	test   edi,edi
c001810c:	0f 84 8b 00 00 00    	je     c001819d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0018112:	85 f6                	test   esi,esi
c0018114:	0f 84 83 00 00 00    	je     c001819d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001811a:	b8 03 00 00 00       	mov    eax,0x3
c001811f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0018124:	75 7c                	jne    c00181a2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0018126:	83 ec 0c             	sub    esp,0xc
c0018129:	6a 1c                	push   0x1c
c001812b:	e8 25 e9 fe ff       	call   c0006a55 <malloc>
c0018130:	89 07                	mov    DWORD PTR [edi],eax
c0018132:	89 c3                	mov    ebx,eax
c0018134:	58                   	pop    eax
c0018135:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018139:	50                   	push   eax
c001813a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001813d:	50                   	push   eax
c001813e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018142:	50                   	push   eax
c0018143:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018147:	50                   	push   eax
c0018148:	56                   	push   esi
c0018149:	e8 20 ff ff ff       	call   c001806e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001814e:	83 c4 20             	add    esp,0x20
c0018151:	84 c0                	test   al,al
c0018153:	74 07                	je     c001815c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0018155:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001815a:	74 0b                	je     c0018167 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001815c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0018160:	b8 01 00 00 00       	mov    eax,0x1
c0018165:	eb 3b                	jmp    c00181a2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0018167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001816b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001816f:	89 03                	mov    DWORD PTR [ebx],eax
c0018171:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0018178:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001817c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0018183:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001818a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001818d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0018194:	8a 06                	mov    al,BYTE PTR [esi]
c0018196:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0018199:	31 c0                	xor    eax,eax
c001819b:	eb 05                	jmp    c00181a2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001819d:	b8 04 00 00 00       	mov    eax,0x4
c00181a2:	83 c4 10             	add    esp,0x10
c00181a5:	5b                   	pop    ebx
c00181a6:	5e                   	pop    esi
c00181a7:	5f                   	pop    edi
c00181a8:	c3                   	ret    
c00181a9:	90                   	nop

c00181aa <ISO9660::exists(char const*)>:
c00181aa:	83 ec 28             	sub    esp,0x28
c00181ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00181b5:	52                   	push   edx
c00181b6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00181b9:	52                   	push   edx
c00181ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00181be:	52                   	push   edx
c00181bf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00181c3:	52                   	push   edx
c00181c4:	50                   	push   eax
c00181c5:	e8 a4 fe ff ff       	call   c001806e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00181ca:	83 c4 3c             	add    esp,0x3c
c00181cd:	c3                   	ret    

c00181ce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00181ce:	56                   	push   esi
c00181cf:	53                   	push   ebx
c00181d0:	83 ec 14             	sub    esp,0x14
c00181d3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00181d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00181db:	85 db                	test   ebx,ebx
c00181dd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00181e1:	0f 94 c2             	sete   dl
c00181e4:	85 f6                	test   esi,esi
c00181e6:	0f 94 c0             	sete   al
c00181e9:	08 c2                	or     dl,al
c00181eb:	75 68                	jne    c0018255 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00181ed:	85 c9                	test   ecx,ecx
c00181ef:	74 64                	je     c0018255 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00181f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00181fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018201:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018208:	50                   	push   eax
c0018209:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001820c:	50                   	push   eax
c001820d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018211:	50                   	push   eax
c0018212:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018216:	50                   	push   eax
c0018217:	51                   	push   ecx
c0018218:	e8 51 fe ff ff       	call   c001806e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001821d:	83 c4 20             	add    esp,0x20
c0018220:	ba 01 00 00 00       	mov    edx,0x1
c0018225:	84 c0                	test   al,al
c0018227:	74 31                	je     c001825a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018229:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001822d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018234:	89 03                	mov    DWORD PTR [ebx],eax
c0018236:	ba 00 00 00 00       	mov    edx,0x0
c001823b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001823f:	85 c0                	test   eax,eax
c0018241:	0f 95 06             	setne  BYTE PTR [esi]
c0018244:	74 14                	je     c001825a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018246:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001824c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018253:	eb 05                	jmp    c001825a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018255:	ba 04 00 00 00       	mov    edx,0x4
c001825a:	83 c4 14             	add    esp,0x14
c001825d:	89 d0                	mov    eax,edx
c001825f:	5b                   	pop    ebx
c0018260:	5e                   	pop    esi
c0018261:	c3                   	ret    

c0018262 <ISO9660::openDir(char const*, void**)>:
c0018262:	57                   	push   edi
c0018263:	56                   	push   esi
c0018264:	53                   	push   ebx
c0018265:	83 ec 10             	sub    esp,0x10
c0018268:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001826c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018270:	85 ff                	test   edi,edi
c0018272:	74 7b                	je     c00182ef <ISO9660::openDir(char const*, void**)+0x8d>
c0018274:	85 f6                	test   esi,esi
c0018276:	74 77                	je     c00182ef <ISO9660::openDir(char const*, void**)+0x8d>
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	6a 1c                	push   0x1c
c001827d:	e8 d3 e7 fe ff       	call   c0006a55 <malloc>
c0018282:	89 07                	mov    DWORD PTR [edi],eax
c0018284:	89 c3                	mov    ebx,eax
c0018286:	58                   	pop    eax
c0018287:	8d 44 24 18          	lea    eax,[esp+0x18]
c001828b:	50                   	push   eax
c001828c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001828f:	50                   	push   eax
c0018290:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018294:	50                   	push   eax
c0018295:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018299:	50                   	push   eax
c001829a:	56                   	push   esi
c001829b:	e8 ce fd ff ff       	call   c001806e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00182a0:	83 c4 20             	add    esp,0x20
c00182a3:	84 c0                	test   al,al
c00182a5:	74 07                	je     c00182ae <ISO9660::openDir(char const*, void**)+0x4c>
c00182a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182ac:	75 0b                	jne    c00182b9 <ISO9660::openDir(char const*, void**)+0x57>
c00182ae:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00182b2:	b8 01 00 00 00       	mov    eax,0x1
c00182b7:	eb 3b                	jmp    c00182f4 <ISO9660::openDir(char const*, void**)+0x92>
c00182b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182bd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00182c1:	89 03                	mov    DWORD PTR [ebx],eax
c00182c3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00182ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00182d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00182dc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00182df:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00182e6:	8a 06                	mov    al,BYTE PTR [esi]
c00182e8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00182eb:	31 c0                	xor    eax,eax
c00182ed:	eb 05                	jmp    c00182f4 <ISO9660::openDir(char const*, void**)+0x92>
c00182ef:	b8 04 00 00 00       	mov    eax,0x4
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	5b                   	pop    ebx
c00182f8:	5e                   	pop    esi
c00182f9:	5f                   	pop    edi
c00182fa:	c3                   	ret    
c00182fb:	90                   	nop

c00182fc <ISO9660::ISO9660()>:
c00182fc:	83 ec 0c             	sub    esp,0xc
c00182ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018303:	83 ec 0c             	sub    esp,0xc
c0018306:	50                   	push   eax
c0018307:	e8 ea 17 ff ff       	call   c0009af6 <Filesystem::Filesystem()>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	ba 84 f5 01 c0       	mov    edx,0xc001f584
c0018314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018318:	89 10                	mov    DWORD PTR [eax],edx
c001831a:	90                   	nop
c001831b:	83 c4 0c             	add    esp,0xc
c001831e:	c3                   	ret    
c001831f:	90                   	nop

c0018320 <SoundCard::beginPlayback()>:
c0018320:	c7 44 24 04 e4 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f5e4
c0018328:	e9 88 71 ff ff       	jmp    c000f4b5 <Krnl::panic(char const*)>
c001832d:	90                   	nop

c001832e <SoundCard::stopPlayback()>:
c001832e:	c7 44 24 04 e4 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f5e4
c0018336:	e9 7a 71 ff ff       	jmp    c000f4b5 <Krnl::panic(char const*)>
c001833b:	90                   	nop

c001833c <SoundCard::SoundCard(char const*)>:
c001833c:	83 ec 1c             	sub    esp,0x1c
c001833f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018343:	83 ec 08             	sub    esp,0x8
c0018346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001834a:	50                   	push   eax
c001834b:	e8 4a 2a ff ff       	call   c000ad9a <Device::Device(char const*)>
c0018350:	83 c4 10             	add    esp,0x10
c0018353:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c0018358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835c:	89 10                	mov    DWORD PTR [eax],edx
c001835e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018362:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0018377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018389:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018397:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00183a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183a9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00183ae:	7f 19                	jg     c00183c9 <SoundCard::SoundCard(char const*)+0x8d>
c00183b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00183b8:	83 c2 54             	add    edx,0x54
c00183bb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00183c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00183c7:	eb e0                	jmp    c00183a9 <SoundCard::SoundCard(char const*)+0x6d>
c00183c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00183d4:	90                   	nop
c00183d5:	83 c4 1c             	add    esp,0x1c
c00183d8:	c3                   	ret    
c00183d9:	90                   	nop

c00183da <SoundCard::~SoundCard()>:
c00183da:	83 ec 0c             	sub    esp,0xc
c00183dd:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c00183e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183e6:	89 10                	mov    DWORD PTR [eax],edx
c00183e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	50                   	push   eax
c00183f0:	e8 0f 27 ff ff       	call   c000ab04 <Device::~Device()>
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	90                   	nop
c00183f9:	83 c4 0c             	add    esp,0xc
c00183fc:	c3                   	ret    
c00183fd:	90                   	nop

c00183fe <SoundCard::~SoundCard()>:
c00183fe:	83 ec 0c             	sub    esp,0xc
c0018401:	83 ec 0c             	sub    esp,0xc
c0018404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018408:	e8 cd ff ff ff       	call   c00183da <SoundCard::~SoundCard()>
c001840d:	83 c4 10             	add    esp,0x10
c0018410:	83 ec 08             	sub    esp,0x8
c0018413:	68 e8 01 00 00       	push   0x1e8
c0018418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001841c:	e8 dd 12 ff ff       	call   c00096fe <operator delete(void*, unsigned long)>
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	83 c4 0c             	add    esp,0xc
c0018427:	c3                   	ret    

c0018428 <SoundCard::configureRates(int, int, int)>:
c0018428:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001842c:	31 c0                	xor    eax,eax
c001842e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018435:	75 20                	jne    c0018457 <SoundCard::configureRates(int, int, int)+0x2f>
c0018437:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001843b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018445:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001844b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018455:	b0 01                	mov    al,0x1
c0018457:	c3                   	ret    

c0018458 <SoundCard::getSamples16(int, short*)>:
c0018458:	55                   	push   ebp
c0018459:	57                   	push   edi
c001845a:	31 ff                	xor    edi,edi
c001845c:	56                   	push   esi
c001845d:	53                   	push   ebx
c001845e:	31 db                	xor    ebx,ebx
c0018460:	83 ec 10             	sub    esp,0x10
c0018463:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018467:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001846b:	8d 04 36             	lea    eax,[esi+esi*1]
c001846e:	50                   	push   eax
c001846f:	6a 00                	push   0x0
c0018471:	55                   	push   ebp
c0018472:	e8 31 80 fe ff       	call   c00004a8 <memset>
c0018477:	83 c4 10             	add    esp,0x10
c001847a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018485:	85 c0                	test   eax,eax
c0018487:	74 1b                	je     c00184a4 <SoundCard::getSamples16(int, short*)+0x4c>
c0018489:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001848d:	75 15                	jne    c00184a4 <SoundCard::getSamples16(int, short*)+0x4c>
c001848f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018493:	55                   	push   ebp
c0018494:	56                   	push   esi
c0018495:	50                   	push   eax
c0018496:	e8 ed 02 00 00       	call   c0018788 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	39 c7                	cmp    edi,eax
c00184a0:	7d 02                	jge    c00184a4 <SoundCard::getSamples16(int, short*)+0x4c>
c00184a2:	89 c7                	mov    edi,eax
c00184a4:	43                   	inc    ebx
c00184a5:	83 fb 20             	cmp    ebx,0x20
c00184a8:	75 d0                	jne    c001847a <SoundCard::getSamples16(int, short*)+0x22>
c00184aa:	83 c4 0c             	add    esp,0xc
c00184ad:	89 f8                	mov    eax,edi
c00184af:	5b                   	pop    ebx
c00184b0:	5e                   	pop    esi
c00184b1:	5f                   	pop    edi
c00184b2:	5d                   	pop    ebp
c00184b3:	c3                   	ret    

c00184b4 <SoundCard::getSamples32(int, int*)>:
c00184b4:	55                   	push   ebp
c00184b5:	57                   	push   edi
c00184b6:	31 ff                	xor    edi,edi
c00184b8:	56                   	push   esi
c00184b9:	31 f6                	xor    esi,esi
c00184bb:	53                   	push   ebx
c00184bc:	83 ec 10             	sub    esp,0x10
c00184bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184c3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00184c7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00184cb:	c1 e0 02             	shl    eax,0x2
c00184ce:	50                   	push   eax
c00184cf:	6a 00                	push   0x0
c00184d1:	55                   	push   ebp
c00184d2:	e8 d1 7f fe ff       	call   c00004a8 <memset>
c00184d7:	83 c4 10             	add    esp,0x10
c00184da:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00184e1:	85 c0                	test   eax,eax
c00184e3:	74 1b                	je     c0018500 <SoundCard::getSamples32(int, int*)+0x4c>
c00184e5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00184e9:	75 15                	jne    c0018500 <SoundCard::getSamples32(int, int*)+0x4c>
c00184eb:	53                   	push   ebx
c00184ec:	55                   	push   ebp
c00184ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00184f1:	50                   	push   eax
c00184f2:	e8 55 03 00 00       	call   c001884c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	39 c6                	cmp    esi,eax
c00184fc:	7d 02                	jge    c0018500 <SoundCard::getSamples32(int, int*)+0x4c>
c00184fe:	89 c6                	mov    esi,eax
c0018500:	47                   	inc    edi
c0018501:	83 ff 20             	cmp    edi,0x20
c0018504:	75 d4                	jne    c00184da <SoundCard::getSamples32(int, int*)+0x26>
c0018506:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001850c:	85 f6                	test   esi,esi
c001850e:	75 0f                	jne    c001851f <SoundCard::getSamples32(int, int*)+0x6b>
c0018510:	84 c0                	test   al,al
c0018512:	74 1b                	je     c001852f <SoundCard::getSamples32(int, int*)+0x7b>
c0018514:	83 ec 0c             	sub    esp,0xc
c0018517:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018519:	53                   	push   ebx
c001851a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001851d:	eb 0d                	jmp    c001852c <SoundCard::getSamples32(int, int*)+0x78>
c001851f:	84 c0                	test   al,al
c0018521:	75 0c                	jne    c001852f <SoundCard::getSamples32(int, int*)+0x7b>
c0018523:	83 ec 0c             	sub    esp,0xc
c0018526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018528:	53                   	push   ebx
c0018529:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	83 c4 0c             	add    esp,0xc
c0018532:	89 f0                	mov    eax,esi
c0018534:	5b                   	pop    ebx
c0018535:	5e                   	pop    esi
c0018536:	5f                   	pop    edi
c0018537:	5d                   	pop    ebp
c0018538:	c3                   	ret    
c0018539:	90                   	nop

c001853a <SoundCard::addChannel(SoundPort*)>:
c001853a:	83 ec 0c             	sub    esp,0xc
c001853d:	31 c0                	xor    eax,eax
c001853f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018543:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001854b:	74 1b                	je     c0018568 <SoundCard::addChannel(SoundPort*)+0x2e>
c001854d:	40                   	inc    eax
c001854e:	83 f8 20             	cmp    eax,0x20
c0018551:	75 f0                	jne    c0018543 <SoundCard::addChannel(SoundPort*)+0x9>
c0018553:	83 ec 0c             	sub    esp,0xc
c0018556:	68 09 f6 01 c0       	push   0xc001f609
c001855b:	e8 55 6f ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	83 c8 ff             	or     eax,0xffffffff
c0018566:	eb 0b                	jmp    c0018573 <SoundCard::addChannel(SoundPort*)+0x39>
c0018568:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001856c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018573:	83 c4 0c             	add    esp,0xc
c0018576:	c3                   	ret    
c0018577:	90                   	nop

c0018578 <SoundCard::removeChannel(int)>:
c0018578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001857c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018580:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001858b:	c3                   	ret    

c001858c <SoundPort::SoundPort(int, int, int, int)>:
c001858c:	83 ec 0c             	sub    esp,0xc
c001858f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018593:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001859a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00185a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00185aa:	89 10                	mov    DWORD PTR [eax],edx
c00185ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00185b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185bf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00185c2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00185c7:	75 13                	jne    c00185dc <SoundPort::SoundPort(int, int, int, int)+0x50>
c00185c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00185cf:	05 a0 0f 00 00       	add    eax,0xfa0
c00185d4:	01 c0                	add    eax,eax
c00185d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00185da:	66 90                	xchg   ax,ax
c00185dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185e4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00185e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185eb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00185f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185f9:	c1 e0 02             	shl    eax,0x2
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	50                   	push   eax
c0018600:	e8 50 e4 fe ff       	call   c0006a55 <malloc>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	89 c2                	mov    edx,eax
c001860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018611:	90                   	nop
c0018612:	83 c4 0c             	add    esp,0xc
c0018615:	c3                   	ret    
c0018616:	66 90                	xchg   ax,ax

c0018618 <SoundPort::~SoundPort()>:
c0018618:	83 ec 0c             	sub    esp,0xc
c001861b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018622:	85 c0                	test   eax,eax
c0018624:	74 1e                	je     c0018644 <SoundPort::~SoundPort()+0x2c>
c0018626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001862d:	83 ec 0c             	sub    esp,0xc
c0018630:	50                   	push   eax
c0018631:	e8 2f e4 fe ff       	call   c0006a65 <free>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001863d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018644:	90                   	nop
c0018645:	83 c4 0c             	add    esp,0xc
c0018648:	c3                   	ret    
c0018649:	90                   	nop
c001864a:	66 90                	xchg   ax,ax

c001864c <SoundPort::unpause()>:
c001864c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018650:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018654:	c3                   	ret    
c0018655:	90                   	nop
c0018656:	66 90                	xchg   ax,ax

c0018658 <SoundPort::pause()>:
c0018658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001865c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018660:	c3                   	ret    
c0018661:	90                   	nop
c0018662:	66 90                	xchg   ax,ax

c0018664 <SoundPort::getBufferUsed()>:
c0018664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018668:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001866b:	c3                   	ret    

c001866c <SoundPort::getBufferSize()>:
c001866c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018670:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018673:	c3                   	ret    

c0018674 <SoundPort::buffer16(short*, int)>:
c0018674:	55                   	push   ebp
c0018675:	57                   	push   edi
c0018676:	56                   	push   esi
c0018677:	53                   	push   ebx
c0018678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001867c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018680:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018683:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018686:	74 68                	je     c00186f0 <SoundPort::buffer16(short*, int)+0x7c>
c0018688:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001868c:	85 c9                	test   ecx,ecx
c001868e:	7e 60                	jle    c00186f0 <SoundPort::buffer16(short*, int)+0x7c>
c0018690:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018694:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018697:	c1 e1 0f             	shl    ecx,0xf
c001869a:	8d 70 01             	lea    esi,[eax+0x1]
c001869d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00186a0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00186a3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00186a6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00186a9:	74 4d                	je     c00186f8 <SoundPort::buffer16(short*, int)+0x84>
c00186ab:	31 f6                	xor    esi,esi
c00186ad:	eb 21                	jmp    c00186d0 <SoundPort::buffer16(short*, int)+0x5c>
c00186af:	90                   	nop
c00186b0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00186b5:	8d 79 01             	lea    edi,[ecx+0x1]
c00186b8:	c1 e3 0f             	shl    ebx,0xf
c00186bb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00186be:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00186c1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00186c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00186c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00186ca:	74 1c                	je     c00186e8 <SoundPort::buffer16(short*, int)+0x74>
c00186cc:	89 c6                	mov    esi,eax
c00186ce:	66 90                	xchg   ax,ax
c00186d0:	8d 46 01             	lea    eax,[esi+0x1]
c00186d3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00186d7:	75 d7                	jne    c00186b0 <SoundPort::buffer16(short*, int)+0x3c>
c00186d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186dd:	8d 76 00             	lea    esi,[esi+0x0]
c00186e0:	5b                   	pop    ebx
c00186e1:	5e                   	pop    esi
c00186e2:	5f                   	pop    edi
c00186e3:	5d                   	pop    ebp
c00186e4:	c3                   	ret    
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]
c00186e8:	5b                   	pop    ebx
c00186e9:	8d 46 02             	lea    eax,[esi+0x2]
c00186ec:	5e                   	pop    esi
c00186ed:	5f                   	pop    edi
c00186ee:	5d                   	pop    ebp
c00186ef:	c3                   	ret    
c00186f0:	5b                   	pop    ebx
c00186f1:	31 c0                	xor    eax,eax
c00186f3:	5e                   	pop    esi
c00186f4:	5f                   	pop    edi
c00186f5:	5d                   	pop    ebp
c00186f6:	c3                   	ret    
c00186f7:	90                   	nop
c00186f8:	b8 01 00 00 00       	mov    eax,0x1
c00186fd:	eb e1                	jmp    c00186e0 <SoundPort::buffer16(short*, int)+0x6c>
c00186ff:	90                   	nop

c0018700 <SoundPort::buffer32(int*, int)>:
c0018700:	55                   	push   ebp
c0018701:	57                   	push   edi
c0018702:	56                   	push   esi
c0018703:	53                   	push   ebx
c0018704:	51                   	push   ecx
c0018705:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018710:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018714:	89 04 24             	mov    DWORD PTR [esp],eax
c0018717:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001871a:	74 5c                	je     c0018778 <SoundPort::buffer32(int*, int)+0x78>
c001871c:	85 c0                	test   eax,eax
c001871e:	7e 58                	jle    c0018778 <SoundPort::buffer32(int*, int)+0x78>
c0018720:	8d 71 01             	lea    esi,[ecx+0x1]
c0018723:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018726:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018729:	8b 37                	mov    esi,DWORD PTR [edi]
c001872b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001872e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018731:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018734:	74 4a                	je     c0018780 <SoundPort::buffer32(int*, int)+0x80>
c0018736:	31 f6                	xor    esi,esi
c0018738:	eb 1e                	jmp    c0018758 <SoundPort::buffer32(int*, int)+0x58>
c001873a:	66 90                	xchg   ax,ax
c001873c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001873f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018742:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018745:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018748:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001874c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001874f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018752:	74 18                	je     c001876c <SoundPort::buffer32(int*, int)+0x6c>
c0018754:	89 de                	mov    esi,ebx
c0018756:	66 90                	xchg   ax,ax
c0018758:	8d 5e 01             	lea    ebx,[esi+0x1]
c001875b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001875e:	75 dc                	jne    c001873c <SoundPort::buffer32(int*, int)+0x3c>
c0018760:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018763:	90                   	nop
c0018764:	5a                   	pop    edx
c0018765:	5b                   	pop    ebx
c0018766:	5e                   	pop    esi
c0018767:	5f                   	pop    edi
c0018768:	5d                   	pop    ebp
c0018769:	c3                   	ret    
c001876a:	66 90                	xchg   ax,ax
c001876c:	5a                   	pop    edx
c001876d:	8d 46 02             	lea    eax,[esi+0x2]
c0018770:	5b                   	pop    ebx
c0018771:	5e                   	pop    esi
c0018772:	5f                   	pop    edi
c0018773:	5d                   	pop    ebp
c0018774:	c3                   	ret    
c0018775:	8d 76 00             	lea    esi,[esi+0x0]
c0018778:	5a                   	pop    edx
c0018779:	31 c0                	xor    eax,eax
c001877b:	5b                   	pop    ebx
c001877c:	5e                   	pop    esi
c001877d:	5f                   	pop    edi
c001877e:	5d                   	pop    ebp
c001877f:	c3                   	ret    
c0018780:	b8 01 00 00 00       	mov    eax,0x1
c0018785:	eb dd                	jmp    c0018764 <SoundPort::buffer32(int*, int)+0x64>
c0018787:	90                   	nop

c0018788 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018788:	57                   	push   edi
c0018789:	56                   	push   esi
c001878a:	53                   	push   ebx
c001878b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001878f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018793:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018799:	39 03                	cmp    DWORD PTR [ebx],eax
c001879b:	74 13                	je     c00187b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001879d:	83 ec 0c             	sub    esp,0xc
c00187a0:	68 5c f6 01 c0       	push   0xc001f65c
c00187a5:	e8 0b 6d ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	8d 76 00             	lea    esi,[esi+0x0]
c00187b0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00187b6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00187b9:	74 11                	je     c00187cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00187bb:	83 ec 0c             	sub    esp,0xc
c00187be:	68 9b f6 01 c0       	push   0xc001f69b
c00187c3:	e8 ed 6c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00187c8:	83 c4 10             	add    esp,0x10
c00187cb:	90                   	nop
c00187cc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00187d2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00187d5:	74 11                	je     c00187e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	68 9b f6 01 c0       	push   0xc001f69b
c00187df:	e8 d1 6c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	90                   	nop
c00187e8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00187eb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00187ef:	7e 07                	jle    c00187f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00187f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	85 f6                	test   esi,esi
c00187fa:	7e 2c                	jle    c0018828 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00187fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018800:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018803:	31 c9                	xor    ecx,ecx
c0018805:	01 d7                	add    edi,edx
c0018807:	90                   	nop
c0018808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001880b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001880e:	85 c0                	test   eax,eax
c0018810:	79 06                	jns    c0018818 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018812:	05 ff 7f 00 00       	add    eax,0x7fff
c0018817:	90                   	nop
c0018818:	c1 f8 0f             	sar    eax,0xf
c001881b:	83 c1 04             	add    ecx,0x4
c001881e:	66 01 02             	add    WORD PTR [edx],ax
c0018821:	83 c2 02             	add    edx,0x2
c0018824:	39 d7                	cmp    edi,edx
c0018826:	75 e0                	jne    c0018808 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018828:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001882b:	50                   	push   eax
c001882c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001882f:	29 f0                	sub    eax,esi
c0018831:	c1 e0 02             	shl    eax,0x2
c0018834:	50                   	push   eax
c0018835:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018838:	50                   	push   eax
c0018839:	52                   	push   edx
c001883a:	e8 a1 7b fe ff       	call   c00003e0 <memmove>
c001883f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	89 f0                	mov    eax,esi
c0018847:	5b                   	pop    ebx
c0018848:	5e                   	pop    esi
c0018849:	5f                   	pop    edi
c001884a:	c3                   	ret    
c001884b:	90                   	nop

c001884c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001884c:	57                   	push   edi
c001884d:	56                   	push   esi
c001884e:	53                   	push   ebx
c001884f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018853:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018857:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001885b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018861:	39 06                	cmp    DWORD PTR [esi],eax
c0018863:	74 13                	je     c0018878 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018865:	83 ec 0c             	sub    esp,0xc
c0018868:	68 7c f6 01 c0       	push   0xc001f67c
c001886d:	e8 43 6c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018872:	83 c4 10             	add    esp,0x10
c0018875:	8d 76 00             	lea    esi,[esi+0x0]
c0018878:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001887e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018881:	74 11                	je     c0018894 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018883:	83 ec 0c             	sub    esp,0xc
c0018886:	68 b7 f6 01 c0       	push   0xc001f6b7
c001888b:	e8 25 6c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018890:	83 c4 10             	add    esp,0x10
c0018893:	90                   	nop
c0018894:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001889a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001889d:	74 11                	je     c00188b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001889f:	83 ec 0c             	sub    esp,0xc
c00188a2:	68 b7 f6 01 c0       	push   0xc001f6b7
c00188a7:	e8 09 6c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	90                   	nop
c00188b0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00188b3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00188b7:	7e 07                	jle    c00188c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00188b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00188bd:	8d 76 00             	lea    esi,[esi+0x0]
c00188c0:	85 ff                	test   edi,edi
c00188c2:	7e 1c                	jle    c00188e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00188c4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00188cb:	31 c0                	xor    eax,eax
c00188cd:	8d 76 00             	lea    esi,[esi+0x0]
c00188d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00188d3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00188d6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00188d9:	83 c0 04             	add    eax,0x4
c00188dc:	39 c1                	cmp    ecx,eax
c00188de:	75 f0                	jne    c00188d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00188e0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00188e3:	50                   	push   eax
c00188e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00188e7:	29 f8                	sub    eax,edi
c00188e9:	c1 e0 02             	shl    eax,0x2
c00188ec:	50                   	push   eax
c00188ed:	8d 04 ba             	lea    eax,[edx+edi*4]
c00188f0:	50                   	push   eax
c00188f1:	52                   	push   edx
c00188f2:	e8 e9 7a fe ff       	call   c00003e0 <memmove>
c00188f7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00188fa:	83 c4 10             	add    esp,0x10
c00188fd:	89 f8                	mov    eax,edi
c00188ff:	5b                   	pop    ebx
c0018900:	5e                   	pop    esi
c0018901:	5f                   	pop    edi
c0018902:	c3                   	ret    
c0018903:	90                   	nop

c0018904 <PCI::open(int, int, void*)>:
c0018904:	83 ec 18             	sub    esp,0x18
c0018907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001890b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001890f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018915:	8b 10                	mov    edx,DWORD PTR [eax]
c0018917:	50                   	push   eax
c0018918:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001891b:	31 c0                	xor    eax,eax
c001891d:	83 c4 1c             	add    esp,0x1c
c0018920:	c3                   	ret    
c0018921:	90                   	nop

c0018922 <PCI::close(int, int, void*)>:
c0018922:	31 c0                	xor    eax,eax
c0018924:	c3                   	ret    
c0018925:	90                   	nop

c0018926 <PCI::PCI()>:
c0018926:	83 ec 0c             	sub    esp,0xc
c0018929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892d:	83 ec 08             	sub    esp,0x8
c0018930:	68 d3 f6 01 c0       	push   0xc001f6d3
c0018935:	50                   	push   eax
c0018936:	e8 21 1c ff ff       	call   c000a55c <Bus::Bus(char const*)>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	ba 7c f7 01 c0       	mov    edx,0xc001f77c
c0018943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018947:	89 10                	mov    DWORD PTR [eax],edx
c0018949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001894d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895b:	a3 80 43 02 c0       	mov    ds:0xc0024380,eax
c0018960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018964:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001896a:	0f b6 d0             	movzx  edx,al
c001896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018971:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018982:	0f b6 d0             	movzx  edx,al
c0018985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018989:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018992:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018998:	8d 50 01             	lea    edx,[eax+0x1]
c001899b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001899f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00189a5:	0f b6 d0             	movzx  edx,al
c00189a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ac:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00189b0:	83 c9 c0             	or     ecx,0xffffffc0
c00189b3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00189b7:	90                   	nop
c00189b8:	83 c4 0c             	add    esp,0xc
c00189bb:	c3                   	ret    

c00189bc <PCI::readBAR8(unsigned int, int)>:
c00189bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189c4:	f6 c2 01             	test   dl,0x1
c00189c7:	74 07                	je     c00189d0 <PCI::readBAR8(unsigned int, int)+0x14>
c00189c9:	83 e2 fc             	and    edx,0xfffffffc
c00189cc:	01 c2                	add    edx,eax
c00189ce:	ec                   	in     al,dx
c00189cf:	c3                   	ret    
c00189d0:	83 e2 f0             	and    edx,0xfffffff0
c00189d3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00189d6:	c3                   	ret    
c00189d7:	90                   	nop

c00189d8 <PCI::readBAR16(unsigned int, int)>:
c00189d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189e0:	f6 c2 01             	test   dl,0x1
c00189e3:	74 08                	je     c00189ed <PCI::readBAR16(unsigned int, int)+0x15>
c00189e5:	83 e2 fc             	and    edx,0xfffffffc
c00189e8:	01 c2                	add    edx,eax
c00189ea:	66 ed                	in     ax,dx
c00189ec:	c3                   	ret    
c00189ed:	83 e2 f0             	and    edx,0xfffffff0
c00189f0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00189f4:	c3                   	ret    
c00189f5:	90                   	nop

c00189f6 <PCI::readBAR32(unsigned int, int)>:
c00189f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189fe:	f6 c2 01             	test   dl,0x1
c0018a01:	74 07                	je     c0018a0a <PCI::readBAR32(unsigned int, int)+0x14>
c0018a03:	83 e2 fc             	and    edx,0xfffffffc
c0018a06:	01 c2                	add    edx,eax
c0018a08:	ed                   	in     eax,dx
c0018a09:	c3                   	ret    
c0018a0a:	83 e2 f0             	and    edx,0xfffffff0
c0018a0d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018a10:	c3                   	ret    
c0018a11:	90                   	nop

c0018a12 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018a12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a1e:	f6 c2 01             	test   dl,0x1
c0018a21:	74 07                	je     c0018a2a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018a23:	83 e2 fc             	and    edx,0xfffffffc
c0018a26:	01 ca                	add    edx,ecx
c0018a28:	ee                   	out    dx,al
c0018a29:	c3                   	ret    
c0018a2a:	83 e2 f0             	and    edx,0xfffffff0
c0018a2d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018a30:	c3                   	ret    
c0018a31:	90                   	nop

c0018a32 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018a32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a3e:	f6 c2 01             	test   dl,0x1
c0018a41:	74 08                	je     c0018a4b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018a43:	83 e2 fc             	and    edx,0xfffffffc
c0018a46:	01 ca                	add    edx,ecx
c0018a48:	66 ef                	out    dx,ax
c0018a4a:	c3                   	ret    
c0018a4b:	83 e2 f0             	and    edx,0xfffffff0
c0018a4e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018a52:	c3                   	ret    
c0018a53:	90                   	nop

c0018a54 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018a54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a60:	f6 c2 01             	test   dl,0x1
c0018a63:	74 07                	je     c0018a6c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018a65:	83 e2 fc             	and    edx,0xfffffffc
c0018a68:	01 ca                	add    edx,ecx
c0018a6a:	ef                   	out    dx,eax
c0018a6b:	c3                   	ret    
c0018a6c:	83 e2 f0             	and    edx,0xfffffff0
c0018a6f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018a72:	c3                   	ret    
c0018a73:	90                   	nop

c0018a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018a74:	55                   	push   ebp
c0018a75:	57                   	push   edi
c0018a76:	56                   	push   esi
c0018a77:	53                   	push   ebx
c0018a78:	83 ec 0c             	sub    esp,0xc
c0018a7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018a7f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018a83:	89 f0                	mov    eax,esi
c0018a85:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018a89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018a8d:	3c 07                	cmp    al,0x7
c0018a8f:	76 10                	jbe    c0018aa1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018a91:	83 ec 0c             	sub    esp,0xc
c0018a94:	68 db f6 01 c0       	push   0xc001f6db
c0018a99:	e8 17 6a ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018a9e:	83 c4 10             	add    esp,0x10
c0018aa1:	80 fb 0f             	cmp    bl,0xf
c0018aa4:	76 10                	jbe    c0018ab6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018aa6:	83 ec 0c             	sub    esp,0xc
c0018aa9:	68 0b f7 01 c0       	push   0xc001f70b
c0018aae:	e8 02 6a ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018ab3:	83 c4 10             	add    esp,0x10
c0018ab6:	8d 04 36             	lea    eax,[esi+esi*1]
c0018ab9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018abe:	83 c8 f0             	or     eax,0xfffffff0
c0018ac1:	ee                   	out    dx,al
c0018ac2:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018ac7:	89 e8                	mov    eax,ebp
c0018ac9:	ee                   	out    dx,al
c0018aca:	83 c4 0c             	add    esp,0xc
c0018acd:	89 d8                	mov    eax,ebx
c0018acf:	66 81 e7 fc 00       	and    di,0xfc
c0018ad4:	5b                   	pop    ebx
c0018ad5:	c1 e0 08             	shl    eax,0x8
c0018ad8:	5e                   	pop    esi
c0018ad9:	09 f8                	or     eax,edi
c0018adb:	5f                   	pop    edi
c0018adc:	66 0d 00 c0          	or     ax,0xc000
c0018ae0:	5d                   	pop    ebp
c0018ae1:	c3                   	ret    

c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018ae2:	57                   	push   edi
c0018ae3:	56                   	push   esi
c0018ae4:	53                   	push   ebx
c0018ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018aed:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018af3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018af7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018afb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018aff:	83 ff 01             	cmp    edi,0x1
c0018b02:	75 3e                	jne    c0018b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018b04:	89 de                	mov    esi,ebx
c0018b06:	0f b6 c0             	movzx  eax,al
c0018b09:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018b0f:	c1 e0 10             	shl    eax,0x10
c0018b12:	0f b6 c9             	movzx  ecx,cl
c0018b15:	09 f0                	or     eax,esi
c0018b17:	c1 e1 08             	shl    ecx,0x8
c0018b1a:	0f b6 d2             	movzx  edx,dl
c0018b1d:	09 c8                	or     eax,ecx
c0018b1f:	c1 e2 0b             	shl    edx,0xb
c0018b22:	09 d0                	or     eax,edx
c0018b24:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018b29:	0d 00 00 00 80       	or     eax,0x80000000
c0018b2e:	ef                   	out    dx,eax
c0018b2f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018b34:	ed                   	in     eax,dx
c0018b35:	83 e3 02             	and    ebx,0x2
c0018b38:	0f b6 cb             	movzx  ecx,bl
c0018b3b:	c1 e1 03             	shl    ecx,0x3
c0018b3e:	d3 e8                	shr    eax,cl
c0018b40:	eb 43                	jmp    c0018b85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018b42:	83 ff 02             	cmp    edi,0x2
c0018b45:	75 2c                	jne    c0018b73 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	0f b6 c9             	movzx  ecx,cl
c0018b4d:	0f b6 d2             	movzx  edx,dl
c0018b50:	0f b6 fb             	movzx  edi,bl
c0018b53:	0f b6 c0             	movzx  eax,al
c0018b56:	57                   	push   edi
c0018b57:	51                   	push   ecx
c0018b58:	52                   	push   edx
c0018b59:	50                   	push   eax
c0018b5a:	56                   	push   esi
c0018b5b:	e8 14 ff ff ff       	call   c0018a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b60:	89 c2                	mov    edx,eax
c0018b62:	ed                   	in     eax,dx
c0018b63:	83 e3 02             	and    ebx,0x2
c0018b66:	83 c4 20             	add    esp,0x20
c0018b69:	0f b6 cb             	movzx  ecx,bl
c0018b6c:	c1 e1 03             	shl    ecx,0x3
c0018b6f:	d3 e8                	shr    eax,cl
c0018b71:	eb 12                	jmp    c0018b85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018b73:	83 ec 0c             	sub    esp,0xc
c0018b76:	68 3b f7 01 c0       	push   0xc001f73b
c0018b7b:	e8 35 69 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c0018b80:	83 c4 10             	add    esp,0x10
c0018b83:	31 c0                	xor    eax,eax
c0018b85:	5b                   	pop    ebx
c0018b86:	5e                   	pop    esi
c0018b87:	5f                   	pop    edi
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018b8a:	83 ec 18             	sub    esp,0x18
c0018b8d:	6a 00                	push   0x0
c0018b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b94:	50                   	push   eax
c0018b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b9a:	50                   	push   eax
c0018b9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ba0:	50                   	push   eax
c0018ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ba5:	e8 38 ff ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018baa:	83 c4 2c             	add    esp,0x2c
c0018bad:	c3                   	ret    

c0018bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018bae:	83 ec 18             	sub    esp,0x18
c0018bb1:	6a 0e                	push   0xe
c0018bb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018bb8:	50                   	push   eax
c0018bb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018bbe:	50                   	push   eax
c0018bbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018bc4:	50                   	push   eax
c0018bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bc9:	e8 14 ff ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018bce:	83 c4 2c             	add    esp,0x2c
c0018bd1:	0f b6 c0             	movzx  eax,al
c0018bd4:	c3                   	ret    
c0018bd5:	90                   	nop

c0018bd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018bd6:	55                   	push   ebp
c0018bd7:	57                   	push   edi
c0018bd8:	56                   	push   esi
c0018bd9:	53                   	push   ebx
c0018bda:	83 ec 18             	sub    esp,0x18
c0018bdd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018be2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018be7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018bec:	6a 0a                	push   0xa
c0018bee:	56                   	push   esi
c0018bef:	55                   	push   ebp
c0018bf0:	57                   	push   edi
c0018bf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018bf5:	e8 e8 fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018bfa:	83 c4 14             	add    esp,0x14
c0018bfd:	89 c3                	mov    ebx,eax
c0018bff:	6a 0a                	push   0xa
c0018c01:	0f b6 db             	movzx  ebx,bl
c0018c04:	56                   	push   esi
c0018c05:	55                   	push   ebp
c0018c06:	57                   	push   edi
c0018c07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c0b:	e8 d2 fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c10:	83 c4 2c             	add    esp,0x2c
c0018c13:	25 00 ff 00 00       	and    eax,0xff00
c0018c18:	09 d8                	or     eax,ebx
c0018c1a:	5b                   	pop    ebx
c0018c1b:	5e                   	pop    esi
c0018c1c:	5f                   	pop    edi
c0018c1d:	5d                   	pop    ebp
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018c20:	83 ec 18             	sub    esp,0x18
c0018c23:	6a 08                	push   0x8
c0018c25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c2a:	50                   	push   eax
c0018c2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c30:	50                   	push   eax
c0018c31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c36:	50                   	push   eax
c0018c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c3b:	e8 a2 fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c40:	83 c4 2c             	add    esp,0x2c
c0018c43:	0f b6 c4             	movzx  eax,ah
c0018c46:	c3                   	ret    
c0018c47:	90                   	nop

c0018c48 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018c48:	83 ec 18             	sub    esp,0x18
c0018c4b:	6a 08                	push   0x8
c0018c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c52:	50                   	push   eax
c0018c53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c58:	50                   	push   eax
c0018c59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c5e:	50                   	push   eax
c0018c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c63:	e8 7a fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c68:	83 c4 2c             	add    esp,0x2c
c0018c6b:	c3                   	ret    

c0018c6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018c6c:	83 ec 18             	sub    esp,0x18
c0018c6f:	6a 3c                	push   0x3c
c0018c71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c76:	50                   	push   eax
c0018c77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c7c:	50                   	push   eax
c0018c7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c82:	50                   	push   eax
c0018c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c87:	e8 56 fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c8c:	83 c4 2c             	add    esp,0x2c
c0018c8f:	c3                   	ret    

c0018c90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018c90:	83 ec 18             	sub    esp,0x18
c0018c93:	6a 18                	push   0x18
c0018c95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018c9a:	50                   	push   eax
c0018c9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ca0:	50                   	push   eax
c0018ca1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ca6:	50                   	push   eax
c0018ca7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cab:	e8 32 fe ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018cb0:	83 c4 2c             	add    esp,0x2c
c0018cb3:	0f b6 c4             	movzx  eax,ah
c0018cb6:	c3                   	ret    
c0018cb7:	90                   	nop

c0018cb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018cb8:	55                   	push   ebp
c0018cb9:	57                   	push   edi
c0018cba:	56                   	push   esi
c0018cbb:	53                   	push   ebx
c0018cbc:	83 ec 28             	sub    esp,0x28
c0018cbf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018cc3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018cc8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018ccd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018cd2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018cd9:	8d 43 12             	lea    eax,[ebx+0x12]
c0018cdc:	83 c3 10             	add    ebx,0x10
c0018cdf:	0f b6 c0             	movzx  eax,al
c0018ce2:	0f b6 db             	movzx  ebx,bl
c0018ce5:	50                   	push   eax
c0018ce6:	51                   	push   ecx
c0018ce7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018ceb:	57                   	push   edi
c0018cec:	55                   	push   ebp
c0018ced:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018cf1:	e8 ec fd ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018cf6:	83 c4 14             	add    esp,0x14
c0018cf9:	89 c6                	mov    esi,eax
c0018cfb:	53                   	push   ebx
c0018cfc:	c1 e6 10             	shl    esi,0x10
c0018cff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018d03:	51                   	push   ecx
c0018d04:	57                   	push   edi
c0018d05:	55                   	push   ebp
c0018d06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018d0a:	e8 d3 fd ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d0f:	83 c4 3c             	add    esp,0x3c
c0018d12:	0f b7 c0             	movzx  eax,ax
c0018d15:	5b                   	pop    ebx
c0018d16:	09 f0                	or     eax,esi
c0018d18:	5e                   	pop    esi
c0018d19:	5f                   	pop    edi
c0018d1a:	5d                   	pop    ebp
c0018d1b:	c3                   	ret    

c0018d1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018d1c:	55                   	push   ebp
c0018d1d:	57                   	push   edi
c0018d1e:	56                   	push   esi
c0018d1f:	53                   	push   ebx
c0018d20:	83 ec 0c             	sub    esp,0xc
c0018d23:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018d27:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018d2b:	89 f5                	mov    ebp,esi
c0018d2d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018d33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018d43:	83 f9 01             	cmp    ecx,0x1
c0018d46:	75 5d                	jne    c0018da5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018d48:	0f b6 c8             	movzx  ecx,al
c0018d4b:	0f b6 d2             	movzx  edx,dl
c0018d4e:	c1 e1 10             	shl    ecx,0x10
c0018d51:	c1 e2 0b             	shl    edx,0xb
c0018d54:	89 f0                	mov    eax,esi
c0018d56:	25 fc 00 00 00       	and    eax,0xfc
c0018d5b:	09 c1                	or     ecx,eax
c0018d5d:	89 e8                	mov    eax,ebp
c0018d5f:	0f b6 c0             	movzx  eax,al
c0018d62:	c1 e0 08             	shl    eax,0x8
c0018d65:	09 c1                	or     ecx,eax
c0018d67:	09 d1                	or     ecx,edx
c0018d69:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018d6e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018d74:	89 c8                	mov    eax,ecx
c0018d76:	ef                   	out    dx,eax
c0018d77:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018d7c:	ed                   	in     eax,dx
c0018d7d:	0f b7 db             	movzx  ebx,bx
c0018d80:	83 e6 02             	and    esi,0x2
c0018d83:	74 0a                	je     c0018d8f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018d85:	0f b7 d0             	movzx  edx,ax
c0018d88:	c1 e3 10             	shl    ebx,0x10
c0018d8b:	09 d3                	or     ebx,edx
c0018d8d:	eb 05                	jmp    c0018d94 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018d8f:	66 31 c0             	xor    ax,ax
c0018d92:	09 c3                	or     ebx,eax
c0018d94:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018d99:	89 c8                	mov    eax,ecx
c0018d9b:	ef                   	out    dx,eax
c0018d9c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018da1:	89 d8                	mov    eax,ebx
c0018da3:	eb 41                	jmp    c0018de6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018da5:	83 f9 02             	cmp    ecx,0x2
c0018da8:	75 45                	jne    c0018def <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018daa:	83 ec 0c             	sub    esp,0xc
c0018dad:	0f b6 d2             	movzx  edx,dl
c0018db0:	89 f1                	mov    ecx,esi
c0018db2:	0f b6 c0             	movzx  eax,al
c0018db5:	0f b6 f1             	movzx  esi,cl
c0018db8:	89 e9                	mov    ecx,ebp
c0018dba:	56                   	push   esi
c0018dbb:	0f b6 c9             	movzx  ecx,cl
c0018dbe:	51                   	push   ecx
c0018dbf:	52                   	push   edx
c0018dc0:	50                   	push   eax
c0018dc1:	57                   	push   edi
c0018dc2:	e8 ad fc ff ff       	call   c0018a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dc7:	89 c2                	mov    edx,eax
c0018dc9:	ed                   	in     eax,dx
c0018dca:	83 c4 20             	add    esp,0x20
c0018dcd:	0f b7 db             	movzx  ebx,bx
c0018dd0:	f6 c2 02             	test   dl,0x2
c0018dd3:	74 0c                	je     c0018de1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018dd5:	0f b7 c8             	movzx  ecx,ax
c0018dd8:	89 d8                	mov    eax,ebx
c0018dda:	c1 e0 10             	shl    eax,0x10
c0018ddd:	09 c8                	or     eax,ecx
c0018ddf:	eb 05                	jmp    c0018de6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018de1:	66 31 c0             	xor    ax,ax
c0018de4:	09 d8                	or     eax,ebx
c0018de6:	ef                   	out    dx,eax
c0018de7:	83 c4 0c             	add    esp,0xc
c0018dea:	5b                   	pop    ebx
c0018deb:	5e                   	pop    esi
c0018dec:	5f                   	pop    edi
c0018ded:	5d                   	pop    ebp
c0018dee:	c3                   	ret    
c0018def:	c7 44 24 20 3b f7 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f73b
c0018df7:	83 c4 0c             	add    esp,0xc
c0018dfa:	5b                   	pop    ebx
c0018dfb:	5e                   	pop    esi
c0018dfc:	5f                   	pop    edi
c0018dfd:	5d                   	pop    ebp
c0018dfe:	e9 b2 66 ff ff       	jmp    c000f4b5 <Krnl::panic(char const*)>
c0018e03:	90                   	nop

c0018e04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018e04:	55                   	push   ebp
c0018e05:	57                   	push   edi
c0018e06:	56                   	push   esi
c0018e07:	53                   	push   ebx
c0018e08:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e0e:	80 3d 8c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002438c,0x0
c0018e15:	0f 85 84 00 00 00    	jne    c0018e9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018e1b:	83 ec 0c             	sub    esp,0xc
c0018e1e:	68 14 01 00 00       	push   0x114
c0018e23:	e8 2d dc fe ff       	call   c0006a55 <malloc>
c0018e28:	83 c4 0c             	add    esp,0xc
c0018e2b:	89 c3                	mov    ebx,eax
c0018e2d:	ff 35 70 39 02 c0    	push   DWORD PTR ds:0xc0023970
c0018e33:	68 41 f7 01 c0       	push   0xc001f741
c0018e38:	50                   	push   eax
c0018e39:	e8 0c 0f ff ff       	call   c0009d4a <File::File(char const*, Process*)>
c0018e3e:	5a                   	pop    edx
c0018e3f:	59                   	pop    ecx
c0018e40:	6a 01                	push   0x1
c0018e42:	53                   	push   ebx
c0018e43:	e8 bc 0f ff ff       	call   c0009e04 <File::open(FileOpenMode)>
c0018e48:	83 c4 0c             	add    esp,0xc
c0018e4b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018e4f:	50                   	push   eax
c0018e50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e54:	50                   	push   eax
c0018e55:	53                   	push   ebx
c0018e56:	e8 55 12 ff ff       	call   c000a0b0 <File::stat(unsigned long long*, bool*)>
c0018e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e5f:	40                   	inc    eax
c0018e60:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e63:	e8 ed db fe ff       	call   c0006a55 <malloc>
c0018e68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018e6c:	a3 88 43 02 c0       	mov    ds:0xc0024388,eax
c0018e71:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018e75:	5e                   	pop    esi
c0018e76:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018e78:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018e7c:	51                   	push   ecx
c0018e7d:	50                   	push   eax
c0018e7e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018e82:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018e86:	53                   	push   ebx
c0018e87:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018e8a:	83 c4 14             	add    esp,0x14
c0018e8d:	53                   	push   ebx
c0018e8e:	e8 cf 0f ff ff       	call   c0009e62 <File::close()>
c0018e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	a3 84 43 02 c0       	mov    ds:0xc0024384,eax
c0018e9f:	a1 84 43 02 c0       	mov    eax,ds:0xc0024384
c0018ea4:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c0018eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ead:	31 ff                	xor    edi,edi
c0018eaf:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018eb7:	31 f6                	xor    esi,esi
c0018eb9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018ebe:	31 db                	xor    ebx,ebx
c0018ec0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018ec8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ecd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ed4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ed8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018edf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ee3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ee6:	0f 8e 6b 01 00 00    	jle    c0019057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018eec:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018eef:	d4 40                	aam    0x40
c0018ef1:	d5 39                	aad    0x39
c0018ef3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ef7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018efb:	d4 40                	aam    0x40
c0018efd:	d5 39                	aad    0x39
c0018eff:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018f03:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018f07:	d4 40                	aam    0x40
c0018f09:	d5 39                	aad    0x39
c0018f0b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018f0f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018f13:	d4 40                	aam    0x40
c0018f15:	d5 39                	aad    0x39
c0018f17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018f1b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018f1f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018f23:	3c 56                	cmp    al,0x56
c0018f25:	74 45                	je     c0018f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018f27:	d4 40                	aam    0x40
c0018f29:	d5 39                	aad    0x39
c0018f2b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018f2e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018f32:	0f b6 c9             	movzx  ecx,cl
c0018f35:	c1 e1 04             	shl    ecx,0x4
c0018f38:	d4 40                	aam    0x40
c0018f3a:	d5 39                	aad    0x39
c0018f3c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018f3f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018f43:	0f b6 db             	movzx  ebx,bl
c0018f46:	09 cb                	or     ebx,ecx
c0018f48:	c1 e3 04             	shl    ebx,0x4
c0018f4b:	d4 40                	aam    0x40
c0018f4d:	d5 39                	aad    0x39
c0018f4f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018f52:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018f56:	0f b6 c9             	movzx  ecx,cl
c0018f59:	09 cb                	or     ebx,ecx
c0018f5b:	c1 e3 04             	shl    ebx,0x4
c0018f5e:	89 d9                	mov    ecx,ebx
c0018f60:	d4 40                	aam    0x40
c0018f62:	d5 39                	aad    0x39
c0018f64:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018f67:	0f b6 db             	movzx  ebx,bl
c0018f6a:	09 cb                	or     ebx,ecx
c0018f6c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018f70:	80 f9 44             	cmp    cl,0x44
c0018f73:	74 47                	je     c0018fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018f75:	88 c8                	mov    al,cl
c0018f77:	d4 40                	aam    0x40
c0018f79:	d5 39                	aad    0x39
c0018f7b:	83 e8 30             	sub    eax,0x30
c0018f7e:	0f b6 e8             	movzx  ebp,al
c0018f81:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018f85:	c1 e5 04             	shl    ebp,0x4
c0018f88:	d4 40                	aam    0x40
c0018f8a:	d5 39                	aad    0x39
c0018f8c:	83 e8 30             	sub    eax,0x30
c0018f8f:	0f b6 f0             	movzx  esi,al
c0018f92:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018f96:	09 ee                	or     esi,ebp
c0018f98:	c1 e6 04             	shl    esi,0x4
c0018f9b:	d4 40                	aam    0x40
c0018f9d:	d5 39                	aad    0x39
c0018f9f:	83 e8 30             	sub    eax,0x30
c0018fa2:	0f b6 e8             	movzx  ebp,al
c0018fa5:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018fa9:	09 ee                	or     esi,ebp
c0018fab:	c1 e6 04             	shl    esi,0x4
c0018fae:	89 f5                	mov    ebp,esi
c0018fb0:	d4 40                	aam    0x40
c0018fb2:	d5 39                	aad    0x39
c0018fb4:	83 e8 30             	sub    eax,0x30
c0018fb7:	0f b6 f0             	movzx  esi,al
c0018fba:	09 ee                	or     esi,ebp
c0018fbc:	83 c7 10             	add    edi,0x10
c0018fbf:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018fc3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018fc6:	3c 0a                	cmp    al,0xa
c0018fc8:	74 09                	je     c0018fd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018fca:	45                   	inc    ebp
c0018fcb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018fce:	75 16                	jne    c0018fe6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018fd0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018fd3:	3c 0a                	cmp    al,0xa
c0018fd5:	0f 94 c0             	sete   al
c0018fd8:	0f b6 c0             	movzx  eax,al
c0018fdb:	01 c7                	add    edi,eax
c0018fdd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018fe2:	75 0c                	jne    c0018ff0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018fe4:	eb 15                	jmp    c0018ffb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018fe6:	47                   	inc    edi
c0018fe7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018fea:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018fee:	eb d3                	jmp    c0018fc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018ff0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018ff5:	0f 85 e8 fe ff ff    	jne    c0018ee3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ffb:	80 f9 44             	cmp    cl,0x44
c0018ffe:	74 0b                	je     c001900b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0019000:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019005:	0f 85 d8 fe ff ff    	jne    c0018ee3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001900b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001900f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019013:	c1 e1 04             	shl    ecx,0x4
c0019016:	83 e8 30             	sub    eax,0x30
c0019019:	09 c8                	or     eax,ecx
c001901b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001901f:	0f 85 be fe ff ff    	jne    c0018ee3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019025:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019029:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001902d:	c1 e1 04             	shl    ecx,0x4
c0019030:	83 e8 30             	sub    eax,0x30
c0019033:	09 c8                	or     eax,ecx
c0019035:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019039:	0f 85 a4 fe ff ff    	jne    c0018ee3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001903f:	50                   	push   eax
c0019040:	50                   	push   eax
c0019041:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019045:	50                   	push   eax
c0019046:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001904d:	e8 12 75 fe ff       	call   c0000564 <strcpy>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	eb 15                	jmp    c001906c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0019057:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001905e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019069:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001906c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019073:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019079:	5b                   	pop    ebx
c001907a:	5e                   	pop    esi
c001907b:	5f                   	pop    edi
c001907c:	5d                   	pop    ebp
c001907d:	c3                   	ret    

c001907e <PCI::checkBus(unsigned char)>:
c001907e:	56                   	push   esi
c001907f:	53                   	push   ebx
c0019080:	31 db                	xor    ebx,ebx
c0019082:	51                   	push   ecx
c0019083:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0019088:	52                   	push   edx
c0019089:	53                   	push   ebx
c001908a:	43                   	inc    ebx
c001908b:	56                   	push   esi
c001908c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019090:	e8 f3 02 00 00       	call   c0019388 <PCI::checkDevice(unsigned char, unsigned char)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	83 fb 20             	cmp    ebx,0x20
c001909b:	75 eb                	jne    c0019088 <PCI::checkBus(unsigned char)+0xa>
c001909d:	58                   	pop    eax
c001909e:	5b                   	pop    ebx
c001909f:	5e                   	pop    esi
c00190a0:	c3                   	ret    
c00190a1:	90                   	nop

c00190a2 <PCI::foundDevice(PCIDeviceInfo)>:
c00190a2:	55                   	push   ebp
c00190a3:	57                   	push   edi
c00190a4:	56                   	push   esi
c00190a5:	53                   	push   ebx
c00190a6:	83 ec 1c             	sub    esp,0x1c
c00190a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00190ad:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00190b3:	0f 84 52 01 00 00    	je     c001920b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00190b9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00190bd:	66 81 f9 06 04       	cmp    cx,0x406
c00190c2:	75 2c                	jne    c00190f0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00190c4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00190c9:	50                   	push   eax
c00190ca:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00190cf:	50                   	push   eax
c00190d0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00190d5:	50                   	push   eax
c00190d6:	56                   	push   esi
c00190d7:	e8 b4 fb ff ff       	call   c0018c90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00190dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00190e0:	0f b6 c0             	movzx  eax,al
c00190e3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00190e7:	83 c4 2c             	add    esp,0x2c
c00190ea:	5b                   	pop    ebx
c00190eb:	5e                   	pop    esi
c00190ec:	5f                   	pop    edi
c00190ed:	5d                   	pop    ebp
c00190ee:	eb 8e                	jmp    c001907e <PCI::checkBus(unsigned char)>
c00190f0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00190f4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00190fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00190fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019102:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0019106:	88 d3                	mov    bl,dl
c0019108:	85 c0                	test   eax,eax
c001910a:	74 33                	je     c001913f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001910c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001910f:	85 d2                	test   edx,edx
c0019111:	74 28                	je     c001913b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019113:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019119:	31 ef                	xor    edi,ebp
c001911b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019121:	75 18                	jne    c001913b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019123:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019127:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001912d:	75 0c                	jne    c001913b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001912f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019135:	0f 84 d0 00 00 00    	je     c001920b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001913b:	8b 00                	mov    eax,DWORD PTR [eax]
c001913d:	eb c9                	jmp    c0019108 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001913f:	66 81 f9 01 06       	cmp    cx,0x601
c0019144:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019148:	75 19                	jne    c0019163 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001914a:	83 ec 0c             	sub    esp,0xc
c001914d:	68 64 01 00 00       	push   0x164
c0019152:	e8 fe d8 fe ff       	call   c0006a55 <malloc>
c0019157:	89 c5                	mov    ebp,eax
c0019159:	89 04 24             	mov    DWORD PTR [esp],eax
c001915c:	e8 37 0e 00 00       	call   c0019f98 <SATABus::SATABus()>
c0019161:	eb 1e                	jmp    c0019181 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019163:	66 81 f9 01 01       	cmp    cx,0x101
c0019168:	75 60                	jne    c00191ca <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001916a:	83 ec 0c             	sub    esp,0xc
c001916d:	68 70 02 00 00       	push   0x270
c0019172:	e8 de d8 fe ff       	call   c0006a55 <malloc>
c0019177:	89 c5                	mov    ebp,eax
c0019179:	89 04 24             	mov    DWORD PTR [esp],eax
c001917c:	e8 cb 02 00 00       	call   c001944c <IDE::IDE()>
c0019181:	58                   	pop    eax
c0019182:	5a                   	pop    edx
c0019183:	55                   	push   ebp
c0019184:	56                   	push   esi
c0019185:	e8 78 1a ff ff       	call   c000ac02 <Device::addChild(Device*)>
c001918a:	83 ec 1c             	sub    esp,0x1c
c001918d:	b9 09 00 00 00       	mov    ecx,0x9
c0019192:	fc                   	cld    
c0019193:	89 e7                	mov    edi,esp
c0019195:	89 de                	mov    esi,ebx
c0019197:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019199:	55                   	push   ebp
c001919a:	e8 a9 19 ff ff       	call   c000ab48 <Device::preOpenPCI(PCIDeviceInfo)>
c001919f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00191a2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00191a6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00191ae:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00191b6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00191be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00191c1:	83 c4 4c             	add    esp,0x4c
c00191c4:	5b                   	pop    ebx
c00191c5:	5e                   	pop    esi
c00191c6:	5f                   	pop    edi
c00191c7:	5d                   	pop    ebp
c00191c8:	ff e0                	jmp    eax
c00191ca:	83 ec 0c             	sub    esp,0xc
c00191cd:	68 58 01 00 00       	push   0x158
c00191d2:	e8 7e d8 fe ff       	call   c0006a55 <malloc>
c00191d7:	89 c5                	mov    ebp,eax
c00191d9:	58                   	pop    eax
c00191da:	5a                   	pop    edx
c00191db:	68 5a f7 01 c0       	push   0xc001f75a
c00191e0:	55                   	push   ebp
c00191e1:	e8 ba 1c ff ff       	call   c000aea0 <DriverlessDevice::DriverlessDevice(char const*)>
c00191e6:	59                   	pop    ecx
c00191e7:	5f                   	pop    edi
c00191e8:	55                   	push   ebp
c00191e9:	56                   	push   esi
c00191ea:	e8 13 1a ff ff       	call   c000ac02 <Device::addChild(Device*)>
c00191ef:	b9 09 00 00 00       	mov    ecx,0x9
c00191f4:	fc                   	cld    
c00191f5:	89 df                	mov    edi,ebx
c00191f7:	89 de                	mov    esi,ebx
c00191f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00191fb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00191ff:	83 c4 2c             	add    esp,0x2c
c0019202:	5b                   	pop    ebx
c0019203:	5e                   	pop    esi
c0019204:	5f                   	pop    edi
c0019205:	5d                   	pop    ebp
c0019206:	e9 3d 19 ff ff       	jmp    c000ab48 <Device::preOpenPCI(PCIDeviceInfo)>
c001920b:	83 c4 1c             	add    esp,0x1c
c001920e:	5b                   	pop    ebx
c001920f:	5e                   	pop    esi
c0019210:	5f                   	pop    edi
c0019211:	5d                   	pop    ebp
c0019212:	c3                   	ret    
c0019213:	90                   	nop

c0019214 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019214:	55                   	push   ebp
c0019215:	57                   	push   edi
c0019216:	56                   	push   esi
c0019217:	53                   	push   ebx
c0019218:	83 ec 68             	sub    esp,0x68
c001921b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001921f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019226:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001922a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019231:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0019236:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001923a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019241:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0019246:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001924a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001924f:	6a 0c                	push   0xc
c0019251:	57                   	push   edi
c0019252:	53                   	push   ebx
c0019253:	56                   	push   esi
c0019254:	55                   	push   ebp
c0019255:	e8 88 f8 ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001925a:	83 c4 20             	add    esp,0x20
c001925d:	57                   	push   edi
c001925e:	53                   	push   ebx
c001925f:	56                   	push   esi
c0019260:	55                   	push   ebp
c0019261:	e8 70 f9 ff ff       	call   c0018bd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0019266:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001926b:	57                   	push   edi
c001926c:	53                   	push   ebx
c001926d:	56                   	push   esi
c001926e:	55                   	push   ebp
c001926f:	e8 f8 f9 ff ff       	call   c0018c6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019274:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0019278:	83 c4 14             	add    esp,0x14
c001927b:	6a 3c                	push   0x3c
c001927d:	57                   	push   edi
c001927e:	53                   	push   ebx
c001927f:	56                   	push   esi
c0019280:	55                   	push   ebp
c0019281:	e8 5c f8 ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019286:	0f b6 c4             	movzx  eax,ah
c0019289:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001928d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019291:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019295:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001929a:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c00192a0:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00192a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00192aa:	83 c4 20             	add    esp,0x20
c00192ad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192b2:	74 30                	je     c00192e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00192b4:	31 c0                	xor    eax,eax
c00192b6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00192ba:	7e 28                	jle    c00192e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00192bc:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00192c4:	39 cb                	cmp    ebx,ecx
c00192c6:	75 19                	jne    c00192e1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00192c8:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00192d0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00192d4:	75 0b                	jne    c00192e1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00192d6:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00192dd:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00192e1:	40                   	inc    eax
c00192e2:	eb d2                	jmp    c00192b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00192e4:	31 d2                	xor    edx,edx
c00192e6:	83 ec 0c             	sub    esp,0xc
c00192e9:	57                   	push   edi
c00192ea:	53                   	push   ebx
c00192eb:	56                   	push   esi
c00192ec:	52                   	push   edx
c00192ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00192f1:	55                   	push   ebp
c00192f2:	e8 c1 f9 ff ff       	call   c0018cb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00192f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00192fb:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00192ff:	42                   	inc    edx
c0019300:	83 c4 20             	add    esp,0x20
c0019303:	83 fa 06             	cmp    edx,0x6
c0019306:	75 de                	jne    c00192e6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019308:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001930d:	83 ec 0c             	sub    esp,0xc
c0019310:	86 e0                	xchg   al,ah
c0019312:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0019317:	6a 02                	push   0x2
c0019319:	57                   	push   edi
c001931a:	53                   	push   ebx
c001931b:	56                   	push   esi
c001931c:	55                   	push   ebp
c001931d:	e8 c0 f7 ff ff       	call   c0018ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019322:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0019327:	83 c4 20             	add    esp,0x20
c001932a:	57                   	push   edi
c001932b:	53                   	push   ebx
c001932c:	56                   	push   esi
c001932d:	55                   	push   ebp
c001932e:	e8 ed f8 ff ff       	call   c0018c20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0019333:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019337:	57                   	push   edi
c0019338:	53                   	push   ebx
c0019339:	56                   	push   esi
c001933a:	55                   	push   ebp
c001933b:	e8 4a f8 ff ff       	call   c0018b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019340:	b9 09 00 00 00       	mov    ecx,0x9
c0019345:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001934a:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001934e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0019352:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019356:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001935a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001935e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0019362:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0019366:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001936a:	83 ec 0c             	sub    esp,0xc
c001936d:	fc                   	cld    
c001936e:	89 e7                	mov    edi,esp
c0019370:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019374:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019376:	55                   	push   ebp
c0019377:	e8 26 fd ff ff       	call   c00190a2 <PCI::foundDevice(PCIDeviceInfo)>
c001937c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019382:	5b                   	pop    ebx
c0019383:	5e                   	pop    esi
c0019384:	5f                   	pop    edi
c0019385:	5d                   	pop    ebp
c0019386:	c3                   	ret    
c0019387:	90                   	nop

c0019388 <PCI::checkDevice(unsigned char, unsigned char)>:
c0019388:	55                   	push   ebp
c0019389:	57                   	push   edi
c001938a:	56                   	push   esi
c001938b:	53                   	push   ebx
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019393:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019398:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001939d:	6a 00                	push   0x0
c001939f:	56                   	push   esi
c00193a0:	57                   	push   edi
c00193a1:	55                   	push   ebp
c00193a2:	e8 e3 f7 ff ff       	call   c0018b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00193a7:	6a 00                	push   0x0
c00193a9:	56                   	push   esi
c00193aa:	57                   	push   edi
c00193ab:	55                   	push   ebp
c00193ac:	e8 63 fe ff ff       	call   c0019214 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00193b1:	83 c4 20             	add    esp,0x20
c00193b4:	6a 00                	push   0x0
c00193b6:	56                   	push   esi
c00193b7:	57                   	push   edi
c00193b8:	55                   	push   ebp
c00193b9:	e8 f0 f7 ff ff       	call   c0018bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	84 c0                	test   al,al
c00193c3:	79 27                	jns    c00193ec <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00193c5:	bb 01 00 00 00       	mov    ebx,0x1
c00193ca:	53                   	push   ebx
c00193cb:	56                   	push   esi
c00193cc:	57                   	push   edi
c00193cd:	55                   	push   ebp
c00193ce:	e8 b7 f7 ff ff       	call   c0018b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	66 40                	inc    ax
c00193d8:	74 0c                	je     c00193e6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00193da:	53                   	push   ebx
c00193db:	56                   	push   esi
c00193dc:	57                   	push   edi
c00193dd:	55                   	push   ebp
c00193de:	e8 31 fe ff ff       	call   c0019214 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	43                   	inc    ebx
c00193e7:	83 fb 08             	cmp    ebx,0x8
c00193ea:	75 de                	jne    c00193ca <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00193ec:	83 c4 0c             	add    esp,0xc
c00193ef:	5b                   	pop    ebx
c00193f0:	5e                   	pop    esi
c00193f1:	5f                   	pop    edi
c00193f2:	5d                   	pop    ebp
c00193f3:	c3                   	ret    

c00193f4 <PCI::detect()>:
c00193f4:	56                   	push   esi
c00193f5:	53                   	push   ebx
c00193f6:	53                   	push   ebx
c00193f7:	31 db                	xor    ebx,ebx
c00193f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00193fd:	6a 00                	push   0x0
c00193ff:	6a 00                	push   0x0
c0019401:	6a 00                	push   0x0
c0019403:	56                   	push   esi
c0019404:	e8 a5 f7 ff ff       	call   c0018bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	a8 80                	test   al,0x80
c001940e:	75 21                	jne    c0019431 <PCI::detect()+0x3d>
c0019410:	51                   	push   ecx
c0019411:	51                   	push   ecx
c0019412:	6a 00                	push   0x0
c0019414:	56                   	push   esi
c0019415:	e8 64 fc ff ff       	call   c001907e <PCI::checkBus(unsigned char)>
c001941a:	83 c4 10             	add    esp,0x10
c001941d:	eb 24                	jmp    c0019443 <PCI::detect()+0x4f>
c001941f:	52                   	push   edx
c0019420:	52                   	push   edx
c0019421:	53                   	push   ebx
c0019422:	43                   	inc    ebx
c0019423:	56                   	push   esi
c0019424:	e8 55 fc ff ff       	call   c001907e <PCI::checkBus(unsigned char)>
c0019429:	83 c4 10             	add    esp,0x10
c001942c:	83 fb 08             	cmp    ebx,0x8
c001942f:	74 12                	je     c0019443 <PCI::detect()+0x4f>
c0019431:	53                   	push   ebx
c0019432:	6a 00                	push   0x0
c0019434:	6a 00                	push   0x0
c0019436:	56                   	push   esi
c0019437:	e8 4e f7 ff ff       	call   c0018b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001943c:	83 c4 10             	add    esp,0x10
c001943f:	66 40                	inc    ax
c0019441:	74 dc                	je     c001941f <PCI::detect()+0x2b>
c0019443:	58                   	pop    eax
c0019444:	5b                   	pop    ebx
c0019445:	5e                   	pop    esi
c0019446:	c3                   	ret    
c0019447:	90                   	nop

c0019448 <IDE::close(int, int, void*)>:
c0019448:	83 c8 ff             	or     eax,0xffffffff
c001944b:	c3                   	ret    

c001944c <IDE::IDE()>:
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019453:	83 ec 08             	sub    esp,0x8
c0019456:	68 a0 f7 01 c0       	push   0xc001f7a0
c001945b:	50                   	push   eax
c001945c:	e8 e3 1a ff ff       	call   c000af44 <HardDiskController::HardDiskController(char const*)>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	ba 30 f8 01 c0       	mov    edx,0xc001f830
c0019469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001946d:	89 10                	mov    DWORD PTR [eax],edx
c001946f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019473:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001947a:	90                   	nop
c001947b:	83 c4 0c             	add    esp,0xc
c001947e:	c3                   	ret    
c001947f:	90                   	nop

c0019480 <IDE::prepareInterrupt(unsigned char)>:
c0019480:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019485:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019489:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019491:	c3                   	ret    

c0019492 <selectDrive(unsigned char, unsigned char)>:
c0019492:	c3                   	ret    
c0019493:	90                   	nop

c0019494 <IDE::getBase(unsigned char)>:
c0019494:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001949d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00194a5:	c3                   	ret    

c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00194a6:	55                   	push   ebp
c00194a7:	57                   	push   edi
c00194a8:	56                   	push   esi
c00194a9:	53                   	push   ebx
c00194aa:	83 ec 1c             	sub    esp,0x1c
c00194ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00194b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00194b5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00194b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00194bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194c0:	80 f9 03             	cmp    cl,0x3
c00194c3:	77 51                	ja     c0019516 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00194c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194c9:	0f b6 f2             	movzx  esi,dl
c00194cc:	0f b6 db             	movzx  ebx,bl
c00194cf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00194d2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00194d6:	83 ca 80             	or     edx,0xffffff80
c00194d9:	0f b6 d2             	movzx  edx,dl
c00194dc:	52                   	push   edx
c00194dd:	6a 0c                	push   0xc
c00194df:	56                   	push   esi
c00194e0:	57                   	push   edi
c00194e1:	e8 c0 ff ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194e6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00194eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194ef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00194f3:	ee                   	out    dx,al
c00194f4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00194f9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00194fd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019501:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019505:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001950d:	83 c4 2c             	add    esp,0x2c
c0019510:	5b                   	pop    ebx
c0019511:	5e                   	pop    esi
c0019512:	5f                   	pop    edi
c0019513:	5d                   	pop    ebp
c0019514:	eb 90                	jmp    c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019516:	80 fb 07             	cmp    bl,0x7
c0019519:	77 12                	ja     c001952d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001951b:	0f b6 d2             	movzx  edx,dl
c001951e:	0f b6 db             	movzx  ebx,bl
c0019521:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019529:	89 da                	mov    edx,ebx
c001952b:	eb 2f                	jmp    c001955c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001952d:	80 fb 0d             	cmp    bl,0xd
c0019530:	77 13                	ja     c0019545 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019532:	0f b6 d2             	movzx  edx,dl
c0019535:	0f b6 db             	movzx  ebx,bl
c0019538:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001953f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019543:	eb 17                	jmp    c001955c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019545:	80 fb 15             	cmp    bl,0x15
c0019548:	77 13                	ja     c001955d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001954a:	0f b6 d2             	movzx  edx,dl
c001954d:	0f b6 db             	movzx  ebx,bl
c0019550:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019558:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001955c:	ee                   	out    dx,al
c001955d:	83 c4 1c             	add    esp,0x1c
c0019560:	5b                   	pop    ebx
c0019561:	5e                   	pop    esi
c0019562:	5f                   	pop    edi
c0019563:	5d                   	pop    ebp
c0019564:	c3                   	ret    
c0019565:	90                   	nop

c0019566 <IDE::read(unsigned char, unsigned char)>:
c0019566:	55                   	push   ebp
c0019567:	57                   	push   edi
c0019568:	56                   	push   esi
c0019569:	53                   	push   ebx
c001956a:	83 ec 1c             	sub    esp,0x1c
c001956d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019571:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019575:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019578:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001957c:	3c 03                	cmp    al,0x3
c001957e:	77 43                	ja     c00195c3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019580:	0f b6 f2             	movzx  esi,dl
c0019583:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019586:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001958a:	83 c8 80             	or     eax,0xffffff80
c001958d:	0f b6 c0             	movzx  eax,al
c0019590:	50                   	push   eax
c0019591:	6a 0c                	push   0xc
c0019593:	56                   	push   esi
c0019594:	57                   	push   edi
c0019595:	e8 0c ff ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001959a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001959f:	0f b6 c3             	movzx  eax,bl
c00195a2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00195a6:	ec                   	in     al,dx
c00195a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00195ab:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00195b0:	52                   	push   edx
c00195b1:	6a 0c                	push   0xc
c00195b3:	56                   	push   esi
c00195b4:	57                   	push   edi
c00195b5:	e8 ec fe ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195ba:	83 c4 20             	add    esp,0x20
c00195bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00195c1:	eb 49                	jmp    c001960c <IDE::read(unsigned char, unsigned char)+0xa6>
c00195c3:	80 fb 07             	cmp    bl,0x7
c00195c6:	77 12                	ja     c00195da <IDE::read(unsigned char, unsigned char)+0x74>
c00195c8:	0f b6 d2             	movzx  edx,dl
c00195cb:	0f b6 c3             	movzx  eax,bl
c00195ce:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00195d6:	89 c2                	mov    edx,eax
c00195d8:	eb 31                	jmp    c001960b <IDE::read(unsigned char, unsigned char)+0xa5>
c00195da:	80 fb 0d             	cmp    bl,0xd
c00195dd:	77 13                	ja     c00195f2 <IDE::read(unsigned char, unsigned char)+0x8c>
c00195df:	0f b6 d2             	movzx  edx,dl
c00195e2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00195e9:	0f b6 d3             	movzx  edx,bl
c00195ec:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00195f0:	eb 19                	jmp    c001960b <IDE::read(unsigned char, unsigned char)+0xa5>
c00195f2:	31 c0                	xor    eax,eax
c00195f4:	80 fb 15             	cmp    bl,0x15
c00195f7:	77 13                	ja     c001960c <IDE::read(unsigned char, unsigned char)+0xa6>
c00195f9:	0f b6 d2             	movzx  edx,dl
c00195fc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019604:	0f b6 d3             	movzx  edx,bl
c0019607:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001960b:	ec                   	in     al,dx
c001960c:	83 c4 1c             	add    esp,0x1c
c001960f:	5b                   	pop    ebx
c0019610:	5e                   	pop    esi
c0019611:	5f                   	pop    edi
c0019612:	5d                   	pop    ebp
c0019613:	c3                   	ret    

c0019614 <IDE::waitInterrupt(unsigned char)>:
c0019614:	55                   	push   ebp
c0019615:	57                   	push   edi
c0019616:	56                   	push   esi
c0019617:	53                   	push   ebx
c0019618:	31 db                	xor    ebx,ebx
c001961a:	83 ec 0c             	sub    esp,0xc
c001961d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019621:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0019626:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001962e:	89 e8                	mov    eax,ebp
c0019630:	84 c0                	test   al,al
c0019632:	75 30                	jne    c0019664 <IDE::waitInterrupt(unsigned char)+0x50>
c0019634:	50                   	push   eax
c0019635:	6a 0c                	push   0xc
c0019637:	56                   	push   esi
c0019638:	57                   	push   edi
c0019639:	e8 28 ff ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001963e:	83 c4 10             	add    esp,0x10
c0019641:	a8 01                	test   al,0x1
c0019643:	75 27                	jne    c001966c <IDE::waitInterrupt(unsigned char)+0x58>
c0019645:	f6 c3 04             	test   bl,0x4
c0019648:	75 12                	jne    c001965c <IDE::waitInterrupt(unsigned char)+0x48>
c001964a:	83 fb 32             	cmp    ebx,0x32
c001964d:	7e 0d                	jle    c001965c <IDE::waitInterrupt(unsigned char)+0x48>
c001964f:	83 ec 0c             	sub    esp,0xc
c0019652:	6a 64                	push   0x64
c0019654:	e8 d7 95 ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	83 fb 3c             	cmp    ebx,0x3c
c001965f:	74 0b                	je     c001966c <IDE::waitInterrupt(unsigned char)+0x58>
c0019661:	43                   	inc    ebx
c0019662:	eb c2                	jmp    c0019626 <IDE::waitInterrupt(unsigned char)+0x12>
c0019664:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001966c:	83 c4 0c             	add    esp,0xc
c001966f:	89 e8                	mov    eax,ebp
c0019671:	5b                   	pop    ebx
c0019672:	5e                   	pop    esi
c0019673:	5f                   	pop    edi
c0019674:	5d                   	pop    ebp
c0019675:	c3                   	ret    

c0019676 <ideChannel0IRQHandler(regs*, void*)>:
c0019676:	83 ec 10             	sub    esp,0x10
c0019679:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001967d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019684:	6a 07                	push   0x7
c0019686:	6a 00                	push   0x0
c0019688:	50                   	push   eax
c0019689:	e8 d8 fe ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001968e:	83 c4 1c             	add    esp,0x1c
c0019691:	c3                   	ret    

c0019692 <ideChannel1IRQHandler(regs*, void*)>:
c0019692:	83 ec 10             	sub    esp,0x10
c0019695:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019699:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00196a0:	6a 07                	push   0x7
c00196a2:	6a 01                	push   0x1
c00196a4:	50                   	push   eax
c00196a5:	e8 bc fe ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c00196aa:	83 c4 1c             	add    esp,0x1c
c00196ad:	c3                   	ret    

c00196ae <IDE::enableIRQs(unsigned char, bool)>:
c00196ae:	57                   	push   edi
c00196af:	56                   	push   esi
c00196b0:	be 04 00 00 00       	mov    esi,0x4
c00196b5:	53                   	push   ebx
c00196b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00196bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196bf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00196c4:	0f 94 c0             	sete   al
c00196c7:	d1 e0                	shl    eax,1
c00196c9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00196d0:	0f b6 c0             	movzx  eax,al
c00196d3:	50                   	push   eax
c00196d4:	6a 0c                	push   0xc
c00196d6:	57                   	push   edi
c00196d7:	53                   	push   ebx
c00196d8:	e8 c9 fd ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	50                   	push   eax
c00196e1:	6a 0c                	push   0xc
c00196e3:	57                   	push   edi
c00196e4:	53                   	push   ebx
c00196e5:	e8 7c fe ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c00196ea:	83 c4 10             	add    esp,0x10
c00196ed:	4e                   	dec    esi
c00196ee:	75 f0                	jne    c00196e0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00196f0:	5b                   	pop    ebx
c00196f1:	5e                   	pop    esi
c00196f2:	5f                   	pop    edi
c00196f3:	c3                   	ret    

c00196f4 <IDE::open(int, int, void*)>:
c00196f4:	55                   	push   ebp
c00196f5:	57                   	push   edi
c00196f6:	56                   	push   esi
c00196f7:	53                   	push   ebx
c00196f8:	83 ec 1c             	sub    esp,0x1c
c00196fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196ff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019708:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019711:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019718:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001971f:	0f 85 b0 02 00 00    	jne    c00199d5 <IDE::open(int, int, void*)+0x2e1>
c0019725:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001972b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001972f:	83 e0 7f             	and    eax,0x7f
c0019732:	3c 05                	cmp    al,0x5
c0019734:	74 04                	je     c001973a <IDE::open(int, int, void*)+0x46>
c0019736:	3c 0f                	cmp    al,0xf
c0019738:	75 32                	jne    c001976c <IDE::open(int, int, void*)+0x78>
c001973a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019740:	83 e0 fc             	and    eax,0xfffffffc
c0019743:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001974a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019750:	83 e0 fc             	and    eax,0xfffffffc
c0019753:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001975a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019760:	83 e0 fc             	and    eax,0xfffffffc
c0019763:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001976a:	eb 14                	jmp    c0019780 <IDE::open(int, int, void*)+0x8c>
c001976c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019776:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019780:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019787:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001978e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019792:	89 c6                	mov    esi,eax
c0019794:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019799:	c1 e6 10             	shl    esi,0x10
c001979c:	89 e8                	mov    eax,ebp
c001979e:	89 fa                	mov    edx,edi
c00197a0:	c1 e0 0b             	shl    eax,0xb
c00197a3:	09 f0                	or     eax,esi
c00197a5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00197ac:	c1 e6 08             	shl    esi,0x8
c00197af:	09 c6                	or     esi,eax
c00197b1:	89 f0                	mov    eax,esi
c00197b3:	0d 08 00 00 80       	or     eax,0x80000008
c00197b8:	ef                   	out    dx,eax
c00197b9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00197be:	89 ca                	mov    edx,ecx
c00197c0:	ed                   	in     eax,dx
c00197c1:	c1 e8 10             	shr    eax,0x10
c00197c4:	3d ff ff 00 00       	cmp    eax,0xffff
c00197c9:	0f 84 f5 00 00 00    	je     c00198c4 <IDE::open(int, int, void*)+0x1d0>
c00197cf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00197d5:	89 fa                	mov    edx,edi
c00197d7:	89 f0                	mov    eax,esi
c00197d9:	ef                   	out    dx,eax
c00197da:	b0 fe                	mov    al,0xfe
c00197dc:	89 ca                	mov    edx,ecx
c00197de:	ee                   	out    dx,al
c00197df:	89 f0                	mov    eax,esi
c00197e1:	89 fa                	mov    edx,edi
c00197e3:	ef                   	out    dx,eax
c00197e4:	89 ca                	mov    edx,ecx
c00197e6:	ed                   	in     eax,dx
c00197e7:	3c fe                	cmp    al,0xfe
c00197e9:	0f 85 a9 00 00 00    	jne    c0019898 <IDE::open(int, int, void*)+0x1a4>
c00197ef:	8b 15 68 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020468
c00197f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00197fc:	74 33                	je     c0019831 <IDE::open(int, int, void*)+0x13d>
c00197fe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019804:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019808:	40                   	inc    eax
c0019809:	83 ec 0c             	sub    esp,0xc
c001980c:	0f b6 c0             	movzx  eax,al
c001980f:	50                   	push   eax
c0019810:	55                   	push   ebp
c0019811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019815:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001981b:	51                   	push   ecx
c001981c:	e8 0b 41 ff ff       	call   c000d92c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019821:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019826:	83 c4 1c             	add    esp,0x1c
c0019829:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001982f:	eb 0a                	jmp    c001983b <IDE::open(int, int, void*)+0x147>
c0019831:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001983b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019842:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019849:	c1 e1 10             	shl    ecx,0x10
c001984c:	c1 e0 08             	shl    eax,0x8
c001984f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019854:	09 c1                	or     ecx,eax
c0019856:	89 fa                	mov    edx,edi
c0019858:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001985f:	c1 e0 0b             	shl    eax,0xb
c0019862:	09 c1                	or     ecx,eax
c0019864:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001986a:	89 c8                	mov    eax,ecx
c001986c:	ef                   	out    dx,eax
c001986d:	be fc 0c 00 00       	mov    esi,0xcfc
c0019872:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019878:	89 f2                	mov    edx,esi
c001987a:	ee                   	out    dx,al
c001987b:	89 c8                	mov    eax,ecx
c001987d:	89 fa                	mov    edx,edi
c001987f:	ef                   	out    dx,eax
c0019880:	89 f2                	mov    edx,esi
c0019882:	ed                   	in     eax,dx
c0019883:	0f b6 c0             	movzx  eax,al
c0019886:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001988c:	74 46                	je     c00198d4 <IDE::open(int, int, void*)+0x1e0>
c001988e:	83 ec 0c             	sub    esp,0xc
c0019891:	68 b8 f7 01 c0       	push   0xc001f7b8
c0019896:	eb 34                	jmp    c00198cc <IDE::open(int, int, void*)+0x1d8>
c0019898:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00198a1:	75 17                	jne    c00198ba <IDE::open(int, int, void*)+0x1c6>
c00198a3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00198a8:	74 07                	je     c00198b1 <IDE::open(int, int, void*)+0x1bd>
c00198aa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00198af:	75 09                	jne    c00198ba <IDE::open(int, int, void*)+0x1c6>
c00198b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00198b8:	eb 1a                	jmp    c00198d4 <IDE::open(int, int, void*)+0x1e0>
c00198ba:	83 ec 0c             	sub    esp,0xc
c00198bd:	68 c0 f7 01 c0       	push   0xc001f7c0
c00198c2:	eb 08                	jmp    c00198cc <IDE::open(int, int, void*)+0x1d8>
c00198c4:	83 ec 0c             	sub    esp,0xc
c00198c7:	68 f1 f7 01 c0       	push   0xc001f7f1
c00198cc:	e8 e4 5b ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00198db:	79 1a                	jns    c00198f7 <IDE::open(int, int, void*)+0x203>
c00198dd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00198e3:	83 e0 fc             	and    eax,0xfffffffc
c00198e6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00198ed:	83 c0 08             	add    eax,0x8
c00198f0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00198f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198fd:	89 c2                	mov    edx,eax
c00198ff:	83 e2 0f             	and    edx,0xf
c0019902:	66 83 fa 08          	cmp    dx,0x8
c0019906:	75 0a                	jne    c0019912 <IDE::open(int, int, void*)+0x21e>
c0019908:	83 e8 02             	sub    eax,0x2
c001990b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019912:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019918:	89 c2                	mov    edx,eax
c001991a:	83 e2 0f             	and    edx,0xf
c001991d:	66 83 fa 08          	cmp    dx,0x8
c0019921:	75 0a                	jne    c001992d <IDE::open(int, int, void*)+0x239>
c0019923:	83 e8 02             	sub    eax,0x2
c0019926:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001992d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019934:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001993b:	89 d0                	mov    eax,edx
c001993d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019940:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019944:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019948:	8d 4a 01             	lea    ecx,[edx+0x1]
c001994b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019950:	0f b6 c9             	movzx  ecx,cl
c0019953:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001995a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001995d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019961:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019965:	8d 50 02             	lea    edx,[eax+0x2]
c0019968:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001996d:	0f b6 d2             	movzx  edx,dl
c0019970:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019976:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019979:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001997d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019981:	8d 48 03             	lea    ecx,[eax+0x3]
c0019984:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019989:	0f b6 c9             	movzx  ecx,cl
c001998c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019992:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019995:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019999:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001999d:	8d 50 04             	lea    edx,[eax+0x4]
c00199a0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00199a6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00199ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00199b2:	66 85 f6             	test   si,si
c00199b5:	74 5b                	je     c0019a12 <IDE::open(int, int, void*)+0x31e>
c00199b7:	0f b6 d2             	movzx  edx,dl
c00199ba:	83 c0 05             	add    eax,0x5
c00199bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00199c4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00199c8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199ce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199d3:	eb 3d                	jmp    c0019a12 <IDE::open(int, int, void*)+0x31e>
c00199d5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00199db:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00199e2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00199e9:	66 05 06 02          	add    ax,0x206
c00199ed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00199f4:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00199fb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019a02:	66 05 06 02          	add    ax,0x206
c0019a06:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019a0d:	e9 e5 fe ff ff       	jmp    c00198f7 <IDE::open(int, int, void*)+0x203>
c0019a12:	50                   	push   eax
c0019a13:	50                   	push   eax
c0019a14:	6a 00                	push   0x0
c0019a16:	53                   	push   ebx
c0019a17:	e8 64 fa ff ff       	call   c0019480 <IDE::prepareInterrupt(unsigned char)>
c0019a1c:	5a                   	pop    edx
c0019a1d:	59                   	pop    ecx
c0019a1e:	6a 01                	push   0x1
c0019a20:	53                   	push   ebx
c0019a21:	e8 5a fa ff ff       	call   c0019480 <IDE::prepareInterrupt(unsigned char)>
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	6a 00                	push   0x0
c0019a2b:	6a 00                	push   0x0
c0019a2d:	53                   	push   ebx
c0019a2e:	e8 7b fc ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c0019a33:	83 c4 0c             	add    esp,0xc
c0019a36:	6a 00                	push   0x0
c0019a38:	6a 01                	push   0x1
c0019a3a:	53                   	push   ebx
c0019a3b:	e8 6e fc ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c0019a40:	83 c4 10             	add    esp,0x10
c0019a43:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019a4a:	74 34                	je     c0019a80 <IDE::open(int, int, void*)+0x38c>
c0019a4c:	83 ec 0c             	sub    esp,0xc
c0019a4f:	53                   	push   ebx
c0019a50:	6a 01                	push   0x1
c0019a52:	68 76 96 01 c0       	push   0xc0019676
c0019a57:	6a 0e                	push   0xe
c0019a59:	53                   	push   ebx
c0019a5a:	e8 4f 11 ff ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019a5f:	83 c4 14             	add    esp,0x14
c0019a62:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019a68:	53                   	push   ebx
c0019a69:	6a 01                	push   0x1
c0019a6b:	68 92 96 01 c0       	push   0xc0019692
c0019a70:	6a 0f                	push   0xf
c0019a72:	53                   	push   ebx
c0019a73:	e8 36 11 ff ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019a78:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019a7e:	eb 38                	jmp    c0019ab8 <IDE::open(int, int, void*)+0x3c4>
c0019a80:	83 ec 0c             	sub    esp,0xc
c0019a83:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019a8d:	53                   	push   ebx
c0019a8e:	6a 00                	push   0x0
c0019a90:	68 76 96 01 c0       	push   0xc0019676
c0019a95:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019a9b:	53                   	push   ebx
c0019a9c:	e8 0d 11 ff ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019aa1:	83 c4 14             	add    esp,0x14
c0019aa4:	53                   	push   ebx
c0019aa5:	6a 00                	push   0x0
c0019aa7:	68 92 96 01 c0       	push   0xc0019692
c0019aac:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019ab2:	53                   	push   ebx
c0019ab3:	e8 f6 10 ff ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aba:	83 c4 20             	add    esp,0x20
c0019abd:	83 ec 0c             	sub    esp,0xc
c0019ac0:	53                   	push   ebx
c0019ac1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019ac4:	83 c4 0c             	add    esp,0xc
c0019ac7:	6a 07                	push   0x7
c0019ac9:	6a 00                	push   0x0
c0019acb:	53                   	push   ebx
c0019acc:	e8 95 fa ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019ad1:	83 c4 0c             	add    esp,0xc
c0019ad4:	6a 07                	push   0x7
c0019ad6:	6a 01                	push   0x1
c0019ad8:	53                   	push   ebx
c0019ad9:	e8 88 fa ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019ade:	83 c4 0c             	add    esp,0xc
c0019ae1:	6a 01                	push   0x1
c0019ae3:	6a 00                	push   0x0
c0019ae5:	53                   	push   ebx
c0019ae6:	e8 c3 fb ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c0019aeb:	83 c4 0c             	add    esp,0xc
c0019aee:	6a 01                	push   0x1
c0019af0:	6a 01                	push   0x1
c0019af2:	53                   	push   ebx
c0019af3:	e8 b6 fb ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c0019af8:	83 c4 2c             	add    esp,0x2c
c0019afb:	31 c0                	xor    eax,eax
c0019afd:	5b                   	pop    ebx
c0019afe:	5e                   	pop    esi
c0019aff:	5f                   	pop    edi
c0019b00:	5d                   	pop    ebp
c0019b01:	c3                   	ret    

c0019b02 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019b02:	55                   	push   ebp
c0019b03:	57                   	push   edi
c0019b04:	56                   	push   esi
c0019b05:	53                   	push   ebx
c0019b06:	83 ec 1c             	sub    esp,0x1c
c0019b09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019b11:	8d 50 f8             	lea    edx,[eax-0x8]
c0019b14:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019b18:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019b1c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019b20:	80 fa 03             	cmp    dl,0x3
c0019b23:	77 5d                	ja     c0019b82 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019b25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019b29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b2d:	0f b6 db             	movzx  ebx,bl
c0019b30:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019b33:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019b37:	83 ca 80             	or     edx,0xffffff80
c0019b3a:	0f b6 d2             	movzx  edx,dl
c0019b3d:	52                   	push   edx
c0019b3e:	6a 0c                	push   0xc
c0019b40:	53                   	push   ebx
c0019b41:	56                   	push   esi
c0019b42:	e8 5f f9 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b47:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019b4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b50:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b54:	0f b6 c0             	movzx  eax,al
c0019b57:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019b5b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019b5d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019b62:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019b66:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019b6a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019b6e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019b76:	83 c4 2c             	add    esp,0x2c
c0019b79:	5b                   	pop    ebx
c0019b7a:	5e                   	pop    esi
c0019b7b:	5f                   	pop    edi
c0019b7c:	5d                   	pop    ebp
c0019b7d:	e9 24 f9 ff ff       	jmp    c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b82:	3c 07                	cmp    al,0x7
c0019b84:	77 10                	ja     c0019b96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019b86:	0f b6 db             	movzx  ebx,bl
c0019b89:	0f b6 d0             	movzx  edx,al
c0019b8c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019b94:	eb 2d                	jmp    c0019bc3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019b96:	3c 0d                	cmp    al,0xd
c0019b98:	77 13                	ja     c0019bad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019b9a:	0f b6 db             	movzx  ebx,bl
c0019b9d:	0f b6 c0             	movzx  eax,al
c0019ba0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019ba7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019bab:	eb 16                	jmp    c0019bc3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019bad:	3c 15                	cmp    al,0x15
c0019baf:	77 14                	ja     c0019bc5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019bb1:	0f b6 db             	movzx  ebx,bl
c0019bb4:	0f b6 c0             	movzx  eax,al
c0019bb7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019bbf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019bc3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019bc5:	83 c4 1c             	add    esp,0x1c
c0019bc8:	5b                   	pop    ebx
c0019bc9:	5e                   	pop    esi
c0019bca:	5f                   	pop    edi
c0019bcb:	5d                   	pop    ebp
c0019bcc:	c3                   	ret    
c0019bcd:	90                   	nop

c0019bce <IDE::detect()>:
c0019bce:	55                   	push   ebp
c0019bcf:	57                   	push   edi
c0019bd0:	56                   	push   esi
c0019bd1:	53                   	push   ebx
c0019bd2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019bd8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019bdf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019be6:	0f 85 97 02 00 00    	jne    c0019e83 <IDE::detect()+0x2b5>
c0019bec:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019bf3:	31 f6                	xor    esi,esi
c0019bf5:	31 ed                	xor    ebp,ebp
c0019bf7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019bff:	89 e8                	mov    eax,ebp
c0019c01:	c1 e0 06             	shl    eax,0x6
c0019c04:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019c0c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019c10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c14:	c1 e0 04             	shl    eax,0x4
c0019c17:	83 c8 a0             	or     eax,0xffffffa0
c0019c1a:	0f b6 c0             	movzx  eax,al
c0019c1d:	50                   	push   eax
c0019c1e:	6a 06                	push   0x6
c0019c20:	56                   	push   esi
c0019c21:	53                   	push   ebx
c0019c22:	e8 7f f8 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c27:	83 c4 0c             	add    esp,0xc
c0019c2a:	6a 0c                	push   0xc
c0019c2c:	56                   	push   esi
c0019c2d:	53                   	push   ebx
c0019c2e:	e8 33 f9 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c33:	83 c4 0c             	add    esp,0xc
c0019c36:	6a 0c                	push   0xc
c0019c38:	56                   	push   esi
c0019c39:	53                   	push   ebx
c0019c3a:	e8 27 f9 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c3f:	83 c4 0c             	add    esp,0xc
c0019c42:	6a 0c                	push   0xc
c0019c44:	56                   	push   esi
c0019c45:	53                   	push   ebx
c0019c46:	e8 1b f9 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c4b:	83 c4 0c             	add    esp,0xc
c0019c4e:	6a 0c                	push   0xc
c0019c50:	56                   	push   esi
c0019c51:	53                   	push   ebx
c0019c52:	e8 0f f9 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c57:	68 ec 00 00 00       	push   0xec
c0019c5c:	6a 07                	push   0x7
c0019c5e:	56                   	push   esi
c0019c5f:	53                   	push   ebx
c0019c60:	e8 41 f8 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c65:	83 c4 1c             	add    esp,0x1c
c0019c68:	6a 0c                	push   0xc
c0019c6a:	56                   	push   esi
c0019c6b:	53                   	push   ebx
c0019c6c:	e8 f5 f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c71:	83 c4 0c             	add    esp,0xc
c0019c74:	6a 0c                	push   0xc
c0019c76:	56                   	push   esi
c0019c77:	53                   	push   ebx
c0019c78:	e8 e9 f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c7d:	83 c4 0c             	add    esp,0xc
c0019c80:	6a 0c                	push   0xc
c0019c82:	56                   	push   esi
c0019c83:	53                   	push   ebx
c0019c84:	e8 dd f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c89:	83 c4 0c             	add    esp,0xc
c0019c8c:	6a 0c                	push   0xc
c0019c8e:	56                   	push   esi
c0019c8f:	53                   	push   ebx
c0019c90:	e8 d1 f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019c95:	83 c4 0c             	add    esp,0xc
c0019c98:	6a 0c                	push   0xc
c0019c9a:	56                   	push   esi
c0019c9b:	53                   	push   ebx
c0019c9c:	e8 c5 f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	84 c0                	test   al,al
c0019ca6:	0f 84 5f 01 00 00    	je     c0019e0b <IDE::detect()+0x23d>
c0019cac:	31 ff                	xor    edi,edi
c0019cae:	50                   	push   eax
c0019caf:	6a 0c                	push   0xc
c0019cb1:	56                   	push   esi
c0019cb2:	53                   	push   ebx
c0019cb3:	e8 ae f8 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	a8 01                	test   al,0x1
c0019cbd:	0f 85 69 01 00 00    	jne    c0019e2c <IDE::detect()+0x25e>
c0019cc3:	84 c0                	test   al,al
c0019cc5:	78 04                	js     c0019ccb <IDE::detect()+0xfd>
c0019cc7:	a8 08                	test   al,0x8
c0019cc9:	75 23                	jne    c0019cee <IDE::detect()+0x120>
c0019ccb:	47                   	inc    edi
c0019ccc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019cd2:	7e da                	jle    c0019cae <IDE::detect()+0xe0>
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	6a 32                	push   0x32
c0019cd9:	e8 52 8f ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c0019cde:	83 c4 10             	add    esp,0x10
c0019ce1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019ce7:	75 c5                	jne    c0019cae <IDE::detect()+0xe0>
c0019ce9:	e9 3e 01 00 00       	jmp    c0019e2c <IDE::detect()+0x25e>
c0019cee:	31 c9                	xor    ecx,ecx
c0019cf0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019cf4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019cf8:	83 ec 0c             	sub    esp,0xc
c0019cfb:	68 80 00 00 00       	push   0x80
c0019d00:	57                   	push   edi
c0019d01:	6a 00                	push   0x0
c0019d03:	56                   	push   esi
c0019d04:	53                   	push   ebx
c0019d05:	e8 f8 fd ff ff       	call   c0019b02 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019d0a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019d0f:	89 e8                	mov    eax,ebp
c0019d11:	89 d1                	mov    ecx,edx
c0019d13:	c1 e0 06             	shl    eax,0x6
c0019d16:	01 d8                	add    eax,ebx
c0019d18:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019d1f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019d26:	89 f2                	mov    edx,esi
c0019d28:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019d2e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019d32:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019d38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019d3c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019d43:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019d4b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019d52:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019d5a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019d60:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019d67:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019d6d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019d71:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019d75:	83 c4 20             	add    esp,0x20
c0019d78:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019d7b:	83 c0 02             	add    eax,0x2
c0019d7e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019d84:	83 c7 02             	add    edi,0x2
c0019d87:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019d8a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019d90:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019d94:	75 e2                	jne    c0019d78 <IDE::detect()+0x1aa>
c0019d96:	89 e8                	mov    eax,ebp
c0019d98:	c1 e0 06             	shl    eax,0x6
c0019d9b:	01 d8                	add    eax,ebx
c0019d9d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019da3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019daa:	66 c1 ea 09          	shr    dx,0x9
c0019dae:	83 e2 01             	and    edx,0x1
c0019db1:	84 c9                	test   cl,cl
c0019db3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019db9:	75 22                	jne    c0019ddd <IDE::detect()+0x20f>
c0019dbb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019dc2:	74 46                	je     c0019e0a <IDE::detect()+0x23c>
c0019dc4:	83 ec 0c             	sub    esp,0xc
c0019dc7:	68 7c 01 00 00       	push   0x17c
c0019dcc:	e8 84 cc fe ff       	call   c0006a55 <malloc>
c0019dd1:	89 c7                	mov    edi,eax
c0019dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd6:	e8 fd 04 00 00       	call   c001a2d8 <ATA::ATA()>
c0019ddb:	eb 17                	jmp    c0019df4 <IDE::detect()+0x226>
c0019ddd:	83 ec 0c             	sub    esp,0xc
c0019de0:	68 84 01 00 00       	push   0x184
c0019de5:	e8 6b cc fe ff       	call   c0006a55 <malloc>
c0019dea:	89 c7                	mov    edi,eax
c0019dec:	89 04 24             	mov    DWORD PTR [esp],eax
c0019def:	e8 dc 0a 00 00       	call   c001a8d0 <ATAPI::ATAPI()>
c0019df4:	5a                   	pop    edx
c0019df5:	59                   	pop    ecx
c0019df6:	57                   	push   edi
c0019df7:	53                   	push   ebx
c0019df8:	e8 05 0e ff ff       	call   c000ac02 <Device::addChild(Device*)>
c0019dfd:	8b 07                	mov    eax,DWORD PTR [edi]
c0019dff:	53                   	push   ebx
c0019e00:	55                   	push   ebp
c0019e01:	6a 00                	push   0x0
c0019e03:	57                   	push   edi
c0019e04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e07:	83 c4 20             	add    esp,0x20
c0019e0a:	45                   	inc    ebp
c0019e0b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019e10:	74 0d                	je     c0019e1f <IDE::detect()+0x251>
c0019e12:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019e1a:	e9 e0 fd ff ff       	jmp    c0019bff <IDE::detect()+0x31>
c0019e1f:	4e                   	dec    esi
c0019e20:	74 61                	je     c0019e83 <IDE::detect()+0x2b5>
c0019e22:	be 01 00 00 00       	mov    esi,0x1
c0019e27:	e9 cb fd ff ff       	jmp    c0019bf7 <IDE::detect()+0x29>
c0019e2c:	50                   	push   eax
c0019e2d:	6a 04                	push   0x4
c0019e2f:	56                   	push   esi
c0019e30:	53                   	push   ebx
c0019e31:	e8 30 f7 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019e36:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019e3a:	83 c4 0c             	add    esp,0xc
c0019e3d:	6a 05                	push   0x5
c0019e3f:	56                   	push   esi
c0019e40:	53                   	push   ebx
c0019e41:	e8 20 f7 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019e46:	83 c4 10             	add    esp,0x10
c0019e49:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019e4d:	80 fa 14             	cmp    dl,0x14
c0019e50:	75 04                	jne    c0019e56 <IDE::detect()+0x288>
c0019e52:	3c eb                	cmp    al,0xeb
c0019e54:	eb 07                	jmp    c0019e5d <IDE::detect()+0x28f>
c0019e56:	3c 96                	cmp    al,0x96
c0019e58:	75 b1                	jne    c0019e0b <IDE::detect()+0x23d>
c0019e5a:	80 fa 69             	cmp    dl,0x69
c0019e5d:	75 ac                	jne    c0019e0b <IDE::detect()+0x23d>
c0019e5f:	68 a1 00 00 00       	push   0xa1
c0019e64:	6a 07                	push   0x7
c0019e66:	56                   	push   esi
c0019e67:	53                   	push   ebx
c0019e68:	e8 39 f6 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e6d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019e74:	e8 b7 8d ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	b1 01                	mov    cl,0x1
c0019e7e:	e9 6d fe ff ff       	jmp    c0019cf0 <IDE::detect()+0x122>
c0019e83:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e89:	5b                   	pop    ebx
c0019e8a:	5e                   	pop    esi
c0019e8b:	5f                   	pop    edi
c0019e8c:	5d                   	pop    ebp
c0019e8d:	c3                   	ret    

c0019e8e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019e8e:	55                   	push   ebp
c0019e8f:	57                   	push   edi
c0019e90:	56                   	push   esi
c0019e91:	53                   	push   ebx
c0019e92:	83 ec 1c             	sub    esp,0x1c
c0019e95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e99:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019e9d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ea1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ea5:	88 c3                	mov    bl,al
c0019ea7:	84 c0                	test   al,al
c0019ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ead:	0f 84 81 00 00 00    	je     c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019eb3:	83 ec 0c             	sub    esp,0xc
c0019eb6:	68 1b f8 01 c0       	push   0xc001f81b
c0019ebb:	e8 1f f9 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ec7:	3c 01                	cmp    al,0x1
c0019ec9:	74 63                	je     c0019f2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ecb:	3c 02                	cmp    al,0x2
c0019ecd:	75 53                	jne    c0019f22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019ecf:	d1 e6                	shl    esi,1
c0019ed1:	09 ee                	or     esi,ebp
c0019ed3:	50                   	push   eax
c0019ed4:	89 f0                	mov    eax,esi
c0019ed6:	6a 01                	push   0x1
c0019ed8:	0f b6 f0             	movzx  esi,al
c0019edb:	c1 e6 06             	shl    esi,0x6
c0019ede:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ee6:	50                   	push   eax
c0019ee7:	57                   	push   edi
c0019ee8:	e8 79 f6 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019eed:	83 c4 10             	add    esp,0x10
c0019ef0:	a8 01                	test   al,0x1
c0019ef2:	74 02                	je     c0019ef6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019ef4:	b3 07                	mov    bl,0x7
c0019ef6:	a8 02                	test   al,0x2
c0019ef8:	74 02                	je     c0019efc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019efa:	b3 03                	mov    bl,0x3
c0019efc:	a8 04                	test   al,0x4
c0019efe:	74 02                	je     c0019f02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019f00:	b3 14                	mov    bl,0x14
c0019f02:	a8 08                	test   al,0x8
c0019f04:	74 02                	je     c0019f08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019f06:	b3 03                	mov    bl,0x3
c0019f08:	a8 10                	test   al,0x10
c0019f0a:	74 02                	je     c0019f0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019f0c:	b3 15                	mov    bl,0x15
c0019f0e:	a8 20                	test   al,0x20
c0019f10:	74 02                	je     c0019f14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019f12:	b3 03                	mov    bl,0x3
c0019f14:	a8 40                	test   al,0x40
c0019f16:	74 02                	je     c0019f1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019f18:	b3 16                	mov    bl,0x16
c0019f1a:	84 c0                	test   al,al
c0019f1c:	79 16                	jns    c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019f1e:	b3 0d                	mov    bl,0xd
c0019f20:	eb 12                	jmp    c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019f22:	3c 03                	cmp    al,0x3
c0019f24:	74 0c                	je     c0019f32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019f26:	3c 04                	cmp    al,0x4
c0019f28:	75 0a                	jne    c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019f2a:	b3 08                	mov    bl,0x8
c0019f2c:	eb 06                	jmp    c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019f2e:	b3 13                	mov    bl,0x13
c0019f30:	eb 02                	jmp    c0019f34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019f32:	b3 17                	mov    bl,0x17
c0019f34:	83 c4 1c             	add    esp,0x1c
c0019f37:	88 d8                	mov    al,bl
c0019f39:	5b                   	pop    ebx
c0019f3a:	5e                   	pop    esi
c0019f3b:	5f                   	pop    edi
c0019f3c:	5d                   	pop    ebp
c0019f3d:	c3                   	ret    

c0019f3e <IDE::polling(unsigned char, unsigned int)>:
c0019f3e:	57                   	push   edi
c0019f3f:	56                   	push   esi
c0019f40:	53                   	push   ebx
c0019f41:	bb 04 00 00 00       	mov    ebx,0x4
c0019f46:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0019f4a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0019f4f:	52                   	push   edx
c0019f50:	6a 0c                	push   0xc
c0019f52:	56                   	push   esi
c0019f53:	57                   	push   edi
c0019f54:	e8 0d f6 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	4b                   	dec    ebx
c0019f5d:	75 f0                	jne    c0019f4f <IDE::polling(unsigned char, unsigned int)+0x11>
c0019f5f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019f64:	50                   	push   eax
c0019f65:	6a 0c                	push   0xc
c0019f67:	56                   	push   esi
c0019f68:	57                   	push   edi
c0019f69:	e8 f8 f5 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	a8 01                	test   al,0x1
c0019f73:	75 17                	jne    c0019f8c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0019f75:	a8 20                	test   al,0x20
c0019f77:	75 0f                	jne    c0019f88 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0019f79:	4b                   	dec    ebx
c0019f7a:	74 10                	je     c0019f8c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0019f7c:	84 c0                	test   al,al
c0019f7e:	78 e4                	js     c0019f64 <IDE::polling(unsigned char, unsigned int)+0x26>
c0019f80:	a8 08                	test   al,0x8
c0019f82:	74 e0                	je     c0019f64 <IDE::polling(unsigned char, unsigned int)+0x26>
c0019f84:	31 c0                	xor    eax,eax
c0019f86:	eb 06                	jmp    c0019f8e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019f88:	b0 01                	mov    al,0x1
c0019f8a:	eb 02                	jmp    c0019f8e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019f8c:	b0 02                	mov    al,0x2
c0019f8e:	5b                   	pop    ebx
c0019f8f:	5e                   	pop    esi
c0019f90:	5f                   	pop    edi
c0019f91:	c3                   	ret    

c0019f92 <SATABus::close(int, int, void*)>:
c0019f92:	31 c0                	xor    eax,eax
c0019f94:	c3                   	ret    
c0019f95:	90                   	nop

c0019f96 <SATABus::detect()>:
c0019f96:	c3                   	ret    
c0019f97:	90                   	nop

c0019f98 <SATABus::SATABus()>:
c0019f98:	83 ec 0c             	sub    esp,0xc
c0019f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9f:	83 ec 08             	sub    esp,0x8
c0019fa2:	68 54 f8 01 c0       	push   0xc001f854
c0019fa7:	50                   	push   eax
c0019fa8:	e8 97 0f ff ff       	call   c000af44 <HardDiskController::HardDiskController(char const*)>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	ba 80 f8 01 c0       	mov    edx,0xc001f880
c0019fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb9:	89 10                	mov    DWORD PTR [eax],edx
c0019fbb:	83 ec 0c             	sub    esp,0xc
c0019fbe:	6a 50                	push   0x50
c0019fc0:	e8 14 cf fe ff       	call   c0006ed9 <Phys::allocateContiguousPages(int)>
c0019fc5:	83 c4 10             	add    esp,0x10
c0019fc8:	89 c2                	mov    edx,eax
c0019fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019fd4:	83 ec 0c             	sub    esp,0xc
c0019fd7:	6a 50                	push   0x50
c0019fd9:	e8 9f e5 fe ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c0019fde:	83 c4 10             	add    esp,0x10
c0019fe1:	89 c2                	mov    edx,eax
c0019fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019fed:	a1 54 05 02 c0       	mov    eax,ds:0xc0020554
c0019ff2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ff6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019ffc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a000:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001a006:	83 ec 0c             	sub    esp,0xc
c001a009:	6a 03                	push   0x3
c001a00b:	6a 50                	push   0x50
c001a00d:	51                   	push   ecx
c001a00e:	52                   	push   edx
c001a00f:	50                   	push   eax
c001a010:	e8 b3 ee fe ff       	call   c0008ec8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001a015:	83 c4 20             	add    esp,0x20
c001a018:	90                   	nop
c001a019:	83 c4 0c             	add    esp,0xc
c001a01c:	c3                   	ret    
c001a01d:	90                   	nop

c001a01e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001a01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a022:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001a025:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a028:	09 c2                	or     edx,eax
c001a02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a034:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a036:	31 c0                	xor    eax,eax
c001a038:	c1 e9 08             	shr    ecx,0x8
c001a03b:	83 e1 0f             	and    ecx,0xf
c001a03e:	39 c8                	cmp    eax,ecx
c001a040:	74 0a                	je     c001a04c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001a042:	f6 c2 01             	test   dl,0x1
c001a045:	74 08                	je     c001a04f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001a047:	d1 ea                	shr    edx,1
c001a049:	40                   	inc    eax
c001a04a:	eb f2                	jmp    c001a03e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001a04c:	83 c8 ff             	or     eax,0xffffffff
c001a04f:	c3                   	ret    

c001a050 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001a050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a054:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a057:	89 c2                	mov    edx,eax
c001a059:	c1 ea 08             	shr    edx,0x8
c001a05c:	83 e2 0f             	and    edx,0xf
c001a05f:	fe ca                	dec    dl
c001a061:	75 31                	jne    c001a094 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001a063:	83 e0 0f             	and    eax,0xf
c001a066:	3c 03                	cmp    al,0x3
c001a068:	75 2a                	jne    c001a094 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001a06a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001a06d:	b8 02 00 00 00       	mov    eax,0x2
c001a072:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001a078:	74 1c                	je     c001a096 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001a07a:	b8 04 00 00 00       	mov    eax,0x4
c001a07f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001a085:	74 0f                	je     c001a096 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001a087:	31 c0                	xor    eax,eax
c001a089:	83 fa 03             	cmp    edx,0x3
c001a08c:	0f 94 c0             	sete   al
c001a08f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001a093:	c3                   	ret    
c001a094:	31 c0                	xor    eax,eax
c001a096:	c3                   	ret    
c001a097:	90                   	nop

c001a098 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001a098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a09c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a09f:	0f ba e2 0f          	bt     edx,0xf
c001a0a3:	72 f7                	jb     c001a09c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001a0a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0a8:	83 ca 10             	or     edx,0x10
c001a0ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a0ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0b1:	83 ca 01             	or     edx,0x1
c001a0b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a0b7:	c3                   	ret    

c001a0b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001a0b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0bf:	83 e2 fe             	and    edx,0xfffffffe
c001a0c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a0c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0c8:	83 e2 ef             	and    edx,0xffffffef
c001a0cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a0ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0d1:	0f ba e2 0e          	bt     edx,0xe
c001a0d5:	72 f7                	jb     c001a0ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001a0d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a0da:	0f ba e2 0f          	bt     edx,0xf
c001a0de:	72 ee                	jb     c001a0ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001a0e0:	c3                   	ret    
c001a0e1:	90                   	nop

c001a0e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001a0e2:	55                   	push   ebp
c001a0e3:	57                   	push   edi
c001a0e4:	56                   	push   esi
c001a0e5:	53                   	push   ebx
c001a0e6:	83 ec 1c             	sub    esp,0x1c
c001a0e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a0ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a0f1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001a0f5:	53                   	push   ebx
c001a0f6:	89 fd                	mov    ebp,edi
c001a0f8:	56                   	push   esi
c001a0f9:	c1 e5 0a             	shl    ebp,0xa
c001a0fc:	e8 b7 ff ff ff       	call   c001a0b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001a101:	83 ec 0c             	sub    esp,0xc
c001a104:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001a10a:	01 e8                	add    eax,ebp
c001a10c:	89 03                	mov    DWORD PTR [ebx],eax
c001a10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a110:	68 00 04 00 00       	push   0x400
c001a115:	6a 00                	push   0x0
c001a117:	50                   	push   eax
c001a118:	e8 8b 63 fe ff       	call   c00004a8 <memset>
c001a11d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001a123:	89 fa                	mov    edx,edi
c001a125:	01 e8                	add    eax,ebp
c001a127:	c1 e7 0d             	shl    edi,0xd
c001a12a:	89 03                	mov    DWORD PTR [ebx],eax
c001a12c:	c1 e2 08             	shl    edx,0x8
c001a12f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a136:	81 c2 00 80 00 00    	add    edx,0x8000
c001a13c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a140:	89 d0                	mov    eax,edx
c001a142:	83 c4 1c             	add    esp,0x1c
c001a145:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a14b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a14e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001a151:	68 00 01 00 00       	push   0x100
c001a156:	6a 00                	push   0x0
c001a158:	50                   	push   eax
c001a159:	e8 4a 63 fe ff       	call   c00004a8 <memset>
c001a15e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a162:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001a168:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001a16e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a172:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001a175:	83 c4 10             	add    esp,0x10
c001a178:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a17f:	31 ff                	xor    edi,edi
c001a181:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001a187:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001a18d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a191:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a197:	83 c5 20             	add    ebp,0x20
c001a19a:	01 f8                	add    eax,edi
c001a19c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a19f:	52                   	push   edx
c001a1a0:	68 00 01 00 00       	push   0x100
c001a1a5:	6a 00                	push   0x0
c001a1a7:	50                   	push   eax
c001a1a8:	e8 fb 62 fe ff       	call   c00004a8 <memset>
c001a1ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1b1:	83 c4 10             	add    esp,0x10
c001a1b4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001a1ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001a1c1:	01 f8                	add    eax,edi
c001a1c3:	81 c7 00 01 00 00    	add    edi,0x100
c001a1c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a1cc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001a1d2:	75 b3                	jne    c001a187 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001a1d4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001a1d8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001a1dc:	83 c4 1c             	add    esp,0x1c
c001a1df:	5b                   	pop    ebx
c001a1e0:	5e                   	pop    esi
c001a1e1:	5f                   	pop    edi
c001a1e2:	5d                   	pop    ebp
c001a1e3:	e9 b0 fe ff ff       	jmp    c001a098 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001a1e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001a1e8:	55                   	push   ebp
c001a1e9:	57                   	push   edi
c001a1ea:	56                   	push   esi
c001a1eb:	53                   	push   ebx
c001a1ec:	31 db                	xor    ebx,ebx
c001a1ee:	83 ec 0c             	sub    esp,0xc
c001a1f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a1f9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001a1fc:	f7 c7 01 00 00 00    	test   edi,0x1
c001a202:	74 7a                	je     c001a27e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a204:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a208:	89 d8                	mov    eax,ebx
c001a20a:	c1 e0 07             	shl    eax,0x7
c001a20d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001a214:	55                   	push   ebp
c001a215:	56                   	push   esi
c001a216:	e8 35 fe ff ff       	call   c001a050 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001a21b:	5a                   	pop    edx
c001a21c:	83 f8 01             	cmp    eax,0x1
c001a21f:	59                   	pop    ecx
c001a220:	75 21                	jne    c001a243 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001a222:	50                   	push   eax
c001a223:	53                   	push   ebx
c001a224:	55                   	push   ebp
c001a225:	56                   	push   esi
c001a226:	e8 b7 fe ff ff       	call   c001a0e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a22b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001a232:	e8 1e c8 fe ff       	call   c0006a55 <malloc>
c001a237:	89 c5                	mov    ebp,eax
c001a239:	89 04 24             	mov    DWORD PTR [esp],eax
c001a23c:	e8 49 0d 00 00       	call   c001af8a <SATA::SATA()>
c001a241:	eb 24                	jmp    c001a267 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001a243:	83 f8 04             	cmp    eax,0x4
c001a246:	75 36                	jne    c001a27e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a248:	51                   	push   ecx
c001a249:	53                   	push   ebx
c001a24a:	55                   	push   ebp
c001a24b:	56                   	push   esi
c001a24c:	e8 91 fe ff ff       	call   c001a0e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a251:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001a258:	e8 f8 c7 fe ff       	call   c0006a55 <malloc>
c001a25d:	89 c5                	mov    ebp,eax
c001a25f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a262:	e8 7f 10 00 00       	call   c001b2e6 <SATAPI::SATAPI()>
c001a267:	58                   	pop    eax
c001a268:	5a                   	pop    edx
c001a269:	55                   	push   ebp
c001a26a:	56                   	push   esi
c001a26b:	e8 92 09 ff ff       	call   c000ac02 <Device::addChild(Device*)>
c001a270:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a273:	56                   	push   esi
c001a274:	6a 00                	push   0x0
c001a276:	53                   	push   ebx
c001a277:	55                   	push   ebp
c001a278:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a27b:	83 c4 20             	add    esp,0x20
c001a27e:	d1 ef                	shr    edi,1
c001a280:	43                   	inc    ebx
c001a281:	83 fb 20             	cmp    ebx,0x20
c001a284:	0f 85 72 ff ff ff    	jne    c001a1fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001a28a:	83 c4 0c             	add    esp,0xc
c001a28d:	5b                   	pop    ebx
c001a28e:	5e                   	pop    esi
c001a28f:	5f                   	pop    edi
c001a290:	5d                   	pop    ebp
c001a291:	c3                   	ret    

c001a292 <SATABus::open(int, int, void*)>:
c001a292:	83 ec 14             	sub    esp,0x14
c001a295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a299:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001a29f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001a2a5:	52                   	push   edx
c001a2a6:	50                   	push   eax
c001a2a7:	e8 3c ff ff ff       	call   c001a1e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001a2ac:	31 c0                	xor    eax,eax
c001a2ae:	83 c4 1c             	add    esp,0x1c
c001a2b1:	c3                   	ret    

c001a2b2 <ATA::close(int, int, void*)>:
c001a2b2:	83 ec 0c             	sub    esp,0xc
c001a2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a2bf:	85 c0                	test   eax,eax
c001a2c1:	74 0c                	je     c001a2cf <ATA::close(int, int, void*)+0x1d>
c001a2c3:	83 ec 0c             	sub    esp,0xc
c001a2c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a2c8:	50                   	push   eax
c001a2c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	31 c0                	xor    eax,eax
c001a2d1:	83 c4 0c             	add    esp,0xc
c001a2d4:	c3                   	ret    
c001a2d5:	90                   	nop

c001a2d6 <ATA::powerSaving(PowerSavingLevel)>:
c001a2d6:	c3                   	ret    
c001a2d7:	90                   	nop

c001a2d8 <ATA::ATA()>:
c001a2d8:	83 ec 0c             	sub    esp,0xc
c001a2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2df:	83 ec 04             	sub    esp,0x4
c001a2e2:	68 00 02 00 00       	push   0x200
c001a2e7:	68 4d f9 01 c0       	push   0xc001f94d
c001a2ec:	50                   	push   eax
c001a2ed:	e8 dc 0c ff ff       	call   c000afce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	ba c0 f8 01 c0       	mov    edx,0xc001f8c0
c001a2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fe:	89 10                	mov    DWORD PTR [eax],edx
c001a300:	90                   	nop
c001a301:	83 c4 0c             	add    esp,0xc
c001a304:	c3                   	ret    
c001a305:	90                   	nop

c001a306 <ATA::flush(bool)>:
c001a306:	53                   	push   ebx
c001a307:	83 ec 08             	sub    esp,0x8
c001a30a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001a30f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a313:	19 c0                	sbb    eax,eax
c001a315:	83 e0 fd             	and    eax,0xfffffffd
c001a318:	05 ea 00 00 00       	add    eax,0xea
c001a31d:	50                   	push   eax
c001a31e:	6a 07                	push   0x7
c001a320:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a327:	50                   	push   eax
c001a328:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a32e:	e8 73 f1 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a333:	83 c4 0c             	add    esp,0xc
c001a336:	6a 00                	push   0x0
c001a338:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a33f:	50                   	push   eax
c001a340:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a346:	e8 f3 fb ff ff       	call   c0019f3e <IDE::polling(unsigned char, unsigned int)>
c001a34b:	83 c4 18             	add    esp,0x18
c001a34e:	5b                   	pop    ebx
c001a34f:	c3                   	ret    

c001a350 <ATA::readyForCommand()>:
c001a350:	56                   	push   esi
c001a351:	53                   	push   ebx
c001a352:	53                   	push   ebx
c001a353:	31 db                	xor    ebx,ebx
c001a355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a359:	51                   	push   ecx
c001a35a:	6a 0c                	push   0xc
c001a35c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a363:	50                   	push   eax
c001a364:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a36a:	e8 f7 f1 ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	a8 88                	test   al,0x88
c001a374:	74 1f                	je     c001a395 <ATA::readyForCommand()+0x45>
c001a376:	43                   	inc    ebx
c001a377:	83 fb 63             	cmp    ebx,0x63
c001a37a:	7e dd                	jle    c001a359 <ATA::readyForCommand()+0x9>
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	6a 0a                	push   0xa
c001a381:	e8 aa 88 ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c001a386:	83 c4 10             	add    esp,0x10
c001a389:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a38f:	75 c8                	jne    c001a359 <ATA::readyForCommand()+0x9>
c001a391:	31 c0                	xor    eax,eax
c001a393:	eb 02                	jmp    c001a397 <ATA::readyForCommand()+0x47>
c001a395:	b0 01                	mov    al,0x1
c001a397:	5a                   	pop    edx
c001a398:	5b                   	pop    ebx
c001a399:	5e                   	pop    esi
c001a39a:	c3                   	ret    
c001a39b:	90                   	nop

c001a39c <ATA::access(unsigned long long, int, void*, bool)>:
c001a39c:	55                   	push   ebp
c001a39d:	57                   	push   edi
c001a39e:	56                   	push   esi
c001a39f:	53                   	push   ebx
c001a3a0:	83 ec 2c             	sub    esp,0x2c
c001a3a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a3a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a3ab:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a3af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a3b7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a3bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a3bf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a3c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a3c9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a3d3:	c1 e0 06             	shl    eax,0x6
c001a3d6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a3de:	74 5d                	je     c001a43d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a3e0:	89 fa                	mov    edx,edi
c001a3e2:	89 f0                	mov    eax,esi
c001a3e4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a3e8:	c1 ea 1c             	shr    edx,0x1c
c001a3eb:	89 d1                	mov    ecx,edx
c001a3ed:	09 c1                	or     ecx,eax
c001a3ef:	74 25                	je     c001a416 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a3f1:	31 ed                	xor    ebp,ebp
c001a3f3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a3fa:	89 fa                	mov    edx,edi
c001a3fc:	89 f0                	mov    eax,esi
c001a3fe:	0f ad d0             	shrd   eax,edx,cl
c001a401:	d3 ea                	shr    edx,cl
c001a403:	f6 c1 20             	test   cl,0x20
c001a406:	74 02                	je     c001a40a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a408:	89 d0                	mov    eax,edx
c001a40a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a40e:	45                   	inc    ebp
c001a40f:	83 fd 06             	cmp    ebp,0x6
c001a412:	75 df                	jne    c001a3f3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a414:	eb 76                	jmp    c001a48c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a416:	89 f0                	mov    eax,esi
c001a418:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a41d:	89 fa                	mov    edx,edi
c001a41f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a426:	0f ac d0 10          	shrd   eax,edx,0x10
c001a42a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a42f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a433:	c1 ee 18             	shr    esi,0x18
c001a436:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a43b:	eb 56                	jmp    c001a493 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a43d:	6a 00                	push   0x0
c001a43f:	6a 3f                	push   0x3f
c001a441:	57                   	push   edi
c001a442:	56                   	push   esi
c001a443:	e8 78 22 00 00       	call   c001c6c0 <__umoddi3>
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	40                   	inc    eax
c001a44c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a450:	6a 00                	push   0x0
c001a452:	68 f0 03 00 00       	push   0x3f0
c001a457:	57                   	push   edi
c001a458:	56                   	push   esi
c001a459:	e8 62 21 00 00       	call   c001c5c0 <__udivdi3>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a466:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a46d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a472:	6a 00                	push   0x0
c001a474:	6a 3f                	push   0x3f
c001a476:	57                   	push   edi
c001a477:	56                   	push   esi
c001a478:	e8 43 21 00 00       	call   c001c5c0 <__udivdi3>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	89 c6                	mov    esi,eax
c001a482:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a487:	83 e6 0f             	and    esi,0xf
c001a48a:	eb 07                	jmp    c001a493 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a48c:	31 f6                	xor    esi,esi
c001a48e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a493:	bf 01 00 00 00       	mov    edi,0x1
c001a498:	50                   	push   eax
c001a499:	6a 00                	push   0x0
c001a49b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4a2:	50                   	push   eax
c001a4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a4a7:	e8 02 f2 ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c001a4ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4af:	e8 9c fe ff ff       	call   c001a350 <ATA::readyForCommand()>
c001a4b4:	83 c4 10             	add    esp,0x10
c001a4b7:	84 c0                	test   al,al
c001a4b9:	0f 84 4e 02 00 00    	je     c001a70d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a4bf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a4c5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4cb:	c1 e0 04             	shl    eax,0x4
c001a4ce:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a4d5:	09 c6                	or     esi,eax
c001a4d7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a4dc:	75 05                	jne    c001a4e3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a4de:	83 ce a0             	or     esi,0xffffffa0
c001a4e1:	eb 03                	jmp    c001a4e6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a4e3:	83 ce e0             	or     esi,0xffffffe0
c001a4e6:	89 f0                	mov    eax,esi
c001a4e8:	0f b6 f0             	movzx  esi,al
c001a4eb:	56                   	push   esi
c001a4ec:	6a 06                	push   0x6
c001a4ee:	51                   	push   ecx
c001a4ef:	52                   	push   edx
c001a4f0:	e8 b1 ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	6a 00                	push   0x0
c001a4fa:	6a 01                	push   0x1
c001a4fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a503:	50                   	push   eax
c001a504:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a50a:	e8 97 ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a50f:	83 c4 10             	add    esp,0x10
c001a512:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a517:	75 6e                	jne    c001a587 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a519:	6a 00                	push   0x0
c001a51b:	6a 08                	push   0x8
c001a51d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a524:	50                   	push   eax
c001a525:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a52b:	e8 76 ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a530:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a535:	50                   	push   eax
c001a536:	6a 09                	push   0x9
c001a538:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a53f:	50                   	push   eax
c001a540:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a546:	e8 5b ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a54b:	83 c4 20             	add    esp,0x20
c001a54e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a553:	50                   	push   eax
c001a554:	6a 0a                	push   0xa
c001a556:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a55d:	50                   	push   eax
c001a55e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a564:	e8 3d ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a569:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a56e:	50                   	push   eax
c001a56f:	6a 0b                	push   0xb
c001a571:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a578:	50                   	push   eax
c001a579:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a57f:	e8 22 ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a584:	83 c4 20             	add    esp,0x20
c001a587:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a58c:	50                   	push   eax
c001a58d:	6a 02                	push   0x2
c001a58f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a596:	50                   	push   eax
c001a597:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a59d:	e8 04 ef ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5a2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a5a7:	50                   	push   eax
c001a5a8:	6a 03                	push   0x3
c001a5aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a5b1:	50                   	push   eax
c001a5b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a5b8:	e8 e9 ee ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5bd:	83 c4 20             	add    esp,0x20
c001a5c0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a5c5:	50                   	push   eax
c001a5c6:	6a 04                	push   0x4
c001a5c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a5cf:	50                   	push   eax
c001a5d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a5d6:	e8 cb ee ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a5e0:	50                   	push   eax
c001a5e1:	6a 05                	push   0x5
c001a5e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a5ea:	50                   	push   eax
c001a5eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a5f1:	e8 b0 ee ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f6:	83 c4 20             	add    esp,0x20
c001a5f9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a5fe:	0f 94 c0             	sete   al
c001a601:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a606:	74 09                	je     c001a611 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a608:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a60f:	eb 07                	jmp    c001a618 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a611:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a618:	0f b6 c0             	movzx  eax,al
c001a61b:	50                   	push   eax
c001a61c:	6a 07                	push   0x7
c001a61e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a625:	50                   	push   eax
c001a626:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a62c:	e8 75 ee ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a631:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a635:	83 c4 10             	add    esp,0x10
c001a638:	85 f6                	test   esi,esi
c001a63a:	0f 84 ae 00 00 00    	je     c001a6ee <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a640:	50                   	push   eax
c001a641:	6a 01                	push   0x1
c001a643:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a64a:	50                   	push   eax
c001a64b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a651:	e8 e8 f8 ff ff       	call   c0019f3e <IDE::polling(unsigned char, unsigned int)>
c001a656:	83 c4 10             	add    esp,0x10
c001a659:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a65f:	84 c0                	test   al,al
c001a661:	74 20                	je     c001a683 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a663:	0f b6 f8             	movzx  edi,al
c001a666:	0f b6 d2             	movzx  edx,dl
c001a669:	57                   	push   edi
c001a66a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a671:	50                   	push   eax
c001a672:	52                   	push   edx
c001a673:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a679:	e8 10 f8 ff ff       	call   c0019e8e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a67e:	e9 87 00 00 00       	jmp    c001a70a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a683:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a688:	74 33                	je     c001a6bd <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a68a:	31 ed                	xor    ebp,ebp
c001a68c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a690:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a694:	50                   	push   eax
c001a695:	50                   	push   eax
c001a696:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a69d:	50                   	push   eax
c001a69e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a6a4:	e8 eb ed ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001a6a9:	89 c2                	mov    edx,eax
c001a6ab:	89 f8                	mov    eax,edi
c001a6ad:	66 ef                	out    dx,ax
c001a6af:	45                   	inc    ebp
c001a6b0:	83 c4 10             	add    esp,0x10
c001a6b3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a6b9:	75 d1                	jne    c001a68c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a6bb:	eb 23                	jmp    c001a6e0 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a6bd:	0f b6 d2             	movzx  edx,dl
c001a6c0:	51                   	push   ecx
c001a6c1:	51                   	push   ecx
c001a6c2:	52                   	push   edx
c001a6c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a6c9:	e8 c6 ed ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001a6ce:	b9 00 01 00 00       	mov    ecx,0x100
c001a6d3:	89 c2                	mov    edx,eax
c001a6d5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a6d9:	fc                   	cld    
c001a6da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a6e8:	4e                   	dec    esi
c001a6e9:	e9 4a ff ff ff       	jmp    c001a638 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a6ee:	31 ff                	xor    edi,edi
c001a6f0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a6f5:	74 16                	je     c001a70d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a6f7:	50                   	push   eax
c001a6f8:	50                   	push   eax
c001a6f9:	31 c0                	xor    eax,eax
c001a6fb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a700:	0f 94 c0             	sete   al
c001a703:	50                   	push   eax
c001a704:	53                   	push   ebx
c001a705:	e8 fc fb ff ff       	call   c001a306 <ATA::flush(bool)>
c001a70a:	83 c4 10             	add    esp,0x10
c001a70d:	83 c4 2c             	add    esp,0x2c
c001a710:	89 f8                	mov    eax,edi
c001a712:	5b                   	pop    ebx
c001a713:	5e                   	pop    esi
c001a714:	5f                   	pop    edi
c001a715:	5d                   	pop    ebp
c001a716:	c3                   	ret    
c001a717:	90                   	nop

c001a718 <ATA::read(unsigned long long, int, void*)>:
c001a718:	57                   	push   edi
c001a719:	b8 04 00 00 00       	mov    eax,0x4
c001a71e:	56                   	push   esi
c001a71f:	53                   	push   ebx
c001a720:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a724:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a728:	8d 7a ff             	lea    edi,[edx-0x1]
c001a72b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a72f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a733:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a739:	77 25                	ja     c001a760 <ATA::read(unsigned long long, int, void*)+0x48>
c001a73b:	b8 06 00 00 00       	mov    eax,0x6
c001a740:	85 f6                	test   esi,esi
c001a742:	74 1c                	je     c001a760 <ATA::read(unsigned long long, int, void*)+0x48>
c001a744:	50                   	push   eax
c001a745:	50                   	push   eax
c001a746:	6a 00                	push   0x0
c001a748:	56                   	push   esi
c001a749:	52                   	push   edx
c001a74a:	53                   	push   ebx
c001a74b:	51                   	push   ecx
c001a74c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a750:	e8 47 fc ff ff       	call   c001a39c <ATA::access(unsigned long long, int, void*, bool)>
c001a755:	83 c4 20             	add    esp,0x20
c001a758:	85 c0                	test   eax,eax
c001a75a:	0f 95 c0             	setne  al
c001a75d:	0f b6 c0             	movzx  eax,al
c001a760:	5b                   	pop    ebx
c001a761:	5e                   	pop    esi
c001a762:	5f                   	pop    edi
c001a763:	c3                   	ret    

c001a764 <ATA::write(unsigned long long, int, void*)>:
c001a764:	57                   	push   edi
c001a765:	b8 04 00 00 00       	mov    eax,0x4
c001a76a:	56                   	push   esi
c001a76b:	53                   	push   ebx
c001a76c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a770:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a774:	8d 7a ff             	lea    edi,[edx-0x1]
c001a777:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a77b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a77f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a785:	77 25                	ja     c001a7ac <ATA::write(unsigned long long, int, void*)+0x48>
c001a787:	b8 06 00 00 00       	mov    eax,0x6
c001a78c:	85 f6                	test   esi,esi
c001a78e:	74 1c                	je     c001a7ac <ATA::write(unsigned long long, int, void*)+0x48>
c001a790:	50                   	push   eax
c001a791:	50                   	push   eax
c001a792:	6a 01                	push   0x1
c001a794:	56                   	push   esi
c001a795:	52                   	push   edx
c001a796:	53                   	push   ebx
c001a797:	51                   	push   ecx
c001a798:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a79c:	e8 fb fb ff ff       	call   c001a39c <ATA::access(unsigned long long, int, void*, bool)>
c001a7a1:	83 c4 20             	add    esp,0x20
c001a7a4:	85 c0                	test   eax,eax
c001a7a6:	0f 95 c0             	setne  al
c001a7a9:	0f b6 c0             	movzx  eax,al
c001a7ac:	5b                   	pop    ebx
c001a7ad:	5e                   	pop    esi
c001a7ae:	5f                   	pop    edi
c001a7af:	c3                   	ret    

c001a7b0 <ATA::detectCHS()>:
c001a7b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7b4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a7ba:	c1 e0 06             	shl    eax,0x6
c001a7bd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a7c3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a7cd:	c7 44 24 04 a4 f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f8a4
c001a7d5:	e9 db 4c ff ff       	jmp    c000f4b5 <Krnl::panic(char const*)>

c001a7da <ATA::open(int, int, void*)>:
c001a7da:	53                   	push   ebx
c001a7db:	83 ec 08             	sub    esp,0x8
c001a7de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7ea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a7f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a7f6:	c1 e0 06             	shl    eax,0x6
c001a7f9:	01 d0                	add    eax,edx
c001a7fb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a802:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a808:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a80f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a819:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a81f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a826:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a82d:	75 0c                	jne    c001a83b <ATA::open(int, int, void*)+0x61>
c001a82f:	83 ec 0c             	sub    esp,0xc
c001a832:	53                   	push   ebx
c001a833:	e8 78 ff ff ff       	call   c001a7b0 <ATA::detectCHS()>
c001a838:	83 c4 10             	add    esp,0x10
c001a83b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a841:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a847:	c1 e0 06             	shl    eax,0x6
c001a84a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a851:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a85b:	d1 e8                	shr    eax,1
c001a85d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a863:	6a 04                	push   0x4
c001a865:	6a 0c                	push   0xc
c001a867:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a86e:	50                   	push   eax
c001a86f:	52                   	push   edx
c001a870:	e8 31 ec ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a875:	90                   	nop
c001a876:	90                   	nop
c001a877:	6a 00                	push   0x0
c001a879:	6a 0c                	push   0xc
c001a87b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a882:	50                   	push   eax
c001a883:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a889:	e8 18 ec ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a88e:	83 c4 14             	add    esp,0x14
c001a891:	53                   	push   ebx
c001a892:	e8 9f 07 ff ff       	call   c000b036 <PhysicalDisk::startCache()>
c001a897:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a89a:	e8 eb 17 ff ff       	call   c000c08a <createPartitionsForDisk(PhysicalDisk*)>
c001a89f:	31 c0                	xor    eax,eax
c001a8a1:	83 c4 18             	add    esp,0x18
c001a8a4:	5b                   	pop    ebx
c001a8a5:	c3                   	ret    

c001a8a6 <ATAPI::write(unsigned long long, int, void*)>:
c001a8a6:	b8 03 00 00 00       	mov    eax,0x3
c001a8ab:	c3                   	ret    

c001a8ac <ATAPI::close(int, int, void*)>:
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a8b9:	85 c0                	test   eax,eax
c001a8bb:	74 0c                	je     c001a8c9 <ATAPI::close(int, int, void*)+0x1d>
c001a8bd:	83 ec 0c             	sub    esp,0xc
c001a8c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8c2:	50                   	push   eax
c001a8c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a8c6:	83 c4 10             	add    esp,0x10
c001a8c9:	31 c0                	xor    eax,eax
c001a8cb:	83 c4 0c             	add    esp,0xc
c001a8ce:	c3                   	ret    
c001a8cf:	90                   	nop

c001a8d0 <ATAPI::ATAPI()>:
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8d7:	83 ec 04             	sub    esp,0x4
c001a8da:	68 00 08 00 00       	push   0x800
c001a8df:	68 ed f9 01 c0       	push   0xc001f9ed
c001a8e4:	50                   	push   eax
c001a8e5:	e8 e4 06 ff ff       	call   c000afce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a8ea:	83 c4 10             	add    esp,0x10
c001a8ed:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c001a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f6:	89 10                	mov    DWORD PTR [eax],edx
c001a8f8:	90                   	nop
c001a8f9:	83 c4 0c             	add    esp,0xc
c001a8fc:	c3                   	ret    
c001a8fd:	90                   	nop

c001a8fe <ATAPI::readyForCommand()>:
c001a8fe:	56                   	push   esi
c001a8ff:	53                   	push   ebx
c001a900:	53                   	push   ebx
c001a901:	31 db                	xor    ebx,ebx
c001a903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a907:	51                   	push   ecx
c001a908:	6a 0c                	push   0xc
c001a90a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a911:	50                   	push   eax
c001a912:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a918:	e8 49 ec ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	a8 88                	test   al,0x88
c001a922:	74 25                	je     c001a949 <ATAPI::readyForCommand()+0x4b>
c001a924:	43                   	inc    ebx
c001a925:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a92b:	7e da                	jle    c001a907 <ATAPI::readyForCommand()+0x9>
c001a92d:	83 ec 0c             	sub    esp,0xc
c001a930:	68 5e 01 00 00       	push   0x15e
c001a935:	e8 f6 82 ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c001a93a:	83 c4 10             	add    esp,0x10
c001a93d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a943:	75 c2                	jne    c001a907 <ATAPI::readyForCommand()+0x9>
c001a945:	31 c0                	xor    eax,eax
c001a947:	eb 02                	jmp    c001a94b <ATAPI::readyForCommand()+0x4d>
c001a949:	b0 01                	mov    al,0x1
c001a94b:	5a                   	pop    edx
c001a94c:	5b                   	pop    ebx
c001a94d:	5e                   	pop    esi
c001a94e:	c3                   	ret    
c001a94f:	90                   	nop

c001a950 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a950:	55                   	push   ebp
c001a951:	57                   	push   edi
c001a952:	56                   	push   esi
c001a953:	53                   	push   ebx
c001a954:	83 ec 20             	sub    esp,0x20
c001a957:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a95b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a95f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a963:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a967:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a96b:	6a 01                	push   0x1
c001a96d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a974:	50                   	push   eax
c001a975:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a97b:	e8 2e ed ff ff       	call   c00196ae <IDE::enableIRQs(unsigned char, bool)>
c001a980:	5e                   	pop    esi
c001a981:	58                   	pop    eax
c001a982:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a989:	50                   	push   eax
c001a98a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a990:	e8 eb ea ff ff       	call   c0019480 <IDE::prepareInterrupt(unsigned char)>
c001a995:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a998:	e8 61 ff ff ff       	call   c001a8fe <ATAPI::readyForCommand()>
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	84 c0                	test   al,al
c001a9a2:	75 0a                	jne    c001a9ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a9a4:	bb 01 00 00 00       	mov    ebx,0x1
c001a9a9:	e9 57 02 00 00       	jmp    c001ac05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a9ae:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a9b4:	c1 e0 04             	shl    eax,0x4
c001a9b7:	0f b6 c0             	movzx  eax,al
c001a9ba:	50                   	push   eax
c001a9bb:	6a 06                	push   0x6
c001a9bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9c4:	50                   	push   eax
c001a9c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9cb:	e8 d6 ea ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9d0:	6a 00                	push   0x0
c001a9d2:	6a 01                	push   0x1
c001a9d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9db:	50                   	push   eax
c001a9dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9e2:	e8 bf ea ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9e7:	83 c4 20             	add    esp,0x20
c001a9ea:	0f b6 c3             	movzx  eax,bl
c001a9ed:	0f b6 df             	movzx  ebx,bh
c001a9f0:	50                   	push   eax
c001a9f1:	6a 04                	push   0x4
c001a9f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9fa:	50                   	push   eax
c001a9fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa01:	e8 a0 ea ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa06:	53                   	push   ebx
c001aa07:	6a 05                	push   0x5
c001aa09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa10:	50                   	push   eax
c001aa11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa17:	e8 8a ea ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa1c:	83 c4 20             	add    esp,0x20
c001aa1f:	68 a0 00 00 00       	push   0xa0
c001aa24:	6a 07                	push   0x7
c001aa26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa2d:	50                   	push   eax
c001aa2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa34:	e8 6d ea ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa39:	83 c4 0c             	add    esp,0xc
c001aa3c:	6a 01                	push   0x1
c001aa3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa45:	50                   	push   eax
c001aa46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa4c:	e8 ed f4 ff ff       	call   c0019f3e <IDE::polling(unsigned char, unsigned int)>
c001aa51:	83 c4 10             	add    esp,0x10
c001aa54:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001aa5a:	84 c0                	test   al,al
c001aa5c:	74 23                	je     c001aa81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001aa5e:	0f b6 d8             	movzx  ebx,al
c001aa61:	0f b6 d2             	movzx  edx,dl
c001aa64:	53                   	push   ebx
c001aa65:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001aa6c:	50                   	push   eax
c001aa6d:	52                   	push   edx
c001aa6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa74:	e8 15 f4 ff ff       	call   c0019e8e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	e9 84 01 00 00       	jmp    c001ac05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001aa81:	0f b6 d2             	movzx  edx,dl
c001aa84:	53                   	push   ebx
c001aa85:	53                   	push   ebx
c001aa86:	52                   	push   edx
c001aa87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa8d:	e8 02 ea ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001aa92:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001aa96:	b9 06 00 00 00       	mov    ecx,0x6
c001aa9b:	89 c2                	mov    edx,eax
c001aa9d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001aaa0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aaad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aab4:	85 db                	test   ebx,ebx
c001aab6:	0f 84 ec 00 00 00    	je     c001aba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001aabc:	51                   	push   ecx
c001aabd:	51                   	push   ecx
c001aabe:	52                   	push   edx
c001aabf:	50                   	push   eax
c001aac0:	e8 4f eb ff ff       	call   c0019614 <IDE::waitInterrupt(unsigned char)>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	84 c0                	test   al,al
c001aaca:	0f 84 d4 fe ff ff    	je     c001a9a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aad0:	56                   	push   esi
c001aad1:	56                   	push   esi
c001aad2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aad9:	50                   	push   eax
c001aada:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aae0:	e8 9b e9 ff ff       	call   c0019480 <IDE::prepareInterrupt(unsigned char)>
c001aae5:	83 c4 0c             	add    esp,0xc
c001aae8:	6a 04                	push   0x4
c001aaea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aaf1:	50                   	push   eax
c001aaf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aaf8:	e8 69 ea ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001aafd:	83 c4 0c             	add    esp,0xc
c001ab00:	89 c6                	mov    esi,eax
c001ab02:	6a 05                	push   0x5
c001ab04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab0b:	50                   	push   eax
c001ab0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab12:	e8 4f ea ff ff       	call   c0019566 <IDE::read(unsigned char, unsigned char)>
c001ab17:	89 f1                	mov    ecx,esi
c001ab19:	0f b6 c0             	movzx  eax,al
c001ab1c:	0f b6 f1             	movzx  esi,cl
c001ab1f:	c1 e0 08             	shl    eax,0x8
c001ab22:	09 c6                	or     esi,eax
c001ab24:	d1 fe                	sar    esi,1
c001ab26:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ab32:	74 41                	je     c001ab75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ab34:	31 c9                	xor    ecx,ecx
c001ab36:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ab3c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ab43:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ab47:	75 0a                	jne    c001ab53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ab49:	01 c9                	add    ecx,ecx
c001ab4b:	01 cd                	add    ebp,ecx
c001ab4d:	4b                   	dec    ebx
c001ab4e:	e9 54 ff ff ff       	jmp    c001aaa7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ab53:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ab58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ab5c:	51                   	push   ecx
c001ab5d:	51                   	push   ecx
c001ab5e:	52                   	push   edx
c001ab5f:	50                   	push   eax
c001ab60:	e8 2f e9 ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001ab65:	89 c2                	mov    edx,eax
c001ab67:	89 f0                	mov    eax,esi
c001ab69:	66 ef                	out    dx,ax
c001ab6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab6f:	83 c4 10             	add    esp,0x10
c001ab72:	41                   	inc    ecx
c001ab73:	eb c1                	jmp    c001ab36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ab75:	31 f6                	xor    esi,esi
c001ab77:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ab7d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ab84:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ab88:	75 06                	jne    c001ab90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ab8a:	01 f6                	add    esi,esi
c001ab8c:	01 f5                	add    ebp,esi
c001ab8e:	eb bd                	jmp    c001ab4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ab90:	51                   	push   ecx
c001ab91:	51                   	push   ecx
c001ab92:	52                   	push   edx
c001ab93:	50                   	push   eax
c001ab94:	e8 fb e8 ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001ab99:	89 c2                	mov    edx,eax
c001ab9b:	66 ed                	in     ax,dx
c001ab9d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	46                   	inc    esi
c001aba6:	eb cf                	jmp    c001ab77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aba8:	51                   	push   ecx
c001aba9:	51                   	push   ecx
c001abaa:	52                   	push   edx
c001abab:	50                   	push   eax
c001abac:	e8 63 ea ff ff       	call   c0019614 <IDE::waitInterrupt(unsigned char)>
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	84 c0                	test   al,al
c001abb6:	0f 84 e8 fd ff ff    	je     c001a9a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001abbc:	bb a0 86 01 00       	mov    ebx,0x186a0
c001abc1:	52                   	push   edx
c001abc2:	52                   	push   edx
c001abc3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001abca:	50                   	push   eax
c001abcb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001abd1:	e8 aa e8 ff ff       	call   c0019480 <IDE::prepareInterrupt(unsigned char)>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	50                   	push   eax
c001abda:	50                   	push   eax
c001abdb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001abe2:	50                   	push   eax
c001abe3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001abe9:	e8 a6 e8 ff ff       	call   c0019494 <IDE::getBase(unsigned char)>
c001abee:	8d 50 07             	lea    edx,[eax+0x7]
c001abf1:	ec                   	in     al,dx
c001abf2:	83 c4 10             	add    esp,0x10
c001abf5:	a8 88                	test   al,0x88
c001abf7:	74 0a                	je     c001ac03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001abf9:	4b                   	dec    ebx
c001abfa:	75 dd                	jne    c001abd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001abfc:	bb 02 00 00 00       	mov    ebx,0x2
c001ac01:	eb 02                	jmp    c001ac05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ac03:	31 db                	xor    ebx,ebx
c001ac05:	83 c4 1c             	add    esp,0x1c
c001ac08:	89 d8                	mov    eax,ebx
c001ac0a:	5b                   	pop    ebx
c001ac0b:	5e                   	pop    esi
c001ac0c:	5f                   	pop    edi
c001ac0d:	5d                   	pop    ebp
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <ATAPI::diskRemoved()>:
c001ac10:	53                   	push   ebx
c001ac11:	83 ec 14             	sub    esp,0x14
c001ac14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ac18:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ac1f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ac25:	e8 de 11 ff ff       	call   c000be08 <LogicalDisk::unmount()>
c001ac2a:	58                   	pop    eax
c001ac2b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ac31:	e8 1a 1b ff ff       	call   c000c750 <VCache::writeWriteBuffer()>
c001ac36:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ac3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac40:	83 c4 18             	add    esp,0x18
c001ac43:	5b                   	pop    ebx
c001ac44:	e9 f7 1a ff ff       	jmp    c000c740 <VCache::invalidateReadBuffer()>
c001ac49:	90                   	nop

c001ac4a <ATAPI::eject()>:
c001ac4a:	57                   	push   edi
c001ac4b:	b9 03 00 00 00       	mov    ecx,0x3
c001ac50:	53                   	push   ebx
c001ac51:	83 ec 14             	sub    esp,0x14
c001ac54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac58:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ac5c:	fc                   	cld    
c001ac5d:	31 c0                	xor    eax,eax
c001ac5f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ac61:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ac66:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ac6b:	50                   	push   eax
c001ac6c:	50                   	push   eax
c001ac6d:	6a 00                	push   0x0
c001ac6f:	6a 00                	push   0x0
c001ac71:	6a 00                	push   0x0
c001ac73:	6a 02                	push   0x2
c001ac75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac79:	50                   	push   eax
c001ac7a:	53                   	push   ebx
c001ac7b:	e8 d0 fc ff ff       	call   c001a950 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac80:	83 c4 14             	add    esp,0x14
c001ac83:	53                   	push   ebx
c001ac84:	e8 87 ff ff ff       	call   c001ac10 <ATAPI::diskRemoved()>
c001ac89:	83 c4 24             	add    esp,0x24
c001ac8c:	31 c0                	xor    eax,eax
c001ac8e:	5b                   	pop    ebx
c001ac8f:	5f                   	pop    edi
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <ATAPI::diskInserted()>:
c001ac92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac96:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ac9d:	c3                   	ret    

c001ac9e <ATAPI::detectMedia()>:
c001ac9e:	56                   	push   esi
c001ac9f:	53                   	push   ebx
c001aca0:	83 ec 28             	sub    esp,0x28
c001aca3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001aca7:	6a 0c                	push   0xc
c001aca9:	6a 00                	push   0x0
c001acab:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001acaf:	56                   	push   esi
c001acb0:	e8 f3 57 fe ff       	call   c00004a8 <memset>
c001acb5:	58                   	pop    eax
c001acb6:	5a                   	pop    edx
c001acb7:	6a 00                	push   0x0
c001acb9:	6a 00                	push   0x0
c001acbb:	6a 00                	push   0x0
c001acbd:	6a 00                	push   0x0
c001acbf:	56                   	push   esi
c001acc0:	53                   	push   ebx
c001acc1:	e8 8a fc ff ff       	call   c001a950 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001acc6:	83 c4 1c             	add    esp,0x1c
c001acc9:	6a 0c                	push   0xc
c001accb:	6a 00                	push   0x0
c001accd:	56                   	push   esi
c001acce:	e8 d5 57 fe ff       	call   c00004a8 <memset>
c001acd3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001acd8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001acdd:	59                   	pop    ecx
c001acde:	58                   	pop    eax
c001acdf:	6a 01                	push   0x1
c001ace1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ace5:	50                   	push   eax
c001ace6:	6a 00                	push   0x0
c001ace8:	6a 12                	push   0x12
c001acea:	56                   	push   esi
c001aceb:	53                   	push   ebx
c001acec:	e8 5f fc ff ff       	call   c001a950 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001acf1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001acf5:	83 c4 20             	add    esp,0x20
c001acf8:	83 e0 7f             	and    eax,0x7f
c001acfb:	3c 70                	cmp    al,0x70
c001acfd:	74 15                	je     c001ad14 <ATAPI::detectMedia()+0x76>
c001acff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad06:	75 0c                	jne    c001ad14 <ATAPI::detectMedia()+0x76>
c001ad08:	83 ec 0c             	sub    esp,0xc
c001ad0b:	53                   	push   ebx
c001ad0c:	e8 81 ff ff ff       	call   c001ac92 <ATAPI::diskInserted()>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ad18:	83 e0 0f             	and    eax,0xf
c001ad1b:	3c 02                	cmp    al,0x2
c001ad1d:	75 1b                	jne    c001ad3a <ATAPI::detectMedia()+0x9c>
c001ad1f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ad24:	75 2d                	jne    c001ad53 <ATAPI::detectMedia()+0xb5>
c001ad26:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad2d:	74 24                	je     c001ad53 <ATAPI::detectMedia()+0xb5>
c001ad2f:	83 ec 0c             	sub    esp,0xc
c001ad32:	53                   	push   ebx
c001ad33:	e8 d8 fe ff ff       	call   c001ac10 <ATAPI::diskRemoved()>
c001ad38:	eb 16                	jmp    c001ad50 <ATAPI::detectMedia()+0xb2>
c001ad3a:	84 c0                	test   al,al
c001ad3c:	75 15                	jne    c001ad53 <ATAPI::detectMedia()+0xb5>
c001ad3e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad45:	75 0c                	jne    c001ad53 <ATAPI::detectMedia()+0xb5>
c001ad47:	83 ec 0c             	sub    esp,0xc
c001ad4a:	53                   	push   ebx
c001ad4b:	e8 42 ff ff ff       	call   c001ac92 <ATAPI::diskInserted()>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	83 c4 24             	add    esp,0x24
c001ad56:	5b                   	pop    ebx
c001ad57:	5e                   	pop    esi
c001ad58:	c3                   	ret    
c001ad59:	90                   	nop

c001ad5a <ATAPI::open(int, int, void*)>:
c001ad5a:	56                   	push   esi
c001ad5b:	53                   	push   ebx
c001ad5c:	50                   	push   eax
c001ad5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad69:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ad6f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ad75:	c1 e0 06             	shl    eax,0x6
c001ad78:	01 d0                	add    eax,edx
c001ad7a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ad81:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ad87:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ad8e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad98:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ad9e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ada5:	6a 04                	push   0x4
c001ada7:	6a 0c                	push   0xc
c001ada9:	51                   	push   ecx
c001adaa:	52                   	push   edx
c001adab:	e8 f6 e6 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adb0:	90                   	nop
c001adb1:	90                   	nop
c001adb2:	6a 00                	push   0x0
c001adb4:	6a 0c                	push   0xc
c001adb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001adbd:	50                   	push   eax
c001adbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001adc4:	e8 dd e6 ff ff       	call   c00194a6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adc9:	83 c4 14             	add    esp,0x14
c001adcc:	68 74 01 00 00       	push   0x174
c001add1:	e8 7f bc fe ff       	call   c0006a55 <malloc>
c001add6:	83 c4 0c             	add    esp,0xc
c001add9:	89 c6                	mov    esi,eax
c001addb:	6a 00                	push   0x0
c001addd:	68 ff ff ff 7f       	push   0x7fffffff
c001ade2:	6a 00                	push   0x0
c001ade4:	6a 00                	push   0x0
c001ade6:	53                   	push   ebx
c001ade7:	68 d6 fa 01 c0       	push   0xc001fad6
c001adec:	50                   	push   eax
c001aded:	e8 62 0e ff ff       	call   c000bc54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001adf2:	83 c4 14             	add    esp,0x14
c001adf5:	56                   	push   esi
c001adf6:	e8 0f 0f ff ff       	call   c000bd0a <LogicalDisk::assignDriveLetter()>
c001adfb:	5a                   	pop    edx
c001adfc:	0f be c0             	movsx  eax,al
c001adff:	59                   	pop    ecx
c001ae00:	50                   	push   eax
c001ae01:	68 f0 f8 01 c0       	push   0xc001f8f0
c001ae06:	e8 d4 e9 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001ae0b:	58                   	pop    eax
c001ae0c:	5a                   	pop    edx
c001ae0d:	56                   	push   esi
c001ae0e:	53                   	push   ebx
c001ae0f:	e8 ee fd fe ff       	call   c000ac02 <Device::addChild(Device*)>
c001ae14:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ae1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae1d:	e8 14 02 ff ff       	call   c000b036 <PhysicalDisk::startCache()>
c001ae22:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ae29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae2c:	e8 6d fe ff ff       	call   c001ac9e <ATAPI::detectMedia()>
c001ae31:	83 c4 14             	add    esp,0x14
c001ae34:	31 c0                	xor    eax,eax
c001ae36:	5b                   	pop    ebx
c001ae37:	5e                   	pop    esi
c001ae38:	c3                   	ret    
c001ae39:	90                   	nop

c001ae3a <ATAPI::read(unsigned long long, int, void*)>:
c001ae3a:	55                   	push   ebp
c001ae3b:	57                   	push   edi
c001ae3c:	56                   	push   esi
c001ae3d:	53                   	push   ebx
c001ae3e:	83 ec 1c             	sub    esp,0x1c
c001ae41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ae45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ae49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ae4d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ae54:	74 41                	je     c001ae97 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ae56:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ae5a:	b9 03 00 00 00       	mov    ecx,0x3
c001ae5f:	fc                   	cld    
c001ae60:	31 c0                	xor    eax,eax
c001ae62:	86 fb                	xchg   bl,bh
c001ae64:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae66:	c1 c3 10             	rol    ebx,0x10
c001ae69:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ae6e:	89 e8                	mov    eax,ebp
c001ae70:	86 fb                	xchg   bl,bh
c001ae72:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ae76:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ae7a:	50                   	push   eax
c001ae7b:	50                   	push   eax
c001ae7c:	55                   	push   ebp
c001ae7d:	c1 e5 0b             	shl    ebp,0xb
c001ae80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ae84:	6a 00                	push   0x0
c001ae86:	55                   	push   ebp
c001ae87:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae8b:	50                   	push   eax
c001ae8c:	56                   	push   esi
c001ae8d:	e8 be fa ff ff       	call   c001a950 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ae92:	83 c4 20             	add    esp,0x20
c001ae95:	eb 1a                	jmp    c001aeb1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	56                   	push   esi
c001ae9b:	e8 fe fd ff ff       	call   c001ac9e <ATAPI::detectMedia()>
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001aeaa:	75 aa                	jne    c001ae56 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aeac:	b8 02 00 00 00       	mov    eax,0x2
c001aeb1:	83 c4 1c             	add    esp,0x1c
c001aeb4:	5b                   	pop    ebx
c001aeb5:	5e                   	pop    esi
c001aeb6:	5f                   	pop    edi
c001aeb7:	5d                   	pop    ebp
c001aeb8:	c3                   	ret    
c001aeb9:	90                   	nop

c001aeba <SATA::close(int, int, void*)>:
c001aeba:	83 ec 0c             	sub    esp,0xc
c001aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aec7:	85 c0                	test   eax,eax
c001aec9:	74 0c                	je     c001aed7 <SATA::close(int, int, void*)+0x1d>
c001aecb:	83 ec 0c             	sub    esp,0xc
c001aece:	8b 10                	mov    edx,DWORD PTR [eax]
c001aed0:	50                   	push   eax
c001aed1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	31 c0                	xor    eax,eax
c001aed9:	83 c4 0c             	add    esp,0xc
c001aedc:	c3                   	ret    
c001aedd:	90                   	nop

c001aede <SATA::powerSaving(PowerSavingLevel)>:
c001aede:	c3                   	ret    
c001aedf:	90                   	nop

c001aee0 <SATA::open(int, int, void*)>:
c001aee0:	56                   	push   esi
c001aee1:	53                   	push   ebx
c001aee2:	50                   	push   eax
c001aee3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aee7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeeb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aef5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aefb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001af05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af09:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001af13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001af19:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001af20:	e8 f7 be fe ff       	call   c0006e1c <Phys::allocatePage()>
c001af25:	89 c6                	mov    esi,eax
c001af27:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001af2d:	81 c6 00 10 00 00    	add    esi,0x1000
c001af33:	e8 e4 be fe ff       	call   c0006e1c <Phys::allocatePage()>
c001af38:	39 c6                	cmp    esi,eax
c001af3a:	74 10                	je     c001af4c <SATA::open(int, int, void*)+0x6c>
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	68 38 f9 01 c0       	push   0xc001f938
c001af44:	e8 6c 45 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	6a 02                	push   0x2
c001af51:	e8 27 d6 fe ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c001af56:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001af5c:	6a 03                	push   0x3
c001af5e:	50                   	push   eax
c001af5f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001af65:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c001af6b:	e8 60 dc fe ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001af70:	83 c4 14             	add    esp,0x14
c001af73:	53                   	push   ebx
c001af74:	e8 bd 00 ff ff       	call   c000b036 <PhysicalDisk::startCache()>
c001af79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af7c:	e8 09 11 ff ff       	call   c000c08a <createPartitionsForDisk(PhysicalDisk*)>
c001af81:	83 c4 14             	add    esp,0x14
c001af84:	31 c0                	xor    eax,eax
c001af86:	5b                   	pop    ebx
c001af87:	5e                   	pop    esi
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <SATA::SATA()>:
c001af8a:	83 ec 0c             	sub    esp,0xc
c001af8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af91:	83 ec 04             	sub    esp,0x4
c001af94:	68 00 02 00 00       	push   0x200
c001af99:	68 4c f9 01 c0       	push   0xc001f94c
c001af9e:	50                   	push   eax
c001af9f:	e8 2a 00 ff ff       	call   c000afce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001afa4:	83 c4 10             	add    esp,0x10
c001afa7:	ba bc f9 01 c0       	mov    edx,0xc001f9bc
c001afac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb0:	89 10                	mov    DWORD PTR [eax],edx
c001afb2:	90                   	nop
c001afb3:	83 c4 0c             	add    esp,0xc
c001afb6:	c3                   	ret    
c001afb7:	90                   	nop

c001afb8 <SATA::access(unsigned long long, int, void*, bool)>:
c001afb8:	55                   	push   ebp
c001afb9:	57                   	push   edi
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	83 ec 2c             	sub    esp,0x2c
c001afbf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001afc3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001afc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afcb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001afcf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afd3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001afd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afdc:	7e 10                	jle    c001afee <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	68 5c f9 01 c0       	push   0xc001f95c
c001afe6:	e8 ca 44 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001aff4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001affa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b004:	89 d0                	mov    eax,edx
c001b006:	c1 e0 07             	shl    eax,0x7
c001b009:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b00d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b017:	51                   	push   ecx
c001b018:	8d 42 02             	lea    eax,[edx+0x2]
c001b01b:	51                   	push   ecx
c001b01c:	c1 e0 07             	shl    eax,0x7
c001b01f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b023:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b027:	50                   	push   eax
c001b028:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001b02e:	e8 eb ef ff ff       	call   c001a01e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b033:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b03f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b043:	0f 84 4f 01 00 00    	je     c001b198 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b049:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b04d:	c1 e0 09             	shl    eax,0x9
c001b050:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b055:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b059:	74 0e                	je     c001b069 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001b05b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001b061:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001b065:	89 c1                	mov    ecx,eax
c001b067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b069:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b06d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b073:	8d 42 02             	lea    eax,[edx+0x2]
c001b076:	c1 e0 07             	shl    eax,0x7
c001b079:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b07d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b07f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b085:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b08b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b08f:	c1 e1 05             	shl    ecx,0x5
c001b092:	01 c8                	add    eax,ecx
c001b094:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b098:	83 e1 01             	and    ecx,0x1
c001b09b:	89 ce                	mov    esi,ecx
c001b09d:	8a 08                	mov    cl,BYTE PTR [eax]
c001b09f:	c1 e6 06             	shl    esi,0x6
c001b0a2:	83 e1 bf             	and    ecx,0xffffffbf
c001b0a5:	09 f1                	or     ecx,esi
c001b0a7:	88 08                	mov    BYTE PTR [eax],cl
c001b0a9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b0ab:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001b0b1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001b0b7:	89 08                	mov    DWORD PTR [eax],ecx
c001b0b9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b0bf:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001b0c5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001b0cb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001b0ce:	50                   	push   eax
c001b0cf:	68 90 00 00 00       	push   0x90
c001b0d4:	6a 00                	push   0x0
c001b0d6:	56                   	push   esi
c001b0d7:	e8 cc 53 fe ff       	call   c00004a8 <memset>
c001b0dc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b0e2:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b0e6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b0ec:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b0f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	48                   	dec    eax
c001b0f8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0fd:	89 c1                	mov    ecx,eax
c001b0ff:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b105:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b10a:	09 c8                	or     eax,ecx
c001b10c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b112:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b115:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b11c:	66 25 00 7f          	and    ax,0x7f00
c001b120:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b124:	66 0d 27 80          	or     ax,0x8027
c001b128:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b12d:	66 89 06             	mov    WORD PTR [esi],ax
c001b130:	19 c0                	sbb    eax,eax
c001b132:	83 e0 f0             	and    eax,0xfffffff0
c001b135:	83 c0 35             	add    eax,0x35
c001b138:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b13b:	89 e8                	mov    eax,ebp
c001b13d:	c1 e8 10             	shr    eax,0x10
c001b140:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b143:	89 e8                	mov    eax,ebp
c001b145:	c1 e8 18             	shr    eax,0x18
c001b148:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b14b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b14f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b156:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b159:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b15d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b161:	89 d6                	mov    esi,edx
c001b163:	31 c0                	xor    eax,eax
c001b165:	c1 e6 07             	shl    esi,0x7
c001b168:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b16c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b172:	80 e1 88             	and    cl,0x88
c001b175:	74 0a                	je     c001b181 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b177:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b17c:	74 0a                	je     c001b188 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b17e:	40                   	inc    eax
c001b17f:	eb eb                	jmp    c001b16c <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b181:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b186:	75 17                	jne    c001b19f <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	68 95 f9 01 c0       	push   0xc001f995
c001b190:	e8 4a e6 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	b8 01 00 00 00       	mov    eax,0x1
c001b19d:	eb 5d                	jmp    c001b1fc <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b19f:	b8 01 00 00 00       	mov    eax,0x1
c001b1a4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b1a8:	c1 e2 07             	shl    edx,0x7
c001b1ab:	d3 e0                	shl    eax,cl
c001b1ad:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b1b1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b1b7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b1bd:	85 c8                	test   eax,ecx
c001b1bf:	74 16                	je     c001b1d7 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b1c1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b1c7:	0f ba e1 1e          	bt     ecx,0x1e
c001b1cb:	73 ea                	jae    c001b1b7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b1cd:	83 ec 0c             	sub    esp,0xc
c001b1d0:	68 a3 f9 01 c0       	push   0xc001f9a3
c001b1d5:	eb b9                	jmp    c001b190 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b1d7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b1dd:	0f ba e0 1e          	bt     eax,0x1e
c001b1e1:	72 b5                	jb     c001b198 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b1e3:	31 c0                	xor    eax,eax
c001b1e5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b1ea:	75 10                	jne    c001b1fc <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b1ec:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b1f2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b1f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b1fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1fc:	83 c4 2c             	add    esp,0x2c
c001b1ff:	5b                   	pop    ebx
c001b200:	5e                   	pop    esi
c001b201:	5f                   	pop    edi
c001b202:	5d                   	pop    ebp
c001b203:	c3                   	ret    

c001b204 <SATA::read(unsigned long long, int, void*)>:
c001b204:	57                   	push   edi
c001b205:	b8 04 00 00 00       	mov    eax,0x4
c001b20a:	56                   	push   esi
c001b20b:	53                   	push   ebx
c001b20c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b210:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b214:	8d 7a ff             	lea    edi,[edx-0x1]
c001b217:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b21b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b21f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b225:	77 25                	ja     c001b24c <SATA::read(unsigned long long, int, void*)+0x48>
c001b227:	b8 06 00 00 00       	mov    eax,0x6
c001b22c:	85 f6                	test   esi,esi
c001b22e:	74 1c                	je     c001b24c <SATA::read(unsigned long long, int, void*)+0x48>
c001b230:	50                   	push   eax
c001b231:	50                   	push   eax
c001b232:	6a 00                	push   0x0
c001b234:	56                   	push   esi
c001b235:	52                   	push   edx
c001b236:	53                   	push   ebx
c001b237:	51                   	push   ecx
c001b238:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b23c:	e8 77 fd ff ff       	call   c001afb8 <SATA::access(unsigned long long, int, void*, bool)>
c001b241:	83 c4 20             	add    esp,0x20
c001b244:	85 c0                	test   eax,eax
c001b246:	0f 95 c0             	setne  al
c001b249:	0f b6 c0             	movzx  eax,al
c001b24c:	5b                   	pop    ebx
c001b24d:	5e                   	pop    esi
c001b24e:	5f                   	pop    edi
c001b24f:	c3                   	ret    

c001b250 <SATA::write(unsigned long long, int, void*)>:
c001b250:	55                   	push   ebp
c001b251:	b8 04 00 00 00       	mov    eax,0x4
c001b256:	57                   	push   edi
c001b257:	56                   	push   esi
c001b258:	53                   	push   ebx
c001b259:	83 ec 0c             	sub    esp,0xc
c001b25c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b260:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b264:	8d 73 ff             	lea    esi,[ebx-0x1]
c001b267:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b26b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b26f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b275:	77 3d                	ja     c001b2b4 <SATA::write(unsigned long long, int, void*)+0x64>
c001b277:	b8 06 00 00 00       	mov    eax,0x6
c001b27c:	85 ed                	test   ebp,ebp
c001b27e:	74 34                	je     c001b2b4 <SATA::write(unsigned long long, int, void*)+0x64>
c001b280:	c1 e3 09             	shl    ebx,0x9
c001b283:	01 eb                	add    ebx,ebp
c001b285:	89 d6                	mov    esi,edx
c001b287:	89 cf                	mov    edi,ecx
c001b289:	83 c6 01             	add    esi,0x1
c001b28c:	83 d7 00             	adc    edi,0x0
c001b28f:	50                   	push   eax
c001b290:	50                   	push   eax
c001b291:	6a 01                	push   0x1
c001b293:	55                   	push   ebp
c001b294:	81 c5 00 02 00 00    	add    ebp,0x200
c001b29a:	6a 01                	push   0x1
c001b29c:	51                   	push   ecx
c001b29d:	52                   	push   edx
c001b29e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2a2:	e8 11 fd ff ff       	call   c001afb8 <SATA::access(unsigned long long, int, void*, bool)>
c001b2a7:	83 c4 20             	add    esp,0x20
c001b2aa:	89 f2                	mov    edx,esi
c001b2ac:	89 f9                	mov    ecx,edi
c001b2ae:	39 dd                	cmp    ebp,ebx
c001b2b0:	75 d3                	jne    c001b285 <SATA::write(unsigned long long, int, void*)+0x35>
c001b2b2:	31 c0                	xor    eax,eax
c001b2b4:	83 c4 0c             	add    esp,0xc
c001b2b7:	5b                   	pop    ebx
c001b2b8:	5e                   	pop    esi
c001b2b9:	5f                   	pop    edi
c001b2ba:	5d                   	pop    ebp
c001b2bb:	c3                   	ret    

c001b2bc <SATAPI::write(unsigned long long, int, void*)>:
c001b2bc:	b8 03 00 00 00       	mov    eax,0x3
c001b2c1:	c3                   	ret    

c001b2c2 <SATAPI::close(int, int, void*)>:
c001b2c2:	83 ec 0c             	sub    esp,0xc
c001b2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b2cf:	85 c0                	test   eax,eax
c001b2d1:	74 0c                	je     c001b2df <SATAPI::close(int, int, void*)+0x1d>
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2d8:	50                   	push   eax
c001b2d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b2dc:	83 c4 10             	add    esp,0x10
c001b2df:	31 c0                	xor    eax,eax
c001b2e1:	83 c4 0c             	add    esp,0xc
c001b2e4:	c3                   	ret    
c001b2e5:	90                   	nop

c001b2e6 <SATAPI::SATAPI()>:
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ed:	83 ec 04             	sub    esp,0x4
c001b2f0:	68 00 08 00 00       	push   0x800
c001b2f5:	68 ec f9 01 c0       	push   0xc001f9ec
c001b2fa:	50                   	push   eax
c001b2fb:	e8 ce fc fe ff       	call   c000afce <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b300:	83 c4 10             	add    esp,0x10
c001b303:	ba 28 fb 01 c0       	mov    edx,0xc001fb28
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	89 10                	mov    DWORD PTR [eax],edx
c001b30e:	90                   	nop
c001b30f:	83 c4 0c             	add    esp,0xc
c001b312:	c3                   	ret    
c001b313:	90                   	nop

c001b314 <SATAPI::diskRemoved()>:
c001b314:	c3                   	ret    
c001b315:	90                   	nop

c001b316 <SATAPI::diskInserted()>:
c001b316:	83 ec 18             	sub    esp,0x18
c001b319:	68 f8 f9 01 c0       	push   0xc001f9f8
c001b31e:	e8 bc e4 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b327:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b32e:	83 c4 1c             	add    esp,0x1c
c001b331:	c3                   	ret    

c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b332:	55                   	push   ebp
c001b333:	57                   	push   edi
c001b334:	56                   	push   esi
c001b335:	53                   	push   ebx
c001b336:	83 ec 38             	sub    esp,0x38
c001b339:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b33d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b341:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b345:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b349:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b34d:	68 10 fa 01 c0       	push   0xc001fa10
c001b352:	e8 88 e4 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b357:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b35d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b367:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b36d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b371:	c1 e0 07             	shl    eax,0x7
c001b374:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b378:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b37c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b386:	5a                   	pop    edx
c001b387:	59                   	pop    ecx
c001b388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b38c:	8d 58 02             	lea    ebx,[eax+0x2]
c001b38f:	c1 e3 07             	shl    ebx,0x7
c001b392:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b396:	53                   	push   ebx
c001b397:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b39d:	e8 7c ec ff ff       	call   c001a01e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b3a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	b8 01 00 00 00       	mov    eax,0x1
c001b3ae:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b3b3:	0f 84 ff 01 00 00    	je     c001b5b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b3b9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b3bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b3c7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b3cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3d1:	c1 e1 05             	shl    ecx,0x5
c001b3d4:	01 c8                	add    eax,ecx
c001b3d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3d8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b3de:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b3e4:	89 08                	mov    DWORD PTR [eax],ecx
c001b3e6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b3ec:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b3f2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b3f8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b3fb:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b3fe:	50                   	push   eax
c001b3ff:	68 90 00 00 00       	push   0x90
c001b404:	6a 00                	push   0x0
c001b406:	53                   	push   ebx
c001b407:	e8 9c 50 fe ff       	call   c00004a8 <memset>
c001b40c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b410:	b9 0c 00 00 00       	mov    ecx,0xc
c001b415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b417:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b41d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b421:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b427:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b42b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b42f:	48                   	dec    eax
c001b430:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b435:	89 c1                	mov    ecx,eax
c001b437:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b43d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b442:	09 c8                	or     eax,ecx
c001b444:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b44a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b44d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b454:	66 25 00 7f          	and    ax,0x7f00
c001b458:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b45c:	66 0d 27 80          	or     ax,0x8027
c001b460:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b464:	66 89 03             	mov    WORD PTR [ebx],ax
c001b467:	89 d0                	mov    eax,edx
c001b469:	c1 ea 18             	shr    edx,0x18
c001b46c:	c1 e8 10             	shr    eax,0x10
c001b46f:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b472:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b475:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b479:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b47c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b480:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b483:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b48e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b492:	31 c0                	xor    eax,eax
c001b494:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b49a:	80 e1 88             	and    cl,0x88
c001b49d:	74 0a                	je     c001b4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b49f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b4a4:	74 0a                	je     c001b4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b4a6:	40                   	inc    eax
c001b4a7:	eb eb                	jmp    c001b494 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b4a9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b4ae:	75 0a                	jne    c001b4ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	68 2a fa 01 c0       	push   0xc001fa2a
c001b4b8:	eb 43                	jmp    c001b4fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b4ba:	be 01 00 00 00       	mov    esi,0x1
c001b4bf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b4c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b4c7:	d3 e6                	shl    esi,cl
c001b4c9:	c1 e7 07             	shl    edi,0x7
c001b4cc:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b4d2:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001b4d7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b4db:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b4e1:	85 c6                	test   esi,eax
c001b4e3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b4e9:	0f 84 96 00 00 00    	je     c001b585 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001b4ef:	0f ba e0 1e          	bt     eax,0x1e
c001b4f3:	73 1a                	jae    c001b50f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001b4f5:	83 ec 0c             	sub    esp,0xc
c001b4f8:	68 3f fa 01 c0       	push   0xc001fa3f
c001b4fd:	e8 dd e2 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	b8 01 00 00 00       	mov    eax,0x1
c001b50a:	e9 a9 00 00 00       	jmp    c001b5b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b50f:	83 fb 0d             	cmp    ebx,0xd
c001b512:	77 12                	ja     c001b526 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	68 c8 00 00 00       	push   0xc8
c001b51c:	e8 0f 77 ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	eb 2a                	jmp    c001b550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b526:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001b52c:	83 f8 0d             	cmp    eax,0xd
c001b52f:	77 0a                	ja     c001b53b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001b531:	83 ec 0c             	sub    esp,0xc
c001b534:	68 58 02 00 00       	push   0x258
c001b539:	eb 28                	jmp    c001b563 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b53b:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001b541:	83 f8 0d             	cmp    eax,0xd
c001b544:	77 0a                	ja     c001b550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	68 dc 05 00 00       	push   0x5dc
c001b54e:	eb 13                	jmp    c001b563 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b550:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001b556:	83 f8 0d             	cmp    eax,0xd
c001b559:	77 10                	ja     c001b56b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001b55b:	83 ec 0c             	sub    esp,0xc
c001b55e:	68 c4 09 00 00       	push   0x9c4
c001b563:	e8 c8 76 ff ff       	call   c0012c30 <milliTenthSleep(unsigned int)>
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	43                   	inc    ebx
c001b56c:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001b572:	0f 85 63 ff ff ff    	jne    c001b4db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	68 52 fa 01 c0       	push   0xc001fa52
c001b580:	e9 78 ff ff ff       	jmp    c001b4fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b585:	0f ba e0 1e          	bt     eax,0x1e
c001b589:	73 0d                	jae    c001b598 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b58b:	83 ec 0c             	sub    esp,0xc
c001b58e:	68 66 fa 01 c0       	push   0xc001fa66
c001b593:	e9 65 ff ff ff       	jmp    c001b4fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b598:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b59d:	74 17                	je     c001b5b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b59f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b5a4:	74 10                	je     c001b5b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b5a6:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b5ac:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b5b0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b5b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5b6:	31 c0                	xor    eax,eax
c001b5b8:	83 c4 2c             	add    esp,0x2c
c001b5bb:	5b                   	pop    ebx
c001b5bc:	5e                   	pop    esi
c001b5bd:	5f                   	pop    edi
c001b5be:	5d                   	pop    ebp
c001b5bf:	c3                   	ret    

c001b5c0 <SATAPI::eject()>:
c001b5c0:	57                   	push   edi
c001b5c1:	b9 03 00 00 00       	mov    ecx,0x3
c001b5c6:	83 ec 18             	sub    esp,0x18
c001b5c9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5cd:	fc                   	cld    
c001b5ce:	31 c0                	xor    eax,eax
c001b5d0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b5d2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b5d7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b5dc:	50                   	push   eax
c001b5dd:	6a 00                	push   0x0
c001b5df:	6a 00                	push   0x0
c001b5e1:	6a 00                	push   0x0
c001b5e3:	6a 00                	push   0x0
c001b5e5:	6a 02                	push   0x2
c001b5e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b5eb:	50                   	push   eax
c001b5ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b5f0:	e8 3d fd ff ff       	call   c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b5f5:	31 c0                	xor    eax,eax
c001b5f7:	83 c4 38             	add    esp,0x38
c001b5fa:	5f                   	pop    edi
c001b5fb:	c3                   	ret    

c001b5fc <SATAPI::detectMedia()>:
c001b5fc:	56                   	push   esi
c001b5fd:	53                   	push   ebx
c001b5fe:	83 ec 30             	sub    esp,0x30
c001b601:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b605:	68 7b fa 01 c0       	push   0xc001fa7b
c001b60a:	e8 d0 e1 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b60f:	83 c4 0c             	add    esp,0xc
c001b612:	6a 0c                	push   0xc
c001b614:	6a 00                	push   0x0
c001b616:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001b61a:	56                   	push   esi
c001b61b:	e8 88 4e fe ff       	call   c00004a8 <memset>
c001b620:	83 c4 0c             	add    esp,0xc
c001b623:	6a 00                	push   0x0
c001b625:	6a 00                	push   0x0
c001b627:	6a 00                	push   0x0
c001b629:	6a 00                	push   0x0
c001b62b:	6a 00                	push   0x0
c001b62d:	56                   	push   esi
c001b62e:	53                   	push   ebx
c001b62f:	e8 fe fc ff ff       	call   c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b634:	83 c4 20             	add    esp,0x20
c001b637:	48                   	dec    eax
c001b638:	74 34                	je     c001b66e <SATAPI::detectMedia()+0x72>
c001b63a:	50                   	push   eax
c001b63b:	6a 0c                	push   0xc
c001b63d:	6a 00                	push   0x0
c001b63f:	56                   	push   esi
c001b640:	e8 63 4e fe ff       	call   c00004a8 <memset>
c001b645:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001b64a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001b64f:	83 c4 0c             	add    esp,0xc
c001b652:	6a 01                	push   0x1
c001b654:	8d 44 24 16          	lea    eax,[esp+0x16]
c001b658:	50                   	push   eax
c001b659:	6a 00                	push   0x0
c001b65b:	6a 00                	push   0x0
c001b65d:	6a 12                	push   0x12
c001b65f:	56                   	push   esi
c001b660:	53                   	push   ebx
c001b661:	e8 cc fc ff ff       	call   c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b666:	83 c4 20             	add    esp,0x20
c001b669:	48                   	dec    eax
c001b66a:	75 39                	jne    c001b6a5 <SATAPI::detectMedia()+0xa9>
c001b66c:	eb 1e                	jmp    c001b68c <SATAPI::detectMedia()+0x90>
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	68 8f fa 01 c0       	push   0xc001fa8f
c001b676:	e8 64 e1 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b685:	74 b3                	je     c001b63a <SATAPI::detectMedia()+0x3e>
c001b687:	e9 93 00 00 00       	jmp    c001b71f <SATAPI::detectMedia()+0x123>
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	68 99 fa 01 c0       	push   0xc001fa99
c001b694:	e8 46 e1 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b6a3:	75 7a                	jne    c001b71f <SATAPI::detectMedia()+0x123>
c001b6a5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b6a9:	83 e0 7f             	and    eax,0x7f
c001b6ac:	3c 70                	cmp    al,0x70
c001b6ae:	74 25                	je     c001b6d5 <SATAPI::detectMedia()+0xd9>
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	68 a3 fa 01 c0       	push   0xc001faa3
c001b6b8:	e8 22 e1 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b6c7:	75 0c                	jne    c001b6d5 <SATAPI::detectMedia()+0xd9>
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	53                   	push   ebx
c001b6cd:	e8 44 fc ff ff       	call   c001b316 <SATAPI::diskInserted()>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b6d9:	83 e0 0f             	and    eax,0xf
c001b6dc:	3c 02                	cmp    al,0x2
c001b6de:	75 16                	jne    c001b6f6 <SATAPI::detectMedia()+0xfa>
c001b6e0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001b6e5:	75 38                	jne    c001b71f <SATAPI::detectMedia()+0x123>
c001b6e7:	83 ec 0c             	sub    esp,0xc
c001b6ea:	68 ac fa 01 c0       	push   0xc001faac
c001b6ef:	e8 eb e0 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b6f4:	eb 26                	jmp    c001b71c <SATAPI::detectMedia()+0x120>
c001b6f6:	84 c0                	test   al,al
c001b6f8:	75 25                	jne    c001b71f <SATAPI::detectMedia()+0x123>
c001b6fa:	83 ec 0c             	sub    esp,0xc
c001b6fd:	68 b5 fa 01 c0       	push   0xc001fab5
c001b702:	e8 d8 e0 fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b711:	75 0c                	jne    c001b71f <SATAPI::detectMedia()+0x123>
c001b713:	83 ec 0c             	sub    esp,0xc
c001b716:	53                   	push   ebx
c001b717:	e8 fa fb ff ff       	call   c001b316 <SATAPI::diskInserted()>
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	83 c4 24             	add    esp,0x24
c001b722:	5b                   	pop    ebx
c001b723:	5e                   	pop    esi
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <SATAPI::open(int, int, void*)>:
c001b726:	56                   	push   esi
c001b727:	53                   	push   ebx
c001b728:	51                   	push   ecx
c001b729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b72d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b731:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b73b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b741:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b74b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b74f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b759:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b75f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b766:	e8 b1 b6 fe ff       	call   c0006e1c <Phys::allocatePage()>
c001b76b:	89 c6                	mov    esi,eax
c001b76d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b773:	81 c6 00 10 00 00    	add    esi,0x1000
c001b779:	e8 9e b6 fe ff       	call   c0006e1c <Phys::allocatePage()>
c001b77e:	39 c6                	cmp    esi,eax
c001b780:	74 10                	je     c001b792 <SATAPI::open(int, int, void*)+0x6c>
c001b782:	83 ec 0c             	sub    esp,0xc
c001b785:	68 bf fa 01 c0       	push   0xc001fabf
c001b78a:	e8 26 3d ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	83 ec 0c             	sub    esp,0xc
c001b795:	6a 02                	push   0x2
c001b797:	e8 e1 cd fe ff       	call   c000857d <Virt::allocateKernelVirtualPages(int)>
c001b79c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b7a2:	6a 03                	push   0x3
c001b7a4:	50                   	push   eax
c001b7a5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b7ab:	ff 35 54 05 02 c0    	push   DWORD PTR ds:0xc0020554
c001b7b1:	e8 1a d4 fe ff       	call   c0008bd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b7b6:	83 c4 14             	add    esp,0x14
c001b7b9:	68 74 01 00 00       	push   0x174
c001b7be:	e8 92 b2 fe ff       	call   c0006a55 <malloc>
c001b7c3:	83 c4 0c             	add    esp,0xc
c001b7c6:	89 c6                	mov    esi,eax
c001b7c8:	6a 00                	push   0x0
c001b7ca:	68 ff ff ff 7f       	push   0x7fffffff
c001b7cf:	6a 00                	push   0x0
c001b7d1:	6a 00                	push   0x0
c001b7d3:	53                   	push   ebx
c001b7d4:	68 d5 fa 01 c0       	push   0xc001fad5
c001b7d9:	50                   	push   eax
c001b7da:	e8 75 04 ff ff       	call   c000bc54 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b7df:	83 c4 14             	add    esp,0x14
c001b7e2:	56                   	push   esi
c001b7e3:	e8 22 05 ff ff       	call   c000bd0a <LogicalDisk::assignDriveLetter()>
c001b7e8:	5a                   	pop    edx
c001b7e9:	0f be c0             	movsx  eax,al
c001b7ec:	59                   	pop    ecx
c001b7ed:	50                   	push   eax
c001b7ee:	68 f0 f8 01 c0       	push   0xc001f8f0
c001b7f3:	e8 e7 df fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b7f8:	58                   	pop    eax
c001b7f9:	5a                   	pop    edx
c001b7fa:	56                   	push   esi
c001b7fb:	53                   	push   ebx
c001b7fc:	e8 01 f4 fe ff       	call   c000ac02 <Device::addChild(Device*)>
c001b801:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b80a:	e8 27 f8 fe ff       	call   c000b036 <PhysicalDisk::startCache()>
c001b80f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b816:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b819:	e8 de fd ff ff       	call   c001b5fc <SATAPI::detectMedia()>
c001b81e:	83 c4 14             	add    esp,0x14
c001b821:	31 c0                	xor    eax,eax
c001b823:	5b                   	pop    ebx
c001b824:	5e                   	pop    esi
c001b825:	c3                   	ret    

c001b826 <SATAPI::read(unsigned long long, int, void*)>:
c001b826:	55                   	push   ebp
c001b827:	57                   	push   edi
c001b828:	56                   	push   esi
c001b829:	53                   	push   ebx
c001b82a:	83 ec 48             	sub    esp,0x48
c001b82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b831:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001b835:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001b839:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b83d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b841:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b845:	68 e3 fa 01 c0       	push   0xc001fae3
c001b84a:	e8 90 df fe ff       	call   c00097df <Dbg::kprintf(char const*, ...)>
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	83 fb 04             	cmp    ebx,0x4
c001b855:	7e 10                	jle    c001b867 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001b857:	83 ec 0c             	sub    esp,0xc
c001b85a:	68 f4 fa 01 c0       	push   0xc001faf4
c001b85f:	e8 51 3c ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001b864:	83 c4 10             	add    esp,0x10
c001b867:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001b86b:	31 ed                	xor    ebp,ebp
c001b86d:	b9 03 00 00 00       	mov    ecx,0x3
c001b872:	fc                   	cld    
c001b873:	89 e8                	mov    eax,ebp
c001b875:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b877:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001b87c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001b881:	50                   	push   eax
c001b882:	6a 00                	push   0x0
c001b884:	6a 00                	push   0x0
c001b886:	6a 00                	push   0x0
c001b888:	6a 00                	push   0x0
c001b88a:	6a 02                	push   0x2
c001b88c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b890:	50                   	push   eax
c001b891:	56                   	push   esi
c001b892:	e8 9b fa ff ff       	call   c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b897:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001b89b:	89 e8                	mov    eax,ebp
c001b89d:	b9 03 00 00 00       	mov    ecx,0x3
c001b8a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b8a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8a8:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001b8ac:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001b8b1:	86 e0                	xchg   al,ah
c001b8b3:	c1 c0 10             	rol    eax,0x10
c001b8b6:	86 e0                	xchg   al,ah
c001b8b8:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001b8bc:	83 c4 1c             	add    esp,0x1c
c001b8bf:	53                   	push   ebx
c001b8c0:	c1 e3 0b             	shl    ebx,0xb
c001b8c3:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001b8c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8cf:	53                   	push   ebx
c001b8d0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b8d4:	50                   	push   eax
c001b8d5:	56                   	push   esi
c001b8d6:	e8 57 fa ff ff       	call   c001b332 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b8db:	83 c4 20             	add    esp,0x20
c001b8de:	85 c0                	test   eax,eax
c001b8e0:	74 14                	je     c001b8f6 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c001b8e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8e6:	83 ec 0c             	sub    esp,0xc
c001b8e9:	56                   	push   esi
c001b8ea:	e8 0d fd ff ff       	call   c001b5fc <SATAPI::detectMedia()>
c001b8ef:	83 c4 10             	add    esp,0x10
c001b8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8f6:	83 c4 3c             	add    esp,0x3c
c001b8f9:	5b                   	pop    ebx
c001b8fa:	5e                   	pop    esi
c001b8fb:	5f                   	pop    edi
c001b8fc:	5d                   	pop    ebp
c001b8fd:	c3                   	ret    

c001b8fe <IOAPIC::close(int, int, void*)>:
c001b8fe:	b8 00 00 00 00       	mov    eax,0x0
c001b903:	c3                   	ret    

c001b904 <apicGetBase()>:
c001b904:	55                   	push   ebp
c001b905:	89 e5                	mov    ebp,esp
c001b907:	83 ec 18             	sub    esp,0x18
c001b90a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001b90f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001b915:	83 e0 08             	and    eax,0x8
c001b918:	84 c0                	test   al,al
c001b91a:	75 07                	jne    c001b923 <apicGetBase()+0x1f>
c001b91c:	b8 00 00 00 00       	mov    eax,0x0
c001b921:	eb 21                	jmp    c001b944 <apicGetBase()+0x40>
c001b923:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001b928:	83 ec 08             	sub    esp,0x8
c001b92b:	6a 1b                	push   0x1b
c001b92d:	50                   	push   eax
c001b92e:	e8 f3 a6 fe ff       	call   c0006026 <Computer::rdmsr(unsigned int)>
c001b933:	83 c4 10             	add    esp,0x10
c001b936:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b939:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b93c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b93f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b944:	c9                   	leave  
c001b945:	c3                   	ret    

c001b946 <IOAPIC::IOAPIC()>:
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94d:	83 ec 08             	sub    esp,0x8
c001b950:	68 58 fb 01 c0       	push   0xc001fb58
c001b955:	50                   	push   eax
c001b956:	e8 3f f4 fe ff       	call   c000ad9a <Device::Device(char const*)>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	ba 68 fb 01 c0       	mov    edx,0xc001fb68
c001b963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b967:	89 10                	mov    DWORD PTR [eax],edx
c001b969:	90                   	nop
c001b96a:	83 c4 0c             	add    esp,0xc
c001b96d:	c3                   	ret    

c001b96e <apicOpen()>:
c001b96e:	55                   	push   ebp
c001b96f:	89 e5                	mov    ebp,esp
c001b971:	53                   	push   ebx
c001b972:	83 ec 34             	sub    esp,0x34
c001b975:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c001b97a:	83 f0 01             	xor    eax,0x1
c001b97d:	84 c0                	test   al,al
c001b97f:	0f 84 91 00 00 00    	je     c001ba16 <apicOpen()+0xa8>
c001b985:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b989:	a0 40 2d 02 c0       	mov    al,ds:0xc0022d40
c001b98e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b991:	73 7c                	jae    c001ba0f <apicOpen()+0xa1>
c001b993:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b9a0:	e8 b0 b0 fe ff       	call   c0006a55 <malloc>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	89 c3                	mov    ebx,eax
c001b9aa:	83 ec 0c             	sub    esp,0xc
c001b9ad:	53                   	push   ebx
c001b9ae:	e8 93 ff ff ff       	call   c001b946 <IOAPIC::IOAPIC()>
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b9b9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001b9bd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b9c0:	89 14 85 c0 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc40],edx
c001b9c7:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c001b9cc:	40                   	inc    eax
c001b9cd:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c001b9d2:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c001b9d7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b9dd:	83 ec 08             	sub    esp,0x8
c001b9e0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b9e3:	50                   	push   eax
c001b9e4:	e8 19 f2 fe ff       	call   c000ac02 <Device::addChild(Device*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b9ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f1:	83 c0 08             	add    eax,0x8
c001b9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f6:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001b9fa:	6a 00                	push   0x0
c001b9fc:	6a 00                	push   0x0
c001b9fe:	52                   	push   edx
c001b9ff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ba02:	ff d0                	call   eax
c001ba04:	83 c4 10             	add    esp,0x10
c001ba07:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001ba0a:	e9 7a ff ff ff       	jmp    c001b989 <apicOpen()+0x1b>
c001ba0f:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c001ba16:	e8 e9 fe ff ff       	call   c001b904 <apicGetBase()>
c001ba1b:	05 f0 00 00 00       	add    eax,0xf0
c001ba20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba23:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ba26:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba28:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ba2b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ba32:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ba39:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ba3c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ba3f:	89 10                	mov    DWORD PTR [eax],edx
c001ba41:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ba48:	a1 90 2c 02 c0       	mov    eax,ds:0xc0022c90
c001ba4d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ba50:	7d 70                	jge    c001bac2 <apicOpen()+0x154>
c001ba52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ba55:	8b 04 85 a0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd360]
c001ba5c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ba5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ba62:	8b 04 85 a0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd360]
c001ba69:	c1 e8 08             	shr    eax,0x8
c001ba6c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ba70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ba73:	8b 04 85 a0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd360]
c001ba7a:	c1 e8 18             	shr    eax,0x18
c001ba7d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ba80:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ba84:	75 37                	jne    c001babd <apicOpen()+0x14f>
c001ba86:	e8 79 fe ff ff       	call   c001b904 <apicGetBase()>
c001ba8b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ba8f:	75 07                	jne    c001ba98 <apicOpen()+0x12a>
c001ba91:	ba 60 03 00 00       	mov    edx,0x360
c001ba96:	eb 05                	jmp    c001ba9d <apicOpen()+0x12f>
c001ba98:	ba 50 03 00 00       	mov    edx,0x350
c001ba9d:	01 d0                	add    eax,edx
c001ba9f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001baa2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001baa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001baaa:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bab1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bab5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bab8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001babb:	89 10                	mov    DWORD PTR [eax],edx
c001babd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bac0:	eb 86                	jmp    c001ba48 <apicOpen()+0xda>
c001bac2:	90                   	nop
c001bac3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bac6:	c9                   	leave  
c001bac7:	c3                   	ret    

c001bac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bac8:	55                   	push   ebp
c001bac9:	89 e5                	mov    ebp,esp
c001bacb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bad4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bad7:	72 1d                	jb     c001baf6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001badc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001bae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bae5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001baeb:	01 d0                	add    eax,edx
c001baed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001baf0:	73 04                	jae    c001baf6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001baf2:	b0 01                	mov    al,0x1
c001baf4:	eb 02                	jmp    c001baf8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001baf6:	b0 00                	mov    al,0x0
c001baf8:	5d                   	pop    ebp
c001baf9:	c3                   	ret    

c001bafa <IOAPIC::read(int)>:
c001bafa:	55                   	push   ebp
c001bafb:	89 e5                	mov    ebp,esp
c001bafd:	83 ec 10             	sub    esp,0x10
c001bb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bb0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bb0f:	0f b6 d0             	movzx  edx,al
c001bb12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bb15:	89 10                	mov    DWORD PTR [eax],edx
c001bb17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bb1a:	83 c0 10             	add    eax,0x10
c001bb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb1f:	c9                   	leave  
c001bb20:	c3                   	ret    
c001bb21:	90                   	nop

c001bb22 <IOAPIC::open(int, int, void*)>:
c001bb22:	55                   	push   ebp
c001bb23:	89 e5                	mov    ebp,esp
c001bb25:	57                   	push   edi
c001bb26:	56                   	push   esi
c001bb27:	53                   	push   ebx
c001bb28:	83 ec 04             	sub    esp,0x4
c001bb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bb31:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bb37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb40:	8b 14 85 80 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd280]
c001bb47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb4a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb59:	8b 14 85 00 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd200]
c001bb60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb63:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bb69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb6c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bb7b:	0f b6 f0             	movzx  esi,al
c001bb7e:	89 d0                	mov    eax,edx
c001bb80:	ba 00 00 00 00       	mov    edx,0x0
c001bb85:	89 c7                	mov    edi,eax
c001bb87:	83 e7 ff             	and    edi,0xffffffff
c001bb8a:	89 f9                	mov    ecx,edi
c001bb8c:	0f b6 da             	movzx  ebx,dl
c001bb8f:	89 c8                	mov    eax,ecx
c001bb91:	89 da                	mov    edx,ebx
c001bb93:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bb96:	8d 5e 08             	lea    ebx,[esi+0x8]
c001bb99:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001bb9d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001bba1:	83 e0 00             	and    eax,0x0
c001bba4:	09 d0                	or     eax,edx
c001bba6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001bbaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bbb3:	8d 50 01             	lea    edx,[eax+0x1]
c001bbb6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bbb9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bbbf:	0f b6 d0             	movzx  edx,al
c001bbc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbc5:	83 c2 08             	add    edx,0x8
c001bbc8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bbcc:	0f b6 c9             	movzx  ecx,cl
c001bbcf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001bbd5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bbd9:	6a 01                	push   0x1
c001bbdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bbde:	e8 17 ff ff ff       	call   c001bafa <IOAPIC::read(int)>
c001bbe3:	83 c4 08             	add    esp,0x8
c001bbe6:	c1 f8 10             	sar    eax,0x10
c001bbe9:	0f b6 c0             	movzx  eax,al
c001bbec:	8d 50 01             	lea    edx,[eax+0x1]
c001bbef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbf2:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bbf8:	b8 00 00 00 00       	mov    eax,0x0
c001bbfd:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bc00:	5b                   	pop    ebx
c001bc01:	5e                   	pop    esi
c001bc02:	5f                   	pop    edi
c001bc03:	5d                   	pop    ebp
c001bc04:	c3                   	ret    
c001bc05:	90                   	nop

c001bc06 <IOAPIC::write(int, int)>:
c001bc06:	55                   	push   ebp
c001bc07:	89 e5                	mov    ebp,esp
c001bc09:	83 ec 10             	sub    esp,0x10
c001bc0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc15:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bc18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc1b:	0f b6 d0             	movzx  edx,al
c001bc1e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bc21:	89 10                	mov    DWORD PTR [eax],edx
c001bc23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bc26:	8d 50 10             	lea    edx,[eax+0x10]
c001bc29:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc2c:	89 02                	mov    DWORD PTR [edx],eax
c001bc2e:	90                   	nop
c001bc2f:	c9                   	leave  
c001bc30:	c3                   	ret    
c001bc31:	90                   	nop

c001bc32 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bc32:	55                   	push   ebp
c001bc33:	89 e5                	mov    ebp,esp
c001bc35:	53                   	push   ebx
c001bc36:	83 ec 2c             	sub    esp,0x2c
c001bc39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc3c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bc3f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bc42:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bc45:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bc48:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc4b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bc4e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bc51:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bc54:	88 d8                	mov    al,bl
c001bc56:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bc59:	88 c8                	mov    al,cl
c001bc5b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bc5e:	88 d0                	mov    al,dl
c001bc60:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bc63:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc67:	83 c0 08             	add    eax,0x8
c001bc6a:	01 c0                	add    eax,eax
c001bc6c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc73:	83 c0 08             	add    eax,0x8
c001bc76:	01 c0                	add    eax,eax
c001bc78:	40                   	inc    eax
c001bc79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bc7c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bc7f:	50                   	push   eax
c001bc80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bc83:	e8 72 fe ff ff       	call   c001bafa <IOAPIC::read(int)>
c001bc88:	83 c4 08             	add    esp,0x8
c001bc8b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bc8e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bc95:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bc98:	c1 e0 18             	shl    eax,0x18
c001bc9b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bc9e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bca1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bca4:	52                   	push   edx
c001bca5:	50                   	push   eax
c001bca6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bca9:	e8 58 ff ff ff       	call   c001bc06 <IOAPIC::write(int, int)>
c001bcae:	83 c4 0c             	add    esp,0xc
c001bcb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bcb4:	50                   	push   eax
c001bcb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bcb8:	e8 3d fe ff ff       	call   c001bafa <IOAPIC::read(int)>
c001bcbd:	83 c4 08             	add    esp,0x8
c001bcc0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bcc3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bcca:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bcd1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bcd8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bcdc:	74 09                	je     c001bce7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001bcde:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001bce5:	eb 07                	jmp    c001bcee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001bce7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bcee:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bcf2:	74 09                	je     c001bcfd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001bcf4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001bcfb:	eb 07                	jmp    c001bd04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001bcfd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bd04:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bd0b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001bd0f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bd12:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001bd15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd18:	52                   	push   edx
c001bd19:	50                   	push   eax
c001bd1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bd1d:	e8 e4 fe ff ff       	call   c001bc06 <IOAPIC::write(int, int)>
c001bd22:	83 c4 0c             	add    esp,0xc
c001bd25:	90                   	nop
c001bd26:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bd29:	c9                   	leave  
c001bd2a:	c3                   	ret    
c001bd2b:	90                   	nop

c001bd2c <APICTimer::close(int, int, void*)>:
c001bd2c:	b8 00 00 00 00       	mov    eax,0x0
c001bd31:	c3                   	ret    
c001bd32:	66 90                	xchg   ax,ax

c001bd34 <apicTimerHandler(regs*, void*)>:
c001bd34:	83 ec 0c             	sub    esp,0xc
c001bd37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd3d:	b8 10 27 00 00       	mov    eax,0x2710
c001bd42:	ba 00 00 00 00       	mov    edx,0x0
c001bd47:	f7 f1                	div    ecx
c001bd49:	83 ec 0c             	sub    esp,0xc
c001bd4c:	50                   	push   eax
c001bd4d:	e8 1e 07 ff ff       	call   c000c470 <timerHandler(unsigned int)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	90                   	nop
c001bd56:	83 c4 0c             	add    esp,0xc
c001bd59:	c3                   	ret    
c001bd5a:	66 90                	xchg   ax,ax

c001bd5c <APICTimer::open(int, int, void*)>:
c001bd5c:	83 ec 0c             	sub    esp,0xc
c001bd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd63:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd65:	83 c0 24             	add    eax,0x24
c001bd68:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd6a:	83 ec 08             	sub    esp,0x8
c001bd6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd75:	ff d0                	call   eax
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bd82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd90:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001bd96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd9a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bda0:	83 ec 0c             	sub    esp,0xc
c001bda3:	51                   	push   ecx
c001bda4:	6a 01                	push   0x1
c001bda6:	68 34 bd 01 c0       	push   0xc001bd34
c001bdab:	52                   	push   edx
c001bdac:	50                   	push   eax
c001bdad:	e8 fc ed fe ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdb2:	83 c4 20             	add    esp,0x20
c001bdb5:	89 c2                	mov    edx,eax
c001bdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bdc1:	b8 00 00 00 00       	mov    eax,0x0
c001bdc6:	83 c4 0c             	add    esp,0xc
c001bdc9:	c3                   	ret    
c001bdca:	66 90                	xchg   ax,ax

c001bdcc <APICTimer::write(int)>:
c001bdcc:	83 ec 0c             	sub    esp,0xc
c001bdcf:	83 ec 0c             	sub    esp,0xc
c001bdd2:	68 8c fb 01 c0       	push   0xc001fb8c
c001bdd7:	e8 d9 36 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bde7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bded:	90                   	nop
c001bdee:	83 c4 0c             	add    esp,0xc
c001bdf1:	c3                   	ret    
c001bdf2:	66 90                	xchg   ax,ax

c001bdf4 <APICTimer::APICTimer()>:
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfb:	83 ec 08             	sub    esp,0x8
c001bdfe:	68 9c fb 01 c0       	push   0xc001fb9c
c001be03:	50                   	push   eax
c001be04:	e8 9b 05 ff ff       	call   c000c3a4 <Timer::Timer(char const*)>
c001be09:	83 c4 10             	add    esp,0x10
c001be0c:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c001be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be15:	89 10                	mov    DWORD PTR [eax],edx
c001be17:	90                   	nop
c001be18:	83 c4 0c             	add    esp,0xc
c001be1b:	c3                   	ret    

c001be1c <PIT::write(int)>:
c001be1c:	83 ec 10             	sub    esp,0x10
c001be1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001be2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be31:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c001be36:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001be3b:	99                   	cdq    
c001be3c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001be40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be44:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001be4b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001be50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001be54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001be59:	ee                   	out    dx,al
c001be5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be5e:	0f b6 c0             	movzx  eax,al
c001be61:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001be68:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001be6c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001be70:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001be75:	ee                   	out    dx,al
c001be76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be7a:	c1 f8 08             	sar    eax,0x8
c001be7d:	0f b6 c0             	movzx  eax,al
c001be80:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001be87:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001be8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001be8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001be94:	ee                   	out    dx,al
c001be95:	90                   	nop
c001be96:	83 c4 10             	add    esp,0x10
c001be99:	c3                   	ret    
c001be9a:	66 90                	xchg   ax,ax

c001be9c <pitHandler(regs*, void*)>:
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	8b 0d e4 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243e4
c001bea5:	b8 10 27 00 00       	mov    eax,0x2710
c001beaa:	99                   	cdq    
c001beab:	f7 f9                	idiv   ecx
c001bead:	83 ec 0c             	sub    esp,0xc
c001beb0:	50                   	push   eax
c001beb1:	e8 ba 05 ff ff       	call   c000c470 <timerHandler(unsigned int)>
c001beb6:	83 c4 10             	add    esp,0x10
c001beb9:	90                   	nop
c001beba:	83 c4 0c             	add    esp,0xc
c001bebd:	c3                   	ret    
c001bebe:	66 90                	xchg   ax,ax

c001bec0 <PIT::open(int, int, void*)>:
c001bec0:	83 ec 0c             	sub    esp,0xc
c001bec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bec9:	83 c0 24             	add    eax,0x24
c001becc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bece:	83 ec 08             	sub    esp,0x8
c001bed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bed9:	ff d0                	call   eax
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee2:	83 ec 0c             	sub    esp,0xc
c001bee5:	6a 00                	push   0x0
c001bee7:	6a 01                	push   0x1
c001bee9:	68 9c be 01 c0       	push   0xc001be9c
c001beee:	6a 00                	push   0x0
c001bef0:	50                   	push   eax
c001bef1:	e8 b8 ec fe ff       	call   c000abae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bef6:	83 c4 20             	add    esp,0x20
c001bef9:	89 c2                	mov    edx,eax
c001befb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bf05:	b8 00 00 00 00       	mov    eax,0x0
c001bf0a:	83 c4 0c             	add    esp,0xc
c001bf0d:	c3                   	ret    
c001bf0e:	66 90                	xchg   ax,ax

c001bf10 <PIT::close(int, int, void*)>:
c001bf10:	83 ec 0c             	sub    esp,0xc
c001bf13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf17:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bf21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf25:	6a 01                	push   0x1
c001bf27:	68 9c be 01 c0       	push   0xc001be9c
c001bf2c:	6a 00                	push   0x0
c001bf2e:	50                   	push   eax
c001bf2f:	e8 b0 ec fe ff       	call   c000abe4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bf34:	83 c4 10             	add    esp,0x10
c001bf37:	b8 00 00 00 00       	mov    eax,0x0
c001bf3c:	83 c4 0c             	add    esp,0xc
c001bf3f:	c3                   	ret    

c001bf40 <PIT::PIT()>:
c001bf40:	83 ec 0c             	sub    esp,0xc
c001bf43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf47:	83 ec 08             	sub    esp,0x8
c001bf4a:	68 d8 fb 01 c0       	push   0xc001fbd8
c001bf4f:	50                   	push   eax
c001bf50:	e8 4f 04 ff ff       	call   c000c3a4 <Timer::Timer(char const*)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c001bf5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf61:	89 10                	mov    DWORD PTR [eax],edx
c001bf63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf6d:	0f b6 d0             	movzx  edx,al
c001bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf74:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bf7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf85:	0f b6 d0             	movzx  edx,al
c001bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bf91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf9b:	8d 50 01             	lea    edx,[eax+0x1]
c001bf9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfa2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bfa8:	0f b6 d0             	movzx  edx,al
c001bfab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfaf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bfb3:	83 e1 3f             	and    ecx,0x3f
c001bfb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bfba:	90                   	nop
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	c3                   	ret    
c001bfbf:	90                   	nop

c001bfc0 <avxDetect>:
c001bfc0:	b8 01 00 00 00       	mov    eax,0x1
c001bfc5:	0f a2                	cpuid  
c001bfc7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bfcd:	74 15                	je     c001bfe4 <avxDetect.noAVX>
c001bfcf:	b8 01 00 00 00       	mov    eax,0x1
c001bfd4:	0f a2                	cpuid  
c001bfd6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bfdc:	74 06                	je     c001bfe4 <avxDetect.noAVX>
c001bfde:	b8 01 00 00 00       	mov    eax,0x1
c001bfe3:	c3                   	ret    

c001bfe4 <avxDetect.noAVX>:
c001bfe4:	b8 00 00 00 00       	mov    eax,0x0
c001bfe9:	c3                   	ret    

c001bfea <avxSave>:
c001bfea:	53                   	push   ebx
c001bfeb:	52                   	push   edx
c001bfec:	31 c0                	xor    eax,eax
c001bfee:	48                   	dec    eax
c001bfef:	89 c2                	mov    edx,eax
c001bff1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bff5:	0f ae 23             	xsave  [ebx]
c001bff8:	5a                   	pop    edx
c001bff9:	5b                   	pop    ebx
c001bffa:	c3                   	ret    

c001bffb <avxLoad>:
c001bffb:	53                   	push   ebx
c001bffc:	52                   	push   edx
c001bffd:	31 c0                	xor    eax,eax
c001bfff:	48                   	dec    eax
c001c000:	89 c2                	mov    edx,eax
c001c002:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c006:	0f ae 2b             	xrstor [ebx]
c001c009:	5a                   	pop    edx
c001c00a:	5b                   	pop    ebx
c001c00b:	c3                   	ret    

c001c00c <avxInit>:
c001c00c:	e8 57 02 00 00       	call   c001c268 <sseInit>
c001c011:	50                   	push   eax
c001c012:	51                   	push   ecx
c001c013:	0f 20 e0             	mov    eax,cr4
c001c016:	0d 00 00 04 00       	or     eax,0x40000
c001c01b:	0f 22 e0             	mov    cr4,eax
c001c01e:	31 c9                	xor    ecx,ecx
c001c020:	0f 01 d0             	xgetbv 
c001c023:	0d 07 00 00 00       	or     eax,0x7
c001c028:	0f 01 d1             	xsetbv 
c001c02b:	59                   	pop    ecx
c001c02c:	58                   	pop    eax
c001c02d:	c3                   	ret    

c001c02e <avxClose>:
c001c02e:	c3                   	ret    

c001c02f <wouldSheSayYes>:
c001c02f:	c3                   	ret    
c001c030:	49                   	dec    ecx
c001c031:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c035:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c039:	75 20                	jne    c001c05b <isr0+0xb>
c001c03b:	4e                   	dec    esi
c001c03c:	79 61                	jns    c001c09f <isr7+0x3>
c001c03e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c043:	66 90                	xchg   ax,ax
c001c045:	66 90                	xchg   ax,ax
c001c047:	66 90                	xchg   ax,ax
c001c049:	66 90                	xchg   ax,ax
c001c04b:	66 90                	xchg   ax,ax
c001c04d:	66 90                	xchg   ax,ax
c001c04f:	90                   	nop

c001c050 <isr0>:
c001c050:	fa                   	cli    
c001c051:	68 00 00 00 00       	push   0x0
c001c056:	68 00 00 00 00       	push   0x0
c001c05b:	e9 44 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c060 <isr1>:
c001c060:	fa                   	cli    
c001c061:	6a 00                	push   0x0
c001c063:	6a 01                	push   0x1
c001c065:	e9 3a 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c06a <isr2>:
c001c06a:	fa                   	cli    
c001c06b:	6a 00                	push   0x0
c001c06d:	6a 02                	push   0x2
c001c06f:	e9 30 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c074 <isr3>:
c001c074:	fa                   	cli    
c001c075:	6a 00                	push   0x0
c001c077:	6a 03                	push   0x3
c001c079:	e9 26 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c07e <isr4>:
c001c07e:	fa                   	cli    
c001c07f:	6a 00                	push   0x0
c001c081:	6a 04                	push   0x4
c001c083:	e9 1c 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c088 <isr5>:
c001c088:	fa                   	cli    
c001c089:	6a 00                	push   0x0
c001c08b:	6a 05                	push   0x5
c001c08d:	e9 12 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c092 <isr6>:
c001c092:	fa                   	cli    
c001c093:	6a 00                	push   0x0
c001c095:	6a 06                	push   0x6
c001c097:	e9 08 01 00 00       	jmp    c001c1a4 <int_common_stub>

c001c09c <isr7>:
c001c09c:	fa                   	cli    
c001c09d:	6a 00                	push   0x0
c001c09f:	6a 07                	push   0x7
c001c0a1:	e9 fe 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0a6 <isr8>:
c001c0a6:	fa                   	cli    
c001c0a7:	6a 08                	push   0x8
c001c0a9:	e9 f6 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0ae <isr9>:
c001c0ae:	fa                   	cli    
c001c0af:	6a 00                	push   0x0
c001c0b1:	6a 09                	push   0x9
c001c0b3:	e9 ec 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0b8 <isr10>:
c001c0b8:	fa                   	cli    
c001c0b9:	6a 0a                	push   0xa
c001c0bb:	e9 e4 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0c0 <isr11>:
c001c0c0:	fa                   	cli    
c001c0c1:	6a 0b                	push   0xb
c001c0c3:	e9 dc 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0c8 <isr12>:
c001c0c8:	fa                   	cli    
c001c0c9:	6a 0c                	push   0xc
c001c0cb:	e9 d4 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0d0 <isr13>:
c001c0d0:	fa                   	cli    
c001c0d1:	6a 0d                	push   0xd
c001c0d3:	e9 cc 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0d8 <isr14>:
c001c0d8:	fa                   	cli    
c001c0d9:	6a 0e                	push   0xe
c001c0db:	e9 c4 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0e0 <isr15>:
c001c0e0:	fa                   	cli    
c001c0e1:	6a 00                	push   0x0
c001c0e3:	6a 0f                	push   0xf
c001c0e5:	e9 ba 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0ea <isr16>:
c001c0ea:	fa                   	cli    
c001c0eb:	6a 00                	push   0x0
c001c0ed:	6a 10                	push   0x10
c001c0ef:	e9 b0 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0f4 <isr17>:
c001c0f4:	fa                   	cli    
c001c0f5:	6a 00                	push   0x0
c001c0f7:	6a 11                	push   0x11
c001c0f9:	e9 a6 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c0fe <isr18>:
c001c0fe:	fa                   	cli    
c001c0ff:	6a 00                	push   0x0
c001c101:	6a 12                	push   0x12
c001c103:	e9 9c 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c108 <irq3>:
c001c108:	fa                   	cli    
c001c109:	6a 00                	push   0x0
c001c10b:	6a 23                	push   0x23
c001c10d:	e9 92 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c112 <irq4>:
c001c112:	fa                   	cli    
c001c113:	6a 00                	push   0x0
c001c115:	6a 24                	push   0x24
c001c117:	e9 88 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c11c <irq5>:
c001c11c:	fa                   	cli    
c001c11d:	6a 00                	push   0x0
c001c11f:	6a 25                	push   0x25
c001c121:	e9 7e 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c126 <irq6>:
c001c126:	fa                   	cli    
c001c127:	6a 00                	push   0x0
c001c129:	6a 26                	push   0x26
c001c12b:	e9 74 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c130 <irq7>:
c001c130:	fa                   	cli    
c001c131:	6a 00                	push   0x0
c001c133:	6a 27                	push   0x27
c001c135:	e9 6a 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c13a <irq8>:
c001c13a:	fa                   	cli    
c001c13b:	6a 00                	push   0x0
c001c13d:	6a 28                	push   0x28
c001c13f:	e9 60 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c144 <irq9>:
c001c144:	fa                   	cli    
c001c145:	6a 00                	push   0x0
c001c147:	6a 29                	push   0x29
c001c149:	e9 56 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c14e <irq10>:
c001c14e:	fa                   	cli    
c001c14f:	6a 00                	push   0x0
c001c151:	6a 2a                	push   0x2a
c001c153:	e9 4c 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c158 <irq11>:
c001c158:	fa                   	cli    
c001c159:	6a 00                	push   0x0
c001c15b:	6a 2b                	push   0x2b
c001c15d:	e9 42 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c162 <irq12>:
c001c162:	fa                   	cli    
c001c163:	6a 00                	push   0x0
c001c165:	6a 2c                	push   0x2c
c001c167:	e9 38 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c16c <irq13>:
c001c16c:	fa                   	cli    
c001c16d:	6a 00                	push   0x0
c001c16f:	6a 2d                	push   0x2d
c001c171:	e9 2e 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c176 <irq14>:
c001c176:	fa                   	cli    
c001c177:	6a 00                	push   0x0
c001c179:	6a 2e                	push   0x2e
c001c17b:	e9 24 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c180 <irq15>:
c001c180:	fa                   	cli    
c001c181:	6a 00                	push   0x0
c001c183:	6a 2f                	push   0x2f
c001c185:	e9 1a 00 00 00       	jmp    c001c1a4 <int_common_stub>

c001c18a <irq1>:
c001c18a:	fa                   	cli    
c001c18b:	6a 00                	push   0x0
c001c18d:	6a 21                	push   0x21
c001c18f:	eb 13                	jmp    c001c1a4 <int_common_stub>

c001c191 <irq2>:
c001c191:	fa                   	cli    
c001c192:	6a 00                	push   0x0
c001c194:	6a 22                	push   0x22
c001c196:	eb 0c                	jmp    c001c1a4 <int_common_stub>

c001c198 <isr96>:
c001c198:	6a 00                	push   0x0
c001c19a:	6a 60                	push   0x60
c001c19c:	fb                   	sti    
c001c19d:	eb 05                	jmp    c001c1a4 <int_common_stub>

c001c19f <irq0>:
c001c19f:	fa                   	cli    
c001c1a0:	6a 00                	push   0x0
c001c1a2:	6a 20                	push   0x20

c001c1a4 <int_common_stub>:
c001c1a4:	60                   	pusha  
c001c1a5:	1e                   	push   ds
c001c1a6:	06                   	push   es
c001c1a7:	0f a0                	push   fs
c001c1a9:	0f a8                	push   gs
c001c1ab:	66 b8 10 00          	mov    ax,0x10
c001c1af:	66 8e d8             	mov    ds,ax
c001c1b2:	66 8e c0             	mov    es,ax
c001c1b5:	66 8e e0             	mov    fs,ax
c001c1b8:	66 8e e8             	mov    gs,ax
c001c1bb:	54                   	push   esp
c001c1bc:	fc                   	cld    
c001c1bd:	e8 ea ee fe ff       	call   c000b0ac <int_handler>
c001c1c2:	81 c4 04 00 00 00    	add    esp,0x4
c001c1c8:	0f a9                	pop    gs
c001c1ca:	0f a1                	pop    fs
c001c1cc:	07                   	pop    es
c001c1cd:	1f                   	pop    ds
c001c1ce:	61                   	popa   
c001c1cf:	81 c4 08 00 00 00    	add    esp,0x8
c001c1d5:	cf                   	iret   

c001c1d6 <irq16>:
c001c1d6:	fa                   	cli    
c001c1d7:	6a 00                	push   0x0
c001c1d9:	6a 30                	push   0x30
c001c1db:	e9 c4 ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c1e0 <irq17>:
c001c1e0:	fa                   	cli    
c001c1e1:	6a 00                	push   0x0
c001c1e3:	6a 31                	push   0x31
c001c1e5:	e9 ba ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c1ea <irq18>:
c001c1ea:	fa                   	cli    
c001c1eb:	6a 00                	push   0x0
c001c1ed:	6a 32                	push   0x32
c001c1ef:	e9 b0 ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c1f4 <irq19>:
c001c1f4:	fa                   	cli    
c001c1f5:	6a 00                	push   0x0
c001c1f7:	6a 33                	push   0x33
c001c1f9:	e9 a6 ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c1fe <irq20>:
c001c1fe:	fa                   	cli    
c001c1ff:	6a 00                	push   0x0
c001c201:	6a 34                	push   0x34
c001c203:	e9 9c ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c208 <irq21>:
c001c208:	fa                   	cli    
c001c209:	6a 00                	push   0x0
c001c20b:	6a 35                	push   0x35
c001c20d:	e9 92 ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c212 <irq22>:
c001c212:	fa                   	cli    
c001c213:	6a 00                	push   0x0
c001c215:	6a 36                	push   0x36
c001c217:	e9 88 ff ff ff       	jmp    c001c1a4 <int_common_stub>

c001c21c <irq23>:
c001c21c:	fa                   	cli    
c001c21d:	6a 00                	push   0x0
c001c21f:	6a 37                	push   0x37
c001c221:	e9 7e ff ff ff       	jmp    c001c1a4 <int_common_stub>
c001c226:	66 90                	xchg   ax,ax
c001c228:	66 90                	xchg   ax,ax
c001c22a:	66 90                	xchg   ax,ax
c001c22c:	66 90                	xchg   ax,ax
c001c22e:	66 90                	xchg   ax,ax

c001c230 <i386GetRDRAND>:
c001c230:	b9 64 00 00 00       	mov    ecx,0x64

c001c235 <retry>:
c001c235:	0f c7 f0             	rdrand eax
c001c238:	72 05                	jb     c001c23f <retry.done>
c001c23a:	e2 f9                	loop   c001c235 <retry>

c001c23c <retry.fail>:
c001c23c:	31 c0                	xor    eax,eax
c001c23e:	c3                   	ret    

c001c23f <retry.done>:
c001c23f:	c3                   	ret    

c001c240 <absolutelyNoChanceInHell>:
c001c240:	b8 01 00 00 00       	mov    eax,0x1
c001c245:	0f a2                	cpuid  
c001c247:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c24d:	74 06                	je     c001c255 <sseDetect.noSSE>
c001c24f:	b8 01 00 00 00       	mov    eax,0x1
c001c254:	c3                   	ret    

c001c255 <sseDetect.noSSE>:
c001c255:	31 c0                	xor    eax,eax
c001c257:	c3                   	ret    

c001c258 <sseSave>:
c001c258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c25c:	0f ae 00             	fxsave [eax]
c001c25f:	c3                   	ret    

c001c260 <sseLoad>:
c001c260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c264:	0f ae 08             	fxrstor [eax]
c001c267:	c3                   	ret    

c001c268 <sseInit>:
c001c268:	e8 42 00 00 00       	call   c001c2af <x87Init>
c001c26d:	0f 20 e0             	mov    eax,cr4
c001c270:	66 0d 00 06          	or     ax,0x600
c001c274:	0f 22 e0             	mov    cr4,eax
c001c277:	c3                   	ret    

c001c278 <sseClose>:
c001c278:	c3                   	ret    
c001c279:	66 90                	xchg   ax,ax
c001c27b:	66 90                	xchg   ax,ax
c001c27d:	66 90                	xchg   ax,ax
c001c27f:	90                   	nop

c001c280 <value_37F>:
c001c280:	7f 03                	jg     c001c285 <value_37A+0x1>

c001c282 <value_37E>:
c001c282:	7e 03                	jle    c001c287 <x87Detect+0x1>

c001c284 <value_37A>:
c001c284:	7a 03                	jp     c001c289 <x87Detect+0x3>

c001c286 <x87Detect>:
c001c286:	b8 01 00 00 00       	mov    eax,0x1
c001c28b:	0f a2                	cpuid  
c001c28d:	f7 c2 01 00 00 00    	test   edx,0x1
c001c293:	74 06                	je     c001c29b <x87Detect.nox87>
c001c295:	b8 01 00 00 00       	mov    eax,0x1
c001c29a:	c3                   	ret    

c001c29b <x87Detect.nox87>:
c001c29b:	b8 00 00 00 00       	mov    eax,0x0
c001c2a0:	c3                   	ret    

c001c2a1 <x87Save>:
c001c2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a5:	dd 30                	fnsave [eax]
c001c2a7:	c3                   	ret    

c001c2a8 <x87Load>:
c001c2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2ac:	dd 20                	frstor [eax]
c001c2ae:	c3                   	ret    

c001c2af <x87Init>:
c001c2af:	0f 20 c0             	mov    eax,cr0
c001c2b2:	66 25 fb ff          	and    ax,0xfffb
c001c2b6:	66 0d 22 00          	or     ax,0x22
c001c2ba:	0f 22 c0             	mov    cr0,eax
c001c2bd:	db e3                	fninit 
c001c2bf:	0f 06                	clts   
c001c2c1:	d9 2d 84 c2 01 c0    	fldcw  WORD PTR ds:0xc001c284
c001c2c7:	c3                   	ret    

c001c2c8 <x87Close>:
c001c2c8:	c3                   	ret    
c001c2c9:	66 90                	xchg   ax,ax
c001c2cb:	90                   	nop

c001c2cc <__do_global_ctors_aux>:
c001c2cc:	a1 90 d2 01 c0       	mov    eax,ds:0xc001d290
c001c2d1:	83 f8 ff             	cmp    eax,0xffffffff
c001c2d4:	74 1a                	je     c001c2f0 <__do_global_ctors_aux+0x24>
c001c2d6:	55                   	push   ebp
c001c2d7:	89 e5                	mov    ebp,esp
c001c2d9:	53                   	push   ebx
c001c2da:	52                   	push   edx
c001c2db:	bb 90 d2 01 c0       	mov    ebx,0xc001d290
c001c2e0:	ff d0                	call   eax
c001c2e2:	83 eb 04             	sub    ebx,0x4
c001c2e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2e7:	83 f8 ff             	cmp    eax,0xffffffff
c001c2ea:	75 f4                	jne    c001c2e0 <__do_global_ctors_aux+0x14>
c001c2ec:	58                   	pop    eax
c001c2ed:	5b                   	pop    ebx
c001c2ee:	5d                   	pop    ebp
c001c2ef:	c3                   	ret    
c001c2f0:	c3                   	ret    
c001c2f1:	66 90                	xchg   ax,ax
c001c2f3:	90                   	nop

c001c2f4 <__divdi3>:
c001c2f4:	55                   	push   ebp
c001c2f5:	57                   	push   edi
c001c2f6:	56                   	push   esi
c001c2f7:	53                   	push   ebx
c001c2f8:	83 ec 1c             	sub    esp,0x1c
c001c2fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c303:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c306:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c30a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c30e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c312:	85 db                	test   ebx,ebx
c001c314:	0f 88 8e 00 00 00    	js     c001c3a8 <__divdi3+0xb4>
c001c31a:	89 dd                	mov    ebp,ebx
c001c31c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c324:	89 d3                	mov    ebx,edx
c001c326:	85 d2                	test   edx,edx
c001c328:	79 0d                	jns    c001c337 <__divdi3+0x43>
c001c32a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c32e:	f7 d8                	neg    eax
c001c330:	83 d2 00             	adc    edx,0x0
c001c333:	f7 da                	neg    edx
c001c335:	89 d3                	mov    ebx,edx
c001c337:	89 c7                	mov    edi,eax
c001c339:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c33c:	85 db                	test   ebx,ebx
c001c33e:	75 48                	jne    c001c388 <__divdi3+0x94>
c001c340:	39 ef                	cmp    edi,ebp
c001c342:	76 24                	jbe    c001c368 <__divdi3+0x74>
c001c344:	89 ea                	mov    edx,ebp
c001c346:	f7 f7                	div    edi
c001c348:	89 c1                	mov    ecx,eax
c001c34a:	31 f6                	xor    esi,esi
c001c34c:	89 c8                	mov    eax,ecx
c001c34e:	89 f2                	mov    edx,esi
c001c350:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c354:	85 c9                	test   ecx,ecx
c001c356:	74 07                	je     c001c35f <__divdi3+0x6b>
c001c358:	f7 d8                	neg    eax
c001c35a:	83 d2 00             	adc    edx,0x0
c001c35d:	f7 da                	neg    edx
c001c35f:	83 c4 1c             	add    esp,0x1c
c001c362:	5b                   	pop    ebx
c001c363:	5e                   	pop    esi
c001c364:	5f                   	pop    edi
c001c365:	5d                   	pop    ebp
c001c366:	c3                   	ret    
c001c367:	90                   	nop
c001c368:	85 ff                	test   edi,edi
c001c36a:	75 0b                	jne    c001c377 <__divdi3+0x83>
c001c36c:	b8 01 00 00 00       	mov    eax,0x1
c001c371:	31 d2                	xor    edx,edx
c001c373:	f7 f3                	div    ebx
c001c375:	89 c7                	mov    edi,eax
c001c377:	31 d2                	xor    edx,edx
c001c379:	89 e8                	mov    eax,ebp
c001c37b:	f7 f7                	div    edi
c001c37d:	89 c6                	mov    esi,eax
c001c37f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c382:	f7 f7                	div    edi
c001c384:	89 c1                	mov    ecx,eax
c001c386:	eb c4                	jmp    c001c34c <__divdi3+0x58>
c001c388:	39 eb                	cmp    ebx,ebp
c001c38a:	77 3c                	ja     c001c3c8 <__divdi3+0xd4>
c001c38c:	0f bd f3             	bsr    esi,ebx
c001c38f:	83 f6 1f             	xor    esi,0x1f
c001c392:	75 40                	jne    c001c3d4 <__divdi3+0xe0>
c001c394:	39 eb                	cmp    ebx,ebp
c001c396:	72 09                	jb     c001c3a1 <__divdi3+0xad>
c001c398:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c39b:	0f 87 97 00 00 00    	ja     c001c438 <__divdi3+0x144>
c001c3a1:	b9 01 00 00 00       	mov    ecx,0x1
c001c3a6:	eb a4                	jmp    c001c34c <__divdi3+0x58>
c001c3a8:	f7 d9                	neg    ecx
c001c3aa:	83 d3 00             	adc    ebx,0x0
c001c3ad:	f7 db                	neg    ebx
c001c3af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c3b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c3b6:	89 dd                	mov    ebp,ebx
c001c3b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c3c0:	e9 5f ff ff ff       	jmp    c001c324 <__divdi3+0x30>
c001c3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c8:	31 f6                	xor    esi,esi
c001c3ca:	31 c9                	xor    ecx,ecx
c001c3cc:	e9 7b ff ff ff       	jmp    c001c34c <__divdi3+0x58>
c001c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d4:	b8 20 00 00 00       	mov    eax,0x20
c001c3d9:	29 f0                	sub    eax,esi
c001c3db:	89 f1                	mov    ecx,esi
c001c3dd:	d3 e3                	shl    ebx,cl
c001c3df:	89 fa                	mov    edx,edi
c001c3e1:	88 c1                	mov    cl,al
c001c3e3:	d3 ea                	shr    edx,cl
c001c3e5:	09 da                	or     edx,ebx
c001c3e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3eb:	89 f1                	mov    ecx,esi
c001c3ed:	d3 e7                	shl    edi,cl
c001c3ef:	89 eb                	mov    ebx,ebp
c001c3f1:	88 c1                	mov    cl,al
c001c3f3:	d3 eb                	shr    ebx,cl
c001c3f5:	89 f1                	mov    ecx,esi
c001c3f7:	d3 e5                	shl    ebp,cl
c001c3f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c3fc:	88 c1                	mov    cl,al
c001c3fe:	d3 ea                	shr    edx,cl
c001c400:	09 d5                	or     ebp,edx
c001c402:	89 e8                	mov    eax,ebp
c001c404:	89 da                	mov    edx,ebx
c001c406:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c40a:	89 d3                	mov    ebx,edx
c001c40c:	89 c5                	mov    ebp,eax
c001c40e:	f7 e7                	mul    edi
c001c410:	39 d3                	cmp    ebx,edx
c001c412:	72 18                	jb     c001c42c <__divdi3+0x138>
c001c414:	74 0a                	je     c001c420 <__divdi3+0x12c>
c001c416:	89 e9                	mov    ecx,ebp
c001c418:	31 f6                	xor    esi,esi
c001c41a:	e9 2d ff ff ff       	jmp    c001c34c <__divdi3+0x58>
c001c41f:	90                   	nop
c001c420:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c423:	89 f1                	mov    ecx,esi
c001c425:	d3 e7                	shl    edi,cl
c001c427:	39 c7                	cmp    edi,eax
c001c429:	73 eb                	jae    c001c416 <__divdi3+0x122>
c001c42b:	90                   	nop
c001c42c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c42f:	31 f6                	xor    esi,esi
c001c431:	e9 16 ff ff ff       	jmp    c001c34c <__divdi3+0x58>
c001c436:	66 90                	xchg   ax,ax
c001c438:	31 c9                	xor    ecx,ecx
c001c43a:	e9 0d ff ff ff       	jmp    c001c34c <__divdi3+0x58>
c001c43f:	90                   	nop

c001c440 <__moddi3>:
c001c440:	55                   	push   ebp
c001c441:	57                   	push   edi
c001c442:	56                   	push   esi
c001c443:	53                   	push   ebx
c001c444:	83 ec 2c             	sub    esp,0x2c
c001c447:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c44b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c44f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c453:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c457:	85 db                	test   ebx,ebx
c001c459:	0f 88 85 00 00 00    	js     c001c4e4 <__moddi3+0xa4>
c001c45f:	89 de                	mov    esi,ebx
c001c461:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c469:	89 d7                	mov    edi,edx
c001c46b:	85 d2                	test   edx,edx
c001c46d:	79 09                	jns    c001c478 <__moddi3+0x38>
c001c46f:	f7 d8                	neg    eax
c001c471:	83 d2 00             	adc    edx,0x0
c001c474:	f7 da                	neg    edx
c001c476:	89 d7                	mov    edi,edx
c001c478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c47c:	89 cd                	mov    ebp,ecx
c001c47e:	85 ff                	test   edi,edi
c001c480:	75 52                	jne    c001c4d4 <__moddi3+0x94>
c001c482:	89 c3                	mov    ebx,eax
c001c484:	39 f0                	cmp    eax,esi
c001c486:	76 24                	jbe    c001c4ac <__moddi3+0x6c>
c001c488:	89 c8                	mov    eax,ecx
c001c48a:	89 f2                	mov    edx,esi
c001c48c:	f7 f3                	div    ebx
c001c48e:	89 d6                	mov    esi,edx
c001c490:	89 f0                	mov    eax,esi
c001c492:	31 d2                	xor    edx,edx
c001c494:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c498:	85 c9                	test   ecx,ecx
c001c49a:	74 07                	je     c001c4a3 <__moddi3+0x63>
c001c49c:	f7 d8                	neg    eax
c001c49e:	83 d2 00             	adc    edx,0x0
c001c4a1:	f7 da                	neg    edx
c001c4a3:	83 c4 2c             	add    esp,0x2c
c001c4a6:	5b                   	pop    ebx
c001c4a7:	5e                   	pop    esi
c001c4a8:	5f                   	pop    edi
c001c4a9:	5d                   	pop    ebp
c001c4aa:	c3                   	ret    
c001c4ab:	90                   	nop
c001c4ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c4b0:	85 db                	test   ebx,ebx
c001c4b2:	75 0d                	jne    c001c4c1 <__moddi3+0x81>
c001c4b4:	b8 01 00 00 00       	mov    eax,0x1
c001c4b9:	31 d2                	xor    edx,edx
c001c4bb:	f7 f7                	div    edi
c001c4bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4c1:	89 f0                	mov    eax,esi
c001c4c3:	31 d2                	xor    edx,edx
c001c4c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4c9:	f7 f7                	div    edi
c001c4cb:	89 e8                	mov    eax,ebp
c001c4cd:	f7 f7                	div    edi
c001c4cf:	89 d6                	mov    esi,edx
c001c4d1:	eb bd                	jmp    c001c490 <__moddi3+0x50>
c001c4d3:	90                   	nop
c001c4d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c4d8:	39 f7                	cmp    edi,esi
c001c4da:	76 20                	jbe    c001c4fc <__moddi3+0xbc>
c001c4dc:	89 c8                	mov    eax,ecx
c001c4de:	89 f2                	mov    edx,esi
c001c4e0:	eb b2                	jmp    c001c494 <__moddi3+0x54>
c001c4e2:	66 90                	xchg   ax,ax
c001c4e4:	f7 d9                	neg    ecx
c001c4e6:	83 d3 00             	adc    ebx,0x0
c001c4e9:	f7 db                	neg    ebx
c001c4eb:	89 de                	mov    esi,ebx
c001c4ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c4f5:	e9 6f ff ff ff       	jmp    c001c469 <__moddi3+0x29>
c001c4fa:	66 90                	xchg   ax,ax
c001c4fc:	0f bd c7             	bsr    eax,edi
c001c4ff:	83 f0 1f             	xor    eax,0x1f
c001c502:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c506:	75 24                	jne    c001c52c <__moddi3+0xec>
c001c508:	39 f7                	cmp    edi,esi
c001c50a:	72 06                	jb     c001c512 <__moddi3+0xd2>
c001c50c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c510:	77 0c                	ja     c001c51e <__moddi3+0xde>
c001c512:	89 e9                	mov    ecx,ebp
c001c514:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c518:	19 fe                	sbb    esi,edi
c001c51a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c51e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c522:	89 f2                	mov    edx,esi
c001c524:	e9 6b ff ff ff       	jmp    c001c494 <__moddi3+0x54>
c001c529:	8d 76 00             	lea    esi,[esi+0x0]
c001c52c:	b8 20 00 00 00       	mov    eax,0x20
c001c531:	89 c2                	mov    edx,eax
c001c533:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c537:	29 da                	sub    edx,ebx
c001c539:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c53d:	88 d9                	mov    cl,bl
c001c53f:	d3 e7                	shl    edi,cl
c001c541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c545:	88 d1                	mov    cl,dl
c001c547:	d3 e8                	shr    eax,cl
c001c549:	09 c7                	or     edi,eax
c001c54b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c54f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c553:	89 d8                	mov    eax,ebx
c001c555:	88 d9                	mov    cl,bl
c001c557:	d3 e7                	shl    edi,cl
c001c559:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c55d:	89 f3                	mov    ebx,esi
c001c55f:	88 d1                	mov    cl,dl
c001c561:	d3 eb                	shr    ebx,cl
c001c563:	89 c7                	mov    edi,eax
c001c565:	88 c1                	mov    cl,al
c001c567:	d3 e6                	shl    esi,cl
c001c569:	89 e8                	mov    eax,ebp
c001c56b:	88 d1                	mov    cl,dl
c001c56d:	d3 e8                	shr    eax,cl
c001c56f:	09 f0                	or     eax,esi
c001c571:	89 f9                	mov    ecx,edi
c001c573:	d3 e5                	shl    ebp,cl
c001c575:	89 da                	mov    edx,ebx
c001c577:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c57b:	89 d3                	mov    ebx,edx
c001c57d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c581:	89 c6                	mov    esi,eax
c001c583:	89 d1                	mov    ecx,edx
c001c585:	39 d3                	cmp    ebx,edx
c001c587:	72 27                	jb     c001c5b0 <__moddi3+0x170>
c001c589:	74 21                	je     c001c5ac <__moddi3+0x16c>
c001c58b:	29 f5                	sub    ebp,esi
c001c58d:	19 cb                	sbb    ebx,ecx
c001c58f:	89 de                	mov    esi,ebx
c001c591:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c595:	d3 e6                	shl    esi,cl
c001c597:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c59b:	89 f9                	mov    ecx,edi
c001c59d:	d3 ed                	shr    ebp,cl
c001c59f:	09 ee                	or     esi,ebp
c001c5a1:	89 f0                	mov    eax,esi
c001c5a3:	d3 eb                	shr    ebx,cl
c001c5a5:	89 da                	mov    edx,ebx
c001c5a7:	e9 e8 fe ff ff       	jmp    c001c494 <__moddi3+0x54>
c001c5ac:	39 c5                	cmp    ebp,eax
c001c5ae:	73 db                	jae    c001c58b <__moddi3+0x14b>
c001c5b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c5b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c5b8:	89 d1                	mov    ecx,edx
c001c5ba:	89 c6                	mov    esi,eax
c001c5bc:	eb cd                	jmp    c001c58b <__moddi3+0x14b>
c001c5be:	66 90                	xchg   ax,ax

c001c5c0 <__udivdi3>:
c001c5c0:	55                   	push   ebp
c001c5c1:	57                   	push   edi
c001c5c2:	56                   	push   esi
c001c5c3:	53                   	push   ebx
c001c5c4:	83 ec 1c             	sub    esp,0x1c
c001c5c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c5cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c5d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c5d7:	85 d2                	test   edx,edx
c001c5d9:	75 41                	jne    c001c61c <__udivdi3+0x5c>
c001c5db:	39 f7                	cmp    edi,esi
c001c5dd:	76 15                	jbe    c001c5f4 <__udivdi3+0x34>
c001c5df:	89 e8                	mov    eax,ebp
c001c5e1:	89 f2                	mov    edx,esi
c001c5e3:	f7 f7                	div    edi
c001c5e5:	31 db                	xor    ebx,ebx
c001c5e7:	89 da                	mov    edx,ebx
c001c5e9:	83 c4 1c             	add    esp,0x1c
c001c5ec:	5b                   	pop    ebx
c001c5ed:	5e                   	pop    esi
c001c5ee:	5f                   	pop    edi
c001c5ef:	5d                   	pop    ebp
c001c5f0:	c3                   	ret    
c001c5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5f4:	89 f9                	mov    ecx,edi
c001c5f6:	85 ff                	test   edi,edi
c001c5f8:	75 0b                	jne    c001c605 <__udivdi3+0x45>
c001c5fa:	b8 01 00 00 00       	mov    eax,0x1
c001c5ff:	31 d2                	xor    edx,edx
c001c601:	f7 f7                	div    edi
c001c603:	89 c1                	mov    ecx,eax
c001c605:	31 d2                	xor    edx,edx
c001c607:	89 f0                	mov    eax,esi
c001c609:	f7 f1                	div    ecx
c001c60b:	89 c3                	mov    ebx,eax
c001c60d:	89 e8                	mov    eax,ebp
c001c60f:	f7 f1                	div    ecx
c001c611:	89 da                	mov    edx,ebx
c001c613:	83 c4 1c             	add    esp,0x1c
c001c616:	5b                   	pop    ebx
c001c617:	5e                   	pop    esi
c001c618:	5f                   	pop    edi
c001c619:	5d                   	pop    ebp
c001c61a:	c3                   	ret    
c001c61b:	90                   	nop
c001c61c:	39 f2                	cmp    edx,esi
c001c61e:	77 1c                	ja     c001c63c <__udivdi3+0x7c>
c001c620:	0f bd da             	bsr    ebx,edx
c001c623:	83 f3 1f             	xor    ebx,0x1f
c001c626:	75 24                	jne    c001c64c <__udivdi3+0x8c>
c001c628:	39 f2                	cmp    edx,esi
c001c62a:	72 08                	jb     c001c634 <__udivdi3+0x74>
c001c62c:	39 ef                	cmp    edi,ebp
c001c62e:	0f 87 84 00 00 00    	ja     c001c6b8 <__udivdi3+0xf8>
c001c634:	b8 01 00 00 00       	mov    eax,0x1
c001c639:	eb ac                	jmp    c001c5e7 <__udivdi3+0x27>
c001c63b:	90                   	nop
c001c63c:	31 db                	xor    ebx,ebx
c001c63e:	31 c0                	xor    eax,eax
c001c640:	89 da                	mov    edx,ebx
c001c642:	83 c4 1c             	add    esp,0x1c
c001c645:	5b                   	pop    ebx
c001c646:	5e                   	pop    esi
c001c647:	5f                   	pop    edi
c001c648:	5d                   	pop    ebp
c001c649:	c3                   	ret    
c001c64a:	66 90                	xchg   ax,ax
c001c64c:	b8 20 00 00 00       	mov    eax,0x20
c001c651:	29 d8                	sub    eax,ebx
c001c653:	88 d9                	mov    cl,bl
c001c655:	d3 e2                	shl    edx,cl
c001c657:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c65b:	89 fa                	mov    edx,edi
c001c65d:	88 c1                	mov    cl,al
c001c65f:	d3 ea                	shr    edx,cl
c001c661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c665:	09 d1                	or     ecx,edx
c001c667:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c66b:	88 d9                	mov    cl,bl
c001c66d:	d3 e7                	shl    edi,cl
c001c66f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c673:	89 f7                	mov    edi,esi
c001c675:	88 c1                	mov    cl,al
c001c677:	d3 ef                	shr    edi,cl
c001c679:	88 d9                	mov    cl,bl
c001c67b:	d3 e6                	shl    esi,cl
c001c67d:	89 ea                	mov    edx,ebp
c001c67f:	88 c1                	mov    cl,al
c001c681:	d3 ea                	shr    edx,cl
c001c683:	09 d6                	or     esi,edx
c001c685:	89 f0                	mov    eax,esi
c001c687:	89 fa                	mov    edx,edi
c001c689:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c68d:	89 d7                	mov    edi,edx
c001c68f:	89 c6                	mov    esi,eax
c001c691:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c695:	39 d7                	cmp    edi,edx
c001c697:	72 13                	jb     c001c6ac <__udivdi3+0xec>
c001c699:	74 09                	je     c001c6a4 <__udivdi3+0xe4>
c001c69b:	89 f0                	mov    eax,esi
c001c69d:	31 db                	xor    ebx,ebx
c001c69f:	e9 43 ff ff ff       	jmp    c001c5e7 <__udivdi3+0x27>
c001c6a4:	88 d9                	mov    cl,bl
c001c6a6:	d3 e5                	shl    ebp,cl
c001c6a8:	39 c5                	cmp    ebp,eax
c001c6aa:	73 ef                	jae    c001c69b <__udivdi3+0xdb>
c001c6ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001c6af:	31 db                	xor    ebx,ebx
c001c6b1:	e9 31 ff ff ff       	jmp    c001c5e7 <__udivdi3+0x27>
c001c6b6:	66 90                	xchg   ax,ax
c001c6b8:	31 c0                	xor    eax,eax
c001c6ba:	e9 28 ff ff ff       	jmp    c001c5e7 <__udivdi3+0x27>
c001c6bf:	90                   	nop

c001c6c0 <__umoddi3>:
c001c6c0:	55                   	push   ebp
c001c6c1:	57                   	push   edi
c001c6c2:	56                   	push   esi
c001c6c3:	53                   	push   ebx
c001c6c4:	83 ec 1c             	sub    esp,0x1c
c001c6c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c6cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c6cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c6d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c6d7:	89 da                	mov    edx,ebx
c001c6d9:	85 c0                	test   eax,eax
c001c6db:	75 37                	jne    c001c714 <__umoddi3+0x54>
c001c6dd:	39 df                	cmp    edi,ebx
c001c6df:	76 13                	jbe    c001c6f4 <__umoddi3+0x34>
c001c6e1:	89 f0                	mov    eax,esi
c001c6e3:	f7 f7                	div    edi
c001c6e5:	89 d0                	mov    eax,edx
c001c6e7:	31 d2                	xor    edx,edx
c001c6e9:	83 c4 1c             	add    esp,0x1c
c001c6ec:	5b                   	pop    ebx
c001c6ed:	5e                   	pop    esi
c001c6ee:	5f                   	pop    edi
c001c6ef:	5d                   	pop    ebp
c001c6f0:	c3                   	ret    
c001c6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f4:	89 fd                	mov    ebp,edi
c001c6f6:	85 ff                	test   edi,edi
c001c6f8:	75 0b                	jne    c001c705 <__umoddi3+0x45>
c001c6fa:	b8 01 00 00 00       	mov    eax,0x1
c001c6ff:	31 d2                	xor    edx,edx
c001c701:	f7 f7                	div    edi
c001c703:	89 c5                	mov    ebp,eax
c001c705:	89 d8                	mov    eax,ebx
c001c707:	31 d2                	xor    edx,edx
c001c709:	f7 f5                	div    ebp
c001c70b:	89 f0                	mov    eax,esi
c001c70d:	f7 f5                	div    ebp
c001c70f:	89 d0                	mov    eax,edx
c001c711:	eb d4                	jmp    c001c6e7 <__umoddi3+0x27>
c001c713:	90                   	nop
c001c714:	89 f1                	mov    ecx,esi
c001c716:	39 d8                	cmp    eax,ebx
c001c718:	76 0a                	jbe    c001c724 <__umoddi3+0x64>
c001c71a:	89 f0                	mov    eax,esi
c001c71c:	83 c4 1c             	add    esp,0x1c
c001c71f:	5b                   	pop    ebx
c001c720:	5e                   	pop    esi
c001c721:	5f                   	pop    edi
c001c722:	5d                   	pop    ebp
c001c723:	c3                   	ret    
c001c724:	0f bd e8             	bsr    ebp,eax
c001c727:	83 f5 1f             	xor    ebp,0x1f
c001c72a:	75 1c                	jne    c001c748 <__umoddi3+0x88>
c001c72c:	39 d8                	cmp    eax,ebx
c001c72e:	72 04                	jb     c001c734 <__umoddi3+0x74>
c001c730:	39 f7                	cmp    edi,esi
c001c732:	77 08                	ja     c001c73c <__umoddi3+0x7c>
c001c734:	89 da                	mov    edx,ebx
c001c736:	29 fe                	sub    esi,edi
c001c738:	19 c2                	sbb    edx,eax
c001c73a:	89 f1                	mov    ecx,esi
c001c73c:	89 c8                	mov    eax,ecx
c001c73e:	83 c4 1c             	add    esp,0x1c
c001c741:	5b                   	pop    ebx
c001c742:	5e                   	pop    esi
c001c743:	5f                   	pop    edi
c001c744:	5d                   	pop    ebp
c001c745:	c3                   	ret    
c001c746:	66 90                	xchg   ax,ax
c001c748:	ba 20 00 00 00       	mov    edx,0x20
c001c74d:	29 ea                	sub    edx,ebp
c001c74f:	89 e9                	mov    ecx,ebp
c001c751:	d3 e0                	shl    eax,cl
c001c753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c757:	89 f8                	mov    eax,edi
c001c759:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c75d:	88 d1                	mov    cl,dl
c001c75f:	d3 e8                	shr    eax,cl
c001c761:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c765:	09 c1                	or     ecx,eax
c001c767:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c76b:	89 e9                	mov    ecx,ebp
c001c76d:	d3 e7                	shl    edi,cl
c001c76f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c773:	89 d8                	mov    eax,ebx
c001c775:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c779:	88 d1                	mov    cl,dl
c001c77b:	d3 e8                	shr    eax,cl
c001c77d:	89 c7                	mov    edi,eax
c001c77f:	89 e9                	mov    ecx,ebp
c001c781:	d3 e3                	shl    ebx,cl
c001c783:	89 f0                	mov    eax,esi
c001c785:	88 d1                	mov    cl,dl
c001c787:	d3 e8                	shr    eax,cl
c001c789:	09 d8                	or     eax,ebx
c001c78b:	89 e9                	mov    ecx,ebp
c001c78d:	d3 e6                	shl    esi,cl
c001c78f:	89 f3                	mov    ebx,esi
c001c791:	89 fa                	mov    edx,edi
c001c793:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c797:	89 d1                	mov    ecx,edx
c001c799:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c79d:	89 c6                	mov    esi,eax
c001c79f:	89 d7                	mov    edi,edx
c001c7a1:	39 d1                	cmp    ecx,edx
c001c7a3:	72 27                	jb     c001c7cc <__umoddi3+0x10c>
c001c7a5:	74 21                	je     c001c7c8 <__umoddi3+0x108>
c001c7a7:	89 ca                	mov    edx,ecx
c001c7a9:	29 f3                	sub    ebx,esi
c001c7ab:	19 fa                	sbb    edx,edi
c001c7ad:	89 d0                	mov    eax,edx
c001c7af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c7b3:	d3 e0                	shl    eax,cl
c001c7b5:	89 e9                	mov    ecx,ebp
c001c7b7:	d3 eb                	shr    ebx,cl
c001c7b9:	09 d8                	or     eax,ebx
c001c7bb:	d3 ea                	shr    edx,cl
c001c7bd:	83 c4 1c             	add    esp,0x1c
c001c7c0:	5b                   	pop    ebx
c001c7c1:	5e                   	pop    esi
c001c7c2:	5f                   	pop    edi
c001c7c3:	5d                   	pop    ebp
c001c7c4:	c3                   	ret    
c001c7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c8:	39 c3                	cmp    ebx,eax
c001c7ca:	73 db                	jae    c001c7a7 <__umoddi3+0xe7>
c001c7cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c7d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c7d4:	89 d7                	mov    edi,edx
c001c7d6:	89 c6                	mov    esi,eax
c001c7d8:	eb cd                	jmp    c001c7a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c7da <_init>:
c001c7da:	55                   	push   ebp
c001c7db:	89 e5                	mov    ebp,esp
c001c7dd:	e8 36 39 fe ff       	call   c0000118 <frame_dummy>
c001c7e2:	e8 e5 fa ff ff       	call   c001c2cc <__do_global_ctors_aux>
c001c7e7:	5d                   	pop    ebp
c001c7e8:	c3                   	ret    

Disassembly of section .fini:

c001c7e9 <_fini>:
c001c7e9:	55                   	push   ebp
c001c7ea:	89 e5                	mov    ebp,esp
c001c7ec:	e8 b7 38 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c7f1:	5d                   	pop    ebp
c001c7f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c7f4 <Computer::~Computer()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	ba f0 da 01 c0       	mov    edx,0xc001daf0
c001c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c800:	89 10                	mov    DWORD PTR [eax],edx
c001c802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	50                   	push   eax
c001c80a:	e8 f5 e2 fe ff       	call   c000ab04 <Device::~Device()>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	90                   	nop
c001c813:	83 c4 0c             	add    esp,0xc
c001c816:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c818 <Computer::~Computer()>:
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	83 ec 0c             	sub    esp,0xc
c001c81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c822:	e8 cd ff ff ff       	call   c001c7f4 <Computer::~Computer()>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	83 ec 08             	sub    esp,0x8
c001c82d:	68 ec 01 00 00       	push   0x1ec
c001c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c836:	e8 c3 ce fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	83 c4 0c             	add    esp,0xc
c001c841:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c842 <idleCommon()>:
c001c842:	83 ec 0c             	sub    esp,0xc
c001c845:	fa                   	cli    
c001c846:	ff 05 48 39 02 c0    	inc    DWORD PTR ds:0xc0023948
c001c84c:	e8 e7 60 ff ff       	call   c0012938 <schedule()>
c001c851:	a1 48 39 02 c0       	mov    eax,ds:0xc0023948
c001c856:	48                   	dec    eax
c001c857:	a3 48 39 02 c0       	mov    ds:0xc0023948,eax
c001c85c:	75 01                	jne    c001c85f <idleCommon()+0x1d>
c001c85e:	fb                   	sti    
c001c85f:	83 c4 0c             	add    esp,0xc
c001c862:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c864 <LinkedList<UnixFile>::~LinkedList()>:
c001c864:	90                   	nop
c001c865:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c866 <LinkedList<UnixFile>::LinkedList()>:
c001c866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c86a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c87b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c87f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c88a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c89b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c89f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c8a6:	90                   	nop
c001c8a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c8a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c8a8:	83 ec 0c             	sub    esp,0xc
c001c8ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8b0:	75 10                	jne    c001c8c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c8b2:	83 ec 0c             	sub    esp,0xc
c001c8b5:	68 44 dd 01 c0       	push   0xc001dd44
c001c8ba:	e8 f6 2b ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c8bf:	83 c4 10             	add    esp,0x10
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8c8:	85 c0                	test   eax,eax
c001c8ca:	74 34                	je     c001c900 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d3:	85 c0                	test   eax,eax
c001c8d5:	74 29                	je     c001c900 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c8fe:	eb 65                	jmp    c001c965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c904:	8b 00                	mov    eax,DWORD PTR [eax]
c001c906:	85 c0                	test   eax,eax
c001c908:	75 4b                	jne    c001c955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c911:	85 c0                	test   eax,eax
c001c913:	75 40                	jne    c001c955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c91d:	89 10                	mov    DWORD PTR [eax],edx
c001c91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c923:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c927:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c931:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c93f:	85 c0                	test   eax,eax
c001c941:	74 22                	je     c001c965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c943:	83 ec 0c             	sub    esp,0xc
c001c946:	68 66 dd 01 c0       	push   0xc001dd66
c001c94b:	e8 65 2b ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c950:	83 c4 10             	add    esp,0x10
c001c953:	eb 10                	jmp    c001c965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	68 70 dd 01 c0       	push   0xc001dd70
c001c95d:	e8 53 2b ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c969:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c96c:	8d 50 01             	lea    edx,[eax+0x1]
c001c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c973:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c976:	90                   	nop
c001c977:	83 c4 0c             	add    esp,0xc
c001c97a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c97c <LinkedList<UnixFile>::getFirstElement()>:
c001c97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c980:	8b 00                	mov    eax,DWORD PTR [eax]
c001c982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c984 <LinkedList<UnixFile>::removeFirst()>:
c001c984:	83 ec 0c             	sub    esp,0xc
c001c987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c98d:	85 c0                	test   eax,eax
c001c98f:	75 12                	jne    c001c9a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c991:	83 ec 0c             	sub    esp,0xc
c001c994:	68 7c dd 01 c0       	push   0xc001dd7c
c001c999:	e8 17 2b ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c99e:	83 c4 10             	add    esp,0x10
c001c9a1:	eb 7e                	jmp    c001ca21 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9ad:	85 c0                	test   eax,eax
c001c9af:	74 10                	je     c001c9c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c9b1:	83 ec 0c             	sub    esp,0xc
c001c9b4:	68 c7 dd 01 c0       	push   0xc001ddc7
c001c9b9:	e8 f7 2a ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	75 33                	jne    c001ca01 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9ea:	83 f8 01             	cmp    eax,0x1
c001c9ed:	74 21                	je     c001ca10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c9ef:	83 ec 0c             	sub    esp,0xc
c001c9f2:	68 a0 dd 01 c0       	push   0xc001dda0
c001c9f7:	e8 b9 2a ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	eb 0f                	jmp    c001ca10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ca01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca05:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca07:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ca0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0e:	89 10                	mov    DWORD PTR [eax],edx
c001ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca17:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca21:	83 c4 0c             	add    esp,0xc
c001ca24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ca26 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ca26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca2d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ca2e <DriverlessDevice::~DriverlessDevice()>:
c001ca2e:	ba 1c e4 01 c0       	mov    edx,0xc001e41c
c001ca33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca37:	89 10                	mov    DWORD PTR [eax],edx
c001ca39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3d:	50                   	push   eax
c001ca3e:	e8 c1 e0 fe ff       	call   c000ab04 <Device::~Device()>
c001ca43:	83 c4 04             	add    esp,0x4
c001ca46:	90                   	nop
c001ca47:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ca48 <DriverlessDevice::~DriverlessDevice()>:
c001ca48:	83 ec 0c             	sub    esp,0xc
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca52:	e8 d7 ff ff ff       	call   c001ca2e <DriverlessDevice::~DriverlessDevice()>
c001ca57:	83 c4 10             	add    esp,0x10
c001ca5a:	83 ec 08             	sub    esp,0x8
c001ca5d:	68 58 01 00 00       	push   0x158
c001ca62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca66:	e8 93 cc fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001ca6b:	83 c4 10             	add    esp,0x10
c001ca6e:	83 c4 0c             	add    esp,0xc
c001ca71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ca72 <LinkedList<Device>::addElement(Device*)>:
c001ca72:	83 ec 0c             	sub    esp,0xc
c001ca75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ca7a:	75 10                	jne    c001ca8c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	68 44 dd 01 c0       	push   0xc001dd44
c001ca84:	e8 2c 2a ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca92:	85 c0                	test   eax,eax
c001ca94:	74 3a                	je     c001cad0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ca96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca9d:	85 c0                	test   eax,eax
c001ca9f:	74 2f                	je     c001cad0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001caa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001caa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cac4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cace:	eb 68                	jmp    c001cb38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cad6:	85 c0                	test   eax,eax
c001cad8:	75 4e                	jne    c001cb28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001cada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cae1:	85 c0                	test   eax,eax
c001cae3:	75 43                	jne    c001cb28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001cae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caed:	89 10                	mov    DWORD PTR [eax],edx
c001caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb12:	85 c0                	test   eax,eax
c001cb14:	74 22                	je     c001cb38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	68 66 dd 01 c0       	push   0xc001dd66
c001cb1e:	e8 92 29 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	eb 10                	jmp    c001cb38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	68 70 dd 01 c0       	push   0xc001dd70
c001cb30:	e8 80 29 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cb35:	83 c4 10             	add    esp,0x10
c001cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb3f:	8d 50 01             	lea    edx,[eax+0x1]
c001cb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cb49:	90                   	nop
c001cb4a:	83 c4 0c             	add    esp,0xc
c001cb4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001cb4e <LinkedList<Device>::LinkedList()>:
c001cb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb8e:	90                   	nop
c001cb8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cb90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb94:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb96:	85 c0                	test   eax,eax
c001cb98:	75 0e                	jne    c001cba8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cba1:	85 c0                	test   eax,eax
c001cba3:	75 03                	jne    c001cba8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cba5:	b0 01                	mov    al,0x1
c001cba7:	c3                   	ret    
c001cba8:	b0 00                	mov    al,0x0
c001cbaa:	90                   	nop
c001cbab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cbac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cbb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbbd:	85 c0                	test   eax,eax
c001cbbf:	75 17                	jne    c001cbd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cbc1:	83 ec 0c             	sub    esp,0xc
c001cbc4:	68 7c dd 01 c0       	push   0xc001dd7c
c001cbc9:	e8 e7 28 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	e9 92 00 00 00       	jmp    c001cc68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cbd6:	66 90                	xchg   ax,ax
c001cbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbe2:	85 c0                	test   eax,eax
c001cbe4:	0f 95 c0             	setne  al
c001cbe7:	84 c0                	test   al,al
c001cbe9:	74 11                	je     c001cbfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cbeb:	83 ec 0c             	sub    esp,0xc
c001cbee:	68 c7 dd 01 c0       	push   0xc001ddc7
c001cbf3:	e8 bd 28 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	90                   	nop
c001cbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cc05:	85 c0                	test   eax,eax
c001cc07:	0f 94 c0             	sete   al
c001cc0a:	84 c0                	test   al,al
c001cc0c:	74 36                	je     c001cc44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc2a:	83 f8 01             	cmp    eax,0x1
c001cc2d:	74 25                	je     c001cc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cc2f:	83 ec 0c             	sub    esp,0xc
c001cc32:	68 a0 dd 01 c0       	push   0xc001dda0
c001cc37:	e8 79 28 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cc3c:	83 c4 10             	add    esp,0x10
c001cc3f:	eb 13                	jmp    c001cc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cc41:	8d 76 00             	lea    esi,[esi+0x0]
c001cc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc48:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc51:	89 10                	mov    DWORD PTR [eax],edx
c001cc53:	90                   	nop
c001cc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001cc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc65:	8d 76 00             	lea    esi,[esi+0x0]
c001cc68:	83 c4 0c             	add    esp,0xc
c001cc6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cc6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cc6c:	83 ec 0c             	sub    esp,0xc
c001cc6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cc74:	75 12                	jne    c001cc88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cc76:	83 ec 0c             	sub    esp,0xc
c001cc79:	68 44 dd 01 c0       	push   0xc001dd44
c001cc7e:	e8 32 28 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	66 90                	xchg   ax,ax
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc8e:	85 c0                	test   eax,eax
c001cc90:	74 36                	je     c001ccc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc99:	85 c0                	test   eax,eax
c001cc9b:	74 2b                	je     c001ccc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cca4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cca8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ccab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ccc4:	eb 6a                	jmp    c001cd30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ccc6:	66 90                	xchg   ax,ax
c001ccc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cccc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccce:	85 c0                	test   eax,eax
c001ccd0:	75 4e                	jne    c001cd20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ccd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccd9:	85 c0                	test   eax,eax
c001ccdb:	75 43                	jne    c001cd20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ccdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cce5:	89 10                	mov    DWORD PTR [eax],edx
c001cce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cceb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd07:	85 c0                	test   eax,eax
c001cd09:	74 25                	je     c001cd30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cd0b:	83 ec 0c             	sub    esp,0xc
c001cd0e:	68 66 dd 01 c0       	push   0xc001dd66
c001cd13:	e8 9d 27 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cd18:	83 c4 10             	add    esp,0x10
c001cd1b:	eb 13                	jmp    c001cd30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cd1d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	68 70 dd 01 c0       	push   0xc001dd70
c001cd28:	e8 88 27 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd37:	8d 50 01             	lea    edx,[eax+0x1]
c001cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd41:	90                   	nop
c001cd42:	83 c4 0c             	add    esp,0xc
c001cd45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001cd48 <ACPI::~ACPI()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	ba 84 e9 01 c0       	mov    edx,0xc001e984
c001cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd54:	89 10                	mov    DWORD PTR [eax],edx
c001cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	50                   	push   eax
c001cd5e:	e8 a1 dd fe ff       	call   c000ab04 <Device::~Device()>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	90                   	nop
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001cd6c <ACPI::~ACPI()>:
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	83 ec 0c             	sub    esp,0xc
c001cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd76:	e8 cd ff ff ff       	call   c001cd48 <ACPI::~ACPI()>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	83 ec 08             	sub    esp,0x8
c001cd81:	68 64 12 00 00       	push   0x1264
c001cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8a:	e8 6f c9 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	83 c4 0c             	add    esp,0xc
c001cd95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001cd98 <LinkedList<Device>::~LinkedList()>:
c001cd98:	90                   	nop
c001cd99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001cd9c <LinkedList<Device>::isEmpty()>:
c001cd9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cda2:	85 c0                	test   eax,eax
c001cda4:	75 0e                	jne    c001cdb4 <LinkedList<Device>::isEmpty()+0x18>
c001cda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdad:	85 c0                	test   eax,eax
c001cdaf:	75 03                	jne    c001cdb4 <LinkedList<Device>::isEmpty()+0x18>
c001cdb1:	b0 01                	mov    al,0x1
c001cdb3:	c3                   	ret    
c001cdb4:	b0 00                	mov    al,0x0
c001cdb6:	90                   	nop
c001cdb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001cdb8 <LinkedList<Device>::getFirstElement()>:
c001cdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001cdc0 <LinkedList<Device>::removeFirst()>:
c001cdc0:	83 ec 0c             	sub    esp,0xc
c001cdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdc9:	85 c0                	test   eax,eax
c001cdcb:	75 17                	jne    c001cde4 <LinkedList<Device>::removeFirst()+0x24>
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	68 7c dd 01 c0       	push   0xc001dd7c
c001cdd5:	e8 db 26 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001cdda:	83 c4 10             	add    esp,0x10
c001cddd:	e9 92 00 00 00       	jmp    c001ce74 <LinkedList<Device>::removeFirst()+0xb4>
c001cde2:	66 90                	xchg   ax,ax
c001cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdeb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001cdf1:	85 c0                	test   eax,eax
c001cdf3:	74 13                	je     c001ce08 <LinkedList<Device>::removeFirst()+0x48>
c001cdf5:	83 ec 0c             	sub    esp,0xc
c001cdf8:	68 c7 dd 01 c0       	push   0xc001ddc7
c001cdfd:	e8 b3 26 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001ce02:	83 c4 10             	add    esp,0x10
c001ce05:	8d 76 00             	lea    esi,[esi+0x0]
c001ce08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ce14:	85 c0                	test   eax,eax
c001ce16:	75 34                	jne    c001ce4c <LinkedList<Device>::removeFirst()+0x8c>
c001ce18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce34:	83 f8 01             	cmp    eax,0x1
c001ce37:	74 27                	je     c001ce60 <LinkedList<Device>::removeFirst()+0xa0>
c001ce39:	83 ec 0c             	sub    esp,0xc
c001ce3c:	68 a0 dd 01 c0       	push   0xc001dda0
c001ce41:	e8 6f 26 ff ff       	call   c000f4b5 <Krnl::panic(char const*)>
c001ce46:	83 c4 10             	add    esp,0x10
c001ce49:	eb 15                	jmp    c001ce60 <LinkedList<Device>::removeFirst()+0xa0>
c001ce4b:	90                   	nop
c001ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce52:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5c:	89 10                	mov    DWORD PTR [eax],edx
c001ce5e:	66 90                	xchg   ax,ax
c001ce60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce67:	8d 50 ff             	lea    edx,[eax-0x1]
c001ce6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce71:	8d 76 00             	lea    esi,[esi+0x0]
c001ce74:	83 c4 0c             	add    esp,0xc
c001ce77:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ce78 <CPU::~CPU()>:
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c001ce80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce84:	89 10                	mov    DWORD PTR [eax],edx
c001ce86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8a:	83 ec 0c             	sub    esp,0xc
c001ce8d:	50                   	push   eax
c001ce8e:	e8 71 dc fe ff       	call   c000ab04 <Device::~Device()>
c001ce93:	83 c4 10             	add    esp,0x10
c001ce96:	90                   	nop
c001ce97:	83 c4 0c             	add    esp,0xc
c001ce9a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ce9c <CPU::~CPU()>:
c001ce9c:	83 ec 0c             	sub    esp,0xc
c001ce9f:	83 ec 0c             	sub    esp,0xc
c001cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea6:	e8 cd ff ff ff       	call   c001ce78 <CPU::~CPU()>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	83 ec 08             	sub    esp,0x8
c001ceb1:	68 94 11 00 00       	push   0x1194
c001ceb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceba:	e8 3f c8 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001cebf:	83 c4 10             	add    esp,0x10
c001cec2:	83 c4 0c             	add    esp,0xc
c001cec5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cec8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cec8:	90                   	nop
c001cec9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cecc <ThreadControlBlock::ThreadControlBlock()>:
c001cecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ced7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cedb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ceed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cefc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cf03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf07:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cf0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf0f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cf13:	90                   	nop
c001cf14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cf18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cf18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cf38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cf58:	90                   	nop
c001cf59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cf5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cf5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf63:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c001cf64 <Vm::_FPUState::_FPUState()>:
c001cf64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf68:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c001cf6f:	90                   	nop
c001cf70:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cf72 <PCI::~PCI()>:
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	ba 7c f7 01 c0       	mov    edx,0xc001f77c
c001cf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7e:	89 10                	mov    DWORD PTR [eax],edx
c001cf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	50                   	push   eax
c001cf88:	e8 07 d6 fe ff       	call   c000a594 <Bus::~Bus()>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	90                   	nop
c001cf91:	83 c4 0c             	add    esp,0xc
c001cf94:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cf96 <PCI::~PCI()>:
c001cf96:	83 ec 0c             	sub    esp,0xc
c001cf99:	83 ec 0c             	sub    esp,0xc
c001cf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa0:	e8 cd ff ff ff       	call   c001cf72 <PCI::~PCI()>
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	83 ec 08             	sub    esp,0x8
c001cfab:	68 5c 01 00 00       	push   0x15c
c001cfb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfb4:	e8 45 c7 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001cfb9:	83 c4 10             	add    esp,0x10
c001cfbc:	83 c4 0c             	add    esp,0xc
c001cfbf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cfc0 <IDE::~IDE()>:
c001cfc0:	83 ec 0c             	sub    esp,0xc
c001cfc3:	ba 30 f8 01 c0       	mov    edx,0xc001f830
c001cfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcc:	89 10                	mov    DWORD PTR [eax],edx
c001cfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd2:	83 ec 0c             	sub    esp,0xc
c001cfd5:	50                   	push   eax
c001cfd6:	e8 a1 df fe ff       	call   c000af7c <HardDiskController::~HardDiskController()>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	90                   	nop
c001cfdf:	83 c4 0c             	add    esp,0xc
c001cfe2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cfe4 <IDE::~IDE()>:
c001cfe4:	83 ec 0c             	sub    esp,0xc
c001cfe7:	83 ec 0c             	sub    esp,0xc
c001cfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfee:	e8 cd ff ff ff       	call   c001cfc0 <IDE::~IDE()>
c001cff3:	83 c4 10             	add    esp,0x10
c001cff6:	83 ec 08             	sub    esp,0x8
c001cff9:	68 70 02 00 00       	push   0x270
c001cffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d002:	e8 f7 c6 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	83 c4 0c             	add    esp,0xc
c001d00d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d00e <SATABus::~SATABus()>:
c001d00e:	83 ec 0c             	sub    esp,0xc
c001d011:	ba 80 f8 01 c0       	mov    edx,0xc001f880
c001d016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01a:	89 10                	mov    DWORD PTR [eax],edx
c001d01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d020:	83 ec 0c             	sub    esp,0xc
c001d023:	50                   	push   eax
c001d024:	e8 53 df fe ff       	call   c000af7c <HardDiskController::~HardDiskController()>
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	90                   	nop
c001d02d:	83 c4 0c             	add    esp,0xc
c001d030:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d032 <SATABus::~SATABus()>:
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	83 ec 0c             	sub    esp,0xc
c001d038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d03c:	e8 cd ff ff ff       	call   c001d00e <SATABus::~SATABus()>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	83 ec 08             	sub    esp,0x8
c001d047:	68 64 01 00 00       	push   0x164
c001d04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d050:	e8 a9 c6 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	83 c4 0c             	add    esp,0xc
c001d05b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d05c <ATA::~ATA()>:
c001d05c:	83 ec 0c             	sub    esp,0xc
c001d05f:	ba c0 f8 01 c0       	mov    edx,0xc001f8c0
c001d064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d068:	89 10                	mov    DWORD PTR [eax],edx
c001d06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06e:	83 ec 0c             	sub    esp,0xc
c001d071:	50                   	push   eax
c001d072:	e8 e7 df fe ff       	call   c000b05e <PhysicalDisk::~PhysicalDisk()>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	90                   	nop
c001d07b:	83 c4 0c             	add    esp,0xc
c001d07e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d080 <ATA::~ATA()>:
c001d080:	83 ec 0c             	sub    esp,0xc
c001d083:	83 ec 0c             	sub    esp,0xc
c001d086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d08a:	e8 cd ff ff ff       	call   c001d05c <ATA::~ATA()>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	83 ec 08             	sub    esp,0x8
c001d095:	68 7c 01 00 00       	push   0x17c
c001d09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d09e:	e8 5b c6 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d0a3:	83 c4 10             	add    esp,0x10
c001d0a6:	83 c4 0c             	add    esp,0xc
c001d0a9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d0aa <ATAPI::~ATAPI()>:
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c001d0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b6:	89 10                	mov    DWORD PTR [eax],edx
c001d0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0bc:	83 ec 0c             	sub    esp,0xc
c001d0bf:	50                   	push   eax
c001d0c0:	e8 99 df fe ff       	call   c000b05e <PhysicalDisk::~PhysicalDisk()>
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	90                   	nop
c001d0c9:	83 c4 0c             	add    esp,0xc
c001d0cc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d0ce <ATAPI::~ATAPI()>:
c001d0ce:	83 ec 0c             	sub    esp,0xc
c001d0d1:	83 ec 0c             	sub    esp,0xc
c001d0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d8:	e8 cd ff ff ff       	call   c001d0aa <ATAPI::~ATAPI()>
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	83 ec 08             	sub    esp,0x8
c001d0e3:	68 84 01 00 00       	push   0x184
c001d0e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ec:	e8 0d c6 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	83 c4 0c             	add    esp,0xc
c001d0f7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d0f8 <SATA::~SATA()>:
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	ba bc f9 01 c0       	mov    edx,0xc001f9bc
c001d100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d104:	89 10                	mov    DWORD PTR [eax],edx
c001d106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d10a:	83 ec 0c             	sub    esp,0xc
c001d10d:	50                   	push   eax
c001d10e:	e8 4b df fe ff       	call   c000b05e <PhysicalDisk::~PhysicalDisk()>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	90                   	nop
c001d117:	83 c4 0c             	add    esp,0xc
c001d11a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d11c <SATA::~SATA()>:
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d126:	e8 cd ff ff ff       	call   c001d0f8 <SATA::~SATA()>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	83 ec 08             	sub    esp,0x8
c001d131:	68 7c 01 00 00       	push   0x17c
c001d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d13a:	e8 bf c5 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d13f:	83 c4 10             	add    esp,0x10
c001d142:	83 c4 0c             	add    esp,0xc
c001d145:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d146 <SATAPI::~SATAPI()>:
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	ba 28 fb 01 c0       	mov    edx,0xc001fb28
c001d14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d152:	89 10                	mov    DWORD PTR [eax],edx
c001d154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	50                   	push   eax
c001d15c:	e8 fd de fe ff       	call   c000b05e <PhysicalDisk::~PhysicalDisk()>
c001d161:	83 c4 10             	add    esp,0x10
c001d164:	90                   	nop
c001d165:	83 c4 0c             	add    esp,0xc
c001d168:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d16a <SATAPI::~SATAPI()>:
c001d16a:	83 ec 0c             	sub    esp,0xc
c001d16d:	83 ec 0c             	sub    esp,0xc
c001d170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d174:	e8 cd ff ff ff       	call   c001d146 <SATAPI::~SATAPI()>
c001d179:	83 c4 10             	add    esp,0x10
c001d17c:	83 ec 08             	sub    esp,0x8
c001d17f:	68 84 01 00 00       	push   0x184
c001d184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d188:	e8 71 c5 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d18d:	83 c4 10             	add    esp,0x10
c001d190:	83 c4 0c             	add    esp,0xc
c001d193:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d194 <IOAPIC::~IOAPIC()>:
c001d194:	83 ec 0c             	sub    esp,0xc
c001d197:	ba 68 fb 01 c0       	mov    edx,0xc001fb68
c001d19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a0:	89 10                	mov    DWORD PTR [eax],edx
c001d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a6:	83 ec 0c             	sub    esp,0xc
c001d1a9:	50                   	push   eax
c001d1aa:	e8 55 d9 fe ff       	call   c000ab04 <Device::~Device()>
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	90                   	nop
c001d1b3:	83 c4 0c             	add    esp,0xc
c001d1b6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d1b8 <IOAPIC::~IOAPIC()>:
c001d1b8:	83 ec 0c             	sub    esp,0xc
c001d1bb:	83 ec 0c             	sub    esp,0xc
c001d1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c2:	e8 cd ff ff ff       	call   c001d194 <IOAPIC::~IOAPIC()>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	83 ec 08             	sub    esp,0x8
c001d1cd:	68 68 01 00 00       	push   0x168
c001d1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1d6:	e8 23 c5 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	83 c4 0c             	add    esp,0xc
c001d1e1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d1e4 <APICTimer::~APICTimer()>:
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c001d1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f0:	89 10                	mov    DWORD PTR [eax],edx
c001d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f6:	83 ec 0c             	sub    esp,0xc
c001d1f9:	50                   	push   eax
c001d1fa:	e8 dd f1 fe ff       	call   c000c3dc <Timer::~Timer()>
c001d1ff:	83 c4 10             	add    esp,0x10
c001d202:	90                   	nop
c001d203:	83 c4 0c             	add    esp,0xc
c001d206:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d208 <APICTimer::~APICTimer()>:
c001d208:	83 ec 0c             	sub    esp,0xc
c001d20b:	83 ec 0c             	sub    esp,0xc
c001d20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d212:	e8 cd ff ff ff       	call   c001d1e4 <APICTimer::~APICTimer()>
c001d217:	83 c4 10             	add    esp,0x10
c001d21a:	83 ec 08             	sub    esp,0x8
c001d21d:	68 60 01 00 00       	push   0x160
c001d222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d226:	e8 d3 c4 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	83 c4 0c             	add    esp,0xc
c001d231:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d234 <PIT::~PIT()>:
c001d234:	83 ec 0c             	sub    esp,0xc
c001d237:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c001d23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d240:	89 10                	mov    DWORD PTR [eax],edx
c001d242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d246:	83 ec 0c             	sub    esp,0xc
c001d249:	50                   	push   eax
c001d24a:	e8 8d f1 fe ff       	call   c000c3dc <Timer::~Timer()>
c001d24f:	83 c4 10             	add    esp,0x10
c001d252:	90                   	nop
c001d253:	83 c4 0c             	add    esp,0xc
c001d256:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d258 <PIT::~PIT()>:
c001d258:	83 ec 0c             	sub    esp,0xc
c001d25b:	83 ec 0c             	sub    esp,0xc
c001d25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d262:	e8 cd ff ff ff       	call   c001d234 <PIT::~PIT()>
c001d267:	83 c4 10             	add    esp,0x10
c001d26a:	83 ec 08             	sub    esp,0x8
c001d26d:	68 5c 01 00 00       	push   0x15c
c001d272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d276:	e8 83 c4 fe ff       	call   c00096fe <operator delete(void*, unsigned long)>
c001d27b:	83 c4 10             	add    esp,0x10
c001d27e:	83 c4 0c             	add    esp,0xc
c001d281:	c3                   	ret    
