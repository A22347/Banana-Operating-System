
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f9 00 00       	call   c000f9dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 7d 02 00       	call   c0027de8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 89 02 c0       	mov    ebx,0xc0028992
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 89 02 c0    	cmp    ebx,0xc00289a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000049:	3d 58 d0 02 c0       	cmp    eax,0xc002d058
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d0 02 c0       	push   0xc002d058
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000075:	2d 58 d0 02 c0       	sub    eax,0xc002d058
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d0 02 c0       	push   0xc002d058
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d688,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 89 02 c0       	mov    ebx,0xc00289a8
c00000bb:	81 eb a4 89 02 c0    	sub    ebx,0xc00289a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 89 02 c0       	mov    esi,0xc00289a4
c00000ca:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d0 02 c0       	push   0xc002d058
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d688,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d6 02 c0       	push   0xc002d690
c000012c:	68 58 d0 02 c0       	push   0xc002d058
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 15 cd 01 00       	call   c001d0b0 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 1e 23 01 00       	call   c00126d1 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 f3 cc 01 00       	call   c001d0b0 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 41 d1 01 00       	call   c001d51d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 ef d6 01 00       	call   c001dad4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 da 02 c0 	lgdtd  ds:0xc002dad0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 fc 3f 01 00       	call   c00145d5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 a8 d6 02 c0       	mov    ds:0xc002d6a8,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 a8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a8,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 c0 89 02 c0 02 	test   BYTE PTR [edx-0x3ffd7640],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 c0 89 02 c0 08 	test   BYTE PTR [edx-0x3ffd7640],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 c0 89 02 c0 04 	test   BYTE PTR [edi-0x3ffd7640],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d c0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6c0
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 c4 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd293c]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 c4 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd293c],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d fc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6fc
c0000c49:	c7 42 0c f4 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d6f4
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 c0 d6 02 c0 02 	test   BYTE PTR ds:0xc002d6c0,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 51 e7 00 00       	call   c000f47b <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 93 e6 00 00       	call   c000f47b <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 7d e6 00 00       	call   c000f47b <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 59 e6 00 00       	call   c000f47b <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d c0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c0
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 c4 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd293c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 c4 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd293c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 f4 d6 02 c0 	lea    edx,[eax*8-0x3ffd290c]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d 00 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d700
c0000fcb:	81 fb f4 d6 02 c0    	cmp    ebx,0xc002d6f4
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d f4 d6 02 c0       	cmp    eax,0xc002d6f4
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d f0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6f0,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 fc d6 02 c0       	mov    ds:0xc002d6fc,eax
c0001007:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c000100c:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c000101a:	c7 40 0c f4 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d6f4
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 b8 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2948]
c000106b:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 c0 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2940]
c0001086:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd f4 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd260c],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 f4 d6 02 c0 	lea    eax,[eax*8-0x3ffd290c]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,ecx
c0001140:	89 0d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,ecx
c0001146:	c7 41 08 f4 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d6f4
c000114d:	c7 41 0c f4 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d6f4
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd ec d6 02 c0 	lea    edx,[ecx*8-0x3ffd2914]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 ec d6 02 c0 	lea    edx,[eax*4-0x3ffd2914]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d f4 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd260c],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edi
c0001213:	89 3d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,edi
c0001219:	c7 47 08 f4 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d6f4
c0001220:	c7 47 0c f4 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d6f4
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba c0 d6 02 c0       	mov    edx,0xc002d6c0
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d 14 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da14
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d 14 da 02 c0    	mov    DWORD PTR ds:0xc002da14,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 1c da 02 c0    	push   DWORD PTR ds:0xc002da1c
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 1c da 02 c0       	mov    eax,ds:0xc002da1c
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d ec d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6ec,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 c4 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd293c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 f4 d6 02 c0       	mov    eax,0xc002d6f4
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d ec d9 02 c0       	cmp    eax,0xc002d9ec
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 10 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da10
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 24 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da24
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 34 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da34
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 c4 8a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd753c]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 c0 d6 02 c0       	mov    ds:0xc002d6c0,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 a0 01 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcfe60]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 b7 ea 01 00       	jmp    c00204cc <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 a0 01 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcfe60]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 e8 ea 01 00       	jmp    c0020513 <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 a0 01 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcfe60]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 10 eb 01 00       	jmp    c002055a <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 1f 44 02 00       	call   c002614c <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 e0 8b 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7420]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 e0 8b 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7420]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba 74 be 02 c0       	mov    edx,0xc002be74
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 0c 8c 02 c0       	mov    edx,0xc0028c0c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 60 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd25a0]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 40 da 02 c0    	mov    ax,ds:0xc002da40
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 40 da 02 c0    	mov    ds:0xc002da40,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 1c 32 02 00       	call   c002614c <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad 60 8b 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd74a0]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 1b 8c 02 c0       	mov    eax,0xc0028c1b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 e0 8b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7420]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 e7 1b 02 00       	call   c002614c <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 60 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd25a0]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 60 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd25a0],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 ae 05 02 00       	call   c002614c <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 94 05 02 00       	call   c002614c <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 37 8b 02 c0       	mov    eax,0xc0028b37
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 30 8b 02 c0       	mov    eax,0xc0028b30
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 60 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25a0]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 20 8b 02 c0       	mov    esi,0xc0028b20
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 d7 ec 01 00       	call   c002614c <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 00 8b 02 c0       	mov    edx,0xc0028b00
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 22 8c 02 c0       	mov    edx,0xc0028c22
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 2e 8c 02 c0       	mov    edx,0xc0028c2e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 42 8c 02 c0       	mov    edx,0xc0028c42
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 98 73 00 00       	call   c000f624 <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 92 73 00 00       	call   c000f634 <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c 60 8f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028f60
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 60 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f60
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 60 8d 02 c0       	mov    eax,0xc0028d60
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 a0 8c 02 c0       	mov    eax,0xc0028ca0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 60 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73a0]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 d7 70 00 00       	call   c000f634 <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 c1 70 00 00       	call   c000f634 <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 2b f6 01 00       	call   c0027c1f <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 ee f5 01 00       	call   c0027c01 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 c2 f5 01 00       	call   c0027c1f <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 75 ec 01 00       	call   c0027324 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 ef f6 01 00       	call   c0027db0 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 3c f5 01 00       	call   c0027c1f <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 7e f4 01 00       	call   c0027c1f <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 4b f4 01 00       	call   c0027c01 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 38 f3 01 00       	call   c0027c1f <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 00 f3 01 00       	call   c0027c01 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 a0 6c 00 00       	call   c000f654 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 3b 6c 00 00       	call   c000f634 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 0c f1 01 00       	call   c0027c1f <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 d1 f0 01 00       	call   c0027c01 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 c0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b40]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 e1 ed 01 00       	call   c00279b3 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 5f e7 01 00       	call   c0027350 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 1b f0 01 00       	call   c0027c23 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 09 f1 01 00       	call   c0027d47 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 f3 e6 01 00       	call   c0027350 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 9e ef 01 00       	call   c0027c1d <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 7f ef 01 00       	call   c0027c21 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 0d f1 01 00       	call   c0027dd0 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 bf ec 01 00       	call   c00279b3 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 3d e6 01 00       	call   c0027350 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 f9 ee 01 00       	call   c0027c23 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 e7 ef 01 00       	call   c0027d47 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 d1 e5 01 00       	call   c0027350 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 7c ee 01 00       	call   c0027c1d <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 5c ee 01 00       	call   c0027c21 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 e9 ef 01 00       	call   c0027dd0 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 97 ed 01 00       	call   c0027c1f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 55 ed 01 00       	call   c0027c01 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 3d ed 01 00       	call   c0027c1f <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 af ea 01 00       	call   c00279b3 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 b1 dd 01 00       	call   c0026cd3 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 14 e4 01 00       	call   c0027350 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 66 ea 01 00       	call   c00279b3 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 6c dd 01 00       	call   c0026cd3 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 3b ea 01 00       	call   c00279b3 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 8b ec 01 00       	call   c0027c1d <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 68 e3 01 00       	call   c0027324 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 e2 ed 01 00       	call   c0027db0 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 11 ec 01 00       	call   c0027c01 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 0c e3 01 00       	call   c0027324 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 8a e9 01 00       	call   c00279b3 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 0d e3 01 00       	call   c0027350 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 5f e9 01 00       	call   c00279b3 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 c6 e5 01 00       	call   c0027634 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 45 dc 01 00       	call   c0026cd3 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 a5 d5 01 00       	call   c0026668 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 7c ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 65 e2 01 00       	call   c0027350 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 4c ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 be db 01 00       	call   c0026cd3 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 f7 ea 01 00       	call   c0027c23 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 df e4 01 00       	call   c0027634 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 65 db 01 00       	call   c0026cd3 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 4b ec 01 00       	call   c0027dd0 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 25 e8 01 00       	call   c00279b3 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 7c e1 01 00       	call   c0027324 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 5b ea 01 00       	call   c0027c1f <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 f4 da 01 00       	call   c0026cd3 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 20 e1 01 00       	call   c0027324 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 ba eb 01 00       	call   c0027dd0 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 73 e7 01 00       	call   c00279b3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 f0 e0 01 00       	call   c0027350 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 43 e7 01 00       	call   c00279b3 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 49 da 01 00       	call   c0026cd3 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 19 e7 01 00       	call   c00279b3 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 6b e9 01 00       	call   c0027c1f <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 42 e0 01 00       	call   c0027324 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 bc ea 01 00       	call   c0027db0 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 eb e8 01 00       	call   c0027c01 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 e5 df 01 00       	call   c0027324 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 63 e6 01 00       	call   c00279b3 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 e6 df 01 00       	call   c0027350 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 38 e6 01 00       	call   c00279b3 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 9f e2 01 00       	call   c0027634 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 1e d9 01 00       	call   c0026cd3 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 6e d2 01 00       	call   c0026668 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 45 e9 01 00       	call   c0027d47 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 2e df 01 00       	call   c0027350 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 15 e9 01 00       	call   c0027d47 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 87 d8 01 00       	call   c0026cd3 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 c0 e7 01 00       	call   c0027c23 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 a7 e1 01 00       	call   c0027634 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 26 d8 01 00       	call   c0026cd3 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 0c e9 01 00       	call   c0027dd0 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 e6 e4 01 00       	call   c00279b3 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 3d de 01 00       	call   c0027324 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 1c e7 01 00       	call   c0027c1f <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 b5 d7 01 00       	call   c0026cd3 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 e1 dd 01 00       	call   c0027324 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 56 e4 01 00       	call   c00279b3 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 5c d7 01 00       	call   c0026cd3 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 20 95 02 c0       	mov    eax,0xc0029520
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 34 95 02 c0       	mov    eax,0xc0029534
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d4 5f 00 00       	call   c000f634 <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 d6 5f 00 00       	call   c000f654 <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 d1 e2 01 00       	call   c00279b3 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 4f dc 01 00       	call   c0027350 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 e1 ce 01 00       	call   c0026668 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 b8 e5 01 00       	call   c0027d47 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 a1 db 01 00       	call   c0027350 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 84 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 f6 d4 01 00       	call   c0026cd3 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 56 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 45 db 01 00       	call   c0027350 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 ae d4 01 00       	call   c0026cd3 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 cf cd 01 00       	call   c0026668 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 a6 e4 01 00       	call   c0027d47 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 8f da 01 00       	call   c0027350 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 72 e4 01 00       	call   c0027d47 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 e4 d3 01 00       	call   c0026cd3 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 44 e4 01 00       	call   c0027d47 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 33 da 01 00       	call   c0027350 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 9c d3 01 00       	call   c0026cd3 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 7a d3 01 00       	call   c0026cd3 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 56 cc 01 00       	call   c0026668 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 2d e3 01 00       	call   c0027d47 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 16 d9 01 00       	call   c0027350 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 f9 e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 6b d2 01 00       	call   c0026cd3 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 cb e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 b4 d8 01 00       	call   c0027350 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 1d d2 01 00       	call   c0026cd3 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 7d e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 66 d8 01 00       	call   c0027350 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 cf d1 01 00       	call   c0026cd3 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 e4 ca 01 00       	call   c0026668 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 bb e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 a4 d7 01 00       	call   c0027350 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 8b e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 fd d0 01 00       	call   c0026cd3 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 5d e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 46 d7 01 00       	call   c0027350 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 af d0 01 00       	call   c0026cd3 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 0f e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 f8 d6 01 00       	call   c0027350 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 61 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 35 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 92 d6 01 00       	call   c0027350 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 4e df 01 00       	call   c0027c23 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 dd cf 01 00       	call   c0026cd3 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 3a d6 01 00       	call   c0027350 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 f6 de 01 00       	call   c0027c23 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 70 c8 01 00       	call   c0026668 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 47 df 01 00       	call   c0027d47 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 30 d5 01 00       	call   c0027350 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 13 df 01 00       	call   c0027d47 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 85 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 e5 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 ce d4 01 00       	call   c0027350 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 37 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 97 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 80 d4 01 00       	call   c0027350 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 e9 cd 01 00       	call   c0026cd3 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 49 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 32 d4 01 00       	call   c0027350 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 9b cd 01 00       	call   c0026cd3 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 fb dd 01 00       	call   c0027d47 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 e4 d3 01 00       	call   c0027350 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 4d cd 01 00       	call   c0026cd3 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 4f c6 01 00       	call   c0026668 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 26 dd 01 00       	call   c0027d47 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 0f d3 01 00       	call   c0027350 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 f6 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 68 cc 01 00       	call   c0026cd3 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 c8 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 b1 d2 01 00       	call   c0027350 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 1a cc 01 00       	call   c0026cd3 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 7a dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 63 d2 01 00       	call   c0027350 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 cc cb 01 00       	call   c0026cd3 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 2c dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 15 d2 01 00       	call   c0027350 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 7e cb 01 00       	call   c0026cd3 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 de db 01 00       	call   c0027d47 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 c7 d1 01 00       	call   c0027350 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 30 cb 01 00       	call   c0026cd3 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 04 cb 01 00       	call   c0026cd3 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 61 d1 01 00       	call   c0027350 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 1d da 01 00       	call   c0027c23 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 ac ca 01 00       	call   c0026cd3 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 09 d1 01 00       	call   c0027350 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 c5 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 53 ca 01 00       	call   c0026cd3 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 b0 d0 01 00       	call   c0027350 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 6c d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 fa c9 01 00       	call   c0026cd3 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 57 d0 01 00       	call   c0027350 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 13 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 71 c2 01 00       	call   c0026668 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 48 d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 31 cf 01 00       	call   c0027350 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 14 d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 86 c8 01 00       	call   c0026cd3 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 e6 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 cf ce 01 00       	call   c0027350 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 38 c8 01 00       	call   c0026cd3 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 98 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 81 ce 01 00       	call   c0027350 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 ea c7 01 00       	call   c0026cd3 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 4a d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 33 ce 01 00       	call   c0027350 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 9c c7 01 00       	call   c0026cd3 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 fc d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 e5 cd 01 00       	call   c0027350 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 4e c7 01 00       	call   c0026cd3 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 ae d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 97 cd 01 00       	call   c0027350 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 fd c6 01 00       	call   c0026cd3 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 5d d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 46 cd 01 00       	call   c0027350 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 af c6 01 00       	call   c0026cd3 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 a9 bf 01 00       	call   c0026668 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 80 d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 69 cc 01 00       	call   c0027350 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 49 d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 bb c5 01 00       	call   c0026cd3 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 1b d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 04 cc 01 00       	call   c0027350 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 6d c5 01 00       	call   c0026cd3 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 cd d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 b6 cb 01 00       	call   c0027350 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 1f c5 01 00       	call   c0026cd3 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 7f d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 68 cb 01 00       	call   c0027350 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 d1 c4 01 00       	call   c0026cd3 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 31 d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 1a cb 01 00       	call   c0027350 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 83 c4 01 00       	call   c0026cd3 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 e3 d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 cc ca 01 00       	call   c0027350 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 32 c4 01 00       	call   c0026cd3 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 92 d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 7b ca 01 00       	call   c0027350 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 ea c3 01 00       	call   c0026cd3 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 c3 c3 01 00       	call   c0026cd3 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 21 ca 01 00       	call   c0027350 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 dd d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 6c c3 01 00       	call   c0026cd3 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 ca c9 01 00       	call   c0027350 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 86 d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 14 c3 01 00       	call   c0026cd3 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 72 c9 01 00       	call   c0027350 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 2e d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 bc c2 01 00       	call   c0026cd3 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 1a c9 01 00       	call   c0027350 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 d6 d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 64 c2 01 00       	call   c0026cd3 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 c2 c8 01 00       	call   c0027350 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 7e d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 12 c2 01 00       	call   c0026cd3 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 70 c8 01 00       	call   c0027350 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 2c d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 40 ba 01 00       	call   c0026668 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 17 d1 01 00       	call   c0027d47 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 00 c7 01 00       	call   c0027350 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 e7 d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 59 c0 01 00       	call   c0026cd3 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 64 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a9c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 8d d0 01 00       	call   c0027d47 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 76 c6 01 00       	call   c0027350 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 e1 bf 01 00       	call   c0026cd3 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 2e d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 17 c6 01 00       	call   c0027350 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 82 bf 01 00       	call   c0026cd3 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 cf cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 b8 c5 01 00       	call   c0027350 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 23 bf 01 00       	call   c0026cd3 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 70 cf 01 00       	call   c0027d47 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 59 c5 01 00       	call   c0027350 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 c4 be 01 00       	call   c0026cd3 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 11 cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 fa c4 01 00       	call   c0027350 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 65 be 01 00       	call   c0026cd3 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 b2 ce 01 00       	call   c0027d47 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 9b c4 01 00       	call   c0027350 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 06 be 01 00       	call   c0026cd3 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 53 ce 01 00       	call   c0027d47 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 3c c4 01 00       	call   c0027350 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 a7 bd 01 00       	call   c0026cd3 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 f4 cd 01 00       	call   c0027d47 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 dd c3 01 00       	call   c0027350 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 48 bd 01 00       	call   c0026cd3 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 52 b6 01 00       	call   c0026668 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 29 cd 01 00       	call   c0027d47 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 12 c3 01 00       	call   c0027350 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 f9 cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 6b bc 01 00       	call   c0026cd3 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 80 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a80]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 9e cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 87 c2 01 00       	call   c0027350 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 f2 bb 01 00       	call   c0026cd3 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 3e cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 27 c2 01 00       	call   c0027350 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 92 bb 01 00       	call   c0026cd3 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 de cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 c7 c1 01 00       	call   c0027350 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 32 bb 01 00       	call   c0026cd3 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 7e cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 67 c1 01 00       	call   c0027350 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 d2 ba 01 00       	call   c0026cd3 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 1e cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 07 c1 01 00       	call   c0027350 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 72 ba 01 00       	call   c0026cd3 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 be ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 a7 c0 01 00       	call   c0027350 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 12 ba 01 00       	call   c0026cd3 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 5e ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 47 c0 01 00       	call   c0027350 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 b2 b9 01 00       	call   c0026cd3 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 fe c9 01 00       	call   c0027d47 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 e7 bf 01 00       	call   c0027350 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 52 b9 01 00       	call   c0026cd3 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 9c 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a64]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 f7 b8 01 00       	call   c0026cd3 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 54 bf 01 00       	call   c0027350 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 10 c8 01 00       	call   c0027c23 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 9a b8 01 00       	call   c0026cd3 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 f7 be 01 00       	call   c0027350 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 b3 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 3d b8 01 00       	call   c0026cd3 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 9a be 01 00       	call   c0027350 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 56 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 e0 b7 01 00       	call   c0026cd3 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 3d be 01 00       	call   c0027350 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 f9 c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 83 b7 01 00       	call   c0026cd3 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 e0 bd 01 00       	call   c0027350 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 9c c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 26 b7 01 00       	call   c0026cd3 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 83 bd 01 00       	call   c0027350 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 3f c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 c9 b6 01 00       	call   c0026cd3 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 26 bd 01 00       	call   c0027350 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 e2 c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 6c b6 01 00       	call   c0026cd3 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 c9 bc 01 00       	call   c0027350 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 85 c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 81 bc 01 00       	call   c0027350 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 f1 c6 01 00       	jmp    c0027dd0 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 63 c3 01 00       	call   c0027c1f <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 21 c3 01 00       	call   c0027c01 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 b8 c0 01 00       	call   c00279b3 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 b9 b3 01 00       	call   c0026cd3 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 88 c0 01 00       	call   c00279b3 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 ef bc 01 00       	call   c0027634 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 8e c2 01 00       	call   c0027c01 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 91 c2 01 00       	call   c0027c1f <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 64 c2 01 00       	call   c0027c1f <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 5d bc 01 00       	call   c0027634 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 df c3 01 00       	call   c0027dd0 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 ba c3 01 00       	call   c0027dd0 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 94 bf 01 00       	call   c00279b3 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 eb b8 01 00       	call   c0027324 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 ca c1 01 00       	call   c0027c1f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 63 b2 01 00       	call   c0026cd3 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 87 b8 01 00       	call   c0027324 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 21 c3 01 00       	call   c0027dd0 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 61 bb 01 00       	call   c0027634 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 de b1 01 00       	call   c0026cd3 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 0a be 01 00       	call   c00279b3 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 0a b1 01 00       	call   c0026cd3 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 ea b0 01 00       	call   c0026cd3 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 ba bd 01 00       	call   c00279b3 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 0a c0 01 00       	call   c0027c1d <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 e9 b6 01 00       	call   c0027324 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 63 c1 01 00       	call   c0027db0 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 92 bf 01 00       	call   c0027c01 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 90 b6 01 00       	call   c0027324 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 0e bd 01 00       	call   c00279b3 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 91 b6 01 00       	call   c0027350 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 e3 bc 01 00       	call   c00279b3 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 4a b9 01 00       	call   c0027634 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 c9 af 01 00       	call   c0026cd3 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 93 bc 01 00       	call   c00279b3 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 df be 01 00       	call   c0027c1f <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 d4 b5 01 00       	call   c0027350 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 a6 b5 01 00       	call   c0027350 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 df bb 01 00       	call   c00279b3 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 43 b8 01 00       	call   c0027634 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 0b b8 01 00       	call   c0027634 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 8a ae 01 00       	call   c0026cd3 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 6f bf 01 00       	call   c0027dd0 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 49 bb 01 00       	call   c00279b3 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 a0 b4 01 00       	call   c0027324 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 7f bd 01 00       	call   c0027c1f <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 17 ae 01 00       	call   c0026cd3 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 3b b4 01 00       	call   c0027324 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 d5 be 01 00       	call   c0027dd0 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 9e bc 01 00       	call   c0027c1f <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 5c bc 01 00       	call   c0027c01 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 f3 b9 01 00       	call   c00279b3 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 f4 ac 01 00       	call   c0026cd3 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 c3 b9 01 00       	call   c00279b3 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 2a b6 01 00       	call   c0027634 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 c9 bb 01 00       	call   c0027c01 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 cc bb 01 00       	call   c0027c1f <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 9f bb 01 00       	call   c0027c1f <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 98 b5 01 00       	call   c0027634 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 1a bd 01 00       	call   c0027dd0 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 f5 bc 01 00       	call   c0027dd0 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 cf b8 01 00       	call   c00279b3 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 26 b2 01 00       	call   c0027324 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 05 bb 01 00       	call   c0027c1f <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 9e ab 01 00       	call   c0026cd3 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 c2 b1 01 00       	call   c0027324 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 5c bc 01 00       	call   c0027dd0 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 9c b4 01 00       	call   c0027634 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 19 ab 01 00       	call   c0026cd3 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 44 b7 01 00       	call   c00279b3 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 44 aa 01 00       	call   c0026cd3 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 24 aa 01 00       	call   c0026cd3 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 f4 b6 01 00       	call   c00279b3 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 44 b9 01 00       	call   c0027c1d <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 22 b0 01 00       	call   c0027324 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 9c ba 01 00       	call   c0027db0 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 cb b8 01 00       	call   c0027c01 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 c8 af 01 00       	call   c0027324 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 46 b6 01 00       	call   c00279b3 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 c9 af 01 00       	call   c0027350 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 1b b6 01 00       	call   c00279b3 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 82 b2 01 00       	call   c0027634 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 01 a9 01 00       	call   c0026cd3 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 cb b5 01 00       	call   c00279b3 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 17 b8 01 00       	call   c0027c1f <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 0c af 01 00       	call   c0027350 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 de ae 01 00       	call   c0027350 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 15 b5 01 00       	call   c00279b3 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 79 b1 01 00       	call   c0027634 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 46 b1 01 00       	call   c0027634 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 c5 a7 01 00       	call   c0026cd3 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 aa b8 01 00       	call   c0027dd0 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 84 b4 01 00       	call   c00279b3 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 db ad 01 00       	call   c0027324 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 ba b6 01 00       	call   c0027c1f <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 52 a7 01 00       	call   c0026cd3 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 76 ad 01 00       	call   c0027324 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 10 b8 01 00       	call   c0027dd0 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 d9 b5 01 00       	call   c0027c1f <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 97 b5 01 00       	call   c0027c01 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 2e b3 01 00       	call   c00279b3 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 2f a6 01 00       	call   c0026cd3 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 fe b2 01 00       	call   c00279b3 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 65 af 01 00       	call   c0027634 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 04 b5 01 00       	call   c0027c01 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 07 b5 01 00       	call   c0027c1f <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 da b4 01 00       	call   c0027c1f <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 d3 ae 01 00       	call   c0027634 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 55 b6 01 00       	call   c0027dd0 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 30 b6 01 00       	call   c0027dd0 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 0a b2 01 00       	call   c00279b3 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 61 ab 01 00       	call   c0027324 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 40 b4 01 00       	call   c0027c1f <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 d9 a4 01 00       	call   c0026cd3 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 fd aa 01 00       	call   c0027324 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 97 b5 01 00       	call   c0027dd0 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 d7 ad 01 00       	call   c0027634 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 54 a4 01 00       	call   c0026cd3 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 7f b0 01 00       	call   c00279b3 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 7f a3 01 00       	call   c0026cd3 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 5f a3 01 00       	call   c0026cd3 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 2f b0 01 00       	call   c00279b3 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 7f b2 01 00       	call   c0027c1d <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 5d a9 01 00       	call   c0027324 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 d7 b3 01 00       	call   c0027db0 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 06 b2 01 00       	call   c0027c01 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 03 a9 01 00       	call   c0027324 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 81 af 01 00       	call   c00279b3 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 04 a9 01 00       	call   c0027350 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 56 af 01 00       	call   c00279b3 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 bd ab 01 00       	call   c0027634 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 3c a2 01 00       	call   c0026cd3 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 06 af 01 00       	call   c00279b3 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 52 b1 01 00       	call   c0027c1f <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 47 a8 01 00       	call   c0027350 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 19 a8 01 00       	call   c0027350 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 50 ae 01 00       	call   c00279b3 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 b4 aa 01 00       	call   c0027634 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 81 aa 01 00       	call   c0027634 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 00 a1 01 00       	call   c0026cd3 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 e5 b1 01 00       	call   c0027dd0 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 bf ad 01 00       	call   c00279b3 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 16 a7 01 00       	call   c0027324 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 f5 af 01 00       	call   c0027c1f <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 8d a0 01 00       	call   c0026cd3 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 b1 a6 01 00       	call   c0027324 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 4b b1 01 00       	call   c0027dd0 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 14 af 01 00       	call   c0027c1f <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 d2 ae 01 00       	call   c0027c01 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 69 ac 01 00       	call   c00279b3 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 6a 9f 01 00       	call   c0026cd3 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 39 ac 01 00       	call   c00279b3 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 a0 a8 01 00       	call   c0027634 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 3f ae 01 00       	call   c0027c01 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 42 ae 01 00       	call   c0027c1f <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 15 ae 01 00       	call   c0027c1f <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 0e a8 01 00       	call   c0027634 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 90 af 01 00       	call   c0027dd0 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 6b af 01 00       	call   c0027dd0 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 45 ab 01 00       	call   c00279b3 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 9c a4 01 00       	call   c0027324 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 7b ad 01 00       	call   c0027c1f <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 14 9e 01 00       	call   c0026cd3 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 38 a4 01 00       	call   c0027324 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 d2 ae 01 00       	call   c0027dd0 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 12 a7 01 00       	call   c0027634 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 8f 9d 01 00       	call   c0026cd3 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 ba a9 01 00       	call   c00279b3 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 ba 9c 01 00       	call   c0026cd3 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 9a 9c 01 00       	call   c0026cd3 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 6a a9 01 00       	call   c00279b3 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 ba ab 01 00       	call   c0027c1d <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 98 a2 01 00       	call   c0027324 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 12 ad 01 00       	call   c0027db0 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 41 ab 01 00       	call   c0027c01 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 3e a2 01 00       	call   c0027324 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 bc a8 01 00       	call   c00279b3 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 3f a2 01 00       	call   c0027350 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 91 a8 01 00       	call   c00279b3 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 f8 a4 01 00       	call   c0027634 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 77 9b 01 00       	call   c0026cd3 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 41 a8 01 00       	call   c00279b3 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 8d aa 01 00       	call   c0027c1f <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 82 a1 01 00       	call   c0027350 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 54 a1 01 00       	call   c0027350 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 8b a7 01 00       	call   c00279b3 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 ef a3 01 00       	call   c0027634 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 bc a3 01 00       	call   c0027634 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 3b 9a 01 00       	call   c0026cd3 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 20 ab 01 00       	call   c0027dd0 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 fa a6 01 00       	call   c00279b3 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 51 a0 01 00       	call   c0027324 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 30 a9 01 00       	call   c0027c1f <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 c8 99 01 00       	call   c0026cd3 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 ec 9f 01 00       	call   c0027324 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 86 aa 01 00       	call   c0027dd0 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 4c a8 01 00       	call   c0027c1f <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 0a a8 01 00       	call   c0027c01 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 a1 a5 01 00       	call   c00279b3 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 a2 98 01 00       	call   c0026cd3 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 71 a5 01 00       	call   c00279b3 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 d8 a1 01 00       	call   c0027634 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 77 a7 01 00       	call   c0027c01 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 7a a7 01 00       	call   c0027c1f <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 4d a7 01 00       	call   c0027c1f <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 46 a1 01 00       	call   c0027634 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 c8 a8 01 00       	call   c0027dd0 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 9f a8 01 00       	call   c0027dd0 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 79 a4 01 00       	call   c00279b3 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 d0 9d 01 00       	call   c0027324 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 af a6 01 00       	call   c0027c1f <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 48 97 01 00       	call   c0026cd3 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 70 9d 01 00       	call   c0027324 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 0a a8 01 00       	call   c0027dd0 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 4b a0 01 00       	call   c0027634 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 c8 96 01 00       	call   c0026cd3 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 f4 a2 01 00       	call   c00279b3 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 f4 95 01 00       	call   c0026cd3 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 d4 95 01 00       	call   c0026cd3 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 a4 a2 01 00       	call   c00279b3 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 d8 a4 01 00       	call   c0027c01 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 cf 9b 01 00       	call   c0027324 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 49 a6 01 00       	call   c0027db0 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 78 a4 01 00       	call   c0027c01 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 72 9b 01 00       	call   c0027324 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 f0 a1 01 00       	call   c00279b3 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 73 9b 01 00       	call   c0027350 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 c5 a1 01 00       	call   c00279b3 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 2c 9e 01 00       	call   c0027634 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 ab 94 01 00       	call   c0026cd3 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 75 a1 01 00       	call   c00279b3 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 c1 a3 01 00       	call   c0027c1f <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 b6 9a 01 00       	call   c0027350 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 88 9a 01 00       	call   c0027350 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 cc a0 01 00       	call   c00279b3 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 33 9d 01 00       	call   c0027634 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 1c 9a 01 00       	call   c0027350 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 d8 a2 01 00       	call   c0027c23 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 cb 9c 01 00       	call   c0027634 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 4a 93 01 00       	call   c0026cd3 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 2f a4 01 00       	call   c0027dd0 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 09 a0 01 00       	call   c00279b3 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 60 99 01 00       	call   c0027324 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 3f a2 01 00       	call   c0027c1f <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 d7 92 01 00       	call   c0026cd3 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 ff 98 01 00       	call   c0027324 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 99 a3 01 00       	call   c0027dd0 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 c4 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a3c]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 b8 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a48]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 9a 1b 00 00       	call   c000f634 <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 54 a0 01 00       	call   c0027c1f <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 12 a0 01 00       	call   c0027c01 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 fe 9f 01 00       	call   c0027c1f <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 70 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 ee 96 01 00       	call   c0027350 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 40 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 46 90 01 00       	call   c0026cd3 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 15 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 65 9f 01 00       	call   c0027c1d <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 46 96 01 00       	call   c0027324 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 c0 a0 01 00       	call   c0027db0 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 ef 9e 01 00       	call   c0027c01 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 ee 95 01 00       	call   c0027324 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 6c 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 ef 95 01 00       	call   c0027350 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 41 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 a8 98 01 00       	call   c0027634 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 27 8f 01 00       	call   c0026cd3 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 4f 98 01 00       	call   c0027634 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d5 8e 01 00       	call   c0026cd3 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 bb 9f 01 00       	call   c0027dd0 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 95 9b 01 00       	call   c00279b3 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 ec 94 01 00       	call   c0027324 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 cb 9d 01 00       	call   c0027c1f <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 64 8e 01 00       	call   c0026cd3 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 90 94 01 00       	call   c0027324 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 2a 9f 01 00       	call   c0027dd0 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 df 9a 01 00       	call   c00279b3 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 5c 94 01 00       	call   c0027350 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 ad 9a 01 00       	call   c00279b3 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 b3 8d 01 00       	call   c0026cd3 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 83 9a 01 00       	call   c00279b3 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 d7 9c 01 00       	call   c0027c21 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 b0 93 01 00       	call   c0027324 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 2a 9e 01 00       	call   c0027db0 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 59 9c 01 00       	call   c0027c01 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 57 93 01 00       	call   c0027324 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 d5 99 01 00       	call   c00279b3 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 58 93 01 00       	call   c0027350 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 aa 99 01 00       	call   c00279b3 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 11 96 01 00       	call   c0027634 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 90 8c 01 00       	call   c0026cd3 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 ac 95 01 00       	call   c0027634 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 2b 8c 01 00       	call   c0026cd3 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 11 9d 01 00       	call   c0027dd0 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 eb 98 01 00       	call   c00279b3 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 42 92 01 00       	call   c0027324 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 21 9b 01 00       	call   c0027c1f <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 ba 8b 01 00       	call   c0026cd3 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 e6 91 01 00       	call   c0027324 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 57 98 01 00       	call   c00279b3 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 5d 8b 01 00       	call   c0026cd3 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 de 96 02 c0       	mov    eax,0xc00296de
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 ef 96 02 c0       	mov    eax,0xc00296ef
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 dc 13 00 00       	call   c000f634 <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 de 13 00 00       	call   c000f654 <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 4d 13 00 00       	call   c000f624 <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 26 97 02 c0       	push   0xc0029726
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 c8 da 02 c0       	mov    eax,0xc002dac8
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 2f 97 02 c0       	push   0xc002972f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 4c 61 02 c0       	mov    eax,0xc002614c
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 39 97 02 c0       	push   0xc0029739
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 80 5e 02 c0       	mov    eax,0xc0025e80
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 42 97 02 c0       	push   0xc0029742
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 4c 62 02 c0       	mov    eax,0xc002624c
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 4c 97 02 c0       	push   0xc002974c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 cc 5f 02 c0       	mov    eax,0xc0025fcc
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 55 97 02 c0       	push   0xc0029755
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 cc da 02 c0       	mov    eax,0xc002dacc
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 62 97 02 c0       	push   0xc0029762
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 cd da 02 c0       	mov    eax,0xc002dacd
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 83 5a 00 00       	call   c0013e90 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 e1 11 00 00       	call   c000f624 <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c000e452:	68 6f 97 02 c0       	push   0xc002976f
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 bf ee 00 00       	call   c001d31e <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 b9 ef 00 c0       	push   0xc000efb9
c000e46e:	53                   	push   ebx
c000e46f:	e8 a8 f1 00 00       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 7a de 01 c0       	push   0xc001de7a
c000e47d:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c000e483:	e8 94 f1 00 00       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 e8 ff 02 c0       	mov    ds:0xc002ffe8,eax
c000e490:	c6 05 cd da 02 c0 01 	mov    BYTE PTR ds:0xc002dacd,0x1
c000e497:	e8 5f fd 00 00       	call   c001e1fb <Vm::initialise8086()>
c000e49c:	e8 d7 47 00 00       	call   c0012c78 <Fs::initVFS()>
c000e4a1:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 59 d8 00 00       	call   c001bd16 <Sys::loadSyscalls()>
c000e4bd:	e8 9e b8 00 00       	call   c0019d60 <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 7c 97 02 c0       	push   0xc002977c
c000e4cc:	68 85 97 02 c0       	push   0xc0029785
c000e4d1:	e8 b0 c5 00 00       	call   c001aa86 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 82 52 00 00       	call   c0013760 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 75 59 00 00       	call   c0013e64 <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 8d 97 02 c0       	push   0xc002978d
c000e4fe:	e8 74 e9 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 7a eb 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 67 f4 00 00       	call   c001d980 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 a9 97 02 c0       	push   0xc00297a9
c000e52d:	50                   	push   eax
c000e52e:	e8 d7 59 00 00       	call   c0013f0a <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba 48 99 02 c0       	mov    edx,0xc0029948
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 e1 da 02 c0 04 	test   BYTE PTR ds:0xc002dae1,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 4f 77 01 00       	call   c0025e16 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 20 a0 00 00       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 f9 9f 00 00       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 d7 9f 00 00       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 b5 9f 00 00       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 e0 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dae0,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 c3 9e 00 00       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 9e 9e 00 00       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 b9 75 01 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 76 75 01 00       	call   c0025db0 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 ba 9e 00 00       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 b9 97 02 c0       	push   0xc00297b9
c000e893:	e8 5b 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 cc 97 02 c0       	push   0xc00297cc
c000e8b6:	e8 38 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 dd 97 02 c0       	push   0xc00297dd
c000e8d9:	e8 15 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 ee 97 02 c0       	push   0xc00297ee
c000e8fc:	e8 f2 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 ff 97 02 c0       	push   0xc00297ff
c000e91f:	e8 cf 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 10 98 02 c0       	push   0xc0029810
c000e942:	e8 ac 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 21 98 02 c0       	push   0xc0029821
c000e965:	e8 89 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 32 98 02 c0       	push   0xc0029832
c000e988:	e8 66 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 43 98 02 c0       	push   0xc0029843
c000e9ab:	e8 43 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 54 98 02 c0       	push   0xc0029854
c000e9ce:	e8 20 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 65 98 02 c0       	push   0xc0029865
c000e9f1:	e8 fd 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 76 98 02 c0       	push   0xc0029876
c000ea14:	e8 da 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 87 98 02 c0       	push   0xc0029887
c000ea37:	e8 b7 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 98 98 02 c0       	push   0xc0029898
c000ea5a:	e8 94 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 a9 98 02 c0       	push   0xc00298a9
c000ea7d:	e8 71 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 ba 98 02 c0       	push   0xc00298ba
c000eaa0:	e8 4e 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 cb 98 02 c0       	push   0xc00298cb
c000eac3:	e8 2b 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 dc 98 02 c0       	push   0xc00298dc
c000eae6:	e8 08 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 ed 98 02 c0       	push   0xc00298ed
c000eb05:	e8 e9 3d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 6b b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b26b
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 d8 3d 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 fe 98 02 c0       	push   0xc00298fe
c000ebee:	e8 a6 b2 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 04 99 02 c0       	push   0xc0029904
c000ec26:	e8 6e b2 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 e0 da 02 c0 04 	test   BYTE PTR ds:0xc002dae0,0x4
c000ec7e:	68 68 12 00 00       	push   0x1268
c000ec83:	0f 94 05 04 ca 02 c0 	sete   BYTE PTR ds:0xc002ca04
c000ec8a:	e8 95 09 00 00       	call   c000f624 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 59 8f 00 00       	call   c0017bf2 <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	56                   	push   esi
c000eca2:	53                   	push   ebx
c000eca3:	e8 72 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 cc f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ecb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb3:	e8 ce fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecb8:	59                   	pop    ecx
c000ecb9:	5e                   	pop    esi
c000ecba:	6a 01                	push   0x1
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 94 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecc2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc9:	e8 56 09 00 00       	call   c000f624 <malloc>
c000ecce:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecd1:	89 c6                	mov    esi,eax
c000ecd3:	e8 02 9b 00 00       	call   c00187da <CPU::CPU()>
c000ecd8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecde:	58                   	pop    eax
c000ecdf:	5a                   	pop    edx
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	e8 33 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ece7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eced:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf3:	6a 00                	push   0x0
c000ecf5:	6a 00                	push   0x0
c000ecf7:	50                   	push   eax
c000ecf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	e8 9d 55 00 00       	call   c00142a0 <setupFPU()>
c000ed03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	74 1f                	je     c000ed2c <Computer::open(int, int, void*)+0xbe>
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	53                   	push   ebx
c000ed12:	e8 03 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ed17:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	6a 00                	push   0x0
c000ed25:	50                   	push   eax
c000ed26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed29:	83 c4 20             	add    esp,0x20
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 34 e4 00 c0       	push   0xc000e434
c000ed34:	e8 e3 e9 00 00       	call   c001d71c <setupMultitasking(void (*)())>
c000ed39:	83 c4 14             	add    esp,0x14
c000ed3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed41:	5b                   	pop    ebx
c000ed42:	5e                   	pop    esi
c000ed43:	c3                   	ret    

c000ed44 <Computer::disableNMI()>:
c000ed44:	6a 00                	push   0x0
c000ed46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4a:	e8 07 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed4f:	58                   	pop    eax
c000ed50:	5a                   	pop    edx
c000ed51:	c3                   	ret    

c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5d:	19 c0                	sbb    eax,eax
c000ed5f:	83 e0 80             	and    eax,0xffffff80
c000ed62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed66:	e6 70                	out    0x70,al
c000ed68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6c:	e6 71                	out    0x71,al
c000ed6e:	c3                   	ret    
c000ed6f:	90                   	nop

c000ed70 <Computer::handleNMI()>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 10             	sub    esp,0x10
c000ed75:	e4 92                	in     al,0x92
c000ed77:	89 c6                	mov    esi,eax
c000ed79:	e4 61                	in     al,0x61
c000ed7b:	68 0a 99 02 c0       	push   0xc002990a
c000ed80:	88 c3                	mov    bl,al
c000ed82:	e8 6c 3b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	83 e6 10             	and    esi,0x10
c000ed8d:	75 0d                	jne    c000ed9c <Computer::handleNMI()+0x2c>
c000ed8f:	f6 c3 40             	test   bl,0x40
c000ed92:	75 1d                	jne    c000edb1 <Computer::handleNMI()+0x41>
c000ed94:	84 db                	test   bl,bl
c000ed96:	78 2d                	js     c000edc5 <Computer::handleNMI()+0x55>
c000ed98:	58                   	pop    eax
c000ed99:	5b                   	pop    ebx
c000ed9a:	5e                   	pop    esi
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 1b 99 02 c0       	push   0xc002991b
c000eda4:	e8 f0 b0 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 c3 40             	test   bl,0x40
c000edaf:	74 e3                	je     c000ed94 <Computer::handleNMI()+0x24>
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 28 99 02 c0       	push   0xc0029928
c000edb9:	e8 db b0 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	84 db                	test   bl,bl
c000edc3:	79 d3                	jns    c000ed98 <Computer::handleNMI()+0x28>
c000edc5:	c7 44 24 10 32 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029932
c000edcd:	5a                   	pop    edx
c000edce:	5b                   	pop    ebx
c000edcf:	5e                   	pop    esi
c000edd0:	e9 c4 b0 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c000edd5:	90                   	nop

c000edd6 <Computer::setDiskActivityLight(int, bool)>:
c000edd6:	56                   	push   esi
c000edd7:	53                   	push   ebx
c000edd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ede1:	77 1b                	ja     c000edfe <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede3:	e4 92                	in     al,0x92
c000ede5:	bb 40 00 00 00       	mov    ebx,0x40
c000edea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edee:	89 da                	mov    edx,ebx
c000edf0:	d3 e2                	shl    edx,cl
c000edf2:	89 f1                	mov    ecx,esi
c000edf4:	f7 d2                	not    edx
c000edf6:	d3 e3                	shl    ebx,cl
c000edf8:	21 d0                	and    eax,edx
c000edfa:	09 d8                	or     eax,ebx
c000edfc:	e6 92                	out    0x92,al
c000edfe:	5b                   	pop    ebx
c000edff:	5e                   	pop    esi
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDTEntry::setBase(unsigned int)>:
c000ee02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee0a:	89 c1                	mov    ecx,eax
c000ee0c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee10:	c1 e9 10             	shr    ecx,0x10
c000ee13:	c1 e8 18             	shr    eax,0x18
c000ee16:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee19:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <GDTEntry::setLimit(unsigned int)>:
c000ee1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee26:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee29:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2c:	83 e2 f0             	and    edx,0xfffffff0
c000ee2f:	c1 e8 10             	shr    eax,0x10
c000ee32:	83 e0 0f             	and    eax,0xf
c000ee35:	09 d0                	or     eax,edx
c000ee37:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::GDT()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee50:	90                   	nop
c000ee51:	c3                   	ret    

c000ee52 <GDT::addEntry(GDTEntry)>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	68 6c 99 02 c0       	push   0xc002996c
c000ee6a:	e8 84 3a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ee6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee79:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee81:	8d 50 01             	lea    edx,[eax+0x1]
c000ee84:	c1 e0 03             	shl    eax,0x3
c000ee87:	89 13                	mov    DWORD PTR [ebx],edx
c000ee89:	83 c4 18             	add    esp,0x18
c000ee8c:	5b                   	pop    ebx
c000ee8d:	c3                   	ret    

c000ee8e <GDT::getNumberOfEntries()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee94:	c3                   	ret    
c000ee95:	90                   	nop

c000ee96 <GDT::flush()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9c:	83 c0 04             	add    eax,0x4
c000ee9f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea6:	a3 d2 da 02 c0       	mov    ds:0xc002dad2,eax
c000eeab:	66 89 15 d0 da 02 c0 	mov    WORD PTR ds:0xc002dad0,dx
c000eeb2:	e9 91 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb7:	90                   	nop

c000eeb8 <GDT::setup()>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 3c             	sub    esp,0x3c
c000eebf:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec3:	6a 00                	push   0x0
c000eec5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec9:	53                   	push   ebx
c000eeca:	e8 33 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eecf:	6a 00                	push   0x0
c000eed1:	53                   	push   ebx
c000eed2:	e8 47 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eed7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedf:	6a 00                	push   0x0
c000eee1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee5:	53                   	push   ebx
c000eee6:	e8 17 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eeeb:	68 ff ff ff 00       	push   0xffffff
c000eef0:	53                   	push   ebx
c000eef1:	e8 28 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eef6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eefa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeff:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef04:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef11:	53                   	push   ebx
c000ef12:	e8 eb fe ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000ef17:	68 ff ff ff 00       	push   0xffffff
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 fc fe ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000ef22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef36:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef3b:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef44:	89 d8                	mov    eax,ebx
c000ef46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef4a:	80 cc 60             	or     ah,0x60
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	89 f8                	mov    eax,edi
c000ef56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5a:	80 cc 60             	or     ah,0x60
c000ef5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef61:	89 c7                	mov    edi,eax
c000ef63:	55                   	push   ebp
c000ef64:	e8 e9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef74:	55                   	push   ebp
c000ef75:	e8 d8 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef7a:	83 c4 0c             	add    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef85:	55                   	push   ebp
c000ef86:	e8 c7 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef8b:	83 c4 0c             	add    esp,0xc
c000ef8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef96:	53                   	push   ebx
c000ef97:	51                   	push   ecx
c000ef98:	55                   	push   ebp
c000ef99:	e8 b4 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	55                   	push   ebp
c000efa4:	e8 a9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000efa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efac:	e8 e5 fe ff ff       	call   c000ee96 <GDT::flush()>
c000efb1:	83 c4 4c             	add    esp,0x4c
c000efb4:	5b                   	pop    ebx
c000efb5:	5e                   	pop    esi
c000efb6:	5f                   	pop    edi
c000efb7:	5d                   	pop    ebp
c000efb8:	c3                   	ret    

c000efb9 <idleFunction(void*)>:
c000efb9:	53                   	push   ebx
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	e8 2a e5 00 00       	call   c001d4ec <unlockScheduler()>
c000efc2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000efc7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcd:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd4:	74 3c                	je     c000f012 <idleFunction(void*)+0x59>
c000efd6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdd:	74 33                	je     c000f012 <idleFunction(void*)+0x59>
c000efdf:	31 db                	xor    ebx,ebx
c000efe1:	52                   	push   edx
c000efe2:	52                   	push   edx
c000efe3:	68 e1 00 00 00       	push   0xe1
c000efe8:	50                   	push   eax
c000efe9:	e8 de fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000efee:	53                   	push   ebx
c000efef:	83 e0 02             	and    eax,0x2
c000eff2:	50                   	push   eax
c000eff3:	68 e1 00 00 00       	push   0xe1
c000eff8:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c000effe:	e8 f5 fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 74 12 ff ff       	call   c000027f <doTPAUSE>
c000f00b:	e8 40 8e 01 00       	call   c0027e50 <idleCommon()>
c000f010:	eb f4                	jmp    c000f006 <idleFunction(void*)+0x4d>
c000f012:	fb                   	sti    
c000f013:	f4                   	hlt    
c000f014:	e8 37 8e 01 00       	call   c0027e50 <idleCommon()>
c000f019:	eb f7                	jmp    c000f012 <idleFunction(void*)+0x59>
c000f01b:	90                   	nop

c000f01c <IDTEntry::IDTEntry(bool)>:
c000f01c:	83 ec 04             	sub    esp,0x4
c000f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f023:	88 04 24             	mov    BYTE PTR [esp],al
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03f:	83 e2 f0             	and    edx,0xfffffff0
c000f042:	83 ca 0e             	or     edx,0xe
c000f045:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04f:	83 e2 ef             	and    edx,0xffffffef
c000f052:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f055:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f059:	74 04                	je     c000f05f <IDTEntry::IDTEntry(bool)+0x43>
c000f05b:	b2 03                	mov    dl,0x3
c000f05d:	eb 02                	jmp    c000f061 <IDTEntry::IDTEntry(bool)+0x45>
c000f05f:	b2 00                	mov    dl,0x0
c000f061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f065:	83 e2 03             	and    edx,0x3
c000f068:	88 d1                	mov    cl,dl
c000f06a:	c1 e1 05             	shl    ecx,0x5
c000f06d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f070:	83 e2 9f             	and    edx,0xffffff9f
c000f073:	09 ca                	or     edx,ecx
c000f075:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07f:	83 ca 80             	or     edx,0xffffff80
c000f082:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f085:	90                   	nop
c000f086:	83 c4 04             	add    esp,0x4
c000f089:	c3                   	ret    

c000f08a <IDTEntry::setOffset(unsigned int)>:
c000f08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	66 89 02             	mov    WORD PTR [edx],ax
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <IDT::IDT()>:
c000f09e:	90                   	nop
c000f09f:	c3                   	ret    

c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a4:	83 c0 30             	add    eax,0x30
c000f0a7:	c3                   	ret    

c000f0a8 <IDT::addEntry(IDTEntry, int)>:
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0bc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0c0:	5b                   	pop    ebx
c000f0c1:	c3                   	ret    

c000f0c2 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 10             	sub    esp,0x10
c000f0c6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0d0:	53                   	push   ebx
c000f0d1:	e8 46 ff ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f0d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0da:	53                   	push   ebx
c000f0db:	e8 aa ff ff ff       	call   c000f08a <IDTEntry::setOffset(unsigned int)>
c000f0e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0f0:	e8 b3 ff ff ff       	call   c000f0a8 <IDT::addEntry(IDTEntry, int)>
c000f0f5:	83 c4 30             	add    esp,0x30
c000f0f8:	5b                   	pop    ebx
c000f0f9:	c3                   	ret    

c000f0fa <IDT::flush()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	66 c7 05 d8 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002dad8,0x7ff
c000f107:	a3 da da 02 c0       	mov    ds:0xc002dada,eax
c000f10c:	0f 01 1d d8 da 02 c0 	lidtd  ds:0xc002dad8
c000f113:	c3                   	ret    

c000f114 <IDT::setup()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	53                   	push   ebx
c000f117:	83 ec 10             	sub    esp,0x10
c000f11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11e:	6a 00                	push   0x0
c000f120:	68 68 04 00 c0       	push   0xc0000468
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	e8 95 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 78 04 00 c0       	push   0xc0000478
c000f134:	6a 01                	push   0x1
c000f136:	53                   	push   ebx
c000f137:	e8 86 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 82 04 00 c0       	push   0xc0000482
c000f146:	6a 02                	push   0x2
c000f148:	53                   	push   ebx
c000f149:	e8 74 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 8c 04 00 c0       	push   0xc000048c
c000f155:	6a 03                	push   0x3
c000f157:	53                   	push   ebx
c000f158:	e8 65 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 96 04 00 c0       	push   0xc0000496
c000f167:	6a 04                	push   0x4
c000f169:	53                   	push   ebx
c000f16a:	e8 53 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 a0 04 00 c0       	push   0xc00004a0
c000f176:	6a 05                	push   0x5
c000f178:	53                   	push   ebx
c000f179:	e8 44 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 aa 04 00 c0       	push   0xc00004aa
c000f188:	6a 06                	push   0x6
c000f18a:	53                   	push   ebx
c000f18b:	e8 32 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 b4 04 00 c0       	push   0xc00004b4
c000f197:	6a 07                	push   0x7
c000f199:	53                   	push   ebx
c000f19a:	e8 23 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 be 04 00 c0       	push   0xc00004be
c000f1a9:	6a 08                	push   0x8
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 11 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b8:	6a 09                	push   0x9
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 02 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 d0 04 00 c0       	push   0xc00004d0
c000f1ca:	6a 0a                	push   0xa
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 f0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d9:	6a 0b                	push   0xb
c000f1db:	53                   	push   ebx
c000f1dc:	e8 e1 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 e0 04 00 c0       	push   0xc00004e0
c000f1eb:	6a 0c                	push   0xc
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 cf fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 e8 04 00 c0       	push   0xc00004e8
c000f1fa:	6a 0d                	push   0xd
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 c0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 f0 04 00 c0       	push   0xc00004f0
c000f20c:	6a 0e                	push   0xe
c000f20e:	53                   	push   ebx
c000f20f:	e8 ae fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 f8 04 00 c0       	push   0xc00004f8
c000f21b:	6a 0f                	push   0xf
c000f21d:	53                   	push   ebx
c000f21e:	e8 9f fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 02 05 00 c0       	push   0xc0000502
c000f22d:	6a 10                	push   0x10
c000f22f:	53                   	push   ebx
c000f230:	e8 8d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 0c 05 00 c0       	push   0xc000050c
c000f23c:	6a 11                	push   0x11
c000f23e:	53                   	push   ebx
c000f23f:	e8 7e fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 16 05 00 c0       	push   0xc0000516
c000f24e:	6a 12                	push   0x12
c000f250:	53                   	push   ebx
c000f251:	e8 6c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 01                	push   0x1
c000f258:	68 b0 05 00 c0       	push   0xc00005b0
c000f25d:	6a 60                	push   0x60
c000f25f:	53                   	push   ebx
c000f260:	e8 5d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 b7 05 00 c0       	push   0xc00005b7
c000f26f:	6a 20                	push   0x20
c000f271:	53                   	push   ebx
c000f272:	e8 4b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 a2 05 00 c0       	push   0xc00005a2
c000f27e:	6a 21                	push   0x21
c000f280:	53                   	push   ebx
c000f281:	e8 3c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 a9 05 00 c0       	push   0xc00005a9
c000f290:	6a 22                	push   0x22
c000f292:	53                   	push   ebx
c000f293:	e8 2a fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 20 05 00 c0       	push   0xc0000520
c000f29f:	6a 23                	push   0x23
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 1b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 2a 05 00 c0       	push   0xc000052a
c000f2b1:	6a 24                	push   0x24
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 09 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 34 05 00 c0       	push   0xc0000534
c000f2c0:	6a 25                	push   0x25
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 fa fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 3e 05 00 c0       	push   0xc000053e
c000f2d2:	6a 26                	push   0x26
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 e8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 48 05 00 c0       	push   0xc0000548
c000f2e1:	6a 27                	push   0x27
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 d9 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 52 05 00 c0       	push   0xc0000552
c000f2f3:	6a 28                	push   0x28
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 c7 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 5c 05 00 c0       	push   0xc000055c
c000f302:	6a 29                	push   0x29
c000f304:	53                   	push   ebx
c000f305:	e8 b8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 66 05 00 c0       	push   0xc0000566
c000f314:	6a 2a                	push   0x2a
c000f316:	53                   	push   ebx
c000f317:	e8 a6 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 05 00 c0       	push   0xc0000570
c000f323:	6a 2b                	push   0x2b
c000f325:	53                   	push   ebx
c000f326:	e8 97 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	6a 00                	push   0x0
c000f330:	68 7a 05 00 c0       	push   0xc000057a
c000f335:	6a 2c                	push   0x2c
c000f337:	53                   	push   ebx
c000f338:	e8 85 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	6a 00                	push   0x0
c000f33f:	68 84 05 00 c0       	push   0xc0000584
c000f344:	6a 2d                	push   0x2d
c000f346:	53                   	push   ebx
c000f347:	e8 76 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	83 c4 20             	add    esp,0x20
c000f34f:	6a 00                	push   0x0
c000f351:	68 8e 05 00 c0       	push   0xc000058e
c000f356:	6a 2e                	push   0x2e
c000f358:	53                   	push   ebx
c000f359:	e8 64 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	6a 00                	push   0x0
c000f360:	68 98 05 00 c0       	push   0xc0000598
c000f365:	6a 2f                	push   0x2f
c000f367:	53                   	push   ebx
c000f368:	e8 55 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	83 c4 20             	add    esp,0x20
c000f370:	6a 00                	push   0x0
c000f372:	68 ed 05 00 c0       	push   0xc00005ed
c000f377:	6a 30                	push   0x30
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	6a 00                	push   0x0
c000f381:	68 f7 05 00 c0       	push   0xc00005f7
c000f386:	6a 31                	push   0x31
c000f388:	53                   	push   ebx
c000f389:	e8 34 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	83 c4 20             	add    esp,0x20
c000f391:	6a 00                	push   0x0
c000f393:	68 01 06 00 c0       	push   0xc0000601
c000f398:	6a 32                	push   0x32
c000f39a:	53                   	push   ebx
c000f39b:	e8 22 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 0b 06 00 c0       	push   0xc000060b
c000f3a7:	6a 33                	push   0x33
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 13 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	83 c4 20             	add    esp,0x20
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 15 06 00 c0       	push   0xc0000615
c000f3b9:	6a 34                	push   0x34
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 01 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 1f 06 00 c0       	push   0xc000061f
c000f3c8:	6a 35                	push   0x35
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f2 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	83 c4 20             	add    esp,0x20
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 29 06 00 c0       	push   0xc0000629
c000f3da:	6a 36                	push   0x36
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 e0 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 33 06 00 c0       	push   0xc0000633
c000f3e9:	6a 37                	push   0x37
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 d1 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	e8 9a 26 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f3f9:	52                   	push   edx
c000f3fa:	6a 03                	push   0x3
c000f3fc:	6a 02                	push   0x2
c000f3fe:	50                   	push   eax
c000f3ff:	e8 ca 2c 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f404:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f40b:	89 c6                	mov    esi,eax
c000f40d:	e8 12 02 00 00       	call   c000f624 <malloc>
c000f412:	81 c6 00 20 00 00    	add    esi,0x2000
c000f418:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41b:	89 c7                	mov    edi,eax
c000f41d:	e8 12 1e 00 00       	call   c0011234 <TSS::TSS()>
c000f422:	83 c4 0c             	add    esp,0xc
c000f425:	68 be 04 00 c0       	push   0xc00004be
c000f42a:	56                   	push   esi
c000f42b:	57                   	push   edi
c000f42c:	e8 43 1e 00 00       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c000f431:	59                   	pop    ecx
c000f432:	89 c6                	mov    esi,eax
c000f434:	5f                   	pop    edi
c000f435:	6a 00                	push   0x0
c000f437:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f43b:	50                   	push   eax
c000f43c:	e8 db fb ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f445:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f44a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f451:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f45b:	80 ce 05             	or     dh,0x5
c000f45e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f469:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46f:	e8 86 fc ff ff       	call   c000f0fa <IDT::flush()>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	c3                   	ret    

c000f47b <sbrk>:
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	56                   	push   esi
c000f47e:	53                   	push   ebx
c000f47f:	83 ec 1c             	sub    esp,0x1c
c000f482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f486:	85 c0                	test   eax,eax
c000f488:	74 3e                	je     c000f4c8 <sbrk+0x4d>
c000f48a:	78 43                	js     c000f4cf <sbrk+0x54>
c000f48c:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c000f492:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f498:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49e:	83 e2 01             	and    edx,0x1
c000f4a1:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a5:	8b 0d dc c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9dc
c000f4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	89 c2                	mov    edx,eax
c000f4b6:	78 2f                	js     c000f4e7 <sbrk+0x6c>
c000f4b8:	c1 fa 0c             	sar    edx,0xc
c000f4bb:	89 d7                	mov    edi,edx
c000f4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4c1:	be 00 00 00 00       	mov    esi,0x0
c000f4c6:	eb 36                	jmp    c000f4fe <sbrk+0x83>
c000f4c8:	a1 dc c9 02 c0       	mov    eax,ds:0xc002c9dc
c000f4cd:	eb 74                	jmp    c000f543 <sbrk+0xc8>
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	50                   	push   eax
c000f4d3:	68 88 99 02 c0       	push   0xc0029988
c000f4d8:	e8 16 34 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e5:	eb 5c                	jmp    c000f543 <sbrk+0xc8>
c000f4e7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ed:	eb c9                	jmp    c000f4b8 <sbrk+0x3d>
c000f4ef:	81 05 dc c9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c9dc,0x1000
c000f4f9:	46                   	inc    esi
c000f4fa:	39 f7                	cmp    edi,esi
c000f4fc:	74 34                	je     c000f532 <sbrk+0xb7>
c000f4fe:	e8 90 25 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f503:	89 c3                	mov    ebx,eax
c000f505:	8b 2d dc c9 02 c0    	mov    ebp,DWORD PTR ds:0xc002c9dc
c000f50b:	e8 b1 07 00 00       	call   c000fcc1 <Phys::allocatePage()>
c000f510:	68 01 04 00 00       	push   0x401
c000f515:	55                   	push   ebp
c000f516:	50                   	push   eax
c000f517:	53                   	push   ebx
c000f518:	e8 b1 2a 00 00       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f525:	74 c8                	je     c000f4ef <sbrk+0x74>
c000f527:	8b 1d dc c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9dc
c000f52d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f530:	eb bd                	jmp    c000f4ef <sbrk+0x74>
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	75 12                	jne    c000f54b <sbrk+0xd0>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54f:	89 cb                	mov    ebx,ecx
c000f551:	c1 eb 0a             	shr    ebx,0xa
c000f554:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f55a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f564:	c1 e0 0c             	shl    eax,0xc
c000f567:	01 c8                	add    eax,ecx
c000f569:	c1 e8 0a             	shr    eax,0xa
c000f56c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f571:	2d 00 00 40 00       	sub    eax,0x400000
c000f576:	39 c3                	cmp    ebx,eax
c000f578:	77 c5                	ja     c000f53f <sbrk+0xc4>
c000f57a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f583:	39 d8                	cmp    eax,ebx
c000f585:	73 f3                	jae    c000f57a <sbrk+0xff>
c000f587:	eb b6                	jmp    c000f53f <sbrk+0xc4>

c000f589 <mmap>:
c000f589:	83 ec 18             	sub    esp,0x18
c000f58c:	68 b8 99 02 c0       	push   0xc00299b8
c000f591:	e8 03 a9 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000f596:	b8 00 00 00 00       	mov    eax,0x0
c000f59b:	83 c4 1c             	add    esp,0x1c
c000f59e:	c3                   	ret    

c000f59f <munmap>:
c000f59f:	83 ec 18             	sub    esp,0x18
c000f5a2:	68 bd 99 02 c0       	push   0xc00299bd
c000f5a7:	e8 ed a8 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    

c000f5b5 <liballoc_lock()>:
c000f5b5:	83 ec 0c             	sub    esp,0xc
c000f5b8:	e8 2d df 00 00       	call   c001d4ea <lockScheduler()>
c000f5bd:	b8 00 00 00 00       	mov    eax,0x0
c000f5c2:	83 c4 0c             	add    esp,0xc
c000f5c5:	c3                   	ret    

c000f5c6 <liballoc_unlock()>:
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	e8 1e df 00 00       	call   c001d4ec <unlockScheduler()>
c000f5ce:	b8 00 00 00 00       	mov    eax,0x0
c000f5d3:	83 c4 0c             	add    esp,0xc
c000f5d6:	c3                   	ret    

c000f5d7 <liballoc_alloc(int)>:
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	e8 b4 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5df:	83 ec 04             	sub    esp,0x4
c000f5e2:	6a 01                	push   0x1
c000f5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e8:	50                   	push   eax
c000f5e9:	e8 e0 2a 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	c3                   	ret    

c000f5f2 <liballoc_free(void*, int)>:
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	e8 99 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5fa:	83 ec 08             	sub    esp,0x8
c000f5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f601:	50                   	push   eax
c000f602:	e8 83 27 00 00       	call   c0011d8a <VAS::freeAllocatedPages(unsigned long)>
c000f607:	b8 00 00 00 00       	mov    eax,0x0
c000f60c:	83 c4 1c             	add    esp,0x1c
c000f60f:	c3                   	ret    

c000f610 <realloc>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61b:	e8 1d 1e ff ff       	call   c000143d <dlrealloc>
c000f620:	83 c4 1c             	add    esp,0x1c
c000f623:	c3                   	ret    

c000f624 <malloc>:
c000f624:	83 ec 18             	sub    esp,0x18
c000f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62b:	e8 d0 18 ff ff       	call   c0000f00 <dlmalloc>
c000f630:	83 c4 1c             	add    esp,0x1c
c000f633:	c3                   	ret    

c000f634 <free>:
c000f634:	83 ec 18             	sub    esp,0x18
c000f637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63b:	e8 65 15 ff ff       	call   c0000ba5 <dlfree>
c000f640:	83 c4 1c             	add    esp,0x1c
c000f643:	c3                   	ret    

c000f644 <rfree>:
c000f644:	83 ec 18             	sub    esp,0x18
c000f647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64b:	e8 55 15 ff ff       	call   c0000ba5 <dlfree>
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <calloc>:
c000f654:	56                   	push   esi
c000f655:	53                   	push   ebx
c000f656:	83 ec 10             	sub    esp,0x10
c000f659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f662:	53                   	push   ebx
c000f663:	e8 bc ff ff ff       	call   c000f624 <malloc>
c000f668:	89 c6                	mov    esi,eax
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	6a 00                	push   0x0
c000f670:	50                   	push   eax
c000f671:	e8 4e 10 ff ff       	call   c00006c4 <memset>
c000f676:	89 f0                	mov    eax,esi
c000f678:	83 c4 14             	add    esp,0x14
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	c3                   	ret    

c000f67e <hwTextMode_loadInData(VgaText*)>:
c000f67e:	55                   	push   ebp
c000f67f:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f68b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f691:	85 d2                	test   edx,edx
c000f693:	7e 2f                	jle    c000f6c4 <hwTextMode_loadInData(VgaText*)+0x46>
c000f695:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f69b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69e:	31 f6                	xor    esi,esi
c000f6a0:	29 fd                	sub    ebp,edi
c000f6a2:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a5:	31 c0                	xor    eax,eax
c000f6a7:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6ab:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6af:	40                   	inc    eax
c000f6b0:	83 f8 50             	cmp    eax,0x50
c000f6b3:	75 f2                	jne    c000f6a7 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b5:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6bb:	46                   	inc    esi
c000f6bc:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c2:	7f de                	jg     c000f6a2 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    

c000f6c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d8:	75 50                	jne    c000f72a <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6da:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6e0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e6:	8b 15 00 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca00
c000f6ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6f0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f6:	eb 0e                	jmp    c000f706 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fe:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f704:	89 da                	mov    edx,ebx
c000f706:	83 e5 0f             	and    ebp,0xf
c000f709:	c1 e0 04             	shl    eax,0x4
c000f70c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70f:	0f b6 c0             	movzx  eax,al
c000f712:	41                   	inc    ecx
c000f713:	09 e8                	or     eax,ebp
c000f715:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	09 e8                	or     eax,ebp
c000f71e:	39 fb                	cmp    ebx,edi
c000f720:	66 89 02             	mov    WORD PTR [edx],ax
c000f723:	75 d3                	jne    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f725:	5b                   	pop    ebx
c000f726:	5e                   	pop    esi
c000f727:	5f                   	pop    edi
c000f728:	5d                   	pop    ebp
c000f729:	c3                   	ret    
c000f72a:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f734:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73e:	31 c0                	xor    eax,eax
c000f740:	bd 02 00 00 00       	mov    ebp,0x2
c000f745:	eb 9f                	jmp    c000f6e6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f747 <hwTextMode_showCursor(VgaText*, bool)>:
c000f747:	56                   	push   esi
c000f748:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f74f:	53                   	push   ebx
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	75 39                	jne    c000f78f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f756:	84 c0                	test   al,al
c000f758:	74 38                	je     c000f792 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f75a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75f:	b0 0a                	mov    al,0xa
c000f761:	89 da                	mov    edx,ebx
c000f763:	ee                   	out    dx,al
c000f764:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ec                   	in     al,dx
c000f76c:	b2 0f                	mov    dl,0xf
c000f76e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f772:	83 e0 c0             	and    eax,0xffffffc0
c000f775:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f77b:	09 d0                	or     eax,edx
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ee                   	out    dx,al
c000f780:	b0 0b                	mov    al,0xb
c000f782:	89 da                	mov    edx,ebx
c000f784:	ee                   	out    dx,al
c000f785:	89 ca                	mov    edx,ecx
c000f787:	ec                   	in     al,dx
c000f788:	83 e0 e0             	and    eax,0xffffffe0
c000f78b:	83 c8 0f             	or     eax,0xf
c000f78e:	ee                   	out    dx,al
c000f78f:	5b                   	pop    ebx
c000f790:	5e                   	pop    esi
c000f791:	c3                   	ret    
c000f792:	b0 0a                	mov    al,0xa
c000f794:	ba d4 03 00 00       	mov    edx,0x3d4
c000f799:	ee                   	out    dx,al
c000f79a:	b0 20                	mov    al,0x20
c000f79c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7a1:	ee                   	out    dx,al
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    

c000f7a5 <hwTextMode_update(VgaText*)>:
c000f7a5:	c3                   	ret    

c000f7a6 <hwTextMode_updateCursor(VgaText*)>:
c000f7a6:	56                   	push   esi
c000f7a7:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f7ae:	53                   	push   ebx
c000f7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b3:	75 3f                	jne    c000f7f4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b5:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ba:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bf:	89 f2                	mov    edx,esi
c000f7c1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cd:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7d0:	c1 e1 04             	shl    ecx,0x4
c000f7d3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d9:	b0 0f                	mov    al,0xf
c000f7db:	ee                   	out    dx,al
c000f7dc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7e1:	88 c8                	mov    al,cl
c000f7e3:	89 da                	mov    edx,ebx
c000f7e5:	ee                   	out    dx,al
c000f7e6:	b0 0e                	mov    al,0xe
c000f7e8:	89 f2                	mov    edx,esi
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 c8                	mov    eax,ecx
c000f7ed:	89 da                	mov    edx,ebx
c000f7ef:	66 c1 e8 08          	shr    ax,0x8
c000f7f3:	ee                   	out    dx,al
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	c3                   	ret    

c000f7f7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fb:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f802:	75 38                	jne    c000f83c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f804:	ba da 03 00 00       	mov    edx,0x3da
c000f809:	84 c0                	test   al,al
c000f80b:	75 18                	jne    c000f825 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80d:	ec                   	in     al,dx
c000f80e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f813:	b0 30                	mov    al,0x30
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81d:	ec                   	in     al,dx
c000f81e:	83 c8 08             	or     eax,0x8
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	c3                   	ret    
c000f825:	ec                   	in     al,dx
c000f826:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f82b:	b0 30                	mov    al,0x30
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	ba c1 03 00 00       	mov    edx,0x3c1
c000f835:	ec                   	in     al,dx
c000f836:	83 e0 f7             	and    eax,0xfffffff7
c000f839:	89 ca                	mov    edx,ecx
c000f83b:	ee                   	out    dx,al
c000f83c:	c3                   	ret    

c000f83d <hwTextMode_scrollScreen(VgaText*)>:
c000f83d:	55                   	push   ebp
c000f83e:	57                   	push   edi
c000f83f:	56                   	push   esi
c000f840:	53                   	push   ebx
c000f841:	83 ec 1c             	sub    esp,0x1c
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f84f:	74 14                	je     c000f865 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f851:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f85b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f865:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f86a:	bd 02 00 00 00       	mov    ebp,0x2
c000f86f:	05 a0 00 00 00       	add    eax,0xa0
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87c:	31 c0                	xor    eax,eax
c000f87e:	eb 0b                	jmp    c000f88b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f880:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f886:	74 57                	je     c000f8df <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f888:	43                   	inc    ebx
c000f889:	89 f0                	mov    eax,esi
c000f88b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f891:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f897:	88 13                	mov    BYTE PTR [ebx],dl
c000f899:	8d 70 01             	lea    esi,[eax+0x1]
c000f89c:	83 fd 18             	cmp    ebp,0x18
c000f89f:	75 df                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8a1:	a8 01                	test   al,0x1
c000f8a3:	75 13                	jne    c000f8b8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a5:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ae:	75 d8                	jne    c000f888 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	5d                   	pop    ebp
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c2:	50                   	push   eax
c000f8c3:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c7:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8ce:	50                   	push   eax
c000f8cf:	e8 32 0c 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	88 07                	mov    BYTE PTR [edi],al
c000f8d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8dd:	eb c9                	jmp    c000f8a8 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8df:	45                   	inc    ebp
c000f8e0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e8:	eb 8e                	jmp    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8ea:	57                   	push   edi
c000f8eb:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f8f2:	56                   	push   esi
c000f8f3:	53                   	push   ebx
c000f8f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fc:	75 65                	jne    c000f963 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f903:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	52                   	push   edx
c000f90c:	50                   	push   eax
c000f90d:	e8 f4 0b 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f912:	5a                   	pop    edx
c000f913:	0f b6 c0             	movzx  eax,al
c000f916:	59                   	pop    ecx
c000f917:	50                   	push   eax
c000f918:	0f be c3             	movsx  eax,bl
c000f91b:	50                   	push   eax
c000f91c:	e8 8b 0c 00 00       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c000f92a:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f931:	74 07                	je     c000f93a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f933:	66 0f be c3          	movsx  ax,bl
c000f937:	80 cc 02             	or     ah,0x2
c000f93a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93e:	ba 19 00 00 00       	mov    edx,0x19
c000f943:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f949:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94c:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94f:	c1 e1 04             	shl    ecx,0x4
c000f952:	c1 e2 04             	shl    edx,0x4
c000f955:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f959:	01 ca                	add    edx,ecx
c000f95b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95f:	5b                   	pop    ebx
c000f960:	5e                   	pop    esi
c000f961:	5f                   	pop    edi
c000f962:	c3                   	ret    
c000f963:	b8 02 00 00 00       	mov    eax,0x2
c000f968:	31 d2                	xor    edx,edx
c000f96a:	eb 9c                	jmp    c000f908 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96c <setupTextMode()>:
c000f96c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f971:	83 e0 30             	and    eax,0x30
c000f974:	66 83 f8 30          	cmp    ax,0x30
c000f978:	75 11                	jne    c000f98b <setupTextMode()+0x1f>
c000f97a:	81 2d 00 ca 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002ca00,0x8000
c000f984:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c000f98b:	c7 05 98 db 02 c0 f7 f7 00 c0 	mov    DWORD PTR ds:0xc002db98,0xc000f7f7
c000f995:	c7 05 84 db 02 c0 7e f6 00 c0 	mov    DWORD PTR ds:0xc002db84,0xc000f67e
c000f99f:	c7 05 80 db 02 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc002db80,0xc000f6c9
c000f9a9:	c7 05 8c db 02 c0 3d f8 00 c0 	mov    DWORD PTR ds:0xc002db8c,0xc000f83d
c000f9b3:	c7 05 94 db 02 c0 47 f7 00 c0 	mov    DWORD PTR ds:0xc002db94,0xc000f747
c000f9bd:	c7 05 88 db 02 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc002db88,0xc000f7a5
c000f9c7:	c7 05 90 db 02 c0 a6 f7 00 c0 	mov    DWORD PTR ds:0xc002db90,0xc000f7a6
c000f9d1:	c7 05 9c db 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002db9c,0xc000f8ea
c000f9db:	c3                   	ret    

c000f9dc <kernel_main>:
c000f9dc:	57                   	push   edi
c000f9dd:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e2:	56                   	push   esi
c000f9e3:	31 f6                	xor    esi,esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	e8 72 09 00 00       	call   c0010360 <installVgaTextImplementation()>
c000f9ee:	e8 79 ff ff ff       	call   c000f96c <setupTextMode()>
c000f9f3:	89 f0                	mov    eax,esi
c000f9f5:	89 fa                	mov    edx,edi
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fd:	b0 80                	mov    al,0x80
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b1 03                	mov    cl,0x3
c000fa04:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	ee                   	out    dx,al
c000fa0c:	89 f0                	mov    eax,esi
c000fa0e:	89 fa                	mov    edx,edi
c000fa10:	ee                   	out    dx,al
c000fa11:	88 c8                	mov    al,cl
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 c7                	mov    al,0xc7
c000fa18:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1d:	ee                   	out    dx,al
c000fa1e:	b0 0b                	mov    al,0xb
c000fa20:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa25:	ee                   	out    dx,al
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	68 c4 99 02 c0       	push   0xc00299c4
c000fa2e:	e8 c0 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fa33:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa38:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa45:	e8 d1 03 00 00       	call   c000fe1b <Phys::physicalMemorySetup(unsigned int)>
c000fa4a:	e8 c5 1f 00 00       	call   c0011a14 <Virt::virtualMemorySetup()>
c000fa4f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5e:	75 0e                	jne    c000fa6e <kernel_main+0x92>
c000fa60:	89 d8                	mov    eax,ebx
c000fa62:	25 48 03 00 00       	and    eax,0x348
c000fa67:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6c:	74 10                	je     c000fa7e <kernel_main+0xa2>
c000fa6e:	83 ec 0c             	sub    esp,0xc
c000fa71:	68 6c b2 02 c0       	push   0xc002b26c
c000fa76:	e8 1e a4 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	89 1d e0 da 02 c0    	mov    DWORD PTR ds:0xc002dae0,ebx
c000fa87:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 37 21 00 00       	call   c0011bc8 <VAS::VAS()>
c000fa91:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c000fa97:	e8 84 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9c:	c7 04 24 db 99 02 c0 	mov    DWORD PTR [esp],0xc00299db
c000faa3:	e8 4b 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000faa8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faaf:	e8 70 fb ff ff       	call   c000f624 <malloc>
c000fab4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fab7:	89 c6                	mov    esi,eax
c000fab9:	e8 60 ea ff ff       	call   c000e51e <Computer::Computer()>
c000fabe:	58                   	pop    eax
c000fabf:	89 35 c8 da 02 c0    	mov    DWORD PTR ds:0xc002dac8,esi
c000fac5:	5a                   	pop    edx
c000fac6:	56                   	push   esi
c000fac7:	68 f8 99 02 c0       	push   0xc00299f8
c000facc:	e8 22 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fad1:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000fad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad8:	6a 00                	push   0x0
c000fada:	6a 00                	push   0x0
c000fadc:	6a 00                	push   0x0
c000fade:	50                   	push   eax
c000fadf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fae2:	83 c4 14             	add    esp,0x14
c000fae5:	53                   	push   ebx
c000fae6:	e8 77 23 00 00       	call   c0011e62 <VAS::~VAS()>
c000faeb:	c7 04 24 0b 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a0b
c000faf2:	e8 a2 a3 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000faf7:	83 c4 20             	add    esp,0x20
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	5f                   	pop    edi
c000fafd:	c3                   	ret    

c000fafe <Phys::allocateDMA(unsigned long)>:
c000fafe:	55                   	push   ebp
c000faff:	31 d2                	xor    edx,edx
c000fb01:	57                   	push   edi
c000fb02:	31 ed                	xor    ebp,ebp
c000fb04:	56                   	push   esi
c000fb05:	31 c9                	xor    ecx,ecx
c000fb07:	53                   	push   ebx
c000fb08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb0c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb12:	31 c0                	xor    eax,eax
c000fb14:	c1 ee 0c             	shr    esi,0xc
c000fb17:	eb 17                	jmp    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb19:	85 c9                	test   ecx,ecx
c000fb1b:	75 04                	jne    c000fb21 <Phys::allocateDMA(unsigned long)+0x23>
c000fb1d:	89 d5                	mov    ebp,edx
c000fb1f:	89 d0                	mov    eax,edx
c000fb21:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb24:	39 de                	cmp    esi,ebx
c000fb26:	74 20                	je     c000fb48 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb28:	42                   	inc    edx
c000fb29:	89 d9                	mov    ecx,ebx
c000fb2b:	83 fa 2f             	cmp    edx,0x2f
c000fb2e:	7f 11                	jg     c000fb41 <Phys::allocateDMA(unsigned long)+0x43>
c000fb30:	80 ba 20 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd24e0],0x0
c000fb37:	74 e0                	je     c000fb19 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb39:	31 c9                	xor    ecx,ecx
c000fb3b:	42                   	inc    edx
c000fb3c:	83 fa 2f             	cmp    edx,0x2f
c000fb3f:	7e ef                	jle    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb41:	5b                   	pop    ebx
c000fb42:	31 c0                	xor    eax,eax
c000fb44:	5e                   	pop    esi
c000fb45:	5f                   	pop    edi
c000fb46:	5d                   	pop    ebp
c000fb47:	c3                   	ret    
c000fb48:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb4b:	89 d7                	mov    edi,edx
c000fb4d:	4f                   	dec    edi
c000fb4e:	79 03                	jns    c000fb53 <Phys::allocateDMA(unsigned long)+0x55>
c000fb50:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb53:	c1 ff 04             	sar    edi,0x4
c000fb56:	89 c2                	mov    edx,eax
c000fb58:	c1 fa 04             	sar    edx,0x4
c000fb5b:	39 fa                	cmp    edx,edi
c000fb5d:	75 2f                	jne    c000fb8e <Phys::allocateDMA(unsigned long)+0x90>
c000fb5f:	85 db                	test   ebx,ebx
c000fb61:	74 1a                	je     c000fb7d <Phys::allocateDMA(unsigned long)+0x7f>
c000fb63:	be 20 db 02 c0       	mov    esi,0xc002db20
c000fb68:	8d 90 20 db 02 c0    	lea    edx,[eax-0x3ffd24e0]
c000fb6e:	f7 d6                	not    esi
c000fb70:	29 c6                	sub    esi,eax
c000fb72:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb75:	42                   	inc    edx
c000fb76:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb79:	39 d9                	cmp    ecx,ebx
c000fb7b:	7f f5                	jg     c000fb72 <Phys::allocateDMA(unsigned long)+0x74>
c000fb7d:	85 ff                	test   edi,edi
c000fb7f:	74 13                	je     c000fb94 <Phys::allocateDMA(unsigned long)+0x96>
c000fb81:	5b                   	pop    ebx
c000fb82:	05 50 20 0c 00       	add    eax,0xc2050
c000fb87:	5e                   	pop    esi
c000fb88:	c1 e0 0c             	shl    eax,0xc
c000fb8b:	5f                   	pop    edi
c000fb8c:	5d                   	pop    ebp
c000fb8d:	c3                   	ret    
c000fb8e:	89 ea                	mov    edx,ebp
c000fb90:	31 c9                	xor    ecx,ecx
c000fb92:	eb a7                	jmp    c000fb3b <Phys::allocateDMA(unsigned long)+0x3d>
c000fb94:	5b                   	pop    ebx
c000fb95:	c1 e0 0c             	shl    eax,0xc
c000fb98:	5e                   	pop    esi
c000fb99:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb9e:	5f                   	pop    edi
c000fb9f:	5d                   	pop    ebp
c000fba0:	c3                   	ret    

c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fba9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbaf:	c1 e9 0c             	shr    ecx,0xc
c000fbb2:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbb7:	76 25                	jbe    c000fbde <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbb9:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbbe:	c1 e8 0c             	shr    eax,0xc
c000fbc1:	8d 50 10             	lea    edx,[eax+0x10]
c000fbc4:	85 c9                	test   ecx,ecx
c000fbc6:	74 15                	je     c000fbdd <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbc8:	8d 82 20 db 02 c0    	lea    eax,[edx-0x3ffd24e0]
c000fbce:	8d 94 11 20 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd24e0]
c000fbd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbd8:	40                   	inc    eax
c000fbd9:	39 d0                	cmp    eax,edx
c000fbdb:	75 f8                	jne    c000fbd5 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbdd:	c3                   	ret    
c000fbde:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbe4:	c1 ea 0c             	shr    edx,0xc
c000fbe7:	eb db                	jmp    c000fbc4 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbe9 <Phys::setPageState(unsigned long, bool)>:
c000fbe9:	56                   	push   esi
c000fbea:	ba 01 00 00 00       	mov    edx,0x1
c000fbef:	53                   	push   ebx
c000fbf0:	8b 35 e0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9e0
c000fbf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbfe:	89 c8                	mov    eax,ecx
c000fc00:	83 e1 07             	and    ecx,0x7
c000fc03:	c1 e8 03             	shr    eax,0x3
c000fc06:	d3 e3                	shl    ebx,cl
c000fc08:	01 c6                	add    esi,eax
c000fc0a:	d3 e2                	shl    edx,cl
c000fc0c:	f7 d2                	not    edx
c000fc0e:	20 16                	and    BYTE PTR [esi],dl
c000fc10:	03 05 e0 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9e0
c000fc16:	08 18                	or     BYTE PTR [eax],bl
c000fc18:	5b                   	pop    ebx
c000fc19:	5e                   	pop    esi
c000fc1a:	c3                   	ret    

c000fc1b <Phys::getPageState(unsigned long)>:
c000fc1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc1f:	8b 15 e0 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e0
c000fc25:	89 c8                	mov    eax,ecx
c000fc27:	83 e1 07             	and    ecx,0x7
c000fc2a:	c1 e8 03             	shr    eax,0x3
c000fc2d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc31:	d3 f8                	sar    eax,cl
c000fc33:	83 e0 01             	and    eax,0x1
c000fc36:	c3                   	ret    

c000fc37 <Phys::freePage(unsigned long)>:
c000fc37:	53                   	push   ebx
c000fc38:	83 ec 08             	sub    esp,0x8
c000fc3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc3f:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc45:	76 57                	jbe    c000fc9e <Phys::freePage(unsigned long)+0x67>
c000fc47:	c1 eb 0c             	shr    ebx,0xc
c000fc4a:	53                   	push   ebx
c000fc4b:	e8 cb ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fc50:	5a                   	pop    edx
c000fc51:	84 c0                	test   al,al
c000fc53:	74 5b                	je     c000fcb0 <Phys::freePage(unsigned long)+0x79>
c000fc55:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fc5a:	48                   	dec    eax
c000fc5b:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fc60:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc63:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc66:	c1 e0 02             	shl    eax,0x2
c000fc69:	99                   	cdq    
c000fc6a:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fc70:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fc76:	75 13                	jne    c000fc8b <Phys::freePage(unsigned long)+0x54>
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	6a 00                	push   0x0
c000fc7d:	53                   	push   ebx
c000fc7e:	e8 66 ff ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	83 c4 08             	add    esp,0x8
c000fc89:	5b                   	pop    ebx
c000fc8a:	c3                   	ret    
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fc93:	50                   	push   eax
c000fc94:	e8 5b 0a 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	eb da                	jmp    c000fc78 <Phys::freePage(unsigned long)+0x41>
c000fc9e:	68 00 10 00 00       	push   0x1000
c000fca3:	53                   	push   ebx
c000fca4:	e8 f8 fe ff ff       	call   c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>
c000fca9:	59                   	pop    ecx
c000fcaa:	5b                   	pop    ebx
c000fcab:	83 c4 08             	add    esp,0x8
c000fcae:	5b                   	pop    ebx
c000fcaf:	c3                   	ret    
c000fcb0:	c7 44 24 10 26 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a26
c000fcb8:	83 c4 08             	add    esp,0x8
c000fcbb:	5b                   	pop    ebx
c000fcbc:	e9 d8 a1 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>

c000fcc1 <Phys::allocatePage()>:
c000fcc1:	56                   	push   esi
c000fcc2:	53                   	push   ebx
c000fcc3:	51                   	push   ecx
c000fcc4:	8b 35 00 db 02 c0    	mov    esi,DWORD PTR ds:0xc002db00
c000fcca:	89 f3                	mov    ebx,esi
c000fccc:	eb 0a                	jmp    c000fcd8 <Phys::allocatePage()+0x17>
c000fcce:	89 1d 00 db 02 c0    	mov    DWORD PTR ds:0xc002db00,ebx
c000fcd4:	39 de                	cmp    esi,ebx
c000fcd6:	74 24                	je     c000fcfc <Phys::allocatePage()+0x3b>
c000fcd8:	53                   	push   ebx
c000fcd9:	e8 3d ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fcde:	5a                   	pop    edx
c000fcdf:	84 c0                	test   al,al
c000fce1:	74 5a                	je     c000fd3d <Phys::allocatePage()+0x7c>
c000fce3:	43                   	inc    ebx
c000fce4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcea:	75 e2                	jne    c000fcce <Phys::allocatePage()+0xd>
c000fcec:	31 db                	xor    ebx,ebx
c000fcee:	c7 05 00 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db00,0x0
c000fcf8:	39 de                	cmp    esi,ebx
c000fcfa:	75 dc                	jne    c000fcd8 <Phys::allocatePage()+0x17>
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	68 3c 9a 02 c0       	push   0xc0029a3c
c000fd04:	e8 ea 2b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fd09:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd10:	e8 e9 fd ff ff       	call   c000fafe <Phys::allocateDMA(unsigned long)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	85 c0                	test   eax,eax
c000fd1a:	75 56                	jne    c000fd72 <Phys::allocatePage()+0xb1>
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	68 4d 9a 02 c0       	push   0xc0029a4d
c000fd24:	e8 70 a1 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	8b 1d 00 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db00
c000fd32:	53                   	push   ebx
c000fd33:	e8 e3 fe ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fd38:	5a                   	pop    edx
c000fd39:	84 c0                	test   al,al
c000fd3b:	75 a6                	jne    c000fce3 <Phys::allocatePage()+0x22>
c000fd3d:	6a 01                	push   0x1
c000fd3f:	53                   	push   ebx
c000fd40:	e8 a4 fe ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fd45:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fd4a:	59                   	pop    ecx
c000fd4b:	40                   	inc    eax
c000fd4c:	5b                   	pop    ebx
c000fd4d:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fd52:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd55:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd58:	c1 e0 02             	shl    eax,0x2
c000fd5b:	99                   	cdq    
c000fd5c:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fd62:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fd68:	75 0c                	jne    c000fd76 <Phys::allocatePage()+0xb5>
c000fd6a:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c000fd6f:	c1 e0 0c             	shl    eax,0xc
c000fd72:	5a                   	pop    edx
c000fd73:	5b                   	pop    ebx
c000fd74:	5e                   	pop    esi
c000fd75:	c3                   	ret    
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fd7e:	50                   	push   eax
c000fd7f:	e8 70 09 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	eb e1                	jmp    c000fd6a <Phys::allocatePage()+0xa9>

c000fd89 <Phys::allocateContiguousPages(int)>:
c000fd89:	57                   	push   edi
c000fd8a:	56                   	push   esi
c000fd8b:	53                   	push   ebx
c000fd8c:	31 db                	xor    ebx,ebx
c000fd8e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd92:	e8 53 d7 00 00       	call   c001d4ea <lockScheduler()>
c000fd97:	85 db                	test   ebx,ebx
c000fd99:	75 11                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fd9b:	e8 21 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fda0:	83 ff 01             	cmp    edi,0x1
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	74 21                	je     c000fdc8 <Phys::allocateContiguousPages(int)+0x3f>
c000fda7:	bb 01 00 00 00       	mov    ebx,0x1
c000fdac:	e8 10 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fdb1:	89 da                	mov    edx,ebx
c000fdb3:	c1 e2 0c             	shl    edx,0xc
c000fdb6:	01 f2                	add    edx,esi
c000fdb8:	39 c2                	cmp    edx,eax
c000fdba:	74 17                	je     c000fdd3 <Phys::allocateContiguousPages(int)+0x4a>
c000fdbc:	bb 01 00 00 00       	mov    ebx,0x1
c000fdc1:	89 c6                	mov    esi,eax
c000fdc3:	83 ff 01             	cmp    edi,0x1
c000fdc6:	75 e4                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fdc8:	e8 1f d7 00 00       	call   c001d4ec <unlockScheduler()>
c000fdcd:	89 f0                	mov    eax,esi
c000fdcf:	5b                   	pop    ebx
c000fdd0:	5e                   	pop    esi
c000fdd1:	5f                   	pop    edi
c000fdd2:	c3                   	ret    
c000fdd3:	43                   	inc    ebx
c000fdd4:	39 fb                	cmp    ebx,edi
c000fdd6:	75 bf                	jne    c000fd97 <Phys::allocateContiguousPages(int)+0xe>
c000fdd8:	e8 0f d7 00 00       	call   c001d4ec <unlockScheduler()>
c000fddd:	89 f0                	mov    eax,esi
c000fddf:	5b                   	pop    ebx
c000fde0:	5e                   	pop    esi
c000fde1:	5f                   	pop    edi
c000fde2:	c3                   	ret    

c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fde3:	56                   	push   esi
c000fde4:	53                   	push   ebx
c000fde5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde9:	39 1d 04 db 02 c0    	cmp    DWORD PTR ds:0xc002db04,ebx
c000fdef:	73 06                	jae    c000fdf7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdf1:	89 1d 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,ebx
c000fdf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdfb:	c1 eb 0c             	shr    ebx,0xc
c000fdfe:	c1 e8 0c             	shr    eax,0xc
c000fe01:	39 d8                	cmp    eax,ebx
c000fe03:	73 13                	jae    c000fe18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe05:	6a 00                	push   0x0
c000fe07:	8d 70 01             	lea    esi,[eax+0x1]
c000fe0a:	50                   	push   eax
c000fe0b:	e8 d9 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe10:	5a                   	pop    edx
c000fe11:	89 f0                	mov    eax,esi
c000fe13:	59                   	pop    ecx
c000fe14:	39 f3                	cmp    ebx,esi
c000fe16:	75 ed                	jne    c000fe05 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe18:	5b                   	pop    ebx
c000fe19:	5e                   	pop    esi
c000fe1a:	c3                   	ret    

c000fe1b <Phys::physicalMemorySetup(unsigned int)>:
c000fe1b:	55                   	push   ebp
c000fe1c:	57                   	push   edi
c000fe1d:	56                   	push   esi
c000fe1e:	53                   	push   ebx
c000fe1f:	31 db                	xor    ebx,ebx
c000fe21:	83 ec 40             	sub    esp,0x40
c000fe24:	6a 30                	push   0x30
c000fe26:	6a 00                	push   0x0
c000fe28:	68 20 db 02 c0       	push   0xc002db20
c000fe2d:	e8 92 08 ff ff       	call   c00006c4 <memset>
c000fe32:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe36:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe3b:	05 00 10 00 00       	add    eax,0x1000
c000fe40:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	83 ec 08             	sub    esp,0x8
c000fe4a:	6a 01                	push   0x1
c000fe4c:	53                   	push   ebx
c000fe4d:	43                   	inc    ebx
c000fe4e:	e8 96 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe5c:	75 e9                	jne    c000fe47 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe5e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe65:	66 85 c0             	test   ax,ax
c000fe68:	0f 84 8e 01 00 00    	je     c000fffc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe7e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe8f:	eb 15                	jmp    c000fea6 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe91:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe95:	83 c3 18             	add    ebx,0x18
c000fe98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe9c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fea0:	0f 84 66 01 00 00    	je     c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fea9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000feac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000feaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb7:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feb9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000febc:	01 f0                	add    eax,esi
c000febe:	55                   	push   ebp
c000febf:	11 fa                	adc    edx,edi
c000fec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fec9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fecd:	56                   	push   esi
c000fece:	68 88 9a 02 c0       	push   0xc0029a88
c000fed3:	e8 1b 2a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fedc:	83 c4 10             	add    esp,0x10
c000fedf:	09 f8                	or     eax,edi
c000fee1:	0f 85 25 01 00 00    	jne    c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fee7:	4d                   	dec    ebp
c000fee8:	75 a7                	jne    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feea:	ba 00 00 08 00       	mov    edx,0x80000
c000feef:	89 c1                	mov    ecx,eax
c000fef1:	39 f2                	cmp    edx,esi
c000fef3:	19 f9                	sbb    ecx,edi
c000fef5:	0f 82 a7 00 00 00    	jb     c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fefb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000feff:	89 c1                	mov    ecx,eax
c000ff01:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ff05:	0f 83 97 00 00 00    	jae    c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff0b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff10:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff14:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff18:	39 fa                	cmp    edx,edi
c000ff1a:	19 e8                	sbb    eax,ebp
c000ff1c:	0f 82 14 01 00 00    	jb     c0010036 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff22:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff2a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff30:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff35:	83 d5 ff             	adc    ebp,0xffffffff
c000ff38:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff3c:	31 c0                	xor    eax,eax
c000ff3e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff42:	39 fa                	cmp    edx,edi
c000ff44:	89 c1                	mov    ecx,eax
c000ff46:	19 e9                	sbb    ecx,ebp
c000ff48:	0f 83 43 ff ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff4e:	be 00 00 08 00       	mov    esi,0x80000
c000ff53:	50                   	push   eax
c000ff54:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff58:	57                   	push   edi
c000ff59:	56                   	push   esi
c000ff5a:	68 ac 9a 02 c0       	push   0xc0029aac
c000ff5f:	e8 8f 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff64:	5a                   	pop    edx
c000ff65:	59                   	pop    ecx
c000ff66:	57                   	push   edi
c000ff67:	56                   	push   esi
c000ff68:	e8 76 fe ff ff       	call   c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff7c:	03 05 10 db 02 c0    	add    eax,DWORD PTR ds:0xc002db10
c000ff82:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff89:	a3 10 db 02 c0       	mov    ds:0xc002db10,eax
c000ff8e:	52                   	push   edx
c000ff8f:	50                   	push   eax
c000ff90:	68 69 9a 02 c0       	push   0xc0029a69
c000ff95:	e8 59 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	e9 ef fe ff ff       	jmp    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ffa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffae:	39 ea                	cmp    edx,ebp
c000ffb0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffb4:	0f 82 d7 fe ff ff    	jb     c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffba:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffbf:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffc3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffc7:	0f 83 c4 fe ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffcd:	39 ee                	cmp    esi,ebp
c000ffcf:	89 f8                	mov    eax,edi
c000ffd1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffd5:	0f 83 78 ff ff ff    	jae    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffe7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffeb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fff7:	e9 57 ff ff ff       	jmp    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fffc:	83 ec 0c             	sub    esp,0xc
c000ffff:	68 5b 9a 02 c0       	push   0xc0029a5b
c0010004:	e8 90 9e 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	bb 40 01 00 00       	mov    ebx,0x140
c0010011:	83 ec 08             	sub    esp,0x8
c0010014:	6a 00                	push   0x0
c0010016:	53                   	push   ebx
c0010017:	43                   	inc    ebx
c0010018:	e8 cc fb ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c001001d:	ff 05 10 db 02 c0    	inc    DWORD PTR ds:0xc002db10
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001002c:	75 e3                	jne    c0010011 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001002e:	83 c4 3c             	add    esp,0x3c
c0010031:	5b                   	pop    ebx
c0010032:	5e                   	pop    esi
c0010033:	5f                   	pop    edi
c0010034:	5d                   	pop    ebp
c0010035:	c3                   	ret    
c0010036:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001003e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010046:	e9 d7 fe ff ff       	jmp    c000ff22 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001004b:	90                   	nop

c001004c <Pipe::isAtty()>:
c001004c:	31 c0                	xor    eax,eax
c001004e:	c3                   	ret    
c001004f:	90                   	nop

c0010050 <Pipe::~Pipe()>:
c0010050:	83 ec 0c             	sub    esp,0xc
c0010053:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c0010058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005c:	89 10                	mov    DWORD PTR [eax],edx
c001005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010062:	83 ec 0c             	sub    esp,0xc
c0010065:	50                   	push   eax
c0010066:	e8 37 16 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	90                   	nop
c001006f:	83 c4 0c             	add    esp,0xc
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <Pipe::~Pipe()>:
c0010074:	83 ec 0c             	sub    esp,0xc
c0010077:	83 ec 0c             	sub    esp,0xc
c001007a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007e:	e8 cd ff ff ff       	call   c0010050 <Pipe::~Pipe()>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	83 ec 08             	sub    esp,0x8
c0010089:	6a 20                	push   0x20
c001008b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001008f:	e8 7f 27 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 c4 0c             	add    esp,0xc
c001009a:	c3                   	ret    
c001009b:	90                   	nop

c001009c <Pipe::read(unsigned long long, void*, int*)>:
c001009c:	55                   	push   ebp
c001009d:	57                   	push   edi
c001009e:	56                   	push   esi
c001009f:	53                   	push   ebx
c00100a0:	83 ec 1c             	sub    esp,0x1c
c00100a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00100a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100af:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100b2:	89 c8                	mov    eax,ecx
c00100b4:	99                   	cdq    
c00100b5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100b9:	74 19                	je     c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100bb:	39 f9                	cmp    ecx,edi
c00100bd:	89 d1                	mov    ecx,edx
c00100bf:	19 f1                	sbb    ecx,esi
c00100c1:	73 11                	jae    c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100c3:	e8 22 d4 00 00       	call   c001d4ea <lockScheduler()>
c00100c8:	e8 59 d7 00 00       	call   c001d826 <schedule()>
c00100cd:	e8 1a d4 00 00       	call   c001d4ec <unlockScheduler()>
c00100d2:	eb db                	jmp    c00100af <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100d4:	39 f8                	cmp    eax,edi
c00100d6:	89 d1                	mov    ecx,edx
c00100d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100dc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100e0:	19 f1                	sbb    ecx,esi
c00100e2:	73 08                	jae    c00100ec <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100ef:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100f2:	29 c6                	sub    esi,eax
c00100f4:	89 f1                	mov    ecx,esi
c00100f6:	c1 f9 1f             	sar    ecx,0x1f
c00100f9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100fd:	89 ca                	mov    edx,ecx
c00100ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010103:	19 d1                	sbb    ecx,edx
c0010105:	73 04                	jae    c001010b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010107:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001010b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001010f:	89 fd                	mov    ebp,edi
c0010111:	29 f5                	sub    ebp,esi
c0010113:	85 f6                	test   esi,esi
c0010115:	74 12                	je     c0010129 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010117:	52                   	push   edx
c0010118:	56                   	push   esi
c0010119:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001011c:	50                   	push   eax
c001011d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010121:	e8 7a 05 ff ff       	call   c00006a0 <memcpy>
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	85 ed                	test   ebp,ebp
c001012b:	74 12                	je     c001013f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001012d:	50                   	push   eax
c001012e:	55                   	push   ebp
c001012f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010132:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010136:	56                   	push   esi
c0010137:	e8 64 05 ff ff       	call   c00006a0 <memcpy>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010142:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010145:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010148:	99                   	cdq    
c0010149:	89 f7                	mov    edi,esi
c001014b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001014f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010153:	c1 ff 1f             	sar    edi,0x1f
c0010156:	57                   	push   edi
c0010157:	56                   	push   esi
c0010158:	52                   	push   edx
c0010159:	50                   	push   eax
c001015a:	e8 ed 60 01 00       	call   c002624c <__umoddi3>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010165:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001016a:	75 10                	jne    c001017c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001016c:	83 ec 0c             	sub    esp,0xc
c001016f:	68 d5 9a 02 c0       	push   0xc0029ad5
c0010174:	e8 20 9d 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010184:	89 10                	mov    DWORD PTR [eax],edx
c0010186:	83 c4 1c             	add    esp,0x1c
c0010189:	31 c0                	xor    eax,eax
c001018b:	5b                   	pop    ebx
c001018c:	5e                   	pop    esi
c001018d:	5f                   	pop    edi
c001018e:	5d                   	pop    ebp
c001018f:	c3                   	ret    

c0010190 <Pipe::write(unsigned long long, void*, int*)>:
c0010190:	55                   	push   ebp
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	53                   	push   ebx
c0010194:	83 ec 1c             	sub    esp,0x1c
c0010197:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001019b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001019f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101a6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101a9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101b0:	89 de                	mov    esi,ebx
c00101b2:	89 df                	mov    edi,ebx
c00101b4:	c1 ff 1f             	sar    edi,0x1f
c00101b7:	01 c6                	add    esi,eax
c00101b9:	89 c8                	mov    eax,ecx
c00101bb:	11 d7                	adc    edi,edx
c00101bd:	99                   	cdq    
c00101be:	39 f1                	cmp    ecx,esi
c00101c0:	89 d0                	mov    eax,edx
c00101c2:	19 f8                	sbb    eax,edi
c00101c4:	b8 01 00 00 00       	mov    eax,0x1
c00101c9:	0f 82 80 00 00 00    	jb     c001024f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101d5:	01 d8                	add    eax,ebx
c00101d7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101db:	99                   	cdq    
c00101dc:	f7 f9                	idiv   ecx
c00101de:	29 d1                	sub    ecx,edx
c00101e0:	89 d7                	mov    edi,edx
c00101e2:	89 c8                	mov    eax,ecx
c00101e4:	99                   	cdq    
c00101e5:	39 ce                	cmp    esi,ecx
c00101e7:	19 d3                	sbb    ebx,edx
c00101e9:	bb 00 00 00 00       	mov    ebx,0x0
c00101ee:	72 04                	jb     c00101f4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101f0:	89 f3                	mov    ebx,esi
c00101f2:	29 cb                	sub    ebx,ecx
c00101f4:	89 f1                	mov    ecx,esi
c00101f6:	29 d9                	sub    ecx,ebx
c00101f8:	74 1a                	je     c0010214 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101fa:	52                   	push   edx
c00101fb:	51                   	push   ecx
c00101fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010200:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010204:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010207:	57                   	push   edi
c0010208:	e8 93 04 ff ff       	call   c00006a0 <memcpy>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010214:	85 db                	test   ebx,ebx
c0010216:	74 12                	je     c001022a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010218:	50                   	push   eax
c0010219:	53                   	push   ebx
c001021a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001021e:	51                   	push   ecx
c001021f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010222:	e8 79 04 ff ff       	call   c00006a0 <memcpy>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001022d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010232:	75 10                	jne    c0010244 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010234:	83 ec 0c             	sub    esp,0xc
c0010237:	68 f1 9a 02 c0       	push   0xc0029af1
c001023c:	e8 58 9c 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010248:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001024b:	89 38                	mov    DWORD PTR [eax],edi
c001024d:	31 c0                	xor    eax,eax
c001024f:	83 c4 1c             	add    esp,0x1c
c0010252:	5b                   	pop    ebx
c0010253:	5e                   	pop    esi
c0010254:	5f                   	pop    edi
c0010255:	5d                   	pop    ebp
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <Pipe::Pipe(int)>:
c0010258:	83 ec 0c             	sub    esp,0xc
c001025b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025f:	83 ec 08             	sub    esp,0x8
c0010262:	6a 00                	push   0x0
c0010264:	50                   	push   eax
c0010265:	e8 56 12 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c001026a:	83 c4 10             	add    esp,0x10
c001026d:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c0010272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010276:	89 10                	mov    DWORD PTR [eax],edx
c0010278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010280:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010287:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010292:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029d:	83 ec 0c             	sub    esp,0xc
c00102a0:	50                   	push   eax
c00102a1:	e8 7e f3 ff ff       	call   c000f624 <malloc>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	89 c2                	mov    edx,eax
c00102ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102ba:	90                   	nop
c00102bb:	83 c4 0c             	add    esp,0xc
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <VgaText::isAtty()>:
c00102c0:	b0 01                	mov    al,0x1
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <VgaText::~VgaText()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 c3 13 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <VgaText::~VgaText()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <VgaText::~VgaText()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	68 60 12 00 00       	push   0x1260
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 08 25 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 c4 0c             	add    esp,0xc
c0010311:	c3                   	ret    

c0010312 <VgaText::read(unsigned long long, void*, int*)>:
c0010312:	83 ec 10             	sub    esp,0x10
c0010315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001031d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010321:	e8 1d 59 00 00       	call   c0015c43 <readKeyboard(VgaText*, char*, unsigned long)>
c0010326:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001032a:	89 02                	mov    DWORD PTR [edx],eax
c001032c:	31 c0                	xor    eax,eax
c001032e:	83 c4 1c             	add    esp,0x1c
c0010331:	c3                   	ret    

c0010332 <setTerminalScrollLock(bool)>:
c0010332:	c3                   	ret    

c0010333 <addToTerminalCycle(VgaText*)>:
c0010333:	8b 15 a0 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dba0
c0010339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033d:	85 d2                	test   edx,edx
c001033f:	75 0c                	jne    c001034d <addToTerminalCycle(VgaText*)+0x1a>
c0010341:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010347:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c001034c:	c3                   	ret    
c001034d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010353:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010359:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001035f:	c3                   	ret    

c0010360 <installVgaTextImplementation()>:
c0010360:	83 ec 10             	sub    esp,0x10
c0010363:	6a 20                	push   0x20
c0010365:	6a 00                	push   0x0
c0010367:	68 80 db 02 c0       	push   0xc002db80
c001036c:	e8 53 03 ff ff       	call   c00006c4 <memset>
c0010371:	83 c4 1c             	add    esp,0x1c
c0010374:	c3                   	ret    

c0010375 <scrollTerminalScrollLock(int)>:
c0010375:	c3                   	ret    

c0010376 <VgaText::load()>:
c0010376:	53                   	push   ebx
c0010377:	31 c0                	xor    eax,eax
c0010379:	83 ec 58             	sub    esp,0x58
c001037c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010380:	89 e2                	mov    edx,esp
c0010382:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010386:	40                   	inc    eax
c0010387:	83 f8 50             	cmp    eax,0x50
c001038a:	75 f6                	jne    c0010382 <VgaText::load()+0xc>
c001038c:	31 c0                	xor    eax,eax
c001038e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010395:	84 c9                	test   cl,cl
c0010397:	74 06                	je     c001039f <VgaText::load()+0x29>
c0010399:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001039c:	40                   	inc    eax
c001039d:	eb ef                	jmp    c001038e <VgaText::load()+0x18>
c001039f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00103a5:	85 c0                	test   eax,eax
c00103a7:	74 09                	je     c00103b2 <VgaText::load()+0x3c>
c00103a9:	51                   	push   ecx
c00103aa:	51                   	push   ecx
c00103ab:	52                   	push   edx
c00103ac:	53                   	push   ebx
c00103ad:	ff d0                	call   eax
c00103af:	83 c4 10             	add    esp,0x10
c00103b2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103b8:	85 c0                	test   eax,eax
c00103ba:	74 09                	je     c00103c5 <VgaText::load()+0x4f>
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	53                   	push   ebx
c00103c0:	ff d0                	call   eax
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	83 c4 58             	add    esp,0x58
c00103c8:	5b                   	pop    ebx
c00103c9:	c3                   	ret    

c00103ca <VgaText::updateCursor()>:
c00103ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ce:	39 05 a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,eax
c00103d4:	75 0c                	jne    c00103e2 <VgaText::updateCursor()+0x18>
c00103d6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103dc:	85 c0                	test   eax,eax
c00103de:	74 02                	je     c00103e2 <VgaText::updateCursor()+0x18>
c00103e0:	ff e0                	jmp    eax
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <VgaText::showCursor(bool)>:
c00103e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ec:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <VgaText::disableBlink(bool)>:
c00103f4:	56                   	push   esi
c00103f5:	53                   	push   ebx
c00103f6:	51                   	push   ecx
c00103f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ff:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c0010405:	75 18                	jne    c001041f <VgaText::disableBlink(bool)+0x2b>
c0010407:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001040d:	85 c0                	test   eax,eax
c001040f:	74 0e                	je     c001041f <VgaText::disableBlink(bool)+0x2b>
c0010411:	89 f1                	mov    ecx,esi
c0010413:	52                   	push   edx
c0010414:	52                   	push   edx
c0010415:	0f b6 d1             	movzx  edx,cl
c0010418:	52                   	push   edx
c0010419:	53                   	push   ebx
c001041a:	ff d0                	call   eax
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	89 f0                	mov    eax,esi
c0010421:	83 f0 01             	xor    eax,0x1
c0010424:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001042a:	58                   	pop    eax
c001042b:	5b                   	pop    ebx
c001042c:	5e                   	pop    esi
c001042d:	c3                   	ret    

c001042e <VgaText::doANSI_SGR(int)>:
c001042e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	85 d2                	test   edx,edx
c0010438:	75 14                	jne    c001044e <VgaText::doANSI_SGR(int)+0x20>
c001043a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010440:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010446:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001044c:	eb 65                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001044e:	83 fa 07             	cmp    edx,0x7
c0010451:	75 14                	jne    c0010467 <VgaText::doANSI_SGR(int)+0x39>
c0010453:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010459:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001045f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010465:	eb 4c                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c0010467:	83 fa 1b             	cmp    edx,0x1b
c001046a:	74 ce                	je     c001043a <VgaText::doANSI_SGR(int)+0xc>
c001046c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001046f:	83 f9 07             	cmp    ecx,0x7
c0010472:	77 09                	ja     c001047d <VgaText::doANSI_SGR(int)+0x4f>
c0010474:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c001047b:	eb 20                	jmp    c001049d <VgaText::doANSI_SGR(int)+0x6f>
c001047d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010480:	83 f9 07             	cmp    ecx,0x7
c0010483:	77 09                	ja     c001048e <VgaText::doANSI_SGR(int)+0x60>
c0010485:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c001048c:	eb 25                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001048e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010491:	83 f9 07             	cmp    ecx,0x7
c0010494:	77 0e                	ja     c00104a4 <VgaText::doANSI_SGR(int)+0x76>
c0010496:	8b 14 95 d8 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3728]
c001049d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104a3:	c3                   	ret    
c00104a4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00104a7:	83 f9 07             	cmp    ecx,0x7
c00104aa:	77 0d                	ja     c00104b9 <VgaText::doANSI_SGR(int)+0x8b>
c00104ac:	8b 14 95 b0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3750]
c00104b3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b9:	c3                   	ret    

c00104ba <VgaText::setDefaultBgColour(VgaColour)>:
c00104ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104c8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <VgaText::setDefaultFgColour(VgaColour)>:
c00104d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104de:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104e6:	53                   	push   ebx
c00104e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f3:	51                   	push   ecx
c00104f4:	e8 c1 ff ff ff       	call   c00104ba <VgaText::setDefaultBgColour(VgaColour)>
c00104f9:	58                   	pop    eax
c00104fa:	5a                   	pop    edx
c00104fb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010503:	5b                   	pop    ebx
c0010504:	eb ca                	jmp    c00104d0 <VgaText::setDefaultFgColour(VgaColour)>

c0010506 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010506:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001050a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001050f:	83 e0 0f             	and    eax,0xf
c0010512:	c1 e2 04             	shl    edx,0x4
c0010515:	09 d0                	or     eax,edx
c0010517:	c3                   	ret    

c0010518 <VgaText::scrollScreen()>:
c0010518:	57                   	push   edi
c0010519:	56                   	push   esi
c001051a:	be 01 00 00 00       	mov    esi,0x1
c001051f:	53                   	push   ebx
c0010520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010524:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001052a:	31 ff                	xor    edi,edi
c001052c:	01 d9                	add    ecx,ebx
c001052e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010531:	83 fe 17             	cmp    esi,0x17
c0010534:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001053a:	75 28                	jne    c0010564 <VgaText::scrollScreen()+0x4c>
c001053c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010542:	74 1c                	je     c0010560 <VgaText::scrollScreen()+0x48>
c0010544:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001054b:	50                   	push   eax
c001054c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010553:	50                   	push   eax
c0010554:	e8 ad ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010559:	5a                   	pop    edx
c001055a:	5a                   	pop    edx
c001055b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001055e:	eb 04                	jmp    c0010564 <VgaText::scrollScreen()+0x4c>
c0010560:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010564:	47                   	inc    edi
c0010565:	41                   	inc    ecx
c0010566:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001056c:	75 c0                	jne    c001052e <VgaText::scrollScreen()+0x16>
c001056e:	46                   	inc    esi
c001056f:	83 fe 18             	cmp    esi,0x18
c0010572:	75 b0                	jne    c0010524 <VgaText::scrollScreen()+0xc>
c0010574:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c001057a:	75 24                	jne    c00105a0 <VgaText::scrollScreen()+0x88>
c001057c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010583:	74 08                	je     c001058d <VgaText::scrollScreen()+0x75>
c0010585:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001058b:	eb 13                	jmp    c00105a0 <VgaText::scrollScreen()+0x88>
c001058d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010593:	85 c0                	test   eax,eax
c0010595:	74 09                	je     c00105a0 <VgaText::scrollScreen()+0x88>
c0010597:	83 ec 0c             	sub    esp,0xc
c001059a:	53                   	push   ebx
c001059b:	ff d0                	call   eax
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105a4:	5b                   	pop    ebx
c00105a5:	5e                   	pop    esi
c00105a6:	5f                   	pop    edi
c00105a7:	e9 1e fe ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c00105ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00105ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105b1:	c1 e0 08             	shl    eax,0x8
c00105b4:	89 c2                	mov    edx,eax
c00105b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105bb:	09 d0                	or     eax,edx
c00105bd:	c3                   	ret    

c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105be:	53                   	push   ebx
c00105bf:	83 ec 08             	sub    esp,0x8
c00105c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105c6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105cb:	50                   	push   eax
c00105cc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105d1:	50                   	push   eax
c00105d2:	e8 2f ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d7:	5a                   	pop    edx
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	5b                   	pop    ebx
c00105dc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105e1:	50                   	push   eax
c00105e2:	53                   	push   ebx
c00105e3:	e8 c4 ff ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00105e8:	5a                   	pop    edx
c00105e9:	5a                   	pop    edx
c00105ea:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105f0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105f4:	0f b7 d2             	movzx  edx,dx
c00105f7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105fc:	39 0d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ecx
c0010602:	75 14                	jne    c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010604:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 0a                	je     c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001060e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010612:	83 c4 08             	add    esp,0x8
c0010615:	5b                   	pop    ebx
c0010616:	ff e0                	jmp    eax
c0010618:	83 c4 08             	add    esp,0x8
c001061b:	5b                   	pop    ebx
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <VgaText::getCursorX()>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <VgaText::getCursorY()>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010634:	c3                   	ret    
c0010635:	90                   	nop

c0010636 <VgaText::setCursor(int, int)>:
c0010636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010648:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001064e:	e9 77 fd ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010653:	90                   	nop

c0010654 <VgaText::setCursorX(int)>:
c0010654:	83 ec 10             	sub    esp,0x10
c0010657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001065b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010665:	50                   	push   eax
c0010666:	e8 cb ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c001066b:	83 c4 1c             	add    esp,0x1c
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::setCursorY(int)>:
c0010670:	83 ec 10             	sub    esp,0x10
c0010673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010677:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001067b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010681:	50                   	push   eax
c0010682:	e8 af ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010687:	83 c4 1c             	add    esp,0x1c
c001068a:	c3                   	ret    
c001068b:	90                   	nop

c001068c <VgaText::incrementCursor(bool)>:
c001068c:	56                   	push   esi
c001068d:	53                   	push   ebx
c001068e:	51                   	push   ecx
c001068f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010697:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001069d:	40                   	inc    eax
c001069e:	83 f8 50             	cmp    eax,0x50
c00106a1:	74 08                	je     c00106ab <VgaText::incrementCursor(bool)+0x1f>
c00106a3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106a9:	eb 33                	jmp    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106ab:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106b1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106bb:	8d 50 01             	lea    edx,[eax+0x1]
c00106be:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106c4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106ca:	75 12                	jne    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106d5:	53                   	push   ebx
c00106d6:	e8 3d fe ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00106db:	83 c4 10             	add    esp,0x10
c00106de:	89 f0                	mov    eax,esi
c00106e0:	84 c0                	test   al,al
c00106e2:	74 0c                	je     c00106f0 <VgaText::incrementCursor(bool)+0x64>
c00106e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106e8:	5a                   	pop    edx
c00106e9:	5b                   	pop    ebx
c00106ea:	5e                   	pop    esi
c00106eb:	e9 da fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00106f0:	58                   	pop    eax
c00106f1:	5b                   	pop    ebx
c00106f2:	5e                   	pop    esi
c00106f3:	c3                   	ret    

c00106f4 <VgaText::updateRAMUsageDisplay(int)>:
c00106f4:	56                   	push   esi
c00106f5:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c00106fb:	53                   	push   ebx
c00106fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0010701:	6a 0f                	push   0xf
c0010703:	6a 00                	push   0x0
c0010705:	e8 fc fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c001070a:	5a                   	pop    edx
c001070b:	59                   	pop    ecx
c001070c:	0f b6 c8             	movzx  ecx,al
c001070f:	51                   	push   ecx
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	99                   	cdq    
c0010715:	f7 fb                	idiv   ebx
c0010717:	89 d3                	mov    ebx,edx
c0010719:	83 c0 30             	add    eax,0x30
c001071c:	83 c3 30             	add    ebx,0x30
c001071f:	0f be c0             	movsx  eax,al
c0010722:	0f b6 db             	movzx  ebx,bl
c0010725:	50                   	push   eax
c0010726:	e8 81 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001072b:	5a                   	pop    edx
c001072c:	5a                   	pop    edx
c001072d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010734:	51                   	push   ecx
c0010735:	53                   	push   ebx
c0010736:	e8 71 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001073b:	5b                   	pop    ebx
c001073c:	5a                   	pop    edx
c001073d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010744:	51                   	push   ecx
c0010745:	6a 25                	push   0x25
c0010747:	e8 60 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001074c:	59                   	pop    ecx
c001074d:	5b                   	pop    ebx
c001074e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010755:	5b                   	pop    ebx
c0010756:	5e                   	pop    esi
c0010757:	c3                   	ret    

c0010758 <VgaText::updateDiskUsage()>:
c0010758:	55                   	push   ebp
c0010759:	bd 10 27 00 00       	mov    ebp,0x2710
c001075e:	57                   	push   edi
c001075f:	8b 3d 00 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca00
c0010765:	56                   	push   esi
c0010766:	53                   	push   ebx
c0010767:	6a 0f                	push   0xf
c0010769:	6a 00                	push   0x0
c001076b:	e8 96 fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	0f b6 d8             	movzx  ebx,al
c0010774:	59                   	pop    ecx
c0010775:	8b 35 28 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e28
c001077b:	53                   	push   ebx
c001077c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010781:	89 f0                	mov    eax,esi
c0010783:	99                   	cdq    
c0010784:	f7 fd                	idiv   ebp
c0010786:	99                   	cdq    
c0010787:	f7 f9                	idiv   ecx
c0010789:	8d 42 30             	lea    eax,[edx+0x30]
c001078c:	0f b6 c0             	movzx  eax,al
c001078f:	50                   	push   eax
c0010790:	e8 17 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010795:	5d                   	pop    ebp
c0010796:	bd e8 03 00 00       	mov    ebp,0x3e8
c001079b:	5a                   	pop    edx
c001079c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00107a0:	53                   	push   ebx
c00107a1:	89 f0                	mov    eax,esi
c00107a3:	99                   	cdq    
c00107a4:	f7 fd                	idiv   ebp
c00107a6:	99                   	cdq    
c00107a7:	f7 f9                	idiv   ecx
c00107a9:	8d 42 30             	lea    eax,[edx+0x30]
c00107ac:	0f b6 c0             	movzx  eax,al
c00107af:	50                   	push   eax
c00107b0:	e8 f7 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5d                   	pop    ebp
c00107b6:	bd 64 00 00 00       	mov    ebp,0x64
c00107bb:	5a                   	pop    edx
c00107bc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107c3:	53                   	push   ebx
c00107c4:	89 f0                	mov    eax,esi
c00107c6:	99                   	cdq    
c00107c7:	f7 fd                	idiv   ebp
c00107c9:	99                   	cdq    
c00107ca:	f7 f9                	idiv   ecx
c00107cc:	8d 42 30             	lea    eax,[edx+0x30]
c00107cf:	0f b6 c0             	movzx  eax,al
c00107d2:	50                   	push   eax
c00107d3:	e8 d4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107d8:	5d                   	pop    ebp
c00107d9:	5a                   	pop    edx
c00107da:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107e1:	53                   	push   ebx
c00107e2:	89 f0                	mov    eax,esi
c00107e4:	99                   	cdq    
c00107e5:	f7 f9                	idiv   ecx
c00107e7:	89 d6                	mov    esi,edx
c00107e9:	99                   	cdq    
c00107ea:	f7 f9                	idiv   ecx
c00107ec:	8d 42 30             	lea    eax,[edx+0x30]
c00107ef:	0f b6 c0             	movzx  eax,al
c00107f2:	50                   	push   eax
c00107f3:	e8 b4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107f8:	5d                   	pop    ebp
c00107f9:	5a                   	pop    edx
c00107fa:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010801:	53                   	push   ebx
c0010802:	8d 46 30             	lea    eax,[esi+0x30]
c0010805:	0f b6 f0             	movzx  esi,al
c0010808:	56                   	push   esi
c0010809:	e8 9e fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001080e:	5e                   	pop    esi
c001080f:	8b 35 24 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e24
c0010815:	5d                   	pop    ebp
c0010816:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001081d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010822:	53                   	push   ebx
c0010823:	89 f0                	mov    eax,esi
c0010825:	99                   	cdq    
c0010826:	f7 fd                	idiv   ebp
c0010828:	99                   	cdq    
c0010829:	f7 f9                	idiv   ecx
c001082b:	8d 42 30             	lea    eax,[edx+0x30]
c001082e:	0f b6 c0             	movzx  eax,al
c0010831:	50                   	push   eax
c0010832:	e8 75 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010837:	5a                   	pop    edx
c0010838:	5d                   	pop    ebp
c0010839:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010840:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010845:	53                   	push   ebx
c0010846:	89 f0                	mov    eax,esi
c0010848:	99                   	cdq    
c0010849:	f7 fd                	idiv   ebp
c001084b:	99                   	cdq    
c001084c:	f7 f9                	idiv   ecx
c001084e:	8d 42 30             	lea    eax,[edx+0x30]
c0010851:	0f b6 c0             	movzx  eax,al
c0010854:	50                   	push   eax
c0010855:	e8 52 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001085a:	5a                   	pop    edx
c001085b:	5d                   	pop    ebp
c001085c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010863:	bd 64 00 00 00       	mov    ebp,0x64
c0010868:	53                   	push   ebx
c0010869:	89 f0                	mov    eax,esi
c001086b:	99                   	cdq    
c001086c:	f7 fd                	idiv   ebp
c001086e:	99                   	cdq    
c001086f:	f7 f9                	idiv   ecx
c0010871:	83 c2 30             	add    edx,0x30
c0010874:	0f b6 d2             	movzx  edx,dl
c0010877:	52                   	push   edx
c0010878:	e8 2f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001087d:	5a                   	pop    edx
c001087e:	5d                   	pop    ebp
c001087f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010886:	53                   	push   ebx
c0010887:	89 f0                	mov    eax,esi
c0010889:	99                   	cdq    
c001088a:	f7 f9                	idiv   ecx
c001088c:	89 d6                	mov    esi,edx
c001088e:	99                   	cdq    
c001088f:	f7 f9                	idiv   ecx
c0010891:	8d 42 30             	lea    eax,[edx+0x30]
c0010894:	0f b6 c0             	movzx  eax,al
c0010897:	50                   	push   eax
c0010898:	e8 0f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001089d:	5a                   	pop    edx
c001089e:	59                   	pop    ecx
c001089f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00108a6:	53                   	push   ebx
c00108a7:	8d 46 30             	lea    eax,[esi+0x30]
c00108aa:	0f b6 f0             	movzx  esi,al
c00108ad:	56                   	push   esi
c00108ae:	e8 f9 fc ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00108b3:	5b                   	pop    ebx
c00108b4:	5e                   	pop    esi
c00108b5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108bc:	5b                   	pop    ebx
c00108bd:	5e                   	pop    esi
c00108be:	5f                   	pop    edi
c00108bf:	5d                   	pop    ebp
c00108c0:	c3                   	ret    
c00108c1:	90                   	nop

c00108c2 <VgaText::updateTitle()>:
c00108c2:	53                   	push   ebx
c00108c3:	31 c0                	xor    eax,eax
c00108c5:	83 ec 58             	sub    esp,0x58
c00108c8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108cc:	89 e1                	mov    ecx,esp
c00108ce:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108d2:	40                   	inc    eax
c00108d3:	83 f8 50             	cmp    eax,0x50
c00108d6:	75 f6                	jne    c00108ce <VgaText::updateTitle()+0xc>
c00108d8:	31 c0                	xor    eax,eax
c00108da:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108e1:	84 db                	test   bl,bl
c00108e3:	74 06                	je     c00108eb <VgaText::updateTitle()+0x29>
c00108e5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108e8:	40                   	inc    eax
c00108e9:	eb ef                	jmp    c00108da <VgaText::updateTitle()+0x18>
c00108eb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108f1:	85 c0                	test   eax,eax
c00108f3:	74 09                	je     c00108fe <VgaText::updateTitle()+0x3c>
c00108f5:	53                   	push   ebx
c00108f6:	53                   	push   ebx
c00108f7:	51                   	push   ecx
c00108f8:	52                   	push   edx
c00108f9:	ff d0                	call   eax
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	e8 55 fe ff ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0010903:	83 c4 58             	add    esp,0x58
c0010906:	5b                   	pop    ebx
c0010907:	c3                   	ret    

c0010908 <VgaText::setTitleTextColour(VgaColour)>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010910:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010916:	eb aa                	jmp    c00108c2 <VgaText::updateTitle()>

c0010918 <VgaText::setTitleColour(VgaColour)>:
c0010918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010920:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010926:	eb 9a                	jmp    c00108c2 <VgaText::updateTitle()>

c0010928 <VgaText::setTitle(char*)>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 10             	sub    esp,0x10
c001092c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010934:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001093a:	50                   	push   eax
c001093b:	e8 23 fe fe ff       	call   c0000763 <strcpy>
c0010940:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010944:	83 c4 18             	add    esp,0x18
c0010947:	5b                   	pop    ebx
c0010948:	e9 75 ff ff ff       	jmp    c00108c2 <VgaText::updateTitle()>
c001094d:	90                   	nop

c001094e <VgaText::decrementCursor(bool)>:
c001094e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010952:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010956:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001095c:	85 c0                	test   eax,eax
c001095e:	74 07                	je     c0010967 <VgaText::decrementCursor(bool)+0x19>
c0010960:	48                   	dec    eax
c0010961:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010967:	84 c9                	test   cl,cl
c0010969:	74 09                	je     c0010974 <VgaText::decrementCursor(bool)+0x26>
c001096b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001096f:	e9 56 fa ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010974:	c3                   	ret    
c0010975:	90                   	nop

c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010976:	53                   	push   ebx
c0010977:	83 ec 08             	sub    esp,0x8
c001097a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001098a:	3c 07                	cmp    al,0x7
c001098c:	75 2a                	jne    c00109b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001098e:	a1 4c dc 02 c0       	mov    eax,ds:0xc002dc4c
c0010993:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001099b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00109a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109af:	83 c4 08             	add    esp,0x8
c00109b2:	5b                   	pop    ebx
c00109b3:	e9 3a 2d 00 00       	jmp    c00136f2 <Buzzer::beep(int, int, bool)>
c00109b8:	3c 0d                	cmp    al,0xd
c00109ba:	75 0c                	jne    c00109c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109bc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109c6:	eb 3b                	jmp    c0010a03 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109c8:	3c 0a                	cmp    al,0xa
c00109ca:	75 40                	jne    c0010a0c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109cc:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109d2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109dc:	8d 50 01             	lea    edx,[eax+0x1]
c00109df:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109e5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109eb:	75 12                	jne    c00109ff <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109ed:	83 ec 0c             	sub    esp,0xc
c00109f0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109f6:	53                   	push   ebx
c00109f7:	e8 1c fb ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a03:	83 c4 08             	add    esp,0x8
c0010a06:	5b                   	pop    ebx
c0010a07:	e9 be f9 ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010a0c:	3c 08                	cmp    al,0x8
c0010a0e:	75 31                	jne    c0010a41 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a10:	50                   	push   eax
c0010a11:	50                   	push   eax
c0010a12:	6a 01                	push   0x1
c0010a14:	53                   	push   ebx
c0010a15:	e8 34 ff ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010a1a:	5a                   	pop    edx
c0010a1b:	59                   	pop    ecx
c0010a1c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a22:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a28:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a2e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a34:	6a 20                	push   0x20
c0010a36:	53                   	push   ebx
c0010a37:	e8 82 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3c:	83 c4 28             	add    esp,0x28
c0010a3f:	5b                   	pop    ebx
c0010a40:	c3                   	ret    
c0010a41:	83 ec 08             	sub    esp,0x8
c0010a44:	0f be c0             	movsx  eax,al
c0010a47:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a4d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a53:	51                   	push   ecx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	53                   	push   ebx
c0010a57:	e8 62 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a5c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a60:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a68:	83 c4 28             	add    esp,0x28
c0010a6b:	5b                   	pop    ebx
c0010a6c:	e9 1b fc ff ff       	jmp    c001068c <VgaText::incrementCursor(bool)>
c0010a71:	90                   	nop

c0010a72 <VgaText::isShowingCursor()>:
c0010a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a76:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a7c:	c3                   	ret    
c0010a7d:	90                   	nop

c0010a7e <VgaText::isBlinkDisabled()>:
c0010a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a82:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a88:	83 f0 01             	xor    eax,0x1
c0010a8b:	c3                   	ret    

c0010a8c <VgaText::setCursorHeight(int)>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a94:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a9a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010aa5:	e9 3a f9 ff ff       	jmp    c00103e4 <VgaText::showCursor(bool)>

c0010aaa <VgaText::getCursorHeight()>:
c0010aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aae:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010ab4:	c3                   	ret    

c0010ab5 <setActiveTerminal(VgaText*)>:
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 08             	sub    esp,0x8
c0010ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abd:	85 db                	test   ebx,ebx
c0010abf:	75 11                	jne    c0010ad2 <setActiveTerminal(VgaText*)+0x1d>
c0010ac1:	c7 44 24 10 2c 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b2c
c0010ac9:	83 c4 08             	add    esp,0x8
c0010acc:	5b                   	pop    ebx
c0010acd:	e9 c7 93 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c0010ad2:	50                   	push   eax
c0010ad3:	50                   	push   eax
c0010ad4:	53                   	push   ebx
c0010ad5:	68 3a 9b 02 c0       	push   0xc0029b3a
c0010ada:	e8 14 1e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010adf:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	85 c0                	test   eax,eax
c0010ae9:	74 0c                	je     c0010af7 <setActiveTerminal(VgaText*)+0x42>
c0010aeb:	83 ec 0c             	sub    esp,0xc
c0010aee:	50                   	push   eax
c0010aef:	e8 d6 f8 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c0010afd:	51                   	push   ecx
c0010afe:	51                   	push   ecx
c0010aff:	53                   	push   ebx
c0010b00:	68 52 9b 02 c0       	push   0xc0029b52
c0010b05:	e8 e9 1d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010b0a:	83 c4 0c             	add    esp,0xc
c0010b0d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b13:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b19:	53                   	push   ebx
c0010b1a:	e8 17 fb ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b22:	e8 57 ff ff ff       	call   c0010a7e <VgaText::isBlinkDisabled()>
c0010b27:	5a                   	pop    edx
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	59                   	pop    ecx
c0010b2c:	50                   	push   eax
c0010b2d:	53                   	push   ebx
c0010b2e:	e8 c1 f8 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0010b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b36:	e8 6f ff ff ff       	call   c0010aaa <VgaText::getCursorHeight()>
c0010b3b:	5a                   	pop    edx
c0010b3c:	59                   	pop    ecx
c0010b3d:	50                   	push   eax
c0010b3e:	53                   	push   ebx
c0010b3f:	e8 48 ff ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b4e:	75 0a                	jne    c0010b5a <setActiveTerminal(VgaText*)+0xa5>
c0010b50:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b5e:	83 c4 08             	add    esp,0x8
c0010b61:	5b                   	pop    ebx
c0010b62:	e9 0f f8 ff ff       	jmp    c0010376 <VgaText::load()>

c0010b67 <doTerminalCycle()>:
c0010b67:	83 ec 18             	sub    esp,0x18
c0010b6a:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c0010b6f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b75:	50                   	push   eax
c0010b76:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c0010b7b:	e8 35 ff ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0010b80:	83 c4 1c             	add    esp,0x1c
c0010b83:	c3                   	ret    

c0010b84 <VgaText::doUpdate()>:
c0010b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b88:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b8e:	85 c0                	test   eax,eax
c0010b90:	74 02                	je     c0010b94 <VgaText::doUpdate()+0x10>
c0010b92:	ff e0                	jmp    eax
c0010b94:	c3                   	ret    
c0010b95:	90                   	nop

c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b96:	55                   	push   ebp
c0010b97:	57                   	push   edi
c0010b98:	56                   	push   esi
c0010b99:	53                   	push   ebx
c0010b9a:	83 ec 1c             	sub    esp,0x1c
c0010b9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ba1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ba6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010bad:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010bb0:	50                   	push   eax
c0010bb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bb6:	50                   	push   eax
c0010bb7:	e8 4a f9 ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010bbc:	59                   	pop    ecx
c0010bbd:	0f b6 c0             	movzx  eax,al
c0010bc0:	5b                   	pop    ebx
c0010bc1:	31 c9                	xor    ecx,ecx
c0010bc3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bcf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bd9:	0f b7 db             	movzx  ebx,bx
c0010bdc:	01 db                	add    ebx,ebx
c0010bde:	01 fb                	add    ebx,edi
c0010be0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010be3:	84 c0                	test   al,al
c0010be5:	0f 84 38 01 00 00    	je     c0010d23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010beb:	3c 0d                	cmp    al,0xd
c0010bed:	75 0f                	jne    c0010bfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bef:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf9:	e9 1f 01 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bfe:	3c 0a                	cmp    al,0xa
c0010c00:	75 5b                	jne    c0010c5d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010c02:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c08:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c12:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c15:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c1b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c21:	75 12                	jne    c0010c35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c23:	83 ec 0c             	sub    esp,0xc
c0010c26:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c2c:	55                   	push   ebp
c0010c2d:	e8 e6 f8 ff ff       	call   c0010518 <VgaText::scrollScreen()>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	55                   	push   ebp
c0010c39:	e8 8c f7 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010c3e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c4f:	31 c9                	xor    ecx,ecx
c0010c51:	0f b7 db             	movzx  ebx,bx
c0010c54:	01 db                	add    ebx,ebx
c0010c56:	01 fb                	add    ebx,edi
c0010c58:	e9 c0 00 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c5d:	3c 08                	cmp    al,0x8
c0010c5f:	75 4e                	jne    c0010caf <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c61:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c65:	53                   	push   ebx
c0010c66:	53                   	push   ebx
c0010c67:	6a 01                	push   0x1
c0010c69:	55                   	push   ebp
c0010c6a:	e8 df fc ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010c6f:	58                   	pop    eax
c0010c70:	5a                   	pop    edx
c0010c71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c7d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c83:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c89:	6a 20                	push   0x20
c0010c8b:	55                   	push   ebp
c0010c8c:	e8 2d f9 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c91:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c99:	83 c4 20             	add    esp,0x20
c0010c9c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ca2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ca6:	0f b7 db             	movzx  ebx,bx
c0010ca9:	01 db                	add    ebx,ebx
c0010cab:	01 fb                	add    ebx,edi
c0010cad:	eb 6e                	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010caf:	51                   	push   ecx
c0010cb0:	51                   	push   ecx
c0010cb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cb5:	50                   	push   eax
c0010cb6:	e8 f1 f8 ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cc1:	39 2d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebp
c0010cc7:	75 2a                	jne    c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ccf:	85 c0                	test   eax,eax
c0010cd1:	74 20                	je     c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cd3:	52                   	push   edx
c0010cd4:	52                   	push   edx
c0010cd5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cdb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ce1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cec:	51                   	push   ecx
c0010ced:	55                   	push   ebp
c0010cee:	ff d0                	call   eax
c0010cf0:	83 c4 20             	add    esp,0x20
c0010cf3:	83 c3 02             	add    ebx,0x2
c0010cf6:	50                   	push   eax
c0010cf7:	50                   	push   eax
c0010cf8:	6a 00                	push   0x0
c0010cfa:	55                   	push   ebp
c0010cfb:	e8 8c f9 ff ff       	call   c001068c <VgaText::incrementCursor(bool)>
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d0a:	75 0f                	jne    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d0c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d14:	0f b7 db             	movzx  ebx,bx
c0010d17:	01 db                	add    ebx,ebx
c0010d19:	01 fb                	add    ebx,edi
c0010d1b:	b1 01                	mov    cl,0x1
c0010d1d:	46                   	inc    esi
c0010d1e:	e9 bd fe ff ff       	jmp    c0010be0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d23:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	55                   	push   ebp
c0010d2b:	e8 9a f6 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d37:	84 c9                	test   cl,cl
c0010d39:	74 0c                	je     c0010d47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d3b:	83 ec 0c             	sub    esp,0xc
c0010d3e:	55                   	push   ebp
c0010d3f:	e8 40 fe ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d4e:	83 c4 1c             	add    esp,0x1c
c0010d51:	5b                   	pop    ebx
c0010d52:	5e                   	pop    esi
c0010d53:	5f                   	pop    edi
c0010d54:	5d                   	pop    ebp
c0010d55:	c3                   	ret    

c0010d56 <VgaText::clearScreen()>:
c0010d56:	57                   	push   edi
c0010d57:	56                   	push   esi
c0010d58:	31 f6                	xor    esi,esi
c0010d5a:	53                   	push   ebx
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	52                   	push   edx
c0010d60:	6a 00                	push   0x0
c0010d62:	6a 00                	push   0x0
c0010d64:	53                   	push   ebx
c0010d65:	e8 cc f8 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010d6a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d7a:	7e 26                	jle    c0010da2 <VgaText::clearScreen()+0x4c>
c0010d7c:	31 ff                	xor    edi,edi
c0010d7e:	50                   	push   eax
c0010d7f:	50                   	push   eax
c0010d80:	56                   	push   esi
c0010d81:	57                   	push   edi
c0010d82:	47                   	inc    edi
c0010d83:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d89:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d8f:	6a 20                	push   0x20
c0010d91:	53                   	push   ebx
c0010d92:	e8 27 f8 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d97:	83 c4 20             	add    esp,0x20
c0010d9a:	83 ff 50             	cmp    edi,0x50
c0010d9d:	75 df                	jne    c0010d7e <VgaText::clearScreen()+0x28>
c0010d9f:	46                   	inc    esi
c0010da0:	eb d2                	jmp    c0010d74 <VgaText::clearScreen()+0x1e>
c0010da2:	83 ec 0c             	sub    esp,0xc
c0010da5:	53                   	push   ebx
c0010da6:	e8 d9 fd ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010dab:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	5b                   	pop    ebx
c0010db6:	5e                   	pop    esi
c0010db7:	5f                   	pop    edi
c0010db8:	c3                   	ret    
c0010db9:	90                   	nop

c0010dba <VgaText::putchar(char)>:
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 14             	sub    esp,0x14
c0010dbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dc3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dc7:	3c 5b                	cmp    al,0x5b
c0010dc9:	75 21                	jne    c0010dec <VgaText::putchar(char)+0x32>
c0010dcb:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dd2:	74 28                	je     c0010dfc <VgaText::putchar(char)+0x42>
c0010dd4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ddd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010de7:	e9 e2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dec:	3c 1b                	cmp    al,0x1b
c0010dee:	75 0c                	jne    c0010dfc <VgaText::putchar(char)+0x42>
c0010df0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010df7:	e9 d2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dfc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010e02:	84 c9                	test   cl,cl
c0010e04:	0f 84 ab 00 00 00    	je     c0010eb5 <VgaText::putchar(char)+0xfb>
c0010e0a:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e0d:	80 fa 3e             	cmp    dl,0x3e
c0010e10:	0f 87 82 00 00 00    	ja     c0010e98 <VgaText::putchar(char)+0xde>
c0010e16:	3c 6d                	cmp    al,0x6d
c0010e18:	75 4d                	jne    c0010e67 <VgaText::putchar(char)+0xad>
c0010e1a:	31 f6                	xor    esi,esi
c0010e1c:	31 d2                	xor    edx,edx
c0010e1e:	31 c0                	xor    eax,eax
c0010e20:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e26:	7e 30                	jle    c0010e58 <VgaText::putchar(char)+0x9e>
c0010e28:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e30:	80 fa 3b             	cmp    dl,0x3b
c0010e33:	75 17                	jne    c0010e4c <VgaText::putchar(char)+0x92>
c0010e35:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e39:	50                   	push   eax
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 ee f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e40:	59                   	pop    ecx
c0010e41:	31 d2                	xor    edx,edx
c0010e43:	58                   	pop    eax
c0010e44:	31 c0                	xor    eax,eax
c0010e46:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e4a:	eb 09                	jmp    c0010e55 <VgaText::putchar(char)+0x9b>
c0010e4c:	6b c0 0a             	imul   eax,eax,0xa
c0010e4f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e53:	88 ca                	mov    dl,cl
c0010e55:	46                   	inc    esi
c0010e56:	eb c8                	jmp    c0010e20 <VgaText::putchar(char)+0x66>
c0010e58:	84 d2                	test   dl,dl
c0010e5a:	74 31                	je     c0010e8d <VgaText::putchar(char)+0xd3>
c0010e5c:	50                   	push   eax
c0010e5d:	53                   	push   ebx
c0010e5e:	e8 cb f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e63:	58                   	pop    eax
c0010e64:	5a                   	pop    edx
c0010e65:	eb 26                	jmp    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e67:	3c 4a                	cmp    al,0x4a
c0010e69:	75 22                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e6b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e72:	75 19                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	53                   	push   ebx
c0010e78:	e8 d9 fe ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0010e7d:	83 c4 0c             	add    esp,0xc
c0010e80:	6a 00                	push   0x0
c0010e82:	6a 00                	push   0x0
c0010e84:	53                   	push   ebx
c0010e85:	e8 ac f7 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010e8a:	83 c4 10             	add    esp,0x10
c0010e8d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e96:	eb 36                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010e98:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e9e:	83 fa 0e             	cmp    edx,0xe
c0010ea1:	7f 2b                	jg     c0010ece <VgaText::putchar(char)+0x114>
c0010ea3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ea6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010eac:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010eb3:	eb 19                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010eb5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ebb:	0f be c0             	movsx  eax,al
c0010ebe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ec4:	50                   	push   eax
c0010ec5:	53                   	push   ebx
c0010ec6:	e8 ab fa ff ff       	call   c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	83 c4 14             	add    esp,0x14
c0010ed1:	5b                   	pop    ebx
c0010ed2:	5e                   	pop    esi
c0010ed3:	c3                   	ret    

c0010ed4 <VgaText::puts(char const*)>:
c0010ed4:	53                   	push   ebx
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010edc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010edf:	84 c0                	test   al,al
c0010ee1:	74 12                	je     c0010ef5 <VgaText::puts(char const*)+0x21>
c0010ee3:	43                   	inc    ebx
c0010ee4:	51                   	push   ecx
c0010ee5:	51                   	push   ecx
c0010ee6:	50                   	push   eax
c0010ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eeb:	e8 ca fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	eb e7                	jmp    c0010edc <VgaText::puts(char const*)+0x8>
c0010ef5:	83 c4 08             	add    esp,0x8
c0010ef8:	5b                   	pop    ebx
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putx(unsigned int)>:
c0010efa:	57                   	push   edi
c0010efb:	b9 11 00 00 00       	mov    ecx,0x11
c0010f00:	56                   	push   esi
c0010f01:	be 6e 9b 02 c0       	mov    esi,0xc0029b6e
c0010f06:	53                   	push   ebx
c0010f07:	83 ec 20             	sub    esp,0x20
c0010f0a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f0e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f12:	fc                   	cld    
c0010f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f15:	be 08 00 00 00       	mov    esi,0x8
c0010f1a:	50                   	push   eax
c0010f1b:	50                   	push   eax
c0010f1c:	89 d8                	mov    eax,ebx
c0010f1e:	c1 e3 04             	shl    ebx,0x4
c0010f21:	c1 e8 1c             	shr    eax,0x1c
c0010f24:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f29:	50                   	push   eax
c0010f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f2e:	e8 87 fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	4e                   	dec    esi
c0010f37:	75 e1                	jne    c0010f1a <VgaText::putx(unsigned int)+0x20>
c0010f39:	83 c4 20             	add    esp,0x20
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	c3                   	ret    

c0010f40 <VgaText::VgaText(char const*)>:
c0010f40:	57                   	push   edi
c0010f41:	56                   	push   esi
c0010f42:	53                   	push   ebx
c0010f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f47:	83 ec 08             	sub    esp,0x8
c0010f4a:	6a 00                	push   0x0
c0010f4c:	50                   	push   eax
c0010f4d:	e8 6e 05 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f72:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f80:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f96:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fce:	bb 80 db 02 c0       	mov    ebx,0xc002db80
c0010fd3:	b8 08 00 00 00       	mov    eax,0x8
c0010fd8:	fc                   	cld    
c0010fd9:	89 d7                	mov    edi,edx
c0010fdb:	89 de                	mov    esi,ebx
c0010fdd:	89 c1                	mov    ecx,eax
c0010fdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe5:	05 1e 10 00 00       	add    eax,0x101e
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff1:	50                   	push   eax
c0010ff2:	e8 6c f7 fe ff       	call   c0000763 <strcpy>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffe:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	83 c0 0c             	add    eax,0xc
c001100f:	83 ec 04             	sub    esp,0x4
c0011012:	68 00 0f 00 00       	push   0xf00
c0011017:	6a 00                	push   0x0
c0011019:	50                   	push   eax
c001101a:	e8 a5 f6 fe ff       	call   c00006c4 <memset>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 ec 04             	sub    esp,0x4
c0011025:	6a 00                	push   0x0
c0011027:	6a 07                	push   0x7
c0011029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102d:	e8 b4 f4 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	83 ec 08             	sub    esp,0x8
c0011038:	6a 02                	push   0x2
c001103a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103e:	e8 49 fa ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	83 ec 04             	sub    esp,0x4
c0011049:	6a 00                	push   0x0
c001104b:	6a 00                	push   0x0
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 e0 f5 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 01                	push   0x1
c001105e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011062:	e8 7d f3 ff ff       	call   c00103e4 <VgaText::showCursor(bool)>
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	83 ec 08             	sub    esp,0x8
c001106d:	6a 01                	push   0x1
c001106f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011073:	e8 7c f3 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	83 ec 0c             	sub    esp,0xc
c001107e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011082:	e8 cf fc ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011099:	05 9e 10 00 00       	add    eax,0x109e
c001109e:	83 ec 04             	sub    esp,0x4
c00110a1:	68 96 00 00 00       	push   0x96
c00110a6:	6a 00                	push   0x0
c00110a8:	50                   	push   eax
c00110a9:	e8 16 f6 fe ff       	call   c00006c4 <memset>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b5:	05 34 11 00 00       	add    eax,0x1134
c00110ba:	83 ec 04             	sub    esp,0x4
c00110bd:	68 2c 01 00 00       	push   0x12c
c00110c2:	6a 00                	push   0x0
c00110c4:	50                   	push   eax
c00110c5:	e8 fa f5 fe ff       	call   c00006c4 <memset>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	90                   	nop
c00110ce:	5b                   	pop    ebx
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <VgaText::receiveKey(unsigned char)>:
c00110d2:	55                   	push   ebp
c00110d3:	57                   	push   edi
c00110d4:	56                   	push   esi
c00110d5:	53                   	push   ebx
c00110d6:	83 ec 1c             	sub    esp,0x1c
c00110d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e1:	84 db                	test   bl,bl
c00110e3:	0f 84 c9 00 00 00    	je     c00111b2 <VgaText::receiveKey(unsigned char)+0xe0>
c00110e9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110ef:	80 fb 08             	cmp    bl,0x8
c00110f2:	75 2c                	jne    c0011120 <VgaText::receiveKey(unsigned char)+0x4e>
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	57                   	push   edi
c00110f8:	e8 e4 f5 fe ff       	call   c00006e1 <strlen>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	85 c0                	test   eax,eax
c0011102:	74 41                	je     c0011145 <VgaText::receiveKey(unsigned char)+0x73>
c0011104:	50                   	push   eax
c0011105:	50                   	push   eax
c0011106:	6a 08                	push   0x8
c0011108:	56                   	push   esi
c0011109:	e8 ac fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001110e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011111:	e8 cb f5 fe ff       	call   c00006e1 <strlen>
c0011116:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001111e:	eb 22                	jmp    c0011142 <VgaText::receiveKey(unsigned char)+0x70>
c0011120:	0f be c3             	movsx  eax,bl
c0011123:	52                   	push   edx
c0011124:	52                   	push   edx
c0011125:	50                   	push   eax
c0011126:	56                   	push   esi
c0011127:	e8 8e fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001112c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011130:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011135:	59                   	pop    ecx
c0011136:	5d                   	pop    ebp
c0011137:	8d 44 24 16          	lea    eax,[esp+0x16]
c001113b:	50                   	push   eax
c001113c:	57                   	push   edi
c001113d:	e8 d8 f6 fe ff       	call   c000081a <strcat>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001114c:	75 05                	jne    c0011153 <VgaText::receiveKey(unsigned char)+0x81>
c001114e:	80 fb 0a             	cmp    bl,0xa
c0011151:	75 53                	jne    c00111a6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001115c:	53                   	push   ebx
c001115d:	e8 7f f5 fe ff       	call   c00006e1 <strlen>
c0011162:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011165:	89 c5                	mov    ebp,eax
c0011167:	e8 75 f5 fe ff       	call   c00006e1 <strlen>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011173:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011178:	76 10                	jbe    c001118a <VgaText::receiveKey(unsigned char)+0xb8>
c001117a:	83 ec 0c             	sub    esp,0xc
c001117d:	68 7f 9b 02 c0       	push   0xc0029b7f
c0011182:	e8 12 8d 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	50                   	push   eax
c001118b:	50                   	push   eax
c001118c:	57                   	push   edi
c001118d:	53                   	push   ebx
c001118e:	e8 87 f6 fe ff       	call   c000081a <strcat>
c0011193:	83 c4 0c             	add    esp,0xc
c0011196:	68 96 00 00 00       	push   0x96
c001119b:	6a 00                	push   0x0
c001119d:	57                   	push   edi
c001119e:	e8 21 f5 fe ff       	call   c00006c4 <memset>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	56                   	push   esi
c00111aa:	e8 d5 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	83 c4 1c             	add    esp,0x1c
c00111b5:	5b                   	pop    ebx
c00111b6:	5e                   	pop    esi
c00111b7:	5f                   	pop    edi
c00111b8:	5d                   	pop    ebp
c00111b9:	c3                   	ret    

c00111ba <VgaText::write(unsigned long long, void*, int*)>:
c00111ba:	55                   	push   ebp
c00111bb:	57                   	push   edi
c00111bc:	56                   	push   esi
c00111bd:	53                   	push   ebx
c00111be:	83 ec 0c             	sub    esp,0xc
c00111c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111c5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111cd:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111d4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111d7:	39 eb                	cmp    ebx,ebp
c00111d9:	74 13                	je     c00111ee <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111db:	43                   	inc    ebx
c00111dc:	50                   	push   eax
c00111dd:	50                   	push   eax
c00111de:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111e2:	50                   	push   eax
c00111e3:	56                   	push   esi
c00111e4:	e8 d1 fb ff ff       	call   c0010dba <VgaText::putchar(char)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	eb e9                	jmp    c00111d7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111f8:	56                   	push   esi
c00111f9:	e8 86 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011202:	89 38                	mov    DWORD PTR [eax],edi
c0011204:	83 c4 1c             	add    esp,0x1c
c0011207:	31 c0                	xor    eax,eax
c0011209:	5b                   	pop    ebx
c001120a:	5e                   	pop    esi
c001120b:	5f                   	pop    edi
c001120c:	5d                   	pop    ebp
c001120d:	c3                   	ret    

c001120e <newTerminal(char*)>:
c001120e:	83 ec 28             	sub    esp,0x28
c0011211:	68 60 12 00 00       	push   0x1260
c0011216:	e8 09 e4 ff ff       	call   c000f624 <malloc>
c001121b:	5a                   	pop    edx
c001121c:	59                   	pop    ecx
c001121d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011221:	50                   	push   eax
c0011222:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011226:	e8 15 fd ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001122b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001122f:	83 c4 2c             	add    esp,0x2c
c0011232:	c3                   	ret    
c0011233:	90                   	nop

c0011234 <TSS::TSS()>:
c0011234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123f:	90                   	nop
c0011240:	c3                   	ret    
c0011241:	90                   	nop

c0011242 <TSS::setESP(unsigned long)>:
c0011242:	55                   	push   ebp
c0011243:	89 e5                	mov    ebp,esp
c0011245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001124b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001124e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011251:	90                   	nop
c0011252:	5d                   	pop    ebp
c0011253:	c3                   	ret    

c0011254 <TSS::flush()>:
c0011254:	55                   	push   ebp
c0011255:	89 e5                	mov    ebp,esp
c0011257:	83 ec 10             	sub    esp,0x10
c001125a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125d:	8b 00                	mov    eax,DWORD PTR [eax]
c001125f:	83 c8 03             	or     eax,0x3
c0011262:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011266:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001126a:	66 89 d0             	mov    ax,dx
c001126d:	0f 00 d8             	ltr    ax
c0011270:	90                   	nop
c0011271:	c9                   	leave  
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <TSS::setup(unsigned long, unsigned long)>:
c0011274:	55                   	push   ebp
c0011275:	89 e5                	mov    ebp,esp
c0011277:	83 ec 18             	sub    esp,0x18
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	6a 68                	push   0x68
c001127f:	e8 a0 e3 ff ff       	call   c000f624 <malloc>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	89 c2                	mov    edx,eax
c0011289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011295:	83 ec 04             	sub    esp,0x4
c0011298:	6a 68                	push   0x68
c001129a:	6a 00                	push   0x0
c001129c:	50                   	push   eax
c001129d:	e8 22 f4 fe ff       	call   c00006c4 <memset>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ab:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112db:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ff:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001131a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001131d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011323:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011339:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133c:	0f 20 da             	mov    edx,cr3
c001133f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011342:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011345:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001134b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	50                   	push   eax
c0011352:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011355:	50                   	push   eax
c0011356:	e8 a7 da ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	6a 68                	push   0x68
c0011363:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011366:	50                   	push   eax
c0011367:	e8 b2 da ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011373:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011376:	83 e0 0f             	and    eax,0xf
c0011379:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001137c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001137f:	83 c8 40             	or     eax,0x40
c0011382:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011385:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001138a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011390:	05 78 01 00 00       	add    eax,0x178
c0011395:	83 ec 04             	sub    esp,0x4
c0011398:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001139b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001139e:	50                   	push   eax
c001139f:	e8 ae da ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	89 c2                	mov    edx,eax
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	89 10                	mov    DWORD PTR [eax],edx
c00113ae:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00113b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113b9:	05 78 01 00 00       	add    eax,0x178
c00113be:	83 ec 0c             	sub    esp,0xc
c00113c1:	50                   	push   eax
c00113c2:	e8 cf da ff ff       	call   c000ee96 <GDT::flush()>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cf:	83 ec 08             	sub    esp,0x8
c00113d2:	50                   	push   eax
c00113d3:	68 e8 9b 02 c0       	push   0xc0029be8
c00113d8:	e8 16 15 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e5:	c9                   	leave  
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113f8:	75 08                	jne    c0011402 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011400:	eb 38                	jmp    c001143a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011402:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011407:	75 17                	jne    c0011420 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001140e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011411:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011417:	8b 10                	mov    edx,DWORD PTR [eax]
c0011419:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001141d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011420:	89 c1                	mov    ecx,eax
c0011422:	83 e1 fd             	and    ecx,0xfffffffd
c0011425:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001142b:	74 cd                	je     c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001142d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011432:	83 e0 ef             	and    eax,0xffffffef
c0011435:	83 f8 08             	cmp    eax,0x8
c0011438:	76 c0                	jbe    c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001143a:	31 c0                	xor    eax,eax
c001143c:	c3                   	ret    
c001143d:	90                   	nop

c001143e <ReservedFilename::isAtty()>:
c001143e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011442:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011445:	31 c0                	xor    eax,eax
c0011447:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001144d:	74 09                	je     c0011458 <ReservedFilename::isAtty()+0x1a>
c001144f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011455:	0f 94 c0             	sete   al
c0011458:	c3                   	ret    
c0011459:	90                   	nop

c001145a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001145a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011469:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001146e:	75 08                	jne    c0011478 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011470:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011476:	eb 3d                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011478:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001147d:	75 17                	jne    c0011496 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001147f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011484:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011487:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001148d:	8b 10                	mov    edx,DWORD PTR [eax]
c001148f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011493:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011496:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001149b:	75 04                	jne    c00114a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001149d:	89 0a                	mov    DWORD PTR [edx],ecx
c001149f:	eb 14                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00114a1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00114a6:	74 c8                	je     c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114ad:	83 e0 ef             	and    eax,0xffffffef
c00114b0:	83 f8 08             	cmp    eax,0x8
c00114b3:	76 bb                	jbe    c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114b5:	31 c0                	xor    eax,eax
c00114b7:	c3                   	ret    

c00114b8 <UnixFile::getFileDescriptor()>:
c00114b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	c3                   	ret    

c00114c0 <UnixFile::UnixFile(int)>:
c00114c0:	53                   	push   ebx
c00114c1:	83 ec 28             	sub    esp,0x28
c00114c4:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00114c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114cd:	89 10                	mov    DWORD PTR [eax],edx
c00114cf:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114d7:	0f 8f 8c 01 00 00    	jg     c0011669 <UnixFile::UnixFile(int)+0x1a9>
c00114dd:	a1 60 ca 02 c0       	mov    eax,ds:0xc002ca60
c00114e2:	8d 50 01             	lea    edx,[eax+0x1]
c00114e5:	89 15 60 ca 02 c0    	mov    DWORD PTR ds:0xc002ca60,edx
c00114eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114f2:	83 ec 08             	sub    esp,0x8
c00114f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114f9:	68 38 dc 02 c0       	push   0xc002dc38
c00114fe:	e8 bd 69 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	a0 34 dc 02 c0       	mov    al,ds:0xc002dc34
c001150b:	83 f0 01             	xor    eax,0x1
c001150e:	84 c0                	test   al,al
c0011510:	0f 84 54 01 00 00    	je     c001166a <UnixFile::UnixFile(int)+0x1aa>
c0011516:	c6 05 34 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc34,0x1
c001151d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001152c:	e8 f3 e0 ff ff       	call   c000f624 <malloc>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	89 c3                	mov    ebx,eax
c0011536:	83 ec 08             	sub    esp,0x8
c0011539:	68 03 ff ff 0f       	push   0xfffff03
c001153e:	53                   	push   ebx
c001153f:	e8 2c 01 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	89 1d 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,ebx
c001154d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011555:	83 ec 0c             	sub    esp,0xc
c0011558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001155c:	e8 c3 e0 ff ff       	call   c000f624 <malloc>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	89 c3                	mov    ebx,eax
c0011566:	83 ec 08             	sub    esp,0x8
c0011569:	68 01 ff ff 0f       	push   0xfffff01
c001156e:	53                   	push   ebx
c001156f:	e8 fc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	89 1d 30 dc 02 c0    	mov    DWORD PTR ds:0xc002dc30,ebx
c001157d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011585:	83 ec 0c             	sub    esp,0xc
c0011588:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001158c:	e8 93 e0 ff ff       	call   c000f624 <malloc>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	89 c3                	mov    ebx,eax
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	68 00 ff ff 0f       	push   0xfffff00
c001159e:	53                   	push   ebx
c001159f:	e8 cc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	89 1d 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,ebx
c00115ad:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115bc:	e8 63 e0 ff ff       	call   c000f624 <malloc>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	89 c3                	mov    ebx,eax
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	68 02 ff ff 0f       	push   0xfffff02
c00115ce:	53                   	push   ebx
c00115cf:	e8 9c 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	89 1d 28 dc 02 c0    	mov    DWORD PTR ds:0xc002dc28,ebx
c00115dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115e5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115ea:	7f 7e                	jg     c001166a <UnixFile::UnixFile(int)+0x1aa>
c00115ec:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115fb:	e8 24 e0 ff ff       	call   c000f624 <malloc>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	89 c3                	mov    ebx,eax
c0011605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011609:	05 10 ff ff 0f       	add    eax,0xfffff10
c001160e:	83 ec 08             	sub    esp,0x8
c0011611:	50                   	push   eax
c0011612:	53                   	push   ebx
c0011613:	e8 58 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001161f:	89 1c 85 00 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2400],ebx
c0011626:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001162e:	83 ec 0c             	sub    esp,0xc
c0011631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011635:	e8 ea df ff ff       	call   c000f624 <malloc>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	89 c3                	mov    ebx,eax
c001163f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011643:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	50                   	push   eax
c001164c:	53                   	push   ebx
c001164d:	e8 1e 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011659:	89 1c 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],ebx
c0011660:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011664:	e9 7c ff ff ff       	jmp    c00115e5 <UnixFile::UnixFile(int)+0x125>
c0011669:	90                   	nop
c001166a:	83 c4 28             	add    esp,0x28
c001166d:	5b                   	pop    ebx
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::ReservedFilename(int)>:
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011677:	83 ec 08             	sub    esp,0x8
c001167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167e:	50                   	push   eax
c001167f:	e8 3c fe ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c001168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011690:	89 10                	mov    DWORD PTR [eax],edx
c0011692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001169a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001169d:	90                   	nop
c001169e:	83 c4 0c             	add    esp,0xc
c00116a1:	c3                   	ret    

c00116a2 <UnixFile::~UnixFile()>:
c00116a2:	83 ec 1c             	sub    esp,0x1c
c00116a5:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00116aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ae:	89 10                	mov    DWORD PTR [eax],edx
c00116b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116b7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116bc:	7f 73                	jg     c0011731 <UnixFile::~UnixFile()+0x8f>
c00116be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116c6:	83 ec 0c             	sub    esp,0xc
c00116c9:	68 38 dc 02 c0       	push   0xc002dc38
c00116ce:	e8 c1 68 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116da:	83 ec 0c             	sub    esp,0xc
c00116dd:	68 38 dc 02 c0       	push   0xc002dc38
c00116e2:	e8 b5 68 01 00       	call   c0027f9c <LinkedList<UnixFile>::removeFirst()>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116ee:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116f2:	74 40                	je     c0011734 <UnixFile::~UnixFile()+0x92>
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116fb:	68 38 dc 02 c0       	push   0xc002dc38
c0011700:	e8 bb 67 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170c:	8d 50 01             	lea    edx,[eax+0x1]
c001170f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011713:	3d 88 13 00 00       	cmp    eax,0x1388
c0011718:	0f 94 c0             	sete   al
c001171b:	84 c0                	test   al,al
c001171d:	74 a7                	je     c00116c6 <UnixFile::~UnixFile()+0x24>
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	68 ac 9c 02 c0       	push   0xc0029cac
c0011727:	e8 6d 87 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	eb 95                	jmp    c00116c6 <UnixFile::~UnixFile()+0x24>
c0011731:	90                   	nop
c0011732:	eb 01                	jmp    c0011735 <UnixFile::~UnixFile()+0x93>
c0011734:	90                   	nop
c0011735:	90                   	nop
c0011736:	83 c4 1c             	add    esp,0x1c
c0011739:	c3                   	ret    

c001173a <UnixFile::~UnixFile()>:
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	83 ec 0c             	sub    esp,0xc
c0011740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011744:	e8 59 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	6a 0c                	push   0xc
c0011751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011755:	e8 b9 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	83 c4 0c             	add    esp,0xc
c0011760:	c3                   	ret    
c0011761:	90                   	nop

c0011762 <ReservedFilename::~ReservedFilename()>:
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 10                	mov    DWORD PTR [eax],edx
c0011770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	50                   	push   eax
c0011778:	e8 25 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	90                   	nop
c0011781:	83 c4 0c             	add    esp,0xc
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <ReservedFilename::~ReservedFilename()>:
c0011786:	83 ec 0c             	sub    esp,0xc
c0011789:	83 ec 0c             	sub    esp,0xc
c001178c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011790:	e8 cd ff ff ff       	call   c0011762 <ReservedFilename::~ReservedFilename()>
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	6a 0c                	push   0xc
c001179d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a1:	e8 6d 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	83 c4 0c             	add    esp,0xc
c00117ac:	c3                   	ret    

c00117ad <getFromFileDescriptor(int)>:
c00117ad:	53                   	push   ebx
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117bb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117c1:	7f 2c                	jg     c00117ef <getFromFileDescriptor(int)+0x42>
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	68 38 dc 02 c0       	push   0xc002dc38
c00117cb:	e8 c4 67 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	85 c0                	test   eax,eax
c00117d5:	75 04                	jne    c00117db <getFromFileDescriptor(int)+0x2e>
c00117d7:	31 c0                	xor    eax,eax
c00117d9:	eb 6e                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c00117db:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117de:	74 69                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117e0:	52                   	push   edx
c00117e1:	52                   	push   edx
c00117e2:	50                   	push   eax
c00117e3:	68 38 dc 02 c0       	push   0xc002dc38
c00117e8:	e8 51 68 01 00       	call   c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117ed:	eb e1                	jmp    c00117d0 <getFromFileDescriptor(int)+0x23>
c00117ef:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c00117f4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117fa:	74 4d                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117fc:	a1 30 dc 02 c0       	mov    eax,ds:0xc002dc30
c0011801:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011807:	74 40                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011809:	a1 28 dc 02 c0       	mov    eax,ds:0xc002dc28
c001180e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011814:	74 33                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011816:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c001181b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011821:	74 26                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011823:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011829:	83 f8 08             	cmp    eax,0x8
c001182c:	77 09                	ja     c0011837 <getFromFileDescriptor(int)+0x8a>
c001182e:	8b 04 85 00 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2400]
c0011835:	eb 12                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c0011837:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001183d:	83 fb 08             	cmp    ebx,0x8
c0011840:	77 95                	ja     c00117d7 <getFromFileDescriptor(int)+0x2a>
c0011842:	8b 04 9d c0 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2440]
c0011849:	83 c4 08             	add    esp,0x8
c001184c:	5b                   	pop    ebx
c001184d:	c3                   	ret    

c001184e <__static_initialization_and_destruction_0(int, int)>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011856:	75 34                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011858:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011860:	75 2a                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	68 38 dc 02 c0       	push   0xc002dc38
c001186a:	e8 f9 65 01 00       	call   c0027e68 <LinkedList<UnixFile>::LinkedList()>
c001186f:	83 c4 10             	add    esp,0x10
c0011872:	83 ec 04             	sub    esp,0x4
c0011875:	68 d8 c9 02 c0       	push   0xc002c9d8
c001187a:	68 38 dc 02 c0       	push   0xc002dc38
c001187f:	68 66 7e 02 c0       	push   0xc0027e66
c0011884:	e8 04 0f 00 00       	call   c001278d <__cxa_atexit>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	90                   	nop
c001188d:	83 c4 0c             	add    esp,0xc
c0011890:	c3                   	ret    

c0011891 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011891:	83 ec 0c             	sub    esp,0xc
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 ff ff 00 00       	push   0xffff
c001189c:	6a 01                	push   0x1
c001189e:	e8 ab ff ff ff       	call   c001184e <__static_initialization_and_destruction_0(int, int)>
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	83 c4 0c             	add    esp,0xc
c00118a9:	c3                   	ret    

c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118aa:	53                   	push   ebx
c00118ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118b3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118b9:	89 c8                	mov    eax,ecx
c00118bb:	d1 e8                	shr    eax,1
c00118bd:	03 05 68 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca68
c00118c3:	83 e1 01             	and    ecx,0x1
c00118c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00118c8:	75 09                	jne    c00118d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118ca:	83 e2 f0             	and    edx,0xfffffff0
c00118cd:	09 da                	or     edx,ebx
c00118cf:	88 10                	mov    BYTE PTR [eax],dl
c00118d1:	5b                   	pop    ebx
c00118d2:	c3                   	ret    
c00118d3:	c1 e3 04             	shl    ebx,0x4
c00118d6:	83 e2 0f             	and    edx,0xf
c00118d9:	09 da                	or     edx,ebx
c00118db:	88 10                	mov    BYTE PTR [eax],dl
c00118dd:	5b                   	pop    ebx
c00118de:	c3                   	ret    

c00118df <Virt::getPageState(unsigned long)>:
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	8b 0d 68 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca68
c00118e9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118ef:	89 d0                	mov    eax,edx
c00118f1:	d1 e8                	shr    eax,1
c00118f3:	83 e2 01             	and    edx,0x1
c00118f6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118f9:	75 04                	jne    c00118ff <Virt::getPageState(unsigned long)+0x20>
c00118fb:	83 e0 0f             	and    eax,0xf
c00118fe:	c3                   	ret    
c00118ff:	c0 e8 04             	shr    al,0x4
c0011902:	c3                   	ret    

c0011903 <Virt::allocateKernelVirtualPages(int)>:
c0011903:	55                   	push   ebp
c0011904:	31 ed                	xor    ebp,ebp
c0011906:	57                   	push   edi
c0011907:	56                   	push   esi
c0011908:	53                   	push   ebx
c0011909:	31 db                	xor    ebx,ebx
c001190b:	83 ec 1c             	sub    esp,0x1c
c001190e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011912:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c0011918:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001191d:	57                   	push   edi
c001191e:	e8 bc ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011923:	5a                   	pop    edx
c0011924:	84 c0                	test   al,al
c0011926:	75 3a                	jne    c0011962 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011928:	85 db                	test   ebx,ebx
c001192a:	75 02                	jne    c001192e <Virt::allocateKernelVirtualPages(int)+0x2b>
c001192c:	89 fd                	mov    ebp,edi
c001192e:	43                   	inc    ebx
c001192f:	39 f3                	cmp    ebx,esi
c0011931:	74 5a                	je     c001198d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011933:	47                   	inc    edi
c0011934:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001193a:	76 31                	jbe    c001196d <Virt::allocateKernelVirtualPages(int)+0x6a>
c001193c:	c7 05 64 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca64,0xc8000
c0011946:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001194b:	75 28                	jne    c0011975 <Virt::allocateKernelVirtualPages(int)+0x72>
c001194d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011952:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011957:	57                   	push   edi
c0011958:	e8 82 ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c001195d:	5a                   	pop    edx
c001195e:	84 c0                	test   al,al
c0011960:	74 c6                	je     c0011928 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011962:	31 db                	xor    ebx,ebx
c0011964:	47                   	inc    edi
c0011965:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001196b:	77 cf                	ja     c001193c <Virt::allocateKernelVirtualPages(int)+0x39>
c001196d:	89 3d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edi
c0011973:	eb a8                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	68 04 9d 02 c0       	push   0xc0029d04
c001197d:	e8 17 85 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011982:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	eb 90                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001198d:	89 2d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,ebp
c0011993:	4b                   	dec    ebx
c0011994:	74 5f                	je     c00119f5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011996:	85 f6                	test   esi,esi
c0011998:	74 3d                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001199a:	89 e8                	mov    eax,ebp
c001199c:	31 db                	xor    ebx,ebx
c001199e:	8d 7e ff             	lea    edi,[esi-0x1]
c00119a1:	eb 14                	jmp    c00119b7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00119a3:	6a 01                	push   0x1
c00119a5:	43                   	inc    ebx
c00119a6:	50                   	push   eax
c00119a7:	e8 fe fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119ac:	58                   	pop    eax
c00119ad:	39 f3                	cmp    ebx,esi
c00119af:	5a                   	pop    edx
c00119b0:	74 25                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119b2:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c00119b7:	8d 50 01             	lea    edx,[eax+0x1]
c00119ba:	85 db                	test   ebx,ebx
c00119bc:	89 15 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edx
c00119c2:	74 20                	je     c00119e4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119c4:	39 df                	cmp    edi,ebx
c00119c6:	75 db                	jne    c00119a3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119c8:	6a 03                	push   0x3
c00119ca:	43                   	inc    ebx
c00119cb:	50                   	push   eax
c00119cc:	e8 d9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d1:	59                   	pop    ecx
c00119d2:	39 f3                	cmp    ebx,esi
c00119d4:	58                   	pop    eax
c00119d5:	75 db                	jne    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d7:	83 c4 1c             	add    esp,0x1c
c00119da:	89 e8                	mov    eax,ebp
c00119dc:	5b                   	pop    ebx
c00119dd:	c1 e0 0c             	shl    eax,0xc
c00119e0:	5e                   	pop    esi
c00119e1:	5f                   	pop    edi
c00119e2:	5d                   	pop    ebp
c00119e3:	c3                   	ret    
c00119e4:	6a 02                	push   0x2
c00119e6:	bb 01 00 00 00       	mov    ebx,0x1
c00119eb:	50                   	push   eax
c00119ec:	e8 b9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119f1:	58                   	pop    eax
c00119f2:	5a                   	pop    edx
c00119f3:	eb bd                	jmp    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119f5:	6a 04                	push   0x4
c00119f7:	8d 45 01             	lea    eax,[ebp+0x1]
c00119fa:	55                   	push   ebp
c00119fb:	a3 64 ca 02 c0       	mov    ds:0xc002ca64,eax
c0011a00:	e8 a5 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a05:	59                   	pop    ecx
c0011a06:	89 e8                	mov    eax,ebp
c0011a08:	5b                   	pop    ebx
c0011a09:	c1 e0 0c             	shl    eax,0xc
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <Virt::virtualMemorySetup()>:
c0011a14:	53                   	push   ebx
c0011a15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	6a 0f                	push   0xf
c0011a1f:	53                   	push   ebx
c0011a20:	43                   	inc    ebx
c0011a21:	e8 84 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a26:	59                   	pop    ecx
c0011a27:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a2d:	58                   	pop    eax
c0011a2e:	75 ed                	jne    c0011a1d <Virt::virtualMemorySetup()+0x9>
c0011a30:	83 ec 08             	sub    esp,0x8
c0011a33:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a38:	68 00 00 00 c8       	push   0xc8000000
c0011a3d:	68 8b 9e 02 c0       	push   0xc0029e8b
c0011a42:	e8 ac 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a47:	58                   	pop    eax
c0011a48:	5a                   	pop    edx
c0011a49:	68 00 f0 ff ef       	push   0xeffff000
c0011a4e:	68 9f 9e 02 c0       	push   0xc0029e9f
c0011a53:	e8 9b 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	83 ec 08             	sub    esp,0x8
c0011a5e:	6a 00                	push   0x0
c0011a60:	53                   	push   ebx
c0011a61:	43                   	inc    ebx
c0011a62:	e8 43 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a70:	75 e9                	jne    c0011a5b <Virt::virtualMemorySetup()+0x47>
c0011a72:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a77:	83 ec 08             	sub    esp,0x8
c0011a7a:	6a 0f                	push   0xf
c0011a7c:	53                   	push   ebx
c0011a7d:	43                   	inc    ebx
c0011a7e:	e8 27 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a8c:	75 e9                	jne    c0011a77 <Virt::virtualMemorySetup()+0x63>
c0011a8e:	83 c4 08             	add    esp,0x8
c0011a91:	5b                   	pop    ebx
c0011a92:	c3                   	ret    

c0011a93 <Virt::getAKernelVAS()>:
c0011a93:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c0011a98:	c3                   	ret    

c0011a99 <Virt::setupPageSwapping(int)>:
c0011a99:	57                   	push   edi
c0011a9a:	56                   	push   esi
c0011a9b:	53                   	push   ebx
c0011a9c:	83 ec 1c             	sub    esp,0x1c
c0011a9f:	68 14 01 00 00       	push   0x114
c0011aa4:	e8 7b db ff ff       	call   c000f624 <malloc>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	89 c6                	mov    esi,eax
c0011aae:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c0011ab4:	68 b3 9e 02 c0       	push   0xc0029eb3
c0011ab9:	50                   	push   eax
c0011aba:	e8 8d 13 00 00       	call   c0012e4c <File::File(char const*, Process*)>
c0011abf:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ac2:	e8 61 15 00 00       	call   c0013028 <File::unlink()>
c0011ac7:	58                   	pop    eax
c0011ac8:	5a                   	pop    edx
c0011ac9:	6a 12                	push   0x12
c0011acb:	56                   	push   esi
c0011acc:	e8 df 13 00 00       	call   c0012eb0 <File::open(FileOpenMode)>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	85 c0                	test   eax,eax
c0011ad6:	0f 85 ca 00 00 00    	jne    c0011ba6 <Virt::setupPageSwapping(int)+0x10d>
c0011adc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ae0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ae8:	c1 e3 08             	shl    ebx,0x8
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	68 00 00 01 00       	push   0x10000
c0011af3:	e8 2c db ff ff       	call   c000f624 <malloc>
c0011af8:	83 c4 0c             	add    esp,0xc
c0011afb:	89 c7                	mov    edi,eax
c0011afd:	68 00 00 01 00       	push   0x10000
c0011b02:	6a 00                	push   0x0
c0011b04:	50                   	push   eax
c0011b05:	e8 ba eb fe ff       	call   c00006c4 <memset>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 db                	test   ebx,ebx
c0011b0f:	79 03                	jns    c0011b14 <Virt::setupPageSwapping(int)+0x7b>
c0011b11:	83 c3 0f             	add    ebx,0xf
c0011b14:	c1 fb 04             	sar    ebx,0x4
c0011b17:	4b                   	dec    ebx
c0011b18:	83 fb ff             	cmp    ebx,0xffffffff
c0011b1b:	74 4b                	je     c0011b68 <Virt::setupPageSwapping(int)+0xcf>
c0011b1d:	83 ec 0c             	sub    esp,0xc
c0011b20:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b22:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b26:	52                   	push   edx
c0011b27:	57                   	push   edi
c0011b28:	6a 00                	push   0x0
c0011b2a:	68 00 00 01 00       	push   0x10000
c0011b2f:	56                   	push   esi
c0011b30:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b33:	83 c4 20             	add    esp,0x20
c0011b36:	85 c0                	test   eax,eax
c0011b38:	75 59                	jne    c0011b93 <Virt::setupPageSwapping(int)+0xfa>
c0011b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b3e:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b43:	74 d2                	je     c0011b17 <Virt::setupPageSwapping(int)+0x7e>
c0011b45:	83 ec 08             	sub    esp,0x8
c0011b48:	4b                   	dec    ebx
c0011b49:	50                   	push   eax
c0011b4a:	68 06 9f 02 c0       	push   0xc0029f06
c0011b4f:	e8 9f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011b54:	c7 04 24 0f 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f0f
c0011b5b:	e8 39 83 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	83 fb ff             	cmp    ebx,0xffffffff
c0011b66:	75 b5                	jne    c0011b1d <Virt::setupPageSwapping(int)+0x84>
c0011b68:	83 ec 0c             	sub    esp,0xc
c0011b6b:	56                   	push   esi
c0011b6c:	e8 9d 13 00 00       	call   c0012f0e <File::close()>
c0011b71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b74:	e8 cb da ff ff       	call   c000f644 <rfree>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	85 f6                	test   esi,esi
c0011b7e:	74 0c                	je     c0011b8c <Virt::setupPageSwapping(int)+0xf3>
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b85:	56                   	push   esi
c0011b86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	5b                   	pop    ebx
c0011b90:	5e                   	pop    esi
c0011b91:	5f                   	pop    edi
c0011b92:	c3                   	ret    
c0011b93:	83 ec 08             	sub    esp,0x8
c0011b96:	50                   	push   eax
c0011b97:	68 ee 9e 02 c0       	push   0xc0029eee
c0011b9c:	e8 52 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	eb 94                	jmp    c0011b3a <Virt::setupPageSwapping(int)+0xa1>
c0011ba6:	83 ec 08             	sub    esp,0x8
c0011ba9:	50                   	push   eax
c0011baa:	68 ca 9e 02 c0       	push   0xc0029eca
c0011baf:	e8 3f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011bb4:	c7 04 24 d3 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed3
c0011bbb:	e8 d9 82 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	e9 14 ff ff ff       	jmp    c0011adc <Virt::setupPageSwapping(int)+0x43>

c0011bc8 <VAS::VAS()>:
c0011bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd7:	a3 44 dc 02 c0       	mov    ds:0xc002dc44,eax
c0011bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be0:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be8:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bef:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bf6:	90                   	nop
c0011bf7:	c3                   	ret    

c0011bf8 <VAS::VAS(VAS*)>:
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	68 24 9d 02 c0       	push   0xc0029d24
c0011c0e:	e8 86 82 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	90                   	nop
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	c3                   	ret    
c0011c1b:	90                   	nop

c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c20:	89 c2                	mov    edx,eax
c0011c22:	c1 e8 0a             	shr    eax,0xa
c0011c25:	c1 ea 16             	shr    edx,0x16
c0011c28:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c2d:	19 c9                	sbb    ecx,ecx
c0011c2f:	c1 e2 0c             	shl    edx,0xc
c0011c32:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c38:	25 fc 0f 00 00       	and    eax,0xffc
c0011c3d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c44:	01 d0                	add    eax,edx
c0011c46:	c3                   	ret    
c0011c47:	90                   	nop

c0011c48 <VAS::getPageTableEntry(unsigned long)>:
c0011c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c4c:	89 ca                	mov    edx,ecx
c0011c4e:	c1 e9 0a             	shr    ecx,0xa
c0011c51:	c1 ea 16             	shr    edx,0x16
c0011c54:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c5a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c60:	c1 e0 0c             	shl    eax,0xc
c0011c63:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c66:	c3                   	ret    

c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c67:	57                   	push   edi
c0011c68:	56                   	push   esi
c0011c69:	be 01 00 00 00       	mov    esi,0x1
c0011c6e:	53                   	push   ebx
c0011c6f:	83 ec 10             	sub    esp,0x10
c0011c72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c76:	c1 eb 0c             	shr    ebx,0xc
c0011c79:	eb 3f                	jmp    c0011cba <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c7b:	e8 13 fe ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011c80:	83 ec 08             	sub    esp,0x8
c0011c83:	57                   	push   edi
c0011c84:	50                   	push   eax
c0011c85:	e8 be ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c93:	f6 c4 04             	test   ah,0x4
c0011c96:	75 5f                	jne    c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c98:	80 fa 04             	cmp    dl,0x4
c0011c9b:	74 78                	je     c0011d15 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c9d:	80 fa 02             	cmp    dl,0x2
c0011ca0:	0f 84 88 00 00 00    	je     c0011d2e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ca6:	80 fa 03             	cmp    dl,0x3
c0011ca9:	0f 84 ad 00 00 00    	je     c0011d5c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011caf:	fe ca                	dec    dl
c0011cb1:	0f 84 92 00 00 00    	je     c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cb7:	43                   	inc    ebx
c0011cb8:	31 f6                	xor    esi,esi
c0011cba:	53                   	push   ebx
c0011cbb:	e8 1f fc ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011cc0:	5f                   	pop    edi
c0011cc1:	89 df                	mov    edi,ebx
c0011cc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cc7:	c1 e7 0c             	shl    edi,0xc
c0011cca:	84 c0                	test   al,al
c0011ccc:	75 ad                	jne    c0011c7b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 15 9f 02 c0       	push   0xc0029f15
c0011cd6:	e8 be 81 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011cdb:	e8 b3 fd ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011ce0:	5a                   	pop    edx
c0011ce1:	59                   	pop    ecx
c0011ce2:	57                   	push   edi
c0011ce3:	50                   	push   eax
c0011ce4:	e8 5f ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf2:	f6 c4 04             	test   ah,0x4
c0011cf5:	74 c0                	je     c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cf7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	50                   	push   eax
c0011d04:	e8 2e df ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d10:	80 fa 04             	cmp    dl,0x4
c0011d13:	75 88                	jne    c0011c9d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d15:	89 f0                	mov    eax,esi
c0011d17:	84 c0                	test   al,al
c0011d19:	75 47                	jne    c0011d62 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d1b:	c7 44 24 20 48 9d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029d48
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	e9 6b 81 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c0011d2e:	89 f0                	mov    eax,esi
c0011d30:	84 c0                	test   al,al
c0011d32:	75 15                	jne    c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d34:	83 ec 0c             	sub    esp,0xc
c0011d37:	68 31 9f 02 c0       	push   0xc0029f31
c0011d3c:	e8 58 81 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	e9 6e ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	e8 56 fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	e9 5b ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d5c:	89 f0                	mov    eax,esi
c0011d5e:	84 c0                	test   al,al
c0011d60:	75 15                	jne    c0011d77 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	6a 00                	push   0x0
c0011d67:	53                   	push   ebx
c0011d68:	e8 3d fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	5f                   	pop    edi
c0011d76:	c3                   	ret    
c0011d77:	c7 44 24 20 4d 9f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029f4d
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	5b                   	pop    ebx
c0011d83:	5e                   	pop    esi
c0011d84:	5f                   	pop    edi
c0011d85:	e9 0f 81 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>

c0011d8a <VAS::freeAllocatedPages(unsigned long)>:
c0011d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d92:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d96:	74 09                	je     c0011da1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d9c:	e9 c6 fe ff ff       	jmp    c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011da1:	c7 44 24 04 6c 9d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029d6c
c0011da9:	e9 45 0b 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>

c0011dae <VAS::virtualToPhysical(unsigned long)>:
c0011dae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db6:	e8 8d fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011dbb:	5a                   	pop    edx
c0011dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbe:	59                   	pop    ecx
c0011dbf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc4:	c3                   	ret    
c0011dc5:	90                   	nop

c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dc6:	55                   	push   ebp
c0011dc7:	57                   	push   edi
c0011dc8:	56                   	push   esi
c0011dc9:	53                   	push   ebx
c0011dca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dce:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dd6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dda:	85 db                	test   ebx,ebx
c0011ddc:	7e 22                	jle    c0011e00 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dde:	c1 e3 0c             	shl    ebx,0xc
c0011de1:	01 f3                	add    ebx,esi
c0011de3:	56                   	push   esi
c0011de4:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dea:	55                   	push   ebp
c0011deb:	e8 58 fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011df0:	5a                   	pop    edx
c0011df1:	59                   	pop    ecx
c0011df2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011df4:	21 f9                	and    ecx,edi
c0011df6:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011dfa:	39 f3                	cmp    ebx,esi
c0011dfc:	89 08                	mov    DWORD PTR [eax],ecx
c0011dfe:	75 e3                	jne    c0011de3 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	5d                   	pop    ebp
c0011e04:	c3                   	ret    
c0011e05:	90                   	nop

c0011e06 <VAS::setToWriteCombining(unsigned long, int)>:
c0011e06:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0011e0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e11:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e18:	75 01                	jne    c0011e1b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e1a:	c3                   	ret    
c0011e1b:	68 80 00 00 00       	push   0x80
c0011e20:	6a ff                	push   0xffffffff
c0011e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2e:	e8 93 ff ff ff       	call   c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e33:	83 c4 14             	add    esp,0x14
c0011e36:	c3                   	ret    
c0011e37:	90                   	nop

c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e38:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e41:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e48:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e4b:	19 c0                	sbb    eax,eax
c0011e4d:	83 ca 03             	or     edx,0x3
c0011e50:	83 e0 fc             	and    eax,0xfffffffc
c0011e53:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e5a:	0f 20 d8             	mov    eax,cr3
c0011e5d:	0f 22 d8             	mov    cr3,eax
c0011e60:	c3                   	ret    
c0011e61:	90                   	nop

c0011e62 <VAS::~VAS()>:
c0011e62:	83 ec 2c             	sub    esp,0x2c
c0011e65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6d:	e8 78 b6 00 00       	call   c001d4ea <lockScheduler()>
c0011e72:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e7c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e82:	83 ec 04             	sub    esp,0x4
c0011e85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e89:	6a 01                	push   0x1
c0011e8b:	50                   	push   eax
c0011e8c:	e8 a7 ff ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e9c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011ea4:	0f 8f d7 00 00 00    	jg     c0011f81 <VAS::~VAS()+0x11f>
c0011eaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb5:	c1 e2 02             	shl    edx,0x2
c0011eb8:	01 d0                	add    eax,edx
c0011eba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec4:	83 e0 01             	and    eax,0x1
c0011ec7:	0f 84 ab 00 00 00    	je     c0011f78 <VAS::~VAS()+0x116>
c0011ecd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011edd:	7f 75                	jg     c0011f54 <VAS::~VAS()+0xf2>
c0011edf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee3:	c1 e0 0a             	shl    eax,0xa
c0011ee6:	89 c2                	mov    edx,eax
c0011ee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eec:	01 d0                	add    eax,edx
c0011eee:	c1 e0 0c             	shl    eax,0xc
c0011ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011efa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011efc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011f05:	83 ec 04             	sub    esp,0x4
c0011f08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f0c:	6a 01                	push   0x1
c0011f0e:	50                   	push   eax
c0011f0f:	e8 08 fd ff ff       	call   c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f29:	25 01 04 00 00       	and    eax,0x401
c0011f2e:	3d 01 04 00 00       	cmp    eax,0x401
c0011f33:	75 19                	jne    c0011f4e <VAS::~VAS()+0xec>
c0011f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	50                   	push   eax
c0011f42:	e8 f0 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f52:	eb 81                	jmp    c0011ed5 <VAS::~VAS()+0x73>
c0011f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f58:	25 00 04 00 00       	and    eax,0x400
c0011f5d:	74 19                	je     c0011f78 <VAS::~VAS()+0x116>
c0011f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f68:	83 ec 0c             	sub    esp,0xc
c0011f6b:	50                   	push   eax
c0011f6c:	e8 c6 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f78:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f7c:	e9 1b ff ff ff       	jmp    c0011e9c <VAS::~VAS()+0x3a>
c0011f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f88:	83 ec 0c             	sub    esp,0xc
c0011f8b:	50                   	push   eax
c0011f8c:	e8 d6 fc ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	50                   	push   eax
c0011f9f:	e8 93 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011faf:	c1 e0 02             	shl    eax,0x2
c0011fb2:	83 ec 08             	sub    esp,0x8
c0011fb5:	50                   	push   eax
c0011fb6:	68 90 9d 02 c0       	push   0xc0029d90
c0011fbb:	e8 33 09 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	e8 24 b5 00 00       	call   c001d4ec <unlockScheduler()>
c0011fc8:	90                   	nop
c0011fc9:	83 c4 2c             	add    esp,0x2c
c0011fcc:	c3                   	ret    
c0011fcd:	90                   	nop

c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fce:	55                   	push   ebp
c0011fcf:	57                   	push   edi
c0011fd0:	56                   	push   esi
c0011fd1:	53                   	push   ebx
c0011fd2:	83 ec 1c             	sub    esp,0x1c
c0011fd5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fdd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fe3:	77 08                	ja     c0011fed <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fe5:	0f 20 d8             	mov    eax,cr3
c0011fe8:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011feb:	75 47                	jne    c0012034 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff1:	09 d8                	or     eax,ebx
c0011ff3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ff8:	75 57                	jne    c0012051 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ffa:	89 de                	mov    esi,ebx
c0011ffc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fff:	c1 ee 16             	shr    esi,0x16
c0012002:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012009:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001200d:	74 54                	je     c0012063 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001200f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012013:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012019:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001201d:	c1 e6 0c             	shl    esi,0xc
c0012020:	c1 eb 0a             	shr    ebx,0xa
c0012023:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012029:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001202c:	83 c4 1c             	add    esp,0x1c
c001202f:	5b                   	pop    ebx
c0012030:	5e                   	pop    esi
c0012031:	5f                   	pop    edi
c0012032:	5d                   	pop    ebp
c0012033:	c3                   	ret    
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	68 b0 9d 02 c0       	push   0xc0029db0
c001203c:	e8 b2 08 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012048:	09 d8                	or     eax,ebx
c001204a:	a9 ff 0f 00 00       	test   eax,0xfff
c001204f:	74 a9                	je     c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	68 18 9e 02 c0       	push   0xc0029e18
c0012059:	e8 3b 7e 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c001205e:	83 c4 10             	add    esp,0x10
c0012061:	eb 97                	jmp    c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012063:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012067:	e8 55 dc ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001206c:	89 c5                	mov    ebp,eax
c001206e:	e8 20 fa ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001207a:	6a 01                	push   0x1
c001207c:	e8 82 f8 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012081:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012088:	6a 01                	push   0x1
c001208a:	50                   	push   eax
c001208b:	55                   	push   ebp
c001208c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012092:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012096:	51                   	push   ecx
c0012097:	e8 26 02 00 00       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209c:	83 c4 1c             	add    esp,0x1c
c001209f:	68 00 10 00 00       	push   0x1000
c00120a4:	6a 00                	push   0x0
c00120a6:	50                   	push   eax
c00120a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120ab:	e8 14 e6 fe ff       	call   c00006c4 <memset>
c00120b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120b7:	e8 ab fb ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c00120bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120c9:	e9 41 ff ff ff       	jmp    c001200f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120ce <VAS::allocatePages(int, int)>:
c00120ce:	55                   	push   ebp
c00120cf:	57                   	push   edi
c00120d0:	56                   	push   esi
c00120d1:	53                   	push   ebx
c00120d2:	83 ec 1c             	sub    esp,0x1c
c00120d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120d9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00120de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120ea:	83 e0 01             	and    eax,0x1
c00120ed:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120f5:	0f 85 cc 00 00 00    	jne    c00121c7 <VAS::allocatePages(int, int)+0xf9>
c00120fb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 84 a1 00 00 00    	je     c00121ab <VAS::allocatePages(int, int)+0xdd>
c001210a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001210e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012112:	c1 e6 0c             	shl    esi,0xc
c0012115:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012119:	85 c0                	test   eax,eax
c001211b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001211e:	7e 33                	jle    c0012153 <VAS::allocatePages(int, int)+0x85>
c0012120:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012124:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012128:	81 cd 00 04 00 00    	or     ebp,0x400
c001212e:	e8 8e db ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012133:	55                   	push   ebp
c0012134:	53                   	push   ebx
c0012135:	50                   	push   eax
c0012136:	57                   	push   edi
c0012137:	e8 92 fe ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012144:	74 03                	je     c0012149 <VAS::allocatePages(int, int)+0x7b>
c0012146:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012149:	81 c3 00 10 00 00    	add    ebx,0x1000
c001214f:	39 de                	cmp    esi,ebx
c0012151:	75 db                	jne    c001212e <VAS::allocatePages(int, int)+0x60>
c0012153:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012158:	75 12                	jne    c001216c <VAS::allocatePages(int, int)+0x9e>
c001215a:	0f 20 d8             	mov    eax,cr3
c001215d:	0f 22 d8             	mov    cr3,eax
c0012160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	5b                   	pop    ebx
c0012168:	5e                   	pop    esi
c0012169:	5f                   	pop    edi
c001216a:	5d                   	pop    ebp
c001216b:	c3                   	ret    
c001216c:	c1 ee 0a             	shr    esi,0xa
c001216f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012173:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012179:	c1 eb 0a             	shr    ebx,0xa
c001217c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012182:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012188:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001218e:	39 c3                	cmp    ebx,eax
c0012190:	77 ce                	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012192:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012195:	81 c3 00 10 00 00    	add    ebx,0x1000
c001219b:	39 d8                	cmp    eax,ebx
c001219d:	73 f3                	jae    c0012192 <VAS::allocatePages(int, int)+0xc4>
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	83 c4 1c             	add    esp,0x1c
c00121a6:	5b                   	pop    ebx
c00121a7:	5e                   	pop    esi
c00121a8:	5f                   	pop    edi
c00121a9:	5d                   	pop    ebp
c00121aa:	c3                   	ret    
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	68 3c 9e 02 c0       	push   0xc0029e3c
c00121b3:	e8 e1 7c 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c00121b8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	e9 43 ff ff ff       	jmp    c001210a <VAS::allocatePages(int, int)+0x3c>
c00121c7:	83 ec 0c             	sub    esp,0xc
c00121ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121ce:	e8 30 f7 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00121d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121df:	0f 87 9b 00 00 00    	ja     c0012280 <VAS::allocatePages(int, int)+0x1b2>
c00121e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e9:	85 d2                	test   edx,edx
c00121eb:	7e 3c                	jle    c0012229 <VAS::allocatePages(int, int)+0x15b>
c00121ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f9:	c1 e5 0c             	shl    ebp,0xc
c00121fc:	81 ce 00 04 00 00    	or     esi,0x400
c0012202:	01 dd                	add    ebp,ebx
c0012204:	e8 b8 da ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012209:	56                   	push   esi
c001220a:	53                   	push   ebx
c001220b:	50                   	push   eax
c001220c:	57                   	push   edi
c001220d:	e8 bc fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001221a:	74 03                	je     c001221f <VAS::allocatePages(int, int)+0x151>
c001221c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001221f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012225:	39 dd                	cmp    ebp,ebx
c0012227:	75 db                	jne    c0012204 <VAS::allocatePages(int, int)+0x136>
c0012229:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001222e:	0f 84 26 ff ff ff    	je     c001215a <VAS::allocatePages(int, int)+0x8c>
c0012234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223c:	89 d3                	mov    ebx,edx
c001223e:	c1 e0 0c             	shl    eax,0xc
c0012241:	c1 eb 0a             	shr    ebx,0xa
c0012244:	01 d0                	add    eax,edx
c0012246:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001224c:	c1 e8 0a             	shr    eax,0xa
c001224f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012255:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225a:	2d 00 00 40 00       	sub    eax,0x400000
c001225f:	39 c3                	cmp    ebx,eax
c0012261:	0f 87 f9 fe ff ff    	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012267:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001226a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012270:	39 d8                	cmp    eax,ebx
c0012272:	73 f3                	jae    c0012267 <VAS::allocatePages(int, int)+0x199>
c0012274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012278:	83 c4 1c             	add    esp,0x1c
c001227b:	5b                   	pop    ebx
c001227c:	5e                   	pop    esi
c001227d:	5f                   	pop    edi
c001227e:	5d                   	pop    ebp
c001227f:	c3                   	ret    
c0012280:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012285:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001228b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012292:	0f 84 4d ff ff ff    	je     c00121e5 <VAS::allocatePages(int, int)+0x117>
c0012298:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00122a0:	e9 40 ff ff ff       	jmp    c00121e5 <VAS::allocatePages(int, int)+0x117>
c00122a5:	90                   	nop

c00122a6 <VAS::setCPUSpecific(unsigned long)>:
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	6a 05                	push   0x5
c00122ab:	68 00 00 40 c2       	push   0xc2400000
c00122b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b8:	e8 11 fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00122bd:	83 c4 1c             	add    esp,0x1c
c00122c0:	c3                   	ret    
c00122c1:	90                   	nop

c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122c2:	55                   	push   ebp
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	83 ec 1c             	sub    esp,0x1c
c00122c9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00122ce:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122dc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122e2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122e6:	83 e0 01             	and    eax,0x1
c00122e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f1:	85 c0                	test   eax,eax
c00122f3:	7e 39                	jle    c001232e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f9:	89 f3                	mov    ebx,esi
c00122fb:	c1 e0 0c             	shl    eax,0xc
c00122fe:	01 f0                	add    eax,esi
c0012300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012304:	55                   	push   ebp
c0012305:	53                   	push   ebx
c0012306:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001230a:	29 f0                	sub    eax,esi
c001230c:	01 d8                	add    eax,ebx
c001230e:	50                   	push   eax
c001230f:	57                   	push   edi
c0012310:	e8 b9 fc ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001231d:	74 03                	je     c0012322 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001231f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012322:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012328:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001232c:	75 d6                	jne    c0012304 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001232e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012333:	75 10                	jne    c0012345 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012335:	0f 20 d8             	mov    eax,cr3
c0012338:	0f 22 d8             	mov    cr3,eax
c001233b:	83 c4 1c             	add    esp,0x1c
c001233e:	89 f0                	mov    eax,esi
c0012340:	5b                   	pop    ebx
c0012341:	5e                   	pop    esi
c0012342:	5f                   	pop    edi
c0012343:	5d                   	pop    ebp
c0012344:	c3                   	ret    
c0012345:	89 f3                	mov    ebx,esi
c0012347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001234b:	c1 eb 0a             	shr    ebx,0xa
c001234e:	c1 e0 0c             	shl    eax,0xc
c0012351:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012357:	01 f0                	add    eax,esi
c0012359:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001235f:	c1 e8 0a             	shr    eax,0xa
c0012362:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012367:	2d 00 00 40 00       	sub    eax,0x400000
c001236c:	39 c3                	cmp    ebx,eax
c001236e:	77 cb                	ja     c001233b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012370:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012373:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012379:	39 d8                	cmp    eax,ebx
c001237b:	73 f3                	jae    c0012370 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001237d:	83 c4 1c             	add    esp,0x1c
c0012380:	89 f0                	mov    eax,esi
c0012382:	5b                   	pop    ebx
c0012383:	5e                   	pop    esi
c0012384:	5f                   	pop    edi
c0012385:	5d                   	pop    ebp
c0012386:	c3                   	ret    
c0012387:	90                   	nop

c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012388:	55                   	push   ebp
c0012389:	57                   	push   edi
c001238a:	56                   	push   esi
c001238b:	53                   	push   ebx
c001238c:	83 ec 1c             	sub    esp,0x1c
c001238f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012393:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012397:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001239b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001239f:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a4:	75 4a                	jne    c00123f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00123a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 eb 16             	shr    ebx,0x16
c00123b0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123b7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123bb:	74 4d                	je     c001240a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123c1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123c5:	c1 e8 0a             	shr    eax,0xa
c00123c8:	80 fa 01             	cmp    dl,0x1
c00123cb:	19 d2                	sbb    edx,edx
c00123cd:	c1 e3 0c             	shl    ebx,0xc
c00123d0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123d4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123da:	25 fc 0f 00 00       	and    eax,0xffc
c00123df:	01 d8                	add    eax,ebx
c00123e1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123e8:	83 c4 1c             	add    esp,0x1c
c00123eb:	5b                   	pop    ebx
c00123ec:	5e                   	pop    esi
c00123ed:	5f                   	pop    edi
c00123ee:	5d                   	pop    ebp
c00123ef:	c3                   	ret    
c00123f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	68 68 9e 02 c0       	push   0xc0029e68
c00123fc:	e8 98 7a 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012408:	eb 9c                	jmp    c00123a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001240a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240e:	e8 ae d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012413:	89 c5                	mov    ebp,eax
c0012415:	e8 79 f6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012421:	6a 01                	push   0x1
c0012423:	e8 db f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012428:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001242f:	6a 01                	push   0x1
c0012431:	50                   	push   eax
c0012432:	55                   	push   ebp
c0012433:	81 cd 07 04 00 00    	or     ebp,0x407
c0012439:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243d:	51                   	push   ecx
c001243e:	e8 7f fe ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012443:	83 c4 1c             	add    esp,0x1c
c0012446:	68 00 10 00 00       	push   0x1000
c001244b:	6a 00                	push   0x0
c001244d:	50                   	push   eax
c001244e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012452:	e8 6d e2 fe ff       	call   c00006c4 <memset>
c0012457:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245e:	e8 04 f8 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0012463:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001246c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012470:	e9 48 ff ff ff       	jmp    c00123bd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012475:	90                   	nop

c0012476 <VAS::VAS(bool)>:
c0012476:	53                   	push   ebx
c0012477:	83 ec 28             	sub    esp,0x28
c001247a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012486:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001248d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012491:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012495:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012498:	e8 24 d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001249d:	89 c2                	mov    edx,eax
c001249f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124a6:	e8 e8 f5 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00124ab:	89 c3                	mov    ebx,eax
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	6a 01                	push   0x1
c00124b2:	e8 4c f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	89 c2                	mov    edx,eax
c00124bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	6a 03                	push   0x3
c00124c8:	6a 01                	push   0x1
c00124ca:	52                   	push   edx
c00124cb:	50                   	push   eax
c00124cc:	53                   	push   ebx
c00124cd:	e8 f0 fd ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124d2:	83 c4 20             	add    esp,0x20
c00124d5:	89 c2                	mov    edx,eax
c00124d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124e6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124ee:	7f 1c                	jg     c001250c <VAS::VAS(bool)+0x96>
c00124f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124fb:	c1 e2 02             	shl    edx,0x2
c00124fe:	01 d0                	add    eax,edx
c0012500:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012506:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001250a:	eb da                	jmp    c00124e6 <VAS::VAS(bool)+0x70>
c001250c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012514:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001251c:	7f 7a                	jg     c0012598 <VAS::VAS(bool)+0x122>
c001251e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012522:	2d 00 02 00 00       	sub    eax,0x200
c0012527:	c1 e0 0c             	shl    eax,0xc
c001252a:	83 c8 03             	or     eax,0x3
c001252d:	89 c2                	mov    edx,eax
c001252f:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012534:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012540:	83 e0 10             	and    eax,0x10
c0012543:	84 c0                	test   al,al
c0012545:	74 07                	je     c001254e <VAS::VAS(bool)+0xd8>
c0012547:	b8 00 01 00 00       	mov    eax,0x100
c001254c:	eb 05                	jmp    c0012553 <VAS::VAS(bool)+0xdd>
c001254e:	b8 00 00 00 00       	mov    eax,0x0
c0012553:	09 d0                	or     eax,edx
c0012555:	89 c1                	mov    ecx,eax
c0012557:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001255e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012562:	c1 e2 02             	shl    edx,0x2
c0012565:	01 d0                	add    eax,edx
c0012567:	89 ca                	mov    edx,ecx
c0012569:	89 10                	mov    DWORD PTR [eax],edx
c001256b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256f:	2d 40 03 00 00       	sub    eax,0x340
c0012574:	83 f8 7f             	cmp    eax,0x7f
c0012577:	77 16                	ja     c001258f <VAS::VAS(bool)+0x119>
c0012579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012580:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012584:	c1 e2 02             	shl    edx,0x2
c0012587:	01 d0                	add    eax,edx
c0012589:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001258f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012593:	e9 7c ff ff ff       	jmp    c0012514 <VAS::VAS(bool)+0x9e>
c0012598:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001259d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a9:	83 e0 10             	and    eax,0x10
c00125ac:	84 c0                	test   al,al
c00125ae:	74 07                	je     c00125b7 <VAS::VAS(bool)+0x141>
c00125b0:	b8 03 41 00 00       	mov    eax,0x4103
c00125b5:	eb 05                	jmp    c00125bc <VAS::VAS(bool)+0x146>
c00125b7:	b8 03 40 00 00       	mov    eax,0x4003
c00125bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125c3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125c9:	89 02                	mov    DWORD PTR [edx],eax
c00125cb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125dc:	83 ec 08             	sub    esp,0x8
c00125df:	50                   	push   eax
c00125e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125e4:	e8 bd fc ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f3:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125fe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012604:	83 e0 10             	and    eax,0x10
c0012607:	84 c0                	test   al,al
c0012609:	74 07                	je     c0012612 <VAS::VAS(bool)+0x19c>
c001260b:	b8 00 01 00 00       	mov    eax,0x100
c0012610:	eb 05                	jmp    c0012617 <VAS::VAS(bool)+0x1a1>
c0012612:	b8 00 00 00 00       	mov    eax,0x0
c0012617:	09 c2                	or     edx,eax
c0012619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001261d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012620:	05 fc 0f 00 00       	add    eax,0xffc
c0012625:	83 ca 03             	or     edx,0x3
c0012628:	89 10                	mov    DWORD PTR [eax],edx
c001262a:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001262f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	50                   	push   eax
c0012639:	e8 c8 19 00 00       	call   c0014006 <Device::getName()>
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	83 ec 08             	sub    esp,0x8
c0012644:	68 67 9f 02 c0       	push   0xc0029f67
c0012649:	50                   	push   eax
c001264a:	e8 65 e1 fe ff       	call   c00007b4 <strcmp>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	85 c0                	test   eax,eax
c0012654:	0f 94 c0             	sete   al
c0012657:	84 c0                	test   al,al
c0012659:	74 70                	je     c00126cb <VAS::VAS(bool)+0x255>
c001265b:	e8 6d ae 00 00       	call   c001d4cd <disableIRQs()>
c0012660:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012665:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266b:	05 7c 09 00 00       	add    eax,0x97c
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	50                   	push   eax
c0012674:	e8 27 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012681:	89 c3                	mov    ebx,eax
c0012683:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012688:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001268e:	05 7c 09 00 00       	add    eax,0x97c
c0012693:	83 ec 0c             	sub    esp,0xc
c0012696:	50                   	push   eax
c0012697:	e8 04 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	83 ec 08             	sub    esp,0x8
c00126a2:	50                   	push   eax
c00126a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a7:	e8 9c f5 ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b6:	6a 11                	push   0x11
c00126b8:	53                   	push   ebx
c00126b9:	50                   	push   eax
c00126ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126be:	e8 0b f9 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	e8 10 ae 00 00       	call   c001d4db <enableIRQs()>
c00126cb:	90                   	nop
c00126cc:	83 c4 28             	add    esp,0x28
c00126cf:	5b                   	pop    ebx
c00126d0:	c3                   	ret    

c00126d1 <mapVASFirstTime>:
c00126d1:	55                   	push   ebp
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126e0:	4a                   	dec    edx
c00126e1:	0f 84 8e 00 00 00    	je     c0012775 <mapVASFirstTime+0xa4>
c00126e7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126ea:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126ed:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126f2:	c1 e5 15             	shl    ebp,0x15
c00126f5:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126fa:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012700:	29 eb                	sub    ebx,ebp
c0012702:	29 ee                	sub    esi,ebp
c0012704:	e8 b8 d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	68 03 04 00 00       	push   0x403
c0012711:	6a 01                	push   0x1
c0012713:	53                   	push   ebx
c0012714:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001271a:	50                   	push   eax
c001271b:	57                   	push   edi
c001271c:	e8 a1 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012721:	83 c4 20             	add    esp,0x20
c0012724:	39 f3                	cmp    ebx,esi
c0012726:	75 dc                	jne    c0012704 <mapVASFirstTime+0x33>
c0012728:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001272d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012732:	29 ee                	sub    esi,ebp
c0012734:	29 e8                	sub    eax,ebp
c0012736:	89 c5                	mov    ebp,eax
c0012738:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001273c:	19 db                	sbb    ebx,ebx
c001273e:	e8 7e d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012743:	83 e3 04             	and    ebx,0x4
c0012746:	83 ec 0c             	sub    esp,0xc
c0012749:	81 c3 03 04 00 00    	add    ebx,0x403
c001274f:	53                   	push   ebx
c0012750:	6a 01                	push   0x1
c0012752:	56                   	push   esi
c0012753:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012759:	50                   	push   eax
c001275a:	57                   	push   edi
c001275b:	e8 62 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012760:	83 c4 20             	add    esp,0x20
c0012763:	39 f5                	cmp    ebp,esi
c0012765:	75 d1                	jne    c0012738 <mapVASFirstTime+0x67>
c0012767:	0f 20 d8             	mov    eax,cr3
c001276a:	0f 22 d8             	mov    cr3,eax
c001276d:	83 c4 0c             	add    esp,0xc
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    
c0012775:	83 ec 0c             	sub    esp,0xc
c0012778:	68 75 9f 02 c0       	push   0xc0029f75
c001277d:	e8 71 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012782:	83 c4 10             	add    esp,0x10
c0012785:	83 c4 0c             	add    esp,0xc
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	5d                   	pop    ebp
c001278c:	c3                   	ret    

c001278d <__cxa_atexit>:
c001278d:	31 c0                	xor    eax,eax
c001278f:	c3                   	ret    

c0012790 <__cxa_finalize>:
c0012790:	c3                   	ret    

c0012791 <__stack_chk_fail>:
c0012791:	55                   	push   ebp
c0012792:	89 e5                	mov    ebp,esp
c0012794:	83 ec 14             	sub    esp,0x14
c0012797:	68 8e 9f 02 c0       	push   0xc0029f8e
c001279c:	e8 52 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127a1:	58                   	pop    eax
c00127a2:	5a                   	pop    edx
c00127a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127a6:	68 de 9f 02 c0       	push   0xc0029fde
c00127ab:	e8 43 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127b0:	59                   	pop    ecx
c00127b1:	58                   	pop    eax
c00127b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b8:	68 de 9f 02 c0       	push   0xc0029fde
c00127bd:	e8 31 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127c2:	5a                   	pop    edx
c00127c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127c6:	59                   	pop    ecx
c00127c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127cc:	68 de 9f 02 c0       	push   0xc0029fde
c00127d1:	e8 1d 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127d6:	5a                   	pop    edx
c00127d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127da:	59                   	pop    ecx
c00127db:	8b 00                	mov    eax,DWORD PTR [eax]
c00127dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127e2:	68 de 9f 02 c0       	push   0xc0029fde
c00127e7:	e8 07 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127ec:	c7 04 24 e6 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fe6
c00127f3:	e8 a1 76 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	c9                   	leave  
c00127fc:	c3                   	ret    

c00127fd <__cxa_pure_virtual>:
c00127fd:	83 ec 18             	sub    esp,0x18
c0012800:	68 fe 9f 02 c0       	push   0xc0029ffe
c0012805:	e8 8f 76 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c001280a:	83 c4 1c             	add    esp,0x1c
c001280d:	c3                   	ret    

c001280e <operator new[](unsigned long)>:
c001280e:	e9 11 ce ff ff       	jmp    c000f624 <malloc>

c0012813 <operator delete(void*, unsigned long)>:
c0012813:	e9 2c ce ff ff       	jmp    c000f644 <rfree>

c0012818 <operator delete[](void*)>:
c0012818:	e9 27 ce ff ff       	jmp    c000f644 <rfree>

c001281d <operator delete[](void*, unsigned long)>:
c001281d:	e9 22 ce ff ff       	jmp    c000f644 <rfree>

c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012822:	57                   	push   edi
c0012823:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012828:	56                   	push   esi
c0012829:	be 14 a0 02 c0       	mov    esi,0xc002a014
c001282e:	53                   	push   ebx
c001282f:	83 ec 40             	sub    esp,0x40
c0012832:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012836:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001283a:	fc                   	cld    
c001283b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001283d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012841:	83 f9 3e             	cmp    ecx,0x3e
c0012844:	7e 05                	jle    c001284b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012846:	b9 3e 00 00 00       	mov    ecx,0x3e
c001284b:	89 df                	mov    edi,ebx
c001284d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012851:	eb 02                	jmp    c0012855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012853:	89 c7                	mov    edi,eax
c0012855:	31 d2                	xor    edx,edx
c0012857:	46                   	inc    esi
c0012858:	89 f8                	mov    eax,edi
c001285a:	f7 f1                	div    ecx
c001285c:	39 cf                	cmp    edi,ecx
c001285e:	73 f3                	jae    c0012853 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012860:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012863:	eb 02                	jmp    c0012867 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012865:	89 c3                	mov    ebx,eax
c0012867:	31 d2                	xor    edx,edx
c0012869:	4e                   	dec    esi
c001286a:	89 d8                	mov    eax,ebx
c001286c:	f7 f1                	div    ecx
c001286e:	39 cb                	cmp    ebx,ecx
c0012870:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012874:	88 16                	mov    BYTE PTR [esi],dl
c0012876:	73 ed                	jae    c0012865 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012878:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001287c:	83 c4 40             	add    esp,0x40
c001287f:	5b                   	pop    ebx
c0012880:	5e                   	pop    esi
c0012881:	5f                   	pop    edi
c0012882:	c3                   	ret    

c0012883 <Dbg::logc(char)>:
c0012883:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012887:	ba fd 03 00 00       	mov    edx,0x3fd
c001288c:	ec                   	in     al,dx
c001288d:	a8 20                	test   al,0x20
c001288f:	74 fb                	je     c001288c <Dbg::logc(char)+0x9>
c0012891:	ba f8 03 00 00       	mov    edx,0x3f8
c0012896:	88 c8                	mov    al,cl
c0012898:	ee                   	out    dx,al
c0012899:	c3                   	ret    

c001289a <Dbg::logs(char*)>:
c001289a:	53                   	push   ebx
c001289b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001289f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a2:	84 c0                	test   al,al
c00128a4:	74 0f                	je     c00128b5 <Dbg::logs(char*)+0x1b>
c00128a6:	50                   	push   eax
c00128a7:	43                   	inc    ebx
c00128a8:	e8 d6 ff ff ff       	call   c0012883 <Dbg::logc(char)>
c00128ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128b0:	5a                   	pop    edx
c00128b1:	84 c0                	test   al,al
c00128b3:	75 f1                	jne    c00128a6 <Dbg::logs(char*)+0xc>
c00128b5:	5b                   	pop    ebx
c00128b6:	c3                   	ret    

c00128b7 <Dbg::logWriteInt(unsigned int)>:
c00128b7:	83 ec 10             	sub    esp,0x10
c00128ba:	6a 0a                	push   0xa
c00128bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c0:	50                   	push   eax
c00128c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c5:	e8 58 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ca:	50                   	push   eax
c00128cb:	e8 ca ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128d0:	83 c4 20             	add    esp,0x20
c00128d3:	c3                   	ret    

c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128d4:	83 ec 10             	sub    esp,0x10
c00128d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128df:	50                   	push   eax
c00128e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e4:	e8 39 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e9:	50                   	push   eax
c00128ea:	e8 ab ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128ef:	83 c4 20             	add    esp,0x20
c00128f2:	c3                   	ret    

c00128f3 <Dbg::kprintf(char const*, ...)>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012909:	84 c0                	test   al,al
c001290b:	74 4a                	je     c0012957 <Dbg::kprintf(char const*, ...)+0x64>
c001290d:	31 db                	xor    ebx,ebx
c001290f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012912:	3c 25                	cmp    al,0x25
c0012914:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012917:	0f 85 e4 00 00 00    	jne    c0012a01 <Dbg::kprintf(char const*, ...)+0x10e>
c001291d:	83 c3 02             	add    ebx,0x2
c0012920:	8a 07                	mov    al,BYTE PTR [edi]
c0012922:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012925:	83 e8 25             	sub    eax,0x25
c0012928:	3c 53                	cmp    al,0x53
c001292a:	0f 87 ba 00 00 00    	ja     c00129ea <Dbg::kprintf(char const*, ...)+0xf7>
c0012930:	0f b6 c0             	movzx  eax,al
c0012933:	ff 24 85 54 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5fac]
c001293a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001293e:	89 c8                	mov    eax,ecx
c0012940:	83 c1 04             	add    ecx,0x4
c0012943:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012947:	ff 30                	push   DWORD PTR [eax]
c0012949:	e8 4c ff ff ff       	call   c001289a <Dbg::logs(char*)>
c001294e:	58                   	pop    eax
c001294f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012953:	84 c0                	test   al,al
c0012955:	75 b8                	jne    c001290f <Dbg::kprintf(char const*, ...)+0x1c>
c0012957:	83 c4 0c             	add    esp,0xc
c001295a:	5b                   	pop    ebx
c001295b:	5e                   	pop    esi
c001295c:	5f                   	pop    edi
c001295d:	5d                   	pop    ebp
c001295e:	c3                   	ret    
c001295f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012963:	89 d0                	mov    eax,edx
c0012965:	83 c2 04             	add    edx,0x4
c0012968:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001296c:	ff 30                	push   DWORD PTR [eax]
c001296e:	e8 44 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c0012973:	58                   	pop    eax
c0012974:	eb d9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012976:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001297a:	89 d0                	mov    eax,edx
c001297c:	83 c2 04             	add    edx,0x4
c001297f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012982:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012986:	50                   	push   eax
c0012987:	e8 f7 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c001298c:	58                   	pop    eax
c001298d:	eb c0                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c001298f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012993:	89 c8                	mov    eax,ecx
c0012995:	83 c1 04             	add    ecx,0x4
c0012998:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001299c:	ff 30                	push   DWORD PTR [eax]
c001299e:	e8 14 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c00129a3:	5f                   	pop    edi
c00129a4:	eb a9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129aa:	89 c8                	mov    eax,ecx
c00129ac:	83 c1 04             	add    ecx,0x4
c00129af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129b3:	6a 10                	push   0x10
c00129b5:	ff 30                	push   DWORD PTR [eax]
c00129b7:	e8 18 ff ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129bc:	59                   	pop    ecx
c00129bd:	5f                   	pop    edi
c00129be:	eb 8f                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129c4:	89 d0                	mov    eax,edx
c00129c6:	83 c2 08             	add    edx,0x8
c00129c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129cd:	6a 10                	push   0x10
c00129cf:	ff 30                	push   DWORD PTR [eax]
c00129d1:	e8 fe fe ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129d6:	58                   	pop    eax
c00129d7:	5a                   	pop    edx
c00129d8:	e9 72 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129dd:	6a 25                	push   0x25
c00129df:	e8 9f fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129e4:	58                   	pop    eax
c00129e5:	e9 65 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129ea:	6a 25                	push   0x25
c00129ec:	e8 92 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129f1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129f4:	50                   	push   eax
c00129f5:	e8 89 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129fa:	5a                   	pop    edx
c00129fb:	59                   	pop    ecx
c00129fc:	e9 4e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a01:	50                   	push   eax
c0012a02:	89 eb                	mov    ebx,ebp
c0012a04:	e8 7a fe ff ff       	call   c0012883 <Dbg::logc(char)>
c0012a09:	89 fd                	mov    ebp,edi
c0012a0b:	58                   	pop    eax
c0012a0c:	e9 3e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a11:	90                   	nop

c0012a12 <File::read(unsigned long long, void*, int*)>:
c0012a12:	53                   	push   ebx
c0012a13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a22:	3c 19                	cmp    al,0x19
c0012a24:	77 35                	ja     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a26:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a2d:	85 c0                	test   eax,eax
c0012a2f:	74 2a                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a37:	85 c0                	test   eax,eax
c0012a39:	74 20                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3f:	74 21                	je     c0012a62 <File::read(unsigned long long, void*, int*)+0x50>
c0012a41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a47:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a55:	5b                   	pop    ebx
c0012a56:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a59:	ff e0                	jmp    eax
c0012a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a60:	eb 05                	jmp    c0012a67 <File::read(unsigned long long, void*, int*)+0x55>
c0012a62:	b8 05 00 00 00       	mov    eax,0x5
c0012a67:	5b                   	pop    ebx
c0012a68:	c3                   	ret    
c0012a69:	90                   	nop

c0012a6a <File::write(unsigned long long, void*, int*)>:
c0012a6a:	53                   	push   ebx
c0012a6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a7a:	3c 19                	cmp    al,0x19
c0012a7c:	77 35                	ja     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a7e:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a85:	85 c0                	test   eax,eax
c0012a87:	74 2a                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	74 20                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a97:	74 21                	je     c0012aba <File::write(unsigned long long, void*, int*)+0x50>
c0012a99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a9f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aad:	5b                   	pop    ebx
c0012aae:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ab1:	ff e0                	jmp    eax
c0012ab3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab8:	eb 05                	jmp    c0012abf <File::write(unsigned long long, void*, int*)+0x55>
c0012aba:	b8 05 00 00 00       	mov    eax,0x5
c0012abf:	5b                   	pop    ebx
c0012ac0:	c3                   	ret    
c0012ac1:	90                   	nop

c0012ac2 <Directory::read(unsigned long long, void*, int*)>:
c0012ac2:	53                   	push   ebx
c0012ac3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012acb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ad2:	3c 19                	cmp    al,0x19
c0012ad4:	77 35                	ja     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad6:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012add:	85 c0                	test   eax,eax
c0012adf:	74 2a                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ae7:	85 c0                	test   eax,eax
c0012ae9:	74 20                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aef:	74 21                	je     c0012b12 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012af3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012af7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b05:	5b                   	pop    ebx
c0012b06:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b09:	ff e0                	jmp    eax
c0012b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b10:	eb 05                	jmp    c0012b17 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b12:	b8 05 00 00 00       	mov    eax,0x5
c0012b17:	5b                   	pop    ebx
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <Directory::write(unsigned long long, void*, int*)>:
c0012b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b25:	b8 0b 00 00 00       	mov    eax,0xb
c0012b2a:	80 fa 19             	cmp    dl,0x19
c0012b2d:	77 18                	ja     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b2f:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012b36:	85 d2                	test   edx,edx
c0012b38:	74 0d                	je     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b3a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b41:	19 c0                	sbb    eax,eax
c0012b43:	83 e0 0a             	and    eax,0xa
c0012b46:	40                   	inc    eax
c0012b47:	c3                   	ret    

c0012b48 <File::isAtty()>:
c0012b48:	31 c0                	xor    eax,eax
c0012b4a:	c3                   	ret    
c0012b4b:	90                   	nop

c0012b4c <Directory::isAtty()>:
c0012b4c:	31 c0                	xor    eax,eax
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b50:	b8 0a 00 00 00       	mov    eax,0xa
c0012b55:	c3                   	ret    

c0012b56 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b56:	b8 0a 00 00 00       	mov    eax,0xa
c0012b5b:	c3                   	ret    

c0012b5c <File::~File()>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b68:	89 10                	mov    DWORD PTR [eax],edx
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	83 ec 0c             	sub    esp,0xc
c0012b71:	50                   	push   eax
c0012b72:	e8 2b eb ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	90                   	nop
c0012b7b:	83 c4 0c             	add    esp,0xc
c0012b7e:	c3                   	ret    
c0012b7f:	90                   	nop

c0012b80 <File::~File()>:
c0012b80:	83 ec 0c             	sub    esp,0xc
c0012b83:	83 ec 0c             	sub    esp,0xc
c0012b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8a:	e8 cd ff ff ff       	call   c0012b5c <File::~File()>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	83 ec 08             	sub    esp,0x8
c0012b95:	68 14 01 00 00       	push   0x114
c0012b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9e:	e8 70 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 c4 0c             	add    esp,0xc
c0012ba9:	c3                   	ret    

c0012baa <Directory::~Directory()>:
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0012bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb6:	89 10                	mov    DWORD PTR [eax],edx
c0012bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	50                   	push   eax
c0012bc0:	e8 dd ea ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	90                   	nop
c0012bc9:	83 c4 0c             	add    esp,0xc
c0012bcc:	c3                   	ret    
c0012bcd:	90                   	nop

c0012bce <Directory::~Directory()>:
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd8:	e8 cd ff ff ff       	call   c0012baa <Directory::~Directory()>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	83 ec 08             	sub    esp,0x8
c0012be3:	68 14 01 00 00       	push   0x114
c0012be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bec:	e8 22 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	c3                   	ret    

c0012bf8 <Filesystem::Filesystem()>:
c0012bf8:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c01:	89 10                	mov    DWORD PTR [eax],edx
c0012c03:	8b 15 48 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc48
c0012c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c14:	a3 48 dc 02 c0       	mov    ds:0xc002dc48,eax
c0012c19:	90                   	nop
c0012c1a:	c3                   	ret    
c0012c1b:	90                   	nop

c0012c1c <Filesystem::~Filesystem()>:
c0012c1c:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c25:	89 10                	mov    DWORD PTR [eax],edx
c0012c27:	90                   	nop
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <Filesystem::~Filesystem()>:
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c31:	e8 e6 ff ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0012c36:	83 c4 04             	add    esp,0x4
c0012c39:	83 ec 08             	sub    esp,0x8
c0012c3c:	6a 08                	push   0x8
c0012c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c42:	e8 cc fb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	83 c4 0c             	add    esp,0xc
c0012c4d:	c3                   	ret    

c0012c4e <Fs::getcwd(Process*, char*, int)>:
c0012c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c52:	31 c0                	xor    eax,eax
c0012c54:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c57:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c5b:	7d 15                	jge    c0012c72 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c61:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c68:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c6b:	84 c9                	test   cl,cl
c0012c6d:	74 06                	je     c0012c75 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c6f:	40                   	inc    eax
c0012c70:	eb e2                	jmp    c0012c54 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c72:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c75:	31 c0                	xor    eax,eax
c0012c77:	c3                   	ret    

c0012c78 <Fs::initVFS()>:
c0012c78:	83 ec 18             	sub    esp,0x18
c0012c7b:	6a 08                	push   0x8
c0012c7d:	e8 a2 c9 ff ff       	call   c000f624 <malloc>
c0012c82:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c85:	e8 d4 d9 00 00       	call   c002065e <FAT::FAT()>
c0012c8a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c91:	e8 8e c9 ff ff       	call   c000f624 <malloc>
c0012c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c99:	e8 18 ec 00 00       	call   c00218b6 <ISO9660::ISO9660()>
c0012c9e:	83 c4 1c             	add    esp,0x1c
c0012ca1:	c3                   	ret    

c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ca2:	55                   	push   ebp
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	81 ec 10 04 00 00    	sub    esp,0x410
c0012cac:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cb3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cba:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cc1:	68 00 04 00 00       	push   0x400
c0012cc6:	6a 00                	push   0x0
c0012cc8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ccc:	56                   	push   esi
c0012ccd:	e8 f2 d9 fe ff       	call   c00006c4 <memset>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd9:	75 0b                	jne    c0012ce6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cdb:	50                   	push   eax
c0012cdc:	50                   	push   eax
c0012cdd:	57                   	push   edi
c0012cde:	56                   	push   esi
c0012cdf:	e8 7f da fe ff       	call   c0000763 <strcpy>
c0012ce4:	eb 41                	jmp    c0012d27 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ce6:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce8:	3c 5c                	cmp    al,0x5c
c0012cea:	74 04                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cec:	3c 2f                	cmp    al,0x2f
c0012cee:	75 18                	jne    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cf0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cf3:	3c 60                	cmp    al,0x60
c0012cf5:	7e 03                	jle    c0012cfa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cf7:	83 e8 20             	sub    eax,0x20
c0012cfa:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d04:	50                   	push   eax
c0012d05:	50                   	push   eax
c0012d06:	eb 18                	jmp    c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d08:	50                   	push   eax
c0012d09:	50                   	push   eax
c0012d0a:	55                   	push   ebp
c0012d0b:	56                   	push   esi
c0012d0c:	e8 52 da fe ff       	call   c0000763 <strcpy>
c0012d11:	5a                   	pop    edx
c0012d12:	59                   	pop    ecx
c0012d13:	68 48 b8 02 c0       	push   0xc002b848
c0012d18:	56                   	push   esi
c0012d19:	e8 fc da fe ff       	call   c000081a <strcat>
c0012d1e:	5d                   	pop    ebp
c0012d1f:	58                   	pop    eax
c0012d20:	57                   	push   edi
c0012d21:	56                   	push   esi
c0012d22:	e8 f3 da fe ff       	call   c000081a <strcat>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d2d:	3c 60                	cmp    al,0x60
c0012d2f:	7e 03                	jle    c0012d34 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d31:	83 e8 20             	sub    eax,0x20
c0012d34:	88 04 24             	mov    BYTE PTR [esp],al
c0012d37:	88 03                	mov    BYTE PTR [ebx],al
c0012d39:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d40:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d46:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d4a:	bf 03 00 00 00       	mov    edi,0x3
c0012d4f:	b8 03 00 00 00       	mov    eax,0x3
c0012d54:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d57:	84 d2                	test   dl,dl
c0012d59:	0f 84 91 00 00 00    	je     c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d62:	80 fa 5c             	cmp    dl,0x5c
c0012d65:	74 05                	je     c0012d6c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d67:	80 fa 2f             	cmp    dl,0x2f
c0012d6a:	75 12                	jne    c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6c:	89 c5                	mov    ebp,eax
c0012d6e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d73:	74 09                	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d75:	40                   	inc    eax
c0012d76:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d7a:	89 cf                	mov    edi,ecx
c0012d7c:	eb d6                	jmp    c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d7e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d83:	75 5b                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d85:	80 fa 2e             	cmp    dl,0x2e
c0012d88:	75 56                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d8a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d8e:	74 19                	je     c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d90:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d95:	74 53                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d97:	89 f9                	mov    ecx,edi
c0012d99:	41                   	inc    ecx
c0012d9a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9d:	80 fa 2f             	cmp    dl,0x2f
c0012da0:	74 f7                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da2:	80 fa 5c             	cmp    dl,0x5c
c0012da5:	74 f2                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da7:	eb d1                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dae:	74 3a                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012db0:	83 f8 03             	cmp    eax,0x3
c0012db3:	74 c5                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db5:	41                   	inc    ecx
c0012db6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db9:	80 fa 2f             	cmp    dl,0x2f
c0012dbc:	74 f7                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbe:	80 fa 5c             	cmp    dl,0x5c
c0012dc1:	74 f2                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc3:	48                   	dec    eax
c0012dc4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc8:	75 06                	jne    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dce:	eb f3                	jmp    c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dd0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd4:	74 07                	je     c0012ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dd6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dda:	48                   	dec    eax
c0012ddb:	eb f3                	jmp    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ddd:	40                   	inc    eax
c0012dde:	eb 9a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de0:	80 fa 2f             	cmp    dl,0x2f
c0012de3:	74 95                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de5:	80 fa 5c             	cmp    dl,0x5c
c0012de8:	74 90                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dea:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ded:	40                   	inc    eax
c0012dee:	eb 8a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	53                   	push   ebx
c0012df8:	e8 e4 d8 fe ff       	call   c00006e1 <strlen>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e05:	75 26                	jne    c0012e2d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	53                   	push   ebx
c0012e0b:	e8 d1 d8 fe ff       	call   c00006e1 <strlen>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e18:	74 26                	je     c0012e40 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	53                   	push   ebx
c0012e1e:	e8 be d8 fe ff       	call   c00006e1 <strlen>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e2b:	eb c7                	jmp    c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e2d:	83 ec 0c             	sub    esp,0xc
c0012e30:	53                   	push   ebx
c0012e31:	e8 ab d8 fe ff       	call   c00006e1 <strlen>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3e:	74 c7                	je     c0012e07 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e40:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e46:	5b                   	pop    ebx
c0012e47:	5e                   	pop    esi
c0012e48:	5f                   	pop    edi
c0012e49:	5d                   	pop    ebp
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <File::File(char const*, Process*)>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e53:	83 ec 08             	sub    esp,0x8
c0012e56:	6a 00                	push   0x0
c0012e58:	50                   	push   eax
c0012e59:	e8 62 e6 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6a:	89 10                	mov    DWORD PTR [eax],edx
c0012e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e70:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7a:	83 c0 0d             	add    eax,0xd
c0012e7d:	83 ec 04             	sub    esp,0x4
c0012e80:	52                   	push   edx
c0012e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e85:	50                   	push   eax
c0012e86:	e8 17 fe ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e92:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e95:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012eaa:	90                   	nop
c0012eab:	83 c4 0c             	add    esp,0xc
c0012eae:	c3                   	ret    
c0012eaf:	90                   	nop

c0012eb0 <File::open(FileOpenMode)>:
c0012eb0:	53                   	push   ebx
c0012eb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ebd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ec4:	80 fa 19             	cmp    dl,0x19
c0012ec7:	77 40                	ja     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ec9:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012ed0:	85 d2                	test   edx,edx
c0012ed2:	74 35                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ed4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eda:	85 d2                	test   edx,edx
c0012edc:	74 2b                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ede:	b8 06 00 00 00       	mov    eax,0x6
c0012ee3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ee7:	75 20                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012ee9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eeb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ef5:	51                   	push   ecx
c0012ef6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef9:	51                   	push   ecx
c0012efa:	52                   	push   edx
c0012efb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	85 c0                	test   eax,eax
c0012f03:	75 04                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012f05:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f09:	83 c4 08             	add    esp,0x8
c0012f0c:	5b                   	pop    ebx
c0012f0d:	c3                   	ret    

c0012f0e <File::close()>:
c0012f0e:	53                   	push   ebx
c0012f0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f14:	83 ec 08             	sub    esp,0x8
c0012f17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f1b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f22:	80 fa 19             	cmp    dl,0x19
c0012f25:	77 41                	ja     c0012f68 <File::close()+0x5a>
c0012f27:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f2e:	85 db                	test   ebx,ebx
c0012f30:	74 36                	je     c0012f68 <File::close()+0x5a>
c0012f32:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f39:	74 2d                	je     c0012f68 <File::close()+0x5a>
c0012f3b:	b8 05 00 00 00       	mov    eax,0x5
c0012f40:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f44:	74 22                	je     c0012f68 <File::close()+0x5a>
c0012f46:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f4a:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c0012f51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f57:	53                   	push   ebx
c0012f58:	53                   	push   ebx
c0012f59:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f5b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f61:	50                   	push   eax
c0012f62:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	83 c4 08             	add    esp,0x8
c0012f6b:	5b                   	pop    ebx
c0012f6c:	c3                   	ret    
c0012f6d:	90                   	nop

c0012f6e <File::seek(unsigned long long)>:
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	b8 0b 00 00 00       	mov    eax,0xb
c0012f75:	51                   	push   ecx
c0012f76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f7e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f89:	80 fa 19             	cmp    dl,0x19
c0012f8c:	77 31                	ja     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f8e:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f95:	85 d2                	test   edx,edx
c0012f97:	74 26                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f99:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f9f:	85 d2                	test   edx,edx
c0012fa1:	74 1c                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fa3:	b8 05 00 00 00       	mov    eax,0x5
c0012fa8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fac:	74 11                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fae:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fb0:	53                   	push   ebx
c0012fb1:	51                   	push   ecx
c0012fb2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb8:	52                   	push   edx
c0012fb9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	5a                   	pop    edx
c0012fc0:	5b                   	pop    ebx
c0012fc1:	5e                   	pop    esi
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <File::tell(unsigned long long*)>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fd0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fd7:	80 fa 19             	cmp    dl,0x19
c0012fda:	77 34                	ja     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fdc:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012fe3:	85 d2                	test   edx,edx
c0012fe5:	74 29                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fe7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fed:	85 d2                	test   edx,edx
c0012fef:	74 1f                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ff1:	b8 05 00 00 00       	mov    eax,0x5
c0012ff6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ffa:	74 14                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ffc:	50                   	push   eax
c0012ffd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013003:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013009:	52                   	push   edx
c001300a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	83 c4 0c             	add    esp,0xc
c0013013:	c3                   	ret    

c0013014 <File::rewind()>:
c0013014:	83 ec 10             	sub    esp,0x10
c0013017:	6a 00                	push   0x0
c0013019:	6a 00                	push   0x0
c001301b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301f:	e8 4a ff ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c0013024:	83 c4 1c             	add    esp,0x1c
c0013027:	c3                   	ret    

c0013028 <File::unlink()>:
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	b8 0b 00 00 00       	mov    eax,0xb
c0013030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013034:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001303b:	80 f9 19             	cmp    cl,0x19
c001303e:	77 2f                	ja     c001306f <File::unlink()+0x47>
c0013040:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013047:	85 c9                	test   ecx,ecx
c0013049:	74 24                	je     c001306f <File::unlink()+0x47>
c001304b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013051:	85 c9                	test   ecx,ecx
c0013053:	74 1a                	je     c001306f <File::unlink()+0x47>
c0013055:	b8 06 00 00 00       	mov    eax,0x6
c001305a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305e:	75 0f                	jne    c001306f <File::unlink()+0x47>
c0013060:	83 c2 0d             	add    edx,0xd
c0013063:	50                   	push   eax
c0013064:	50                   	push   eax
c0013065:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013067:	52                   	push   edx
c0013068:	51                   	push   ecx
c0013069:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	83 c4 0c             	add    esp,0xc
c0013072:	c3                   	ret    
c0013073:	90                   	nop

c0013074 <File::rename(char const*)>:
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	b8 0b 00 00 00       	mov    eax,0xb
c001307c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013080:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013087:	80 f9 19             	cmp    cl,0x19
c001308a:	77 32                	ja     c00130be <File::rename(char const*)+0x4a>
c001308c:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013093:	85 c9                	test   ecx,ecx
c0013095:	74 27                	je     c00130be <File::rename(char const*)+0x4a>
c0013097:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 1d                	je     c00130be <File::rename(char const*)+0x4a>
c00130a1:	b8 06 00 00 00       	mov    eax,0x6
c00130a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130aa:	75 12                	jne    c00130be <File::rename(char const*)+0x4a>
c00130ac:	83 c2 0d             	add    edx,0xd
c00130af:	50                   	push   eax
c00130b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130b6:	52                   	push   edx
c00130b7:	51                   	push   ecx
c00130b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	83 c4 0c             	add    esp,0xc
c00130c1:	c3                   	ret    

c00130c2 <File::chfatattr(unsigned char, unsigned char)>:
c00130c2:	57                   	push   edi
c00130c3:	b8 0b 00 00 00       	mov    eax,0xb
c00130c8:	56                   	push   esi
c00130c9:	53                   	push   ebx
c00130ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130dd:	80 f9 19             	cmp    cl,0x19
c00130e0:	77 37                	ja     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e2:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00130e9:	85 c9                	test   ecx,ecx
c00130eb:	74 2c                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f3:	85 c9                	test   ecx,ecx
c00130f5:	74 22                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f7:	b8 06 00 00 00       	mov    eax,0x6
c00130fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013100:	75 17                	jne    c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013102:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013104:	89 f0                	mov    eax,esi
c0013106:	83 c2 0d             	add    edx,0xd
c0013109:	0f b6 f0             	movzx  esi,al
c001310c:	0f b6 db             	movzx  ebx,bl
c001310f:	56                   	push   esi
c0013110:	53                   	push   ebx
c0013111:	52                   	push   edx
c0013112:	51                   	push   ecx
c0013113:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013116:	83 c4 10             	add    esp,0x10
c0013119:	5b                   	pop    ebx
c001311a:	5e                   	pop    esi
c001311b:	5f                   	pop    edi
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <File::exists()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	31 c0                	xor    eax,eax
c0013123:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013127:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001312e:	80 f9 19             	cmp    cl,0x19
c0013131:	77 24                	ja     c0013157 <File::exists()+0x39>
c0013133:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001313a:	85 c9                	test   ecx,ecx
c001313c:	74 19                	je     c0013157 <File::exists()+0x39>
c001313e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013144:	85 c9                	test   ecx,ecx
c0013146:	74 0f                	je     c0013157 <File::exists()+0x39>
c0013148:	83 c2 0d             	add    edx,0xd
c001314b:	50                   	push   eax
c001314c:	50                   	push   eax
c001314d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001314f:	52                   	push   edx
c0013150:	51                   	push   ecx
c0013151:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	83 c4 0c             	add    esp,0xc
c001315a:	c3                   	ret    
c001315b:	90                   	nop

c001315c <File::stat(unsigned long long*, bool*)>:
c001315c:	56                   	push   esi
c001315d:	53                   	push   ebx
c001315e:	50                   	push   eax
c001315f:	b8 0b 00 00 00       	mov    eax,0xb
c0013164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013168:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001316c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013173:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013177:	80 f9 19             	cmp    cl,0x19
c001317a:	77 3d                	ja     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c001317c:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 32                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013187:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318d:	85 c9                	test   ecx,ecx
c001318f:	74 28                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013191:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013197:	74 13                	je     c00131ac <File::stat(unsigned long long*, bool*)+0x50>
c0013199:	83 ec 04             	sub    esp,0x4
c001319c:	56                   	push   esi
c001319d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131a3:	51                   	push   ecx
c00131a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131aa:	eb 0a                	jmp    c00131b6 <File::stat(unsigned long long*, bool*)+0x5a>
c00131ac:	53                   	push   ebx
c00131ad:	83 c2 0d             	add    edx,0xd
c00131b0:	56                   	push   esi
c00131b1:	52                   	push   edx
c00131b2:	51                   	push   ecx
c00131b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	5a                   	pop    edx
c00131ba:	5b                   	pop    ebx
c00131bb:	5e                   	pop    esi
c00131bc:	c3                   	ret    

c00131bd <Fs::setcwd(Process*, char*)>:
c00131bd:	55                   	push   ebp
c00131be:	57                   	push   edi
c00131bf:	56                   	push   esi
c00131c0:	53                   	push   ebx
c00131c1:	81 ec 20 02 00 00    	sub    esp,0x220
c00131c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131d4:	57                   	push   edi
c00131d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131e0:	56                   	push   esi
c00131e1:	e8 bc fa ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e9:	e8 f3 d4 fe ff       	call   c00006e1 <strlen>
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	83 f8 02             	cmp    eax,0x2
c00131f4:	77 17                	ja     c001320d <Fs::setcwd(Process*, char*)+0x50>
c00131f6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131fb:	83 e8 41             	sub    eax,0x41
c00131fe:	83 f8 19             	cmp    eax,0x19
c0013201:	76 24                	jbe    c0013227 <Fs::setcwd(Process*, char*)+0x6a>
c0013203:	b8 03 00 00 00       	mov    eax,0x3
c0013208:	e9 e0 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	56                   	push   esi
c0013211:	e8 cb d4 fe ff       	call   c00006e1 <strlen>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	83 f8 03             	cmp    eax,0x3
c001321c:	75 34                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c001321e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013223:	75 2d                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c0013225:	eb cf                	jmp    c00131f6 <Fs::setcwd(Process*, char*)+0x39>
c0013227:	8b 14 85 e0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f20]
c001322e:	b8 05 00 00 00       	mov    eax,0x5
c0013233:	85 d2                	test   edx,edx
c0013235:	0f 84 b2 00 00 00    	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001323b:	b8 06 00 00 00       	mov    eax,0x6
c0013240:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013247:	0f 85 92 00 00 00    	jne    c00132df <Fs::setcwd(Process*, char*)+0x122>
c001324d:	e9 9b 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	68 14 01 00 00       	push   0x114
c001325a:	e8 c5 c3 ff ff       	call   c000f624 <malloc>
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	89 c3                	mov    ebx,eax
c0013264:	55                   	push   ebp
c0013265:	56                   	push   esi
c0013266:	50                   	push   eax
c0013267:	e8 e0 fb ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001326c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013271:	83 c4 0c             	add    esp,0xc
c0013274:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013278:	50                   	push   eax
c0013279:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327d:	50                   	push   eax
c001327e:	53                   	push   ebx
c001327f:	e8 d8 fe ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	83 f8 02             	cmp    eax,0x2
c001328a:	74 04                	je     c0013290 <Fs::setcwd(Process*, char*)+0xd3>
c001328c:	85 c0                	test   eax,eax
c001328e:	74 1c                	je     c00132ac <Fs::setcwd(Process*, char*)+0xef>
c0013290:	b8 01 00 00 00       	mov    eax,0x1
c0013295:	85 db                	test   ebx,ebx
c0013297:	74 54                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013299:	83 ec 0c             	sub    esp,0xc
c001329c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329e:	53                   	push   ebx
c001329f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a2:	83 c4 10             	add    esp,0x10
c00132a5:	b8 01 00 00 00       	mov    eax,0x1
c00132aa:	eb 41                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132ac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132b1:	75 1c                	jne    c00132cf <Fs::setcwd(Process*, char*)+0x112>
c00132b3:	b8 02 00 00 00       	mov    eax,0x2
c00132b8:	85 db                	test   ebx,ebx
c00132ba:	74 31                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132c1:	53                   	push   ebx
c00132c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	b8 02 00 00 00       	mov    eax,0x2
c00132cd:	eb 1e                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132cf:	85 db                	test   ebx,ebx
c00132d1:	74 0c                	je     c00132df <Fs::setcwd(Process*, char*)+0x122>
c00132d3:	83 ec 0c             	sub    esp,0xc
c00132d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d8:	53                   	push   ebx
c00132d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	50                   	push   eax
c00132e0:	50                   	push   eax
c00132e1:	56                   	push   esi
c00132e2:	57                   	push   edi
c00132e3:	e8 7b d4 fe ff       	call   c0000763 <strcpy>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	31 c0                	xor    eax,eax
c00132ed:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132f3:	5b                   	pop    ebx
c00132f4:	5e                   	pop    esi
c00132f5:	5f                   	pop    edi
c00132f6:	5d                   	pop    ebp
c00132f7:	c3                   	ret    

c00132f8 <Directory::Directory(char const*, Process*)>:
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ff:	83 ec 08             	sub    esp,0x8
c0013302:	6a 00                	push   0x0
c0013304:	50                   	push   eax
c0013305:	e8 b6 e1 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	89 10                	mov    DWORD PTR [eax],edx
c0013318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013326:	83 c0 0d             	add    eax,0xd
c0013329:	83 ec 04             	sub    esp,0x4
c001332c:	52                   	push   edx
c001332d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013331:	50                   	push   eax
c0013332:	e8 6b f9 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013341:	8d 50 bf             	lea    edx,[eax-0x41]
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013356:	90                   	nop
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	c3                   	ret    
c001335b:	90                   	nop

c001335c <Directory::open()>:
c001335c:	53                   	push   ebx
c001335d:	b8 0b 00 00 00       	mov    eax,0xb
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013369:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013370:	80 fa 19             	cmp    dl,0x19
c0013373:	77 3d                	ja     c00133b2 <Directory::open()+0x56>
c0013375:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c001337c:	85 d2                	test   edx,edx
c001337e:	74 32                	je     c00133b2 <Directory::open()+0x56>
c0013380:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013386:	85 d2                	test   edx,edx
c0013388:	74 28                	je     c00133b2 <Directory::open()+0x56>
c001338a:	b8 06 00 00 00       	mov    eax,0x6
c001338f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013393:	75 1d                	jne    c00133b2 <Directory::open()+0x56>
c0013395:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001339b:	50                   	push   eax
c001339c:	8b 02                	mov    eax,DWORD PTR [edx]
c001339e:	51                   	push   ecx
c001339f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a2:	51                   	push   ecx
c00133a3:	52                   	push   edx
c00133a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	85 c0                	test   eax,eax
c00133ac:	75 04                	jne    c00133b2 <Directory::open()+0x56>
c00133ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b2:	83 c4 08             	add    esp,0x8
c00133b5:	5b                   	pop    ebx
c00133b6:	c3                   	ret    
c00133b7:	90                   	nop

c00133b8 <Directory::close()>:
c00133b8:	53                   	push   ebx
c00133b9:	b8 0b 00 00 00       	mov    eax,0xb
c00133be:	83 ec 08             	sub    esp,0x8
c00133c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133cc:	80 fa 19             	cmp    dl,0x19
c00133cf:	77 41                	ja     c0013412 <Directory::close()+0x5a>
c00133d1:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c00133d8:	85 db                	test   ebx,ebx
c00133da:	74 36                	je     c0013412 <Directory::close()+0x5a>
c00133dc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e3:	74 2d                	je     c0013412 <Directory::close()+0x5a>
c00133e5:	b8 05 00 00 00       	mov    eax,0x5
c00133ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ee:	74 22                	je     c0013412 <Directory::close()+0x5a>
c00133f0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f4:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c00133fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013401:	53                   	push   ebx
c0013402:	53                   	push   ebx
c0013403:	8b 10                	mov    edx,DWORD PTR [eax]
c0013405:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001340b:	50                   	push   eax
c001340c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	83 c4 08             	add    esp,0x8
c0013415:	5b                   	pop    ebx
c0013416:	c3                   	ret    
c0013417:	90                   	nop

c0013418 <Directory::unlink()>:
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	b8 0b 00 00 00       	mov    eax,0xb
c0013420:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013424:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001342b:	80 f9 19             	cmp    cl,0x19
c001342e:	77 2f                	ja     c001345f <Directory::unlink()+0x47>
c0013430:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013437:	85 c9                	test   ecx,ecx
c0013439:	74 24                	je     c001345f <Directory::unlink()+0x47>
c001343b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013441:	85 c9                	test   ecx,ecx
c0013443:	74 1a                	je     c001345f <Directory::unlink()+0x47>
c0013445:	b8 06 00 00 00       	mov    eax,0x6
c001344a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001344e:	75 0f                	jne    c001345f <Directory::unlink()+0x47>
c0013450:	83 c2 0d             	add    edx,0xd
c0013453:	50                   	push   eax
c0013454:	50                   	push   eax
c0013455:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013457:	52                   	push   edx
c0013458:	51                   	push   ecx
c0013459:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	83 c4 0c             	add    esp,0xc
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <Directory::rename(char const*)>:
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	b8 0b 00 00 00       	mov    eax,0xb
c001346c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013470:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013477:	80 f9 19             	cmp    cl,0x19
c001347a:	77 32                	ja     c00134ae <Directory::rename(char const*)+0x4a>
c001347c:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013483:	85 c9                	test   ecx,ecx
c0013485:	74 27                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013487:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001348d:	85 c9                	test   ecx,ecx
c001348f:	74 1d                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013491:	b8 06 00 00 00       	mov    eax,0x6
c0013496:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001349a:	75 12                	jne    c00134ae <Directory::rename(char const*)+0x4a>
c001349c:	83 c2 0d             	add    edx,0xd
c001349f:	50                   	push   eax
c00134a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a6:	52                   	push   edx
c00134a7:	51                   	push   ecx
c00134a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	83 c4 0c             	add    esp,0xc
c00134b1:	c3                   	ret    

c00134b2 <Directory::exists()>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	31 c0                	xor    eax,eax
c00134b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134c2:	80 f9 19             	cmp    cl,0x19
c00134c5:	77 24                	ja     c00134eb <Directory::exists()+0x39>
c00134c7:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00134ce:	85 c9                	test   ecx,ecx
c00134d0:	74 19                	je     c00134eb <Directory::exists()+0x39>
c00134d2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d8:	85 c9                	test   ecx,ecx
c00134da:	74 0f                	je     c00134eb <Directory::exists()+0x39>
c00134dc:	83 c2 0d             	add    edx,0xd
c00134df:	50                   	push   eax
c00134e0:	50                   	push   eax
c00134e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e3:	52                   	push   edx
c00134e4:	51                   	push   ecx
c00134e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <Directory::read(dirent*)>:
c00134f0:	83 ec 1c             	sub    esp,0x1c
c00134f3:	b8 0b 00 00 00       	mov    eax,0xb
c00134f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013503:	80 fa 19             	cmp    dl,0x19
c0013506:	77 30                	ja     c0013538 <Directory::read(dirent*)+0x48>
c0013508:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c001350f:	85 d2                	test   edx,edx
c0013511:	74 25                	je     c0013538 <Directory::read(dirent*)+0x48>
c0013513:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001351a:	74 1c                	je     c0013538 <Directory::read(dirent*)+0x48>
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013521:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013525:	52                   	push   edx
c0013526:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001352a:	6a 00                	push   0x0
c001352c:	68 10 01 00 00       	push   0x110
c0013531:	51                   	push   ecx
c0013532:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013535:	83 c4 20             	add    esp,0x20
c0013538:	83 c4 1c             	add    esp,0x1c
c001353b:	c3                   	ret    

c001353c <Directory::create()>:
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	b8 0b 00 00 00       	mov    eax,0xb
c0013544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013548:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354f:	80 f9 19             	cmp    cl,0x19
c0013552:	77 2f                	ja     c0013583 <Directory::create()+0x47>
c0013554:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001355b:	85 c9                	test   ecx,ecx
c001355d:	74 24                	je     c0013583 <Directory::create()+0x47>
c001355f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013565:	85 c9                	test   ecx,ecx
c0013567:	74 1a                	je     c0013583 <Directory::create()+0x47>
c0013569:	b8 06 00 00 00       	mov    eax,0x6
c001356e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013572:	75 0f                	jne    c0013583 <Directory::create()+0x47>
c0013574:	83 c2 0d             	add    edx,0xd
c0013577:	50                   	push   eax
c0013578:	50                   	push   eax
c0013579:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357b:	52                   	push   edx
c001357c:	51                   	push   ecx
c001357d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013588:	b8 0a 00 00 00       	mov    eax,0xa
c001358d:	c3                   	ret    

c001358e <Bus::Bus(char const*)>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013595:	83 ec 08             	sub    esp,0x8
c0013598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359c:	50                   	push   eax
c001359d:	e8 68 09 00 00       	call   c0013f0a <Device::Device(char const*)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	89 10                	mov    DWORD PTR [eax],edx
c00135b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135be:	90                   	nop
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <Bus::~Bus()>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	89 10                	mov    DWORD PTR [eax],edx
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	83 ec 0c             	sub    esp,0xc
c00135d9:	50                   	push   eax
c00135da:	e8 0d 06 00 00       	call   c0013bec <Device::~Device()>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	90                   	nop
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	c3                   	ret    
c00135e7:	90                   	nop

c00135e8 <Bus::~Bus()>:
c00135e8:	83 ec 0c             	sub    esp,0xc
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f2:	e8 cd ff ff ff       	call   c00135c4 <Bus::~Bus()>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	83 ec 08             	sub    esp,0x8
c00135fd:	68 58 01 00 00       	push   0x158
c0013602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013606:	e8 08 f2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001360b:	83 c4 10             	add    esp,0x10
c001360e:	83 c4 0c             	add    esp,0xc
c0013611:	c3                   	ret    

c0013612 <Buzzer::Buzzer(char const*)>:
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013619:	83 ec 08             	sub    esp,0x8
c001361c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013620:	50                   	push   eax
c0013621:	e8 e4 08 00 00       	call   c0013f0a <Device::Device(char const*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c001362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013632:	89 10                	mov    DWORD PTR [eax],edx
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013650:	90                   	nop
c0013651:	83 c4 0c             	add    esp,0xc
c0013654:	c3                   	ret    
c0013655:	90                   	nop

c0013656 <Buzzer::~Buzzer()>:
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c001365e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013662:	89 10                	mov    DWORD PTR [eax],edx
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	50                   	push   eax
c001366c:	e8 7b 05 00 00       	call   c0013bec <Device::~Device()>
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	90                   	nop
c0013675:	83 c4 0c             	add    esp,0xc
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <Buzzer::~Buzzer()>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	83 ec 0c             	sub    esp,0xc
c0013680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013684:	e8 cd ff ff ff       	call   c0013656 <Buzzer::~Buzzer()>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	83 ec 08             	sub    esp,0x8
c001368f:	68 5c 01 00 00       	push   0x15c
c0013694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013698:	e8 76 f1 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	83 c4 0c             	add    esp,0xc
c00136a3:	c3                   	ret    

c00136a4 <Buzzer::stop()>:
c00136a4:	83 ec 14             	sub    esp,0x14
c00136a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ad:	6a 00                	push   0x0
c00136af:	50                   	push   eax
c00136b0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    

c00136b7 <beepThread(void*)>:
c00136b7:	53                   	push   ebx
c00136b8:	83 ec 08             	sub    esp,0x8
c00136bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136bf:	e8 28 9e 00 00       	call   c001d4ec <unlockScheduler()>
c00136c4:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136c9:	52                   	push   edx
c00136ca:	52                   	push   edx
c00136cb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136d1:	52                   	push   edx
c00136d2:	50                   	push   eax
c00136d3:	e8 62 a3 00 00       	call   c001da3a <nanoSleep(unsigned long long)>
c00136d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136db:	e8 c4 ff ff ff       	call   c00136a4 <Buzzer::stop()>
c00136e0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136e8:	83 c4 18             	add    esp,0x18
c00136eb:	5b                   	pop    ebx
c00136ec:	e9 8f a2 00 00       	jmp    c001d980 <blockTask(TaskState)>
c00136f1:	90                   	nop

c00136f2 <Buzzer::beep(int, int, bool)>:
c00136f2:	57                   	push   edi
c00136f3:	56                   	push   esi
c00136f4:	53                   	push   ebx
c00136f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013701:	52                   	push   edx
c0013702:	52                   	push   edx
c0013703:	8b 06                	mov    eax,DWORD PTR [esi]
c0013705:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013709:	56                   	push   esi
c001370a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	89 f8                	mov    eax,edi
c0013712:	84 c0                	test   al,al
c0013714:	74 1f                	je     c0013735 <Buzzer::beep(int, int, bool)+0x43>
c0013716:	50                   	push   eax
c0013717:	50                   	push   eax
c0013718:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001371e:	99                   	cdq    
c001371f:	52                   	push   edx
c0013720:	50                   	push   eax
c0013721:	e8 14 a3 00 00       	call   c001da3a <nanoSleep(unsigned long long)>
c0013726:	83 c4 10             	add    esp,0x10
c0013729:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001372d:	5b                   	pop    ebx
c001372e:	5e                   	pop    esi
c001372f:	5f                   	pop    edi
c0013730:	e9 6f ff ff ff       	jmp    c00136a4 <Buzzer::stop()>
c0013735:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001373b:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0013740:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013748:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001374c:	c7 44 24 14 b7 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136b7
c0013754:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013758:	5b                   	pop    ebx
c0013759:	5e                   	pop    esi
c001375a:	5f                   	pop    edi
c001375b:	e9 bc 9e 00 00       	jmp    c001d61c <Process::createThread(void (*)(void*), void*, int)>

c0013760 <User::loadClockSettings(int)>:
c0013760:	53                   	push   ebx
c0013761:	83 ec 14             	sub    esp,0x14
c0013764:	68 14 01 00 00       	push   0x114
c0013769:	e8 b6 be ff ff       	call   c000f624 <malloc>
c001376e:	83 c4 0c             	add    esp,0xc
c0013771:	89 c3                	mov    ebx,eax
c0013773:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c0013779:	68 9c a2 02 c0       	push   0xc002a29c
c001377e:	50                   	push   eax
c001377f:	e8 c8 f6 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0013784:	58                   	pop    eax
c0013785:	5a                   	pop    edx
c0013786:	6a 01                	push   0x1
c0013788:	53                   	push   ebx
c0013789:	e8 22 f7 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001378e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013791:	e8 78 f7 ff ff       	call   c0012f0e <File::close()>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	85 db                	test   ebx,ebx
c001379b:	74 0f                	je     c00137ac <User::loadClockSettings(int)+0x4c>
c001379d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137a6:	83 c4 08             	add    esp,0x8
c00137a9:	5b                   	pop    ebx
c00137aa:	ff e0                	jmp    eax
c00137ac:	83 c4 08             	add    esp,0x8
c00137af:	5b                   	pop    ebx
c00137b0:	c3                   	ret    
c00137b1:	90                   	nop

c00137b2 <Clock::Clock(char const*)>:
c00137b2:	83 ec 0c             	sub    esp,0xc
c00137b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b9:	83 ec 08             	sub    esp,0x8
c00137bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c0:	50                   	push   eax
c00137c1:	e8 44 07 00 00       	call   c0013f0a <Device::Device(char const*)>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d2:	89 10                	mov    DWORD PTR [eax],edx
c00137d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137e2:	90                   	nop
c00137e3:	83 c4 0c             	add    esp,0xc
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Clock::~Clock()>:
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f4:	89 10                	mov    DWORD PTR [eax],edx
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	50                   	push   eax
c00137fe:	e8 e9 03 00 00       	call   c0013bec <Device::~Device()>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	90                   	nop
c0013807:	83 c4 0c             	add    esp,0xc
c001380a:	c3                   	ret    
c001380b:	90                   	nop

c001380c <Clock::~Clock()>:
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	83 ec 0c             	sub    esp,0xc
c0013812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013816:	e8 cd ff ff ff       	call   c00137e8 <Clock::~Clock()>
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	83 ec 08             	sub    esp,0x8
c0013821:	68 58 01 00 00       	push   0x158
c0013826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382a:	e8 e4 ef ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	83 c4 0c             	add    esp,0xc
c0013835:	c3                   	ret    

c0013836 <Clock::timeInSecondsLocal()>:
c0013836:	53                   	push   ebx
c0013837:	83 ec 14             	sub    esp,0x14
c001383a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001383e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013840:	50                   	push   eax
c0013841:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013844:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c001384b:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c0013851:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013857:	89 cb                	mov    ebx,ecx
c0013859:	c1 fb 1f             	sar    ebx,0x1f
c001385c:	01 c8                	add    eax,ecx
c001385e:	11 da                	adc    edx,ebx
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	31 c9                	xor    ecx,ecx
c0013865:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c001386c:	74 05                	je     c0013873 <Clock::timeInSecondsLocal()+0x3d>
c001386e:	b9 08 07 00 00       	mov    ecx,0x708
c0013873:	31 db                	xor    ebx,ebx
c0013875:	01 c8                	add    eax,ecx
c0013877:	11 da                	adc    edx,ebx
c0013879:	83 c4 08             	add    esp,0x8
c001387c:	5b                   	pop    ebx
c001387d:	c3                   	ret    

c001387e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001387e:	57                   	push   edi
c001387f:	56                   	push   esi
c0013880:	53                   	push   ebx
c0013881:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013885:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013889:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001388f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013892:	0f b6 05 50 dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc50
c0013899:	03 05 54 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc54
c001389f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138a5:	99                   	cdq    
c00138a6:	29 c6                	sub    esi,eax
c00138a8:	19 d7                	sbb    edi,edx
c00138aa:	89 f0                	mov    eax,esi
c00138ac:	89 fa                	mov    edx,edi
c00138ae:	31 f6                	xor    esi,esi
c00138b0:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c00138b7:	74 05                	je     c00138be <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138b9:	be 08 07 00 00       	mov    esi,0x708
c00138be:	31 ff                	xor    edi,edi
c00138c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138c4:	29 f0                	sub    eax,esi
c00138c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ca:	19 fa                	sbb    edx,edi
c00138cc:	89 d8                	mov    eax,ebx
c00138ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d2:	5b                   	pop    ebx
c00138d3:	5e                   	pop    esi
c00138d4:	5f                   	pop    edi
c00138d5:	ff e0                	jmp    eax

c00138d7 <datetimeToSeconds(datetime_t)>:
c00138d7:	55                   	push   ebp
c00138d8:	57                   	push   edi
c00138d9:	56                   	push   esi
c00138da:	53                   	push   ebx
c00138db:	83 ec 14             	sub    esp,0x14
c00138de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138e6:	89 d3                	mov    ebx,edx
c00138e8:	0f b6 c6             	movzx  eax,dh
c00138eb:	c1 eb 10             	shr    ebx,0x10
c00138ee:	48                   	dec    eax
c00138ef:	66 81 eb 6c 07       	sub    bx,0x76c
c00138f4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138f8:	0f b6 f5             	movzx  esi,ch
c00138fb:	89 cf                	mov    edi,ecx
c00138fd:	6b f6 3c             	imul   esi,esi,0x3c
c0013900:	c1 ef 10             	shr    edi,0x10
c0013903:	0f b6 c9             	movzx  ecx,cl
c0013906:	89 f8                	mov    eax,edi
c0013908:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001390e:	0f b6 f8             	movzx  edi,al
c0013911:	0f b6 d2             	movzx  edx,dl
c0013914:	01 fe                	add    esi,edi
c0013916:	01 f1                	add    ecx,esi
c0013918:	0f b7 f3             	movzx  esi,bx
c001391b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001391f:	c1 f9 1f             	sar    ecx,0x1f
c0013922:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013927:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001392b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013930:	8b 0c 8d 00 a3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5d00]
c0013937:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001393b:	76 29                	jbe    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c001393d:	f6 c3 03             	test   bl,0x3
c0013940:	75 24                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013942:	31 d2                	xor    edx,edx
c0013944:	bf 64 00 00 00       	mov    edi,0x64
c0013949:	89 d8                	mov    eax,ebx
c001394b:	66 f7 f7             	div    di
c001394e:	66 85 d2             	test   dx,dx
c0013951:	75 12                	jne    c0013965 <datetimeToSeconds(datetime_t)+0x8e>
c0013953:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013959:	bf 90 01 00 00       	mov    edi,0x190
c001395e:	99                   	cdq    
c001395f:	f7 ff                	idiv   edi
c0013961:	85 d2                	test   edx,edx
c0013963:	75 01                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013965:	41                   	inc    ecx
c0013966:	66 83 fb 46          	cmp    bx,0x46
c001396a:	76 45                	jbe    c00139b1 <datetimeToSeconds(datetime_t)+0xda>
c001396c:	bb 46 00 00 00       	mov    ebx,0x46
c0013971:	bf 64 00 00 00       	mov    edi,0x64
c0013976:	bd 90 01 00 00       	mov    ebp,0x190
c001397b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013980:	f6 c3 03             	test   bl,0x3
c0013983:	75 23                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013985:	89 d8                	mov    eax,ebx
c0013987:	99                   	cdq    
c0013988:	f7 ff                	idiv   edi
c001398a:	b8 6e 01 00 00       	mov    eax,0x16e
c001398f:	85 d2                	test   edx,edx
c0013991:	75 15                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013993:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013999:	99                   	cdq    
c001399a:	f7 fd                	idiv   ebp
c001399c:	83 fa 01             	cmp    edx,0x1
c001399f:	19 c0                	sbb    eax,eax
c00139a1:	f7 d0                	not    eax
c00139a3:	05 6e 01 00 00       	add    eax,0x16e
c00139a8:	01 c1                	add    ecx,eax
c00139aa:	43                   	inc    ebx
c00139ab:	39 f3                	cmp    ebx,esi
c00139ad:	7c cc                	jl     c001397b <datetimeToSeconds(datetime_t)+0xa4>
c00139af:	eb 35                	jmp    c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b1:	74 33                	je     c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b3:	b8 45 00 00 00       	mov    eax,0x45
c00139b8:	89 c2                	mov    edx,eax
c00139ba:	83 e2 03             	and    edx,0x3
c00139bd:	39 f0                	cmp    eax,esi
c00139bf:	7e 0f                	jle    c00139d0 <datetimeToSeconds(datetime_t)+0xf9>
c00139c1:	83 fa 01             	cmp    edx,0x1
c00139c4:	19 d2                	sbb    edx,edx
c00139c6:	48                   	dec    eax
c00139c7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139ce:	eb e8                	jmp    c00139b8 <datetimeToSeconds(datetime_t)+0xe1>
c00139d0:	b8 6d 01 00 00       	mov    eax,0x16d
c00139d5:	85 d2                	test   edx,edx
c00139d7:	75 0b                	jne    c00139e4 <datetimeToSeconds(datetime_t)+0x10d>
c00139d9:	66 83 fb 01          	cmp    bx,0x1
c00139dd:	19 c0                	sbb    eax,eax
c00139df:	05 6e 01 00 00       	add    eax,0x16e
c00139e4:	29 c1                	sub    ecx,eax
c00139e6:	b8 80 51 01 00       	mov    eax,0x15180
c00139eb:	f7 e9                	imul   ecx
c00139ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139f5:	83 c4 14             	add    esp,0x14
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	5f                   	pop    edi
c00139fb:	5d                   	pop    ebp
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139fe:	57                   	push   edi
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a07:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a12:	e8 c0 fe ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c0013a17:	59                   	pop    ecx
c0013a18:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c0013a1f:	5b                   	pop    ebx
c0013a20:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c0013a26:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a2c:	89 cb                	mov    ebx,ecx
c0013a2e:	c1 fb 1f             	sar    ebx,0x1f
c0013a31:	29 c8                	sub    eax,ecx
c0013a33:	19 da                	sbb    edx,ebx
c0013a35:	31 c9                	xor    ecx,ecx
c0013a37:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c0013a3e:	74 05                	je     c0013a45 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a40:	b9 08 07 00 00       	mov    ecx,0x708
c0013a45:	31 db                	xor    ebx,ebx
c0013a47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a4b:	29 c8                	sub    eax,ecx
c0013a4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a51:	19 da                	sbb    edx,ebx
c0013a53:	89 f8                	mov    eax,edi
c0013a55:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a59:	5b                   	pop    ebx
c0013a5a:	5e                   	pop    esi
c0013a5b:	5f                   	pop    edi
c0013a5c:	ff e0                	jmp    eax

c0013a5e <secondsToDatetime(unsigned long long)>:
c0013a5e:	55                   	push   ebp
c0013a5f:	57                   	push   edi
c0013a60:	56                   	push   esi
c0013a61:	53                   	push   ebx
c0013a62:	83 ec 1c             	sub    esp,0x1c
c0013a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a71:	6a 00                	push   0x0
c0013a73:	68 80 51 01 00       	push   0x15180
c0013a78:	55                   	push   ebp
c0013a79:	57                   	push   edi
c0013a7a:	e8 cd 26 01 00       	call   c002614c <__udivdi3>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a8c:	6a 00                	push   0x0
c0013a8e:	68 80 51 01 00       	push   0x15180
c0013a93:	55                   	push   ebp
c0013a94:	57                   	push   edi
c0013a95:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a9a:	e8 ad 27 01 00       	call   c002624c <__umoddi3>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	99                   	cdq    
c0013aa3:	f7 ff                	idiv   edi
c0013aa5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013aaa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aad:	89 d0                	mov    eax,edx
c0013aaf:	99                   	cdq    
c0013ab0:	f7 ff                	idiv   edi
c0013ab2:	85 db                	test   ebx,ebx
c0013ab4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ab7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aba:	79 11                	jns    c0013acd <secondsToDatetime(unsigned long long)+0x6f>
c0013abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ac0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ac6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013acb:	eb 07                	jmp    c0013ad4 <secondsToDatetime(unsigned long long)+0x76>
c0013acd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad2:	89 d8                	mov    eax,ebx
c0013ad4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ad9:	99                   	cdq    
c0013ada:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013adf:	f7 f9                	idiv   ecx
c0013ae1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ae6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aea:	31 d2                	xor    edx,edx
c0013aec:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013af4:	01 c3                	add    ebx,eax
c0013af6:	89 d8                	mov    eax,ebx
c0013af8:	f7 f1                	div    ecx
c0013afa:	31 d2                	xor    edx,edx
c0013afc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013aff:	89 d8                	mov    eax,ebx
c0013b01:	f7 f7                	div    edi
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	29 c1                	sub    ecx,eax
c0013b07:	89 d8                	mov    eax,ebx
c0013b09:	f7 f5                	div    ebp
c0013b0b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b10:	29 c1                	sub    ecx,eax
c0013b12:	31 d2                	xor    edx,edx
c0013b14:	89 c8                	mov    eax,ecx
c0013b16:	f7 f5                	div    ebp
c0013b18:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b21:	31 d2                	xor    edx,edx
c0013b23:	89 c8                	mov    eax,ecx
c0013b25:	f7 f5                	div    ebp
c0013b27:	31 d2                	xor    edx,edx
c0013b29:	01 c3                	add    ebx,eax
c0013b2b:	89 c8                	mov    eax,ecx
c0013b2d:	f7 f7                	div    edi
c0013b2f:	bf 99 00 00 00       	mov    edi,0x99
c0013b34:	29 c3                	sub    ebx,eax
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b40:	29 c3                	sub    ebx,eax
c0013b42:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b45:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b48:	bb 05 00 00 00       	mov    ebx,0x5
c0013b4d:	83 c1 02             	add    ecx,0x2
c0013b50:	89 c8                	mov    eax,ecx
c0013b52:	f7 f7                	div    edi
c0013b54:	31 d2                	xor    edx,edx
c0013b56:	89 c7                	mov    edi,eax
c0013b58:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b5e:	83 c0 02             	add    eax,0x2
c0013b61:	f7 f3                	div    ebx
c0013b63:	89 eb                	mov    ebx,ebp
c0013b65:	29 c3                	sub    ebx,eax
c0013b67:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b6d:	88 1e                	mov    BYTE PTR [esi],bl
c0013b6f:	19 c0                	sbb    eax,eax
c0013b71:	31 d2                	xor    edx,edx
c0013b73:	83 e0 0c             	and    eax,0xc
c0013b76:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b7a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b82:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b86:	83 f9 01             	cmp    ecx,0x1
c0013b89:	0f 96 c2             	setbe  dl
c0013b8c:	41                   	inc    ecx
c0013b8d:	01 d0                	add    eax,edx
c0013b8f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b92:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b96:	83 c4 1c             	add    esp,0x1c
c0013b99:	89 f0                	mov    eax,esi
c0013b9b:	5b                   	pop    ebx
c0013b9c:	5e                   	pop    esi
c0013b9d:	5f                   	pop    edi
c0013b9e:	5d                   	pop    ebp
c0013b9f:	c2 04 00             	ret    0x4

c0013ba2 <Clock::timeInDatetimeLocal()>:
c0013ba2:	53                   	push   ebx
c0013ba3:	83 ec 14             	sub    esp,0x14
c0013ba6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013baa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bae:	e8 83 fc ff ff       	call   c0013836 <Clock::timeInSecondsLocal()>
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	52                   	push   edx
c0013bb7:	50                   	push   eax
c0013bb8:	53                   	push   ebx
c0013bb9:	e8 a0 fe ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c0013bbe:	89 d8                	mov    eax,ebx
c0013bc0:	83 c4 14             	add    esp,0x14
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c2 04 00             	ret    0x4
c0013bc7:	90                   	nop

c0013bc8 <Device::hibernate()>:
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Device::wake()>:
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <Device::detect()>:
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Device::disableLegacy()>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <Device::powerSaving(PowerSavingLevel)>:
c0013bd0:	c3                   	ret    
c0013bd1:	90                   	nop

c0013bd2 <DriverlessDevice::close(int, int, void*)>:
c0013bd2:	31 c0                	xor    eax,eax
c0013bd4:	c3                   	ret    
c0013bd5:	90                   	nop

c0013bd6 <DriverlessDevice::detect()>:
c0013bd6:	c3                   	ret    
c0013bd7:	90                   	nop

c0013bd8 <DriverlessDevice::open(int, int, void*)>:
c0013bd8:	83 ec 18             	sub    esp,0x18
c0013bdb:	68 30 a3 02 c0       	push   0xc002a330
c0013be0:	e8 b4 62 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0013be5:	83 c8 ff             	or     eax,0xffffffff
c0013be8:	83 c4 1c             	add    esp,0x1c
c0013beb:	c3                   	ret    

c0013bec <Device::~Device()>:
c0013bec:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf5:	89 10                	mov    DWORD PTR [eax],edx
c0013bf7:	90                   	nop
c0013bf8:	c3                   	ret    
c0013bf9:	90                   	nop

c0013bfa <Device::~Device()>:
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c01:	e8 e6 ff ff ff       	call   c0013bec <Device::~Device()>
c0013c06:	83 c4 04             	add    esp,0x4
c0013c09:	83 ec 08             	sub    esp,0x8
c0013c0c:	68 58 01 00 00       	push   0x158
c0013c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c15:	e8 f9 eb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	83 c4 0c             	add    esp,0xc
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::findAndLoadDriver()>:
c0013c22:	c3                   	ret    
c0013c23:	90                   	nop

c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c24:	57                   	push   edi
c0013c25:	b9 09 00 00 00       	mov    ecx,0x9
c0013c2a:	56                   	push   esi
c0013c2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c2f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c33:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c3d:	81 c7 18 01 00 00    	add    edi,0x118
c0013c43:	fc                   	cld    
c0013c44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c46:	5e                   	pop    esi
c0013c47:	5f                   	pop    edi
c0013c48:	c3                   	ret    
c0013c49:	90                   	nop

c0013c4a <Device::preOpenACPI(void*, char*, char*)>:
c0013c4a:	56                   	push   esi
c0013c4b:	53                   	push   ebx
c0013c4c:	83 ec 08             	sub    esp,0x8
c0013c4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c57:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c65:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c6b:	6a 1e                	push   0x1e
c0013c6d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c77:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c7d:	50                   	push   eax
c0013c7e:	e8 1d ca fe ff       	call   c00006a0 <memcpy>
c0013c83:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c87:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c8b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c93:	83 c4 14             	add    esp,0x14
c0013c96:	5b                   	pop    ebx
c0013c97:	5e                   	pop    esi
c0013c98:	e9 03 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c9d:	90                   	nop

c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ca7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cae:	75 0b                	jne    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb9:	eb 1e                	jmp    c0013cd9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cbb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cc6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ccc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd9:	ff e0                	jmp    eax
c0013cdb:	90                   	nop

c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ce0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ce5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cec:	75 0b                	jne    c0013cf9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cf0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cf7:	eb 1e                	jmp    c0013d17 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cf9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cfe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d04:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d14:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d17:	ff e0                	jmp    eax
c0013d19:	90                   	nop

c0013d1a <Device::addChild(Device*)>:
c0013d1a:	53                   	push   ebx
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d26:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d2c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d34:	85 d2                	test   edx,edx
c0013d36:	74 04                	je     c0013d3c <Device::addChild(Device*)+0x22>
c0013d38:	89 d3                	mov    ebx,edx
c0013d3a:	eb f6                	jmp    c0013d32 <Device::addChild(Device*)+0x18>
c0013d3c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	6a 08                	push   0x8
c0013d44:	e8 db b8 ff ff       	call   c000f624 <malloc>
c0013d49:	89 03                	mov    DWORD PTR [ebx],eax
c0013d4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d58:	83 c4 18             	add    esp,0x18
c0013d5b:	5b                   	pop    ebx
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <Device::removeAllChildren()>:
c0013d5e:	56                   	push   esi
c0013d5f:	53                   	push   ebx
c0013d60:	52                   	push   edx
c0013d61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d65:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6e:	74 17                	je     c0013d87 <Device::removeAllChildren()+0x29>
c0013d70:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d73:	85 c0                	test   eax,eax
c0013d75:	74 0c                	je     c0013d83 <Device::removeAllChildren()+0x25>
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d7c:	50                   	push   eax
c0013d7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d85:	eb e4                	jmp    c0013d6b <Device::removeAllChildren()+0xd>
c0013d87:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013da0:	58                   	pop    eax
c0013da1:	5b                   	pop    ebx
c0013da2:	5e                   	pop    esi
c0013da3:	c3                   	ret    

c0013da4 <Device::hibernateAll()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dae:	53                   	push   ebx
c0013daf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013db2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 0f                	je     c0013dcf <Device::hibernateAll()+0x2b>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 d9 ff ff ff       	call   c0013da4 <Device::hibernateAll()>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	eb e9                	jmp    c0013db8 <Device::hibernateAll()+0x14>
c0013dcf:	83 c4 08             	add    esp,0x8
c0013dd2:	5b                   	pop    ebx
c0013dd3:	c3                   	ret    

c0013dd4 <Device::wakeAll()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dde:	53                   	push   ebx
c0013ddf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013de2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dee:	74 0f                	je     c0013dff <Device::wakeAll()+0x2b>
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df6:	e8 d9 ff ff ff       	call   c0013dd4 <Device::wakeAll()>
c0013dfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfd:	eb e9                	jmp    c0013de8 <Device::wakeAll()+0x14>
c0013dff:	83 c4 08             	add    esp,0x8
c0013e02:	5b                   	pop    ebx
c0013e03:	c3                   	ret    

c0013e04 <Device::detectAll()>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 14             	sub    esp,0x14
c0013e08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0e:	53                   	push   ebx
c0013e0f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1e:	74 0f                	je     c0013e2f <Device::detectAll()+0x2b>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e26:	e8 d9 ff ff ff       	call   c0013e04 <Device::detectAll()>
c0013e2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2d:	eb e9                	jmp    c0013e18 <Device::detectAll()+0x14>
c0013e2f:	83 c4 08             	add    esp,0x8
c0013e32:	5b                   	pop    ebx
c0013e33:	c3                   	ret    

c0013e34 <Device::disableLegacyAll()>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 14             	sub    esp,0x14
c0013e38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e3e:	53                   	push   ebx
c0013e3f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4e:	74 0f                	je     c0013e5f <Device::disableLegacyAll()+0x2b>
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e56:	e8 d9 ff ff ff       	call   c0013e34 <Device::disableLegacyAll()>
c0013e5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5d:	eb e9                	jmp    c0013e48 <Device::disableLegacyAll()+0x14>
c0013e5f:	83 c4 08             	add    esp,0x8
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Device::loadDriversForAll()>:
c0013e64:	53                   	push   ebx
c0013e65:	83 ec 08             	sub    esp,0x8
c0013e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e74:	85 db                	test   ebx,ebx
c0013e76:	74 12                	je     c0013e8a <Device::loadDriversForAll()+0x26>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e7e:	e8 e1 ff ff ff       	call   c0013e64 <Device::loadDriversForAll()>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	89 d8                	mov    eax,ebx
c0013e88:	eb e8                	jmp    c0013e72 <Device::loadDriversForAll()+0xe>
c0013e8a:	83 c4 08             	add    esp,0x8
c0013e8d:	5b                   	pop    ebx
c0013e8e:	c3                   	ret    
c0013e8f:	90                   	nop

c0013e90 <Device::closeAll()>:
c0013e90:	53                   	push   ebx
c0013e91:	83 ec 08             	sub    esp,0x8
c0013e94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9a:	6a 00                	push   0x0
c0013e9c:	6a 00                	push   0x0
c0013e9e:	6a 00                	push   0x0
c0013ea0:	53                   	push   ebx
c0013ea1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb0:	74 0f                	je     c0013ec1 <Device::closeAll()+0x31>
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb8:	e8 d3 ff ff ff       	call   c0013e90 <Device::closeAll()>
c0013ebd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ebf:	eb e9                	jmp    c0013eaa <Device::closeAll()+0x1a>
c0013ec1:	83 c4 08             	add    esp,0x8
c0013ec4:	5b                   	pop    ebx
c0013ec5:	c3                   	ret    

c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec6:	56                   	push   esi
c0013ec7:	53                   	push   ebx
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ecf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013eda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee6:	74 0f                	je     c0013ef7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee8:	52                   	push   edx
c0013ee9:	52                   	push   edx
c0013eea:	56                   	push   esi
c0013eeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eee:	e8 d3 ff ff ff       	call   c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>
c0013ef3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef5:	eb e9                	jmp    c0013ee0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef7:	58                   	pop    eax
c0013ef8:	5b                   	pop    ebx
c0013ef9:	5e                   	pop    esi
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <Device::setName(char const*)>:
c0013efc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f04:	e9 5a c8 fe ff       	jmp    c0000763 <strcpy>
c0013f09:	90                   	nop

c0013f0a <Device::Device(char const*)>:
c0013f0a:	83 ec 1c             	sub    esp,0x1c
c0013f0d:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f16:	89 10                	mov    DWORD PTR [eax],edx
c0013f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f38:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f46:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f50:	83 ec 08             	sub    esp,0x8
c0013f53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f5b:	e8 9c ff ff ff       	call   c0013efc <Device::setName(char const*)>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f72:	e8 ad b6 ff ff       	call   c000f624 <malloc>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f8b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fda:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014000:	90                   	nop
c0014001:	83 c4 1c             	add    esp,0x1c
c0014004:	c3                   	ret    
c0014005:	90                   	nop

c0014006 <Device::getName()>:
c0014006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001400a:	05 d0 00 00 00       	add    eax,0xd0
c001400f:	c3                   	ret    

c0014010 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014017:	83 ec 08             	sub    esp,0x8
c001401a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401e:	50                   	push   eax
c001401f:	e8 e6 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c001402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014030:	89 10                	mov    DWORD PTR [eax],edx
c0014032:	90                   	nop
c0014033:	83 c4 0c             	add    esp,0xc
c0014036:	c3                   	ret    
c0014037:	90                   	nop

c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014038:	57                   	push   edi
c0014039:	56                   	push   esi
c001403a:	53                   	push   ebx
c001403b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001403f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014043:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014047:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001404d:	75 0c                	jne    c001405b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001404f:	52                   	push   edx
c0014050:	52                   	push   edx
c0014051:	53                   	push   ebx
c0014052:	56                   	push   esi
c0014053:	e8 32 40 01 00       	call   c002808a <LinkedList<Device>::addElement(Device*)>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014064:	74 12                	je     c0014078 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014066:	50                   	push   eax
c0014067:	57                   	push   edi
c0014068:	56                   	push   esi
c0014069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001406c:	e8 c7 ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	eb e9                	jmp    c0014061 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014078:	5b                   	pop    ebx
c0014079:	5e                   	pop    esi
c001407a:	5f                   	pop    edi
c001407b:	c3                   	ret    

c001407c <getDevicesOfType(DeviceType)>:
c001407c:	53                   	push   ebx
c001407d:	83 ec 14             	sub    esp,0x14
c0014080:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014084:	53                   	push   ebx
c0014085:	e8 dc 40 01 00       	call   c0028166 <LinkedList<Device>::LinkedList()>
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014091:	53                   	push   ebx
c0014092:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c0014098:	e8 9b ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001409d:	89 d8                	mov    eax,ebx
c001409f:	83 c4 18             	add    esp,0x18
c00140a2:	5b                   	pop    ebx
c00140a3:	c2 04 00             	ret    0x4

c00140a6 <HardDiskController::HardDiskController(char const*)>:
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b4:	50                   	push   eax
c00140b5:	e8 50 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c6:	89 10                	mov    DWORD PTR [eax],edx
c00140c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140d6:	90                   	nop
c00140d7:	83 c4 0c             	add    esp,0xc
c00140da:	c3                   	ret    
c00140db:	90                   	nop

c00140dc <HardDiskController::~HardDiskController()>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e8:	89 10                	mov    DWORD PTR [eax],edx
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	50                   	push   eax
c00140f2:	e8 f5 fa ff ff       	call   c0013bec <Device::~Device()>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	90                   	nop
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	c3                   	ret    
c00140ff:	90                   	nop

c0014100 <HardDiskController::~HardDiskController()>:
c0014100:	83 ec 0c             	sub    esp,0xc
c0014103:	83 ec 0c             	sub    esp,0xc
c0014106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001410a:	e8 cd ff ff ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	83 ec 08             	sub    esp,0x8
c0014115:	68 58 01 00 00       	push   0x158
c001411a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411e:	e8 f0 e6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	83 c4 0c             	add    esp,0xc
c0014129:	c3                   	ret    

c001412a <PhysicalDisk::eject()>:
c001412a:	83 ec 18             	sub    esp,0x18
c001412d:	68 d4 a3 02 c0       	push   0xc002a3d4
c0014132:	e8 bc e7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014137:	83 c8 ff             	or     eax,0xffffffff
c001413a:	83 c4 1c             	add    esp,0x1c
c001413d:	c3                   	ret    

c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001413e:	83 ec 0c             	sub    esp,0xc
c0014141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014145:	83 ec 08             	sub    esp,0x8
c0014148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414c:	50                   	push   eax
c001414d:	e8 b8 fd ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c001415a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415e:	89 10                	mov    DWORD PTR [eax],edx
c0014160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014164:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001416b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001418c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014196:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141a0:	90                   	nop
c00141a1:	83 c4 0c             	add    esp,0xc
c00141a4:	c3                   	ret    
c00141a5:	90                   	nop

c00141a6 <PhysicalDisk::startCache()>:
c00141a6:	56                   	push   esi
c00141a7:	53                   	push   ebx
c00141a8:	83 ec 10             	sub    esp,0x10
c00141ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141af:	6a 40                	push   0x40
c00141b1:	e8 6e b4 ff ff       	call   c000f624 <malloc>
c00141b6:	89 c6                	mov    esi,eax
c00141b8:	58                   	pop    eax
c00141b9:	5a                   	pop    edx
c00141ba:	53                   	push   ebx
c00141bb:	56                   	push   esi
c00141bc:	e8 d5 26 00 00       	call   c0016896 <VCache::VCache(PhysicalDisk*)>
c00141c1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141c7:	83 c4 14             	add    esp,0x14
c00141ca:	5b                   	pop    ebx
c00141cb:	5e                   	pop    esi
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <PhysicalDisk::~PhysicalDisk()>:
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00141d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141da:	89 10                	mov    DWORD PTR [eax],edx
c00141dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	50                   	push   eax
c00141e4:	e8 03 fa ff ff       	call   c0013bec <Device::~Device()>
c00141e9:	83 c4 10             	add    esp,0x10
c00141ec:	90                   	nop
c00141ed:	83 c4 0c             	add    esp,0xc
c00141f0:	c3                   	ret    
c00141f1:	90                   	nop

c00141f2 <PhysicalDisk::~PhysicalDisk()>:
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	83 ec 0c             	sub    esp,0xc
c00141f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fc:	e8 cd ff ff ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c0014201:	83 c4 10             	add    esp,0x10
c0014204:	83 ec 08             	sub    esp,0x8
c0014207:	68 6c 01 00 00       	push   0x16c
c001420c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014210:	e8 fe e5 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	83 c4 0c             	add    esp,0xc
c001421b:	c3                   	ret    

c001421c <FPU::FPU(char const*)>:
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014223:	83 ec 08             	sub    esp,0x8
c0014226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001422a:	50                   	push   eax
c001422b:	e8 da fc ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c0014238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423c:	89 10                	mov    DWORD PTR [eax],edx
c001423e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014242:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001424c:	90                   	nop
c001424d:	83 c4 0c             	add    esp,0xc
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <FPU::~FPU()>:
c0014252:	83 ec 0c             	sub    esp,0xc
c0014255:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c001425a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425e:	89 10                	mov    DWORD PTR [eax],edx
c0014260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	50                   	push   eax
c0014268:	e8 7f f9 ff ff       	call   c0013bec <Device::~Device()>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	90                   	nop
c0014271:	83 c4 0c             	add    esp,0xc
c0014274:	c3                   	ret    
c0014275:	90                   	nop

c0014276 <FPU::~FPU()>:
c0014276:	83 ec 0c             	sub    esp,0xc
c0014279:	83 ec 0c             	sub    esp,0xc
c001427c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014280:	e8 cd ff ff ff       	call   c0014252 <FPU::~FPU()>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	83 ec 08             	sub    esp,0x8
c001428b:	68 58 01 00 00       	push   0x158
c0014290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014294:	e8 7a e5 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	83 c4 0c             	add    esp,0xc
c001429f:	c3                   	ret    

c00142a0 <setupFPU()>:
c00142a0:	53                   	push   ebx
c00142a1:	83 ec 08             	sub    esp,0x8
c00142a4:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00142aa:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142b1:	74 19                	je     c00142cc <setupFPU()+0x2c>
c00142b3:	83 ec 0c             	sub    esp,0xc
c00142b6:	68 58 01 00 00       	push   0x158
c00142bb:	e8 64 b3 ff ff       	call   c000f624 <malloc>
c00142c0:	89 c3                	mov    ebx,eax
c00142c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00142c5:	e8 0e 0a 01 00       	call   c0024cd8 <AVX::AVX()>
c00142ca:	eb 5b                	jmp    c0014327 <setupFPU()+0x87>
c00142cc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142d2:	84 c0                	test   al,al
c00142d4:	79 19                	jns    c00142ef <setupFPU()+0x4f>
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	68 58 01 00 00       	push   0x158
c00142de:	e8 41 b3 ff ff       	call   c000f624 <malloc>
c00142e3:	89 c3                	mov    ebx,eax
c00142e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e8:	e8 11 0b 01 00       	call   c0024dfe <SSE::SSE()>
c00142ed:	eb 38                	jmp    c0014327 <setupFPU()+0x87>
c00142ef:	a8 20                	test   al,0x20
c00142f1:	74 19                	je     c001430c <setupFPU()+0x6c>
c00142f3:	83 ec 0c             	sub    esp,0xc
c00142f6:	68 58 01 00 00       	push   0x158
c00142fb:	e8 24 b3 ff ff       	call   c000f624 <malloc>
c0014300:	89 c3                	mov    ebx,eax
c0014302:	89 04 24             	mov    DWORD PTR [esp],eax
c0014305:	e8 5e 0a 01 00       	call   c0024d68 <MMX::MMX()>
c001430a:	eb 1b                	jmp    c0014327 <setupFPU()+0x87>
c001430c:	a8 10                	test   al,0x10
c001430e:	74 1c                	je     c001432c <setupFPU()+0x8c>
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	68 58 01 00 00       	push   0x158
c0014318:	e8 07 b3 ff ff       	call   c000f624 <malloc>
c001431d:	89 c3                	mov    ebx,eax
c001431f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014322:	e8 65 0b 01 00       	call   c0024e8c <x87::x87()>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	eb 24                	jmp    c0014350 <setupFPU()+0xb0>
c001432c:	83 e0 ef             	and    eax,0xffffffef
c001432f:	83 ec 0c             	sub    esp,0xc
c0014332:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014338:	68 34 a4 02 c0       	push   0xc002a434
c001433d:	e8 b1 e5 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014342:	0f 20 c0             	mov    eax,cr0
c0014345:	83 c8 04             	or     eax,0x4
c0014348:	0f 22 c0             	mov    cr0,eax
c001434b:	31 db                	xor    ebx,ebx
c001434d:	83 c4 10             	add    esp,0x10
c0014350:	89 d8                	mov    eax,ebx
c0014352:	83 c4 08             	add    esp,0x8
c0014355:	5b                   	pop    ebx
c0014356:	c3                   	ret    
c0014357:	90                   	nop

c0014358 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001435c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014360:	c1 e0 04             	shl    eax,0x4
c0014363:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014367:	8d 50 10             	lea    edx,[eax+0x10]
c001436a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014370:	74 08                	je     c001437a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014372:	83 c0 04             	add    eax,0x4
c0014375:	39 d0                	cmp    eax,edx
c0014377:	75 f1                	jne    c001436a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014379:	c3                   	ret    
c001437a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014384:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001438e:	eb e2                	jmp    c0014372 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014390 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014390:	57                   	push   edi
c0014391:	31 c0                	xor    eax,eax
c0014393:	56                   	push   esi
c0014394:	53                   	push   ebx
c0014395:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014399:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001439d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143a1:	89 da                	mov    edx,ebx
c00143a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143a7:	c1 e2 04             	shl    edx,0x4
c00143aa:	01 ca                	add    edx,ecx
c00143ac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143b4:	74 16                	je     c00143cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143b6:	40                   	inc    eax
c00143b7:	83 f8 04             	cmp    eax,0x4
c00143ba:	75 f0                	jne    c00143ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143bc:	c7 44 24 10 78 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a478
c00143c4:	5b                   	pop    ebx
c00143c5:	5e                   	pop    esi
c00143c6:	5f                   	pop    edi
c00143c7:	e9 cd 5a 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c00143cc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143cf:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143d2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143d8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143de:	5b                   	pop    ebx
c00143df:	5e                   	pop    esi
c00143e0:	5f                   	pop    edi
c00143e1:	c3                   	ret    

c00143e2 <doubleFault(regs*, void*)>:
c00143e2:	55                   	push   ebp
c00143e3:	89 e5                	mov    ebp,esp
c00143e5:	83 ec 08             	sub    esp,0x8
c00143e8:	83 ec 0c             	sub    esp,0xc
c00143eb:	68 b3 a4 02 c0       	push   0xc002a4b3
c00143f0:	e8 a4 5a 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c00143f5:	83 c4 10             	add    esp,0x10
c00143f8:	90                   	nop
c00143f9:	c9                   	leave  
c00143fa:	c3                   	ret    
c00143fb:	90                   	nop

c00143fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143fc:	56                   	push   esi
c00143fd:	53                   	push   ebx
c00143fe:	50                   	push   eax
c00143ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014403:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014407:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001440c:	75 35                	jne    c0014443 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001440e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014411:	31 d2                	xor    edx,edx
c0014413:	89 c1                	mov    ecx,eax
c0014415:	c1 e1 04             	shl    ecx,0x4
c0014418:	01 f1                	add    ecx,esi
c001441a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014422:	74 3e                	je     c0014462 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014424:	42                   	inc    edx
c0014425:	83 fa 04             	cmp    edx,0x4
c0014428:	75 f0                	jne    c001441a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001442a:	83 ec 0c             	sub    esp,0xc
c001442d:	68 f8 a4 02 c0       	push   0xc002a4f8
c0014432:	e8 62 5a 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001443f:	5a                   	pop    edx
c0014440:	5b                   	pop    ebx
c0014441:	5e                   	pop    esi
c0014442:	c3                   	ret    
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	56                   	push   esi
c0014447:	e8 ba fb ff ff       	call   c0014006 <Device::getName()>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014452:	75 ba                	jne    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014454:	83 fb 0f             	cmp    ebx,0xf
c0014457:	7f 29                	jg     c0014482 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014459:	0f b6 9b 20 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd32e0]
c0014460:	eb ac                	jmp    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014462:	8d 04 82             	lea    eax,[edx+eax*4]
c0014465:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014469:	8d 04 86             	lea    eax,[esi+eax*4]
c001446c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014472:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014476:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001447c:	89 d8                	mov    eax,ebx
c001447e:	5a                   	pop    edx
c001447f:	5b                   	pop    ebx
c0014480:	5e                   	pop    esi
c0014481:	c3                   	ret    
c0014482:	83 ec 0c             	sub    esp,0xc
c0014485:	68 c0 a4 02 c0       	push   0xc002a4c0
c001448a:	e8 0a 5a 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	e9 77 ff ff ff       	jmp    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014497:	90                   	nop

c0014498 <InterruptController::clearAllHandlers(int, bool)>:
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	52                   	push   edx
c001449b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001449f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144a8:	75 61                	jne    c001450b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144aa:	8d 46 20             	lea    eax,[esi+0x20]
c00144ad:	c1 e6 04             	shl    esi,0x4
c00144b0:	c1 e0 04             	shl    eax,0x4
c00144b3:	01 de                	add    esi,ebx
c00144b5:	01 d8                	add    eax,ebx
c00144b7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144c1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144d5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144df:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144e9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144f3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144fd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014507:	58                   	pop    eax
c0014508:	5b                   	pop    ebx
c0014509:	5e                   	pop    esi
c001450a:	c3                   	ret    
c001450b:	83 ec 0c             	sub    esp,0xc
c001450e:	53                   	push   ebx
c001450f:	e8 f2 fa ff ff       	call   c0014006 <Device::getName()>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001451a:	75 8e                	jne    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001451c:	83 fe 0f             	cmp    esi,0xf
c001451f:	7f 09                	jg     c001452a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014521:	0f b6 b6 20 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd32e0]
c0014528:	eb 80                	jmp    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	68 34 a5 02 c0       	push   0xc002a534
c0014532:	e8 62 59 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	e9 6b ff ff ff       	jmp    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453f:	90                   	nop

c0014540 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014540:	56                   	push   esi
c0014541:	53                   	push   ebx
c0014542:	52                   	push   edx
c0014543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014547:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001454b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014550:	75 3a                	jne    c001458c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014556:	8d 50 20             	lea    edx,[eax+0x20]
c0014559:	c1 e2 04             	shl    edx,0x4
c001455c:	8d 04 16             	lea    eax,[esi+edx*1]
c001455f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014563:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014569:	74 0b                	je     c0014576 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001456b:	83 c0 04             	add    eax,0x4
c001456e:	39 d0                	cmp    eax,edx
c0014570:	75 f1                	jne    c0014563 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014572:	58                   	pop    eax
c0014573:	5b                   	pop    ebx
c0014574:	5e                   	pop    esi
c0014575:	c3                   	ret    
c0014576:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014580:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001458a:	eb df                	jmp    c001456b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	56                   	push   esi
c0014590:	e8 71 fa ff ff       	call   c0014006 <Device::getName()>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001459b:	75 b5                	jne    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001459d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145a2:	7f 11                	jg     c00145b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a8:	0f b6 80 20 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd32e0]
c00145af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145b3:	eb 9d                	jmp    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	68 34 a5 02 c0       	push   0xc002a534
c00145bd:	e8 d7 58 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	eb 8b                	jmp    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145c7 <nmiHandler(regs*, void*)>:
c00145c7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145d0:	e9 9b a7 ff ff       	jmp    c000ed70 <Computer::handleNMI()>

c00145d5 <int_handler>:
c00145d5:	55                   	push   ebp
c00145d6:	57                   	push   edi
c00145d7:	56                   	push   esi
c00145d8:	53                   	push   ebx
c00145d9:	83 ec 0c             	sub    esp,0xc
c00145dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145e0:	80 3d 20 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f620,0x0
c00145e7:	74 0b                	je     c00145f4 <int_handler+0x1f>
c00145e9:	fa                   	cli    
c00145ea:	f4                   	hlt    
c00145eb:	80 3d 20 f6 02 c0 00 	cmp    BYTE PTR ds:0xc002f620,0x0
c00145f2:	75 f5                	jne    c00145e9 <int_handler+0x14>
c00145f4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145f9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014602:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014608:	8d 43 e0             	lea    eax,[ebx-0x20]
c001460b:	83 f8 17             	cmp    eax,0x17
c001460e:	77 13                	ja     c0014623 <int_handler+0x4e>
c0014610:	83 ec 08             	sub    esp,0x8
c0014613:	8b 17                	mov    edx,DWORD PTR [edi]
c0014615:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014618:	0f b6 c0             	movzx  eax,al
c001461b:	50                   	push   eax
c001461c:	57                   	push   edi
c001461d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014620:	83 c4 10             	add    esp,0x10
c0014623:	83 c3 15             	add    ebx,0x15
c0014626:	c1 e3 04             	shl    ebx,0x4
c0014629:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001462d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014634:	31 db                	xor    ebx,ebx
c0014636:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001463a:	85 c0                	test   eax,eax
c001463c:	74 13                	je     c0014651 <int_handler+0x7c>
c001463e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014641:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014645:	74 1c                	je     c0014663 <int_handler+0x8e>
c0014647:	83 ec 08             	sub    esp,0x8
c001464a:	52                   	push   edx
c001464b:	56                   	push   esi
c001464c:	ff d0                	call   eax
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	43                   	inc    ebx
c0014652:	83 fb 04             	cmp    ebx,0x4
c0014655:	75 df                	jne    c0014636 <int_handler+0x61>
c0014657:	83 c4 0c             	add    esp,0xc
c001465a:	31 c0                	xor    eax,eax
c001465c:	5b                   	pop    ebx
c001465d:	31 d2                	xor    edx,edx
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	5d                   	pop    ebp
c0014662:	c3                   	ret    
c0014663:	83 ec 08             	sub    esp,0x8
c0014666:	52                   	push   edx
c0014667:	56                   	push   esi
c0014668:	ff d0                	call   eax
c001466a:	83 c4 10             	add    esp,0x10
c001466d:	83 c4 0c             	add    esp,0xc
c0014670:	5b                   	pop    ebx
c0014671:	5e                   	pop    esi
c0014672:	5f                   	pop    edi
c0014673:	5d                   	pop    ebp
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <InterruptController::InterruptController(char const*)>:
c0014676:	83 ec 1c             	sub    esp,0x1c
c0014679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467d:	83 ec 08             	sub    esp,0x8
c0014680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014684:	50                   	push   eax
c0014685:	e8 80 f8 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014696:	89 10                	mov    DWORD PTR [eax],edx
c0014698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146ae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146b6:	7f 5e                	jg     c0014716 <InterruptController::InterruptController(char const*)+0xa0>
c00146b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146c0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146c5:	7f 49                	jg     c0014710 <InterruptController::InterruptController(char const*)+0x9a>
c00146c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146da:	01 ca                	add    edx,ecx
c00146dc:	83 c2 54             	add    edx,0x54
c00146df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146fa:	01 ca                	add    edx,ecx
c00146fc:	81 c2 54 04 00 00    	add    edx,0x454
c0014702:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001470a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001470e:	eb b0                	jmp    c00146c0 <InterruptController::InterruptController(char const*)+0x4a>
c0014710:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014714:	eb 98                	jmp    c00146ae <InterruptController::InterruptController(char const*)+0x38>
c0014716:	90                   	nop
c0014717:	83 c4 1c             	add    esp,0x1c
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <InterruptController::~InterruptController()>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	89 10                	mov    DWORD PTR [eax],edx
c001472a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	50                   	push   eax
c0014732:	e8 b5 f4 ff ff       	call   c0013bec <Device::~Device()>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	90                   	nop
c001473b:	83 c4 0c             	add    esp,0xc
c001473e:	c3                   	ret    
c001473f:	90                   	nop

c0014740 <InterruptController::~InterruptController()>:
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	83 ec 0c             	sub    esp,0xc
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	e8 cd ff ff ff       	call   c001471c <InterruptController::~InterruptController()>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	83 ec 08             	sub    esp,0x8
c0014755:	68 58 21 00 00       	push   0x2158
c001475a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475e:	e8 b0 e0 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	83 c4 0c             	add    esp,0xc
c0014769:	c3                   	ret    

c001476a <displayDebugInfo(regs*)>:
c001476a:	55                   	push   ebp
c001476b:	57                   	push   edi
c001476c:	56                   	push   esi
c001476d:	53                   	push   ebx
c001476e:	83 ec 24             	sub    esp,0x24
c0014771:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014775:	0f 20 c2             	mov    edx,cr0
c0014778:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001477c:	0f 20 d7             	mov    edi,cr2
c001477f:	0f 20 de             	mov    esi,cr3
c0014782:	0f 20 e5             	mov    ebp,cr4
c0014785:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014788:	68 6e a5 02 c0       	push   0xc002a56e
c001478d:	e8 61 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014792:	59                   	pop    ecx
c0014793:	58                   	pop    eax
c0014794:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014797:	68 79 a5 02 c0       	push   0xc002a579
c001479c:	e8 52 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147a1:	58                   	pop    eax
c00147a2:	5a                   	pop    edx
c00147a3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147a6:	68 84 a5 02 c0       	push   0xc002a584
c00147ab:	e8 43 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147b0:	59                   	pop    ecx
c00147b1:	58                   	pop    eax
c00147b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147b5:	68 8f a5 02 c0       	push   0xc002a58f
c00147ba:	e8 34 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147bf:	58                   	pop    eax
c00147c0:	5a                   	pop    edx
c00147c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147c4:	68 9a a5 02 c0       	push   0xc002a59a
c00147c9:	e8 25 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ce:	59                   	pop    ecx
c00147cf:	58                   	pop    eax
c00147d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147d3:	68 a5 a5 02 c0       	push   0xc002a5a5
c00147d8:	e8 16 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147dd:	58                   	pop    eax
c00147de:	5a                   	pop    edx
c00147df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147e2:	68 b0 a5 02 c0       	push   0xc002a5b0
c00147e7:	e8 07 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ec:	59                   	pop    ecx
c00147ed:	58                   	pop    eax
c00147ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147f1:	68 bb a5 02 c0       	push   0xc002a5bb
c00147f6:	e8 f8 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147fb:	58                   	pop    eax
c00147fc:	5a                   	pop    edx
c00147fd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014800:	68 c6 a5 02 c0       	push   0xc002a5c6
c0014805:	e8 e9 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001480a:	59                   	pop    ecx
c001480b:	58                   	pop    eax
c001480c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001480f:	68 d5 a5 02 c0       	push   0xc002a5d5
c0014814:	e8 da e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014819:	58                   	pop    eax
c001481a:	5a                   	pop    edx
c001481b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001481e:	68 e0 a5 02 c0       	push   0xc002a5e0
c0014823:	e8 cb e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014828:	59                   	pop    ecx
c0014829:	58                   	pop    eax
c001482a:	57                   	push   edi
c001482b:	68 eb a5 02 c0       	push   0xc002a5eb
c0014830:	e8 be e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014835:	58                   	pop    eax
c0014836:	5a                   	pop    edx
c0014837:	56                   	push   esi
c0014838:	68 f6 a5 02 c0       	push   0xc002a5f6
c001483d:	e8 b1 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014842:	59                   	pop    ecx
c0014843:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 62 c2 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0014853:	58                   	pop    eax
c0014854:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014857:	5a                   	pop    edx
c0014858:	c1 e0 05             	shl    eax,0x5
c001485b:	05 80 ca 02 c0       	add    eax,0xc002ca80
c0014860:	50                   	push   eax
c0014861:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486c:	e8 63 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014871:	59                   	pop    ecx
c0014872:	58                   	pop    eax
c0014873:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014878:	68 01 a6 02 c0       	push   0xc002a601
c001487d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014883:	e8 4c c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014888:	58                   	pop    eax
c0014889:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488e:	5a                   	pop    edx
c001488f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014892:	83 c0 0c             	add    eax,0xc
c0014895:	50                   	push   eax
c0014896:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001489b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a1:	e8 2e c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148a6:	59                   	pop    ecx
c00148a7:	58                   	pop    eax
c00148a8:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00148ad:	68 0a a6 02 c0       	push   0xc002a60a
c00148b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b8:	e8 17 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148bd:	58                   	pop    eax
c00148be:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00148c3:	5a                   	pop    edx
c00148c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 28 c6 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148d2:	59                   	pop    ecx
c00148d3:	58                   	pop    eax
c00148d4:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00148d9:	68 12 a6 02 c0       	push   0xc002a612
c00148de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e4:	e8 eb c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148e9:	58                   	pop    eax
c00148ea:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00148ef:	5a                   	pop    edx
c00148f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 fc c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014905:	68 1a a6 02 c0       	push   0xc002a61a
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 bf c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014915:	58                   	pop    eax
c0014916:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001491b:	5a                   	pop    edx
c001491c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001491f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014925:	e8 d0 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001492a:	59                   	pop    ecx
c001492b:	58                   	pop    eax
c001492c:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014931:	68 22 a6 02 c0       	push   0xc002a622
c0014936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493c:	e8 93 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014941:	58                   	pop    eax
c0014942:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014947:	5a                   	pop    edx
c0014948:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001494b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014951:	e8 a4 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014956:	59                   	pop    ecx
c0014957:	58                   	pop    eax
c0014958:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001495d:	68 2a a6 02 c0       	push   0xc002a62a
c0014962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014968:	e8 67 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001496d:	58                   	pop    eax
c001496e:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014973:	5a                   	pop    edx
c0014974:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 78 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014982:	59                   	pop    ecx
c0014983:	58                   	pop    eax
c0014984:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014989:	68 32 a6 02 c0       	push   0xc002a632
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 3b c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014999:	58                   	pop    eax
c001499a:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001499f:	5a                   	pop    edx
c00149a0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a9:	e8 4c c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00149b5:	68 3a a6 02 c0       	push   0xc002a63a
c00149ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c0:	e8 0f c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149c5:	58                   	pop    eax
c00149c6:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00149cb:	5a                   	pop    edx
c00149cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149d0:	52                   	push   edx
c00149d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d7:	e8 1e c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149dc:	59                   	pop    ecx
c00149dd:	58                   	pop    eax
c00149de:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00149e3:	68 43 a6 02 c0       	push   0xc002a643
c00149e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ee:	e8 e1 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149f3:	58                   	pop    eax
c00149f4:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00149f9:	5a                   	pop    edx
c00149fa:	57                   	push   edi
c00149fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a01:	e8 f4 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a06:	59                   	pop    ecx
c0014a07:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a0c:	5f                   	pop    edi
c0014a0d:	68 4b a6 02 c0       	push   0xc002a64b
c0014a12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a18:	e8 b7 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a1d:	58                   	pop    eax
c0014a1e:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a23:	5a                   	pop    edx
c0014a24:	56                   	push   esi
c0014a25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2b:	e8 ca c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a30:	59                   	pop    ecx
c0014a31:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a36:	5e                   	pop    esi
c0014a37:	68 53 a6 02 c0       	push   0xc002a653
c0014a3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a42:	e8 8d c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a47:	5f                   	pop    edi
c0014a48:	58                   	pop    eax
c0014a49:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a4e:	55                   	push   ebp
c0014a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a55:	e8 a0 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a5a:	58                   	pop    eax
c0014a5b:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a60:	5a                   	pop    edx
c0014a61:	68 5b a6 02 c0       	push   0xc002a65b
c0014a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6c:	e8 63 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a71:	0f 21 c0             	mov    eax,db0
c0014a74:	59                   	pop    ecx
c0014a75:	5e                   	pop    esi
c0014a76:	50                   	push   eax
c0014a77:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a82:	e8 73 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a87:	5f                   	pop    edi
c0014a88:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014a8d:	5d                   	pop    ebp
c0014a8e:	68 64 a6 02 c0       	push   0xc002a664
c0014a93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a99:	e8 36 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a9e:	0f 21 c8             	mov    eax,db1
c0014aa1:	5a                   	pop    edx
c0014aa2:	59                   	pop    ecx
c0014aa3:	50                   	push   eax
c0014aa4:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014aa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaf:	e8 46 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014ab4:	5e                   	pop    esi
c0014ab5:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014aba:	5f                   	pop    edi
c0014abb:	68 6c a6 02 c0       	push   0xc002a66c
c0014ac0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac6:	e8 09 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014acb:	0f 21 d0             	mov    eax,db2
c0014ace:	5d                   	pop    ebp
c0014acf:	5a                   	pop    edx
c0014ad0:	50                   	push   eax
c0014ad1:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014ad6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014adc:	e8 19 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014ae1:	59                   	pop    ecx
c0014ae2:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014ae7:	5e                   	pop    esi
c0014ae8:	68 74 a6 02 c0       	push   0xc002a674
c0014aed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af3:	e8 dc c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014af8:	0f 21 d8             	mov    eax,db3
c0014afb:	5f                   	pop    edi
c0014afc:	5d                   	pop    ebp
c0014afd:	50                   	push   eax
c0014afe:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b09:	e8 ec c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b0e:	58                   	pop    eax
c0014b0f:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b14:	5a                   	pop    edx
c0014b15:	68 7c a6 02 c0       	push   0xc002a67c
c0014b1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b20:	e8 af c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b25:	0f 21 f0             	mov    eax,db6
c0014b28:	59                   	pop    ecx
c0014b29:	5e                   	pop    esi
c0014b2a:	50                   	push   eax
c0014b2b:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b36:	e8 bf c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b3b:	5f                   	pop    edi
c0014b3c:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b41:	5d                   	pop    ebp
c0014b42:	68 84 a6 02 c0       	push   0xc002a684
c0014b47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4d:	e8 82 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b52:	0f 21 f8             	mov    eax,db7
c0014b55:	5a                   	pop    edx
c0014b56:	59                   	pop    ecx
c0014b57:	50                   	push   eax
c0014b58:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b63:	e8 92 c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b68:	5e                   	pop    esi
c0014b69:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b6c:	e8 b5 82 00 00       	call   c001ce26 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b71:	83 c4 10             	add    esp,0x10
c0014b74:	85 c0                	test   eax,eax
c0014b76:	74 7d                	je     c0014bf5 <displayDebugInfo(regs*)+0x48b>
c0014b78:	89 c6                	mov    esi,eax
c0014b7a:	50                   	push   eax
c0014b7b:	50                   	push   eax
c0014b7c:	56                   	push   esi
c0014b7d:	68 8c a6 02 c0       	push   0xc002a68c
c0014b82:	e8 6c dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014b87:	5a                   	pop    edx
c0014b88:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014b8d:	59                   	pop    ecx
c0014b8e:	68 9a a6 02 c0       	push   0xc002a69a
c0014b93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b99:	e8 36 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b9e:	5f                   	pop    edi
c0014b9f:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014ba4:	5d                   	pop    ebp
c0014ba5:	56                   	push   esi
c0014ba6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bac:	e8 23 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014bb1:	58                   	pop    eax
c0014bb2:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014bb7:	5a                   	pop    edx
c0014bb8:	68 a6 a6 02 c0       	push   0xc002a6a6
c0014bbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc3:	e8 0c c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014bc8:	59                   	pop    ecx
c0014bc9:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0014bce:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bd4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014bd7:	e8 81 82 00 00       	call   c001ce5d <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bdc:	5b                   	pop    ebx
c0014bdd:	5d                   	pop    ebp
c0014bde:	50                   	push   eax
c0014bdf:	57                   	push   edi
c0014be0:	e8 15 c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014be5:	58                   	pop    eax
c0014be6:	5a                   	pop    edx
c0014be7:	56                   	push   esi
c0014be8:	68 b2 a6 02 c0       	push   0xc002a6b2
c0014bed:	e8 01 dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014bf2:	83 c4 10             	add    esp,0x10
c0014bf5:	fa                   	cli    
c0014bf6:	f4                   	hlt    
c0014bf7:	eb fe                	jmp    c0014bf7 <displayDebugInfo(regs*)+0x48d>

c0014bf9 <x87EmulHandler(regs*, void*)>:
c0014bf9:	53                   	push   ebx
c0014bfa:	83 ec 14             	sub    esp,0x14
c0014bfd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c01:	53                   	push   ebx
c0014c02:	e8 77 a5 00 00       	call   c001f17e <Vm::x87Handler(regs*)>
c0014c07:	83 c4 10             	add    esp,0x10
c0014c0a:	84 c0                	test   al,al
c0014c0c:	74 05                	je     c0014c13 <x87EmulHandler(regs*, void*)+0x1a>
c0014c0e:	83 c4 08             	add    esp,0x8
c0014c11:	5b                   	pop    ebx
c0014c12:	c3                   	ret    
c0014c13:	83 ec 0c             	sub    esp,0xc
c0014c16:	68 c2 a6 02 c0       	push   0xc002a6c2
c0014c1b:	e8 d3 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c23:	e8 42 fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c28 <gpFault(regs*, void*)>:
c0014c28:	53                   	push   ebx
c0014c29:	83 ec 14             	sub    esp,0x14
c0014c2c:	c7 05 70 dc 02 c0 fb e4 01 c0 	mov    DWORD PTR ds:0xc002dc70,0xc001e4fb
c0014c36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c3a:	53                   	push   ebx
c0014c3b:	e8 bb 98 00 00       	call   c001e4fb <Vm::faultHandler(regs*)>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	84 c0                	test   al,al
c0014c45:	74 05                	je     c0014c4c <gpFault(regs*, void*)+0x24>
c0014c47:	83 c4 08             	add    esp,0x8
c0014c4a:	5b                   	pop    ebx
c0014c4b:	c3                   	ret    
c0014c4c:	83 ec 0c             	sub    esp,0xc
c0014c4f:	68 d8 a6 02 c0       	push   0xc002a6d8
c0014c54:	e8 9a dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c5c:	e8 09 fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c61 <pgFault(regs*, void*)>:
c0014c61:	83 ec 18             	sub    esp,0x18
c0014c64:	68 f3 a6 02 c0       	push   0xc002a6f3
c0014c69:	e8 85 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c6e:	58                   	pop    eax
c0014c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c73:	e8 f2 fa ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c78 <otherISRHandler(regs*, void*)>:
c0014c78:	53                   	push   ebx
c0014c79:	83 ec 0c             	sub    esp,0xc
c0014c7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c80:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c83:	50                   	push   eax
c0014c84:	50                   	push   eax
c0014c85:	68 00 a7 02 c0       	push   0xc002a700
c0014c8a:	e8 64 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c92:	e8 d3 fa ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c97 <opcodeFault(regs*, void*)>:
c0014c97:	55                   	push   ebp
c0014c98:	89 e5                	mov    ebp,esp
c0014c9a:	56                   	push   esi
c0014c9b:	53                   	push   ebx
c0014c9c:	83 ec 40             	sub    esp,0x40
c0014c9f:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0014ca4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014caa:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cb0:	84 c0                	test   al,al
c0014cb2:	74 24                	je     c0014cd8 <opcodeFault(regs*, void*)+0x41>
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	68 20 a7 02 c0       	push   0xc002a720
c0014cbc:	e8 32 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cca:	8d 50 19             	lea    edx,[eax+0x19]
c0014ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd3:	e9 be 05 00 00       	jmp    c0015296 <opcodeFault(regs*, void*)+0x5ff>
c0014cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ce1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ce5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf7:	3c f0                	cmp    al,0xf0
c0014cf9:	75 17                	jne    c0014d12 <opcodeFault(regs*, void*)+0x7b>
c0014cfb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d04:	8d 50 01             	lea    edx,[eax+0x1]
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0d:	e9 da 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	8a 00                	mov    al,BYTE PTR [eax]
c0014d17:	3c f2                	cmp    al,0xf2
c0014d19:	74 09                	je     c0014d24 <opcodeFault(regs*, void*)+0x8d>
c0014d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d20:	3c f3                	cmp    al,0xf3
c0014d22:	75 1b                	jne    c0014d3f <opcodeFault(regs*, void*)+0xa8>
c0014d24:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d31:	8d 50 01             	lea    edx,[eax+0x1]
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3a:	e9 ad 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d42:	8a 00                	mov    al,BYTE PTR [eax]
c0014d44:	3c 66                	cmp    al,0x66
c0014d46:	75 1f                	jne    c0014d67 <opcodeFault(regs*, void*)+0xd0>
c0014d48:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d4c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d50:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d59:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d62:	e9 85 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6c:	3c 67                	cmp    al,0x67
c0014d6e:	75 18                	jne    c0014d88 <opcodeFault(regs*, void*)+0xf1>
c0014d70:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d86:	eb 64                	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8d:	3c 2e                	cmp    al,0x2e
c0014d8f:	74 09                	je     c0014d9a <opcodeFault(regs*, void*)+0x103>
c0014d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d94:	8a 00                	mov    al,BYTE PTR [eax]
c0014d96:	3c 3e                	cmp    al,0x3e
c0014d98:	75 18                	jne    c0014db2 <opcodeFault(regs*, void*)+0x11b>
c0014d9a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	8d 50 01             	lea    edx,[eax+0x1]
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db0:	eb 3a                	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014db2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db5:	8a 00                	mov    al,BYTE PTR [eax]
c0014db7:	3c 36                	cmp    al,0x36
c0014db9:	74 1b                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc0:	3c 26                	cmp    al,0x26
c0014dc2:	74 12                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc9:	3c 64                	cmp    al,0x64
c0014dcb:	74 09                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd0:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd2:	3c 65                	cmp    al,0x65
c0014dd4:	75 16                	jne    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014dd6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dda:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de3:	8d 50 01             	lea    edx,[eax+0x1]
c0014de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014def:	8a 00                	mov    al,BYTE PTR [eax]
c0014df1:	3c 0f                	cmp    al,0xf
c0014df3:	0f 85 ad 00 00 00    	jne    c0014ea6 <opcodeFault(regs*, void*)+0x20f>
c0014df9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfc:	40                   	inc    eax
c0014dfd:	8a 00                	mov    al,BYTE PTR [eax]
c0014dff:	3c c2                	cmp    al,0xc2
c0014e01:	74 0e                	je     c0014e11 <opcodeFault(regs*, void*)+0x17a>
c0014e03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e06:	40                   	inc    eax
c0014e07:	8a 00                	mov    al,BYTE PTR [eax]
c0014e09:	3c c3                	cmp    al,0xc3
c0014e0b:	0f 85 95 00 00 00    	jne    c0014ea6 <opcodeFault(regs*, void*)+0x20f>
c0014e11:	83 ec 0c             	sub    esp,0xc
c0014e14:	68 43 a7 02 c0       	push   0xc002a743
c0014e19:	e8 d5 da ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e27:	8d 50 01             	lea    edx,[eax+0x1]
c0014e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e36:	8a 00                	mov    al,BYTE PTR [eax]
c0014e38:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3e:	88 10                	mov    BYTE PTR [eax],dl
c0014e40:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e43:	50                   	push   eax
c0014e44:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e47:	50                   	push   eax
c0014e48:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e4b:	50                   	push   eax
c0014e4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e4f:	e8 76 48 00 00       	call   c00196ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e60:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e63:	01 d0                	add    eax,edx
c0014e65:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e6e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e71:	48                   	dec    eax
c0014e72:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e81:	83 ec 04             	sub    esp,0x4
c0014e84:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e87:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e8a:	50                   	push   eax
c0014e8b:	e8 24 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e99:	01 c2                	add    edx,eax
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea1:	e9 f0 03 00 00       	jmp    c0015296 <opcodeFault(regs*, void*)+0x5ff>
c0014ea6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eab:	3c 0f                	cmp    al,0xf
c0014ead:	0f 85 8b 01 00 00    	jne    c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	40                   	inc    eax
c0014eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb9:	3c c7                	cmp    al,0xc7
c0014ebb:	0f 86 7d 01 00 00    	jbe    c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014ec1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec4:	40                   	inc    eax
c0014ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec7:	3c cf                	cmp    al,0xcf
c0014ec9:	0f 87 6f 01 00 00    	ja     c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014ecf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed2:	40                   	inc    eax
c0014ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed5:	83 c0 38             	add    eax,0x38
c0014ed8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014edb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014edf:	75 0b                	jne    c0014eec <opcodeFault(regs*, void*)+0x255>
c0014ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ee7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eea:	eb 75                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014eec:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ef0:	75 0b                	jne    c0014efd <opcodeFault(regs*, void*)+0x266>
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ef8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014efb:	eb 64                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014efd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f01:	75 0b                	jne    c0014f0e <opcodeFault(regs*, void*)+0x277>
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0c:	eb 53                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f0e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f12:	75 0b                	jne    c0014f1f <opcodeFault(regs*, void*)+0x288>
c0014f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f1d:	eb 42                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f1f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f23:	75 0b                	jne    c0014f30 <opcodeFault(regs*, void*)+0x299>
c0014f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f28:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2e:	eb 31                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f30:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f34:	75 0b                	jne    c0014f41 <opcodeFault(regs*, void*)+0x2aa>
c0014f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f3c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3f:	eb 20                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f41:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f45:	75 0b                	jne    c0014f52 <opcodeFault(regs*, void*)+0x2bb>
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f50:	eb 0f                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f52:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f56:	75 09                	jne    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f5e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f61:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f65:	74 10                	je     c0014f77 <opcodeFault(regs*, void*)+0x2e0>
c0014f67:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f6e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f75:	eb 2d                	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x30d>
c0014f77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f7a:	c1 e0 18             	shl    eax,0x18
c0014f7d:	89 c2                	mov    edx,eax
c0014f7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f82:	c1 e0 08             	shl    eax,0x8
c0014f85:	25 00 00 ff 00       	and    eax,0xff0000
c0014f8a:	09 c2                	or     edx,eax
c0014f8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f8f:	c1 e8 08             	shr    eax,0x8
c0014f92:	25 00 ff 00 00       	and    eax,0xff00
c0014f97:	09 c2                	or     edx,eax
c0014f99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f9c:	c1 e8 18             	shr    eax,0x18
c0014f9f:	09 d0                	or     eax,edx
c0014fa1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fa4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fa8:	75 0b                	jne    c0014fb5 <opcodeFault(regs*, void*)+0x31e>
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fb3:	eb 75                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fb5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fb9:	75 0b                	jne    c0014fc6 <opcodeFault(regs*, void*)+0x32f>
c0014fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fc4:	eb 64                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fc6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fca:	75 0b                	jne    c0014fd7 <opcodeFault(regs*, void*)+0x340>
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fd5:	eb 53                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fd7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fdb:	75 0b                	jne    c0014fe8 <opcodeFault(regs*, void*)+0x351>
c0014fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fe6:	eb 42                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fe8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fec:	75 0b                	jne    c0014ff9 <opcodeFault(regs*, void*)+0x362>
c0014fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ff7:	eb 31                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014ff9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ffd:	75 0b                	jne    c001500a <opcodeFault(regs*, void*)+0x373>
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015005:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015008:	eb 20                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c001500a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001500e:	75 0b                	jne    c001501b <opcodeFault(regs*, void*)+0x384>
c0015010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015013:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015016:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015019:	eb 0f                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c001501b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001501f:	75 09                	jne    c001502a <opcodeFault(regs*, void*)+0x393>
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015027:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015030:	8d 50 02             	lea    edx,[eax+0x2]
c0015033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015036:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015039:	e9 58 02 00 00       	jmp    c0015296 <opcodeFault(regs*, void*)+0x5ff>
c001503e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015041:	8a 00                	mov    al,BYTE PTR [eax]
c0015043:	3c 0f                	cmp    al,0xf
c0015045:	0f 85 76 01 00 00    	jne    c00151c1 <opcodeFault(regs*, void*)+0x52a>
c001504b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504e:	40                   	inc    eax
c001504f:	8a 00                	mov    al,BYTE PTR [eax]
c0015051:	3c c7                	cmp    al,0xc7
c0015053:	0f 85 68 01 00 00    	jne    c00151c1 <opcodeFault(regs*, void*)+0x52a>
c0015059:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001505c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015062:	8d 50 01             	lea    edx,[eax+0x1]
c0015065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015068:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001506e:	50                   	push   eax
c001506f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015072:	50                   	push   eax
c0015073:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015076:	50                   	push   eax
c0015077:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001507a:	e8 4b 46 00 00       	call   c00196ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015085:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015088:	83 f0 01             	xor    eax,0x1
c001508b:	84 c0                	test   al,al
c001508d:	0f 84 2e 01 00 00    	je     c00151c1 <opcodeFault(regs*, void*)+0x52a>
c0015093:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015096:	3c 01                	cmp    al,0x1
c0015098:	0f 85 23 01 00 00    	jne    c00151c1 <opcodeFault(regs*, void*)+0x52a>
c001509e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150a1:	83 f0 01             	xor    eax,0x1
c00150a4:	84 c0                	test   al,al
c00150a6:	0f 84 15 01 00 00    	je     c00151c1 <opcodeFault(regs*, void*)+0x52a>
c00150ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150af:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150b2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150b5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150bf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150c2:	89 c2                	mov    edx,eax
c00150c4:	b8 00 00 00 00       	mov    eax,0x0
c00150c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150d5:	ba 00 00 00 00       	mov    edx,0x0
c00150da:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150dd:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150e6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150e9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150f6:	89 c2                	mov    edx,eax
c00150f8:	b8 00 00 00 00       	mov    eax,0x0
c00150fd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015100:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015109:	ba 00 00 00 00       	mov    edx,0x0
c001510e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015111:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015114:	e8 d1 83 00 00       	call   c001d4ea <lockScheduler()>
c0015119:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001511c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001511f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015121:	89 c1                	mov    ecx,eax
c0015123:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015126:	89 cb                	mov    ebx,ecx
c0015128:	89 d0                	mov    eax,edx
c001512a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001512d:	89 c6                	mov    esi,eax
c001512f:	89 f0                	mov    eax,esi
c0015131:	09 d8                	or     eax,ebx
c0015133:	85 c0                	test   eax,eax
c0015135:	75 21                	jne    c0015158 <opcodeFault(regs*, void*)+0x4c1>
c0015137:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001513a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001513d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015140:	89 01                	mov    DWORD PTR [ecx],eax
c0015142:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015148:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001514b:	83 c8 40             	or     eax,0x40
c001514e:	89 c2                	mov    edx,eax
c0015150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015153:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015156:	eb 3e                	jmp    c0015196 <opcodeFault(regs*, void*)+0x4ff>
c0015158:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001515b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001515e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015160:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015163:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015166:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001516f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015172:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015175:	89 d0                	mov    eax,edx
c0015177:	31 d2                	xor    edx,edx
c0015179:	89 c3                	mov    ebx,eax
c001517b:	89 d6                	mov    esi,edx
c001517d:	89 da                	mov    edx,ebx
c001517f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015182:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015188:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001518b:	83 e0 bf             	and    eax,0xffffffbf
c001518e:	89 c2                	mov    edx,eax
c0015190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015193:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015196:	e8 51 83 00 00       	call   c001d4ec <unlockScheduler()>
c001519b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151a1:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151a4:	01 c2                	add    edx,eax
c00151a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	68 52 a7 02 c0       	push   0xc002a752
c00151b4:	e8 3a d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	e9 d5 00 00 00       	jmp    c0015296 <opcodeFault(regs*, void*)+0x5ff>
c00151c1:	83 ec 0c             	sub    esp,0xc
c00151c4:	68 65 a7 02 c0       	push   0xc002a765
c00151c9:	e8 25 d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151dd:	c1 e0 04             	shl    eax,0x4
c00151e0:	01 d0                	add    eax,edx
c00151e2:	83 c0 03             	add    eax,0x3
c00151e5:	8a 00                	mov    al,BYTE PTR [eax]
c00151e7:	0f b6 d8             	movzx  ebx,al
c00151ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ed:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151f6:	c1 e0 04             	shl    eax,0x4
c00151f9:	01 d0                	add    eax,edx
c00151fb:	83 c0 02             	add    eax,0x2
c00151fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015200:	0f b6 c8             	movzx  ecx,al
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001520f:	c1 e0 04             	shl    eax,0x4
c0015212:	01 d0                	add    eax,edx
c0015214:	40                   	inc    eax
c0015215:	8a 00                	mov    al,BYTE PTR [eax]
c0015217:	0f b6 d0             	movzx  edx,al
c001521a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015226:	c1 e0 04             	shl    eax,0x4
c0015229:	01 f0                	add    eax,esi
c001522b:	8a 00                	mov    al,BYTE PTR [eax]
c001522d:	0f b6 c0             	movzx  eax,al
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	53                   	push   ebx
c0015234:	51                   	push   ecx
c0015235:	52                   	push   edx
c0015236:	50                   	push   eax
c0015237:	68 78 a7 02 c0       	push   0xc002a778
c001523c:	e8 b2 d6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015241:	83 c4 20             	add    esp,0x20
c0015244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015247:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524a:	83 c0 03             	add    eax,0x3
c001524d:	8a 00                	mov    al,BYTE PTR [eax]
c001524f:	0f b6 d8             	movzx  ebx,al
c0015252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015255:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015258:	83 c0 02             	add    eax,0x2
c001525b:	8a 00                	mov    al,BYTE PTR [eax]
c001525d:	0f b6 c8             	movzx  ecx,al
c0015260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015263:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015266:	40                   	inc    eax
c0015267:	8a 00                	mov    al,BYTE PTR [eax]
c0015269:	0f b6 d0             	movzx  edx,al
c001526c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015272:	8a 00                	mov    al,BYTE PTR [eax]
c0015274:	0f b6 c0             	movzx  eax,al
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	53                   	push   ebx
c001527b:	51                   	push   ecx
c001527c:	52                   	push   edx
c001527d:	50                   	push   eax
c001527e:	68 a0 a7 02 c0       	push   0xc002a7a0
c0015283:	e8 6b d6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015288:	83 c4 20             	add    esp,0x20
c001528b:	83 ec 0c             	sub    esp,0xc
c001528e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015291:	e8 d4 f4 ff ff       	call   c001476a <displayDebugInfo(regs*)>
c0015296:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015299:	5b                   	pop    ebx
c001529a:	5e                   	pop    esi
c001529b:	5d                   	pop    ebp
c001529c:	c3                   	ret    

c001529d <displayProgramFault(char const*)>:
c001529d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152ab:	85 c0                	test   eax,eax
c00152ad:	74 15                	je     c00152c4 <displayProgramFault(char const*)+0x27>
c00152af:	83 ec 0c             	sub    esp,0xc
c00152b2:	6a 04                	push   0x4
c00152b4:	6a 0f                	push   0xf
c00152b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152ba:	50                   	push   eax
c00152bb:	e8 d6 b8 ff ff       	call   c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152c0:	83 c4 1c             	add    esp,0x1c
c00152c3:	c3                   	ret    
c00152c4:	c3                   	ret    

c00152c5 <setupInterruptController()>:
c00152c5:	55                   	push   ebp
c00152c6:	89 e5                	mov    ebp,esp
c00152c8:	53                   	push   ebx
c00152c9:	83 ec 24             	sub    esp,0x24
c00152cc:	b8 00 00 00 00       	mov    eax,0x0
c00152d1:	85 c0                	test   eax,eax
c00152d3:	0f 95 c0             	setne  al
c00152d6:	84 c0                	test   al,al
c00152d8:	74 5b                	je     c0015335 <setupInterruptController()+0x70>
c00152da:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152e1:	83 ec 0c             	sub    esp,0xc
c00152e4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152e7:	e8 38 a3 ff ff       	call   c000f624 <malloc>
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	89 c3                	mov    ebx,eax
c00152f1:	83 ec 0c             	sub    esp,0xc
c00152f4:	53                   	push   ebx
c00152f5:	e8 d0 fd 00 00       	call   c00250ca <APIC::APIC()>
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015300:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015303:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015306:	8b 00                	mov    eax,DWORD PTR [eax]
c0015308:	83 c0 08             	add    eax,0x8
c001530b:	8b 00                	mov    eax,DWORD PTR [eax]
c001530d:	6a 00                	push   0x0
c001530f:	6a 00                	push   0x0
c0015311:	6a 00                	push   0x0
c0015313:	52                   	push   edx
c0015314:	ff d0                	call   eax
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001531e:	83 ec 08             	sub    esp,0x8
c0015321:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015324:	50                   	push   eax
c0015325:	e8 f0 e9 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015330:	e9 52 03 00 00       	jmp    c0015687 <setupInterruptController()+0x3c2>
c0015335:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001533a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015340:	83 e0 01             	and    eax,0x1
c0015343:	84 c0                	test   al,al
c0015345:	0f 95 c0             	setne  al
c0015348:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001534b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015352:	83 ec 0c             	sub    esp,0xc
c0015355:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015358:	e8 c7 a2 ff ff       	call   c000f624 <malloc>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	89 c3                	mov    ebx,eax
c0015362:	83 ec 0c             	sub    esp,0xc
c0015365:	53                   	push   ebx
c0015366:	e8 b7 02 01 00       	call   c0025622 <PIC::PIC()>
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015371:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015377:	8b 00                	mov    eax,DWORD PTR [eax]
c0015379:	83 c0 08             	add    eax,0x8
c001537c:	8b 00                	mov    eax,DWORD PTR [eax]
c001537e:	6a 00                	push   0x0
c0015380:	6a 00                	push   0x0
c0015382:	6a 00                	push   0x0
c0015384:	52                   	push   edx
c0015385:	ff d0                	call   eax
c0015387:	83 c4 10             	add    esp,0x10
c001538a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001538e:	74 73                	je     c0015403 <setupInterruptController()+0x13e>
c0015390:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015396:	8b 00                	mov    eax,DWORD PTR [eax]
c0015398:	83 c0 0c             	add    eax,0xc
c001539b:	8b 00                	mov    eax,DWORD PTR [eax]
c001539d:	6a 00                	push   0x0
c001539f:	6a 00                	push   0x0
c00153a1:	6a 00                	push   0x0
c00153a3:	52                   	push   edx
c00153a4:	ff d0                	call   eax
c00153a6:	83 c4 10             	add    esp,0x10
c00153a9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153ad:	74 15                	je     c00153c4 <setupInterruptController()+0xff>
c00153af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b4:	83 c0 04             	add    eax,0x4
c00153b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b9:	83 ec 0c             	sub    esp,0xc
c00153bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bf:	ff d0                	call   eax
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153cb:	83 ec 0c             	sub    esp,0xc
c00153ce:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153d1:	e8 4e a2 ff ff       	call   c000f624 <malloc>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	89 c3                	mov    ebx,eax
c00153db:	83 ec 0c             	sub    esp,0xc
c00153de:	53                   	push   ebx
c00153df:	e8 e6 fc 00 00       	call   c00250ca <APIC::APIC()>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f2:	83 c0 08             	add    eax,0x8
c00153f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f7:	6a 00                	push   0x0
c00153f9:	6a 00                	push   0x0
c00153fb:	6a 00                	push   0x0
c00153fd:	52                   	push   edx
c00153fe:	ff d0                	call   eax
c0015400:	83 c4 10             	add    esp,0x10
c0015403:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015408:	83 ec 08             	sub    esp,0x8
c001540b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540e:	50                   	push   eax
c001540f:	e8 06 e9 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8b 00                	mov    eax,DWORD PTR [eax]
c001541c:	83 c0 24             	add    eax,0x24
c001541f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015421:	6a 00                	push   0x0
c0015423:	68 78 4c 01 c0       	push   0xc0014c78
c0015428:	6a 00                	push   0x0
c001542a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542d:	ff d0                	call   eax
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015435:	8b 00                	mov    eax,DWORD PTR [eax]
c0015437:	83 c0 24             	add    eax,0x24
c001543a:	8b 00                	mov    eax,DWORD PTR [eax]
c001543c:	6a 00                	push   0x0
c001543e:	68 78 4c 01 c0       	push   0xc0014c78
c0015443:	6a 01                	push   0x1
c0015445:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015448:	ff d0                	call   eax
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015450:	8b 00                	mov    eax,DWORD PTR [eax]
c0015452:	83 c0 24             	add    eax,0x24
c0015455:	8b 00                	mov    eax,DWORD PTR [eax]
c0015457:	6a 00                	push   0x0
c0015459:	68 c7 45 01 c0       	push   0xc00145c7
c001545e:	6a 02                	push   0x2
c0015460:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015463:	ff d0                	call   eax
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546b:	8b 00                	mov    eax,DWORD PTR [eax]
c001546d:	83 c0 24             	add    eax,0x24
c0015470:	8b 00                	mov    eax,DWORD PTR [eax]
c0015472:	6a 00                	push   0x0
c0015474:	68 78 4c 01 c0       	push   0xc0014c78
c0015479:	6a 03                	push   0x3
c001547b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547e:	ff d0                	call   eax
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8b 00                	mov    eax,DWORD PTR [eax]
c0015488:	83 c0 24             	add    eax,0x24
c001548b:	8b 00                	mov    eax,DWORD PTR [eax]
c001548d:	6a 00                	push   0x0
c001548f:	68 78 4c 01 c0       	push   0xc0014c78
c0015494:	6a 04                	push   0x4
c0015496:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015499:	ff d0                	call   eax
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a3:	83 c0 24             	add    eax,0x24
c00154a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a8:	6a 00                	push   0x0
c00154aa:	68 78 4c 01 c0       	push   0xc0014c78
c00154af:	6a 05                	push   0x5
c00154b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b4:	ff d0                	call   eax
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154be:	83 c0 24             	add    eax,0x24
c00154c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c3:	6a 00                	push   0x0
c00154c5:	68 97 4c 01 c0       	push   0xc0014c97
c00154ca:	6a 06                	push   0x6
c00154cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cf:	ff d0                	call   eax
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d9:	83 c0 24             	add    eax,0x24
c00154dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154de:	6a 00                	push   0x0
c00154e0:	68 f9 4b 01 c0       	push   0xc0014bf9
c00154e5:	6a 07                	push   0x7
c00154e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ea:	ff d0                	call   eax
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f4:	83 c0 24             	add    eax,0x24
c00154f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f9:	6a 00                	push   0x0
c00154fb:	68 e2 43 01 c0       	push   0xc00143e2
c0015500:	6a 08                	push   0x8
c0015502:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015505:	ff d0                	call   eax
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	83 c0 24             	add    eax,0x24
c0015512:	8b 00                	mov    eax,DWORD PTR [eax]
c0015514:	6a 00                	push   0x0
c0015516:	68 78 4c 01 c0       	push   0xc0014c78
c001551b:	6a 09                	push   0x9
c001551d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015520:	ff d0                	call   eax
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 24             	add    eax,0x24
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	68 78 4c 01 c0       	push   0xc0014c78
c0015536:	6a 0a                	push   0xa
c0015538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553b:	ff d0                	call   eax
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015543:	8b 00                	mov    eax,DWORD PTR [eax]
c0015545:	83 c0 24             	add    eax,0x24
c0015548:	8b 00                	mov    eax,DWORD PTR [eax]
c001554a:	6a 00                	push   0x0
c001554c:	68 78 4c 01 c0       	push   0xc0014c78
c0015551:	6a 0b                	push   0xb
c0015553:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015556:	ff d0                	call   eax
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015560:	83 c0 24             	add    eax,0x24
c0015563:	8b 00                	mov    eax,DWORD PTR [eax]
c0015565:	6a 00                	push   0x0
c0015567:	68 78 4c 01 c0       	push   0xc0014c78
c001556c:	6a 0c                	push   0xc
c001556e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015571:	ff d0                	call   eax
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015579:	8b 00                	mov    eax,DWORD PTR [eax]
c001557b:	83 c0 24             	add    eax,0x24
c001557e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015580:	6a 00                	push   0x0
c0015582:	68 28 4c 01 c0       	push   0xc0014c28
c0015587:	6a 0d                	push   0xd
c0015589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558c:	ff d0                	call   eax
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015594:	8b 00                	mov    eax,DWORD PTR [eax]
c0015596:	83 c0 24             	add    eax,0x24
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	6a 00                	push   0x0
c001559d:	68 61 4c 01 c0       	push   0xc0014c61
c00155a2:	6a 0e                	push   0xe
c00155a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155af:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b1:	83 c0 24             	add    eax,0x24
c00155b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b6:	6a 00                	push   0x0
c00155b8:	68 78 4c 01 c0       	push   0xc0014c78
c00155bd:	6a 0f                	push   0xf
c00155bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c2:	ff d0                	call   eax
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cc:	83 c0 24             	add    eax,0x24
c00155cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d1:	6a 00                	push   0x0
c00155d3:	68 78 4c 01 c0       	push   0xc0014c78
c00155d8:	6a 10                	push   0x10
c00155da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155dd:	ff d0                	call   eax
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e7:	83 c0 24             	add    eax,0x24
c00155ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ec:	6a 00                	push   0x0
c00155ee:	68 78 4c 01 c0       	push   0xc0014c78
c00155f3:	6a 11                	push   0x11
c00155f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f8:	ff d0                	call   eax
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015600:	8b 00                	mov    eax,DWORD PTR [eax]
c0015602:	83 c0 24             	add    eax,0x24
c0015605:	8b 00                	mov    eax,DWORD PTR [eax]
c0015607:	6a 00                	push   0x0
c0015609:	68 78 4c 01 c0       	push   0xc0014c78
c001560e:	6a 12                	push   0x12
c0015610:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015613:	ff d0                	call   eax
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561b:	8b 00                	mov    eax,DWORD PTR [eax]
c001561d:	83 c0 24             	add    eax,0x24
c0015620:	8b 00                	mov    eax,DWORD PTR [eax]
c0015622:	6a 00                	push   0x0
c0015624:	68 78 4c 01 c0       	push   0xc0014c78
c0015629:	6a 13                	push   0x13
c001562b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562e:	ff d0                	call   eax
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	83 c0 24             	add    eax,0x24
c001563b:	8b 00                	mov    eax,DWORD PTR [eax]
c001563d:	6a 00                	push   0x0
c001563f:	68 78 4c 01 c0       	push   0xc0014c78
c0015644:	6a 14                	push   0x14
c0015646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015649:	ff d0                	call   eax
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	8b 00                	mov    eax,DWORD PTR [eax]
c0015653:	83 c0 24             	add    eax,0x24
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	6a 00                	push   0x0
c001565a:	68 78 4c 01 c0       	push   0xc0014c78
c001565f:	6a 1e                	push   0x1e
c0015661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 24             	add    eax,0x24
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	6a 00                	push   0x0
c0015675:	68 ed be 01 c0       	push   0xc001beed
c001567a:	6a 60                	push   0x60
c001567c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567f:	ff d0                	call   eax
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015687:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001568a:	c9                   	leave  
c001568b:	c3                   	ret    

c001568c <InterruptController::convertLegacyIRQNumber(int)>:
c001568c:	55                   	push   ebp
c001568d:	89 e5                	mov    ebp,esp
c001568f:	83 ec 08             	sub    esp,0x8
c0015692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015695:	83 ec 0c             	sub    esp,0xc
c0015698:	50                   	push   eax
c0015699:	e8 68 e9 ff ff       	call   c0014006 <Device::getName()>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	8a 00                	mov    al,BYTE PTR [eax]
c00156a3:	3c 41                	cmp    al,0x41
c00156a5:	0f 94 c0             	sete   al
c00156a8:	84 c0                	test   al,al
c00156aa:	74 28                	je     c00156d4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156ac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156b0:	7f 12                	jg     c00156c4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156b5:	05 20 cd 02 c0       	add    eax,0xc002cd20
c00156ba:	8a 00                	mov    al,BYTE PTR [eax]
c00156bc:	0f b6 c0             	movzx  eax,al
c00156bf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156c2:	eb 10                	jmp    c00156d4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156c4:	83 ec 0c             	sub    esp,0xc
c00156c7:	68 c0 a4 02 c0       	push   0xc002a4c0
c00156cc:	e8 c8 47 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c00156d1:	83 c4 10             	add    esp,0x10
c00156d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156d7:	c9                   	leave  
c00156d8:	c3                   	ret    
c00156d9:	90                   	nop

c00156da <startGUI(void*)>:
c00156da:	55                   	push   ebp
c00156db:	89 e5                	mov    ebp,esp
c00156dd:	53                   	push   ebx
c00156de:	83 ec 04             	sub    esp,0x4
c00156e1:	e8 06 7e 00 00       	call   c001d4ec <unlockScheduler()>
c00156e6:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c00156ec:	83 ec 08             	sub    esp,0x8
c00156ef:	6a 01                	push   0x1
c00156f1:	68 10 a8 02 c0       	push   0xc002a810
c00156f6:	e8 7c 77 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c00156fb:	83 c4 10             	add    esp,0x10
c00156fe:	83 ec 08             	sub    esp,0x8
c0015701:	53                   	push   ebx
c0015702:	50                   	push   eax
c0015703:	e8 7e 79 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0015711:	83 ec 08             	sub    esp,0x8
c0015714:	6a 01                	push   0x1
c0015716:	68 2a a8 02 c0       	push   0xc002a82a
c001571b:	e8 57 77 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c0015720:	83 c4 10             	add    esp,0x10
c0015723:	83 ec 08             	sub    esp,0x8
c0015726:	53                   	push   ebx
c0015727:	50                   	push   eax
c0015728:	e8 59 79 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	90                   	nop
c0015731:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015734:	c9                   	leave  
c0015735:	c3                   	ret    

c0015736 <startGUIVESA(void*)>:
c0015736:	55                   	push   ebp
c0015737:	89 e5                	mov    ebp,esp
c0015739:	53                   	push   ebx
c001573a:	83 ec 04             	sub    esp,0x4
c001573d:	e8 aa 7d 00 00       	call   c001d4ec <unlockScheduler()>
c0015742:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0015748:	83 ec 08             	sub    esp,0x8
c001574b:	6a 01                	push   0x1
c001574d:	68 44 a8 02 c0       	push   0xc002a844
c0015752:	e8 20 77 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c0015757:	83 c4 10             	add    esp,0x10
c001575a:	83 ec 08             	sub    esp,0x8
c001575d:	53                   	push   ebx
c001575e:	50                   	push   eax
c001575f:	e8 22 79 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001576d:	83 ec 08             	sub    esp,0x8
c0015770:	6a 01                	push   0x1
c0015772:	68 2a a8 02 c0       	push   0xc002a82a
c0015777:	e8 fb 76 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	83 ec 08             	sub    esp,0x8
c0015782:	53                   	push   ebx
c0015783:	50                   	push   eax
c0015784:	e8 fd 78 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	90                   	nop
c001578d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015790:	c9                   	leave  
c0015791:	c3                   	ret    

c0015792 <sendKeyToTerminal(unsigned char)>:
c0015792:	55                   	push   ebp
c0015793:	89 e5                	mov    ebp,esp
c0015795:	83 ec 28             	sub    esp,0x28
c0015798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001579e:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c00157a3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00157a7:	83 ec 08             	sub    esp,0x8
c00157aa:	52                   	push   edx
c00157ab:	50                   	push   eax
c00157ac:	e8 21 b9 ff ff       	call   c00110d2 <VgaText::receiveKey(unsigned char)>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157b8:	75 41                	jne    c00157fb <sendKeyToTerminal(unsigned char)+0x69>
c00157ba:	e8 52 7d 00 00       	call   c001d511 <lockStuff()>
c00157bf:	a1 80 dc 02 c0       	mov    eax,ds:0xc002dc80
c00157c4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157c7:	c7 05 80 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc80,0x0
c00157d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00157d5:	74 1f                	je     c00157f6 <sendKeyToTerminal(unsigned char)+0x64>
c00157d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00157dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157e6:	83 ec 0c             	sub    esp,0xc
c00157e9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157ec:	e8 11 83 00 00       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	eb db                	jmp    c00157d1 <sendKeyToTerminal(unsigned char)+0x3f>
c00157f6:	e8 b0 80 00 00       	call   c001d8ab <unlockStuff()>
c00157fb:	90                   	nop
c00157fc:	c9                   	leave  
c00157fd:	c3                   	ret    

c00157fe <sendKeyboardToken(KeyboardToken)>:
c00157fe:	55                   	push   ebp
c00157ff:	89 e5                	mov    ebp,esp
c0015801:	83 ec 18             	sub    esp,0x18
c0015804:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580a:	0f b7 c0             	movzx  eax,ax
c001580d:	83 f2 01             	xor    edx,0x1
c0015810:	88 90 a0 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2360],dl
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	66 3d 03 02          	cmp    ax,0x203
c001581d:	75 07                	jne    c0015826 <sendKeyboardToken(KeyboardToken)+0x28>
c001581f:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015824:	84 c0                	test   al,al
c0015826:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001582a:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001582d:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015832:	38 c2                	cmp    dl,al
c0015834:	74 1c                	je     c0015852 <sendKeyboardToken(KeyboardToken)+0x54>
c0015836:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015839:	a2 a8 e0 02 c0       	mov    ds:0xc002e0a8,al
c001583e:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015843:	0f b6 c0             	movzx  eax,al
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	50                   	push   eax
c001584a:	e8 e3 aa ff ff       	call   c0010332 <setTerminalScrollLock(bool)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015855:	84 c0                	test   al,al
c0015857:	0f 84 ae 00 00 00    	je     c001590b <sendKeyboardToken(KeyboardToken)+0x10d>
c001585d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015860:	66 3d 10 03          	cmp    ax,0x310
c0015864:	75 06                	jne    c001586c <sendKeyboardToken(KeyboardToken)+0x6e>
c0015866:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586f:	66 3d 11 03          	cmp    ax,0x311
c0015873:	75 06                	jne    c001587b <sendKeyboardToken(KeyboardToken)+0x7d>
c0015875:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	66 3d 12 03          	cmp    ax,0x312
c0015882:	75 06                	jne    c001588a <sendKeyboardToken(KeyboardToken)+0x8c>
c0015884:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	66 3d 13 03          	cmp    ax,0x313
c0015891:	75 06                	jne    c0015899 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015893:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589c:	66 3d 14 03          	cmp    ax,0x314
c00158a0:	75 06                	jne    c00158a8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00158a2:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ab:	66 3d 15 03          	cmp    ax,0x315
c00158af:	75 06                	jne    c00158b7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00158b1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ba:	66 3d 16 03          	cmp    ax,0x316
c00158be:	75 06                	jne    c00158c6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00158c0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	66 3d 17 03          	cmp    ax,0x317
c00158cd:	75 06                	jne    c00158d5 <sendKeyboardToken(KeyboardToken)+0xd7>
c00158cf:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d8:	66 3d 18 03          	cmp    ax,0x318
c00158dc:	75 06                	jne    c00158e4 <sendKeyboardToken(KeyboardToken)+0xe6>
c00158de:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e7:	66 3d 19 03          	cmp    ax,0x319
c00158eb:	75 06                	jne    c00158f3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158ed:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f6:	66 3d 1a 03          	cmp    ax,0x31a
c00158fa:	0f 85 c9 00 00 00    	jne    c00159c9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015900:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015906:	e9 be 00 00 00       	jmp    c00159c9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	66 3d 10 03          	cmp    ax,0x310
c0015912:	75 0a                	jne    c001591e <sendKeyboardToken(KeyboardToken)+0x120>
c0015914:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001591a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015921:	66 3d 11 03          	cmp    ax,0x311
c0015925:	75 0a                	jne    c0015931 <sendKeyboardToken(KeyboardToken)+0x133>
c0015927:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001592d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015934:	66 3d 12 03          	cmp    ax,0x312
c0015938:	75 0a                	jne    c0015944 <sendKeyboardToken(KeyboardToken)+0x146>
c001593a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015940:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015947:	66 3d 13 03          	cmp    ax,0x313
c001594b:	75 0a                	jne    c0015957 <sendKeyboardToken(KeyboardToken)+0x159>
c001594d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015953:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595a:	66 3d 14 03          	cmp    ax,0x314
c001595e:	75 0a                	jne    c001596a <sendKeyboardToken(KeyboardToken)+0x16c>
c0015960:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015966:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001596a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596d:	66 3d 15 03          	cmp    ax,0x315
c0015971:	75 0a                	jne    c001597d <sendKeyboardToken(KeyboardToken)+0x17f>
c0015973:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015979:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015980:	66 3d 16 03          	cmp    ax,0x316
c0015984:	75 0a                	jne    c0015990 <sendKeyboardToken(KeyboardToken)+0x192>
c0015986:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001598c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015993:	66 3d 17 03          	cmp    ax,0x317
c0015997:	75 0a                	jne    c00159a3 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015999:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001599f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a6:	66 3d 18 03          	cmp    ax,0x318
c00159aa:	75 0a                	jne    c00159b6 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00159ac:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b9:	66 3d 19 03          	cmp    ax,0x319
c00159bd:	75 0a                	jne    c00159c9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00159bf:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	66 3d 00 02          	cmp    ax,0x200
c00159d0:	75 2c                	jne    c00159fe <sendKeyboardToken(KeyboardToken)+0x200>
c00159d2:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c00159d7:	83 f0 01             	xor    eax,0x1
c00159da:	84 c0                	test   al,al
c00159dc:	74 20                	je     c00159fe <sendKeyboardToken(KeyboardToken)+0x200>
c00159de:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c00159e3:	6a 01                	push   0x1
c00159e5:	6a 00                	push   0x0
c00159e7:	68 da 56 01 c0       	push   0xc00156da
c00159ec:	50                   	push   eax
c00159ed:	e8 2a 7c 00 00       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c00159f2:	83 c4 10             	add    esp,0x10
c00159f5:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c00159fc:	eb 33                	jmp    c0015a31 <sendKeyboardToken(KeyboardToken)+0x233>
c00159fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a01:	66 3d 01 02          	cmp    ax,0x201
c0015a05:	75 2a                	jne    c0015a31 <sendKeyboardToken(KeyboardToken)+0x233>
c0015a07:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c0015a0c:	83 f0 01             	xor    eax,0x1
c0015a0f:	84 c0                	test   al,al
c0015a11:	74 1e                	je     c0015a31 <sendKeyboardToken(KeyboardToken)+0x233>
c0015a13:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0015a18:	6a 01                	push   0x1
c0015a1a:	6a 00                	push   0x0
c0015a1c:	68 36 57 01 c0       	push   0xc0015736
c0015a21:	50                   	push   eax
c0015a22:	e8 f5 7b 00 00       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c0015a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a34:	66 3d 1d 03          	cmp    ax,0x31d
c0015a38:	75 06                	jne    c0015a40 <sendKeyboardToken(KeyboardToken)+0x242>
c0015a3a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a43:	66 3d 1c 03          	cmp    ax,0x31c
c0015a47:	75 06                	jne    c0015a4f <sendKeyboardToken(KeyboardToken)+0x251>
c0015a49:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a52:	66 3d 1b 03          	cmp    ax,0x31b
c0015a56:	75 06                	jne    c0015a5e <sendKeyboardToken(KeyboardToken)+0x260>
c0015a58:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a61:	66 3d 1e 03          	cmp    ax,0x31e
c0015a65:	75 06                	jne    c0015a6d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a67:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a70:	66 3d 1f 03          	cmp    ax,0x31f
c0015a74:	75 06                	jne    c0015a7c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a76:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7f:	66 3d 1a 03          	cmp    ax,0x31a
c0015a83:	75 06                	jne    c0015a8b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a85:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a8b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a8f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a92:	83 f0 01             	xor    eax,0x1
c0015a95:	84 c0                	test   al,al
c0015a97:	74 77                	je     c0015b10 <sendKeyboardToken(KeyboardToken)+0x312>
c0015a99:	a0 a1 dd 02 c0       	mov    al,ds:0xc002dda1
c0015a9e:	84 c0                	test   al,al
c0015aa0:	74 41                	je     c0015ae3 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015aa2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015aa6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015aaa:	74 2b                	je     c0015ad7 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015aac:	8b 15 a4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a4
c0015ab2:	89 d0                	mov    eax,edx
c0015ab4:	c1 e0 02             	shl    eax,0x2
c0015ab7:	01 d0                	add    eax,edx
c0015ab9:	01 c0                	add    eax,eax
c0015abb:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac3:	0f b7 c0             	movzx  eax,ax
c0015ac6:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ac9:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015ace:	01 d0                	add    eax,edx
c0015ad0:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015ad5:	eb 6d                	jmp    c0015b44 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ad7:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015ae1:	eb 61                	jmp    c0015b44 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ae3:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015ae8:	85 c0                	test   eax,eax
c0015aea:	74 18                	je     c0015b04 <sendKeyboardToken(KeyboardToken)+0x306>
c0015aec:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015af1:	0f b6 c0             	movzx  eax,al
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	50                   	push   eax
c0015af8:	e8 95 fc ff ff       	call   c0015792 <sendKeyToTerminal(unsigned char)>
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b04:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b0e:	eb 34                	jmp    c0015b44 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b13:	66 3d 01 01          	cmp    ax,0x101
c0015b17:	75 2b                	jne    c0015b44 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b19:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b1e:	85 c0                	test   eax,eax
c0015b20:	74 18                	je     c0015b3a <sendKeyboardToken(KeyboardToken)+0x33c>
c0015b22:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b27:	0f b6 c0             	movzx  eax,al
c0015b2a:	83 ec 0c             	sub    esp,0xc
c0015b2d:	50                   	push   eax
c0015b2e:	e8 5f fc ff ff       	call   c0015792 <sendKeyToTerminal(unsigned char)>
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b3a:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b44:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b47:	83 f0 01             	xor    eax,0x1
c0015b4a:	84 c0                	test   al,al
c0015b4c:	74 4c                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b4e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b51:	83 f0 01             	xor    eax,0x1
c0015b54:	84 c0                	test   al,al
c0015b56:	74 42                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b58:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015b5d:	83 f0 01             	xor    eax,0x1
c0015b60:	84 c0                	test   al,al
c0015b62:	74 36                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b67:	66 83 f8 1f          	cmp    ax,0x1f
c0015b6b:	76 09                	jbe    c0015b76 <sendKeyboardToken(KeyboardToken)+0x378>
c0015b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b70:	66 83 f8 7e          	cmp    ax,0x7e
c0015b74:	76 12                	jbe    c0015b88 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b79:	66 83 f8 0a          	cmp    ax,0xa
c0015b7d:	74 09                	je     c0015b88 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b82:	66 83 f8 08          	cmp    ax,0x8
c0015b86:	75 12                	jne    c0015b9a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8b:	0f b6 c0             	movzx  eax,al
c0015b8e:	83 ec 0c             	sub    esp,0xc
c0015b91:	50                   	push   eax
c0015b92:	e8 fb fb ff ff       	call   c0015792 <sendKeyToTerminal(unsigned char)>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b9d:	83 f0 01             	xor    eax,0x1
c0015ba0:	84 c0                	test   al,al
c0015ba2:	74 4f                	je     c0015bf3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ba4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ba7:	83 f0 01             	xor    eax,0x1
c0015baa:	84 c0                	test   al,al
c0015bac:	74 45                	je     c0015bf3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bae:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015bb3:	84 c0                	test   al,al
c0015bb5:	74 3c                	je     c0015bf3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bba:	66 83 f8 3f          	cmp    ax,0x3f
c0015bbe:	76 33                	jbe    c0015bf3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc3:	66 83 f8 7f          	cmp    ax,0x7f
c0015bc7:	77 2a                	ja     c0015bf3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcc:	88 c2                	mov    dl,al
c0015bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd1:	66 83 f8 5f          	cmp    ax,0x5f
c0015bd5:	76 04                	jbe    c0015bdb <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015bd7:	b0 20                	mov    al,0x20
c0015bd9:	eb 02                	jmp    c0015bdd <sendKeyboardToken(KeyboardToken)+0x3df>
c0015bdb:	b0 00                	mov    al,0x0
c0015bdd:	29 c2                	sub    edx,eax
c0015bdf:	88 d0                	mov    al,dl
c0015be1:	83 e8 40             	sub    eax,0x40
c0015be4:	0f b6 c0             	movzx  eax,al
c0015be7:	83 ec 0c             	sub    esp,0xc
c0015bea:	50                   	push   eax
c0015beb:	e8 a2 fb ff ff       	call   c0015792 <sendKeyToTerminal(unsigned char)>
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf6:	66 3d 00 03          	cmp    ax,0x300
c0015bfa:	75 0f                	jne    c0015c0b <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bfc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bff:	83 f0 01             	xor    eax,0x1
c0015c02:	84 c0                	test   al,al
c0015c04:	74 05                	je     c0015c0b <sendKeyboardToken(KeyboardToken)+0x40d>
c0015c06:	e8 5c af ff ff       	call   c0010b67 <doTerminalCycle()>
c0015c0b:	90                   	nop
c0015c0c:	c9                   	leave  
c0015c0d:	c3                   	ret    

c0015c0e <clearInternalKeybuffer(VgaText*)>:
c0015c0e:	55                   	push   ebp
c0015c0f:	89 e5                	mov    ebp,esp
c0015c11:	83 ec 08             	sub    esp,0x8
c0015c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c17:	05 34 11 00 00       	add    eax,0x1134
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	50                   	push   eax
c0015c20:	e8 bc aa fe ff       	call   c00006e1 <strlen>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c2b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c31:	83 ec 04             	sub    esp,0x4
c0015c34:	50                   	push   eax
c0015c35:	6a 00                	push   0x0
c0015c37:	52                   	push   edx
c0015c38:	e8 87 aa fe ff       	call   c00006c4 <memset>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	90                   	nop
c0015c41:	c9                   	leave  
c0015c42:	c3                   	ret    

c0015c43 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c43:	55                   	push   ebp
c0015c44:	89 e5                	mov    ebp,esp
c0015c46:	83 ec 18             	sub    esp,0x18
c0015c49:	fb                   	sti    
c0015c4a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c51:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c55:	0f 84 8a 00 00 00    	je     c0015ce5 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c64:	84 c0                	test   al,al
c0015c66:	75 11                	jne    c0015c79 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c68:	e8 7d 78 00 00       	call   c001d4ea <lockScheduler()>
c0015c6d:	e8 b4 7b 00 00       	call   c001d826 <schedule()>
c0015c72:	e8 75 78 00 00       	call   c001d4ec <unlockScheduler()>
c0015c77:	eb e2                	jmp    c0015c5b <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c7c:	8d 50 01             	lea    edx,[eax+0x1]
c0015c7f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c85:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c8b:	88 10                	mov    BYTE PTR [eax],dl
c0015c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c90:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c96:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9c:	05 34 11 00 00       	add    eax,0x1134
c0015ca1:	83 ec 0c             	sub    esp,0xc
c0015ca4:	50                   	push   eax
c0015ca5:	e8 37 aa fe ff       	call   c00006e1 <strlen>
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cb0:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cb6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015cb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cbc:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cc2:	83 ec 04             	sub    esp,0x4
c0015cc5:	50                   	push   eax
c0015cc6:	51                   	push   ecx
c0015cc7:	52                   	push   edx
c0015cc8:	e8 9b a9 fe ff       	call   c0000668 <memmove>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015cd3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015cd6:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015cda:	0f 85 71 ff ff ff    	jne    c0015c51 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce3:	eb 03                	jmp    c0015ce8 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce8:	c9                   	leave  
c0015ce9:	c3                   	ret    

c0015cea <Keyboard::Keyboard(char const*)>:
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf1:	83 ec 08             	sub    esp,0x8
c0015cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf8:	50                   	push   eax
c0015cf9:	e8 0c e2 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015cfe:	83 c4 10             	add    esp,0x10
c0015d01:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0a:	89 10                	mov    DWORD PTR [eax],edx
c0015d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d10:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d1a:	c6 05 84 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc84,0x1
c0015d21:	90                   	nop
c0015d22:	83 c4 0c             	add    esp,0xc
c0015d25:	c3                   	ret    

c0015d26 <Keyboard::~Keyboard()>:
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d32:	89 10                	mov    DWORD PTR [eax],edx
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	50                   	push   eax
c0015d3c:	e8 ab de ff ff       	call   c0013bec <Device::~Device()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	90                   	nop
c0015d45:	83 c4 0c             	add    esp,0xc
c0015d48:	c3                   	ret    
c0015d49:	90                   	nop

c0015d4a <Keyboard::~Keyboard()>:
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	83 ec 0c             	sub    esp,0xc
c0015d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d54:	e8 cd ff ff ff       	call   c0015d26 <Keyboard::~Keyboard()>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	68 5c 01 00 00       	push   0x15c
c0015d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d68:	e8 a6 ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	c3                   	ret    

c0015d74 <LogicalDisk::close(int, int, void*)>:
c0015d74:	83 c8 ff             	or     eax,0xffffffff
c0015d77:	c3                   	ret    

c0015d78 <LogicalDisk::~LogicalDisk()>:
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d84:	89 10                	mov    DWORD PTR [eax],edx
c0015d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d8a:	83 ec 0c             	sub    esp,0xc
c0015d8d:	50                   	push   eax
c0015d8e:	e8 59 de ff ff       	call   c0013bec <Device::~Device()>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	90                   	nop
c0015d97:	83 c4 0c             	add    esp,0xc
c0015d9a:	c3                   	ret    
c0015d9b:	90                   	nop

c0015d9c <LogicalDisk::~LogicalDisk()>:
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	83 ec 0c             	sub    esp,0xc
c0015da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da6:	e8 cd ff ff ff       	call   c0015d78 <LogicalDisk::~LogicalDisk()>
c0015dab:	83 c4 10             	add    esp,0x10
c0015dae:	83 ec 08             	sub    esp,0x8
c0015db1:	68 74 01 00 00       	push   0x174
c0015db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dba:	e8 54 ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	83 c4 0c             	add    esp,0xc
c0015dc5:	c3                   	ret    

c0015dc6 <LogicalDisk::open(int, int, void*)>:
c0015dc6:	83 ec 18             	sub    esp,0x18
c0015dc9:	68 94 a8 02 c0       	push   0xc002a894
c0015dce:	e8 c6 40 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0015dd3:	83 c8 ff             	or     eax,0xffffffff
c0015dd6:	83 c4 1c             	add    esp,0x1c
c0015dd9:	c3                   	ret    

c0015dda <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dda:	53                   	push   ebx
c0015ddb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015de3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015de7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ded:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015df3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015df9:	77 10                	ja     c0015e0b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015dfb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e01:	89 d3                	mov    ebx,edx
c0015e03:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e09:	72 05                	jb     c0015e10 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e0b:	83 c8 ff             	or     eax,0xffffffff
c0015e0e:	89 c2                	mov    edx,eax
c0015e10:	5b                   	pop    ebx
c0015e11:	c3                   	ret    

c0015e12 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e12:	56                   	push   esi
c0015e13:	83 c8 ff             	or     eax,0xffffffff
c0015e16:	53                   	push   ebx
c0015e17:	89 c2                	mov    edx,eax
c0015e19:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e1d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e25:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e2b:	77 27                	ja     c0015e54 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e2d:	89 d8                	mov    eax,ebx
c0015e2f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e35:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e40:	89 c2                	mov    edx,eax
c0015e42:	73 10                	jae    c0015e54 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e44:	89 c8                	mov    eax,ecx
c0015e46:	89 da                	mov    edx,ebx
c0015e48:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e4e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e54:	5b                   	pop    ebx
c0015e55:	5e                   	pop    esi
c0015e56:	c3                   	ret    
c0015e57:	90                   	nop

c0015e58 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e58:	83 ec 1c             	sub    esp,0x1c
c0015e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e7e:	83 ec 08             	sub    esp,0x8
c0015e81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e85:	50                   	push   eax
c0015e86:	e8 7f e0 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e97:	89 10                	mov    DWORD PTR [eax],edx
c0015e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015ebd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ec1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ecf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ed5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ed9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015edc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ee0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ee6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ef4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015efe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f08:	90                   	nop
c0015f09:	83 c4 1c             	add    esp,0x1c
c0015f0c:	c3                   	ret    
c0015f0d:	90                   	nop

c0015f0e <LogicalDisk::assignDriveLetter()>:
c0015f0e:	55                   	push   ebp
c0015f0f:	57                   	push   edi
c0015f10:	56                   	push   esi
c0015f11:	53                   	push   ebx
c0015f12:	83 ec 14             	sub    esp,0x14
c0015f15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f19:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c0015f1f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f25:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f29:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f2f:	8b 3d c4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c4
c0015f35:	3c 01                	cmp    al,0x1
c0015f37:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f3b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f3f:	19 c0                	sbb    eax,eax
c0015f41:	83 e0 02             	and    eax,0x2
c0015f44:	83 c0 41             	add    eax,0x41
c0015f47:	0f be e8             	movsx  ebp,al
c0015f4a:	3c 43                	cmp    al,0x43
c0015f4c:	75 10                	jne    c0015f5e <LogicalDisk::assignDriveLetter()+0x50>
c0015f4e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f55:	75 5d                	jne    c0015fb4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f57:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f5c:	75 56                	jne    c0015fb4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f5e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f61:	ba 01 00 00 00       	mov    edx,0x1
c0015f66:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f6a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f6e:	d3 e2                	shl    edx,cl
c0015f70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f74:	89 d7                	mov    edi,edx
c0015f76:	89 d6                	mov    esi,edx
c0015f78:	c1 ff 1f             	sar    edi,0x1f
c0015f7b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f7f:	21 f9                	and    ecx,edi
c0015f81:	09 d1                	or     ecx,edx
c0015f83:	75 2f                	jne    c0015fb4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f85:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f8d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f93:	09 f2                	or     edx,esi
c0015f95:	89 15 c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,edx
c0015f9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f9f:	09 fa                	or     edx,edi
c0015fa1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015fa5:	89 15 c4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c4,edx
c0015fab:	89 1c bd e0 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f20],ebx
c0015fb2:	eb 08                	jmp    c0015fbc <LogicalDisk::assignDriveLetter()+0xae>
c0015fb4:	45                   	inc    ebp
c0015fb5:	40                   	inc    eax
c0015fb6:	3c 5b                	cmp    al,0x5b
c0015fb8:	75 90                	jne    c0015f4a <LogicalDisk::assignDriveLetter()+0x3c>
c0015fba:	31 c0                	xor    eax,eax
c0015fbc:	83 c4 14             	add    esp,0x14
c0015fbf:	5b                   	pop    ebx
c0015fc0:	5e                   	pop    esi
c0015fc1:	5f                   	pop    edi
c0015fc2:	5d                   	pop    ebp
c0015fc3:	c3                   	ret    

c0015fc4 <LogicalDisk::mount()>:
c0015fc4:	56                   	push   esi
c0015fc5:	53                   	push   ebx
c0015fc6:	51                   	push   ecx
c0015fc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fcb:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c0015fd1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fdb:	85 db                	test   ebx,ebx
c0015fdd:	74 50                	je     c001602f <LogicalDisk::mount()+0x6b>
c0015fdf:	e8 f1 74 00 00       	call   c001d4d5 <getIRQNestingLevel()>
c0015fe4:	52                   	push   edx
c0015fe5:	52                   	push   edx
c0015fe6:	50                   	push   eax
c0015fe7:	68 b8 a8 02 c0       	push   0xc002a8b8
c0015fec:	e8 02 c9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015ff1:	83 c4 0c             	add    esp,0xc
c0015ff4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ffb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ffd:	83 e8 41             	sub    eax,0x41
c0016000:	50                   	push   eax
c0016001:	56                   	push   esi
c0016002:	53                   	push   ebx
c0016003:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016006:	83 c4 10             	add    esp,0x10
c0016009:	84 c0                	test   al,al
c001600b:	74 08                	je     c0016015 <LogicalDisk::mount()+0x51>
c001600d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016013:	eb 1c                	jmp    c0016031 <LogicalDisk::mount()+0x6d>
c0016015:	e8 bb 74 00 00       	call   c001d4d5 <getIRQNestingLevel()>
c001601a:	51                   	push   ecx
c001601b:	51                   	push   ecx
c001601c:	50                   	push   eax
c001601d:	68 d3 a8 02 c0       	push   0xc002a8d3
c0016022:	e8 cc c8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016027:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001602a:	83 c4 10             	add    esp,0x10
c001602d:	eb ac                	jmp    c0015fdb <LogicalDisk::mount()+0x17>
c001602f:	31 c0                	xor    eax,eax
c0016031:	5a                   	pop    edx
c0016032:	5b                   	pop    ebx
c0016033:	5e                   	pop    esi
c0016034:	c3                   	ret    
c0016035:	90                   	nop

c0016036 <LogicalDisk::unmount()>:
c0016036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001603a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016044:	c3                   	ret    
c0016045:	90                   	nop

c0016046 <LogicalDisk::eject()>:
c0016046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001604a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016050:	8b 10                	mov    edx,DWORD PTR [eax]
c0016052:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016056:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016059:	90                   	nop

c001605a <LogicalDisk::unassignDriveLetter()>:
c001605a:	57                   	push   edi
c001605b:	56                   	push   esi
c001605c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016060:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016067:	84 c9                	test   cl,cl
c0016069:	75 0f                	jne    c001607a <LogicalDisk::unassignDriveLetter()+0x20>
c001606b:	c7 44 24 0c ee a8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a8ee
c0016073:	5e                   	pop    esi
c0016074:	5f                   	pop    edi
c0016075:	e9 1f 3e 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c001607a:	83 e9 41             	sub    ecx,0x41
c001607d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016084:	b8 01 00 00 00       	mov    eax,0x1
c0016089:	c7 04 8d e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f20],0x0
c0016094:	d3 e0                	shl    eax,cl
c0016096:	89 c7                	mov    edi,eax
c0016098:	f7 d0                	not    eax
c001609a:	c1 ff 1f             	sar    edi,0x1f
c001609d:	21 05 c0 e0 02 c0    	and    DWORD PTR ds:0xc002e0c0,eax
c00160a3:	89 fe                	mov    esi,edi
c00160a5:	f7 d6                	not    esi
c00160a7:	21 35 c4 e0 02 c0    	and    DWORD PTR ds:0xc002e0c4,esi
c00160ad:	5e                   	pop    esi
c00160ae:	5f                   	pop    edi
c00160af:	c3                   	ret    

c00160b0 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160b0:	57                   	push   edi
c00160b1:	56                   	push   esi
c00160b2:	53                   	push   ebx
c00160b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160c9:	77 41                	ja     c001610c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160cb:	99                   	cdq    
c00160cc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160d2:	01 c8                	add    eax,ecx
c00160d4:	11 da                	adc    edx,ebx
c00160d6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160dc:	19 d7                	sbb    edi,edx
c00160de:	72 33                	jb     c0016113 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160e0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160e6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160f0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160f4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016100:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016104:	5b                   	pop    ebx
c0016105:	5e                   	pop    esi
c0016106:	5f                   	pop    edi
c0016107:	e9 b0 0a 00 00       	jmp    c0016bbc <VCache::read(unsigned long long, int, void*)>
c001610c:	b8 05 00 00 00       	mov    eax,0x5
c0016111:	eb 05                	jmp    c0016118 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016113:	b8 07 00 00 00       	mov    eax,0x7
c0016118:	5b                   	pop    ebx
c0016119:	5e                   	pop    esi
c001611a:	5f                   	pop    edi
c001611b:	c3                   	ret    

c001611c <LogicalDisk::write(unsigned long long, int, void*)>:
c001611c:	57                   	push   edi
c001611d:	56                   	push   esi
c001611e:	53                   	push   ebx
c001611f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016123:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016127:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001612b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001612f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016135:	77 41                	ja     c0016178 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016137:	99                   	cdq    
c0016138:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001613e:	01 c8                	add    eax,ecx
c0016140:	11 da                	adc    edx,ebx
c0016142:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016148:	19 d7                	sbb    edi,edx
c001614a:	72 33                	jb     c001617f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001614c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016152:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016158:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001615c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016160:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016166:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001616c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016170:	5b                   	pop    ebx
c0016171:	5e                   	pop    esi
c0016172:	5f                   	pop    edi
c0016173:	e9 4e 09 00 00       	jmp    c0016ac6 <VCache::write(unsigned long long, int, void*)>
c0016178:	b8 05 00 00 00       	mov    eax,0x5
c001617d:	eb 05                	jmp    c0016184 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001617f:	b8 07 00 00 00       	mov    eax,0x7
c0016184:	5b                   	pop    ebx
c0016185:	5e                   	pop    esi
c0016186:	5f                   	pop    edi
c0016187:	c3                   	ret    

c0016188 <Mouse::Mouse(char const*)>:
c0016188:	83 ec 0c             	sub    esp,0xc
c001618b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618f:	83 ec 08             	sub    esp,0x8
c0016192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016196:	50                   	push   eax
c0016197:	e8 6e dd ff ff       	call   c0013f0a <Device::Device(char const*)>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c00161a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a8:	89 10                	mov    DWORD PTR [eax],edx
c00161aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ae:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161b8:	90                   	nop
c00161b9:	83 c4 0c             	add    esp,0xc
c00161bc:	c3                   	ret    
c00161bd:	90                   	nop

c00161be <Mouse::~Mouse()>:
c00161be:	83 ec 0c             	sub    esp,0xc
c00161c1:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c00161c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ca:	89 10                	mov    DWORD PTR [eax],edx
c00161cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	50                   	push   eax
c00161d4:	e8 13 da ff ff       	call   c0013bec <Device::~Device()>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	90                   	nop
c00161dd:	83 c4 0c             	add    esp,0xc
c00161e0:	c3                   	ret    
c00161e1:	90                   	nop

c00161e2 <Mouse::~Mouse()>:
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	83 ec 0c             	sub    esp,0xc
c00161e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ec:	e8 cd ff ff ff       	call   c00161be <Mouse::~Mouse()>
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	83 ec 08             	sub    esp,0x8
c00161f7:	68 58 01 00 00       	push   0x158
c00161fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016200:	e8 0e c6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016205:	83 c4 10             	add    esp,0x10
c0016208:	83 c4 0c             	add    esp,0xc
c001620b:	c3                   	ret    

c001620c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001620c:	55                   	push   ebp
c001620d:	57                   	push   edi
c001620e:	56                   	push   esi
c001620f:	53                   	push   ebx
c0016210:	81 ec 28 01 00 00    	sub    esp,0x128
c0016216:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001621d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016224:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001622b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016232:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016236:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001623a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016241:	e8 c0 dd ff ff       	call   c0014006 <Device::getName()>
c0016246:	5a                   	pop    edx
c0016247:	59                   	pop    ecx
c0016248:	50                   	push   eax
c0016249:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001624d:	55                   	push   ebp
c001624e:	e8 10 a5 fe ff       	call   c0000763 <strcpy>
c0016253:	5b                   	pop    ebx
c0016254:	58                   	pop    eax
c0016255:	68 68 a9 02 c0       	push   0xc002a968
c001625a:	55                   	push   ebp
c001625b:	e8 ba a5 fe ff       	call   c000081a <strcat>
c0016260:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016267:	e8 b8 93 ff ff       	call   c000f624 <malloc>
c001626c:	83 c4 0c             	add    esp,0xc
c001626f:	89 c3                	mov    ebx,eax
c0016271:	57                   	push   edi
c0016272:	56                   	push   esi
c0016273:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016277:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001627b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016282:	55                   	push   ebp
c0016283:	50                   	push   eax
c0016284:	e8 cf fb ff ff       	call   c0015e58 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016289:	83 c4 14             	add    esp,0x14
c001628c:	53                   	push   ebx
c001628d:	e8 7c fc ff ff       	call   c0015f0e <LogicalDisk::assignDriveLetter()>
c0016292:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016295:	89 c6                	mov    esi,eax
c0016297:	e8 28 fd ff ff       	call   c0015fc4 <LogicalDisk::mount()>
c001629c:	58                   	pop    eax
c001629d:	5a                   	pop    edx
c001629e:	53                   	push   ebx
c001629f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162a6:	e8 6f da ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00162ab:	59                   	pop    ecx
c00162ac:	89 f0                	mov    eax,esi
c00162ae:	5b                   	pop    ebx
c00162af:	0f be f0             	movsx  esi,al
c00162b2:	56                   	push   esi
c00162b3:	68 73 a9 02 c0       	push   0xc002a973
c00162b8:	e8 36 c6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00162bd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162c3:	5b                   	pop    ebx
c00162c4:	5e                   	pop    esi
c00162c5:	5f                   	pop    edi
c00162c6:	5d                   	pop    ebp
c00162c7:	c3                   	ret    

c00162c8 <createPartitionsForDisk(PhysicalDisk*)>:
c00162c8:	55                   	push   ebp
c00162c9:	57                   	push   edi
c00162ca:	56                   	push   esi
c00162cb:	53                   	push   ebx
c00162cc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162d2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162df:	3d 00 02 00 00       	cmp    eax,0x200
c00162e4:	74 27                	je     c001630d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162e6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162ec:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162f2:	83 ec 10             	sub    esp,0x10
c00162f5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162f9:	99                   	cdq    
c00162fa:	c1 e6 0a             	shl    esi,0xa
c00162fd:	52                   	push   edx
c00162fe:	89 fd                	mov    ebp,edi
c0016300:	50                   	push   eax
c0016301:	55                   	push   ebp
c0016302:	56                   	push   esi
c0016303:	e8 44 fe 00 00       	call   c002614c <__udivdi3>
c0016308:	e9 b1 00 00 00       	jmp    c00163be <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001630d:	83 ec 0c             	sub    esp,0xc
c0016310:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016312:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016316:	56                   	push   esi
c0016317:	6a 01                	push   0x1
c0016319:	6a 00                	push   0x0
c001631b:	6a 00                	push   0x0
c001631d:	53                   	push   ebx
c001631e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016321:	83 c4 20             	add    esp,0x20
c0016324:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001632c:	75 0a                	jne    c0016338 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001632e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016336:	74 2c                	je     c0016364 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016338:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001633e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016344:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001634a:	83 ec 10             	sub    esp,0x10
c001634d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016351:	89 f7                	mov    edi,esi
c0016353:	c1 e0 0a             	shl    eax,0xa
c0016356:	c1 ff 1f             	sar    edi,0x1f
c0016359:	57                   	push   edi
c001635a:	56                   	push   esi
c001635b:	52                   	push   edx
c001635c:	50                   	push   eax
c001635d:	e8 ea fd 00 00       	call   c002614c <__udivdi3>
c0016362:	eb 5a                	jmp    c00163be <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016364:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001636b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016372:	83 e1 7f             	and    ecx,0x7f
c0016375:	83 e0 7f             	and    eax,0x7f
c0016378:	01 c1                	add    ecx,eax
c001637a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016381:	83 e0 7f             	and    eax,0x7f
c0016384:	01 c1                	add    ecx,eax
c0016386:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001638d:	83 e0 7f             	and    eax,0x7f
c0016390:	00 c1                	add    cl,al
c0016392:	74 41                	je     c00163d5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016394:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001639a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163a6:	83 ec 10             	sub    esp,0x10
c00163a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163ad:	89 f7                	mov    edi,esi
c00163af:	c1 e0 0a             	shl    eax,0xa
c00163b2:	c1 ff 1f             	sar    edi,0x1f
c00163b5:	57                   	push   edi
c00163b6:	56                   	push   esi
c00163b7:	52                   	push   edx
c00163b8:	50                   	push   eax
c00163b9:	e8 8e fd 00 00       	call   c002614c <__udivdi3>
c00163be:	83 c4 14             	add    esp,0x14
c00163c1:	52                   	push   edx
c00163c2:	50                   	push   eax
c00163c3:	6a 00                	push   0x0
c00163c5:	6a 00                	push   0x0
c00163c7:	53                   	push   ebx
c00163c8:	e8 3f fe ff ff       	call   c001620c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163cd:	83 c4 20             	add    esp,0x20
c00163d0:	e9 79 01 00 00       	jmp    c001654e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163d5:	89 f0                	mov    eax,esi
c00163d7:	31 f6                	xor    esi,esi
c00163d9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163e0:	75 02                	jne    c00163e4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163e2:	89 f1                	mov    ecx,esi
c00163e4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163eb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163f2:	c1 e2 08             	shl    edx,0x8
c00163f5:	c1 e7 10             	shl    edi,0x10
c00163f8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016400:	09 fa                	or     edx,edi
c0016402:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001640a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016411:	83 c0 10             	add    eax,0x10
c0016414:	09 fa                	or     edx,edi
c0016416:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001641d:	c1 e7 18             	shl    edi,0x18
c0016420:	09 fa                	or     edx,edi
c0016422:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016429:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001642d:	c1 e7 10             	shl    edi,0x10
c0016430:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016437:	c1 e2 08             	shl    edx,0x8
c001643a:	09 fa                	or     edx,edi
c001643c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016443:	09 fa                	or     edx,edi
c0016445:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001644c:	c1 e7 18             	shl    edi,0x18
c001644f:	09 fa                	or     edx,edi
c0016451:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016455:	46                   	inc    esi
c0016456:	83 fe 04             	cmp    esi,0x4
c0016459:	0f 85 7a ff ff ff    	jne    c00163d9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001645f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016463:	83 f0 01             	xor    eax,0x1
c0016466:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001646a:	75 57                	jne    c00164c3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001646c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016470:	83 f0 01             	xor    eax,0x1
c0016473:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016477:	75 4a                	jne    c00164c3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016479:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001647d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016485:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001648d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016493:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016499:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001649f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164a3:	89 f7                	mov    edi,esi
c00164a5:	c1 e0 0a             	shl    eax,0xa
c00164a8:	c1 ff 1f             	sar    edi,0x1f
c00164ab:	57                   	push   edi
c00164ac:	56                   	push   esi
c00164ad:	52                   	push   edx
c00164ae:	50                   	push   eax
c00164af:	e8 98 fc 00 00       	call   c002614c <__udivdi3>
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164bb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164bf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164c3:	84 c9                	test   cl,cl
c00164c5:	74 53                	je     c001651a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164c7:	0f b6 c9             	movzx  ecx,cl
c00164ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164d2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164d6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164e2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164e6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164fa:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164fe:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016502:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016506:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001650a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001650e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016512:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016516:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001651a:	31 ed                	xor    ebp,ebp
c001651c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016520:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016524:	89 f8                	mov    eax,edi
c0016526:	09 f0                	or     eax,esi
c0016528:	74 1e                	je     c0016548 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001652a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001652e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016532:	89 d1                	mov    ecx,edx
c0016534:	09 c1                	or     ecx,eax
c0016536:	74 10                	je     c0016548 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016538:	83 ec 0c             	sub    esp,0xc
c001653b:	57                   	push   edi
c001653c:	56                   	push   esi
c001653d:	52                   	push   edx
c001653e:	50                   	push   eax
c001653f:	53                   	push   ebx
c0016540:	e8 c7 fc ff ff       	call   c001620c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016545:	83 c4 20             	add    esp,0x20
c0016548:	45                   	inc    ebp
c0016549:	83 fd 04             	cmp    ebp,0x4
c001654c:	75 ce                	jne    c001651c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001654e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016554:	5b                   	pop    ebx
c0016555:	5e                   	pop    esi
c0016556:	5f                   	pop    edi
c0016557:	5d                   	pop    ebp
c0016558:	c3                   	ret    
c0016559:	90                   	nop

c001655a <Serial::Serial(char const*)>:
c001655a:	83 ec 0c             	sub    esp,0xc
c001655d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016561:	83 ec 08             	sub    esp,0x8
c0016564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016568:	50                   	push   eax
c0016569:	e8 9c d9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001656e:	83 c4 10             	add    esp,0x10
c0016571:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0016576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657a:	89 10                	mov    DWORD PTR [eax],edx
c001657c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016580:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001658a:	90                   	nop
c001658b:	83 c4 0c             	add    esp,0xc
c001658e:	c3                   	ret    
c001658f:	90                   	nop

c0016590 <Serial::~Serial()>:
c0016590:	83 ec 0c             	sub    esp,0xc
c0016593:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0016598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659c:	89 10                	mov    DWORD PTR [eax],edx
c001659e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a2:	83 ec 0c             	sub    esp,0xc
c00165a5:	50                   	push   eax
c00165a6:	e8 41 d6 ff ff       	call   c0013bec <Device::~Device()>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	90                   	nop
c00165af:	83 c4 0c             	add    esp,0xc
c00165b2:	c3                   	ret    
c00165b3:	90                   	nop

c00165b4 <Serial::~Serial()>:
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	83 ec 0c             	sub    esp,0xc
c00165ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165be:	e8 cd ff ff ff       	call   c0016590 <Serial::~Serial()>
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	83 ec 08             	sub    esp,0x8
c00165c9:	68 58 01 00 00       	push   0x158
c00165ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d2:	e8 3c c2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	83 c4 0c             	add    esp,0xc
c00165dd:	c3                   	ret    

c00165de <Timer::Timer(char const*)>:
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e5:	83 ec 08             	sub    esp,0x8
c00165e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ec:	50                   	push   eax
c00165ed:	e8 18 d9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00165f2:	83 c4 10             	add    esp,0x10
c00165f5:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c00165fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165fe:	89 10                	mov    DWORD PTR [eax],edx
c0016600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016604:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001660e:	90                   	nop
c001660f:	83 c4 0c             	add    esp,0xc
c0016612:	c3                   	ret    
c0016613:	90                   	nop

c0016614 <Timer::~Timer()>:
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c001661c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016620:	89 10                	mov    DWORD PTR [eax],edx
c0016622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016626:	83 ec 0c             	sub    esp,0xc
c0016629:	50                   	push   eax
c001662a:	e8 bd d5 ff ff       	call   c0013bec <Device::~Device()>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	90                   	nop
c0016633:	83 c4 0c             	add    esp,0xc
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <Timer::~Timer()>:
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	83 ec 0c             	sub    esp,0xc
c001663e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016642:	e8 cd ff ff ff       	call   c0016614 <Timer::~Timer()>
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	83 ec 08             	sub    esp,0x8
c001664d:	68 5c 01 00 00       	push   0x15c
c0016652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016656:	e8 b8 c1 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	83 c4 0c             	add    esp,0xc
c0016661:	c3                   	ret    

c0016662 <Timer::read()>:
c0016662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016666:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001666c:	c3                   	ret    

c001666d <timerHandler(unsigned long long)>:
c001666d:	55                   	push   ebp
c001666e:	57                   	push   edi
c001666f:	56                   	push   esi
c0016670:	53                   	push   ebx
c0016671:	83 ec 0c             	sub    esp,0xc
c0016674:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016678:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001667c:	01 35 50 e1 02 c0    	add    DWORD PTR ds:0xc002e150,esi
c0016682:	11 3d 54 e1 02 c0    	adc    DWORD PTR ds:0xc002e154,edi
c0016688:	80 3d cd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacd,0x0
c001668f:	0f 84 07 01 00 00    	je     c001679c <timerHandler(unsigned long long)+0x12f>
c0016695:	e8 77 6e 00 00       	call   c001d511 <lockStuff()>
c001669a:	83 ec 0c             	sub    esp,0xc
c001669d:	68 1c 00 03 c0       	push   0xc003001c
c00166a2:	e8 17 1b 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166a7:	c7 04 24 1c 00 03 c0 	mov    DWORD PTR [esp],0xc003001c
c00166ae:	89 c3                	mov    ebx,eax
c00166b0:	e8 11 1b 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	84 c0                	test   al,al
c00166ba:	74 60                	je     c001671c <timerHandler(unsigned long long)+0xaf>
c00166bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166c2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00166c5:	85 c0                	test   eax,eax
c00166c7:	0f 85 91 00 00 00    	jne    c001675e <timerHandler(unsigned long long)+0xf1>
c00166cd:	e9 be 00 00 00       	jmp    c0016790 <timerHandler(unsigned long long)+0x123>
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	55                   	push   ebp
c00166d6:	e8 27 74 00 00       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	39 eb                	cmp    ebx,ebp
c00166e0:	75 12                	jne    c00166f4 <timerHandler(unsigned long long)+0x87>
c00166e2:	83 ec 0c             	sub    esp,0xc
c00166e5:	68 1c 00 03 c0       	push   0xc003001c
c00166ea:	e8 cf 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ef:	89 c3                	mov    ebx,eax
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	68 1c 00 03 c0       	push   0xc003001c
c00166fc:	e8 c5 1a 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016701:	83 c4 10             	add    esp,0x10
c0016704:	84 c0                	test   al,al
c0016706:	75 b4                	jne    c00166bc <timerHandler(unsigned long long)+0x4f>
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	68 1c 00 03 c0       	push   0xc003001c
c0016710:	e8 a9 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016715:	83 c4 10             	add    esp,0x10
c0016718:	39 d8                	cmp    eax,ebx
c001671a:	74 a0                	je     c00166bc <timerHandler(unsigned long long)+0x4f>
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	68 1c 00 03 c0       	push   0xc003001c
c0016724:	e8 95 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016729:	c7 04 24 1c 00 03 c0 	mov    DWORD PTR [esp],0xc003001c
c0016730:	89 c5                	mov    ebp,eax
c0016732:	e8 ab 1a 01 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016737:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016740:	39 15 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,edx
c0016746:	a1 54 e1 02 c0       	mov    eax,ds:0xc002e154
c001674b:	19 c8                	sbb    eax,ecx
c001674d:	73 83                	jae    c00166d2 <timerHandler(unsigned long long)+0x65>
c001674f:	50                   	push   eax
c0016750:	50                   	push   eax
c0016751:	55                   	push   ebp
c0016752:	68 1c 00 03 c0       	push   0xc003001c
c0016757:	e8 34 1b 01 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001675c:	eb 93                	jmp    c00166f1 <timerHandler(unsigned long long)+0x84>
c001675e:	80 3d cc da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacc,0x0
c0016765:	74 29                	je     c0016790 <timerHandler(unsigned long long)+0x123>
c0016767:	39 c6                	cmp    esi,eax
c0016769:	bb 00 00 00 00       	mov    ebx,0x0
c001676e:	19 df                	sbb    edi,ebx
c0016770:	72 19                	jb     c001678b <timerHandler(unsigned long long)+0x11e>
c0016772:	e8 73 6d 00 00       	call   c001d4ea <lockScheduler()>
c0016777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001677f:	e8 a2 70 00 00       	call   c001d826 <schedule()>
c0016784:	e8 63 6d 00 00       	call   c001d4ec <unlockScheduler()>
c0016789:	eb 05                	jmp    c0016790 <timerHandler(unsigned long long)+0x123>
c001678b:	29 f0                	sub    eax,esi
c001678d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016790:	83 c4 0c             	add    esp,0xc
c0016793:	5b                   	pop    ebx
c0016794:	5e                   	pop    esi
c0016795:	5f                   	pop    edi
c0016796:	5d                   	pop    ebp
c0016797:	e9 0f 71 00 00       	jmp    c001d8ab <unlockStuff()>
c001679c:	83 c4 0c             	add    esp,0xc
c001679f:	5b                   	pop    ebx
c00167a0:	5e                   	pop    esi
c00167a1:	5f                   	pop    edi
c00167a2:	5d                   	pop    ebp
c00167a3:	c3                   	ret    

c00167a4 <setupTimer(int)>:
c00167a4:	57                   	push   edi
c00167a5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00167aa:	56                   	push   esi
c00167ab:	53                   	push   ebx
c00167ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167b6:	83 ec 0c             	sub    esp,0xc
c00167b9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167bf:	e8 42 d8 ff ff       	call   c0014006 <Device::getName()>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167ca:	0f 85 8d 00 00 00    	jne    c001685d <setupTimer(int)+0xb9>
c00167d0:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00167d5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167dc:	74 7f                	je     c001685d <setupTimer(int)+0xb9>
c00167de:	83 ec 0c             	sub    esp,0xc
c00167e1:	68 5c 01 00 00       	push   0x15c
c00167e6:	e8 39 8e ff ff       	call   c000f624 <malloc>
c00167eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ee:	89 c3                	mov    ebx,eax
c00167f0:	e8 37 f5 00 00       	call   c0025d2c <PIT::PIT()>
c00167f5:	59                   	pop    ecx
c00167f6:	5f                   	pop    edi
c00167f7:	53                   	push   ebx
c00167f8:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00167fe:	e8 17 d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016803:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016805:	6a 00                	push   0x0
c0016807:	6a 00                	push   0x0
c0016809:	56                   	push   esi
c001680a:	53                   	push   ebx
c001680b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001680e:	83 c4 14             	add    esp,0x14
c0016811:	68 60 01 00 00       	push   0x160
c0016816:	e8 09 8e ff ff       	call   c000f624 <malloc>
c001681b:	89 04 24             	mov    DWORD PTR [esp],eax
c001681e:	89 c7                	mov    edi,eax
c0016820:	e8 b7 f3 00 00       	call   c0025bdc <APICTimer::APICTimer()>
c0016825:	6a 00                	push   0x0
c0016827:	6a 00                	push   0x0
c0016829:	56                   	push   esi
c001682a:	57                   	push   edi
c001682b:	e8 ae f2 00 00       	call   c0025ade <APICTimer::open(int, int, void*)>
c0016830:	83 c4 20             	add    esp,0x20
c0016833:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016835:	6a 00                	push   0x0
c0016837:	6a 00                	push   0x0
c0016839:	6a 00                	push   0x0
c001683b:	53                   	push   ebx
c001683c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001683f:	58                   	pop    eax
c0016840:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0016845:	5a                   	pop    edx
c0016846:	57                   	push   edi
c0016847:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001684d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016853:	e8 c2 d4 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016858:	83 c4 10             	add    esp,0x10
c001685b:	eb 33                	jmp    c0016890 <setupTimer(int)+0xec>
c001685d:	83 ec 0c             	sub    esp,0xc
c0016860:	68 5c 01 00 00       	push   0x15c
c0016865:	e8 ba 8d ff ff       	call   c000f624 <malloc>
c001686a:	89 04 24             	mov    DWORD PTR [esp],eax
c001686d:	89 c3                	mov    ebx,eax
c001686f:	e8 b8 f4 00 00       	call   c0025d2c <PIT::PIT()>
c0016874:	58                   	pop    eax
c0016875:	5a                   	pop    edx
c0016876:	53                   	push   ebx
c0016877:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001687d:	e8 98 d4 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016882:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016884:	6a 00                	push   0x0
c0016886:	6a 00                	push   0x0
c0016888:	56                   	push   esi
c0016889:	53                   	push   ebx
c001688a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001688d:	83 c4 20             	add    esp,0x20
c0016890:	89 d8                	mov    eax,ebx
c0016892:	5b                   	pop    ebx
c0016893:	5e                   	pop    esi
c0016894:	5f                   	pop    edi
c0016895:	c3                   	ret    

c0016896 <VCache::VCache(PhysicalDisk*)>:
c0016896:	53                   	push   ebx
c0016897:	83 ec 18             	sub    esp,0x18
c001689a:	ba c0 aa 02 c0       	mov    edx,0xc002aac0
c001689f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a3:	89 10                	mov    DWORD PTR [eax],edx
c00168a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168bf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168c6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168d8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168fd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016908:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001690c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001691b:	e8 04 8d ff ff       	call   c000f624 <malloc>
c0016920:	83 c4 10             	add    esp,0x10
c0016923:	89 c3                	mov    ebx,eax
c0016925:	83 ec 0c             	sub    esp,0xc
c0016928:	53                   	push   ebx
c0016929:	e8 dc 6c 00 00       	call   c001d60a <Mutex::Mutex()>
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016935:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016940:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016947:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001694e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016952:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001695f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016963:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016969:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001696f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016973:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016976:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697d:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016981:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016985:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001698b:	c1 e0 03             	shl    eax,0x3
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	50                   	push   eax
c0016992:	e8 8d 8c ff ff       	call   c000f624 <malloc>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	89 c2                	mov    edx,eax
c001699c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169b5:	c1 e0 06             	shl    eax,0x6
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	50                   	push   eax
c00169bc:	e8 63 8c ff ff       	call   c000f624 <malloc>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	89 c2                	mov    edx,eax
c00169c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169cd:	90                   	nop
c00169ce:	83 c4 18             	add    esp,0x18
c00169d1:	5b                   	pop    ebx
c00169d2:	c3                   	ret    
c00169d3:	90                   	nop

c00169d4 <VCache::invalidateReadBuffer()>:
c00169d4:	83 ec 18             	sub    esp,0x18
c00169d7:	68 0c aa 02 c0       	push   0xc002aa0c
c00169dc:	e8 12 bf ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00169e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e5:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00169e9:	83 c4 1c             	add    esp,0x1c
c00169ec:	c3                   	ret    
c00169ed:	90                   	nop

c00169ee <VCache::writeWriteBuffer()>:
c00169ee:	53                   	push   ebx
c00169ef:	83 ec 14             	sub    esp,0x14
c00169f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00169fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a01:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a04:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a07:	50                   	push   eax
c0016a08:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a0b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a12:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a19:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a1d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a24:	83 c4 28             	add    esp,0x28
c0016a27:	5b                   	pop    ebx
c0016a28:	c3                   	ret    
c0016a29:	90                   	nop

c0016a2a <VCache::~VCache()>:
c0016a2a:	83 ec 0c             	sub    esp,0xc
c0016a2d:	ba c0 aa 02 c0       	mov    edx,0xc002aac0
c0016a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a36:	89 10                	mov    DWORD PTR [eax],edx
c0016a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a3c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a3f:	84 c0                	test   al,al
c0016a41:	74 0f                	je     c0016a52 <VCache::~VCache()+0x28>
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a4a:	e8 9f ff ff ff       	call   c00169ee <VCache::writeWriteBuffer()>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a59:	83 ec 0c             	sub    esp,0xc
c0016a5c:	50                   	push   eax
c0016a5d:	e8 d2 8b ff ff       	call   c000f634 <free>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	68 31 aa 02 c0       	push   0xc002aa31
c0016a6d:	e8 81 be ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	50                   	push   eax
c0016a80:	e8 af 8b ff ff       	call   c000f634 <free>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	68 4b aa 02 c0       	push   0xc002aa4b
c0016a90:	e8 5e be ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016a95:	83 c4 10             	add    esp,0x10
c0016a98:	90                   	nop
c0016a99:	83 c4 0c             	add    esp,0xc
c0016a9c:	c3                   	ret    
c0016a9d:	90                   	nop

c0016a9e <VCache::~VCache()>:
c0016a9e:	83 ec 0c             	sub    esp,0xc
c0016aa1:	83 ec 0c             	sub    esp,0xc
c0016aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa8:	e8 7d ff ff ff       	call   c0016a2a <VCache::~VCache()>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	83 ec 08             	sub    esp,0x8
c0016ab3:	6a 40                	push   0x40
c0016ab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab9:	e8 55 bd ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	83 c4 0c             	add    esp,0xc
c0016ac4:	c3                   	ret    
c0016ac5:	90                   	nop

c0016ac6 <VCache::write(unsigned long long, int, void*)>:
c0016ac6:	55                   	push   ebp
c0016ac7:	57                   	push   edi
c0016ac8:	56                   	push   esi
c0016ac9:	53                   	push   ebx
c0016aca:	83 ec 28             	sub    esp,0x28
c0016acd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ad1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ad5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ad9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016add:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ae0:	e8 87 6f 00 00       	call   c001da6c <Semaphore::acquire()>
c0016ae5:	83 c4 10             	add    esp,0x10
c0016ae8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016aec:	74 0c                	je     c0016afa <VCache::write(unsigned long long, int, void*)+0x34>
c0016aee:	83 ec 0c             	sub    esp,0xc
c0016af1:	53                   	push   ebx
c0016af2:	e8 dd fe ff ff       	call   c00169d4 <VCache::invalidateReadBuffer()>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016afe:	74 66                	je     c0016b66 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016b00:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b03:	99                   	cdq    
c0016b04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b08:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b0b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b0e:	89 c1                	mov    ecx,eax
c0016b10:	89 d0                	mov    eax,edx
c0016b12:	31 f1                	xor    ecx,esi
c0016b14:	31 f8                	xor    eax,edi
c0016b16:	89 ca                	mov    edx,ecx
c0016b18:	09 c2                	or     edx,eax
c0016b1a:	75 3e                	jne    c0016b5a <VCache::write(unsigned long long, int, void*)+0x94>
c0016b1c:	83 fd 01             	cmp    ebp,0x1
c0016b1f:	75 39                	jne    c0016b5a <VCache::write(unsigned long long, int, void*)+0x94>
c0016b21:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b2a:	51                   	push   ecx
c0016b2b:	50                   	push   eax
c0016b2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b30:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b34:	0f af c8             	imul   ecx,eax
c0016b37:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016b3a:	51                   	push   ecx
c0016b3b:	e8 60 9b fe ff       	call   c00006a0 <memcpy>
c0016b40:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	40                   	inc    eax
c0016b47:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b4a:	83 f8 40             	cmp    eax,0x40
c0016b4d:	75 57                	jne    c0016ba6 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	53                   	push   ebx
c0016b53:	e8 96 fe ff ff       	call   c00169ee <VCache::writeWriteBuffer()>
c0016b58:	eb 34                	jmp    c0016b8e <VCache::write(unsigned long long, int, void*)+0xc8>
c0016b5a:	83 ec 0c             	sub    esp,0xc
c0016b5d:	53                   	push   ebx
c0016b5e:	e8 8b fe ff ff       	call   c00169ee <VCache::writeWriteBuffer()>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b69:	83 fd 3f             	cmp    ebp,0x3f
c0016b6c:	7f 25                	jg     c0016b93 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016b6e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b71:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b74:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016b77:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b7b:	52                   	push   edx
c0016b7c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016b82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b89:	e8 12 9b fe ff       	call   c00006a0 <memcpy>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	eb 13                	jmp    c0016ba6 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b93:	83 ec 0c             	sub    esp,0xc
c0016b96:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b9c:	55                   	push   ebp
c0016b9d:	57                   	push   edi
c0016b9e:	56                   	push   esi
c0016b9f:	50                   	push   eax
c0016ba0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016ba3:	83 c4 20             	add    esp,0x20
c0016ba6:	83 ec 0c             	sub    esp,0xc
c0016ba9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bac:	e8 69 74 00 00       	call   c001e01a <Semaphore::release()>
c0016bb1:	83 c4 2c             	add    esp,0x2c
c0016bb4:	31 c0                	xor    eax,eax
c0016bb6:	5b                   	pop    ebx
c0016bb7:	5e                   	pop    esi
c0016bb8:	5f                   	pop    edi
c0016bb9:	5d                   	pop    ebp
c0016bba:	c3                   	ret    
c0016bbb:	90                   	nop

c0016bbc <VCache::read(unsigned long long, int, void*)>:
c0016bbc:	55                   	push   ebp
c0016bbd:	57                   	push   edi
c0016bbe:	56                   	push   esi
c0016bbf:	53                   	push   ebx
c0016bc0:	83 ec 38             	sub    esp,0x38
c0016bc3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016bc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016bcb:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0016bcf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bd3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016bd7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0016bdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bde:	e8 89 6e 00 00       	call   c001da6c <Semaphore::acquire()>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016bea:	74 0c                	je     c0016bf8 <VCache::read(unsigned long long, int, void*)+0x3c>
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	53                   	push   ebx
c0016bf0:	e8 f9 fd ff ff       	call   c00169ee <VCache::writeWriteBuffer()>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c00:	57                   	push   edi
c0016c01:	57                   	push   edi
c0016c02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c06:	68 63 aa 02 c0       	push   0xc002aa63
c0016c0b:	e8 e3 bc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	83 fe 01             	cmp    esi,0x1
c0016c16:	0f 85 1d 01 00 00    	jne    c0016d39 <VCache::read(unsigned long long, int, void*)+0x17d>
c0016c1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c1f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c26:	0f 85 0d 01 00 00    	jne    c0016d39 <VCache::read(unsigned long long, int, void*)+0x17d>
c0016c2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c34:	83 e0 f8             	and    eax,0xfffffff8
c0016c37:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c3b:	89 c6                	mov    esi,eax
c0016c3d:	74 0e                	je     c0016c4d <VCache::read(unsigned long long, int, void*)+0x91>
c0016c3f:	39 7b 34             	cmp    DWORD PTR [ebx+0x34],edi
c0016c42:	75 09                	jne    c0016c4d <VCache::read(unsigned long long, int, void*)+0x91>
c0016c44:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016c47:	0f 84 88 00 00 00    	je     c0016cd5 <VCache::read(unsigned long long, int, void*)+0x119>
c0016c4d:	83 ec 0c             	sub    esp,0xc
c0016c50:	31 ed                	xor    ebp,ebp
c0016c52:	68 7c aa 02 c0       	push   0xc002aa7c
c0016c57:	e8 97 bc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c63:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016c66:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016c69:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016c6d:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c77:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016c7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c7c:	01 e9                	add    ecx,ebp
c0016c7e:	81 c5 00 02 00 00    	add    ebp,0x200
c0016c84:	51                   	push   ecx
c0016c85:	6a 01                	push   0x1
c0016c87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016c8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016c8f:	50                   	push   eax
c0016c90:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c93:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0016c98:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0016c9d:	83 c4 20             	add    esp,0x20
c0016ca0:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c0016ca6:	75 c9                	jne    c0016c71 <VCache::read(unsigned long long, int, void*)+0xb5>
c0016ca8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cab:	83 ec 0c             	sub    esp,0xc
c0016cae:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cb0:	68 60 e1 02 c0       	push   0xc002e160
c0016cb5:	6a 08                	push   0x8
c0016cb7:	57                   	push   edi
c0016cb8:	56                   	push   esi
c0016cb9:	50                   	push   eax
c0016cba:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016cbd:	83 c4 1c             	add    esp,0x1c
c0016cc0:	68 00 10 00 00       	push   0x1000
c0016cc5:	68 60 e1 02 c0       	push   0xc002e160
c0016cca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ccd:	e8 ce 99 fe ff       	call   c00006a0 <memcpy>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	51                   	push   ecx
c0016cd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016cde:	2b 43 30             	sub    eax,DWORD PTR [ebx+0x30]
c0016ce1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0016ce4:	1b 53 34             	sbb    edx,DWORD PTR [ebx+0x34]
c0016ce7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016ced:	89 c7                	mov    edi,eax
c0016cef:	89 d5                	mov    ebp,edx
c0016cf1:	89 c8                	mov    eax,ecx
c0016cf3:	89 ee                	mov    esi,ebp
c0016cf5:	99                   	cdq    
c0016cf6:	0f af f1             	imul   esi,ecx
c0016cf9:	0f af d7             	imul   edx,edi
c0016cfc:	89 f8                	mov    eax,edi
c0016cfe:	01 d6                	add    esi,edx
c0016d00:	f7 e1                	mul    ecx
c0016d02:	01 f2                	add    edx,esi
c0016d04:	52                   	push   edx
c0016d05:	50                   	push   eax
c0016d06:	68 8c aa 02 c0       	push   0xc002aa8c
c0016d0b:	e8 e3 bb ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016d10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d13:	83 c4 0c             	add    esp,0xc
c0016d16:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016d1c:	52                   	push   edx
c0016d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d21:	83 e0 07             	and    eax,0x7
c0016d24:	0f af c2             	imul   eax,edx
c0016d27:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016d2a:	50                   	push   eax
c0016d2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016d2f:	e8 6c 99 fe ff       	call   c00006a0 <memcpy>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	eb 2f                	jmp    c0016d68 <VCache::read(unsigned long long, int, void*)+0x1ac>
c0016d39:	50                   	push   eax
c0016d3a:	50                   	push   eax
c0016d3b:	56                   	push   esi
c0016d3c:	68 a8 aa 02 c0       	push   0xc002aaa8
c0016d41:	e8 ad bb ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016d46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d49:	e8 86 fc ff ff       	call   c00169d4 <VCache::invalidateReadBuffer()>
c0016d4e:	5a                   	pop    edx
c0016d4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d52:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016d58:	56                   	push   esi
c0016d59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d61:	50                   	push   eax
c0016d62:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d65:	83 c4 20             	add    esp,0x20
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d6e:	e8 a7 72 00 00       	call   c001e01a <Semaphore::release()>
c0016d73:	83 c4 3c             	add    esp,0x3c
c0016d76:	31 c0                	xor    eax,eax
c0016d78:	5b                   	pop    ebx
c0016d79:	5e                   	pop    esi
c0016d7a:	5f                   	pop    edi
c0016d7b:	5d                   	pop    ebp
c0016d7c:	c3                   	ret    
c0016d7d:	90                   	nop

c0016d7e <Video::putrect(int, int, int, int, unsigned int)>:
c0016d7e:	55                   	push   ebp
c0016d7f:	57                   	push   edi
c0016d80:	56                   	push   esi
c0016d81:	53                   	push   ebx
c0016d82:	83 ec 1c             	sub    esp,0x1c
c0016d85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d8d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d91:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9d:	01 df                	add    edi,ebx
c0016d9f:	39 fb                	cmp    ebx,edi
c0016da1:	7d 1f                	jge    c0016dc2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016da3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016da7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016dab:	7d 12                	jge    c0016dbf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016dad:	8b 16                	mov    edx,DWORD PTR [esi]
c0016daf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016db3:	53                   	push   ebx
c0016db4:	55                   	push   ebp
c0016db5:	45                   	inc    ebp
c0016db6:	56                   	push   esi
c0016db7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	eb e8                	jmp    c0016da7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016dbf:	43                   	inc    ebx
c0016dc0:	eb dd                	jmp    c0016d9f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016dc2:	83 c4 1c             	add    esp,0x1c
c0016dc5:	5b                   	pop    ebx
c0016dc6:	5e                   	pop    esi
c0016dc7:	5f                   	pop    edi
c0016dc8:	5d                   	pop    ebp
c0016dc9:	c3                   	ret    

c0016dca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016dca:	55                   	push   ebp
c0016dcb:	57                   	push   edi
c0016dcc:	31 ff                	xor    edi,edi
c0016dce:	56                   	push   esi
c0016dcf:	53                   	push   ebx
c0016dd0:	83 ec 1c             	sub    esp,0x1c
c0016dd3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016dd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ddb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016de2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016de7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016deb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016def:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016df3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016df6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dfa:	01 f9                	add    ecx,edi
c0016dfc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016e00:	7d 2f                	jge    c0016e31 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016e02:	31 f6                	xor    esi,esi
c0016e04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e08:	01 f2                	add    edx,esi
c0016e0a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016e0e:	7d 1a                	jge    c0016e2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016e10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e13:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016e16:	46                   	inc    esi
c0016e17:	51                   	push   ecx
c0016e18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016e1c:	52                   	push   edx
c0016e1d:	55                   	push   ebp
c0016e1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e28:	eb da                	jmp    c0016e04 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016e2a:	47                   	inc    edi
c0016e2b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016e2f:	eb c5                	jmp    c0016df6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016e31:	83 c4 1c             	add    esp,0x1c
c0016e34:	5b                   	pop    ebx
c0016e35:	5e                   	pop    esi
c0016e36:	5f                   	pop    edi
c0016e37:	5d                   	pop    ebp
c0016e38:	c3                   	ret    
c0016e39:	90                   	nop

c0016e3a <Video::blit(unsigned int*, int, int, int, int)>:
c0016e3a:	55                   	push   ebp
c0016e3b:	57                   	push   edi
c0016e3c:	56                   	push   esi
c0016e3d:	53                   	push   ebx
c0016e3e:	83 ec 1c             	sub    esp,0x1c
c0016e41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e49:	85 c0                	test   eax,eax
c0016e4b:	79 02                	jns    c0016e4f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e4d:	31 c0                	xor    eax,eax
c0016e4f:	c1 e0 02             	shl    eax,0x2
c0016e52:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e5e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e62:	39 d8                	cmp    eax,ebx
c0016e64:	7e 49                	jle    c0016eaf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e66:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e6c:	7c 41                	jl     c0016eaf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e6e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e76:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e7a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e7e:	39 f9                	cmp    ecx,edi
c0016e80:	7e 22                	jle    c0016ea4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e82:	83 c5 04             	add    ebp,0x4
c0016e85:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e8b:	7c 14                	jl     c0016ea1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e8f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e9a:	56                   	push   esi
c0016e9b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	47                   	inc    edi
c0016ea2:	eb d2                	jmp    c0016e76 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea8:	43                   	inc    ebx
c0016ea9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016ead:	eb ab                	jmp    c0016e5a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016eaf:	83 c4 1c             	add    esp,0x1c
c0016eb2:	5b                   	pop    ebx
c0016eb3:	5e                   	pop    esi
c0016eb4:	5f                   	pop    edi
c0016eb5:	5d                   	pop    ebp
c0016eb6:	c3                   	ret    
c0016eb7:	90                   	nop

c0016eb8 <Video::clearScreen(unsigned int)>:
c0016eb8:	57                   	push   edi
c0016eb9:	56                   	push   esi
c0016eba:	53                   	push   ebx
c0016ebb:	31 db                	xor    ebx,ebx
c0016ebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ec1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ec7:	7e 1f                	jle    c0016ee8 <Video::clearScreen(unsigned int)+0x30>
c0016ec9:	31 ff                	xor    edi,edi
c0016ecb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ed1:	7e 12                	jle    c0016ee5 <Video::clearScreen(unsigned int)+0x2d>
c0016ed3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ed9:	53                   	push   ebx
c0016eda:	57                   	push   edi
c0016edb:	47                   	inc    edi
c0016edc:	56                   	push   esi
c0016edd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ee0:	83 c4 10             	add    esp,0x10
c0016ee3:	eb e6                	jmp    c0016ecb <Video::clearScreen(unsigned int)+0x13>
c0016ee5:	43                   	inc    ebx
c0016ee6:	eb d9                	jmp    c0016ec1 <Video::clearScreen(unsigned int)+0x9>
c0016ee8:	5b                   	pop    ebx
c0016ee9:	5e                   	pop    esi
c0016eea:	5f                   	pop    edi
c0016eeb:	c3                   	ret    

c0016eec <Video::putpixel(int, int, unsigned int)>:
c0016eec:	c7 44 24 04 c8 aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aac8
c0016ef4:	e9 a0 2f 00 00       	jmp    c0019e99 <Krnl::panic(char const*)>
c0016ef9:	90                   	nop

c0016efa <Video::Video(char const*)>:
c0016efa:	83 ec 0c             	sub    esp,0xc
c0016efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f01:	83 ec 08             	sub    esp,0x8
c0016f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f08:	50                   	push   eax
c0016f09:	e8 fc cf ff ff       	call   c0013f0a <Device::Device(char const*)>
c0016f0e:	83 c4 10             	add    esp,0x10
c0016f11:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0016f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f1a:	89 10                	mov    DWORD PTR [eax],edx
c0016f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f20:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016f2a:	90                   	nop
c0016f2b:	83 c4 0c             	add    esp,0xc
c0016f2e:	c3                   	ret    
c0016f2f:	90                   	nop

c0016f30 <Video::~Video()>:
c0016f30:	83 ec 0c             	sub    esp,0xc
c0016f33:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0016f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3c:	89 10                	mov    DWORD PTR [eax],edx
c0016f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	50                   	push   eax
c0016f46:	e8 a1 cc ff ff       	call   c0013bec <Device::~Device()>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	90                   	nop
c0016f4f:	83 c4 0c             	add    esp,0xc
c0016f52:	c3                   	ret    
c0016f53:	90                   	nop

c0016f54 <Video::~Video()>:
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	83 ec 0c             	sub    esp,0xc
c0016f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f5e:	e8 cd ff ff ff       	call   c0016f30 <Video::~Video()>
c0016f63:	83 c4 10             	add    esp,0x10
c0016f66:	83 ec 08             	sub    esp,0x8
c0016f69:	68 64 01 00 00       	push   0x164
c0016f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f72:	e8 9c b8 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016f77:	83 c4 10             	add    esp,0x10
c0016f7a:	83 c4 0c             	add    esp,0xc
c0016f7d:	c3                   	ret    

c0016f7e <Video::isMonochrome()>:
c0016f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f82:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f88:	c3                   	ret    
c0016f89:	90                   	nop

c0016f8a <Video::getWidth()>:
c0016f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f94:	c3                   	ret    
c0016f95:	90                   	nop

c0016f96 <Video::getHeight()>:
c0016f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fa0:	c3                   	ret    
c0016fa1:	90                   	nop

c0016fa2 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016fa2:	55                   	push   ebp
c0016fa3:	57                   	push   edi
c0016fa4:	56                   	push   esi
c0016fa5:	53                   	push   ebx
c0016fa6:	83 ec 2c             	sub    esp,0x2c
c0016fa9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fb1:	83 f8 01             	cmp    eax,0x1
c0016fb4:	19 c9                	sbb    ecx,ecx
c0016fb6:	31 db                	xor    ebx,ebx
c0016fb8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016fbc:	89 cd                	mov    ebp,ecx
c0016fbe:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016fc6:	f7 d5                	not    ebp
c0016fc8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016fce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016fd2:	01 d8                	add    eax,ebx
c0016fd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd8:	56                   	push   esi
c0016fd9:	e8 b8 ff ff ff       	call   c0016f96 <Video::getHeight()>
c0016fde:	59                   	pop    ecx
c0016fdf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016fe3:	7e 70                	jle    c0017055 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016fe5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fe9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fed:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ff0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ff4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ff8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016fff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017003:	89 f8                	mov    eax,edi
c0017005:	83 c0 20             	add    eax,0x20
c0017008:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001700c:	56                   	push   esi
c001700d:	e8 78 ff ff ff       	call   c0016f8a <Video::getWidth()>
c0017012:	5a                   	pop    edx
c0017013:	39 c7                	cmp    edi,eax
c0017015:	7d 34                	jge    c001704b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017017:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001701c:	74 05                	je     c0017023 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001701e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017020:	55                   	push   ebp
c0017021:	eb 0d                	jmp    c0017030 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017023:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017028:	74 12                	je     c001703c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001702a:	8b 06                	mov    eax,DWORD PTR [esi]
c001702c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017030:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017034:	57                   	push   edi
c0017035:	56                   	push   esi
c0017036:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017039:	83 c4 10             	add    esp,0x10
c001703c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017040:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017044:	47                   	inc    edi
c0017045:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017049:	75 c1                	jne    c001700c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001704b:	43                   	inc    ebx
c001704c:	83 fb 20             	cmp    ebx,0x20
c001704f:	0f 85 79 ff ff ff    	jne    c0016fce <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017055:	83 c4 2c             	add    esp,0x2c
c0017058:	5b                   	pop    ebx
c0017059:	5e                   	pop    esi
c001705a:	5f                   	pop    edi
c001705b:	5d                   	pop    ebp
c001705c:	c3                   	ret    
c001705d:	90                   	nop

c001705e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001705e:	55                   	push   ebp
c001705f:	57                   	push   edi
c0017060:	56                   	push   esi
c0017061:	53                   	push   ebx
c0017062:	83 ec 28             	sub    esp,0x28
c0017065:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017069:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001706d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017071:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017075:	c1 e7 08             	shl    edi,0x8
c0017078:	01 c7                	add    edi,eax
c001707a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001707e:	c1 e0 08             	shl    eax,0x8
c0017081:	01 d0                	add    eax,edx
c0017083:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001708b:	0f af c7             	imul   eax,edi
c001708e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017095:	50                   	push   eax
c0017096:	e8 89 85 ff ff       	call   c000f624 <malloc>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	89 c5                	mov    ebp,eax
c00170a0:	85 c0                	test   eax,eax
c00170a2:	75 15                	jne    c00170b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	68 e9 aa 02 c0       	push   0xc002aae9
c00170ac:	e8 42 b8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00170b1:	83 c4 10             	add    esp,0x10
c00170b4:	e9 1c 01 00 00       	jmp    c00171d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00170b9:	be 12 00 00 00       	mov    esi,0x12
c00170be:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00170c2:	74 11                	je     c00170d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00170c4:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00170c8:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00170cc:	c1 fe 03             	sar    esi,0x3
c00170cf:	0f af f0             	imul   esi,eax
c00170d2:	83 c6 12             	add    esi,0x12
c00170d5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00170d9:	74 04                	je     c00170df <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00170db:	85 ff                	test   edi,edi
c00170dd:	75 12                	jne    c00170f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00170df:	83 ec 0c             	sub    esp,0xc
c00170e2:	68 00 ab 02 c0       	push   0xc002ab00
c00170e7:	e8 07 b8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00170ec:	e9 ce 00 00 00       	jmp    c00171bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00170f1:	52                   	push   edx
c00170f2:	52                   	push   edx
c00170f3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00170f7:	50                   	push   eax
c00170f8:	68 15 ab 02 c0       	push   0xc002ab15
c00170fd:	e8 f1 b7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017102:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017106:	83 c4 10             	add    esp,0x10
c0017109:	80 fa 02             	cmp    dl,0x2
c001710c:	0f 85 98 00 00 00    	jne    c00171aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017112:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017117:	75 10                	jne    c0017129 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017119:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001711d:	75 0a                	jne    c0017129 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001711f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017122:	83 e8 18             	sub    eax,0x18
c0017125:	a8 f7                	test   al,0xf7
c0017127:	74 0a                	je     c0017133 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	68 22 ab 02 c0       	push   0xc002ab22
c0017131:	eb 7f                	jmp    c00171b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017133:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001713b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017143:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017147:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001714f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017153:	75 0c                	jne    c0017161 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017155:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001715a:	c1 e0 18             	shl    eax,0x18
c001715d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017161:	41                   	inc    ecx
c0017162:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017167:	c1 e2 10             	shl    edx,0x10
c001716a:	89 d0                	mov    eax,edx
c001716c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017171:	c1 e2 08             	shl    edx,0x8
c0017174:	09 c2                	or     edx,eax
c0017176:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001717a:	09 c2                	or     edx,eax
c001717c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017180:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017184:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017188:	c1 f8 03             	sar    eax,0x3
c001718b:	01 c6                	add    esi,eax
c001718d:	89 c8                	mov    eax,ecx
c001718f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017193:	39 c7                	cmp    edi,eax
c0017195:	7f b0                	jg     c0017147 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017197:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001719b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001719f:	39 14 24             	cmp    DWORD PTR [esp],edx
c00171a2:	7e 22                	jle    c00171c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00171a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00171a8:	eb 99                	jmp    c0017143 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00171aa:	50                   	push   eax
c00171ab:	50                   	push   eax
c00171ac:	52                   	push   edx
c00171ad:	68 30 ab 02 c0       	push   0xc002ab30
c00171b2:	e8 3c b7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00171b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171ba:	e8 75 84 ff ff       	call   c000f634 <free>
c00171bf:	83 c4 10             	add    esp,0x10
c00171c2:	31 ed                	xor    ebp,ebp
c00171c4:	eb 0f                	jmp    c00171d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171ca:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00171cd:	89 38                	mov    DWORD PTR [eax],edi
c00171cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171d3:	89 08                	mov    DWORD PTR [eax],ecx
c00171d5:	83 c4 1c             	add    esp,0x1c
c00171d8:	89 e8                	mov    eax,ebp
c00171da:	5b                   	pop    ebx
c00171db:	5e                   	pop    esi
c00171dc:	5f                   	pop    edi
c00171dd:	5d                   	pop    ebp
c00171de:	c3                   	ret    
c00171df:	90                   	nop

c00171e0 <Video::putTGA(int, int, unsigned char*, int)>:
c00171e0:	55                   	push   ebp
c00171e1:	57                   	push   edi
c00171e2:	56                   	push   esi
c00171e3:	53                   	push   ebx
c00171e4:	83 ec 28             	sub    esp,0x28
c00171e7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171ef:	50                   	push   eax
c00171f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171f4:	50                   	push   eax
c00171f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171fd:	56                   	push   esi
c00171fe:	e8 5b fe ff ff       	call   c001705e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017203:	83 c4 20             	add    esp,0x20
c0017206:	85 c0                	test   eax,eax
c0017208:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001720c:	74 35                	je     c0017243 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001720e:	89 c7                	mov    edi,eax
c0017210:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017214:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017218:	39 d8                	cmp    eax,ebx
c001721a:	7e 27                	jle    c0017243 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001721c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017224:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017228:	39 e8                	cmp    eax,ebp
c001722a:	7e 14                	jle    c0017240 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001722c:	8b 06                	mov    eax,DWORD PTR [esi]
c001722e:	83 c7 04             	add    edi,0x4
c0017231:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017234:	53                   	push   ebx
c0017235:	55                   	push   ebp
c0017236:	45                   	inc    ebp
c0017237:	56                   	push   esi
c0017238:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001723b:	83 c4 10             	add    esp,0x10
c001723e:	eb e0                	jmp    c0017220 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017240:	43                   	inc    ebx
c0017241:	eb cd                	jmp    c0017210 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017243:	83 c4 1c             	add    esp,0x1c
c0017246:	5b                   	pop    ebx
c0017247:	5e                   	pop    esi
c0017248:	5f                   	pop    edi
c0017249:	5d                   	pop    ebp
c001724a:	c3                   	ret    
c001724b:	90                   	nop

c001724c <ACPI::close(int, int, void*)>:
c001724c:	83 ec 1c             	sub    esp,0x1c
c001724f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017257:	74 0a                	je     c0017263 <ACPI::close(int, int, void*)+0x17>
c0017259:	b8 00 00 00 00       	mov    eax,0x0
c001725e:	e9 9a 00 00 00       	jmp    c00172fd <ACPI::close(int, int, void*)+0xb1>
c0017263:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017268:	75 37                	jne    c00172a1 <ACPI::close(int, int, void*)+0x55>
c001726a:	83 ec 0c             	sub    esp,0xc
c001726d:	68 8c ab 02 c0       	push   0xc002ab8c
c0017272:	e8 7c b6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017277:	83 c4 10             	add    esp,0x10
c001727a:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001727f:	85 c0                	test   eax,eax
c0017281:	74 07                	je     c001728a <ACPI::close(int, int, void*)+0x3e>
c0017283:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017288:	ff d0                	call   eax
c001728a:	83 ec 0c             	sub    esp,0xc
c001728d:	68 b0 ac 02 c0       	push   0xc002acb0
c0017292:	e8 02 2c 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001729f:	eb 5c                	jmp    c00172fd <ACPI::close(int, int, void*)+0xb1>
c00172a1:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00172a6:	75 50                	jne    c00172f8 <ACPI::close(int, int, void*)+0xac>
c00172a8:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00172ad:	85 c0                	test   eax,eax
c00172af:	74 07                	je     c00172b8 <ACPI::close(int, int, void*)+0x6c>
c00172b1:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00172b6:	ff d0                	call   eax
c00172b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00172bd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00172c2:	83 e0 02             	and    eax,0x2
c00172c5:	74 1c                	je     c00172e3 <ACPI::close(int, int, void*)+0x97>
c00172c7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00172ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172d2:	89 c2                	mov    edx,eax
c00172d4:	ec                   	in     al,dx
c00172d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00172d9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00172dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172e1:	eb da                	jmp    c00172bd <ACPI::close(int, int, void*)+0x71>
c00172e3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172ea:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172ef:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172f7:	ee                   	out    dx,al
c00172f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172fd:	83 c4 1c             	add    esp,0x1c
c0017300:	c3                   	ret    

c0017301 <findRSDP()>:
c0017301:	83 ec 1c             	sub    esp,0x1c
c0017304:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017309:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001730f:	83 e0 04             	and    eax,0x4
c0017312:	84 c0                	test   al,al
c0017314:	75 07                	jne    c001731d <findRSDP()+0x1c>
c0017316:	b8 00 00 00 00       	mov    eax,0x0
c001731b:	eb 6a                	jmp    c0017387 <findRSDP()+0x86>
c001731d:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c0017322:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017327:	7f 1b                	jg     c0017344 <findRSDP()+0x43>
c0017329:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001732e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017334:	83 e2 fb             	and    edx,0xfffffffb
c0017337:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001733d:	b8 00 00 00 00       	mov    eax,0x0
c0017342:	eb 43                	jmp    c0017387 <findRSDP()+0x86>
c0017344:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001734c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017354:	77 2c                	ja     c0017382 <findRSDP()+0x81>
c0017356:	83 ec 04             	sub    esp,0x4
c0017359:	6a 08                	push   0x8
c001735b:	68 99 ab 02 c0       	push   0xc002ab99
c0017360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017364:	e8 d4 92 fe ff       	call   c000063d <memcmp>
c0017369:	83 c4 10             	add    esp,0x10
c001736c:	85 c0                	test   eax,eax
c001736e:	0f 94 c0             	sete   al
c0017371:	84 c0                	test   al,al
c0017373:	74 06                	je     c001737b <findRSDP()+0x7a>
c0017375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017379:	eb 0c                	jmp    c0017387 <findRSDP()+0x86>
c001737b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017380:	eb ca                	jmp    c001734c <findRSDP()+0x4b>
c0017382:	b8 00 00 00 00       	mov    eax,0x0
c0017387:	83 c4 1c             	add    esp,0x1c
c001738a:	c3                   	ret    

c001738b <loadACPITables(unsigned char*)>:
c001738b:	56                   	push   esi
c001738c:	53                   	push   ebx
c001738d:	83 ec 44             	sub    esp,0x44
c0017390:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017395:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001739b:	83 e0 04             	and    eax,0x4
c001739e:	84 c0                	test   al,al
c00173a0:	0f 84 05 02 00 00    	je     c00175ab <loadACPITables(unsigned char*)+0x220>
c00173a6:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c00173ab:	84 c0                	test   al,al
c00173ad:	74 75                	je     c0017424 <loadACPITables(unsigned char*)+0x99>
c00173af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173be:	83 e8 24             	sub    eax,0x24
c00173c1:	c1 e8 03             	shr    eax,0x3
c00173c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00173c8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00173d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173d4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00173d8:	0f 8d b2 00 00 00    	jge    c0017490 <loadACPITables(unsigned char*)+0x105>
c00173de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173e2:	83 c0 24             	add    eax,0x24
c00173e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173f5:	c1 e0 03             	shl    eax,0x3
c00173f8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00173fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017400:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017403:	8b 00                	mov    eax,DWORD PTR [eax]
c0017405:	89 c1                	mov    ecx,eax
c0017407:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c001740c:	8d 50 01             	lea    edx,[eax+0x1]
c001740f:	89 15 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,edx
c0017415:	89 ca                	mov    edx,ecx
c0017417:	89 14 c5 a4 f1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0e5c],edx
c001741e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017422:	eb ac                	jmp    c00173d0 <loadACPITables(unsigned char*)+0x45>
c0017424:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017428:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001742c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017433:	83 e8 24             	sub    eax,0x24
c0017436:	c1 e8 02             	shr    eax,0x2
c0017439:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001743d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017445:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017449:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001744d:	7d 41                	jge    c0017490 <loadACPITables(unsigned char*)+0x105>
c001744f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017453:	83 c0 24             	add    eax,0x24
c0017456:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001745a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001745e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017462:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017466:	c1 e0 02             	shl    eax,0x2
c0017469:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001746d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017471:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017473:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c0017478:	8d 50 01             	lea    edx,[eax+0x1]
c001747b:	89 15 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,edx
c0017481:	89 ca                	mov    edx,ecx
c0017483:	89 14 c5 a4 f1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0e5c],edx
c001748a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001748e:	eb b5                	jmp    c0017445 <loadACPITables(unsigned char*)+0xba>
c0017490:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017498:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c001749d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00174a1:	0f 8d 05 01 00 00    	jge    c00175ac <loadACPITables(unsigned char*)+0x221>
c00174a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174ab:	8b 04 c5 a4 f1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd0e5c]
c00174b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174c2:	25 ff 0f 00 00       	and    eax,0xfff
c00174c7:	89 c6                	mov    esi,eax
c00174c9:	e8 c5 a5 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00174ce:	89 c3                	mov    ebx,eax
c00174d0:	83 ec 0c             	sub    esp,0xc
c00174d3:	6a 01                	push   0x1
c00174d5:	e8 29 a4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00174da:	83 c4 10             	add    esp,0x10
c00174dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174e7:	83 ec 0c             	sub    esp,0xc
c00174ea:	6a 01                	push   0x1
c00174ec:	6a 01                	push   0x1
c00174ee:	50                   	push   eax
c00174ef:	52                   	push   edx
c00174f0:	53                   	push   ebx
c00174f1:	e8 cc ad ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174f6:	83 c4 20             	add    esp,0x20
c00174f9:	09 f0                	or     eax,esi
c00174fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017503:	c1 e0 03             	shl    eax,0x3
c0017506:	05 a0 f1 02 c0       	add    eax,0xc002f1a0
c001750b:	83 ec 04             	sub    esp,0x4
c001750e:	6a 04                	push   0x4
c0017510:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017514:	50                   	push   eax
c0017515:	e8 86 91 fe ff       	call   c00006a0 <memcpy>
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001752c:	05 00 10 00 00       	add    eax,0x1000
c0017531:	c1 e8 0c             	shr    eax,0xc
c0017534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753c:	89 04 24             	mov    DWORD PTR [esp],eax
c001753f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017543:	25 ff 0f 00 00       	and    eax,0xfff
c0017548:	89 c6                	mov    esi,eax
c001754a:	e8 44 a5 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001754f:	89 c3                	mov    ebx,eax
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017558:	e8 a6 a3 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017564:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	6a 01                	push   0x1
c001756f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017573:	50                   	push   eax
c0017574:	52                   	push   edx
c0017575:	53                   	push   ebx
c0017576:	e8 47 ad ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001757b:	83 c4 20             	add    esp,0x20
c001757e:	09 f0                	or     eax,esi
c0017580:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017584:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017587:	83 ec 0c             	sub    esp,0xc
c001758a:	50                   	push   eax
c001758b:	e8 d7 a6 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017597:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001759b:	89 14 c5 a4 f1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0e5c],edx
c00175a2:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00175a6:	e9 ed fe ff ff       	jmp    c0017498 <loadACPITables(unsigned char*)+0x10d>
c00175ab:	90                   	nop
c00175ac:	83 c4 44             	add    esp,0x44
c00175af:	5b                   	pop    ebx
c00175b0:	5e                   	pop    esi
c00175b1:	c3                   	ret    

c00175b2 <findRSDT(unsigned char*)>:
c00175b2:	56                   	push   esi
c00175b3:	53                   	push   ebx
c00175b4:	83 ec 44             	sub    esp,0x44
c00175b7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00175bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c2:	83 e0 04             	and    eax,0x4
c00175c5:	84 c0                	test   al,al
c00175c7:	75 0a                	jne    c00175d3 <findRSDT(unsigned char*)+0x21>
c00175c9:	b8 00 00 00 00       	mov    eax,0x0
c00175ce:	e9 f7 00 00 00       	jmp    c00176ca <findRSDT(unsigned char*)+0x118>
c00175d3:	83 ec 04             	sub    esp,0x4
c00175d6:	6a 24                	push   0x24
c00175d8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00175dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175e0:	50                   	push   eax
c00175e1:	e8 ba 90 fe ff       	call   c00006a0 <memcpy>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00175ed:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00175f1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017601:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017609:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001760d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017611:	25 ff 0f 00 00       	and    eax,0xfff
c0017616:	89 c6                	mov    esi,eax
c0017618:	e8 76 a4 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001761d:	89 c3                	mov    ebx,eax
c001761f:	83 ec 0c             	sub    esp,0xc
c0017622:	6a 02                	push   0x2
c0017624:	e8 da a2 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017630:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	6a 01                	push   0x1
c001763b:	6a 02                	push   0x2
c001763d:	50                   	push   eax
c001763e:	52                   	push   edx
c001763f:	53                   	push   ebx
c0017640:	e8 7d ac ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017645:	83 c4 20             	add    esp,0x20
c0017648:	09 f0                	or     eax,esi
c001764a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001764e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017652:	25 ff 0f 00 00       	and    eax,0xfff
c0017657:	89 c6                	mov    esi,eax
c0017659:	e8 35 a4 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001765e:	89 c3                	mov    ebx,eax
c0017660:	83 ec 0c             	sub    esp,0xc
c0017663:	6a 02                	push   0x2
c0017665:	e8 99 a2 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017671:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	6a 01                	push   0x1
c001767c:	6a 02                	push   0x2
c001767e:	50                   	push   eax
c001767f:	52                   	push   edx
c0017680:	53                   	push   ebx
c0017681:	e8 3c ac ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017686:	83 c4 20             	add    esp,0x20
c0017689:	09 f0                	or     eax,esi
c001768b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001768f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017694:	75 11                	jne    c00176a7 <findRSDT(unsigned char*)+0xf5>
c0017696:	c6 05 a0 f3 02 c0 00 	mov    BYTE PTR ds:0xc002f3a0,0x0
c001769d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176a5:	eb 1f                	jmp    c00176c6 <findRSDT(unsigned char*)+0x114>
c00176a7:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00176ac:	75 11                	jne    c00176bf <findRSDT(unsigned char*)+0x10d>
c00176ae:	c6 05 a0 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3a0,0x1
c00176b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176bd:	eb 07                	jmp    c00176c6 <findRSDT(unsigned char*)+0x114>
c00176bf:	b8 00 00 00 00       	mov    eax,0x0
c00176c4:	eb 04                	jmp    c00176ca <findRSDT(unsigned char*)+0x118>
c00176c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176ca:	83 c4 44             	add    esp,0x44
c00176cd:	5b                   	pop    ebx
c00176ce:	5e                   	pop    esi
c00176cf:	c3                   	ret    

c00176d0 <findDataTable(unsigned char*, char*)>:
c00176d0:	83 ec 1c             	sub    esp,0x1c
c00176d3:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00176d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176de:	83 e0 04             	and    eax,0x4
c00176e1:	84 c0                	test   al,al
c00176e3:	75 07                	jne    c00176ec <findDataTable(unsigned char*, char*)+0x1c>
c00176e5:	b8 00 00 00 00       	mov    eax,0x0
c00176ea:	eb 7c                	jmp    c0017768 <findDataTable(unsigned char*, char*)+0x98>
c00176ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176f4:	a1 8c f1 02 c0       	mov    eax,ds:0xc002f18c
c00176f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176fd:	7d 3a                	jge    c0017739 <findDataTable(unsigned char*, char*)+0x69>
c00176ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017703:	c1 e0 03             	shl    eax,0x3
c0017706:	05 a0 f1 02 c0       	add    eax,0xc002f1a0
c001770b:	83 ec 04             	sub    esp,0x4
c001770e:	6a 04                	push   0x4
c0017710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017714:	50                   	push   eax
c0017715:	e8 23 8f fe ff       	call   c000063d <memcmp>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	85 c0                	test   eax,eax
c001771f:	0f 94 c0             	sete   al
c0017722:	84 c0                	test   al,al
c0017724:	74 0d                	je     c0017733 <findDataTable(unsigned char*, char*)+0x63>
c0017726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001772a:	8b 04 c5 a4 f1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd0e5c]
c0017731:	eb 35                	jmp    c0017768 <findDataTable(unsigned char*, char*)+0x98>
c0017733:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017737:	eb bb                	jmp    c00176f4 <findDataTable(unsigned char*, char*)+0x24>
c0017739:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c001773e:	84 c0                	test   al,al
c0017740:	74 07                	je     c0017749 <findDataTable(unsigned char*, char*)+0x79>
c0017742:	b8 58 00 00 00       	mov    eax,0x58
c0017747:	eb 05                	jmp    c001774e <findDataTable(unsigned char*, char*)+0x7e>
c0017749:	b8 52 00 00 00       	mov    eax,0x52
c001774e:	83 ec 04             	sub    esp,0x4
c0017751:	50                   	push   eax
c0017752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017756:	68 d4 ac 02 c0       	push   0xc002acd4
c001775b:	e8 93 b1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017760:	83 c4 10             	add    esp,0x10
c0017763:	b8 00 00 00 00       	mov    eax,0x0
c0017768:	83 c4 1c             	add    esp,0x1c
c001776b:	c3                   	ret    

c001776c <scanMADT()>:
c001776c:	53                   	push   ebx
c001776d:	83 ec 38             	sub    esp,0x38
c0017770:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017775:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001777b:	83 e0 04             	and    eax,0x4
c001777e:	84 c0                	test   al,al
c0017780:	0f 84 63 04 00 00    	je     c0017be9 <scanMADT()+0x47d>
c0017786:	e8 76 fb ff ff       	call   c0017301 <findRSDP()>
c001778b:	a3 ac f3 02 c0       	mov    ds:0xc002f3ac,eax
c0017790:	a1 ac f3 02 c0       	mov    eax,ds:0xc002f3ac
c0017795:	85 c0                	test   eax,eax
c0017797:	75 19                	jne    c00177b2 <scanMADT()+0x46>
c0017799:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001779e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a4:	83 e2 fb             	and    edx,0xfffffffb
c00177a7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177ad:	e9 3b 04 00 00       	jmp    c0017bed <scanMADT()+0x481>
c00177b2:	a1 ac f3 02 c0       	mov    eax,ds:0xc002f3ac
c00177b7:	83 ec 0c             	sub    esp,0xc
c00177ba:	50                   	push   eax
c00177bb:	e8 f2 fd ff ff       	call   c00175b2 <findRSDT(unsigned char*)>
c00177c0:	83 c4 10             	add    esp,0x10
c00177c3:	a3 a8 f3 02 c0       	mov    ds:0xc002f3a8,eax
c00177c8:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c00177cd:	85 c0                	test   eax,eax
c00177cf:	75 19                	jne    c00177ea <scanMADT()+0x7e>
c00177d1:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00177d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177dc:	83 e2 fb             	and    edx,0xfffffffb
c00177df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177e5:	e9 03 04 00 00       	jmp    c0017bed <scanMADT()+0x481>
c00177ea:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c00177ef:	83 ec 0c             	sub    esp,0xc
c00177f2:	50                   	push   eax
c00177f3:	e8 93 fb ff ff       	call   c001738b <loadACPITables(unsigned char*)>
c00177f8:	83 c4 10             	add    esp,0x10
c00177fb:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c0017800:	83 ec 08             	sub    esp,0x8
c0017803:	68 a2 ab 02 c0       	push   0xc002aba2
c0017808:	50                   	push   eax
c0017809:	e8 c2 fe ff ff       	call   c00176d0 <findDataTable(unsigned char*, char*)>
c001780e:	83 c4 10             	add    esp,0x10
c0017811:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017815:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001781a:	75 19                	jne    c0017835 <scanMADT()+0xc9>
c001781c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017821:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017827:	83 e2 fe             	and    edx,0xfffffffe
c001782a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017830:	e9 b8 03 00 00       	jmp    c0017bed <scanMADT()+0x481>
c0017835:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001783d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017841:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017844:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017848:	0f 87 9f 03 00 00    	ja     c0017bed <scanMADT()+0x481>
c001784e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017856:	0f 87 91 03 00 00    	ja     c0017bed <scanMADT()+0x481>
c001785c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017860:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017864:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017868:	8d 50 01             	lea    edx,[eax+0x1]
c001786b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001786f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017873:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017877:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001787b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001787f:	8d 50 01             	lea    edx,[eax+0x1]
c0017882:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017886:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001788a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001788e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017892:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017897:	0f 86 4f 03 00 00    	jbe    c0017bec <scanMADT()+0x480>
c001789d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00178a2:	75 57                	jne    c00178fb <scanMADT()+0x18f>
c00178a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a8:	8d 50 01             	lea    edx,[eax+0x1]
c00178ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178af:	8a 15 a0 f5 02 c0    	mov    dl,BYTE PTR ds:0xc002f5a0
c00178b5:	0f b6 d2             	movzx  edx,dl
c00178b8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178bc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178c0:	88 82 e0 f5 02 c0    	mov    BYTE PTR [edx-0x3ffd0a20],al
c00178c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ca:	8d 50 01             	lea    edx,[eax+0x1]
c00178cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d1:	8a 15 a0 f5 02 c0    	mov    dl,BYTE PTR ds:0xc002f5a0
c00178d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178da:	88 0d a0 f5 02 c0    	mov    BYTE PTR ds:0xc002f5a0,cl
c00178e0:	0f b6 d2             	movzx  edx,dl
c00178e3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178e7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178eb:	88 82 c0 f5 02 c0    	mov    BYTE PTR [edx-0x3ffd0a40],al
c00178f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178f6:	e9 da 02 00 00       	jmp    c0017bd5 <scanMADT()+0x469>
c00178fb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017900:	0f 85 14 01 00 00    	jne    c0017a1a <scanMADT()+0x2ae>
c0017906:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001790a:	8d 50 01             	lea    edx,[eax+0x1]
c001790d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017911:	8a 15 60 f4 02 c0    	mov    dl,BYTE PTR ds:0xc002f460
c0017917:	0f b6 d2             	movzx  edx,dl
c001791a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001791e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017922:	88 82 80 f4 02 c0    	mov    BYTE PTR [edx-0x3ffd0b80],al
c0017928:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001792c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017934:	01 d0                	add    eax,edx
c0017936:	83 c0 2c             	add    eax,0x2c
c0017939:	8a 00                	mov    al,BYTE PTR [eax]
c001793b:	0f b6 d0             	movzx  edx,al
c001793e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017942:	8d 48 01             	lea    ecx,[eax+0x1]
c0017945:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017949:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001794d:	0f b6 c0             	movzx  eax,al
c0017950:	c1 e0 08             	shl    eax,0x8
c0017953:	89 d1                	mov    ecx,edx
c0017955:	09 c1                	or     ecx,eax
c0017957:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795b:	8d 50 02             	lea    edx,[eax+0x2]
c001795e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017962:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017966:	0f b6 c0             	movzx  eax,al
c0017969:	c1 e0 10             	shl    eax,0x10
c001796c:	09 c1                	or     ecx,eax
c001796e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017972:	8d 50 03             	lea    edx,[eax+0x3]
c0017975:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017979:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001797d:	0f b6 c0             	movzx  eax,al
c0017980:	c1 e0 18             	shl    eax,0x18
c0017983:	09 c1                	or     ecx,eax
c0017985:	89 ca                	mov    edx,ecx
c0017987:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c001798c:	0f b6 c0             	movzx  eax,al
c001798f:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c0017996:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001799b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001799f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a3:	01 d0                	add    eax,edx
c00179a5:	83 c0 2c             	add    eax,0x2c
c00179a8:	8a 00                	mov    al,BYTE PTR [eax]
c00179aa:	0f b6 d0             	movzx  edx,al
c00179ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00179b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179bc:	0f b6 c0             	movzx  eax,al
c00179bf:	c1 e0 08             	shl    eax,0x8
c00179c2:	89 d1                	mov    ecx,edx
c00179c4:	09 c1                	or     ecx,eax
c00179c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ca:	8d 50 02             	lea    edx,[eax+0x2]
c00179cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179d5:	0f b6 c0             	movzx  eax,al
c00179d8:	c1 e0 10             	shl    eax,0x10
c00179db:	09 c1                	or     ecx,eax
c00179dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e1:	8d 50 03             	lea    edx,[eax+0x3]
c00179e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179ec:	0f b6 c0             	movzx  eax,al
c00179ef:	c1 e0 18             	shl    eax,0x18
c00179f2:	09 c1                	or     ecx,eax
c00179f4:	89 ca                	mov    edx,ecx
c00179f6:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c00179fb:	0f b6 c0             	movzx  eax,al
c00179fe:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c0017a05:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a0a:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c0017a0f:	40                   	inc    eax
c0017a10:	a2 60 f4 02 c0       	mov    ds:0xc002f460,al
c0017a15:	e9 bb 01 00 00       	jmp    c0017bd5 <scanMADT()+0x469>
c0017a1a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017a1f:	0f 85 e9 00 00 00    	jne    c0017b0e <scanMADT()+0x3a2>
c0017a25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a29:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a34:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a38:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017a3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a40:	8d 50 01             	lea    edx,[eax+0x1]
c0017a43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a4b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a4f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a5b:	01 d0                	add    eax,edx
c0017a5d:	83 c0 2c             	add    eax,0x2c
c0017a60:	8a 00                	mov    al,BYTE PTR [eax]
c0017a62:	0f b6 d0             	movzx  edx,al
c0017a65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a69:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a70:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a74:	0f b6 c0             	movzx  eax,al
c0017a77:	c1 e0 08             	shl    eax,0x8
c0017a7a:	89 d1                	mov    ecx,edx
c0017a7c:	09 c1                	or     ecx,eax
c0017a7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a82:	8d 50 02             	lea    edx,[eax+0x2]
c0017a85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a89:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a8d:	0f b6 c0             	movzx  eax,al
c0017a90:	c1 e0 10             	shl    eax,0x10
c0017a93:	09 c1                	or     ecx,eax
c0017a95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a99:	8d 50 03             	lea    edx,[eax+0x3]
c0017a9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aa4:	0f b6 c0             	movzx  eax,al
c0017aa7:	c1 e0 18             	shl    eax,0x18
c0017aaa:	09 c8                	or     eax,ecx
c0017aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ab0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ab5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ab9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017abd:	01 d0                	add    eax,edx
c0017abf:	83 c0 2c             	add    eax,0x2c
c0017ac2:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac4:	0f b6 c0             	movzx  eax,al
c0017ac7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017acb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ace:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ad2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ad6:	0f b6 d2             	movzx  edx,dl
c0017ad9:	c1 e2 08             	shl    edx,0x8
c0017adc:	09 d0                	or     eax,edx
c0017ade:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017ae3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ae8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017aed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017af1:	88 90 20 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd32e0],dl
c0017af7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017afc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017b01:	66 89 84 12 40 f4 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0bc0],ax
c0017b09:	e9 c7 00 00 00       	jmp    c0017bd5 <scanMADT()+0x469>
c0017b0e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017b13:	0f 85 b0 00 00 00    	jne    c0017bc9 <scanMADT()+0x45d>
c0017b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b28:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b2c:	0f b6 c0             	movzx  eax,al
c0017b2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3b:	01 d0                	add    eax,edx
c0017b3d:	83 c0 2c             	add    eax,0x2c
c0017b40:	8a 00                	mov    al,BYTE PTR [eax]
c0017b42:	0f b6 d0             	movzx  edx,al
c0017b45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b49:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b50:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b54:	0f b6 c0             	movzx  eax,al
c0017b57:	c1 e0 08             	shl    eax,0x8
c0017b5a:	09 d0                	or     eax,edx
c0017b5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b60:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b69:	8d 50 01             	lea    edx,[eax+0x1]
c0017b6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b74:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b78:	0f b6 c0             	movzx  eax,al
c0017b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b83:	c1 e0 08             	shl    eax,0x8
c0017b86:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b8a:	89 c1                	mov    ecx,eax
c0017b8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b90:	c1 e0 18             	shl    eax,0x18
c0017b93:	89 c3                	mov    ebx,eax
c0017b95:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c0017b9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017b9d:	89 15 b0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3b0,edx
c0017ba3:	09 d9                	or     ecx,ebx
c0017ba5:	89 ca                	mov    edx,ecx
c0017ba7:	89 14 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],edx
c0017bae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bba:	68 04 ad 02 c0       	push   0xc002ad04
c0017bbf:	e8 2f ad ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017bc4:	83 c4 10             	add    esp,0x10
c0017bc7:	eb 0c                	jmp    c0017bd5 <scanMADT()+0x469>
c0017bc9:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017bce:	75 05                	jne    c0017bd5 <scanMADT()+0x469>
c0017bd0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017bd5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017bda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bde:	01 d0                	add    eax,edx
c0017be0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017be4:	e9 54 fc ff ff       	jmp    c001783d <scanMADT()+0xd1>
c0017be9:	90                   	nop
c0017bea:	eb 01                	jmp    c0017bed <scanMADT()+0x481>
c0017bec:	90                   	nop
c0017bed:	83 c4 38             	add    esp,0x38
c0017bf0:	5b                   	pop    ebx
c0017bf1:	c3                   	ret    

c0017bf2 <ACPI::ACPI()>:
c0017bf2:	83 ec 0c             	sub    esp,0xc
c0017bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf9:	83 ec 08             	sub    esp,0x8
c0017bfc:	68 a7 ab 02 c0       	push   0xc002aba7
c0017c01:	50                   	push   eax
c0017c02:	e8 03 c3 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0017c07:	83 c4 10             	add    esp,0x10
c0017c0a:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c0017c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c13:	89 10                	mov    DWORD PTR [eax],edx
c0017c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c19:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c24:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c32:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c40:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c4b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c52:	e8 15 fb ff ff       	call   c001776c <scanMADT()>
c0017c57:	90                   	nop
c0017c58:	83 c4 0c             	add    esp,0xc
c0017c5b:	c3                   	ret    

c0017c5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c5c:	83 ec 2c             	sub    esp,0x2c
c0017c5f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c67:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c6b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c6f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c74:	88 d0                	mov    al,dl
c0017c76:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c7a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c7f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c8b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c91:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c95:	0f 8d 97 00 00 00    	jge    c0017d32 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ca3:	83 c2 2a             	add    edx,0x2a
c0017ca6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017caa:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017caf:	75 78                	jne    c0017d29 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017cb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cb9:	83 c2 2a             	add    edx,0x2a
c0017cbc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017cc0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017cc4:	75 63                	jne    c0017d29 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017cc6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ccb:	74 3a                	je     c0017d07 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ccd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cd5:	83 c2 2a             	add    edx,0x2a
c0017cd8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ce3:	39 c2                	cmp    edx,eax
c0017ce5:	74 10                	je     c0017cf7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ce7:	83 ec 0c             	sub    esp,0xc
c0017cea:	68 40 ad 02 c0       	push   0xc002ad40
c0017cef:	e8 a5 21 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	83 ec 0c             	sub    esp,0xc
c0017cfa:	68 ac ab 02 c0       	push   0xc002abac
c0017cff:	e8 95 21 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d13:	83 c2 2a             	add    edx,0x2a
c0017d16:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017d1a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017d1c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017d1f:	89 01                	mov    DWORD PTR [ecx],eax
c0017d21:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d24:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d29:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017d2d:	e9 55 ff ff ff       	jmp    c0017c87 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017d32:	90                   	nop
c0017d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d37:	83 c4 2c             	add    esp,0x2c
c0017d3a:	c2 04 00             	ret    0x4
c0017d3d:	90                   	nop

c0017d3e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d3e:	83 ec 1c             	sub    esp,0x1c
c0017d41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d4d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d52:	88 c8                	mov    al,cl
c0017d54:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d58:	88 d0                	mov    al,dl
c0017d5a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d62:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d6f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d73:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d85:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d8c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d95:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d9b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da6:	83 c2 2a             	add    edx,0x2a
c0017da9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dbb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017dbe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017dc2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dca:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017dd0:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017de1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017de7:	3d 00 02 00 00       	cmp    eax,0x200
c0017dec:	75 10                	jne    c0017dfe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017dee:	83 ec 0c             	sub    esp,0xc
c0017df1:	68 bb ab 02 c0       	push   0xc002abbb
c0017df6:	e8 9e 20 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	90                   	nop
c0017dff:	83 c4 1c             	add    esp,0x1c
c0017e02:	c3                   	ret    
c0017e03:	90                   	nop

c0017e04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017e04:	b8 00 00 00 00       	mov    eax,0x0
c0017e09:	c3                   	ret    

c0017e0a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e0a:	83 ec 1c             	sub    esp,0x1c
c0017e0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e11:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e18:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e1d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e22:	83 ec 08             	sub    esp,0x8
c0017e25:	52                   	push   edx
c0017e26:	50                   	push   eax
c0017e27:	e8 10 6e ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017e33:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e38:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e3d:	83 ec 04             	sub    esp,0x4
c0017e40:	6a 01                	push   0x1
c0017e42:	52                   	push   edx
c0017e43:	50                   	push   eax
c0017e44:	e8 09 6f ff ff       	call   c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	90                   	nop
c0017e4d:	83 c4 1c             	add    esp,0x1c
c0017e50:	c3                   	ret    
c0017e51:	90                   	nop

c0017e52 <ACPI::open(int, int, void*)>:
c0017e52:	53                   	push   ebx
c0017e53:	83 ec 28             	sub    esp,0x28
c0017e56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e5a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e65:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e6c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e77:	83 e0 04             	and    eax,0x4
c0017e7a:	84 c0                	test   al,al
c0017e7c:	74 47                	je     c0017ec5 <ACPI::open(int, int, void*)+0x73>
c0017e7e:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c0017e83:	83 ec 08             	sub    esp,0x8
c0017e86:	68 d8 ab 02 c0       	push   0xc002abd8
c0017e8b:	50                   	push   eax
c0017e8c:	e8 3f f8 ff ff       	call   c00176d0 <findDataTable(unsigned char*, char*)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e98:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017e9d:	74 26                	je     c0017ec5 <ACPI::open(int, int, void*)+0x73>
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	68 dd ab 02 c0       	push   0xc002abdd
c0017ea7:	e8 47 aa ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eb3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ebe:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017ec5:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017ecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed3:	3c 01                	cmp    al,0x1
c0017ed5:	75 28                	jne    c0017eff <ACPI::open(int, int, void*)+0xad>
c0017ed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017edb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ee6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017eed:	83 ec 0c             	sub    esp,0xc
c0017ef0:	68 ee ab 02 c0       	push   0xc002abee
c0017ef5:	e8 f9 a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	eb 25                	jmp    c0017f24 <ACPI::open(int, int, void*)+0xd2>
c0017eff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f03:	8a 00                	mov    al,BYTE PTR [eax]
c0017f05:	3c 02                	cmp    al,0x2
c0017f07:	75 1b                	jne    c0017f24 <ACPI::open(int, int, void*)+0xd2>
c0017f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f0d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	68 f6 ab 02 c0       	push   0xc002abf6
c0017f1c:	e8 d2 a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f28:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017f2e:	83 f0 01             	xor    eax,0x1
c0017f31:	84 c0                	test   al,al
c0017f33:	74 6a                	je     c0017f9f <ACPI::open(int, int, void*)+0x14d>
c0017f35:	83 ec 0c             	sub    esp,0xc
c0017f38:	68 fe ab 02 c0       	push   0xc002abfe
c0017f3d:	e8 b1 a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017f42:	83 c4 10             	add    esp,0x10
c0017f45:	e8 06 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017f4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f4e:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017f53:	75 28                	jne    c0017f7d <ACPI::open(int, int, void*)+0x12b>
c0017f55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f59:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f64:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017f6b:	83 ec 0c             	sub    esp,0xc
c0017f6e:	68 0c ac 02 c0       	push   0xc002ac0c
c0017f73:	e8 7b a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017f78:	83 c4 10             	add    esp,0x10
c0017f7b:	eb 22                	jmp    c0017f9f <ACPI::open(int, int, void*)+0x14d>
c0017f7d:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017f82:	75 1b                	jne    c0017f9f <ACPI::open(int, int, void*)+0x14d>
c0017f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f88:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f8f:	83 ec 0c             	sub    esp,0xc
c0017f92:	68 16 ac 02 c0       	push   0xc002ac16
c0017f97:	e8 57 a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017f9c:	83 c4 10             	add    esp,0x10
c0017f9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fa3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017fa9:	84 c0                	test   al,al
c0017fab:	74 13                	je     c0017fc0 <ACPI::open(int, int, void*)+0x16e>
c0017fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fb1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017fb7:	83 f0 01             	xor    eax,0x1
c0017fba:	0f b6 c0             	movzx  eax,al
c0017fbd:	40                   	inc    eax
c0017fbe:	eb 05                	jmp    c0017fc5 <ACPI::open(int, int, void*)+0x173>
c0017fc0:	b8 00 00 00 00       	mov    eax,0x0
c0017fc5:	83 ec 08             	sub    esp,0x8
c0017fc8:	50                   	push   eax
c0017fc9:	68 20 ac 02 c0       	push   0xc002ac20
c0017fce:	e8 20 a9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017fd3:	83 c4 10             	add    esp,0x10
c0017fd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fda:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017fe0:	84 c0                	test   al,al
c0017fe2:	74 67                	je     c001804b <ACPI::open(int, int, void*)+0x1f9>
c0017fe4:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017fec:	83 ec 0c             	sub    esp,0xc
c0017fef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ff3:	e8 2c 76 ff ff       	call   c000f624 <malloc>
c0017ff8:	83 c4 10             	add    esp,0x10
c0017ffb:	89 c3                	mov    ebx,eax
c0017ffd:	83 ec 0c             	sub    esp,0xc
c0018000:	53                   	push   ebx
c0018001:	e8 e8 9f 00 00       	call   c0021fee <PCI::PCI()>
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001800d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018011:	83 ec 08             	sub    esp,0x8
c0018014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018018:	50                   	push   eax
c0018019:	e8 fc bc ff ff       	call   c0013d1a <Device::addChild(Device*)>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018025:	8b 00                	mov    eax,DWORD PTR [eax]
c0018027:	83 c0 08             	add    eax,0x8
c001802a:	8b 00                	mov    eax,DWORD PTR [eax]
c001802c:	6a 00                	push   0x0
c001802e:	6a 00                	push   0x0
c0018030:	6a 00                	push   0x0
c0018032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018036:	ff d0                	call   eax
c0018038:	83 c4 10             	add    esp,0x10
c001803b:	83 ec 0c             	sub    esp,0xc
c001803e:	68 29 ac 02 c0       	push   0xc002ac29
c0018043:	e8 ab a8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018048:	83 c4 10             	add    esp,0x10
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	68 34 ac 02 c0       	push   0xc002ac34
c0018053:	e8 cc 43 00 00       	call   c001c424 <Thr::loadKernelSymbolTable(char const*)>
c0018058:	83 c4 10             	add    esp,0x10
c001805b:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0018060:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018066:	83 e0 04             	and    eax,0x4
c0018069:	84 c0                	test   al,al
c001806b:	0f 84 d2 00 00 00    	je     c0018143 <ACPI::open(int, int, void*)+0x2f1>
c0018071:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018078:	83 ec 0c             	sub    esp,0xc
c001807b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001807f:	e8 a0 75 ff ff       	call   c000f624 <malloc>
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	89 c3                	mov    ebx,eax
c0018089:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001808e:	83 ec 04             	sub    esp,0x4
c0018091:	50                   	push   eax
c0018092:	68 52 ac 02 c0       	push   0xc002ac52
c0018097:	53                   	push   ebx
c0018098:	e8 af ad ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00180a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180a9:	74 17                	je     c00180c2 <ACPI::open(int, int, void*)+0x270>
c00180ab:	83 ec 0c             	sub    esp,0xc
c00180ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180b2:	e8 67 b0 ff ff       	call   c001311e <File::exists()>
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	84 c0                	test   al,al
c00180bc:	74 04                	je     c00180c2 <ACPI::open(int, int, void*)+0x270>
c00180be:	b0 01                	mov    al,0x1
c00180c0:	eb 02                	jmp    c00180c4 <ACPI::open(int, int, void*)+0x272>
c00180c2:	b0 00                	mov    al,0x0
c00180c4:	84 c0                	test   al,al
c00180c6:	74 22                	je     c00180ea <ACPI::open(int, int, void*)+0x298>
c00180c8:	83 ec 08             	sub    esp,0x8
c00180cb:	6a 01                	push   0x1
c00180cd:	68 52 ac 02 c0       	push   0xc002ac52
c00180d2:	e8 a0 4d 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	83 ec 08             	sub    esp,0x8
c00180dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00180e1:	50                   	push   eax
c00180e2:	e8 9f 4f 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180ef:	74 1e                	je     c001810f <ACPI::open(int, int, void*)+0x2bd>
c00180f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180f6:	74 17                	je     c001810f <ACPI::open(int, int, void*)+0x2bd>
c00180f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00180fe:	83 c0 08             	add    eax,0x8
c0018101:	8b 00                	mov    eax,DWORD PTR [eax]
c0018103:	83 ec 0c             	sub    esp,0xc
c0018106:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001810a:	ff d0                	call   eax
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c0018114:	83 ec 08             	sub    esp,0x8
c0018117:	68 6f ac 02 c0       	push   0xc002ac6f
c001811c:	50                   	push   eax
c001811d:	e8 ae f5 ff ff       	call   c00176d0 <findDataTable(unsigned char*, char*)>
c0018122:	83 c4 10             	add    esp,0x10
c0018125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018129:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001812e:	74 13                	je     c0018143 <ACPI::open(int, int, void*)+0x2f1>
c0018130:	83 ec 08             	sub    esp,0x8
c0018133:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018137:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001813b:	e8 ca fc ff ff       	call   c0017e0a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018140:	83 c4 10             	add    esp,0x10
c0018143:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0018149:	83 ec 08             	sub    esp,0x8
c001814c:	6a 01                	push   0x1
c001814e:	68 74 ac 02 c0       	push   0xc002ac74
c0018153:	e8 1f 4d 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	83 ec 08             	sub    esp,0x8
c001815e:	53                   	push   ebx
c001815f:	50                   	push   eax
c0018160:	e8 21 4f 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001816e:	83 ec 08             	sub    esp,0x8
c0018171:	6a 01                	push   0x1
c0018173:	68 91 ac 02 c0       	push   0xc002ac91
c0018178:	e8 fa 4c 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	83 ec 08             	sub    esp,0x8
c0018183:	53                   	push   ebx
c0018184:	50                   	push   eax
c0018185:	e8 fc 4e 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c001818a:	83 c4 10             	add    esp,0x10
c001818d:	b8 00 00 00 00       	mov    eax,0x0
c0018192:	83 c4 28             	add    esp,0x28
c0018195:	5b                   	pop    ebx
c0018196:	c3                   	ret    
c0018197:	90                   	nop

c0018198 <ACPI::sleep()>:
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c00181a0:	85 c0                	test   eax,eax
c00181a2:	74 07                	je     c00181ab <ACPI::sleep()+0x13>
c00181a4:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c00181a9:	ff d0                	call   eax
c00181ab:	90                   	nop
c00181ac:	83 c4 0c             	add    esp,0xc
c00181af:	c3                   	ret    

c00181b0 <CPU::close(int, int, void*)>:
c00181b0:	31 c0                	xor    eax,eax
c00181b2:	c3                   	ret    
c00181b3:	90                   	nop

c00181b4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00181b4:	55                   	push   ebp
c00181b5:	57                   	push   edi
c00181b6:	56                   	push   esi
c00181b7:	53                   	push   ebx
c00181b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c0:	89 ce                	mov    esi,ecx
c00181c2:	89 d5                	mov    ebp,edx
c00181c4:	80 f9 04             	cmp    cl,0x4
c00181c7:	75 28                	jne    c00181f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00181c9:	8d 42 f9             	lea    eax,[edx-0x7]
c00181cc:	3c 03                	cmp    al,0x3
c00181ce:	0f 86 63 01 00 00    	jbe    c0018337 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181d4:	80 fa 03             	cmp    dl,0x3
c00181d7:	0f 84 5a 01 00 00    	je     c0018337 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181dd:	8d 7a f2             	lea    edi,[edx-0xe]
c00181e0:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00181e5:	89 fb                	mov    ebx,edi
c00181e7:	80 fb 01             	cmp    bl,0x1
c00181ea:	77 4e                	ja     c001823a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181ec:	e9 52 01 00 00       	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f1:	80 f9 05             	cmp    cl,0x5
c00181f4:	75 4d                	jne    c0018243 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181f6:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c00181fb:	80 fa 03             	cmp    dl,0x3
c00181fe:	0f 86 3f 01 00 00    	jbe    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018204:	8d 7a fa             	lea    edi,[edx-0x6]
c0018207:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c001820c:	89 fb                	mov    ebx,edi
c001820e:	80 fb 01             	cmp    bl,0x1
c0018211:	0f 86 2c 01 00 00    	jbe    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018217:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c001821c:	80 fa 08             	cmp    dl,0x8
c001821f:	0f 84 1e 01 00 00    	je     c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018225:	89 d7                	mov    edi,edx
c0018227:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c001822c:	83 e7 fb             	and    edi,0xfffffffb
c001822f:	89 fb                	mov    ebx,edi
c0018231:	80 fb 09             	cmp    bl,0x9
c0018234:	0f 84 09 01 00 00    	je     c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823a:	31 c0                	xor    eax,eax
c001823c:	89 eb                	mov    ebx,ebp
c001823e:	0f b6 fb             	movzx  edi,bl
c0018241:	eb 30                	jmp    c0018273 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018243:	31 c0                	xor    eax,eax
c0018245:	80 f9 06             	cmp    cl,0x6
c0018248:	75 f2                	jne    c001823c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001824a:	80 fa 0a             	cmp    dl,0xa
c001824d:	77 ed                	ja     c001823c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001824f:	bf de 05 00 00       	mov    edi,0x5de
c0018254:	0f a3 d7             	bt     edi,edx
c0018257:	73 e3                	jae    c001823c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018259:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c001825e:	e9 e0 00 00 00       	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018263:	39 c7                	cmp    edi,eax
c0018265:	0f 84 d3 00 00 00    	je     c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001826b:	40                   	inc    eax
c001826c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018271:	74 09                	je     c001827c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018273:	89 f3                	mov    ebx,esi
c0018275:	80 fb 0f             	cmp    bl,0xf
c0018278:	75 f1                	jne    c001826b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001827a:	eb e7                	jmp    c0018263 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001827c:	80 f9 10             	cmp    cl,0x10
c001827f:	75 14                	jne    c0018295 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018281:	8d 42 fc             	lea    eax,[edx-0x4]
c0018284:	83 e0 fb             	and    eax,0xfffffffb
c0018287:	3c 02                	cmp    al,0x2
c0018289:	76 34                	jbe    c00182bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001828b:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c0018290:	80 fa 02             	cmp    dl,0x2
c0018293:	eb 24                	jmp    c00182b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018295:	80 f9 11             	cmp    cl,0x11
c0018298:	75 13                	jne    c00182ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001829a:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c001829f:	80 fa 03             	cmp    dl,0x3
c00182a2:	0f 85 9b 00 00 00    	jne    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a8:	e9 91 00 00 00       	jmp    c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182ad:	80 f9 12             	cmp    cl,0x12
c00182b0:	75 14                	jne    c00182c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00182b2:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00182b7:	fe ca                	dec    dl
c00182b9:	0f 85 84 00 00 00    	jne    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bf:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c00182c4:	eb 7d                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c6:	80 f9 14             	cmp    cl,0x14
c00182c9:	75 12                	jne    c00182dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00182cb:	4a                   	dec    edx
c00182cc:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00182d1:	80 fa 01             	cmp    dl,0x1
c00182d4:	77 6d                	ja     c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d6:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c00182db:	eb 66                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182dd:	80 f9 15             	cmp    cl,0x15
c00182e0:	75 31                	jne    c0018313 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182e2:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c00182e7:	80 fa 01             	cmp    dl,0x1
c00182ea:	74 57                	je     c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ec:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00182f1:	80 fa 13             	cmp    dl,0x13
c00182f4:	76 0c                	jbe    c0018302 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182f6:	80 fa 30             	cmp    dl,0x30
c00182f9:	75 48                	jne    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fb:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c0018300:	eb 41                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018302:	b9 04 00 09 00       	mov    ecx,0x90004
c0018307:	0f a3 d1             	bt     ecx,edx
c001830a:	73 37                	jae    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830c:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c0018311:	eb 30                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018313:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c0018318:	80 f9 16             	cmp    cl,0x16
c001831b:	75 26                	jne    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001831d:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c0018322:	84 d2                	test   dl,dl
c0018324:	74 1d                	je     c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018326:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c001832b:	80 fa 30             	cmp    dl,0x30
c001832e:	75 13                	jne    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018330:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c0018335:	eb 0c                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018337:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001833c:	eb 05                	jmp    c0018343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833e:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c0018343:	5b                   	pop    ebx
c0018344:	5e                   	pop    esi
c0018345:	5f                   	pop    edi
c0018346:	5d                   	pop    ebp
c0018347:	c3                   	ret    

c0018348 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018348:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001834c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018350:	80 f9 04             	cmp    cl,0x4
c0018353:	75 6b                	jne    c00183c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018355:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001835a:	80 fa 01             	cmp    dl,0x1
c001835d:	0f 86 92 02 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018363:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018368:	80 fa 02             	cmp    dl,0x2
c001836b:	0f 84 84 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018371:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018376:	80 fa 03             	cmp    dl,0x3
c0018379:	0f 84 76 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001837f:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018384:	80 fa 04             	cmp    dl,0x4
c0018387:	0f 84 68 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001838d:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018392:	80 fa 05             	cmp    dl,0x5
c0018395:	0f 84 5a 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001839b:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00183a0:	80 fa 07             	cmp    dl,0x7
c00183a3:	0f 84 4c 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a9:	83 ea 08             	sub    edx,0x8
c00183ac:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00183b1:	80 fa 01             	cmp    dl,0x1
c00183b4:	0f 87 3b 02 00 00    	ja     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ba:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00183bf:	c3                   	ret    
c00183c0:	80 f9 05             	cmp    cl,0x5
c00183c3:	75 45                	jne    c001840a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00183c5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00183c8:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00183cd:	80 f9 02             	cmp    cl,0x2
c00183d0:	0f 86 1f 02 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d6:	80 fa 04             	cmp    dl,0x4
c00183d9:	0f 84 f3 01 00 00    	je     c00185d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183df:	80 fa 07             	cmp    dl,0x7
c00183e2:	0f 84 0d 02 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e8:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00183ed:	80 fa 08             	cmp    dl,0x8
c00183f0:	0f 84 ff 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f6:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00183fb:	80 fa 09             	cmp    dl,0x9
c00183fe:	0f 85 f1 01 00 00    	jne    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018404:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018409:	c3                   	ret    
c001840a:	80 f9 06             	cmp    cl,0x6
c001840d:	0f 85 85 01 00 00    	jne    c0018598 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018413:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018418:	80 fa 01             	cmp    dl,0x1
c001841b:	0f 84 d4 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018421:	8d 42 fb             	lea    eax,[edx-0x5]
c0018424:	3c 01                	cmp    al,0x1
c0018426:	0f 86 ac 01 00 00    	jbe    c00185d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001842c:	80 fa 03             	cmp    dl,0x3
c001842f:	0f 84 a3 01 00 00    	je     c00185d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018435:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018438:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c001843d:	80 f9 01             	cmp    cl,0x1
c0018440:	0f 86 af 01 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018446:	80 fa 09             	cmp    dl,0x9
c0018449:	0f 84 8f 01 00 00    	je     c00185de <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001844f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018452:	80 f9 01             	cmp    cl,0x1
c0018455:	0f 86 9a 01 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845b:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018460:	80 fa 0d             	cmp    dl,0xd
c0018463:	0f 84 8c 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018469:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001846e:	80 fa 0e             	cmp    dl,0xe
c0018471:	0f 84 7e 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018477:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001847c:	80 fa 0f             	cmp    dl,0xf
c001847f:	0f 84 70 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018485:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001848a:	80 fa 15             	cmp    dl,0x15
c001848d:	0f 84 62 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018493:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018496:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001849b:	80 f9 01             	cmp    cl,0x1
c001849e:	0f 86 51 01 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a4:	80 fa 1a             	cmp    dl,0x1a
c00184a7:	0f 84 37 01 00 00    	je     c00185e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00184ad:	80 fa 1c             	cmp    dl,0x1c
c00184b0:	0f 84 34 01 00 00    	je     c00185ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00184b6:	80 fa 1d             	cmp    dl,0x1d
c00184b9:	0f 84 36 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bf:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184c4:	80 fa 25             	cmp    dl,0x25
c00184c7:	0f 84 28 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cd:	8d 4a da             	lea    ecx,[edx-0x26]
c00184d0:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00184d5:	80 f9 01             	cmp    cl,0x1
c00184d8:	0f 86 17 01 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184de:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184e3:	80 fa 2a             	cmp    dl,0x2a
c00184e6:	0f 84 09 01 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ec:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184f1:	80 fa 2c             	cmp    dl,0x2c
c00184f4:	0f 84 fb 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fa:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184ff:	80 fa 2d             	cmp    dl,0x2d
c0018502:	0f 84 ed 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018508:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001850d:	80 fa 2e             	cmp    dl,0x2e
c0018510:	0f 84 df 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018516:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001851b:	80 fa 2f             	cmp    dl,0x2f
c001851e:	0f 84 d1 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018524:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018527:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001852c:	80 f9 01             	cmp    cl,0x1
c001852f:	0f 86 c0 00 00 00    	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018535:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c001853a:	80 fa 37             	cmp    dl,0x37
c001853d:	0f 84 b2 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018543:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018548:	80 fa 3a             	cmp    dl,0x3a
c001854b:	0f 84 a4 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018551:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018556:	80 fa 3c             	cmp    dl,0x3c
c0018559:	0f 84 96 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855f:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018564:	80 fa 3d             	cmp    dl,0x3d
c0018567:	0f 84 88 00 00 00    	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856d:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018572:	80 fa 3e             	cmp    dl,0x3e
c0018575:	74 7e                	je     c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018577:	8d 42 bb             	lea    eax,[edx-0x45]
c001857a:	3c 01                	cmp    al,0x1
c001857c:	76 72                	jbe    c00185f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001857e:	80 fa 3f             	cmp    dl,0x3f
c0018581:	74 6d                	je     c00185f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018583:	80 fa 4a             	cmp    dl,0x4a
c0018586:	74 0a                	je     c0018592 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018588:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c001858d:	80 fa 4d             	cmp    dl,0x4d
c0018590:	75 63                	jne    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018592:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018597:	c3                   	ret    
c0018598:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c001859d:	80 f9 0b             	cmp    cl,0xb
c00185a0:	75 0a                	jne    c00185ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00185a2:	fe ca                	dec    dl
c00185a4:	75 4f                	jne    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a6:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c00185ab:	c3                   	ret    
c00185ac:	80 f9 0f             	cmp    cl,0xf
c00185af:	75 44                	jne    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b1:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00185b6:	80 fa 02             	cmp    dl,0x2
c00185b9:	76 3a                	jbe    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	8d 42 fd             	lea    eax,[edx-0x3]
c00185be:	3c 01                	cmp    al,0x1
c00185c0:	76 0a                	jbe    c00185cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00185c2:	b8 8e b0 02 c0       	mov    eax,0xc002b08e
c00185c7:	80 fa 06             	cmp    dl,0x6
c00185ca:	75 29                	jne    c00185f5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cc:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c00185d1:	c3                   	ret    
c00185d2:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00185d7:	c3                   	ret    
c00185d8:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00185dd:	c3                   	ret    
c00185de:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185e3:	c3                   	ret    
c00185e4:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00185e9:	c3                   	ret    
c00185ea:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00185ef:	c3                   	ret    
c00185f0:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00185f5:	c3                   	ret    

c00185f6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185f6:	60                   	pusha  
c00185f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018603:	9c                   	pushf  
c0018604:	fa                   	cli    
c0018605:	0f 09                	wbinvd 
c0018607:	0f 30                	wrmsr  
c0018609:	9d                   	popf   
c001860a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001860e:	89 02                	mov    DWORD PTR [edx],eax
c0018610:	61                   	popa   
c0018611:	c3                   	ret    

c0018612 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018612:	60                   	pusha  
c0018613:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018617:	9c                   	pushf  
c0018618:	fa                   	cli    
c0018619:	0f 09                	wbinvd 
c001861b:	31 c0                	xor    eax,eax
c001861d:	31 d2                	xor    edx,edx
c001861f:	0f 32                	rdmsr  
c0018621:	9d                   	popf   
c0018622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018626:	89 02                	mov    DWORD PTR [edx],eax
c0018628:	61                   	popa   
c0018629:	c3                   	ret    

c001862a <CPU::AMD_K6_writeback(int, int, int)>:
c001862a:	56                   	push   esi
c001862b:	53                   	push   ebx
c001862c:	83 ec 10             	sub    esp,0x10
c001862f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018633:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018638:	75 5d                	jne    c0018697 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001863a:	83 f8 08             	cmp    eax,0x8
c001863d:	75 09                	jne    c0018648 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001863f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018644:	7e 13                	jle    c0018659 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018646:	eb 30                	jmp    c0018678 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018648:	83 f8 06             	cmp    eax,0x6
c001864b:	7c 4a                	jl     c0018697 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001864d:	83 f8 07             	cmp    eax,0x7
c0018650:	7e 07                	jle    c0018659 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018652:	83 f8 09             	cmp    eax,0x9
c0018655:	74 21                	je     c0018678 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018657:	eb 3e                	jmp    c0018697 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018659:	89 e6                	mov    esi,esp
c001865b:	8b 1d 04 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db04
c0018661:	56                   	push   esi
c0018662:	c1 eb 15             	shr    ebx,0x15
c0018665:	68 82 00 00 c0       	push   0xc0000082
c001866a:	83 e3 7e             	and    ebx,0x7e
c001866d:	e8 a0 ff ff ff       	call   c0018612 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018672:	56                   	push   esi
c0018673:	6a 00                	push   0x0
c0018675:	53                   	push   ebx
c0018676:	eb 12                	jmp    c001868a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018678:	89 e3                	mov    ebx,esp
c001867a:	53                   	push   ebx
c001867b:	68 82 00 00 c0       	push   0xc0000082
c0018680:	e8 8d ff ff ff       	call   c0018612 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018685:	53                   	push   ebx
c0018686:	6a 00                	push   0x0
c0018688:	6a 00                	push   0x0
c001868a:	68 82 00 00 c0       	push   0xc0000082
c001868f:	e8 62 ff ff ff       	call   c00185f6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018694:	83 c4 18             	add    esp,0x18
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	5b                   	pop    ebx
c001869b:	5e                   	pop    esi
c001869c:	c3                   	ret    
c001869d:	90                   	nop

c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001869e:	55                   	push   ebp
c001869f:	57                   	push   edi
c00186a0:	56                   	push   esi
c00186a1:	53                   	push   ebx
c00186a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00186ae:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00186b2:	39 05 e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,eax
c00186b8:	75 23                	jne    c00186dd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00186ba:	a1 0c f6 02 c0       	mov    eax,ds:0xc002f60c
c00186bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186c3:	89 06                	mov    DWORD PTR [esi],eax
c00186c5:	a1 08 f6 02 c0       	mov    eax,ds:0xc002f608
c00186ca:	89 07                	mov    DWORD PTR [edi],eax
c00186cc:	a1 04 f6 02 c0       	mov    eax,ds:0xc002f604
c00186d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00186d4:	a1 00 f6 02 c0       	mov    eax,ds:0xc002f600
c00186d9:	89 02                	mov    DWORD PTR [edx],eax
c00186db:	eb 3f                	jmp    c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186dd:	31 c9                	xor    ecx,ecx
c00186df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e3:	0f a2                	cpuid  
c00186e5:	89 06                	mov    DWORD PTR [esi],eax
c00186e7:	89 1f                	mov    DWORD PTR [edi],ebx
c00186e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186ed:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186f0:	89 10                	mov    DWORD PTR [eax],edx
c00186f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f6:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c00186fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00186fd:	a3 0c f6 02 c0       	mov    ds:0xc002f60c,eax
c0018702:	8b 07                	mov    eax,DWORD PTR [edi]
c0018704:	a3 08 f6 02 c0       	mov    ds:0xc002f608,eax
c0018709:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001870c:	a3 04 f6 02 c0       	mov    ds:0xc002f604,eax
c0018711:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018715:	8b 00                	mov    eax,DWORD PTR [eax]
c0018717:	a3 00 f6 02 c0       	mov    ds:0xc002f600,eax
c001871c:	5b                   	pop    ebx
c001871d:	5e                   	pop    esi
c001871e:	5f                   	pop    edi
c001871f:	5d                   	pop    ebp
c0018720:	c3                   	ret    
c0018721:	90                   	nop

c0018722 <CPU::cpuidCheckEDX(unsigned int)>:
c0018722:	83 ec 10             	sub    esp,0x10
c0018725:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018729:	50                   	push   eax
c001872a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872e:	50                   	push   eax
c001872f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018733:	50                   	push   eax
c0018734:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018738:	50                   	push   eax
c0018739:	6a 01                	push   0x1
c001873b:	e8 5e ff ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018740:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018744:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018748:	0f 95 c0             	setne  al
c001874b:	83 c4 24             	add    esp,0x24
c001874e:	c3                   	ret    
c001874f:	90                   	nop

c0018750 <CPU::cpuidCheckECX(unsigned int)>:
c0018750:	83 ec 10             	sub    esp,0x10
c0018753:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018757:	50                   	push   eax
c0018758:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875c:	50                   	push   eax
c001875d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018761:	50                   	push   eax
c0018762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018766:	50                   	push   eax
c0018767:	6a 01                	push   0x1
c0018769:	e8 30 ff ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001876e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018772:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018776:	0f 95 c0             	setne  al
c0018779:	83 c4 24             	add    esp,0x24
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001877e:	83 ec 10             	sub    esp,0x10
c0018781:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018785:	50                   	push   eax
c0018786:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878a:	50                   	push   eax
c001878b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878f:	50                   	push   eax
c0018790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018794:	50                   	push   eax
c0018795:	6a 07                	push   0x7
c0018797:	e8 02 ff ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001879c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187a0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00187a4:	0f 95 c0             	setne  al
c00187a7:	83 c4 24             	add    esp,0x24
c00187aa:	c3                   	ret    
c00187ab:	90                   	nop

c00187ac <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00187ac:	83 ec 10             	sub    esp,0x10
c00187af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b3:	50                   	push   eax
c00187b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b8:	50                   	push   eax
c00187b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187bd:	50                   	push   eax
c00187be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c2:	50                   	push   eax
c00187c3:	6a 07                	push   0x7
c00187c5:	e8 d4 fe ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187ce:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187d2:	0f 95 c0             	setne  al
c00187d5:	83 c4 24             	add    esp,0x24
c00187d8:	c3                   	ret    
c00187d9:	90                   	nop

c00187da <CPU::CPU()>:
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187e1:	83 ec 08             	sub    esp,0x8
c00187e4:	68 8e b0 02 c0       	push   0xc002b08e
c00187e9:	50                   	push   eax
c00187ea:	e8 1b b7 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	ba 68 b1 02 c0       	mov    edx,0xc002b168
c00187f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187fb:	89 10                	mov    DWORD PTR [eax],edx
c00187fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018801:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001880f:	05 78 01 00 00       	add    eax,0x178
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	50                   	push   eax
c0018818:	e8 1f 66 ff ff       	call   c000ee3c <GDT::GDT()>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018824:	05 7c 09 00 00       	add    eax,0x97c
c0018829:	83 ec 0c             	sub    esp,0xc
c001882c:	50                   	push   eax
c001882d:	e8 6c 68 ff ff       	call   c000f09e <IDT::IDT()>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018839:	05 7c 11 00 00       	add    eax,0x117c
c001883e:	83 ec 0c             	sub    esp,0xc
c0018841:	50                   	push   eax
c0018842:	e8 ed 89 ff ff       	call   c0011234 <TSS::TSS()>
c0018847:	83 c4 10             	add    esp,0x10
c001884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001884e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018859:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018863:	90                   	nop
c0018864:	83 c4 0c             	add    esp,0xc
c0018867:	c3                   	ret    

c0018868 <CPU::displayFeatures()>:
c0018868:	53                   	push   ebx
c0018869:	83 ec 10             	sub    esp,0x10
c001886c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018870:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018876:	68 9c ad 02 c0       	push   0xc002ad9c
c001887b:	e8 73 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018880:	59                   	pop    ecx
c0018881:	58                   	pop    eax
c0018882:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018888:	50                   	push   eax
c0018889:	68 ad ad 02 c0       	push   0xc002adad
c001888e:	e8 60 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018893:	58                   	pop    eax
c0018894:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001889a:	5a                   	pop    edx
c001889b:	c1 e8 0e             	shr    eax,0xe
c001889e:	0f b6 c0             	movzx  eax,al
c00188a1:	50                   	push   eax
c00188a2:	68 be ad 02 c0       	push   0xc002adbe
c00188a7:	e8 47 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00188ac:	59                   	pop    ecx
c00188ad:	58                   	pop    eax
c00188ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188b4:	66 c1 e8 06          	shr    ax,0x6
c00188b8:	0f b6 c0             	movzx  eax,al
c00188bb:	50                   	push   eax
c00188bc:	68 cf ad 02 c0       	push   0xc002adcf
c00188c1:	e8 2d a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00188c6:	c7 04 24 6b b2 02 c0 	mov    DWORD PTR [esp],0xc002b26b
c00188cd:	e8 21 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00188d2:	83 c4 10             	add    esp,0x10
c00188d5:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188da:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00188e1:	74 05                	je     c00188e8 <CPU::displayFeatures()+0x80>
c00188e3:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188e8:	52                   	push   edx
c00188e9:	52                   	push   edx
c00188ea:	50                   	push   eax
c00188eb:	68 e0 ad 02 c0       	push   0xc002ade0
c00188f0:	e8 fe 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00188f5:	83 c4 10             	add    esp,0x10
c00188f8:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188fd:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018904:	78 05                	js     c001890b <CPU::displayFeatures()+0xa3>
c0018906:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001890b:	51                   	push   ecx
c001890c:	51                   	push   ecx
c001890d:	50                   	push   eax
c001890e:	68 f7 ad 02 c0       	push   0xc002adf7
c0018913:	e8 db 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018920:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018927:	75 05                	jne    c001892e <CPU::displayFeatures()+0xc6>
c0018929:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001892e:	52                   	push   edx
c001892f:	52                   	push   edx
c0018930:	50                   	push   eax
c0018931:	68 0e ae 02 c0       	push   0xc002ae0e
c0018936:	e8 b8 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018943:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001894a:	75 05                	jne    c0018951 <CPU::displayFeatures()+0xe9>
c001894c:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018951:	51                   	push   ecx
c0018952:	51                   	push   ecx
c0018953:	50                   	push   eax
c0018954:	68 25 ae 02 c0       	push   0xc002ae25
c0018959:	e8 95 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001895e:	83 c4 10             	add    esp,0x10
c0018961:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018966:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001896d:	75 05                	jne    c0018974 <CPU::displayFeatures()+0x10c>
c001896f:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018974:	52                   	push   edx
c0018975:	52                   	push   edx
c0018976:	50                   	push   eax
c0018977:	68 3c ae 02 c0       	push   0xc002ae3c
c001897c:	e8 72 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018981:	83 c4 10             	add    esp,0x10
c0018984:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018989:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018990:	75 05                	jne    c0018997 <CPU::displayFeatures()+0x12f>
c0018992:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018997:	51                   	push   ecx
c0018998:	51                   	push   ecx
c0018999:	50                   	push   eax
c001899a:	68 53 ae 02 c0       	push   0xc002ae53
c001899f:	e8 4f 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189ac:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00189b3:	75 05                	jne    c00189ba <CPU::displayFeatures()+0x152>
c00189b5:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189ba:	52                   	push   edx
c00189bb:	52                   	push   edx
c00189bc:	50                   	push   eax
c00189bd:	68 6a ae 02 c0       	push   0xc002ae6a
c00189c2:	e8 2c 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189cf:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00189d6:	75 05                	jne    c00189dd <CPU::displayFeatures()+0x175>
c00189d8:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189dd:	51                   	push   ecx
c00189de:	51                   	push   ecx
c00189df:	50                   	push   eax
c00189e0:	68 81 ae 02 c0       	push   0xc002ae81
c00189e5:	e8 09 9f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00189ea:	83 c4 10             	add    esp,0x10
c00189ed:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189f2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00189f9:	75 05                	jne    c0018a00 <CPU::displayFeatures()+0x198>
c00189fb:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a00:	52                   	push   edx
c0018a01:	52                   	push   edx
c0018a02:	50                   	push   eax
c0018a03:	68 98 ae 02 c0       	push   0xc002ae98
c0018a08:	e8 e6 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018a0d:	83 c4 10             	add    esp,0x10
c0018a10:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a15:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018a1c:	75 05                	jne    c0018a23 <CPU::displayFeatures()+0x1bb>
c0018a1e:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a23:	51                   	push   ecx
c0018a24:	51                   	push   ecx
c0018a25:	50                   	push   eax
c0018a26:	68 af ae 02 c0       	push   0xc002aeaf
c0018a2b:	e8 c3 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a38:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018a3f:	75 05                	jne    c0018a46 <CPU::displayFeatures()+0x1de>
c0018a41:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a46:	52                   	push   edx
c0018a47:	52                   	push   edx
c0018a48:	50                   	push   eax
c0018a49:	68 c6 ae 02 c0       	push   0xc002aec6
c0018a4e:	e8 a0 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a5b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018a62:	75 05                	jne    c0018a69 <CPU::displayFeatures()+0x201>
c0018a64:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a69:	51                   	push   ecx
c0018a6a:	51                   	push   ecx
c0018a6b:	50                   	push   eax
c0018a6c:	68 dd ae 02 c0       	push   0xc002aedd
c0018a71:	e8 7d 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018a76:	83 c4 10             	add    esp,0x10
c0018a79:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a7e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018a85:	75 05                	jne    c0018a8c <CPU::displayFeatures()+0x224>
c0018a87:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a8c:	52                   	push   edx
c0018a8d:	52                   	push   edx
c0018a8e:	50                   	push   eax
c0018a8f:	68 f4 ae 02 c0       	push   0xc002aef4
c0018a94:	e8 5a 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018a99:	83 c4 10             	add    esp,0x10
c0018a9c:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018aa1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018aa8:	78 05                	js     c0018aaf <CPU::displayFeatures()+0x247>
c0018aaa:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018aaf:	51                   	push   ecx
c0018ab0:	51                   	push   ecx
c0018ab1:	50                   	push   eax
c0018ab2:	68 0b af 02 c0       	push   0xc002af0b
c0018ab7:	e8 37 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018abc:	83 c4 10             	add    esp,0x10
c0018abf:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018ac4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018acb:	75 05                	jne    c0018ad2 <CPU::displayFeatures()+0x26a>
c0018acd:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018ad2:	52                   	push   edx
c0018ad3:	52                   	push   edx
c0018ad4:	50                   	push   eax
c0018ad5:	68 22 af 02 c0       	push   0xc002af22
c0018ada:	e8 14 9e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018adf:	83 c4 18             	add    esp,0x18
c0018ae2:	5b                   	pop    ebx
c0018ae3:	c3                   	ret    

c0018ae4 <CPU::detectFeatures()>:
c0018ae4:	55                   	push   ebp
c0018ae5:	57                   	push   edi
c0018ae6:	56                   	push   esi
c0018ae7:	53                   	push   ebx
c0018ae8:	83 ec 50             	sub    esp,0x50
c0018aeb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018aef:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018af9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018b00:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018b06:	6a 0d                	push   0xd
c0018b08:	6a 00                	push   0x0
c0018b0a:	57                   	push   edi
c0018b0b:	e8 b4 7b fe ff       	call   c00006c4 <memset>
c0018b10:	83 c4 10             	add    esp,0x10
c0018b13:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0018b18:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018b1f:	0f 84 20 09 00 00    	je     c0019445 <CPU::detectFeatures()+0x961>
c0018b25:	83 ec 0c             	sub    esp,0xc
c0018b28:	6a 10                	push   0x10
c0018b2a:	e8 f3 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018b2f:	83 e0 01             	and    eax,0x1
c0018b32:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b35:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b3b:	83 e0 fd             	and    eax,0xfffffffd
c0018b3e:	09 d0                	or     eax,edx
c0018b40:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b46:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b4d:	e8 d0 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018b52:	83 e0 01             	and    eax,0x1
c0018b55:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b5c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b62:	83 e0 fb             	and    eax,0xfffffffb
c0018b65:	09 d0                	or     eax,edx
c0018b67:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b6d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b74:	e8 a9 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018b79:	83 e0 01             	and    eax,0x1
c0018b7c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b83:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b89:	83 e0 f7             	and    eax,0xfffffff7
c0018b8c:	09 d0                	or     eax,edx
c0018b8e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b94:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b9b:	e8 82 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018ba0:	83 e0 01             	and    eax,0x1
c0018ba3:	c1 e0 04             	shl    eax,0x4
c0018ba6:	88 c2                	mov    dl,al
c0018ba8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bae:	83 e0 ef             	and    eax,0xffffffef
c0018bb1:	09 d0                	or     eax,edx
c0018bb3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bb9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018bc0:	e8 5d fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018bc5:	83 e0 01             	and    eax,0x1
c0018bc8:	c1 e0 05             	shl    eax,0x5
c0018bcb:	88 c2                	mov    dl,al
c0018bcd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bd3:	83 e0 df             	and    eax,0xffffffdf
c0018bd6:	09 d0                	or     eax,edx
c0018bd8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bde:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018be5:	e8 38 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018bea:	83 e0 01             	and    eax,0x1
c0018bed:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bf0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bf6:	83 e0 fd             	and    eax,0xfffffffd
c0018bf9:	09 d0                	or     eax,edx
c0018bfb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c01:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018c08:	e8 15 fb ff ff       	call   c0018722 <CPU::cpuidCheckEDX(unsigned int)>
c0018c0d:	83 e0 01             	and    eax,0x1
c0018c10:	c1 e0 06             	shl    eax,0x6
c0018c13:	88 c2                	mov    dl,al
c0018c15:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c1b:	83 e0 bf             	and    eax,0xffffffbf
c0018c1e:	09 d0                	or     eax,edx
c0018c20:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c26:	58                   	pop    eax
c0018c27:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c2b:	56                   	push   esi
c0018c2c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018c30:	55                   	push   ebp
c0018c31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c35:	50                   	push   eax
c0018c36:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018c3a:	52                   	push   edx
c0018c3b:	6a 00                	push   0x0
c0018c3d:	e8 5c fa ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c42:	83 c4 1c             	add    esp,0x1c
c0018c45:	6a 04                	push   0x4
c0018c47:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c4b:	50                   	push   eax
c0018c4c:	57                   	push   edi
c0018c4d:	e8 4e 7a fe ff       	call   c00006a0 <memcpy>
c0018c52:	83 c4 0c             	add    esp,0xc
c0018c55:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018c5b:	6a 04                	push   0x4
c0018c5d:	56                   	push   esi
c0018c5e:	50                   	push   eax
c0018c5f:	e8 3c 7a fe ff       	call   c00006a0 <memcpy>
c0018c64:	83 c4 0c             	add    esp,0xc
c0018c67:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018c6d:	6a 04                	push   0x4
c0018c6f:	55                   	push   ebp
c0018c70:	50                   	push   eax
c0018c71:	e8 2a 7a fe ff       	call   c00006a0 <memcpy>
c0018c76:	58                   	pop    eax
c0018c77:	5a                   	pop    edx
c0018c78:	68 39 af 02 c0       	push   0xc002af39
c0018c7d:	57                   	push   edi
c0018c7e:	e8 31 7b fe ff       	call   c00007b4 <strcmp>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	85 c0                	test   eax,eax
c0018c88:	75 0f                	jne    c0018c99 <CPU::detectFeatures()+0x1b5>
c0018c8a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c94:	e9 22 02 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018c99:	50                   	push   eax
c0018c9a:	50                   	push   eax
c0018c9b:	68 46 af 02 c0       	push   0xc002af46
c0018ca0:	57                   	push   edi
c0018ca1:	e8 0e 7b fe ff       	call   c00007b4 <strcmp>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	85 c0                	test   eax,eax
c0018cab:	74 dd                	je     c0018c8a <CPU::detectFeatures()+0x1a6>
c0018cad:	51                   	push   ecx
c0018cae:	51                   	push   ecx
c0018caf:	68 53 af 02 c0       	push   0xc002af53
c0018cb4:	57                   	push   edi
c0018cb5:	e8 fa 7a fe ff       	call   c00007b4 <strcmp>
c0018cba:	83 c4 10             	add    esp,0x10
c0018cbd:	85 c0                	test   eax,eax
c0018cbf:	74 2a                	je     c0018ceb <CPU::detectFeatures()+0x207>
c0018cc1:	52                   	push   edx
c0018cc2:	52                   	push   edx
c0018cc3:	68 60 af 02 c0       	push   0xc002af60
c0018cc8:	57                   	push   edi
c0018cc9:	e8 e6 7a fe ff       	call   c00007b4 <strcmp>
c0018cce:	83 c4 10             	add    esp,0x10
c0018cd1:	85 c0                	test   eax,eax
c0018cd3:	74 16                	je     c0018ceb <CPU::detectFeatures()+0x207>
c0018cd5:	50                   	push   eax
c0018cd6:	50                   	push   eax
c0018cd7:	68 6d af 02 c0       	push   0xc002af6d
c0018cdc:	57                   	push   edi
c0018cdd:	e8 d2 7a fe ff       	call   c00007b4 <strcmp>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	85 c0                	test   eax,eax
c0018ce7:	74 48                	je     c0018d31 <CPU::detectFeatures()+0x24d>
c0018ce9:	eb 0f                	jmp    c0018cfa <CPU::detectFeatures()+0x216>
c0018ceb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cf5:	e9 c1 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018cfa:	50                   	push   eax
c0018cfb:	50                   	push   eax
c0018cfc:	68 7a af 02 c0       	push   0xc002af7a
c0018d01:	57                   	push   edi
c0018d02:	e8 ad 7a fe ff       	call   c00007b4 <strcmp>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	85 c0                	test   eax,eax
c0018d0c:	74 23                	je     c0018d31 <CPU::detectFeatures()+0x24d>
c0018d0e:	50                   	push   eax
c0018d0f:	50                   	push   eax
c0018d10:	68 87 af 02 c0       	push   0xc002af87
c0018d15:	57                   	push   edi
c0018d16:	e8 99 7a fe ff       	call   c00007b4 <strcmp>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	85 c0                	test   eax,eax
c0018d20:	75 1e                	jne    c0018d40 <CPU::detectFeatures()+0x25c>
c0018d22:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d2c:	e9 8a 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018d31:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d3b:	e9 7b 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018d40:	50                   	push   eax
c0018d41:	50                   	push   eax
c0018d42:	68 94 af 02 c0       	push   0xc002af94
c0018d47:	57                   	push   edi
c0018d48:	e8 67 7a fe ff       	call   c00007b4 <strcmp>
c0018d4d:	83 c4 10             	add    esp,0x10
c0018d50:	85 c0                	test   eax,eax
c0018d52:	75 0f                	jne    c0018d63 <CPU::detectFeatures()+0x27f>
c0018d54:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d5e:	e9 58 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018d63:	50                   	push   eax
c0018d64:	50                   	push   eax
c0018d65:	68 53 af 02 c0       	push   0xc002af53
c0018d6a:	57                   	push   edi
c0018d6b:	e8 44 7a fe ff       	call   c00007b4 <strcmp>
c0018d70:	83 c4 10             	add    esp,0x10
c0018d73:	85 c0                	test   eax,eax
c0018d75:	75 0f                	jne    c0018d86 <CPU::detectFeatures()+0x2a2>
c0018d77:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d81:	e9 35 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018d86:	50                   	push   eax
c0018d87:	50                   	push   eax
c0018d88:	68 a1 af 02 c0       	push   0xc002afa1
c0018d8d:	57                   	push   edi
c0018d8e:	e8 21 7a fe ff       	call   c00007b4 <strcmp>
c0018d93:	83 c4 10             	add    esp,0x10
c0018d96:	85 c0                	test   eax,eax
c0018d98:	75 0f                	jne    c0018da9 <CPU::detectFeatures()+0x2c5>
c0018d9a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018da4:	e9 12 01 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018da9:	51                   	push   ecx
c0018daa:	51                   	push   ecx
c0018dab:	68 ae af 02 c0       	push   0xc002afae
c0018db0:	57                   	push   edi
c0018db1:	e8 fe 79 fe ff       	call   c00007b4 <strcmp>
c0018db6:	83 c4 10             	add    esp,0x10
c0018db9:	85 c0                	test   eax,eax
c0018dbb:	75 0f                	jne    c0018dcc <CPU::detectFeatures()+0x2e8>
c0018dbd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018dc7:	e9 ef 00 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018dcc:	52                   	push   edx
c0018dcd:	52                   	push   edx
c0018dce:	68 bb af 02 c0       	push   0xc002afbb
c0018dd3:	57                   	push   edi
c0018dd4:	e8 db 79 fe ff       	call   c00007b4 <strcmp>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	85 c0                	test   eax,eax
c0018dde:	75 0f                	jne    c0018def <CPU::detectFeatures()+0x30b>
c0018de0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018dea:	e9 cc 00 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018def:	50                   	push   eax
c0018df0:	50                   	push   eax
c0018df1:	68 c8 af 02 c0       	push   0xc002afc8
c0018df6:	57                   	push   edi
c0018df7:	e8 b8 79 fe ff       	call   c00007b4 <strcmp>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	85 c0                	test   eax,eax
c0018e01:	75 0f                	jne    c0018e12 <CPU::detectFeatures()+0x32e>
c0018e03:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018e0d:	e9 a9 00 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018e12:	50                   	push   eax
c0018e13:	50                   	push   eax
c0018e14:	68 d5 af 02 c0       	push   0xc002afd5
c0018e19:	57                   	push   edi
c0018e1a:	e8 95 79 fe ff       	call   c00007b4 <strcmp>
c0018e1f:	83 c4 10             	add    esp,0x10
c0018e22:	85 c0                	test   eax,eax
c0018e24:	75 0f                	jne    c0018e35 <CPU::detectFeatures()+0x351>
c0018e26:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018e30:	e9 86 00 00 00       	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018e35:	50                   	push   eax
c0018e36:	50                   	push   eax
c0018e37:	68 e2 af 02 c0       	push   0xc002afe2
c0018e3c:	57                   	push   edi
c0018e3d:	e8 72 79 fe ff       	call   c00007b4 <strcmp>
c0018e42:	83 c4 10             	add    esp,0x10
c0018e45:	85 c0                	test   eax,eax
c0018e47:	75 0c                	jne    c0018e55 <CPU::detectFeatures()+0x371>
c0018e49:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e53:	eb 66                	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018e55:	50                   	push   eax
c0018e56:	50                   	push   eax
c0018e57:	68 ef af 02 c0       	push   0xc002afef
c0018e5c:	57                   	push   edi
c0018e5d:	e8 52 79 fe ff       	call   c00007b4 <strcmp>
c0018e62:	83 c4 10             	add    esp,0x10
c0018e65:	85 c0                	test   eax,eax
c0018e67:	75 0c                	jne    c0018e75 <CPU::detectFeatures()+0x391>
c0018e69:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e73:	eb 46                	jmp    c0018ebb <CPU::detectFeatures()+0x3d7>
c0018e75:	50                   	push   eax
c0018e76:	50                   	push   eax
c0018e77:	68 fc af 02 c0       	push   0xc002affc
c0018e7c:	57                   	push   edi
c0018e7d:	e8 32 79 fe ff       	call   c00007b4 <strcmp>
c0018e82:	83 c4 10             	add    esp,0x10
c0018e85:	85 c0                	test   eax,eax
c0018e87:	74 e0                	je     c0018e69 <CPU::detectFeatures()+0x385>
c0018e89:	50                   	push   eax
c0018e8a:	50                   	push   eax
c0018e8b:	68 09 b0 02 c0       	push   0xc002b009
c0018e90:	57                   	push   edi
c0018e91:	e8 1e 79 fe ff       	call   c00007b4 <strcmp>
c0018e96:	83 c4 10             	add    esp,0x10
c0018e99:	85 c0                	test   eax,eax
c0018e9b:	74 cc                	je     c0018e69 <CPU::detectFeatures()+0x385>
c0018e9d:	51                   	push   ecx
c0018e9e:	51                   	push   ecx
c0018e9f:	68 16 b0 02 c0       	push   0xc002b016
c0018ea4:	57                   	push   edi
c0018ea5:	e8 0a 79 fe ff       	call   c00007b4 <strcmp>
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	85 c0                	test   eax,eax
c0018eaf:	74 b8                	je     c0018e69 <CPU::detectFeatures()+0x385>
c0018eb1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018ebb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018ec0:	0f 86 be 00 00 00    	jbe    c0018f84 <CPU::detectFeatures()+0x4a0>
c0018ec6:	83 ec 0c             	sub    esp,0xc
c0018ec9:	68 80 00 00 00       	push   0x80
c0018ece:	e8 ab f8 ff ff       	call   c001877e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ed3:	83 e0 01             	and    eax,0x1
c0018ed6:	c1 e0 06             	shl    eax,0x6
c0018ed9:	88 c2                	mov    dl,al
c0018edb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ee1:	83 e0 bf             	and    eax,0xffffffbf
c0018ee4:	09 d0                	or     eax,edx
c0018ee6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eec:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ef3:	e8 86 f8 ff ff       	call   c001877e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ef8:	83 e0 01             	and    eax,0x1
c0018efb:	c1 e0 04             	shl    eax,0x4
c0018efe:	88 c2                	mov    dl,al
c0018f00:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f06:	83 e0 ef             	and    eax,0xffffffef
c0018f09:	09 d0                	or     eax,edx
c0018f0b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f11:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018f18:	e8 61 f8 ff ff       	call   c001877e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f1d:	c1 e0 07             	shl    eax,0x7
c0018f20:	88 c2                	mov    dl,al
c0018f22:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f28:	83 e0 7f             	and    eax,0x7f
c0018f2b:	09 d0                	or     eax,edx
c0018f2d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f33:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f3a:	e8 6d f8 ff ff       	call   c00187ac <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f3f:	83 e0 01             	and    eax,0x1
c0018f42:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f49:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f4f:	83 e0 f7             	and    eax,0xfffffff7
c0018f52:	09 d0                	or     eax,edx
c0018f54:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f5a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f61:	e8 46 f8 ff ff       	call   c00187ac <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f66:	83 c4 10             	add    esp,0x10
c0018f69:	83 e0 01             	and    eax,0x1
c0018f6c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f73:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f79:	83 e0 fb             	and    eax,0xfffffffb
c0018f7c:	09 d0                	or     eax,edx
c0018f7e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f84:	83 ec 0c             	sub    esp,0xc
c0018f87:	56                   	push   esi
c0018f88:	55                   	push   ebp
c0018f89:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f8d:	57                   	push   edi
c0018f8e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f92:	50                   	push   eax
c0018f93:	6a 01                	push   0x1
c0018f95:	e8 04 f7 ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f9a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f9e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018fa4:	88 ca                	mov    dl,cl
c0018fa6:	83 e0 f0             	and    eax,0xfffffff0
c0018fa9:	83 e2 0f             	and    edx,0xf
c0018fac:	09 d0                	or     eax,edx
c0018fae:	88 ca                	mov    dl,cl
c0018fb0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018fb6:	c0 ea 04             	shr    dl,0x4
c0018fb9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018fbd:	0f b6 c2             	movzx  eax,dl
c0018fc0:	83 c4 20             	add    esp,0x20
c0018fc3:	c1 e0 06             	shl    eax,0x6
c0018fc6:	89 c5                	mov    ebp,eax
c0018fc8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fce:	66 25 3f c0          	and    ax,0xc03f
c0018fd2:	09 e8                	or     eax,ebp
c0018fd4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fdb:	89 c8                	mov    eax,ecx
c0018fdd:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018fe3:	c1 e8 08             	shr    eax,0x8
c0018fe6:	83 e2 3f             	and    edx,0x3f
c0018fe9:	83 e0 0f             	and    eax,0xf
c0018fec:	89 c5                	mov    ebp,eax
c0018fee:	c1 e5 06             	shl    ebp,0x6
c0018ff1:	09 d5                	or     ebp,edx
c0018ff3:	89 ea                	mov    edx,ebp
c0018ff5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018ffb:	88 c2                	mov    dl,al
c0018ffd:	c0 ea 02             	shr    dl,0x2
c0019000:	89 d5                	mov    ebp,edx
c0019002:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019008:	83 e2 c0             	and    edx,0xffffffc0
c001900b:	09 d5                	or     ebp,edx
c001900d:	89 ea                	mov    edx,ebp
c001900f:	89 cd                	mov    ebp,ecx
c0019011:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019017:	c1 ed 0c             	shr    ebp,0xc
c001901a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019020:	83 e5 03             	and    ebp,0x3
c0019023:	83 e2 cf             	and    edx,0xffffffcf
c0019026:	c1 e5 04             	shl    ebp,0x4
c0019029:	09 d5                	or     ebp,edx
c001902b:	3c 06                	cmp    al,0x6
c001902d:	89 ea                	mov    edx,ebp
c001902f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019035:	74 04                	je     c001903b <CPU::detectFeatures()+0x557>
c0019037:	3c 0f                	cmp    al,0xf
c0019039:	75 5c                	jne    c0019097 <CPU::detectFeatures()+0x5b3>
c001903b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001903f:	89 cd                	mov    ebp,ecx
c0019041:	c1 ed 10             	shr    ebp,0x10
c0019044:	c1 e5 04             	shl    ebp,0x4
c0019047:	09 ea                	or     edx,ebp
c0019049:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001904f:	0f b6 d2             	movzx  edx,dl
c0019052:	66 81 e5 3f c0       	and    bp,0xc03f
c0019057:	c1 e2 06             	shl    edx,0x6
c001905a:	09 ea                	or     edx,ebp
c001905c:	3c 0f                	cmp    al,0xf
c001905e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019065:	75 30                	jne    c0019097 <CPU::detectFeatures()+0x5b3>
c0019067:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001906d:	c1 e9 14             	shr    ecx,0x14
c0019070:	83 e0 3f             	and    eax,0x3f
c0019073:	83 c1 0f             	add    ecx,0xf
c0019076:	88 ca                	mov    dl,cl
c0019078:	c0 e9 02             	shr    cl,0x2
c001907b:	c1 e2 06             	shl    edx,0x6
c001907e:	09 d0                	or     eax,edx
c0019080:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019086:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001908c:	83 e0 c0             	and    eax,0xffffffc0
c001908f:	09 c1                	or     ecx,eax
c0019091:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019097:	83 ec 0c             	sub    esp,0xc
c001909a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00190a1:	56                   	push   esi
c00190a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190a6:	50                   	push   eax
c00190a7:	57                   	push   edi
c00190a8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190ac:	55                   	push   ebp
c00190ad:	68 00 00 00 80       	push   0x80000000
c00190b2:	e8 e7 f5 ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b7:	83 c4 20             	add    esp,0x20
c00190ba:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00190c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190c6:	76 1e                	jbe    c00190e6 <CPU::detectFeatures()+0x602>
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	56                   	push   esi
c00190cc:	50                   	push   eax
c00190cd:	57                   	push   edi
c00190ce:	55                   	push   ebp
c00190cf:	68 01 00 00 80       	push   0x80000001
c00190d4:	e8 c5 f5 ff ff       	call   c001869e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190d9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190e3:	83 c4 20             	add    esp,0x20
c00190e6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190ec:	83 f8 01             	cmp    eax,0x1
c00190ef:	75 6f                	jne    c0019160 <CPU::detectFeatures()+0x67c>
c00190f1:	51                   	push   ecx
c00190f2:	51                   	push   ecx
c00190f3:	68 22 b0 02 c0       	push   0xc002b022
c00190f8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190fc:	56                   	push   esi
c00190fd:	e8 61 76 fe ff       	call   c0000763 <strcpy>
c0019102:	5f                   	pop    edi
c0019103:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019109:	5d                   	pop    ebp
c001910a:	66 c1 e8 06          	shr    ax,0x6
c001910e:	0f b6 c0             	movzx  eax,al
c0019111:	50                   	push   eax
c0019112:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019118:	c1 e8 0e             	shr    eax,0xe
c001911b:	0f b6 c0             	movzx  eax,al
c001911e:	50                   	push   eax
c001911f:	e8 24 f2 ff ff       	call   c0018348 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019124:	5a                   	pop    edx
c0019125:	59                   	pop    ecx
c0019126:	50                   	push   eax
c0019127:	56                   	push   esi
c0019128:	e8 ed 76 fe ff       	call   c000081a <strcat>
c001912d:	5f                   	pop    edi
c001912e:	5d                   	pop    ebp
c001912f:	56                   	push   esi
c0019130:	53                   	push   ebx
c0019131:	e8 c6 ad ff ff       	call   c0013efc <Device::setName(char const*)>
c0019136:	58                   	pop    eax
c0019137:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001913d:	5a                   	pop    edx
c001913e:	68 29 b0 02 c0       	push   0xc002b029
c0019143:	50                   	push   eax
c0019144:	e8 6b 76 fe ff       	call   c00007b4 <strcmp>
c0019149:	83 c4 10             	add    esp,0x10
c001914c:	85 c0                	test   eax,eax
c001914e:	0f 85 71 03 00 00    	jne    c00194c5 <CPU::detectFeatures()+0x9e1>
c0019154:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001915b:	e9 65 03 00 00       	jmp    c00194c5 <CPU::detectFeatures()+0x9e1>
c0019160:	83 f8 02             	cmp    eax,0x2
c0019163:	0f 85 b5 00 00 00    	jne    c001921e <CPU::detectFeatures()+0x73a>
c0019169:	57                   	push   edi
c001916a:	57                   	push   edi
c001916b:	68 3b b0 02 c0       	push   0xc002b03b
c0019170:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019174:	56                   	push   esi
c0019175:	e8 e9 75 fe ff       	call   c0000763 <strcpy>
c001917a:	5d                   	pop    ebp
c001917b:	58                   	pop    eax
c001917c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019182:	66 c1 e8 06          	shr    ax,0x6
c0019186:	0f b6 c0             	movzx  eax,al
c0019189:	50                   	push   eax
c001918a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019190:	c1 e8 0e             	shr    eax,0xe
c0019193:	0f b6 c0             	movzx  eax,al
c0019196:	50                   	push   eax
c0019197:	e8 18 f0 ff ff       	call   c00181b4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001919c:	5a                   	pop    edx
c001919d:	59                   	pop    ecx
c001919e:	50                   	push   eax
c001919f:	56                   	push   esi
c00191a0:	e8 75 76 fe ff       	call   c000081a <strcat>
c00191a5:	5f                   	pop    edi
c00191a6:	5d                   	pop    ebp
c00191a7:	56                   	push   esi
c00191a8:	53                   	push   ebx
c00191a9:	e8 4e ad ff ff       	call   c0013efc <Device::setName(char const*)>
c00191ae:	58                   	pop    eax
c00191af:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00191b5:	5a                   	pop    edx
c00191b6:	68 40 b0 02 c0       	push   0xc002b040
c00191bb:	50                   	push   eax
c00191bc:	e8 f3 75 fe ff       	call   c00007b4 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	75 20                	jne    c00191e8 <CPU::detectFeatures()+0x704>
c00191c8:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00191ce:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00191d4:	a8 01                	test   al,0x1
c00191d6:	74 10                	je     c00191e8 <CPU::detectFeatures()+0x704>
c00191d8:	83 e0 fe             	and    eax,0xfffffffe
c00191db:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191e1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ee:	c1 e8 0e             	shr    eax,0xe
c00191f1:	3c 05                	cmp    al,0x5
c00191f3:	0f 85 cc 02 00 00    	jne    c00194c5 <CPU::detectFeatures()+0x9e1>
c00191f9:	56                   	push   esi
c00191fa:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019200:	83 e0 0f             	and    eax,0xf
c0019203:	50                   	push   eax
c0019204:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001920a:	66 c1 e8 06          	shr    ax,0x6
c001920e:	0f b6 c0             	movzx  eax,al
c0019211:	50                   	push   eax
c0019212:	6a 05                	push   0x5
c0019214:	e8 11 f4 ff ff       	call   c001862a <CPU::AMD_K6_writeback(int, int, int)>
c0019219:	e9 1f 02 00 00       	jmp    c001943d <CPU::detectFeatures()+0x959>
c001921e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019221:	83 fa 01             	cmp    edx,0x1
c0019224:	76 09                	jbe    c001922f <CPU::detectFeatures()+0x74b>
c0019226:	83 f8 06             	cmp    eax,0x6
c0019229:	0f 85 91 01 00 00    	jne    c00193c0 <CPU::detectFeatures()+0x8dc>
c001922f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019235:	c1 ea 0e             	shr    edx,0xe
c0019238:	80 fa 05             	cmp    dl,0x5
c001923b:	75 7b                	jne    c00192b8 <CPU::detectFeatures()+0x7d4>
c001923d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019243:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019248:	66 81 fa 00 01       	cmp    dx,0x100
c001924d:	75 0c                	jne    c001925b <CPU::detectFeatures()+0x777>
c001924f:	51                   	push   ecx
c0019250:	51                   	push   ecx
c0019251:	68 47 b0 02 c0       	push   0xc002b047
c0019256:	e9 dc 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c001925b:	66 81 fa 00 02       	cmp    dx,0x200
c0019260:	75 0c                	jne    c001926e <CPU::detectFeatures()+0x78a>
c0019262:	52                   	push   edx
c0019263:	52                   	push   edx
c0019264:	68 5a b0 02 c0       	push   0xc002b05a
c0019269:	e9 c9 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c001926e:	66 81 fa 40 02       	cmp    dx,0x240
c0019273:	75 0c                	jne    c0019281 <CPU::detectFeatures()+0x79d>
c0019275:	50                   	push   eax
c0019276:	50                   	push   eax
c0019277:	68 6c b0 02 c0       	push   0xc002b06c
c001927c:	e9 b6 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019281:	83 f8 06             	cmp    eax,0x6
c0019284:	75 0c                	jne    c0019292 <CPU::detectFeatures()+0x7ae>
c0019286:	50                   	push   eax
c0019287:	50                   	push   eax
c0019288:	68 7e b0 02 c0       	push   0xc002b07e
c001928d:	e9 a5 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019292:	83 f8 04             	cmp    eax,0x4
c0019295:	75 0c                	jne    c00192a3 <CPU::detectFeatures()+0x7bf>
c0019297:	50                   	push   eax
c0019298:	50                   	push   eax
c0019299:	68 8a b0 02 c0       	push   0xc002b08a
c001929e:	e9 94 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00192a3:	83 f8 03             	cmp    eax,0x3
c00192a6:	0f 85 19 02 00 00    	jne    c00194c5 <CPU::detectFeatures()+0x9e1>
c00192ac:	50                   	push   eax
c00192ad:	50                   	push   eax
c00192ae:	68 92 b0 02 c0       	push   0xc002b092
c00192b3:	e9 7f 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00192b8:	80 fa 06             	cmp    dl,0x6
c00192bb:	0f 85 db 00 00 00    	jne    c001939c <CPU::detectFeatures()+0x8b8>
c00192c1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00192c7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00192cc:	66 81 fa 80 01       	cmp    dx,0x180
c00192d1:	75 0c                	jne    c00192df <CPU::detectFeatures()+0x7fb>
c00192d3:	50                   	push   eax
c00192d4:	50                   	push   eax
c00192d5:	68 9d b0 02 c0       	push   0xc002b09d
c00192da:	e9 58 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00192df:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192e5:	66 f7 c1 80 ff       	test   cx,0xff80
c00192ea:	75 0c                	jne    c00192f8 <CPU::detectFeatures()+0x814>
c00192ec:	50                   	push   eax
c00192ed:	50                   	push   eax
c00192ee:	68 ad b0 02 c0       	push   0xc002b0ad
c00192f3:	e9 3f 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00192f8:	66 81 fa 40 02       	cmp    dx,0x240
c00192fd:	75 0c                	jne    c001930b <CPU::detectFeatures()+0x827>
c00192ff:	55                   	push   ebp
c0019300:	55                   	push   ebp
c0019301:	68 b4 b0 02 c0       	push   0xc002b0b4
c0019306:	e9 2c 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c001930b:	66 81 fa 80 02       	cmp    dx,0x280
c0019310:	75 0c                	jne    c001931e <CPU::detectFeatures()+0x83a>
c0019312:	57                   	push   edi
c0019313:	57                   	push   edi
c0019314:	68 bd b0 02 c0       	push   0xc002b0bd
c0019319:	e9 19 01 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c001931e:	66 81 fa 40 03       	cmp    dx,0x340
c0019323:	74 ed                	je     c0019312 <CPU::detectFeatures()+0x82e>
c0019325:	66 81 fa c0 03       	cmp    dx,0x3c0
c001932a:	75 0c                	jne    c0019338 <CPU::detectFeatures()+0x854>
c001932c:	56                   	push   esi
c001932d:	56                   	push   esi
c001932e:	68 c4 b0 02 c0       	push   0xc002b0c4
c0019333:	e9 ff 00 00 00       	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019338:	83 f8 06             	cmp    eax,0x6
c001933b:	0f 84 45 ff ff ff    	je     c0019286 <CPU::detectFeatures()+0x7a2>
c0019341:	83 f8 04             	cmp    eax,0x4
c0019344:	0f 84 4d ff ff ff    	je     c0019297 <CPU::detectFeatures()+0x7b3>
c001934a:	83 f8 03             	cmp    eax,0x3
c001934d:	0f 85 72 01 00 00    	jne    c00194c5 <CPU::detectFeatures()+0x9e1>
c0019353:	51                   	push   ecx
c0019354:	51                   	push   ecx
c0019355:	68 cd b0 02 c0       	push   0xc002b0cd
c001935a:	53                   	push   ebx
c001935b:	e8 9c ab ff ff       	call   c0013efc <Device::setName(char const*)>
c0019360:	b1 c1                	mov    cl,0xc1
c0019362:	88 c8                	mov    al,cl
c0019364:	e6 22                	out    0x22,al
c0019366:	e4 23                	in     al,0x23
c0019368:	88 c2                	mov    dl,al
c001936a:	88 c8                	mov    al,cl
c001936c:	e6 22                	out    0x22,al
c001936e:	88 d0                	mov    al,dl
c0019370:	83 c8 10             	or     eax,0x10
c0019373:	e6 23                	out    0x23,al
c0019375:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001937c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001937f:	89 d0                	mov    eax,edx
c0019381:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019387:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001938b:	40                   	inc    eax
c001938c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019392:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019397:	e9 a1 00 00 00       	jmp    c001943d <CPU::detectFeatures()+0x959>
c001939c:	83 f8 06             	cmp    eax,0x6
c001939f:	0f 84 e1 fe ff ff    	je     c0019286 <CPU::detectFeatures()+0x7a2>
c00193a5:	83 f8 04             	cmp    eax,0x4
c00193a8:	0f 84 e9 fe ff ff    	je     c0019297 <CPU::detectFeatures()+0x7b3>
c00193ae:	83 f8 03             	cmp    eax,0x3
c00193b1:	0f 85 0e 01 00 00    	jne    c00194c5 <CPU::detectFeatures()+0x9e1>
c00193b7:	52                   	push   edx
c00193b8:	52                   	push   edx
c00193b9:	68 d8 b0 02 c0       	push   0xc002b0d8
c00193be:	eb 77                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00193c0:	83 f8 07             	cmp    eax,0x7
c00193c3:	75 09                	jne    c00193ce <CPU::detectFeatures()+0x8ea>
c00193c5:	50                   	push   eax
c00193c6:	50                   	push   eax
c00193c7:	68 e2 b0 02 c0       	push   0xc002b0e2
c00193cc:	eb 69                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00193ce:	83 f8 0a             	cmp    eax,0xa
c00193d1:	75 09                	jne    c00193dc <CPU::detectFeatures()+0x8f8>
c00193d3:	50                   	push   eax
c00193d4:	50                   	push   eax
c00193d5:	68 ed b0 02 c0       	push   0xc002b0ed
c00193da:	eb 5b                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00193dc:	83 f8 0b             	cmp    eax,0xb
c00193df:	75 09                	jne    c00193ea <CPU::detectFeatures()+0x906>
c00193e1:	50                   	push   eax
c00193e2:	50                   	push   eax
c00193e3:	68 f5 b0 02 c0       	push   0xc002b0f5
c00193e8:	eb 4d                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00193ea:	83 f8 08             	cmp    eax,0x8
c00193ed:	75 09                	jne    c00193f8 <CPU::detectFeatures()+0x914>
c00193ef:	50                   	push   eax
c00193f0:	50                   	push   eax
c00193f1:	68 fe b0 02 c0       	push   0xc002b0fe
c00193f6:	eb 3f                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c00193f8:	83 f8 09             	cmp    eax,0x9
c00193fb:	75 09                	jne    c0019406 <CPU::detectFeatures()+0x922>
c00193fd:	50                   	push   eax
c00193fe:	50                   	push   eax
c00193ff:	68 06 b1 02 c0       	push   0xc002b106
c0019404:	eb 31                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019406:	83 f8 05             	cmp    eax,0x5
c0019409:	75 09                	jne    c0019414 <CPU::detectFeatures()+0x930>
c001940b:	50                   	push   eax
c001940c:	50                   	push   eax
c001940d:	68 0e b1 02 c0       	push   0xc002b10e
c0019412:	eb 23                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019414:	83 f8 0c             	cmp    eax,0xc
c0019417:	75 09                	jne    c0019422 <CPU::detectFeatures()+0x93e>
c0019419:	55                   	push   ebp
c001941a:	55                   	push   ebp
c001941b:	68 1c b1 02 c0       	push   0xc002b11c
c0019420:	eb 15                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019422:	83 f8 0d             	cmp    eax,0xd
c0019425:	75 09                	jne    c0019430 <CPU::detectFeatures()+0x94c>
c0019427:	57                   	push   edi
c0019428:	57                   	push   edi
c0019429:	68 27 b1 02 c0       	push   0xc002b127
c001942e:	eb 07                	jmp    c0019437 <CPU::detectFeatures()+0x953>
c0019430:	56                   	push   esi
c0019431:	56                   	push   esi
c0019432:	68 3b b1 02 c0       	push   0xc002b13b
c0019437:	53                   	push   ebx
c0019438:	e8 bf aa ff ff       	call   c0013efc <Device::setName(char const*)>
c001943d:	83 c4 10             	add    esp,0x10
c0019440:	e9 80 00 00 00       	jmp    c00194c5 <CPU::detectFeatures()+0x9e1>
c0019445:	51                   	push   ecx
c0019446:	51                   	push   ecx
c0019447:	68 87 af 02 c0       	push   0xc002af87
c001944c:	57                   	push   edi
c001944d:	e8 11 73 fe ff       	call   c0000763 <strcpy>
c0019452:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001945c:	e8 4d 6e fe ff       	call   c00002ae <is486>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	85 c0                	test   eax,eax
c0019466:	74 2b                	je     c0019493 <CPU::detectFeatures()+0x9af>
c0019468:	52                   	push   edx
c0019469:	52                   	push   edx
c001946a:	68 47 b1 02 c0       	push   0xc002b147
c001946f:	53                   	push   ebx
c0019470:	e8 87 aa ff ff       	call   c0013efc <Device::setName(char const*)>
c0019475:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001947c:	0f 20 c0             	mov    eax,cr0
c001947f:	83 e0 14             	and    eax,0x14
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	83 f8 04             	cmp    eax,0x4
c0019488:	75 1f                	jne    c00194a9 <CPU::detectFeatures()+0x9c5>
c001948a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019491:	eb 32                	jmp    c00194c5 <CPU::detectFeatures()+0x9e1>
c0019493:	50                   	push   eax
c0019494:	50                   	push   eax
c0019495:	68 52 b1 02 c0       	push   0xc002b152
c001949a:	53                   	push   ebx
c001949b:	e8 5c aa ff ff       	call   c0013efc <Device::setName(char const*)>
c00194a0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00194a7:	eb d3                	jmp    c001947c <CPU::detectFeatures()+0x998>
c00194a9:	e8 db 6d fe ff       	call   c0000289 <hasLegacyFPU>
c00194ae:	83 e0 01             	and    eax,0x1
c00194b1:	8d 14 00             	lea    edx,[eax+eax*1]
c00194b4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194ba:	83 e0 fd             	and    eax,0xfffffffd
c00194bd:	09 d0                	or     eax,edx
c00194bf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194c5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00194cc:	83 c4 4c             	add    esp,0x4c
c00194cf:	5b                   	pop    ebx
c00194d0:	5e                   	pop    esi
c00194d1:	5f                   	pop    edi
c00194d2:	5d                   	pop    ebp
c00194d3:	c3                   	ret    

c00194d4 <CPU::setupSMEP()>:
c00194d4:	0f 20 e0             	mov    eax,cr4
c00194d7:	0d 00 00 10 00       	or     eax,0x100000
c00194dc:	0f 22 e0             	mov    cr4,eax
c00194df:	c3                   	ret    

c00194e0 <CPU::setupUMIP()>:
c00194e0:	0f 20 e0             	mov    eax,cr4
c00194e3:	80 cc 08             	or     ah,0x8
c00194e6:	0f 22 e0             	mov    cr4,eax
c00194e9:	c3                   	ret    

c00194ea <CPU::setupTSC()>:
c00194ea:	0f 20 e0             	mov    eax,cr4
c00194ed:	83 c8 04             	or     eax,0x4
c00194f0:	0f 22 e0             	mov    cr4,eax
c00194f3:	c3                   	ret    

c00194f4 <CPU::setupLargePages()>:
c00194f4:	0f 20 e0             	mov    eax,cr4
c00194f7:	83 c8 10             	or     eax,0x10
c00194fa:	0f 22 e0             	mov    cr4,eax
c00194fd:	c3                   	ret    

c00194fe <CPU::setupPAT()>:
c00194fe:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0019503:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001950a:	74 2c                	je     c0019538 <CPU::setupPAT()+0x3a>
c001950c:	53                   	push   ebx
c001950d:	83 ec 10             	sub    esp,0x10
c0019510:	68 77 02 00 00       	push   0x277
c0019515:	50                   	push   eax
c0019516:	e8 b1 56 ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c001951b:	83 e2 f8             	and    edx,0xfffffff8
c001951e:	83 ca 01             	or     edx,0x1
c0019521:	52                   	push   edx
c0019522:	50                   	push   eax
c0019523:	68 77 02 00 00       	push   0x277
c0019528:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001952e:	e8 c5 56 ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019533:	83 c4 28             	add    esp,0x28
c0019536:	5b                   	pop    ebx
c0019537:	c3                   	ret    
c0019538:	c3                   	ret    
c0019539:	90                   	nop

c001953a <CPU::setupMTRR()>:
c001953a:	c3                   	ret    
c001953b:	90                   	nop

c001953c <CPU::setupGlobalPages()>:
c001953c:	0f 20 e0             	mov    eax,cr4
c001953f:	0c 80                	or     al,0x80
c0019541:	0f 22 e0             	mov    cr4,eax
c0019544:	c3                   	ret    
c0019545:	90                   	nop

c0019546 <CPU::allowUsermodeDataAccess()>:
c0019546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001954a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019551:	74 03                	je     c0019556 <CPU::allowUsermodeDataAccess()+0x10>
c0019553:	0f 01 cb             	stac   
c0019556:	c3                   	ret    
c0019557:	90                   	nop

c0019558 <CPU::prohibitUsermodeDataAccess()>:
c0019558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001955c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019563:	74 03                	je     c0019568 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019565:	0f 01 ca             	clac   
c0019568:	c3                   	ret    
c0019569:	90                   	nop

c001956a <CPU::setupSMAP()>:
c001956a:	0f 20 e0             	mov    eax,cr4
c001956d:	0d 00 00 20 00       	or     eax,0x200000
c0019572:	0f 22 e0             	mov    cr4,eax
c0019575:	eb e1                	jmp    c0019558 <CPU::prohibitUsermodeDataAccess()>
c0019577:	90                   	nop

c0019578 <CPU::setupFeatures()>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001957f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019586:	74 07                	je     c001958f <CPU::setupFeatures()+0x17>
c0019588:	52                   	push   edx
c0019589:	e8 46 ff ff ff       	call   c00194d4 <CPU::setupSMEP()>
c001958e:	58                   	pop    eax
c001958f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019596:	74 07                	je     c001959f <CPU::setupFeatures()+0x27>
c0019598:	52                   	push   edx
c0019599:	e8 cc ff ff ff       	call   c001956a <CPU::setupSMAP()>
c001959e:	58                   	pop    eax
c001959f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00195a6:	74 07                	je     c00195af <CPU::setupFeatures()+0x37>
c00195a8:	52                   	push   edx
c00195a9:	e8 32 ff ff ff       	call   c00194e0 <CPU::setupUMIP()>
c00195ae:	58                   	pop    eax
c00195af:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00195b6:	74 07                	je     c00195bf <CPU::setupFeatures()+0x47>
c00195b8:	52                   	push   edx
c00195b9:	e8 2c ff ff ff       	call   c00194ea <CPU::setupTSC()>
c00195be:	58                   	pop    eax
c00195bf:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00195c6:	74 07                	je     c00195cf <CPU::setupFeatures()+0x57>
c00195c8:	52                   	push   edx
c00195c9:	e8 26 ff ff ff       	call   c00194f4 <CPU::setupLargePages()>
c00195ce:	59                   	pop    ecx
c00195cf:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00195d6:	74 07                	je     c00195df <CPU::setupFeatures()+0x67>
c00195d8:	52                   	push   edx
c00195d9:	e8 5e ff ff ff       	call   c001953c <CPU::setupGlobalPages()>
c00195de:	58                   	pop    eax
c00195df:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195e6:	74 0c                	je     c00195f4 <CPU::setupFeatures()+0x7c>
c00195e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195ec:	83 c4 0c             	add    esp,0xc
c00195ef:	e9 0a ff ff ff       	jmp    c00194fe <CPU::setupPAT()>
c00195f4:	83 c4 0c             	add    esp,0xc
c00195f7:	c3                   	ret    

c00195f8 <CPU::open(int, int, void*)>:
c00195f8:	57                   	push   edi
c00195f9:	56                   	push   esi
c00195fa:	53                   	push   ebx
c00195fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019603:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019612:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019618:	50                   	push   eax
c0019619:	e8 9a 58 ff ff       	call   c000eeb8 <GDT::setup()>
c001961e:	83 c4 0c             	add    esp,0xc
c0019621:	6a 00                	push   0x0
c0019623:	68 ef be ad de       	push   0xdeadbeef
c0019628:	57                   	push   edi
c0019629:	e8 46 7c ff ff       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c001962e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019631:	e8 1e 7c ff ff       	call   c0011254 <TSS::flush()>
c0019636:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001963c:	89 04 24             	mov    DWORD PTR [esp],eax
c001963f:	e8 d0 5a ff ff       	call   c000f114 <IDT::setup()>
c0019644:	b8 00 04 00 00       	mov    eax,0x400
c0019649:	0f 23 f8             	mov    db7,eax
c001964c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019656:	e8 66 66 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001965b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019661:	89 30                	mov    DWORD PTR [eax],esi
c0019663:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019669:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001966c:	58                   	pop    eax
c001966d:	5a                   	pop    edx
c001966e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019674:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019678:	e8 29 8c ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c001967d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019680:	e8 5f f4 ff ff       	call   c0018ae4 <CPU::detectFeatures()>
c0019685:	e8 3b bc ff ff       	call   c00152c5 <setupInterruptController()>
c001968a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019690:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c0019695:	83 e0 10             	and    eax,0x10
c0019698:	83 f8 01             	cmp    eax,0x1
c001969b:	19 c0                	sbb    eax,eax
c001969d:	83 e0 46             	and    eax,0x46
c00196a0:	83 c0 1e             	add    eax,0x1e
c00196a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00196a6:	e8 f9 d0 ff ff       	call   c00167a4 <setupTimer(int)>
c00196ab:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00196b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196b4:	e8 bf fe ff ff       	call   c0019578 <CPU::setupFeatures()>
c00196b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196bc:	e8 a7 f1 ff ff       	call   c0018868 <CPU::displayFeatures()>
c00196c1:	83 c4 10             	add    esp,0x10
c00196c4:	31 c0                	xor    eax,eax
c00196c6:	5b                   	pop    ebx
c00196c7:	5e                   	pop    esi
c00196c8:	5f                   	pop    edi
c00196c9:	c3                   	ret    

c00196ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00196ca:	57                   	push   edi
c00196cb:	56                   	push   esi
c00196cc:	53                   	push   ebx
c00196cd:	51                   	push   ecx
c00196ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00196d2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00196d5:	0f 02 c0             	lar    eax,ax
c00196d8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00196db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196df:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196e2:	88 ca                	mov    dl,cl
c00196e4:	c0 ea 06             	shr    dl,0x6
c00196e7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196eb:	89 ca                	mov    edx,ecx
c00196ed:	66 c1 ea 03          	shr    dx,0x3
c00196f1:	83 e2 07             	and    edx,0x7
c00196f4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196f9:	88 17                	mov    BYTE PTR [edi],dl
c00196fb:	0f 84 a6 01 00 00    	je     c00198a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019701:	83 e1 07             	and    ecx,0x7
c0019704:	80 f9 04             	cmp    cl,0x4
c0019707:	0f 84 98 00 00 00    	je     c00197a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001970d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019712:	0f 95 c0             	setne  al
c0019715:	80 f9 05             	cmp    cl,0x5
c0019718:	0f 95 c2             	setne  dl
c001971b:	08 c2                	or     dl,al
c001971d:	74 79                	je     c0019798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001971f:	84 c9                	test   cl,cl
c0019721:	75 05                	jne    c0019728 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019723:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019726:	eb 3c                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019728:	80 f9 01             	cmp    cl,0x1
c001972b:	75 05                	jne    c0019732 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001972d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019730:	eb 32                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019732:	80 f9 02             	cmp    cl,0x2
c0019735:	75 05                	jne    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019737:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001973a:	eb 28                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001973c:	31 c0                	xor    eax,eax
c001973e:	80 f9 03             	cmp    cl,0x3
c0019741:	75 05                	jne    c0019748 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019743:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019746:	eb 1c                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019748:	80 f9 05             	cmp    cl,0x5
c001974b:	75 05                	jne    c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001974d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019750:	eb 12                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019752:	80 f9 06             	cmp    cl,0x6
c0019755:	75 05                	jne    c001975c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019757:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001975a:	eb 08                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001975c:	80 f9 07             	cmp    cl,0x7
c001975f:	75 03                	jne    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019761:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019764:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019769:	75 10                	jne    c001977b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001976b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001976f:	b9 03 00 00 00       	mov    ecx,0x3
c0019774:	01 d0                	add    eax,edx
c0019776:	e9 37 01 00 00       	jmp    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001977b:	b9 02 00 00 00       	mov    ecx,0x2
c0019780:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019785:	0f 85 27 01 00 00    	jne    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001978b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001978e:	b9 06 00 00 00       	mov    ecx,0x6
c0019793:	e9 1a 01 00 00       	jmp    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019798:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001979b:	b9 06 00 00 00       	mov    ecx,0x6
c00197a0:	e9 0f 01 00 00       	jmp    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197a5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00197a8:	88 ca                	mov    dl,cl
c00197aa:	c0 ea 06             	shr    dl,0x6
c00197ad:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00197b1:	89 ca                	mov    edx,ecx
c00197b3:	66 c1 ea 03          	shr    dx,0x3
c00197b7:	83 e2 07             	and    edx,0x7
c00197ba:	80 e1 07             	and    cl,0x7
c00197bd:	75 05                	jne    c00197c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00197bf:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00197c2:	eb 4c                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c4:	80 f9 01             	cmp    cl,0x1
c00197c7:	75 05                	jne    c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00197c9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00197cc:	eb 42                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197ce:	80 f9 02             	cmp    cl,0x2
c00197d1:	75 05                	jne    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00197d3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00197d6:	eb 38                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197d8:	80 f9 03             	cmp    cl,0x3
c00197db:	75 05                	jne    c00197e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00197dd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197e0:	eb 2e                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197e2:	80 f9 04             	cmp    cl,0x4
c00197e5:	75 12                	jne    c00197f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197e7:	f6 c4 60             	test   ah,0x60
c00197ea:	75 08                	jne    c00197f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197ec:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197ef:	8d 78 14             	lea    edi,[eax+0x14]
c00197f2:	eb 1c                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197f4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197f7:	eb 17                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197f9:	80 f9 05             	cmp    cl,0x5
c00197fc:	75 05                	jne    c0019803 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197fe:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019801:	eb 0d                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019803:	80 f9 06             	cmp    cl,0x6
c0019806:	75 05                	jne    c001980d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019808:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001980b:	eb 03                	jmp    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001980d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019810:	84 d2                	test   dl,dl
c0019812:	75 05                	jne    c0019819 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019814:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019817:	eb 3c                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019819:	80 fa 01             	cmp    dl,0x1
c001981c:	75 05                	jne    c0019823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001981e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019821:	eb 32                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019823:	80 fa 02             	cmp    dl,0x2
c0019826:	75 05                	jne    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019828:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001982b:	eb 28                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001982d:	80 fa 03             	cmp    dl,0x3
c0019830:	75 05                	jne    c0019837 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019832:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019835:	eb 1e                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019837:	31 c0                	xor    eax,eax
c0019839:	80 fa 04             	cmp    dl,0x4
c001983c:	74 17                	je     c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001983e:	80 fa 05             	cmp    dl,0x5
c0019841:	75 05                	jne    c0019848 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019843:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019846:	eb 0d                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019848:	80 fa 06             	cmp    dl,0x6
c001984b:	75 05                	jne    c0019852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001984d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019850:	eb 03                	jmp    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019852:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019855:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001985a:	0f 94 c2             	sete   dl
c001985d:	80 f9 05             	cmp    cl,0x5
c0019860:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019864:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019869:	d3 e0                	shl    eax,cl
c001986b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001986f:	74 0a                	je     c001987b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019871:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019874:	b9 07 00 00 00       	mov    ecx,0x7
c0019879:	eb 37                	jmp    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001987b:	01 f8                	add    eax,edi
c001987d:	b9 03 00 00 00       	mov    ecx,0x3
c0019882:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019887:	74 2b                	je     c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019889:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001988e:	75 0d                	jne    c001989d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019890:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019894:	01 c8                	add    eax,ecx
c0019896:	b9 04 00 00 00       	mov    ecx,0x4
c001989b:	eb 17                	jmp    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001989d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00198a0:	b9 07 00 00 00       	mov    ecx,0x7
c00198a5:	eb 0d                	jmp    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198a7:	b9 02 00 00 00       	mov    ecx,0x2
c00198ac:	b2 01                	mov    dl,0x1
c00198ae:	31 c0                	xor    eax,eax
c00198b0:	eb 02                	jmp    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198b2:	31 d2                	xor    edx,edx
c00198b4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198b8:	89 0b                	mov    DWORD PTR [ebx],ecx
c00198ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00198be:	88 11                	mov    BYTE PTR [ecx],dl
c00198c0:	5a                   	pop    edx
c00198c1:	5b                   	pop    ebx
c00198c2:	5e                   	pop    esi
c00198c3:	5f                   	pop    edi
c00198c4:	c3                   	ret    
c00198c5:	90                   	nop

c00198c6 <EnvVarContainer::getEnv(char const*)>:
c00198c6:	57                   	push   edi
c00198c7:	56                   	push   esi
c00198c8:	53                   	push   ebx
c00198c9:	31 db                	xor    ebx,ebx
c00198cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198cf:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198d1:	7e 2b                	jle    c00198fe <EnvVarContainer::getEnv(char const*)+0x38>
c00198d3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198da:	50                   	push   eax
c00198db:	50                   	push   eax
c00198dc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198e6:	e8 c9 6e fe ff       	call   c00007b4 <strcmp>
c00198eb:	83 c4 10             	add    esp,0x10
c00198ee:	85 c0                	test   eax,eax
c00198f0:	75 09                	jne    c00198fb <EnvVarContainer::getEnv(char const*)+0x35>
c00198f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198f5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198f9:	eb 05                	jmp    c0019900 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198fb:	43                   	inc    ebx
c00198fc:	eb d1                	jmp    c00198cf <EnvVarContainer::getEnv(char const*)+0x9>
c00198fe:	31 c0                	xor    eax,eax
c0019900:	5b                   	pop    ebx
c0019901:	5e                   	pop    esi
c0019902:	5f                   	pop    edi
c0019903:	c3                   	ret    

c0019904 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019904:	57                   	push   edi
c0019905:	56                   	push   esi
c0019906:	53                   	push   ebx
c0019907:	83 ec 1c             	sub    esp,0x1c
c001990a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001990e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019912:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019916:	57                   	push   edi
c0019917:	e8 c5 6d fe ff       	call   c00006e1 <strlen>
c001991c:	40                   	inc    eax
c001991d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019920:	e8 ff 5c ff ff       	call   c000f624 <malloc>
c0019925:	89 34 24             	mov    DWORD PTR [esp],esi
c0019928:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001992c:	e8 b0 6d fe ff       	call   c00006e1 <strlen>
c0019931:	40                   	inc    eax
c0019932:	89 04 24             	mov    DWORD PTR [esp],eax
c0019935:	e8 ea 5c ff ff       	call   c000f624 <malloc>
c001993a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001993d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019941:	e8 9b 6d fe ff       	call   c00006e1 <strlen>
c0019946:	83 c4 0c             	add    esp,0xc
c0019949:	40                   	inc    eax
c001994a:	50                   	push   eax
c001994b:	6a 00                	push   0x0
c001994d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019951:	e8 6e 6d fe ff       	call   c00006c4 <memset>
c0019956:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019959:	e8 83 6d fe ff       	call   c00006e1 <strlen>
c001995e:	83 c4 0c             	add    esp,0xc
c0019961:	40                   	inc    eax
c0019962:	50                   	push   eax
c0019963:	57                   	push   edi
c0019964:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019968:	e8 33 6d fe ff       	call   c00006a0 <memcpy>
c001996d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019970:	e8 6c 6d fe ff       	call   c00006e1 <strlen>
c0019975:	83 c4 0c             	add    esp,0xc
c0019978:	40                   	inc    eax
c0019979:	50                   	push   eax
c001997a:	6a 00                	push   0x0
c001997c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019980:	e8 3f 6d fe ff       	call   c00006c4 <memset>
c0019985:	89 34 24             	mov    DWORD PTR [esp],esi
c0019988:	e8 54 6d fe ff       	call   c00006e1 <strlen>
c001998d:	83 c4 0c             	add    esp,0xc
c0019990:	40                   	inc    eax
c0019991:	50                   	push   eax
c0019992:	56                   	push   esi
c0019993:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019997:	e8 04 6d fe ff       	call   c00006a0 <memcpy>
c001999c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001999e:	40                   	inc    eax
c001999f:	89 03                	mov    DWORD PTR [ebx],eax
c00199a1:	c1 e0 03             	shl    eax,0x3
c00199a4:	5a                   	pop    edx
c00199a5:	59                   	pop    ecx
c00199a6:	50                   	push   eax
c00199a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00199aa:	e8 61 5c ff ff       	call   c000f610 <realloc>
c00199af:	83 c4 0c             	add    esp,0xc
c00199b2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00199b5:	6a 08                	push   0x8
c00199b7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00199bb:	52                   	push   edx
c00199bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00199be:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00199c2:	50                   	push   eax
c00199c3:	e8 d8 6c fe ff       	call   c00006a0 <memcpy>
c00199c8:	83 c4 20             	add    esp,0x20
c00199cb:	5b                   	pop    ebx
c00199cc:	5e                   	pop    esi
c00199cd:	5f                   	pop    edi
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <EnvVarContainer::deleteEnv(char const*)>:
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199d2:	55                   	push   ebp
c00199d3:	57                   	push   edi
c00199d4:	56                   	push   esi
c00199d5:	53                   	push   ebx
c00199d6:	81 ec 38 01 00 00    	sub    esp,0x138
c00199dc:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00199e3:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00199ea:	68 14 01 00 00       	push   0x114
c00199ef:	e8 30 5c ff ff       	call   c000f624 <malloc>
c00199f4:	83 c4 0c             	add    esp,0xc
c00199f7:	89 c7                	mov    edi,eax
c00199f9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00199fc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a03:	50                   	push   eax
c0019a04:	e8 43 94 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0019a09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a0c:	e8 0d 97 ff ff       	call   c001311e <File::exists()>
c0019a11:	83 c4 10             	add    esp,0x10
c0019a14:	84 c0                	test   al,al
c0019a16:	75 31                	jne    c0019a49 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a18:	51                   	push   ecx
c0019a19:	51                   	push   ecx
c0019a1a:	6a 12                	push   0x12
c0019a1c:	57                   	push   edi
c0019a1d:	e8 8e 94 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c0019a22:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a24:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019a27:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019a2a:	e8 b2 6c fe ff       	call   c00006e1 <strlen>
c0019a2f:	5a                   	pop    edx
c0019a30:	31 d2                	xor    edx,edx
c0019a32:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a36:	51                   	push   ecx
c0019a37:	55                   	push   ebp
c0019a38:	52                   	push   edx
c0019a39:	50                   	push   eax
c0019a3a:	57                   	push   edi
c0019a3b:	ff d3                	call   ebx
c0019a3d:	83 c4 14             	add    esp,0x14
c0019a40:	57                   	push   edi
c0019a41:	e8 c8 94 ff ff       	call   c0012f0e <File::close()>
c0019a46:	83 c4 10             	add    esp,0x10
c0019a49:	31 db                	xor    ebx,ebx
c0019a4b:	50                   	push   eax
c0019a4c:	31 ed                	xor    ebp,ebp
c0019a4e:	68 00 01 00 00       	push   0x100
c0019a53:	6a 00                	push   0x0
c0019a55:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a59:	50                   	push   eax
c0019a5a:	e8 65 6c fe ff       	call   c00006c4 <memset>
c0019a5f:	58                   	pop    eax
c0019a60:	5a                   	pop    edx
c0019a61:	6a 01                	push   0x1
c0019a63:	57                   	push   edi
c0019a64:	e8 47 94 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a71:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a75:	51                   	push   ecx
c0019a76:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a7a:	52                   	push   edx
c0019a7b:	6a 00                	push   0x0
c0019a7d:	6a 01                	push   0x1
c0019a7f:	57                   	push   edi
c0019a80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a83:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a87:	83 c4 20             	add    esp,0x20
c0019a8a:	3c 0d                	cmp    al,0xd
c0019a8c:	0f 84 12 01 00 00    	je     c0019ba4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019a92:	85 db                	test   ebx,ebx
c0019a94:	0f 84 fd 00 00 00    	je     c0019b97 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a9a:	3c 0a                	cmp    al,0xa
c0019a9c:	74 13                	je     c0019ab1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a9e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019aa3:	74 0c                	je     c0019ab1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019aa5:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019aab:	0f 8e e6 00 00 00    	jle    c0019b97 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019ab1:	83 ec 0c             	sub    esp,0xc
c0019ab4:	8d 53 01             	lea    edx,[ebx+0x1]
c0019ab7:	29 dd                	sub    ebp,ebx
c0019ab9:	52                   	push   edx
c0019aba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019abe:	e8 61 5b ff ff       	call   c000f624 <malloc>
c0019ac3:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019ac6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019aca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019acd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019ad1:	e8 4e 5b ff ff       	call   c000f624 <malloc>
c0019ad6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ada:	83 c4 0c             	add    esp,0xc
c0019add:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ae1:	52                   	push   edx
c0019ae2:	6a 00                	push   0x0
c0019ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ae8:	e8 d7 6b fe ff       	call   c00006c4 <memset>
c0019aed:	83 c4 0c             	add    esp,0xc
c0019af0:	53                   	push   ebx
c0019af1:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019af5:	55                   	push   ebp
c0019af6:	01 eb                	add    ebx,ebp
c0019af8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019afc:	e8 9f 6b fe ff       	call   c00006a0 <memcpy>
c0019b01:	83 c4 0c             	add    esp,0xc
c0019b04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b08:	51                   	push   ecx
c0019b09:	6a 00                	push   0x0
c0019b0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b0f:	e8 b0 6b fe ff       	call   c00006c4 <memset>
c0019b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b17:	e8 c5 6b fe ff       	call   c00006e1 <strlen>
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	50                   	push   eax
c0019b20:	53                   	push   ebx
c0019b21:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b25:	e8 76 6b fe ff       	call   c00006a0 <memcpy>
c0019b2a:	5b                   	pop    ebx
c0019b2b:	58                   	pop    eax
c0019b2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b30:	68 8c b1 02 c0       	push   0xc002b18c
c0019b35:	e8 b9 8d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019b3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0019b3c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019b3f:	40                   	inc    eax
c0019b40:	83 c4 10             	add    esp,0x10
c0019b43:	89 06                	mov    DWORD PTR [esi],eax
c0019b45:	85 d2                	test   edx,edx
c0019b47:	75 0c                	jne    c0019b55 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019b49:	83 ec 0c             	sub    esp,0xc
c0019b4c:	6a 08                	push   0x8
c0019b4e:	e8 d1 5a ff ff       	call   c000f624 <malloc>
c0019b53:	eb 0c                	jmp    c0019b61 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019b55:	c1 e0 03             	shl    eax,0x3
c0019b58:	51                   	push   ecx
c0019b59:	51                   	push   ecx
c0019b5a:	50                   	push   eax
c0019b5b:	52                   	push   edx
c0019b5c:	e8 af 5a ff ff       	call   c000f610 <realloc>
c0019b61:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	31 db                	xor    ebx,ebx
c0019b69:	52                   	push   edx
c0019b6a:	6a 08                	push   0x8
c0019b6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b70:	50                   	push   eax
c0019b71:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b73:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019b76:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b7a:	50                   	push   eax
c0019b7b:	e8 20 6b fe ff       	call   c00006a0 <memcpy>
c0019b80:	83 c4 0c             	add    esp,0xc
c0019b83:	68 00 01 00 00       	push   0x100
c0019b88:	6a 00                	push   0x0
c0019b8a:	55                   	push   ebp
c0019b8b:	31 ed                	xor    ebp,ebp
c0019b8d:	e8 32 6b fe ff       	call   c00006c4 <memset>
c0019b92:	83 c4 10             	add    esp,0x10
c0019b95:	eb 0d                	jmp    c0019ba4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b97:	3c 3d                	cmp    al,0x3d
c0019b99:	74 07                	je     c0019ba2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019b9b:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019b9f:	45                   	inc    ebp
c0019ba0:	eb 02                	jmp    c0019ba4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019ba2:	89 eb                	mov    ebx,ebp
c0019ba4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ba9:	0f 85 bd fe ff ff    	jne    c0019a6c <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019baf:	50                   	push   eax
c0019bb0:	50                   	push   eax
c0019bb1:	ff 36                	push   DWORD PTR [esi]
c0019bb3:	68 9a b1 02 c0       	push   0xc002b19a
c0019bb8:	e8 36 8d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019bbd:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019bc3:	5b                   	pop    ebx
c0019bc4:	5e                   	pop    esi
c0019bc5:	5f                   	pop    edi
c0019bc6:	5d                   	pop    ebp
c0019bc7:	c3                   	ret    

c0019bc8 <EnvVarContainer::__loadSystem()>:
c0019bc8:	83 ec 10             	sub    esp,0x10
c0019bcb:	68 00 d0 02 c0       	push   0xc002d000
c0019bd0:	68 c5 b1 02 c0       	push   0xc002b1c5
c0019bd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bd9:	e8 f4 fd ff ff       	call   c00199d2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bde:	83 c4 1c             	add    esp,0x1c
c0019be1:	c3                   	ret    

c0019be2 <EnvVarContainer::__loadUser()>:
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c04:	90                   	nop
c0019c05:	c3                   	ret    

c0019c06 <EnvVarContainer::~EnvVarContainer()>:
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c10:	85 c0                	test   eax,eax
c0019c12:	74 1d                	je     c0019c31 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c1a:	85 c0                	test   eax,eax
c0019c1c:	74 13                	je     c0019c31 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	50                   	push   eax
c0019c29:	e8 06 5a ff ff       	call   c000f634 <free>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	90                   	nop
c0019c32:	83 c4 0c             	add    esp,0xc
c0019c35:	c3                   	ret    

c0019c36 <Krnl::getEnv(Process*, char const*)>:
c0019c36:	53                   	push   ebx
c0019c37:	83 ec 08             	sub    esp,0x8
c0019c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c42:	39 05 34 00 03 c0    	cmp    DWORD PTR ds:0xc0030034,eax
c0019c48:	74 04                	je     c0019c4e <Krnl::getEnv(Process*, char const*)+0x18>
c0019c4a:	85 c0                	test   eax,eax
c0019c4c:	75 0b                	jne    c0019c59 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c4e:	a1 10 f6 02 c0       	mov    eax,ds:0xc002f610
c0019c53:	85 c0                	test   eax,eax
c0019c55:	75 19                	jne    c0019c70 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c57:	eb 27                	jmp    c0019c80 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c59:	52                   	push   edx
c0019c5a:	52                   	push   edx
c0019c5b:	53                   	push   ebx
c0019c5c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c62:	e8 5f fc ff ff       	call   c00198c6 <EnvVarContainer::getEnv(char const*)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	85 c0                	test   eax,eax
c0019c6c:	75 28                	jne    c0019c96 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c6e:	eb de                	jmp    c0019c4e <Krnl::getEnv(Process*, char const*)+0x18>
c0019c70:	52                   	push   edx
c0019c71:	52                   	push   edx
c0019c72:	53                   	push   ebx
c0019c73:	50                   	push   eax
c0019c74:	e8 4d fc ff ff       	call   c00198c6 <EnvVarContainer::getEnv(char const*)>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	85 c0                	test   eax,eax
c0019c7e:	75 16                	jne    c0019c96 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c80:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c84:	a1 14 f6 02 c0       	mov    eax,ds:0xc002f614
c0019c89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c8d:	83 c4 08             	add    esp,0x8
c0019c90:	5b                   	pop    ebx
c0019c91:	e9 30 fc ff ff       	jmp    c00198c6 <EnvVarContainer::getEnv(char const*)>
c0019c96:	83 c4 08             	add    esp,0x8
c0019c99:	5b                   	pop    ebx
c0019c9a:	c3                   	ret    

c0019c9b <Krnl::setEnvSystem(char const*, char const*)>:
c0019c9b:	83 ec 10             	sub    esp,0x10
c0019c9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca6:	ff 35 14 f6 02 c0    	push   DWORD PTR ds:0xc002f614
c0019cac:	e8 53 fc ff ff       	call   c0019904 <EnvVarContainer::setEnv(char const*, char const*)>
c0019cb1:	83 c4 1c             	add    esp,0x1c
c0019cb4:	c3                   	ret    

c0019cb5 <Krnl::setEnvUser(char const*, char const*)>:
c0019cb5:	a1 10 f6 02 c0       	mov    eax,ds:0xc002f610
c0019cba:	85 c0                	test   eax,eax
c0019cbc:	74 15                	je     c0019cd3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019cbe:	83 ec 10             	sub    esp,0x10
c0019cc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cc9:	50                   	push   eax
c0019cca:	e8 35 fc ff ff       	call   c0019904 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ccf:	83 c4 1c             	add    esp,0x1c
c0019cd2:	c3                   	ret    
c0019cd3:	c3                   	ret    

c0019cd4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ce2:	e9 1d fc ff ff       	jmp    c0019904 <EnvVarContainer::setEnv(char const*, char const*)>

c0019ce7 <Krnl::deleteEnvSystem(char const*)>:
c0019ce7:	c3                   	ret    

c0019ce8 <Krnl::deleteEnvUser(char const*)>:
c0019ce8:	c3                   	ret    

c0019ce9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019ce9:	c3                   	ret    

c0019cea <Krnl::newProcessEnv(Process*)>:
c0019cea:	83 ec 28             	sub    esp,0x28
c0019ced:	6a 0c                	push   0xc
c0019cef:	e8 30 59 ff ff       	call   c000f624 <malloc>
c0019cf4:	5a                   	pop    edx
c0019cf5:	59                   	pop    ecx
c0019cf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cfa:	50                   	push   eax
c0019cfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cff:	e8 e0 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d08:	83 c4 2c             	add    esp,0x2c
c0019d0b:	c3                   	ret    

c0019d0c <Krnl::copyProcessEnv(Process*, Process*)>:
c0019d0c:	56                   	push   esi
c0019d0d:	53                   	push   ebx
c0019d0e:	83 ec 10             	sub    esp,0x10
c0019d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d15:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019d1b:	6a 0c                	push   0xc
c0019d1d:	e8 02 59 ff ff       	call   c000f624 <malloc>
c0019d22:	89 c3                	mov    ebx,eax
c0019d24:	58                   	pop    eax
c0019d25:	5a                   	pop    edx
c0019d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d2a:	53                   	push   ebx
c0019d2b:	e8 b4 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d30:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d32:	89 03                	mov    DWORD PTR [ebx],eax
c0019d34:	c1 e0 03             	shl    eax,0x3
c0019d37:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d3a:	e8 e5 58 ff ff       	call   c000f624 <malloc>
c0019d3f:	83 c4 0c             	add    esp,0xc
c0019d42:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d45:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019d47:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019d4e:	52                   	push   edx
c0019d4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019d52:	50                   	push   eax
c0019d53:	e8 48 69 fe ff       	call   c00006a0 <memcpy>
c0019d58:	89 d8                	mov    eax,ebx
c0019d5a:	83 c4 14             	add    esp,0x14
c0019d5d:	5b                   	pop    ebx
c0019d5e:	5e                   	pop    esi
c0019d5f:	c3                   	ret    

c0019d60 <Krnl::loadSystemEnv()>:
c0019d60:	53                   	push   ebx
c0019d61:	83 ec 14             	sub    esp,0x14
c0019d64:	6a 0c                	push   0xc
c0019d66:	e8 b9 58 ff ff       	call   c000f624 <malloc>
c0019d6b:	89 c3                	mov    ebx,eax
c0019d6d:	58                   	pop    eax
c0019d6e:	5a                   	pop    edx
c0019d6f:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c0019d75:	53                   	push   ebx
c0019d76:	e8 69 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d7e:	89 1d 14 f6 02 c0    	mov    DWORD PTR ds:0xc002f614,ebx
c0019d84:	e8 3f fe ff ff       	call   c0019bc8 <EnvVarContainer::__loadSystem()>
c0019d89:	83 c4 18             	add    esp,0x18
c0019d8c:	5b                   	pop    ebx
c0019d8d:	c3                   	ret    

c0019d8e <Krnl::loadUserEnv()>:
c0019d8e:	53                   	push   ebx
c0019d8f:	83 ec 14             	sub    esp,0x14
c0019d92:	6a 0c                	push   0xc
c0019d94:	e8 8b 58 ff ff       	call   c000f624 <malloc>
c0019d99:	89 c3                	mov    ebx,eax
c0019d9b:	58                   	pop    eax
c0019d9c:	5a                   	pop    edx
c0019d9d:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c0019da3:	53                   	push   ebx
c0019da4:	e8 3b fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019da9:	89 1d 10 f6 02 c0    	mov    DWORD PTR ds:0xc002f610,ebx
c0019daf:	83 c4 18             	add    esp,0x18
c0019db2:	5b                   	pop    ebx
c0019db3:	c3                   	ret    

c0019db4 <Krnl::flushEnv()>:
c0019db4:	c3                   	ret    

c0019db5 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019db5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019db9:	8b 15 10 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f610
c0019dbf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dc5:	a1 14 f6 02 c0       	mov    eax,ds:0xc002f614
c0019dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dcc:	03 01                	add    eax,DWORD PTR [ecx]
c0019dce:	85 d2                	test   edx,edx
c0019dd0:	74 02                	je     c0019dd4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019dd2:	03 02                	add    eax,DWORD PTR [edx]
c0019dd4:	c3                   	ret    

c0019dd5 <Krnl::getProcessEnvPair(Process*, int)>:
c0019dd5:	57                   	push   edi
c0019dd6:	8b 0d 10 f6 02 c0    	mov    ecx,DWORD PTR ds:0xc002f610
c0019ddc:	56                   	push   esi
c0019ddd:	85 c9                	test   ecx,ecx
c0019ddf:	53                   	push   ebx
c0019de0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019de4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019de8:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019dee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019df2:	8b 02                	mov    eax,DWORD PTR [edx]
c0019df4:	75 47                	jne    c0019e3d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019df6:	39 c3                	cmp    ebx,eax
c0019df8:	7c 47                	jl     c0019e41 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019dfa:	8b 15 14 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f614
c0019e00:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e02:	01 c1                	add    ecx,eax
c0019e04:	39 d9                	cmp    ecx,ebx
c0019e06:	7e 6c                	jle    c0019e74 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019e08:	51                   	push   ecx
c0019e09:	89 d9                	mov    ecx,ebx
c0019e0b:	29 c1                	sub    ecx,eax
c0019e0d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019e10:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019e14:	53                   	push   ebx
c0019e15:	68 e7 b1 02 c0       	push   0xc002b1e7
c0019e1a:	e8 d4 8a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019e1f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019e25:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019e27:	a1 14 f6 02 c0       	mov    eax,ds:0xc002f614
c0019e2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019e2f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019e33:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e36:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e39:	89 06                	mov    DWORD PTR [esi],eax
c0019e3b:	eb 51                	jmp    c0019e8e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019e3d:	39 c3                	cmp    ebx,eax
c0019e3f:	7d 05                	jge    c0019e46 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019e41:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019e44:	eb 20                	jmp    c0019e66 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019e46:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019e48:	8d 14 07             	lea    edx,[edi+eax*1]
c0019e4b:	39 da                	cmp    edx,ebx
c0019e4d:	7e 04                	jle    c0019e53 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019e4f:	29 c3                	sub    ebx,eax
c0019e51:	eb 10                	jmp    c0019e63 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019e53:	8b 0d 14 f6 02 c0    	mov    ecx,DWORD PTR ds:0xc002f614
c0019e59:	03 11                	add    edx,DWORD PTR [ecx]
c0019e5b:	39 da                	cmp    edx,ebx
c0019e5d:	7e 15                	jle    c0019e74 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019e5f:	29 c3                	sub    ebx,eax
c0019e61:	29 fb                	sub    ebx,edi
c0019e63:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e66:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019e6a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e6d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e70:	89 06                	mov    DWORD PTR [esi],eax
c0019e72:	eb 1d                	jmp    c0019e91 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	68 fb b1 02 c0       	push   0xc002b1fb
c0019e7c:	e8 18 00 00 00       	call   c0019e99 <Krnl::panic(char const*)>
c0019e81:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019e87:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019e8e:	83 c4 10             	add    esp,0x10
c0019e91:	89 f0                	mov    eax,esi
c0019e93:	5b                   	pop    ebx
c0019e94:	5e                   	pop    esi
c0019e95:	5f                   	pop    edi
c0019e96:	c2 04 00             	ret    0x4

c0019e99 <Krnl::panic(char const*)>:
c0019e99:	55                   	push   ebp
c0019e9a:	89 e5                	mov    ebp,esp
c0019e9c:	53                   	push   ebx
c0019e9d:	83 ec 0c             	sub    esp,0xc
c0019ea0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019ea3:	fa                   	cli    
c0019ea4:	c6 05 20 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f620,0x1
c0019eab:	53                   	push   ebx
c0019eac:	c6 05 04 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca04,0x0
c0019eb3:	68 15 b2 02 c0       	push   0xc002b215
c0019eb8:	e8 36 8a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019ebd:	58                   	pop    eax
c0019ebe:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec9:	e8 e7 6b ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0019ece:	83 c4 0c             	add    esp,0xc
c0019ed1:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019ed6:	6a 01                	push   0x1
c0019ed8:	6a 0f                	push   0xf
c0019eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee0:	e8 01 66 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ee5:	58                   	pop    eax
c0019ee6:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019eeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef1:	e8 60 6e ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0019ef6:	58                   	pop    eax
c0019ef7:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019efc:	5a                   	pop    edx
c0019efd:	68 2e b2 02 c0       	push   0xc002b22e
c0019f02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f08:	e8 c7 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f0d:	59                   	pop    ecx
c0019f0e:	58                   	pop    eax
c0019f0f:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019f14:	68 d4 b2 02 c0       	push   0xc002b2d4
c0019f19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1f:	e8 b0 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f24:	58                   	pop    eax
c0019f25:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019f2a:	5a                   	pop    edx
c0019f2b:	68 4a b2 02 c0       	push   0xc002b24a
c0019f30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f36:	e8 99 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f3b:	59                   	pop    ecx
c0019f3c:	58                   	pop    eax
c0019f3d:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019f42:	53                   	push   ebx
c0019f43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f49:	e8 86 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f4e:	58                   	pop    eax
c0019f4f:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019f54:	5a                   	pop    edx
c0019f55:	68 6a b2 02 c0       	push   0xc002b26a
c0019f5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f60:	e8 6f 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f65:	a1 1c f6 02 c0       	mov    eax,ds:0xc002f61c
c0019f6a:	83 c4 10             	add    esp,0x10
c0019f6d:	85 c0                	test   eax,eax
c0019f6f:	74 02                	je     c0019f73 <Krnl::panic(char const*)+0xda>
c0019f71:	ff d0                	call   eax
c0019f73:	83 ec 0c             	sub    esp,0xc
c0019f76:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f79:	e8 a8 2e 00 00       	call   c001ce26 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	89 c3                	mov    ebx,eax
c0019f83:	85 c0                	test   eax,eax
c0019f85:	0f 84 50 02 00 00    	je     c001a1db <Krnl::panic(char const*)+0x342>
c0019f8b:	83 ec 08             	sub    esp,0x8
c0019f8e:	8b 15 34 00 03 c0    	mov    edx,DWORD PTR ds:0xc0030034
c0019f94:	68 10 b3 02 c0       	push   0xc002b310
c0019f99:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f9f:	e8 30 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fa4:	58                   	pop    eax
c0019fa5:	5a                   	pop    edx
c0019fa6:	8b 15 34 00 03 c0    	mov    edx,DWORD PTR ds:0xc0030034
c0019fac:	68 4a b2 02 c0       	push   0xc002b24a
c0019fb1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019fb7:	e8 18 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fbc:	59                   	pop    ecx
c0019fbd:	58                   	pop    eax
c0019fbe:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019fc3:	53                   	push   ebx
c0019fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fca:	e8 05 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fcf:	83 c4 10             	add    esp,0x10
c0019fd2:	83 ec 08             	sub    esp,0x8
c0019fd5:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019fda:	68 69 b2 02 c0       	push   0xc002b269
c0019fdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe5:	e8 ea 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fea:	58                   	pop    eax
c0019feb:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c0019ff0:	5a                   	pop    edx
c0019ff1:	68 68 b3 02 c0       	push   0xc002b368
c0019ff6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ffc:	e8 d3 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a001:	59                   	pop    ecx
c001a002:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a007:	5b                   	pop    ebx
c001a008:	68 a8 b3 02 c0       	push   0xc002b3a8
c001a00d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a013:	e8 bc 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a018:	58                   	pop    eax
c001a019:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a01e:	5a                   	pop    edx
c001a01f:	68 55 b2 02 c0       	push   0xc002b255
c001a024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02a:	e8 a5 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a02f:	59                   	pop    ecx
c001a030:	5b                   	pop    ebx
c001a031:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a034:	68 6d b2 02 c0       	push   0xc002b26d
c001a039:	e8 b5 88 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a03e:	58                   	pop    eax
c001a03f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a042:	5a                   	pop    edx
c001a043:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a046:	68 76 b2 02 c0       	push   0xc002b276
c001a04b:	e8 a3 88 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a050:	59                   	pop    ecx
c001a051:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a054:	5b                   	pop    ebx
c001a055:	8b 00                	mov    eax,DWORD PTR [eax]
c001a057:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a05a:	68 7f b2 02 c0       	push   0xc002b27f
c001a05f:	e8 8f 88 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a064:	58                   	pop    eax
c001a065:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a06a:	5a                   	pop    edx
c001a06b:	68 ec b3 02 c0       	push   0xc002b3ec
c001a070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a076:	e8 59 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a07b:	59                   	pop    ecx
c001a07c:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a081:	5b                   	pop    ebx
c001a082:	68 88 b2 02 c0       	push   0xc002b288
c001a087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08d:	e8 42 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a092:	0f 20 c0             	mov    eax,cr0
c001a095:	5a                   	pop    edx
c001a096:	59                   	pop    ecx
c001a097:	50                   	push   eax
c001a098:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a3:	e8 52 6e ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a0a8:	5b                   	pop    ebx
c001a0a9:	58                   	pop    eax
c001a0aa:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a0af:	68 92 b2 02 c0       	push   0xc002b292
c001a0b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ba:	e8 15 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a0bf:	0f 20 d0             	mov    eax,cr2
c001a0c2:	5a                   	pop    edx
c001a0c3:	59                   	pop    ecx
c001a0c4:	50                   	push   eax
c001a0c5:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a0ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d0:	e8 25 6e ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a0d5:	5b                   	pop    ebx
c001a0d6:	58                   	pop    eax
c001a0d7:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a0dc:	68 9c b2 02 c0       	push   0xc002b29c
c001a0e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e7:	e8 e8 6d ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a0ec:	0f 20 d8             	mov    eax,cr3
c001a0ef:	5a                   	pop    edx
c001a0f0:	59                   	pop    ecx
c001a0f1:	50                   	push   eax
c001a0f2:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a0f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0fd:	e8 f8 6d ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a102:	5b                   	pop    ebx
c001a103:	58                   	pop    eax
c001a104:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a109:	68 af b2 02 c0       	push   0xc002b2af
c001a10e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a114:	e8 bb 6d ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a119:	0f 20 e0             	mov    eax,cr4
c001a11c:	5a                   	pop    edx
c001a11d:	59                   	pop    ecx
c001a11e:	50                   	push   eax
c001a11f:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a124:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a12a:	e8 cb 6d ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a12f:	5b                   	pop    ebx
c001a130:	58                   	pop    eax
c001a131:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a136:	68 b9 b2 02 c0       	push   0xc002b2b9
c001a13b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a141:	e8 8e 6d ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a146:	5a                   	pop    edx
c001a147:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a14c:	59                   	pop    ecx
c001a14d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a153:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a156:	50                   	push   eax
c001a157:	e8 9e 6d ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a15c:	5b                   	pop    ebx
c001a15d:	58                   	pop    eax
c001a15e:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a163:	68 d0 b2 02 c0       	push   0xc002b2d0
c001a168:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16e:	e8 61 6d ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a173:	5a                   	pop    edx
c001a174:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a179:	59                   	pop    ecx
c001a17a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a180:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a183:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a186:	50                   	push   eax
c001a187:	e8 6e 6d ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a18c:	5b                   	pop    ebx
c001a18d:	58                   	pop    eax
c001a18e:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a193:	68 d0 b2 02 c0       	push   0xc002b2d0
c001a198:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a19e:	e8 31 6d ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a1a3:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a1a8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1b1:	8b 12                	mov    edx,DWORD PTR [edx]
c001a1b3:	59                   	pop    ecx
c001a1b4:	5b                   	pop    ebx
c001a1b5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1b8:	50                   	push   eax
c001a1b9:	e8 3c 6d ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001a1be:	83 c4 10             	add    esp,0x10
c001a1c1:	b2 fe                	mov    dl,0xfe
c001a1c3:	e4 60                	in     al,0x60
c001a1c5:	3c 1c                	cmp    al,0x1c
c001a1c7:	74 04                	je     c001a1cd <Krnl::panic(char const*)+0x334>
c001a1c9:	3c 5a                	cmp    al,0x5a
c001a1cb:	75 f6                	jne    c001a1c3 <Krnl::panic(char const*)+0x32a>
c001a1cd:	e4 64                	in     al,0x64
c001a1cf:	a8 02                	test   al,0x2
c001a1d1:	75 fa                	jne    c001a1cd <Krnl::panic(char const*)+0x334>
c001a1d3:	88 d0                	mov    al,dl
c001a1d5:	e6 64                	out    0x64,al
c001a1d7:	fa                   	cli    
c001a1d8:	f4                   	hlt    
c001a1d9:	eb e8                	jmp    c001a1c3 <Krnl::panic(char const*)+0x32a>
c001a1db:	50                   	push   eax
c001a1dc:	50                   	push   eax
c001a1dd:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a1e2:	68 3c b3 02 c0       	push   0xc002b33c
c001a1e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ed:	e8 e2 6c ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a1f2:	58                   	pop    eax
c001a1f3:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a1f8:	5a                   	pop    edx
c001a1f9:	68 4a b2 02 c0       	push   0xc002b24a
c001a1fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a204:	e8 cb 6c ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a209:	59                   	pop    ecx
c001a20a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a20f:	5b                   	pop    ebx
c001a210:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a213:	83 c0 0c             	add    eax,0xc
c001a216:	50                   	push   eax
c001a217:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001a21c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a222:	e8 ad 6c ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	e9 a3 fd ff ff       	jmp    c0019fd2 <Krnl::panic(char const*)+0x139>

c001a22f <Net::switchEndian16(unsigned short)>:
c001a22f:	83 ec 04             	sub    esp,0x4
c001a232:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a236:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a23a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a23e:	c1 f8 08             	sar    eax,0x8
c001a241:	89 c2                	mov    edx,eax
c001a243:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a247:	c1 e0 08             	shl    eax,0x8
c001a24a:	09 d0                	or     eax,edx
c001a24c:	83 c4 04             	add    esp,0x4
c001a24f:	c3                   	ret    

c001a250 <Net::switchEndian32(unsigned int)>:
c001a250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a254:	c1 e8 18             	shr    eax,0x18
c001a257:	89 c2                	mov    edx,eax
c001a259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a25d:	c1 e0 08             	shl    eax,0x8
c001a260:	25 00 00 ff 00       	and    eax,0xff0000
c001a265:	09 c2                	or     edx,eax
c001a267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a26b:	c1 e8 08             	shr    eax,0x8
c001a26e:	25 00 ff 00 00       	and    eax,0xff00
c001a273:	09 c2                	or     edx,eax
c001a275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a279:	c1 e0 18             	shl    eax,0x18
c001a27c:	09 d0                	or     eax,edx
c001a27e:	c3                   	ret    

c001a27f <Net::crc32Calc(unsigned char*, int)>:
c001a27f:	83 ec 10             	sub    esp,0x10
c001a282:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a287:	75 07                	jne    c001a290 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a289:	b8 00 00 00 00       	mov    eax,0x0
c001a28e:	eb 7c                	jmp    c001a30c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a290:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a295:	7f 07                	jg     c001a29e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a297:	b8 00 00 00 00       	mov    eax,0x0
c001a29c:	eb 6e                	jmp    c001a30c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a29e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a2a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a2ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2b2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a2b6:	7d 4e                	jge    c001a306 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a2b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2c0:	01 d0                	add    eax,edx
c001a2c2:	8a 00                	mov    al,BYTE PTR [eax]
c001a2c4:	0f b6 c0             	movzx  eax,al
c001a2c7:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a2cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2d3:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a2d8:	7f 26                	jg     c001a300 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2de:	83 e0 01             	and    eax,0x1
c001a2e1:	74 0d                	je     c001a2f0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e7:	d1 e8                	shr    eax,1
c001a2e9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2ee:	eb 06                	jmp    c001a2f6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f4:	d1 e8                	shr    eax,1
c001a2f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2fe:	eb d3                	jmp    c001a2d3 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a300:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a304:	eb a8                	jmp    c001a2ae <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a30a:	f7 d0                	not    eax
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	c3                   	ret    

c001a310 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a310:	83 ec 1c             	sub    esp,0x1c
c001a313:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a317:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a31b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a323:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a328:	7f 14                	jg     c001a33e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a32a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a32e:	8d 50 01             	lea    edx,[eax+0x1]
c001a331:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a335:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a338:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a33c:	eb e5                	jmp    c001a323 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a33e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a342:	8d 50 01             	lea    edx,[eax+0x1]
c001a345:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a349:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a34c:	83 ec 04             	sub    esp,0x4
c001a34f:	6a 06                	push   0x6
c001a351:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a355:	50                   	push   eax
c001a356:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a35a:	e8 41 63 fe ff       	call   c00006a0 <memcpy>
c001a35f:	83 c4 10             	add    esp,0x10
c001a362:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a367:	83 ec 04             	sub    esp,0x4
c001a36a:	6a 06                	push   0x6
c001a36c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a370:	50                   	push   eax
c001a371:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a375:	e8 26 63 fe ff       	call   c00006a0 <memcpy>
c001a37a:	83 c4 10             	add    esp,0x10
c001a37d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a382:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a386:	0f b7 c0             	movzx  eax,ax
c001a389:	c1 f8 08             	sar    eax,0x8
c001a38c:	89 c1                	mov    ecx,eax
c001a38e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a392:	8d 50 01             	lea    edx,[eax+0x1]
c001a395:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a399:	88 ca                	mov    dl,cl
c001a39b:	88 10                	mov    BYTE PTR [eax],dl
c001a39d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3a5:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a3ac:	88 10                	mov    BYTE PTR [eax],dl
c001a3ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3b6:	83 ec 04             	sub    esp,0x4
c001a3b9:	52                   	push   edx
c001a3ba:	50                   	push   eax
c001a3bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a3bf:	e8 dc 62 fe ff       	call   c00006a0 <memcpy>
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a3cb:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a3cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3d3:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a3d7:	83 ec 08             	sub    esp,0x8
c001a3da:	50                   	push   eax
c001a3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3df:	e8 9b fe ff ff       	call   c001a27f <Net::crc32Calc(unsigned char*, int)>
c001a3e4:	83 c4 10             	add    esp,0x10
c001a3e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ef:	c1 e8 18             	shr    eax,0x18
c001a3f2:	89 c1                	mov    ecx,eax
c001a3f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3f8:	8d 50 01             	lea    edx,[eax+0x1]
c001a3fb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3ff:	88 ca                	mov    dl,cl
c001a401:	88 10                	mov    BYTE PTR [eax],dl
c001a403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a407:	c1 e8 10             	shr    eax,0x10
c001a40a:	89 c1                	mov    ecx,eax
c001a40c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a410:	8d 50 01             	lea    edx,[eax+0x1]
c001a413:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a417:	88 ca                	mov    dl,cl
c001a419:	88 10                	mov    BYTE PTR [eax],dl
c001a41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a41f:	c1 e8 08             	shr    eax,0x8
c001a422:	89 c1                	mov    ecx,eax
c001a424:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a428:	8d 50 01             	lea    edx,[eax+0x1]
c001a42b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a42f:	88 ca                	mov    dl,cl
c001a431:	88 10                	mov    BYTE PTR [eax],dl
c001a433:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a437:	8d 50 01             	lea    edx,[eax+0x1]
c001a43a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a43e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a442:	88 10                	mov    BYTE PTR [eax],dl
c001a444:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a448:	83 c4 1c             	add    esp,0x1c
c001a44b:	c3                   	ret    

c001a44c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a44c:	83 ec 2c             	sub    esp,0x2c
c001a44f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a457:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a45c:	83 ec 04             	sub    esp,0x4
c001a45f:	6a 06                	push   0x6
c001a461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a465:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a469:	83 c0 0e             	add    eax,0xe
c001a46c:	50                   	push   eax
c001a46d:	e8 2e 62 fe ff       	call   c00006a0 <memcpy>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a47a:	83 ec 04             	sub    esp,0x4
c001a47d:	6a 06                	push   0x6
c001a47f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a483:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a487:	83 c0 08             	add    eax,0x8
c001a48a:	50                   	push   eax
c001a48b:	e8 10 62 fe ff       	call   c00006a0 <memcpy>
c001a490:	83 c4 10             	add    esp,0x10
c001a493:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a498:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a49c:	8d 50 01             	lea    edx,[eax+0x1]
c001a49f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a4a3:	8a 00                	mov    al,BYTE PTR [eax]
c001a4a5:	0f b6 c0             	movzx  eax,al
c001a4a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a4ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4b1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a4b8:	8a 00                	mov    al,BYTE PTR [eax]
c001a4ba:	0f b6 c0             	movzx  eax,al
c001a4bd:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a4c2:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a4c7:	c1 e0 08             	shl    eax,0x8
c001a4ca:	89 c2                	mov    edx,eax
c001a4cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4d0:	09 d0                	or     eax,edx
c001a4d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a4d6:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4da:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a4df:	75 3a                	jne    c001a51b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4e5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4e8:	66 3d dc 05          	cmp    ax,0x5dc
c001a4ec:	77 10                	ja     c001a4fe <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a4ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4f5:	0f b7 c0             	movzx  eax,ax
c001a4f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4fc:	eb 1d                	jmp    c001a51b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4fe:	83 ec 0c             	sub    esp,0xc
c001a501:	68 14 b4 02 c0       	push   0xc002b414
c001a506:	e8 e8 83 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a50b:	83 c4 10             	add    esp,0x10
c001a50e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a512:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a516:	e9 c0 00 00 00       	jmp    c001a5db <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a51b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a51f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a523:	8b 00                	mov    eax,DWORD PTR [eax]
c001a525:	83 ec 04             	sub    esp,0x4
c001a528:	52                   	push   edx
c001a529:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a52d:	50                   	push   eax
c001a52e:	e8 6d 61 fe ff       	call   c00006a0 <memcpy>
c001a533:	83 c4 10             	add    esp,0x10
c001a536:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a53a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a53e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a542:	8d 50 01             	lea    edx,[eax+0x1]
c001a545:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a549:	8a 00                	mov    al,BYTE PTR [eax]
c001a54b:	0f b6 c0             	movzx  eax,al
c001a54e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a552:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a556:	8d 50 01             	lea    edx,[eax+0x1]
c001a559:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a55d:	8a 00                	mov    al,BYTE PTR [eax]
c001a55f:	0f b6 c0             	movzx  eax,al
c001a562:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a566:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a56a:	8d 50 01             	lea    edx,[eax+0x1]
c001a56d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a571:	8a 00                	mov    al,BYTE PTR [eax]
c001a573:	0f b6 c0             	movzx  eax,al
c001a576:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a57a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a57e:	8d 50 01             	lea    edx,[eax+0x1]
c001a581:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a585:	8a 00                	mov    al,BYTE PTR [eax]
c001a587:	0f b6 c0             	movzx  eax,al
c001a58a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a58e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a592:	c1 e0 18             	shl    eax,0x18
c001a595:	89 c2                	mov    edx,eax
c001a597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a59b:	c1 e0 10             	shl    eax,0x10
c001a59e:	09 c2                	or     edx,eax
c001a5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5a4:	c1 e0 08             	shl    eax,0x8
c001a5a7:	09 d0                	or     eax,edx
c001a5a9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a5ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5b5:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a5b9:	83 e8 04             	sub    eax,0x4
c001a5bc:	83 ec 08             	sub    esp,0x8
c001a5bf:	50                   	push   eax
c001a5c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a5c4:	e8 b6 fc ff ff       	call   c001a27f <Net::crc32Calc(unsigned char*, int)>
c001a5c9:	83 c4 10             	add    esp,0x10
c001a5cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a5d0:	0f 94 c2             	sete   dl
c001a5d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5d7:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a5da:	90                   	nop
c001a5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5df:	83 c4 2c             	add    esp,0x2c
c001a5e2:	c2 04 00             	ret    0x4

c001a5e5 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5e5:	55                   	push   ebp
c001a5e6:	57                   	push   edi
c001a5e7:	56                   	push   esi
c001a5e8:	53                   	push   ebx
c001a5e9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5ef:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5f6:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5f8:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a5fb:	80 fb 40             	cmp    bl,0x40
c001a5fe:	75 1b                	jne    c001a61b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a600:	8a 16                	mov    dl,BYTE PTR [esi]
c001a602:	84 d2                	test   dl,dl
c001a604:	0f 84 f1 00 00 00    	je     c001a6fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a60a:	8d 46 01             	lea    eax,[esi+0x1]
c001a60d:	80 fa 3a             	cmp    dl,0x3a
c001a610:	74 04                	je     c001a616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a612:	89 c6                	mov    esi,eax
c001a614:	eb ea                	jmp    c001a600 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a616:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a619:	89 c6                	mov    esi,eax
c001a61b:	50                   	push   eax
c001a61c:	6a 40                	push   0x40
c001a61e:	6a 00                	push   0x0
c001a620:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a624:	50                   	push   eax
c001a625:	e8 9a 60 fe ff       	call   c00006c4 <memset>
c001a62a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a631:	31 c0                	xor    eax,eax
c001a633:	83 c4 10             	add    esp,0x10
c001a636:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a638:	84 c9                	test   cl,cl
c001a63a:	0f 84 bb 00 00 00    	je     c001a6fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a640:	3d c7 00 00 00       	cmp    eax,0xc7
c001a645:	0f 8f b0 00 00 00    	jg     c001a6fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a64b:	80 f9 0a             	cmp    cl,0xa
c001a64e:	0f 85 98 00 00 00    	jne    c001a6ec <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a654:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a659:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a65d:	a8 df                	test   al,0xdf
c001a65f:	0f 94 c1             	sete   cl
c001a662:	3c 23                	cmp    al,0x23
c001a664:	0f 94 c2             	sete   dl
c001a667:	08 d1                	or     cl,dl
c001a669:	75 4a                	jne    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a66b:	8d 50 f7             	lea    edx,[eax-0x9]
c001a66e:	80 fa 01             	cmp    dl,0x1
c001a671:	76 42                	jbe    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a673:	3c 5b                	cmp    al,0x5b
c001a675:	75 42                	jne    c001a6b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a677:	80 fb 40             	cmp    bl,0x40
c001a67a:	75 39                	jne    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a67c:	83 ec 0c             	sub    esp,0xc
c001a67f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a683:	52                   	push   edx
c001a684:	e8 58 60 fe ff       	call   c00006e1 <strlen>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	83 f8 3f             	cmp    eax,0x3f
c001a68f:	77 6a                	ja     c001a6fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a691:	50                   	push   eax
c001a692:	50                   	push   eax
c001a693:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a697:	52                   	push   edx
c001a698:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a69c:	52                   	push   edx
c001a69d:	e8 c1 60 fe ff       	call   c0000763 <strcpy>
c001a6a2:	58                   	pop    eax
c001a6a3:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a6a7:	52                   	push   edx
c001a6a8:	e8 34 60 fe ff       	call   c00006e1 <strlen>
c001a6ad:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a6b2:	83 c4 10             	add    esp,0x10
c001a6b5:	31 d2                	xor    edx,edx
c001a6b7:	eb 3a                	jmp    c001a6f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a6b9:	80 fb 40             	cmp    bl,0x40
c001a6bc:	74 06                	je     c001a6c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a6be:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a6c2:	eb 20                	jmp    c001a6e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a6c4:	50                   	push   eax
c001a6c5:	50                   	push   eax
c001a6c6:	55                   	push   ebp
c001a6c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a6cb:	50                   	push   eax
c001a6cc:	e8 e3 60 fe ff       	call   c00007b4 <strcmp>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	85 c0                	test   eax,eax
c001a6d6:	75 dd                	jne    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6d8:	eb e4                	jmp    c001a6be <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a6da:	8d 50 01             	lea    edx,[eax+0x1]
c001a6dd:	80 f9 3d             	cmp    cl,0x3d
c001a6e0:	74 1d                	je     c001a6ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6e2:	89 d0                	mov    eax,edx
c001a6e4:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6e6:	84 c9                	test   cl,cl
c001a6e8:	75 f0                	jne    c001a6da <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6ea:	eb 0f                	jmp    c001a6fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6ec:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ef:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6f3:	47                   	inc    edi
c001a6f4:	89 d0                	mov    eax,edx
c001a6f6:	e9 3b ff ff ff       	jmp    c001a636 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a6fb:	31 c0                	xor    eax,eax
c001a6fd:	eb 33                	jmp    c001a732 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a703:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a706:	50                   	push   eax
c001a707:	50                   	push   eax
c001a708:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a70c:	50                   	push   eax
c001a70d:	56                   	push   esi
c001a70e:	e8 a1 60 fe ff       	call   c00007b4 <strcmp>
c001a713:	83 c4 10             	add    esp,0x10
c001a716:	85 c0                	test   eax,eax
c001a718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a71c:	75 97                	jne    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a71e:	51                   	push   ecx
c001a71f:	51                   	push   ecx
c001a720:	52                   	push   edx
c001a721:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a728:	e8 36 60 fe ff       	call   c0000763 <strcpy>
c001a72d:	83 c4 10             	add    esp,0x10
c001a730:	b0 01                	mov    al,0x1
c001a732:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a738:	5b                   	pop    ebx
c001a739:	5e                   	pop    esi
c001a73a:	5f                   	pop    edi
c001a73b:	5d                   	pop    ebp
c001a73c:	c3                   	ret    

c001a73d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a73d:	57                   	push   edi
c001a73e:	56                   	push   esi
c001a73f:	53                   	push   ebx
c001a740:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a746:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a74d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a754:	53                   	push   ebx
c001a755:	e8 87 5f fe ff       	call   c00006e1 <strlen>
c001a75a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a75d:	89 c7                	mov    edi,eax
c001a75f:	e8 7d 5f fe ff       	call   c00006e1 <strlen>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a76b:	3d ff 00 00 00       	cmp    eax,0xff
c001a770:	0f 87 d3 00 00 00    	ja     c001a849 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a776:	57                   	push   edi
c001a777:	57                   	push   edi
c001a778:	56                   	push   esi
c001a779:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a77d:	56                   	push   esi
c001a77e:	e8 e0 5f fe ff       	call   c0000763 <strcpy>
c001a783:	58                   	pop    eax
c001a784:	5a                   	pop    edx
c001a785:	68 48 b8 02 c0       	push   0xc002b848
c001a78a:	56                   	push   esi
c001a78b:	e8 8a 60 fe ff       	call   c000081a <strcat>
c001a790:	59                   	pop    ecx
c001a791:	5f                   	pop    edi
c001a792:	53                   	push   ebx
c001a793:	56                   	push   esi
c001a794:	e8 81 60 fe ff       	call   c000081a <strcat>
c001a799:	58                   	pop    eax
c001a79a:	5a                   	pop    edx
c001a79b:	68 60 b4 02 c0       	push   0xc002b460
c001a7a0:	56                   	push   esi
c001a7a1:	e8 74 60 fe ff       	call   c000081a <strcat>
c001a7a6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a7ad:	e8 72 4e ff ff       	call   c000f624 <malloc>
c001a7b2:	83 c4 0c             	add    esp,0xc
c001a7b5:	89 c3                	mov    ebx,eax
c001a7b7:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c001a7bd:	56                   	push   esi
c001a7be:	50                   	push   eax
c001a7bf:	e8 88 86 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	85 db                	test   ebx,ebx
c001a7c9:	74 7e                	je     c001a849 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a7cb:	51                   	push   ecx
c001a7cc:	51                   	push   ecx
c001a7cd:	6a 01                	push   0x1
c001a7cf:	53                   	push   ebx
c001a7d0:	e8 db 86 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001a7d5:	83 c4 10             	add    esp,0x10
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	74 08                	je     c001a7e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7e1:	53                   	push   ebx
c001a7e2:	eb 5f                	jmp    c001a843 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7e4:	52                   	push   edx
c001a7e5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7e9:	50                   	push   eax
c001a7ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ee:	50                   	push   eax
c001a7ef:	53                   	push   ebx
c001a7f0:	e8 67 89 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001a7f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7f9:	83 c4 10             	add    esp,0x10
c001a7fc:	89 c1                	mov    ecx,eax
c001a7fe:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a802:	74 31                	je     c001a835 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a804:	83 ec 0c             	sub    esp,0xc
c001a807:	50                   	push   eax
c001a808:	e8 17 4e ff ff       	call   c000f624 <malloc>
c001a80d:	89 c6                	mov    esi,eax
c001a80f:	58                   	pop    eax
c001a810:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a812:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a816:	52                   	push   edx
c001a817:	56                   	push   esi
c001a818:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a81c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a820:	53                   	push   ebx
c001a821:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a824:	83 c4 20             	add    esp,0x20
c001a827:	85 c0                	test   eax,eax
c001a829:	75 0a                	jne    c001a835 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a82b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a82f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a833:	74 18                	je     c001a84d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a835:	83 ec 0c             	sub    esp,0xc
c001a838:	53                   	push   ebx
c001a839:	e8 d0 86 ff ff       	call   c0012f0e <File::close()>
c001a83e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a843:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a846:	83 c4 10             	add    esp,0x10
c001a849:	31 c0                	xor    eax,eax
c001a84b:	eb 3b                	jmp    c001a888 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a84d:	83 ec 0c             	sub    esp,0xc
c001a850:	53                   	push   ebx
c001a851:	e8 b8 86 ff ff       	call   c0012f0e <File::close()>
c001a856:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a85b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a85e:	83 c4 0c             	add    esp,0xc
c001a861:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a868:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a86f:	56                   	push   esi
c001a870:	e8 70 fd ff ff       	call   c001a5e5 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a875:	89 34 24             	mov    DWORD PTR [esp],esi
c001a878:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a87c:	e8 b3 4d ff ff       	call   c000f634 <free>
c001a881:	83 c4 10             	add    esp,0x10
c001a884:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a888:	81 c4 20 01 00 00    	add    esp,0x120
c001a88e:	5b                   	pop    ebx
c001a88f:	5e                   	pop    esi
c001a890:	5f                   	pop    edi
c001a891:	c3                   	ret    

c001a892 <Reg::getLine(char*, char*, char*)>:
c001a892:	57                   	push   edi
c001a893:	56                   	push   esi
c001a894:	53                   	push   ebx
c001a895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a899:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a89d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a8a1:	57                   	push   edi
c001a8a2:	56                   	push   esi
c001a8a3:	53                   	push   ebx
c001a8a4:	68 65 b4 02 c0       	push   0xc002b465
c001a8a9:	e8 8f fe ff ff       	call   c001a73d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	84 c0                	test   al,al
c001a8b3:	75 10                	jne    c001a8c5 <Reg::getLine(char*, char*, char*)+0x33>
c001a8b5:	57                   	push   edi
c001a8b6:	56                   	push   esi
c001a8b7:	53                   	push   ebx
c001a8b8:	68 8a b4 02 c0       	push   0xc002b48a
c001a8bd:	e8 7b fe ff ff       	call   c001a73d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a8c2:	83 c4 10             	add    esp,0x10
c001a8c5:	5b                   	pop    ebx
c001a8c6:	5e                   	pop    esi
c001a8c7:	5f                   	pop    edi
c001a8c8:	c3                   	ret    

c001a8c9 <Reg::readInt(char*, char*, int*)>:
c001a8c9:	55                   	push   ebp
c001a8ca:	57                   	push   edi
c001a8cb:	56                   	push   esi
c001a8cc:	53                   	push   ebx
c001a8cd:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a8d3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a8d7:	57                   	push   edi
c001a8d8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8df:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8e6:	e8 a7 ff ff ff       	call   c001a892 <Reg::getLine(char*, char*, char*)>
c001a8eb:	83 c4 10             	add    esp,0x10
c001a8ee:	84 c0                	test   al,al
c001a8f0:	0f 84 b3 00 00 00    	je     c001a9a9 <Reg::readInt(char*, char*, int*)+0xe0>
c001a8f6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a8fa:	80 fa 2b             	cmp    dl,0x2b
c001a8fd:	74 0c                	je     c001a90b <Reg::readInt(char*, char*, int*)+0x42>
c001a8ff:	80 fa 2d             	cmp    dl,0x2d
c001a902:	75 0e                	jne    c001a912 <Reg::readInt(char*, char*, int*)+0x49>
c001a904:	ba 01 00 00 00       	mov    edx,0x1
c001a909:	eb 0b                	jmp    c001a916 <Reg::readInt(char*, char*, int*)+0x4d>
c001a90b:	ba 01 00 00 00       	mov    edx,0x1
c001a910:	eb 02                	jmp    c001a914 <Reg::readInt(char*, char*, int*)+0x4b>
c001a912:	31 d2                	xor    edx,edx
c001a914:	31 c0                	xor    eax,eax
c001a916:	be 0a 00 00 00       	mov    esi,0xa
c001a91b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a920:	75 20                	jne    c001a942 <Reg::readInt(char*, char*, int*)+0x79>
c001a922:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a926:	80 f9 78             	cmp    cl,0x78
c001a929:	75 0a                	jne    c001a935 <Reg::readInt(char*, char*, int*)+0x6c>
c001a92b:	83 c2 02             	add    edx,0x2
c001a92e:	be 10 00 00 00       	mov    esi,0x10
c001a933:	eb 0d                	jmp    c001a942 <Reg::readInt(char*, char*, int*)+0x79>
c001a935:	80 f9 62             	cmp    cl,0x62
c001a938:	75 08                	jne    c001a942 <Reg::readInt(char*, char*, int*)+0x79>
c001a93a:	83 c2 02             	add    edx,0x2
c001a93d:	be 02 00 00 00       	mov    esi,0x2
c001a942:	01 d7                	add    edi,edx
c001a944:	31 d2                	xor    edx,edx
c001a946:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a948:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a94c:	80 fb 0d             	cmp    bl,0xd
c001a94f:	0f 94 c3             	sete   bl
c001a952:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a957:	0f 94 c1             	sete   cl
c001a95a:	08 cb                	or     bl,cl
c001a95c:	75 3a                	jne    c001a998 <Reg::readInt(char*, char*, int*)+0xcf>
c001a95e:	0f af d6             	imul   edx,esi
c001a961:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a966:	83 fe 10             	cmp    esi,0x10
c001a969:	75 26                	jne    c001a991 <Reg::readInt(char*, char*, int*)+0xc8>
c001a96b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a96f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a972:	89 e9                	mov    ecx,ebp
c001a974:	80 f9 05             	cmp    cl,0x5
c001a977:	77 06                	ja     c001a97f <Reg::readInt(char*, char*, int*)+0xb6>
c001a979:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a97d:	eb 16                	jmp    c001a995 <Reg::readInt(char*, char*, int*)+0xcc>
c001a97f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a983:	83 e9 61             	sub    ecx,0x61
c001a986:	80 f9 05             	cmp    cl,0x5
c001a989:	77 06                	ja     c001a991 <Reg::readInt(char*, char*, int*)+0xc8>
c001a98b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a98f:	eb 04                	jmp    c001a995 <Reg::readInt(char*, char*, int*)+0xcc>
c001a991:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a995:	47                   	inc    edi
c001a996:	eb ae                	jmp    c001a946 <Reg::readInt(char*, char*, int*)+0x7d>
c001a998:	84 c0                	test   al,al
c001a99a:	74 02                	je     c001a99e <Reg::readInt(char*, char*, int*)+0xd5>
c001a99c:	f7 da                	neg    edx
c001a99e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a9a5:	89 10                	mov    DWORD PTR [eax],edx
c001a9a7:	88 d8                	mov    al,bl
c001a9a9:	81 c4 ec 00 00 00    	add    esp,0xec
c001a9af:	5b                   	pop    ebx
c001a9b0:	5e                   	pop    esi
c001a9b1:	5f                   	pop    edi
c001a9b2:	5d                   	pop    ebp
c001a9b3:	c3                   	ret    

c001a9b4 <Reg::readString(char*, char*, char*, int)>:
c001a9b4:	57                   	push   edi
c001a9b5:	56                   	push   esi
c001a9b6:	53                   	push   ebx
c001a9b7:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a9bd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a9c4:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a9c8:	57                   	push   edi
c001a9c9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9d0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9d7:	e8 b6 fe ff ff       	call   c001a892 <Reg::getLine(char*, char*, char*)>
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	89 c6                	mov    esi,eax
c001a9e1:	84 c0                	test   al,al
c001a9e3:	74 44                	je     c001aa29 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9e5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9ec:	31 c0                	xor    eax,eax
c001a9ee:	4a                   	dec    edx
c001a9ef:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9f2:	84 c9                	test   cl,cl
c001a9f4:	74 0f                	je     c001aa05 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9f6:	39 c2                	cmp    edx,eax
c001a9f8:	7e 0b                	jle    c001aa05 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9fa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a9fd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aa02:	40                   	inc    eax
c001aa03:	eb ea                	jmp    c001a9ef <Reg::readString(char*, char*, char*, int)+0x3b>
c001aa05:	83 ec 0c             	sub    esp,0xc
c001aa08:	53                   	push   ebx
c001aa09:	e8 d3 5c fe ff       	call   c00006e1 <strlen>
c001aa0e:	83 c4 10             	add    esp,0x10
c001aa11:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aa16:	75 11                	jne    c001aa29 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	53                   	push   ebx
c001aa1c:	e8 c0 5c fe ff       	call   c00006e1 <strlen>
c001aa21:	83 c4 10             	add    esp,0x10
c001aa24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aa29:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aa2f:	89 f0                	mov    eax,esi
c001aa31:	5b                   	pop    ebx
c001aa32:	5e                   	pop    esi
c001aa33:	5f                   	pop    edi
c001aa34:	c3                   	ret    

c001aa35 <Reg::readBool(char*, char*, bool*)>:
c001aa35:	83 ec 20             	sub    esp,0x20
c001aa38:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa3c:	50                   	push   eax
c001aa3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa45:	e8 7f fe ff ff       	call   c001a8c9 <Reg::readInt(char*, char*, int*)>
c001aa4a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa53:	0f 95 02             	setne  BYTE PTR [edx]
c001aa56:	83 c4 2c             	add    esp,0x2c
c001aa59:	c3                   	ret    

c001aa5a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa5a:	53                   	push   ebx
c001aa5b:	83 ec 1c             	sub    esp,0x1c
c001aa5e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa62:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa66:	50                   	push   eax
c001aa67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa6f:	e8 c1 ff ff ff       	call   c001aa35 <Reg::readBool(char*, char*, bool*)>
c001aa74:	83 c4 10             	add    esp,0x10
c001aa77:	84 c0                	test   al,al
c001aa79:	74 04                	je     c001aa7f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa7b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa7f:	88 d8                	mov    al,bl
c001aa81:	83 c4 18             	add    esp,0x18
c001aa84:	5b                   	pop    ebx
c001aa85:	c3                   	ret    

c001aa86 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa86:	53                   	push   ebx
c001aa87:	83 ec 1c             	sub    esp,0x1c
c001aa8a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa92:	50                   	push   eax
c001aa93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa9b:	e8 29 fe ff ff       	call   c001a8c9 <Reg::readInt(char*, char*, int*)>
c001aaa0:	83 c4 10             	add    esp,0x10
c001aaa3:	84 c0                	test   al,al
c001aaa5:	74 04                	je     c001aaab <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aaa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aaab:	89 d8                	mov    eax,ebx
c001aaad:	83 c4 18             	add    esp,0x18
c001aab0:	5b                   	pop    ebx
c001aab1:	c3                   	ret    

c001aab2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aab2:	57                   	push   edi
c001aab3:	56                   	push   esi
c001aab4:	53                   	push   ebx
c001aab5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aab9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aabd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aac1:	56                   	push   esi
c001aac2:	53                   	push   ebx
c001aac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aacb:	e8 e4 fe ff ff       	call   c001a9b4 <Reg::readString(char*, char*, char*, int)>
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	84 c0                	test   al,al
c001aad5:	75 1b                	jne    c001aaf2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001aad7:	50                   	push   eax
c001aad8:	56                   	push   esi
c001aad9:	4e                   	dec    esi
c001aada:	6a 00                	push   0x0
c001aadc:	53                   	push   ebx
c001aadd:	e8 e2 5b fe ff       	call   c00006c4 <memset>
c001aae2:	83 c4 0c             	add    esp,0xc
c001aae5:	56                   	push   esi
c001aae6:	57                   	push   edi
c001aae7:	53                   	push   ebx
c001aae8:	89 fb                	mov    ebx,edi
c001aaea:	e8 b1 5b fe ff       	call   c00006a0 <memcpy>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	89 d8                	mov    eax,ebx
c001aaf4:	5b                   	pop    ebx
c001aaf5:	5e                   	pop    esi
c001aaf6:	5f                   	pop    edi
c001aaf7:	c3                   	ret    

c001aaf8 <Sys::eject(regs*)>:
c001aaf8:	83 ec 0c             	sub    esp,0xc
c001aafb:	83 ca ff             	or     edx,0xffffffff
c001aafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab02:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab05:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab0a:	83 e9 41             	sub    ecx,0x41
c001ab0d:	83 f9 19             	cmp    ecx,0x19
c001ab10:	77 18                	ja     c001ab2a <Sys::eject(regs*)+0x32>
c001ab12:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001ab19:	85 c9                	test   ecx,ecx
c001ab1b:	74 0d                	je     c001ab2a <Sys::eject(regs*)+0x32>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	51                   	push   ecx
c001ab21:	e8 20 b5 ff ff       	call   c0016046 <LogicalDisk::eject()>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	99                   	cdq    
c001ab2a:	83 c4 0c             	add    esp,0xc
c001ab2d:	c3                   	ret    

c001ab2e <Sys::exit(regs*)>:
c001ab2e:	83 ec 18             	sub    esp,0x18
c001ab31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab35:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab38:	e8 f0 33 00 00       	call   c001df2d <terminateTask(int)>
c001ab3d:	83 c8 ff             	or     eax,0xffffffff
c001ab40:	83 c4 1c             	add    esp,0x1c
c001ab43:	89 c2                	mov    edx,eax
c001ab45:	c3                   	ret    

c001ab46 <Sys::getCwd(regs*)>:
c001ab46:	83 ec 10             	sub    esp,0x10
c001ab49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab4d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab50:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab58:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab5b:	e8 ee 80 ff ff       	call   c0012c4e <Fs::getcwd(Process*, char*, int)>
c001ab60:	83 c4 1c             	add    esp,0x1c
c001ab63:	99                   	cdq    
c001ab64:	c3                   	ret    

c001ab65 <Sys::getPID(regs*)>:
c001ab65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab6f:	99                   	cdq    
c001ab70:	c3                   	ret    

c001ab71 <Sys::loadDLL(regs*)>:
c001ab71:	56                   	push   esi
c001ab72:	53                   	push   ebx
c001ab73:	31 d2                	xor    edx,edx
c001ab75:	51                   	push   ecx
c001ab76:	b8 01 00 00 00       	mov    eax,0x1
c001ab7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab7f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ab83:	0f 84 8c 00 00 00    	je     c001ac15 <Sys::loadDLL(regs*)+0xa4>
c001ab89:	83 ec 0c             	sub    esp,0xc
c001ab8c:	68 14 01 00 00       	push   0x114
c001ab91:	e8 8e 4a ff ff       	call   c000f624 <malloc>
c001ab96:	83 c4 0c             	add    esp,0xc
c001ab99:	89 c3                	mov    ebx,eax
c001ab9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aba0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aba3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aba6:	53                   	push   ebx
c001aba7:	e8 a0 82 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	31 d2                	xor    edx,edx
c001abb1:	b8 02 00 00 00       	mov    eax,0x2
c001abb6:	85 db                	test   ebx,ebx
c001abb8:	74 5b                	je     c001ac15 <Sys::loadDLL(regs*)+0xa4>
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	53                   	push   ebx
c001abbe:	e8 5b 85 ff ff       	call   c001311e <File::exists()>
c001abc3:	83 c4 10             	add    esp,0x10
c001abc6:	84 c0                	test   al,al
c001abc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abca:	75 11                	jne    c001abdd <Sys::loadDLL(regs*)+0x6c>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	53                   	push   ebx
c001abd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abd3:	83 c4 10             	add    esp,0x10
c001abd6:	b8 03 00 00 00       	mov    eax,0x3
c001abdb:	eb 36                	jmp    c001ac13 <Sys::loadDLL(regs*)+0xa2>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	53                   	push   ebx
c001abe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abe4:	58                   	pop    eax
c001abe5:	5a                   	pop    edx
c001abe6:	6a 00                	push   0x0
c001abe8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abeb:	e8 87 22 00 00       	call   c001ce77 <Thr::loadDLL(char const*, bool)>
c001abf0:	83 c4 10             	add    esp,0x10
c001abf3:	89 c1                	mov    ecx,eax
c001abf5:	31 d2                	xor    edx,edx
c001abf7:	b8 04 00 00 00       	mov    eax,0x4
c001abfc:	85 c9                	test   ecx,ecx
c001abfe:	74 15                	je     c001ac15 <Sys::loadDLL(regs*)+0xa4>
c001ac00:	53                   	push   ebx
c001ac01:	53                   	push   ebx
c001ac02:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001ac08:	51                   	push   ecx
c001ac09:	e8 78 24 00 00       	call   c001d086 <Thr::executeDLL(unsigned long, void*)>
c001ac0e:	83 c4 10             	add    esp,0x10
c001ac11:	31 c0                	xor    eax,eax
c001ac13:	31 d2                	xor    edx,edx
c001ac15:	59                   	pop    ecx
c001ac16:	5b                   	pop    ebx
c001ac17:	5e                   	pop    esi
c001ac18:	c3                   	ret    

c001ac19 <Sys::read(regs*)>:
c001ac19:	57                   	push   edi
c001ac1a:	56                   	push   esi
c001ac1b:	53                   	push   ebx
c001ac1c:	83 ec 10             	sub    esp,0x10
c001ac1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac26:	83 f8 02             	cmp    eax,0x2
c001ac29:	77 10                	ja     c001ac3b <Sys::read(regs*)+0x22>
c001ac2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac33:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac39:	eb 0e                	jmp    c001ac49 <Sys::read(regs*)+0x30>
c001ac3b:	83 ec 0c             	sub    esp,0xc
c001ac3e:	50                   	push   eax
c001ac3f:	e8 69 6b ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	89 c1                	mov    ecx,eax
c001ac49:	83 c8 ff             	or     eax,0xffffffff
c001ac4c:	85 c9                	test   ecx,ecx
c001ac4e:	89 c2                	mov    edx,eax
c001ac50:	74 28                	je     c001ac7a <Sys::read(regs*)+0x61>
c001ac52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac5a:	31 ff                	xor    edi,edi
c001ac5c:	83 ec 0c             	sub    esp,0xc
c001ac5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac61:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac65:	52                   	push   edx
c001ac66:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac69:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac6c:	57                   	push   edi
c001ac6d:	56                   	push   esi
c001ac6e:	51                   	push   ecx
c001ac6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac76:	83 c4 20             	add    esp,0x20
c001ac79:	99                   	cdq    
c001ac7a:	83 c4 10             	add    esp,0x10
c001ac7d:	5b                   	pop    ebx
c001ac7e:	5e                   	pop    esi
c001ac7f:	5f                   	pop    edi
c001ac80:	c3                   	ret    

c001ac81 <Sys::sbrk(regs*)>:
c001ac81:	56                   	push   esi
c001ac82:	53                   	push   ebx
c001ac83:	50                   	push   eax
c001ac84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac90:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ac93:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ac99:	85 db                	test   ebx,ebx
c001ac9b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ac9e:	74 02                	je     c001aca2 <Sys::sbrk(regs*)+0x21>
c001aca0:	79 06                	jns    c001aca8 <Sys::sbrk(regs*)+0x27>
c001aca2:	89 f0                	mov    eax,esi
c001aca4:	31 d2                	xor    edx,edx
c001aca6:	eb 2a                	jmp    c001acd2 <Sys::sbrk(regs*)+0x51>
c001aca8:	83 c8 ff             	or     eax,0xffffffff
c001acab:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001acb1:	89 c2                	mov    edx,eax
c001acb3:	77 1d                	ja     c001acd2 <Sys::sbrk(regs*)+0x51>
c001acb5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001acbb:	50                   	push   eax
c001acbc:	c1 ea 0c             	shr    edx,0xc
c001acbf:	68 07 04 00 00       	push   0x407
c001acc4:	52                   	push   edx
c001acc5:	51                   	push   ecx
c001acc6:	e8 03 74 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001accb:	89 f0                	mov    eax,esi
c001accd:	31 d2                	xor    edx,edx
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	59                   	pop    ecx
c001acd3:	5b                   	pop    ebx
c001acd4:	5e                   	pop    esi
c001acd5:	c3                   	ret    

c001acd6 <Sys::setCwd(regs*)>:
c001acd6:	83 ec 14             	sub    esp,0x14
c001acd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acdd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ace0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ace5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ace8:	e8 d0 84 ff ff       	call   c00131bd <Fs::setcwd(Process*, char*)>
c001aced:	83 c4 1c             	add    esp,0x1c
c001acf0:	99                   	cdq    
c001acf1:	c3                   	ret    

c001acf2 <Sys::setTime(regs*)>:
c001acf2:	55                   	push   ebp
c001acf3:	31 d2                	xor    edx,edx
c001acf5:	57                   	push   edi
c001acf6:	bf 18 00 00 00       	mov    edi,0x18
c001acfb:	56                   	push   esi
c001acfc:	53                   	push   ebx
c001acfd:	bb 3c 00 00 00       	mov    ebx,0x3c
c001ad02:	83 ec 30             	sub    esp,0x30
c001ad05:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001ad09:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001ad0c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ad0f:	f7 f3                	div    ebx
c001ad11:	89 d6                	mov    esi,edx
c001ad13:	31 d2                	xor    edx,edx
c001ad15:	f7 f3                	div    ebx
c001ad17:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ad1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad1e:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ad23:	31 d2                	xor    edx,edx
c001ad25:	f7 f3                	div    ebx
c001ad27:	31 d2                	xor    edx,edx
c001ad29:	bb 0c 00 00 00       	mov    ebx,0xc
c001ad2e:	f7 f7                	div    edi
c001ad30:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ad33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad37:	0f b7 cd             	movzx  ecx,bp
c001ad3a:	56                   	push   esi
c001ad3b:	89 c7                	mov    edi,eax
c001ad3d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ad41:	c1 e6 10             	shl    esi,0x10
c001ad44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad48:	83 e7 1f             	and    edi,0x1f
c001ad4b:	51                   	push   ecx
c001ad4c:	47                   	inc    edi
c001ad4d:	c1 e8 05             	shr    eax,0x5
c001ad50:	31 d2                	xor    edx,edx
c001ad52:	f7 f3                	div    ebx
c001ad54:	31 db                	xor    ebx,ebx
c001ad56:	52                   	push   edx
c001ad57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ad5b:	57                   	push   edi
c001ad5c:	68 a5 b4 02 c0       	push   0xc002b4a5
c001ad61:	e8 8d 7b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ad66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad6a:	89 f8                	mov    eax,edi
c001ad6c:	31 c9                	xor    ecx,ecx
c001ad6e:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ad72:	88 c1                	mov    cl,al
c001ad74:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ad7a:	88 d5                	mov    ch,dl
c001ad7c:	c1 e0 10             	shl    eax,0x10
c001ad7f:	0f b7 d1             	movzx  edx,cx
c001ad82:	09 c2                	or     edx,eax
c001ad84:	89 d8                	mov    eax,ebx
c001ad86:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ad8b:	09 f0                	or     eax,esi
c001ad8d:	89 c3                	mov    ebx,eax
c001ad8f:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ad93:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad97:	83 c4 18             	add    esp,0x18
c001ad9a:	53                   	push   ebx
c001ad9b:	52                   	push   edx
c001ad9c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ada0:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ada4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ada8:	e8 2a 8b ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c001adad:	83 c4 0c             	add    esp,0xc
c001adb0:	52                   	push   edx
c001adb1:	50                   	push   eax
c001adb2:	56                   	push   esi
c001adb3:	e8 a6 8c ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c001adb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001adc0:	51                   	push   ecx
c001adc1:	89 d6                	mov    esi,edx
c001adc3:	51                   	push   ecx
c001adc4:	c1 ee 10             	shr    esi,0x10
c001adc7:	89 f3                	mov    ebx,esi
c001adc9:	0f b6 f3             	movzx  esi,bl
c001adcc:	56                   	push   esi
c001adcd:	0f b6 f6             	movzx  esi,dh
c001add0:	0f b6 d2             	movzx  edx,dl
c001add3:	56                   	push   esi
c001add4:	52                   	push   edx
c001add5:	89 c2                	mov    edx,eax
c001add7:	c1 ea 10             	shr    edx,0x10
c001adda:	52                   	push   edx
c001addb:	0f b6 d4             	movzx  edx,ah
c001adde:	0f b6 c0             	movzx  eax,al
c001ade1:	52                   	push   edx
c001ade2:	50                   	push   eax
c001ade3:	68 c1 b4 02 c0       	push   0xc002b4c1
c001ade8:	e8 06 7b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001aded:	83 c4 2c             	add    esp,0x2c
c001adf0:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001adf5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001adf9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001adfd:	53                   	push   ebx
c001adfe:	51                   	push   ecx
c001adff:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ae05:	e8 f4 8b ff ff       	call   c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ae0a:	83 f0 01             	xor    eax,0x1
c001ae0d:	31 d2                	xor    edx,edx
c001ae0f:	0f b6 c0             	movzx  eax,al
c001ae12:	83 c4 3c             	add    esp,0x3c
c001ae15:	5b                   	pop    ebx
c001ae16:	5e                   	pop    esi
c001ae17:	5f                   	pop    edi
c001ae18:	5d                   	pop    ebp
c001ae19:	c3                   	ret    

c001ae1a <Sys::timezone(regs*)>:
c001ae1a:	53                   	push   ebx
c001ae1b:	83 ec 08             	sub    esp,0x8
c001ae1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae22:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ae26:	75 17                	jne    c001ae3f <Sys::timezone(regs*)+0x25>
c001ae28:	83 ec 0c             	sub    esp,0xc
c001ae2b:	68 dd b4 02 c0       	push   0xc002b4dd
c001ae30:	e8 be 7a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ae35:	83 c8 ff             	or     eax,0xffffffff
c001ae38:	83 c4 10             	add    esp,0x10
c001ae3b:	89 c2                	mov    edx,eax
c001ae3d:	eb 20                	jmp    c001ae5f <Sys::timezone(regs*)+0x45>
c001ae3f:	83 ec 0c             	sub    esp,0xc
c001ae42:	68 15 b5 02 c0       	push   0xc002b515
c001ae47:	e8 a7 7a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ae4c:	58                   	pop    eax
c001ae4d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae50:	e8 0b 89 ff ff       	call   c0013760 <User::loadClockSettings(int)>
c001ae55:	83 c4 10             	add    esp,0x10
c001ae58:	b8 01 00 00 00       	mov    eax,0x1
c001ae5d:	31 d2                	xor    edx,edx
c001ae5f:	83 c4 08             	add    esp,0x8
c001ae62:	5b                   	pop    ebx
c001ae63:	c3                   	ret    

c001ae64 <Sys::write(regs*)>:
c001ae64:	57                   	push   edi
c001ae65:	56                   	push   esi
c001ae66:	53                   	push   ebx
c001ae67:	83 ec 10             	sub    esp,0x10
c001ae6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae71:	83 f8 02             	cmp    eax,0x2
c001ae74:	77 10                	ja     c001ae86 <Sys::write(regs*)+0x22>
c001ae76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae7e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae84:	eb 0e                	jmp    c001ae94 <Sys::write(regs*)+0x30>
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	50                   	push   eax
c001ae8a:	e8 1e 69 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	89 c1                	mov    ecx,eax
c001ae94:	83 c8 ff             	or     eax,0xffffffff
c001ae97:	85 c9                	test   ecx,ecx
c001ae99:	89 c2                	mov    edx,eax
c001ae9b:	74 28                	je     c001aec5 <Sys::write(regs*)+0x61>
c001ae9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aea5:	31 ff                	xor    edi,edi
c001aea7:	83 ec 0c             	sub    esp,0xc
c001aeaa:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aeac:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aeb0:	52                   	push   edx
c001aeb1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aeb4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aeb7:	57                   	push   edi
c001aeb8:	56                   	push   esi
c001aeb9:	51                   	push   ecx
c001aeba:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001aebd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aec1:	83 c4 20             	add    esp,0x20
c001aec4:	99                   	cdq    
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	5b                   	pop    ebx
c001aec9:	5e                   	pop    esi
c001aeca:	5f                   	pop    edi
c001aecb:	c3                   	ret    

c001aecc <Sys::yield(regs*)>:
c001aecc:	57                   	push   edi
c001aecd:	56                   	push   esi
c001aece:	53                   	push   ebx
c001aecf:	e8 16 26 00 00       	call   c001d4ea <lockScheduler()>
c001aed4:	e8 4d 29 00 00       	call   c001d826 <schedule()>
c001aed9:	e8 0e 26 00 00       	call   c001d4ec <unlockScheduler()>
c001aede:	8b 35 50 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e150
c001aee4:	8b 3d 54 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e154
c001aeea:	89 f0                	mov    eax,esi
c001aeec:	89 fb                	mov    ebx,edi
c001aeee:	89 f1                	mov    ecx,esi
c001aef0:	c1 e0 07             	shl    eax,0x7
c001aef3:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aef7:	25 80 30 0f 00       	and    eax,0xf3080
c001aefc:	c1 eb 17             	shr    ebx,0x17
c001aeff:	31 c8                	xor    eax,ecx
c001af01:	89 da                	mov    edx,ebx
c001af03:	5b                   	pop    ebx
c001af04:	5e                   	pop    esi
c001af05:	5f                   	pop    edi
c001af06:	c3                   	ret    

c001af07 <sysCallSeekDir(regs*)>:
c001af07:	31 c0                	xor    eax,eax
c001af09:	31 d2                	xor    edx,edx
c001af0b:	c3                   	ret    

c001af0c <sysCallTellDir(regs*)>:
c001af0c:	31 c0                	xor    eax,eax
c001af0e:	31 d2                	xor    edx,edx
c001af10:	c3                   	ret    

c001af11 <sysCallVerify(regs*)>:
c001af11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af15:	31 d2                	xor    edx,edx
c001af17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af1a:	c3                   	ret    

c001af1b <sysCallGetArgc(regs*)>:
c001af1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af23:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001af29:	99                   	cdq    
c001af2a:	c3                   	ret    

c001af2b <sysFormatDisk(regs*)>:
c001af2b:	56                   	push   esi
c001af2c:	53                   	push   ebx
c001af2d:	53                   	push   ebx
c001af2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af32:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c001af38:	eb 25                	jmp    c001af5f <sysFormatDisk(regs*)+0x34>
c001af3a:	83 ec 0c             	sub    esp,0xc
c001af3d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af40:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af42:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af45:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af48:	50                   	push   eax
c001af49:	ff 34 85 e0 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f20]
c001af50:	53                   	push   ebx
c001af51:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af54:	83 c4 20             	add    esp,0x20
c001af57:	83 f8 08             	cmp    eax,0x8
c001af5a:	75 12                	jne    c001af6e <sysFormatDisk(regs*)+0x43>
c001af5c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af5f:	85 db                	test   ebx,ebx
c001af61:	75 d7                	jne    c001af3a <sysFormatDisk(regs*)+0xf>
c001af63:	59                   	pop    ecx
c001af64:	b8 03 00 00 00       	mov    eax,0x3
c001af69:	31 d2                	xor    edx,edx
c001af6b:	5b                   	pop    ebx
c001af6c:	5e                   	pop    esi
c001af6d:	c3                   	ret    
c001af6e:	85 c0                	test   eax,eax
c001af70:	74 1b                	je     c001af8d <sysFormatDisk(regs*)+0x62>
c001af72:	83 f8 09             	cmp    eax,0x9
c001af75:	74 0b                	je     c001af82 <sysFormatDisk(regs*)+0x57>
c001af77:	59                   	pop    ecx
c001af78:	b8 02 00 00 00       	mov    eax,0x2
c001af7d:	31 d2                	xor    edx,edx
c001af7f:	5b                   	pop    ebx
c001af80:	5e                   	pop    esi
c001af81:	c3                   	ret    
c001af82:	59                   	pop    ecx
c001af83:	b8 01 00 00 00       	mov    eax,0x1
c001af88:	31 d2                	xor    edx,edx
c001af8a:	5b                   	pop    ebx
c001af8b:	5e                   	pop    esi
c001af8c:	c3                   	ret    
c001af8d:	59                   	pop    ecx
c001af8e:	31 c0                	xor    eax,eax
c001af90:	31 d2                	xor    edx,edx
c001af92:	5b                   	pop    ebx
c001af93:	5e                   	pop    esi
c001af94:	c3                   	ret    

c001af95 <sysSetDiskVolumeLabel(regs*)>:
c001af95:	56                   	push   esi
c001af96:	53                   	push   ebx
c001af97:	53                   	push   ebx
c001af98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af9c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af9f:	83 f8 19             	cmp    eax,0x19
c001afa2:	77 29                	ja     c001afcd <sysSetDiskVolumeLabel(regs*)+0x38>
c001afa4:	8b 0c 85 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f20]
c001afab:	85 c9                	test   ecx,ecx
c001afad:	74 1e                	je     c001afcd <sysSetDiskVolumeLabel(regs*)+0x38>
c001afaf:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001afb2:	85 d2                	test   edx,edx
c001afb4:	74 17                	je     c001afcd <sysSetDiskVolumeLabel(regs*)+0x38>
c001afb6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001afbc:	8b 33                	mov    esi,DWORD PTR [ebx]
c001afbe:	52                   	push   edx
c001afbf:	50                   	push   eax
c001afc0:	51                   	push   ecx
c001afc1:	53                   	push   ebx
c001afc2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	99                   	cdq    
c001afc9:	59                   	pop    ecx
c001afca:	5b                   	pop    ebx
c001afcb:	5e                   	pop    esi
c001afcc:	c3                   	ret    
c001afcd:	59                   	pop    ecx
c001afce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afd8:	5b                   	pop    ebx
c001afd9:	5e                   	pop    esi
c001afda:	c3                   	ret    

c001afdb <sysGetDiskVolumeLabel(regs*)>:
c001afdb:	57                   	push   edi
c001afdc:	56                   	push   esi
c001afdd:	53                   	push   ebx
c001afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afe5:	83 fa 19             	cmp    edx,0x19
c001afe8:	77 34                	ja     c001b01e <sysGetDiskVolumeLabel(regs*)+0x43>
c001afea:	8b 0c 95 e0 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f20]
c001aff1:	85 c9                	test   ecx,ecx
c001aff3:	74 29                	je     c001b01e <sysGetDiskVolumeLabel(regs*)+0x43>
c001aff5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001aff8:	85 db                	test   ebx,ebx
c001affa:	74 22                	je     c001b01e <sysGetDiskVolumeLabel(regs*)+0x43>
c001affc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001afff:	85 c0                	test   eax,eax
c001b001:	74 1b                	je     c001b01e <sysGetDiskVolumeLabel(regs*)+0x43>
c001b003:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b009:	83 ec 0c             	sub    esp,0xc
c001b00c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b00e:	50                   	push   eax
c001b00f:	53                   	push   ebx
c001b010:	52                   	push   edx
c001b011:	51                   	push   ecx
c001b012:	56                   	push   esi
c001b013:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b016:	83 c4 20             	add    esp,0x20
c001b019:	99                   	cdq    
c001b01a:	5b                   	pop    ebx
c001b01b:	5e                   	pop    esi
c001b01c:	5f                   	pop    edi
c001b01d:	c3                   	ret    
c001b01e:	5b                   	pop    ebx
c001b01f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b024:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b029:	5e                   	pop    esi
c001b02a:	5f                   	pop    edi
c001b02b:	c3                   	ret    

c001b02c <sysShutdown(regs*)>:
c001b02c:	83 ec 0c             	sub    esp,0xc
c001b02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b033:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b036:	85 c0                	test   eax,eax
c001b038:	74 18                	je     c001b052 <sysShutdown(regs*)+0x26>
c001b03a:	83 f8 01             	cmp    eax,0x1
c001b03d:	74 38                	je     c001b077 <sysShutdown(regs*)+0x4b>
c001b03f:	83 f8 02             	cmp    eax,0x2
c001b042:	74 24                	je     c001b068 <sysShutdown(regs*)+0x3c>
c001b044:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b049:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b04e:	83 c4 0c             	add    esp,0xc
c001b051:	c3                   	ret    
c001b052:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b057:	8b 10                	mov    edx,DWORD PTR [eax]
c001b059:	6a 00                	push   0x0
c001b05b:	6a 00                	push   0x0
c001b05d:	6a 00                	push   0x0
c001b05f:	50                   	push   eax
c001b060:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b063:	83 c4 10             	add    esp,0x10
c001b066:	eb dc                	jmp    c001b044 <sysShutdown(regs*)+0x18>
c001b068:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b06d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b06f:	6a 00                	push   0x0
c001b071:	6a 00                	push   0x0
c001b073:	6a 01                	push   0x1
c001b075:	eb e8                	jmp    c001b05f <sysShutdown(regs*)+0x33>
c001b077:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c001b07c:	85 c0                	test   eax,eax
c001b07e:	74 02                	je     c001b082 <sysShutdown(regs*)+0x56>
c001b080:	ff d0                	call   eax
c001b082:	31 c0                	xor    eax,eax
c001b084:	31 d2                	xor    edx,edx
c001b086:	83 c4 0c             	add    esp,0xc
c001b089:	c3                   	ret    

c001b08a <sysCallRealpath(regs*)>:
c001b08a:	83 ec 0c             	sub    esp,0xc
c001b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b091:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b094:	85 d2                	test   edx,edx
c001b096:	74 07                	je     c001b09f <sysCallRealpath(regs*)+0x15>
c001b098:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b09b:	85 c0                	test   eax,eax
c001b09d:	75 0b                	jne    c001b0aa <sysCallRealpath(regs*)+0x20>
c001b09f:	b8 01 00 00 00       	mov    eax,0x1
c001b0a4:	31 d2                	xor    edx,edx
c001b0a6:	83 c4 0c             	add    esp,0xc
c001b0a9:	c3                   	ret    
c001b0aa:	51                   	push   ecx
c001b0ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b0b1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b0b4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b0ba:	51                   	push   ecx
c001b0bb:	52                   	push   edx
c001b0bc:	50                   	push   eax
c001b0bd:	e8 e0 7b ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b0c2:	83 c4 10             	add    esp,0x10
c001b0c5:	31 c0                	xor    eax,eax
c001b0c7:	31 d2                	xor    edx,edx
c001b0c9:	83 c4 0c             	add    esp,0xc
c001b0cc:	c3                   	ret    

c001b0cd <sysCallReadDir(regs*)>:
c001b0cd:	53                   	push   ebx
c001b0ce:	83 ec 18             	sub    esp,0x18
c001b0d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0d5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b0d8:	83 f8 02             	cmp    eax,0x2
c001b0db:	76 53                	jbe    c001b130 <sysCallReadDir(regs*)+0x63>
c001b0dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b0e0:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b0e6:	77 4f                	ja     c001b137 <sysCallReadDir(regs*)+0x6a>
c001b0e8:	83 ec 0c             	sub    esp,0xc
c001b0eb:	50                   	push   eax
c001b0ec:	e8 bc 66 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b0f1:	83 c4 10             	add    esp,0x10
c001b0f4:	85 c0                	test   eax,eax
c001b0f6:	74 50                	je     c001b148 <sysCallReadDir(regs*)+0x7b>
c001b0f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	8b 10                	mov    edx,DWORD PTR [eax]
c001b105:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b109:	51                   	push   ecx
c001b10a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b10d:	6a 00                	push   0x0
c001b10f:	68 10 01 00 00       	push   0x110
c001b114:	50                   	push   eax
c001b115:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b118:	83 c4 20             	add    esp,0x20
c001b11b:	85 c0                	test   eax,eax
c001b11d:	74 38                	je     c001b157 <sysCallReadDir(regs*)+0x8a>
c001b11f:	83 f8 07             	cmp    eax,0x7
c001b122:	74 0c                	je     c001b130 <sysCallReadDir(regs*)+0x63>
c001b124:	b8 02 00 00 00       	mov    eax,0x2
c001b129:	31 d2                	xor    edx,edx
c001b12b:	83 c4 18             	add    esp,0x18
c001b12e:	5b                   	pop    ebx
c001b12f:	c3                   	ret    
c001b130:	b8 01 00 00 00       	mov    eax,0x1
c001b135:	eb f2                	jmp    c001b129 <sysCallReadDir(regs*)+0x5c>
c001b137:	83 ec 08             	sub    esp,0x8
c001b13a:	52                   	push   edx
c001b13b:	68 54 b5 02 c0       	push   0xc002b554
c001b140:	e8 ae 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b14d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b152:	83 c4 18             	add    esp,0x18
c001b155:	5b                   	pop    ebx
c001b156:	c3                   	ret    
c001b157:	31 c0                	xor    eax,eax
c001b159:	eb ce                	jmp    c001b129 <sysCallReadDir(regs*)+0x5c>

c001b15b <sysCallIsATTY(regs*)>:
c001b15b:	83 ec 0c             	sub    esp,0xc
c001b15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b162:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b165:	83 f8 02             	cmp    eax,0x2
c001b168:	76 07                	jbe    c001b171 <sysCallIsATTY(regs*)+0x16>
c001b16a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b16f:	75 26                	jne    c001b197 <sysCallIsATTY(regs*)+0x3c>
c001b171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b176:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b179:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b17f:	85 c0                	test   eax,eax
c001b181:	74 24                	je     c001b1a7 <sysCallIsATTY(regs*)+0x4c>
c001b183:	83 ec 0c             	sub    esp,0xc
c001b186:	8b 10                	mov    edx,DWORD PTR [eax]
c001b188:	50                   	push   eax
c001b189:	ff 12                	call   DWORD PTR [edx]
c001b18b:	31 d2                	xor    edx,edx
c001b18d:	0f b6 c0             	movzx  eax,al
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	83 c4 0c             	add    esp,0xc
c001b196:	c3                   	ret    
c001b197:	83 ec 0c             	sub    esp,0xc
c001b19a:	50                   	push   eax
c001b19b:	e8 0d 66 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b1a0:	83 c4 10             	add    esp,0x10
c001b1a3:	85 c0                	test   eax,eax
c001b1a5:	75 dc                	jne    c001b183 <sysCallIsATTY(regs*)+0x28>
c001b1a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b1:	83 c4 0c             	add    esp,0xc
c001b1b4:	c3                   	ret    

c001b1b5 <sysCallSeek(regs*)>:
c001b1b5:	53                   	push   ebx
c001b1b6:	83 ec 08             	sub    esp,0x8
c001b1b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1c0:	83 f8 02             	cmp    eax,0x2
c001b1c3:	76 4a                	jbe    c001b20f <sysCallSeek(regs*)+0x5a>
c001b1c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b1ca:	77 32                	ja     c001b1fe <sysCallSeek(regs*)+0x49>
c001b1cc:	83 ec 0c             	sub    esp,0xc
c001b1cf:	50                   	push   eax
c001b1d0:	e8 d8 65 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b1d5:	83 c4 0c             	add    esp,0xc
c001b1d8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1db:	31 db                	xor    ebx,ebx
c001b1dd:	53                   	push   ebx
c001b1de:	51                   	push   ecx
c001b1df:	50                   	push   eax
c001b1e0:	e8 89 7d ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	85 c0                	test   eax,eax
c001b1ea:	0f 95 c0             	setne  al
c001b1ed:	31 d2                	xor    edx,edx
c001b1ef:	0f b6 c0             	movzx  eax,al
c001b1f2:	f7 d8                	neg    eax
c001b1f4:	83 d2 00             	adc    edx,0x0
c001b1f7:	83 c4 08             	add    esp,0x8
c001b1fa:	f7 da                	neg    edx
c001b1fc:	5b                   	pop    ebx
c001b1fd:	c3                   	ret    
c001b1fe:	83 ec 08             	sub    esp,0x8
c001b201:	50                   	push   eax
c001b202:	68 c3 b5 02 c0       	push   0xc002b5c3
c001b207:	e8 e7 76 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b214:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b219:	83 c4 08             	add    esp,0x8
c001b21c:	5b                   	pop    ebx
c001b21d:	c3                   	ret    

c001b21e <sysCallTell(regs*)>:
c001b21e:	53                   	push   ebx
c001b21f:	83 ec 08             	sub    esp,0x8
c001b222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b226:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b229:	83 f8 02             	cmp    eax,0x2
c001b22c:	76 5e                	jbe    c001b28c <sysCallTell(regs*)+0x6e>
c001b22e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b233:	77 2d                	ja     c001b262 <sysCallTell(regs*)+0x44>
c001b235:	83 ec 0c             	sub    esp,0xc
c001b238:	50                   	push   eax
c001b239:	e8 6f 65 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b23e:	5a                   	pop    edx
c001b23f:	59                   	pop    ecx
c001b240:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b243:	50                   	push   eax
c001b244:	e8 7b 7d ff ff       	call   c0012fc4 <File::tell(unsigned long long*)>
c001b249:	83 c4 10             	add    esp,0x10
c001b24c:	85 c0                	test   eax,eax
c001b24e:	0f 95 c0             	setne  al
c001b251:	31 d2                	xor    edx,edx
c001b253:	0f b6 c0             	movzx  eax,al
c001b256:	f7 d8                	neg    eax
c001b258:	83 d2 00             	adc    edx,0x0
c001b25b:	83 c4 08             	add    esp,0x8
c001b25e:	f7 da                	neg    edx
c001b260:	5b                   	pop    ebx
c001b261:	c3                   	ret    
c001b262:	83 ec 08             	sub    esp,0x8
c001b265:	50                   	push   eax
c001b266:	68 dd b5 02 c0       	push   0xc002b5dd
c001b26b:	e8 83 76 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b270:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b273:	83 c4 10             	add    esp,0x10
c001b276:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b27c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b283:	31 d2                	xor    edx,edx
c001b285:	31 c0                	xor    eax,eax
c001b287:	83 c4 08             	add    esp,0x8
c001b28a:	5b                   	pop    ebx
c001b28b:	c3                   	ret    
c001b28c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b291:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b296:	83 c4 08             	add    esp,0x8
c001b299:	5b                   	pop    ebx
c001b29a:	c3                   	ret    

c001b29b <sysCallSize(regs*)>:
c001b29b:	53                   	push   ebx
c001b29c:	83 ec 18             	sub    esp,0x18
c001b29f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2a6:	83 f8 02             	cmp    eax,0x2
c001b2a9:	76 64                	jbe    c001b30f <sysCallSize(regs*)+0x74>
c001b2ab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2b0:	77 33                	ja     c001b2e5 <sysCallSize(regs*)+0x4a>
c001b2b2:	83 ec 0c             	sub    esp,0xc
c001b2b5:	50                   	push   eax
c001b2b6:	e8 f2 64 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b2bb:	83 c4 0c             	add    esp,0xc
c001b2be:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b2c2:	52                   	push   edx
c001b2c3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b2c6:	50                   	push   eax
c001b2c7:	e8 90 7e ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b2cc:	83 c4 10             	add    esp,0x10
c001b2cf:	85 c0                	test   eax,eax
c001b2d1:	0f 95 c0             	setne  al
c001b2d4:	31 d2                	xor    edx,edx
c001b2d6:	0f b6 c0             	movzx  eax,al
c001b2d9:	f7 d8                	neg    eax
c001b2db:	83 d2 00             	adc    edx,0x0
c001b2de:	83 c4 18             	add    esp,0x18
c001b2e1:	f7 da                	neg    edx
c001b2e3:	5b                   	pop    ebx
c001b2e4:	c3                   	ret    
c001b2e5:	83 ec 08             	sub    esp,0x8
c001b2e8:	50                   	push   eax
c001b2e9:	68 f7 b5 02 c0       	push   0xc002b5f7
c001b2ee:	e8 00 76 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b2f3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b306:	31 d2                	xor    edx,edx
c001b308:	31 c0                	xor    eax,eax
c001b30a:	83 c4 18             	add    esp,0x18
c001b30d:	5b                   	pop    ebx
c001b30e:	c3                   	ret    
c001b30f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b314:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b319:	83 c4 18             	add    esp,0x18
c001b31c:	5b                   	pop    ebx
c001b31d:	c3                   	ret    

c001b31e <sysCallSizeFromFilename(regs*)>:
c001b31e:	57                   	push   edi
c001b31f:	56                   	push   esi
c001b320:	53                   	push   ebx
c001b321:	83 ec 20             	sub    esp,0x20
c001b324:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b328:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b32b:	83 fb 02             	cmp    ebx,0x2
c001b32e:	0f 86 99 00 00 00    	jbe    c001b3cd <sysCallSizeFromFilename(regs*)+0xaf>
c001b334:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b33a:	77 65                	ja     c001b3a1 <sysCallSizeFromFilename(regs*)+0x83>
c001b33c:	83 ec 0c             	sub    esp,0xc
c001b33f:	68 14 01 00 00       	push   0x114
c001b344:	e8 db 42 ff ff       	call   c000f624 <malloc>
c001b349:	83 c4 0c             	add    esp,0xc
c001b34c:	89 c6                	mov    esi,eax
c001b34e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b353:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b356:	53                   	push   ebx
c001b357:	56                   	push   esi
c001b358:	e8 ef 7a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b35d:	83 c4 0c             	add    esp,0xc
c001b360:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b364:	50                   	push   eax
c001b365:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b368:	56                   	push   esi
c001b369:	e8 ee 7d ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b36e:	83 c4 10             	add    esp,0x10
c001b371:	85 f6                	test   esi,esi
c001b373:	74 14                	je     c001b389 <sysCallSizeFromFilename(regs*)+0x6b>
c001b375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b379:	8b 16                	mov    edx,DWORD PTR [esi]
c001b37b:	83 ec 0c             	sub    esp,0xc
c001b37e:	56                   	push   esi
c001b37f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b389:	85 c0                	test   eax,eax
c001b38b:	0f 95 c0             	setne  al
c001b38e:	31 d2                	xor    edx,edx
c001b390:	0f b6 c0             	movzx  eax,al
c001b393:	f7 d8                	neg    eax
c001b395:	83 d2 00             	adc    edx,0x0
c001b398:	83 c4 20             	add    esp,0x20
c001b39b:	f7 da                	neg    edx
c001b39d:	5b                   	pop    ebx
c001b39e:	5e                   	pop    esi
c001b39f:	5f                   	pop    edi
c001b3a0:	c3                   	ret    
c001b3a1:	83 ec 08             	sub    esp,0x8
c001b3a4:	53                   	push   ebx
c001b3a5:	68 f7 b5 02 c0       	push   0xc002b5f7
c001b3aa:	e8 44 75 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b3af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b3b2:	83 c4 10             	add    esp,0x10
c001b3b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3c2:	31 d2                	xor    edx,edx
c001b3c4:	83 c4 20             	add    esp,0x20
c001b3c7:	31 c0                	xor    eax,eax
c001b3c9:	5b                   	pop    ebx
c001b3ca:	5e                   	pop    esi
c001b3cb:	5f                   	pop    edi
c001b3cc:	c3                   	ret    
c001b3cd:	83 c4 20             	add    esp,0x20
c001b3d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d5:	5b                   	pop    ebx
c001b3d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3db:	5e                   	pop    esi
c001b3dc:	5f                   	pop    edi
c001b3dd:	c3                   	ret    

c001b3de <sysCallClose(regs*)>:
c001b3de:	53                   	push   ebx
c001b3df:	83 ec 08             	sub    esp,0x8
c001b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3e9:	83 f8 02             	cmp    eax,0x2
c001b3ec:	76 50                	jbe    c001b43e <sysCallClose(regs*)+0x60>
c001b3ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3f3:	74 58                	je     c001b44d <sysCallClose(regs*)+0x6f>
c001b3f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3fa:	74 60                	je     c001b45c <sysCallClose(regs*)+0x7e>
c001b3fc:	77 2f                	ja     c001b42d <sysCallClose(regs*)+0x4f>
c001b3fe:	83 ec 0c             	sub    esp,0xc
c001b401:	50                   	push   eax
c001b402:	e8 a6 63 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b407:	89 c3                	mov    ebx,eax
c001b409:	89 04 24             	mov    DWORD PTR [esp],eax
c001b40c:	e8 fd 7a ff ff       	call   c0012f0e <File::close()>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	85 db                	test   ebx,ebx
c001b416:	74 0c                	je     c001b424 <sysCallClose(regs*)+0x46>
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b41d:	53                   	push   ebx
c001b41e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	31 c0                	xor    eax,eax
c001b426:	31 d2                	xor    edx,edx
c001b428:	83 c4 08             	add    esp,0x8
c001b42b:	5b                   	pop    ebx
c001b42c:	c3                   	ret    
c001b42d:	83 ec 08             	sub    esp,0x8
c001b430:	50                   	push   eax
c001b431:	68 78 b5 02 c0       	push   0xc002b578
c001b436:	e8 b8 74 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b443:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b448:	83 c4 08             	add    esp,0x8
c001b44b:	5b                   	pop    ebx
c001b44c:	c3                   	ret    
c001b44d:	83 ec 0c             	sub    esp,0xc
c001b450:	68 12 b6 02 c0       	push   0xc002b612
c001b455:	e8 99 74 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b45a:	eb c5                	jmp    c001b421 <sysCallClose(regs*)+0x43>
c001b45c:	83 ec 0c             	sub    esp,0xc
c001b45f:	68 20 b6 02 c0       	push   0xc002b620
c001b464:	eb ef                	jmp    c001b455 <sysCallClose(regs*)+0x77>

c001b466 <sysCallOpenDir(regs*)>:
c001b466:	56                   	push   esi
c001b467:	53                   	push   ebx
c001b468:	53                   	push   ebx
c001b469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b46d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b470:	85 f6                	test   esi,esi
c001b472:	74 59                	je     c001b4cd <sysCallOpenDir(regs*)+0x67>
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	68 14 01 00 00       	push   0x114
c001b47c:	e8 a3 41 ff ff       	call   c000f624 <malloc>
c001b481:	83 c4 0c             	add    esp,0xc
c001b484:	89 c6                	mov    esi,eax
c001b486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b48b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b48e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b491:	56                   	push   esi
c001b492:	e8 61 7e ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	85 f6                	test   esi,esi
c001b49c:	74 2f                	je     c001b4cd <sysCallOpenDir(regs*)+0x67>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	56                   	push   esi
c001b4a2:	e8 b5 7e ff ff       	call   c001335c <Directory::open()>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	85 c0                	test   eax,eax
c001b4ac:	75 1f                	jne    c001b4cd <sysCallOpenDir(regs*)+0x67>
c001b4ae:	83 ec 0c             	sub    esp,0xc
c001b4b1:	56                   	push   esi
c001b4b2:	e8 01 60 ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b4b7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	89 02                	mov    DWORD PTR [edx],eax
c001b4bf:	c1 f8 1f             	sar    eax,0x1f
c001b4c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4c5:	31 c0                	xor    eax,eax
c001b4c7:	59                   	pop    ecx
c001b4c8:	31 d2                	xor    edx,edx
c001b4ca:	5b                   	pop    ebx
c001b4cb:	5e                   	pop    esi
c001b4cc:	c3                   	ret    
c001b4cd:	59                   	pop    ecx
c001b4ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4d8:	5b                   	pop    ebx
c001b4d9:	5e                   	pop    esi
c001b4da:	c3                   	ret    

c001b4db <sysCallCloseDir(regs*)>:
c001b4db:	53                   	push   ebx
c001b4dc:	83 ec 08             	sub    esp,0x8
c001b4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4e6:	83 f8 02             	cmp    eax,0x2
c001b4e9:	76 47                	jbe    c001b532 <sysCallCloseDir(regs*)+0x57>
c001b4eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4f0:	77 2f                	ja     c001b521 <sysCallCloseDir(regs*)+0x46>
c001b4f2:	83 ec 0c             	sub    esp,0xc
c001b4f5:	50                   	push   eax
c001b4f6:	e8 b2 62 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b4fb:	89 c3                	mov    ebx,eax
c001b4fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b500:	e8 b3 7e ff ff       	call   c00133b8 <Directory::close()>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	85 db                	test   ebx,ebx
c001b50a:	74 0c                	je     c001b518 <sysCallCloseDir(regs*)+0x3d>
c001b50c:	83 ec 0c             	sub    esp,0xc
c001b50f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b511:	53                   	push   ebx
c001b512:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b515:	83 c4 10             	add    esp,0x10
c001b518:	31 c0                	xor    eax,eax
c001b51a:	31 d2                	xor    edx,edx
c001b51c:	83 c4 08             	add    esp,0x8
c001b51f:	5b                   	pop    ebx
c001b520:	c3                   	ret    
c001b521:	83 ec 08             	sub    esp,0x8
c001b524:	50                   	push   eax
c001b525:	68 a0 b5 02 c0       	push   0xc002b5a0
c001b52a:	e8 c4 73 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b52f:	83 c4 10             	add    esp,0x10
c001b532:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b537:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b53c:	83 c4 08             	add    esp,0x8
c001b53f:	5b                   	pop    ebx
c001b540:	c3                   	ret    

c001b541 <sysCallMakeDir(regs*)>:
c001b541:	56                   	push   esi
c001b542:	53                   	push   ebx
c001b543:	83 ec 10             	sub    esp,0x10
c001b546:	68 14 01 00 00       	push   0x114
c001b54b:	e8 d4 40 ff ff       	call   c000f624 <malloc>
c001b550:	83 c4 0c             	add    esp,0xc
c001b553:	89 c3                	mov    ebx,eax
c001b555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b55a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b55d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b561:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b564:	53                   	push   ebx
c001b565:	e8 8e 7d ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b56a:	83 c4 10             	add    esp,0x10
c001b56d:	85 db                	test   ebx,ebx
c001b56f:	74 32                	je     c001b5a3 <sysCallMakeDir(regs*)+0x62>
c001b571:	83 ec 0c             	sub    esp,0xc
c001b574:	53                   	push   ebx
c001b575:	e8 c2 7f ff ff       	call   c001353c <Directory::create()>
c001b57a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b57d:	89 c6                	mov    esi,eax
c001b57f:	e8 34 7e ff ff       	call   c00133b8 <Directory::close()>
c001b584:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b586:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	31 c0                	xor    eax,eax
c001b591:	59                   	pop    ecx
c001b592:	85 f6                	test   esi,esi
c001b594:	5b                   	pop    ebx
c001b595:	0f 95 c0             	setne  al
c001b598:	5e                   	pop    esi
c001b599:	31 d2                	xor    edx,edx
c001b59b:	f7 d8                	neg    eax
c001b59d:	83 d2 00             	adc    edx,0x0
c001b5a0:	f7 da                	neg    edx
c001b5a2:	c3                   	ret    
c001b5a3:	59                   	pop    ecx
c001b5a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5ae:	5b                   	pop    ebx
c001b5af:	5e                   	pop    esi
c001b5b0:	c3                   	ret    

c001b5b1 <sysCallWait(regs*)>:
c001b5b1:	83 ec 10             	sub    esp,0x10
c001b5b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5b8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b5bb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b5c1:	e8 db 23 00 00       	call   c001d9a1 <waitTask(int, int*, int)>
c001b5c6:	83 c4 1c             	add    esp,0x1c
c001b5c9:	99                   	cdq    
c001b5ca:	c3                   	ret    

c001b5cb <sysCallNotImpl(regs*)>:
c001b5cb:	83 ec 18             	sub    esp,0x18
c001b5ce:	68 2e b6 02 c0       	push   0xc002b62e
c001b5d3:	e8 c1 e8 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001b5d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5e2:	83 c4 1c             	add    esp,0x1c
c001b5e5:	c3                   	ret    

c001b5e6 <sysPanic(regs*)>:
c001b5e6:	83 ec 18             	sub    esp,0x18
c001b5e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5ed:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5f0:	e8 a4 e8 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001b5f5:	c7 04 24 48 b6 02 c0 	mov    DWORD PTR [esp],0xc002b648
c001b5fc:	e8 98 e8 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001b601:	b8 01 00 00 00       	mov    eax,0x1
c001b606:	31 d2                	xor    edx,edx
c001b608:	83 c4 1c             	add    esp,0x1c
c001b60b:	c3                   	ret    

c001b60c <sysCallRmdir(regs*)>:
c001b60c:	56                   	push   esi
c001b60d:	53                   	push   ebx
c001b60e:	83 ec 20             	sub    esp,0x20
c001b611:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b615:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b618:	68 14 01 00 00       	push   0x114
c001b61d:	e8 02 40 ff ff       	call   c000f624 <malloc>
c001b622:	83 c4 0c             	add    esp,0xc
c001b625:	89 c3                	mov    ebx,eax
c001b627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b62c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b62f:	56                   	push   esi
c001b630:	53                   	push   ebx
c001b631:	e8 16 78 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b636:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b639:	e8 ea 79 ff ff       	call   c0013028 <File::unlink()>
c001b63e:	83 c4 10             	add    esp,0x10
c001b641:	85 db                	test   ebx,ebx
c001b643:	74 14                	je     c001b659 <sysCallRmdir(regs*)+0x4d>
c001b645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b649:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b64b:	83 ec 0c             	sub    esp,0xc
c001b64e:	53                   	push   ebx
c001b64f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b659:	85 c0                	test   eax,eax
c001b65b:	0f 95 c0             	setne  al
c001b65e:	31 d2                	xor    edx,edx
c001b660:	0f b6 c0             	movzx  eax,al
c001b663:	f7 d8                	neg    eax
c001b665:	83 d2 00             	adc    edx,0x0
c001b668:	83 c4 14             	add    esp,0x14
c001b66b:	f7 da                	neg    edx
c001b66d:	5b                   	pop    ebx
c001b66e:	5e                   	pop    esi
c001b66f:	c3                   	ret    

c001b670 <sysCallUnlink(regs*)>:
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 20             	sub    esp,0x20
c001b675:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b679:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b67c:	68 14 01 00 00       	push   0x114
c001b681:	e8 9e 3f ff ff       	call   c000f624 <malloc>
c001b686:	83 c4 0c             	add    esp,0xc
c001b689:	89 c3                	mov    ebx,eax
c001b68b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b690:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b693:	56                   	push   esi
c001b694:	53                   	push   ebx
c001b695:	e8 b2 77 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b69a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b69d:	e8 86 79 ff ff       	call   c0013028 <File::unlink()>
c001b6a2:	83 c4 10             	add    esp,0x10
c001b6a5:	85 db                	test   ebx,ebx
c001b6a7:	74 14                	je     c001b6bd <sysCallUnlink(regs*)+0x4d>
c001b6a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6af:	83 ec 0c             	sub    esp,0xc
c001b6b2:	53                   	push   ebx
c001b6b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6b6:	83 c4 10             	add    esp,0x10
c001b6b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6bd:	85 c0                	test   eax,eax
c001b6bf:	0f 95 c0             	setne  al
c001b6c2:	31 d2                	xor    edx,edx
c001b6c4:	0f b6 c0             	movzx  eax,al
c001b6c7:	f7 d8                	neg    eax
c001b6c9:	83 d2 00             	adc    edx,0x0
c001b6cc:	83 c4 14             	add    esp,0x14
c001b6cf:	f7 da                	neg    edx
c001b6d1:	5b                   	pop    ebx
c001b6d2:	5e                   	pop    esi
c001b6d3:	c3                   	ret    

c001b6d4 <sysCallGetArgv(regs*)>:
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6db:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6de:	85 c0                	test   eax,eax
c001b6e0:	78 2b                	js     c001b70d <sysCallGetArgv(regs*)+0x39>
c001b6e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6e8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6eb:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b6f1:	7d 1a                	jge    c001b70d <sysCallGetArgv(regs*)+0x39>
c001b6f3:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b6fa:	85 c0                	test   eax,eax
c001b6fc:	74 17                	je     c001b715 <sysCallGetArgv(regs*)+0x41>
c001b6fe:	83 ec 08             	sub    esp,0x8
c001b701:	50                   	push   eax
c001b702:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b705:	e8 59 50 fe ff       	call   c0000763 <strcpy>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	31 c0                	xor    eax,eax
c001b70f:	31 d2                	xor    edx,edx
c001b711:	83 c4 0c             	add    esp,0xc
c001b714:	c3                   	ret    
c001b715:	b8 01 00 00 00       	mov    eax,0x1
c001b71a:	31 d2                	xor    edx,edx
c001b71c:	83 c4 0c             	add    esp,0xc
c001b71f:	c3                   	ret    

c001b720 <sysCallTTYName(regs*)>:
c001b720:	56                   	push   esi
c001b721:	53                   	push   ebx
c001b722:	53                   	push   ebx
c001b723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b727:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b72a:	85 c0                	test   eax,eax
c001b72c:	74 5f                	je     c001b78d <sysCallTTYName(regs*)+0x6d>
c001b72e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b731:	83 f8 02             	cmp    eax,0x2
c001b734:	77 3e                	ja     c001b774 <sysCallTTYName(regs*)+0x54>
c001b736:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b73e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b744:	85 db                	test   ebx,ebx
c001b746:	74 45                	je     c001b78d <sysCallTTYName(regs*)+0x6d>
c001b748:	83 ec 0c             	sub    esp,0xc
c001b74b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b74d:	53                   	push   ebx
c001b74e:	ff 10                	call   DWORD PTR [eax]
c001b750:	83 c4 10             	add    esp,0x10
c001b753:	84 c0                	test   al,al
c001b755:	74 41                	je     c001b798 <sysCallTTYName(regs*)+0x78>
c001b757:	83 ec 08             	sub    esp,0x8
c001b75a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b760:	53                   	push   ebx
c001b761:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b764:	e8 fa 4f fe ff       	call   c0000763 <strcpy>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	31 c0                	xor    eax,eax
c001b76e:	59                   	pop    ecx
c001b76f:	31 d2                	xor    edx,edx
c001b771:	5b                   	pop    ebx
c001b772:	5e                   	pop    esi
c001b773:	c3                   	ret    
c001b774:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b779:	74 bb                	je     c001b736 <sysCallTTYName(regs*)+0x16>
c001b77b:	83 ec 0c             	sub    esp,0xc
c001b77e:	50                   	push   eax
c001b77f:	e8 29 60 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b784:	83 c4 10             	add    esp,0x10
c001b787:	89 c3                	mov    ebx,eax
c001b789:	85 db                	test   ebx,ebx
c001b78b:	75 bb                	jne    c001b748 <sysCallTTYName(regs*)+0x28>
c001b78d:	59                   	pop    ecx
c001b78e:	b8 01 00 00 00       	mov    eax,0x1
c001b793:	31 d2                	xor    edx,edx
c001b795:	5b                   	pop    ebx
c001b796:	5e                   	pop    esi
c001b797:	c3                   	ret    
c001b798:	59                   	pop    ecx
c001b799:	b8 02 00 00 00       	mov    eax,0x2
c001b79e:	31 d2                	xor    edx,edx
c001b7a0:	5b                   	pop    ebx
c001b7a1:	5e                   	pop    esi
c001b7a2:	c3                   	ret    

c001b7a3 <sysCallUSleep(regs*)>:
c001b7a3:	83 ec 14             	sub    esp,0x14
c001b7a6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b7ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7af:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b7b6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b7b9:	01 ca                	add    edx,ecx
c001b7bb:	52                   	push   edx
c001b7bc:	50                   	push   eax
c001b7bd:	e8 78 22 00 00       	call   c001da3a <nanoSleep(unsigned long long)>
c001b7c2:	31 c0                	xor    eax,eax
c001b7c4:	31 d2                	xor    edx,edx
c001b7c6:	83 c4 1c             	add    esp,0x1c
c001b7c9:	c3                   	ret    

c001b7ca <sysCallSpawn(regs*)>:
c001b7ca:	56                   	push   esi
c001b7cb:	53                   	push   ebx
c001b7cc:	53                   	push   ebx
c001b7cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7d1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7d4:	85 f6                	test   esi,esi
c001b7d6:	75 08                	jne    c001b7e0 <sysCallSpawn(regs*)+0x16>
c001b7d8:	59                   	pop    ecx
c001b7d9:	31 c0                	xor    eax,eax
c001b7db:	31 d2                	xor    edx,edx
c001b7dd:	5b                   	pop    ebx
c001b7de:	5e                   	pop    esi
c001b7df:	c3                   	ret    
c001b7e0:	83 ec 0c             	sub    esp,0xc
c001b7e3:	68 3f 07 00 00       	push   0x73f
c001b7e8:	e8 37 3e ff ff       	call   c000f624 <malloc>
c001b7ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b7f0:	89 c6                	mov    esi,eax
c001b7f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7f7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7fd:	56                   	push   esi
c001b7fe:	e8 37 19 00 00       	call   c001d13a <Process::Process(char const*, Process*, char**)>
c001b803:	83 c4 20             	add    esp,0x20
c001b806:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b80d:	75 c9                	jne    c001b7d8 <sysCallSpawn(regs*)+0xe>
c001b80f:	83 ec 0c             	sub    esp,0xc
c001b812:	56                   	push   esi
c001b813:	e8 e8 1e 00 00       	call   c001d700 <Process::createUserThread()>
c001b818:	8b 06                	mov    eax,DWORD PTR [esi]
c001b81a:	83 c4 10             	add    esp,0x10
c001b81d:	99                   	cdq    
c001b81e:	59                   	pop    ecx
c001b81f:	5b                   	pop    ebx
c001b820:	5e                   	pop    esi
c001b821:	c3                   	ret    

c001b822 <sysCallGetEnv(regs*)>:
c001b822:	57                   	push   edi
c001b823:	56                   	push   esi
c001b824:	53                   	push   ebx
c001b825:	83 ec 1c             	sub    esp,0x1c
c001b828:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b82c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b831:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b834:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b837:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b83a:	e8 76 e5 ff ff       	call   c0019db5 <Krnl::getProcessTotalEnvCount(Process*)>
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	39 c7                	cmp    edi,eax
c001b844:	7c 14                	jl     c001b85a <sysCallGetEnv(regs*)+0x38>
c001b846:	85 f6                	test   esi,esi
c001b848:	75 0b                	jne    c001b855 <sysCallGetEnv(regs*)+0x33>
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	31 c0                	xor    eax,eax
c001b84f:	5b                   	pop    ebx
c001b850:	31 d2                	xor    edx,edx
c001b852:	5e                   	pop    esi
c001b853:	5f                   	pop    edi
c001b854:	c3                   	ret    
c001b855:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b858:	eb f0                	jmp    c001b84a <sysCallGetEnv(regs*)+0x28>
c001b85a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b85e:	52                   	push   edx
c001b85f:	57                   	push   edi
c001b860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b866:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b869:	50                   	push   eax
c001b86a:	e8 66 e5 ff ff       	call   c0019dd5 <Krnl::getProcessEnvPair(Process*, int)>
c001b86f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b876:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b87a:	83 c4 0c             	add    esp,0xc
c001b87d:	85 c9                	test   ecx,ecx
c001b87f:	75 23                	jne    c001b8a4 <sysCallGetEnv(regs*)+0x82>
c001b881:	83 ec 0c             	sub    esp,0xc
c001b884:	50                   	push   eax
c001b885:	e8 57 4e fe ff       	call   c00006e1 <strlen>
c001b88a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b88d:	89 c3                	mov    ebx,eax
c001b88f:	e8 4d 4e fe ff       	call   c00006e1 <strlen>
c001b894:	83 c4 10             	add    esp,0x10
c001b897:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	31 d2                	xor    edx,edx
c001b8a0:	5b                   	pop    ebx
c001b8a1:	5e                   	pop    esi
c001b8a2:	5f                   	pop    edi
c001b8a3:	c3                   	ret    
c001b8a4:	83 ec 08             	sub    esp,0x8
c001b8a7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8aa:	50                   	push   eax
c001b8ab:	56                   	push   esi
c001b8ac:	e8 b2 4e fe ff       	call   c0000763 <strcpy>
c001b8b1:	58                   	pop    eax
c001b8b2:	5a                   	pop    edx
c001b8b3:	68 57 b6 02 c0       	push   0xc002b657
c001b8b8:	56                   	push   esi
c001b8b9:	e8 5c 4f fe ff       	call   c000081a <strcat>
c001b8be:	59                   	pop    ecx
c001b8bf:	5b                   	pop    ebx
c001b8c0:	57                   	push   edi
c001b8c1:	56                   	push   esi
c001b8c2:	e8 53 4f fe ff       	call   c000081a <strcat>
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	e9 7b ff ff ff       	jmp    c001b84a <sysCallGetEnv(regs*)+0x28>

c001b8cf <sysAppSettings(regs*)>:
c001b8cf:	53                   	push   ebx
c001b8d0:	83 ec 08             	sub    esp,0x8
c001b8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8da:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b8e0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b8e5:	66 3d c0 09          	cmp    ax,0x9c0
c001b8e9:	75 2f                	jne    c001b91a <sysAppSettings(regs*)+0x4b>
c001b8eb:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b8f1:	83 e0 1f             	and    eax,0x1f
c001b8f4:	3c 01                	cmp    al,0x1
c001b8f6:	74 2e                	je     c001b926 <sysAppSettings(regs*)+0x57>
c001b8f8:	3c 07                	cmp    al,0x7
c001b8fa:	0f 84 bd 00 00 00    	je     c001b9bd <sysAppSettings(regs*)+0xee>
c001b900:	84 c0                	test   al,al
c001b902:	0f 84 dc 00 00 00    	je     c001b9e4 <sysAppSettings(regs*)+0x115>
c001b908:	3c 08                	cmp    al,0x8
c001b90a:	74 6d                	je     c001b979 <sysAppSettings(regs*)+0xaa>
c001b90c:	0f b6 c0             	movzx  eax,al
c001b90f:	83 c4 08             	add    esp,0x8
c001b912:	05 e8 03 00 00       	add    eax,0x3e8
c001b917:	5b                   	pop    ebx
c001b918:	99                   	cdq    
c001b919:	c3                   	ret    
c001b91a:	b8 01 00 00 00       	mov    eax,0x1
c001b91f:	31 d2                	xor    edx,edx
c001b921:	83 c4 08             	add    esp,0x8
c001b924:	5b                   	pop    ebx
c001b925:	c3                   	ret    
c001b926:	51                   	push   ecx
c001b927:	68 00 01 00 00       	push   0x100
c001b92c:	6a 00                	push   0x0
c001b92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b933:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b936:	83 c0 0c             	add    eax,0xc
c001b939:	50                   	push   eax
c001b93a:	e8 85 4d fe ff       	call   c00006c4 <memset>
c001b93f:	83 c4 0c             	add    esp,0xc
c001b942:	68 ff 00 00 00       	push   0xff
c001b947:	53                   	push   ebx
c001b948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b950:	83 c0 0c             	add    eax,0xc
c001b953:	50                   	push   eax
c001b954:	e8 47 4d fe ff       	call   c00006a0 <memcpy>
c001b959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95e:	5b                   	pop    ebx
c001b95f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b962:	5a                   	pop    edx
c001b963:	8d 50 0c             	lea    edx,[eax+0xc]
c001b966:	52                   	push   edx
c001b967:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b96d:	e8 b6 4f ff ff       	call   c0010928 <VgaText::setTitle(char*)>
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	31 c0                	xor    eax,eax
c001b977:	eb a6                	jmp    c001b91f <sysAppSettings(regs*)+0x50>
c001b979:	83 ec 08             	sub    esp,0x8
c001b97c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b982:	83 e0 0f             	and    eax,0xf
c001b985:	50                   	push   eax
c001b986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b994:	e8 7f 4f ff ff       	call   c0010918 <VgaText::setTitleColour(VgaColour)>
c001b999:	58                   	pop    eax
c001b99a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b9a0:	5a                   	pop    edx
c001b9a1:	c1 e8 04             	shr    eax,0x4
c001b9a4:	83 e0 0f             	and    eax,0xf
c001b9a7:	50                   	push   eax
c001b9a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9b6:	e8 4d 4f ff ff       	call   c0010908 <VgaText::setTitleTextColour(VgaColour)>
c001b9bb:	eb b5                	jmp    c001b972 <sysAppSettings(regs*)+0xa3>
c001b9bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9c5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b9cb:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b9d1:	c0 e8 06             	shr    al,0x6
c001b9d4:	83 e0 01             	and    eax,0x1
c001b9d7:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b9dd:	31 c0                	xor    eax,eax
c001b9df:	e9 3b ff ff ff       	jmp    c001b91f <sysAppSettings(regs*)+0x50>
c001b9e4:	b8 02 00 00 00       	mov    eax,0x2
c001b9e9:	e9 31 ff ff ff       	jmp    c001b91f <sysAppSettings(regs*)+0x50>

c001b9ee <sysSetFatAttrib(regs*)>:
c001b9ee:	57                   	push   edi
c001b9ef:	56                   	push   esi
c001b9f0:	53                   	push   ebx
c001b9f1:	83 ec 1c             	sub    esp,0x1c
c001b9f4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9f8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9fb:	68 14 01 00 00       	push   0x114
c001ba00:	e8 1f 3c ff ff       	call   c000f624 <malloc>
c001ba05:	83 c4 0c             	add    esp,0xc
c001ba08:	89 c3                	mov    ebx,eax
c001ba0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba0f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba12:	57                   	push   edi
c001ba13:	53                   	push   ebx
c001ba14:	e8 33 74 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001ba19:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba1c:	83 c4 0c             	add    esp,0xc
c001ba1f:	0f b6 d4             	movzx  edx,ah
c001ba22:	0f b6 c0             	movzx  eax,al
c001ba25:	52                   	push   edx
c001ba26:	50                   	push   eax
c001ba27:	53                   	push   ebx
c001ba28:	e8 95 76 ff ff       	call   c00130c2 <File::chfatattr(unsigned char, unsigned char)>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	85 db                	test   ebx,ebx
c001ba32:	74 14                	je     c001ba48 <sysSetFatAttrib(regs*)+0x5a>
c001ba34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba38:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	53                   	push   ebx
c001ba3e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba41:	83 c4 10             	add    esp,0x10
c001ba44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba48:	85 c0                	test   eax,eax
c001ba4a:	0f 95 c0             	setne  al
c001ba4d:	31 d2                	xor    edx,edx
c001ba4f:	0f b6 c0             	movzx  eax,al
c001ba52:	f7 d8                	neg    eax
c001ba54:	83 d2 00             	adc    edx,0x0
c001ba57:	83 c4 10             	add    esp,0x10
c001ba5a:	f7 da                	neg    edx
c001ba5c:	5b                   	pop    ebx
c001ba5d:	5e                   	pop    esi
c001ba5e:	5f                   	pop    edi
c001ba5f:	c3                   	ret    

c001ba60 <sysPipe(regs*)>:
c001ba60:	57                   	push   edi
c001ba61:	56                   	push   esi
c001ba62:	53                   	push   ebx
c001ba63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba67:	83 ec 0c             	sub    esp,0xc
c001ba6a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba6d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba70:	6a 20                	push   0x20
c001ba72:	e8 ad 3b ff ff       	call   c000f624 <malloc>
c001ba77:	89 c3                	mov    ebx,eax
c001ba79:	58                   	pop    eax
c001ba7a:	5a                   	pop    edx
c001ba7b:	68 00 50 00 00       	push   0x5000
c001ba80:	53                   	push   ebx
c001ba81:	e8 d2 47 ff ff       	call   c0010258 <Pipe::Pipe(int)>
c001ba86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba89:	e8 2a 5a ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001ba8e:	89 07                	mov    DWORD PTR [edi],eax
c001ba90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba93:	e8 20 5a ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	89 06                	mov    DWORD PTR [esi],eax
c001ba9d:	31 d2                	xor    edx,edx
c001ba9f:	5b                   	pop    ebx
c001baa0:	31 c0                	xor    eax,eax
c001baa2:	5e                   	pop    esi
c001baa3:	5f                   	pop    edi
c001baa4:	c3                   	ret    

c001baa5 <sysGetUnixTime(regs*)>:
c001baa5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001baaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bab0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bab4:	e9 7d 7d ff ff       	jmp    c0013836 <Clock::timeInSecondsLocal()>

c001bab9 <string_ends_with(char const*, char const*)>:
c001bab9:	57                   	push   edi
c001baba:	56                   	push   esi
c001babb:	53                   	push   ebx
c001babc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bac0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bac4:	83 ec 0c             	sub    esp,0xc
c001bac7:	53                   	push   ebx
c001bac8:	e8 14 4c fe ff       	call   c00006e1 <strlen>
c001bacd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bad0:	89 c6                	mov    esi,eax
c001bad2:	e8 0a 4c fe ff       	call   c00006e1 <strlen>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	39 c6                	cmp    esi,eax
c001badc:	7d 06                	jge    c001bae4 <string_ends_with(char const*, char const*)+0x2b>
c001bade:	5b                   	pop    ebx
c001badf:	31 c0                	xor    eax,eax
c001bae1:	5e                   	pop    esi
c001bae2:	5f                   	pop    edi
c001bae3:	c3                   	ret    
c001bae4:	83 ec 08             	sub    esp,0x8
c001bae7:	29 c6                	sub    esi,eax
c001bae9:	57                   	push   edi
c001baea:	01 f3                	add    ebx,esi
c001baec:	53                   	push   ebx
c001baed:	e8 c2 4c fe ff       	call   c00007b4 <strcmp>
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	85 c0                	test   eax,eax
c001baf7:	5b                   	pop    ebx
c001baf8:	0f 94 c0             	sete   al
c001bafb:	5e                   	pop    esi
c001bafc:	0f b6 c0             	movzx  eax,al
c001baff:	5f                   	pop    edi
c001bb00:	c3                   	ret    

c001bb01 <sysCallOpen(regs*)>:
c001bb01:	56                   	push   esi
c001bb02:	53                   	push   ebx
c001bb03:	81 ec 04 01 00 00    	sub    esp,0x104
c001bb09:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bb10:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bb13:	85 c9                	test   ecx,ecx
c001bb15:	0f 84 b3 00 00 00    	je     c001bbce <sysCallOpen(regs*)+0xcd>
c001bb1b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb1e:	85 c0                	test   eax,eax
c001bb20:	0f 84 a8 00 00 00    	je     c001bbce <sysCallOpen(regs*)+0xcd>
c001bb26:	52                   	push   edx
c001bb27:	68 59 b6 02 c0       	push   0xc002b659
c001bb2c:	50                   	push   eax
c001bb2d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bb31:	56                   	push   esi
c001bb32:	e8 6b 71 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb37:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb3a:	e8 a2 4b fe ff       	call   c00006e1 <strlen>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	48                   	dec    eax
c001bb43:	74 1d                	je     c001bb62 <sysCallOpen(regs*)+0x61>
c001bb45:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb48:	eb 0f                	jmp    c001bb59 <sysCallOpen(regs*)+0x58>
c001bb4a:	80 fa 3a             	cmp    dl,0x3a
c001bb4d:	74 0f                	je     c001bb5e <sysCallOpen(regs*)+0x5d>
c001bb4f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb53:	48                   	dec    eax
c001bb54:	74 0c                	je     c001bb62 <sysCallOpen(regs*)+0x61>
c001bb56:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb59:	80 fa 2e             	cmp    dl,0x2e
c001bb5c:	75 ec                	jne    c001bb4a <sysCallOpen(regs*)+0x49>
c001bb5e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb62:	83 ec 08             	sub    esp,0x8
c001bb65:	68 5d b6 02 c0       	push   0xc002b65d
c001bb6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb6d:	e8 47 ff ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	85 c0                	test   eax,eax
c001bb77:	75 17                	jne    c001bb90 <sysCallOpen(regs*)+0x8f>
c001bb79:	83 ec 08             	sub    esp,0x8
c001bb7c:	68 7e b6 02 c0       	push   0xc002b67e
c001bb81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb84:	e8 30 ff ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	85 c0                	test   eax,eax
c001bb8e:	74 51                	je     c001bbe1 <sysCallOpen(regs*)+0xe0>
c001bb90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb93:	83 ec 08             	sub    esp,0x8
c001bb96:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bba3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bba6:	ff 30                	push   DWORD PTR [eax]
c001bba8:	68 62 b6 02 c0       	push   0xc002b662
c001bbad:	e8 41 6d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bbb2:	c7 04 24 71 b6 02 c0 	mov    DWORD PTR [esp],0xc002b671
c001bbb9:	e8 35 6d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bbbe:	83 c4 10             	add    esp,0x10
c001bbc1:	81 c4 04 01 00 00    	add    esp,0x104
c001bbc7:	31 c0                	xor    eax,eax
c001bbc9:	31 d2                	xor    edx,edx
c001bbcb:	5b                   	pop    ebx
c001bbcc:	5e                   	pop    esi
c001bbcd:	c3                   	ret    
c001bbce:	81 c4 04 01 00 00    	add    esp,0x104
c001bbd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbde:	5b                   	pop    ebx
c001bbdf:	5e                   	pop    esi
c001bbe0:	c3                   	ret    
c001bbe1:	83 ec 08             	sub    esp,0x8
c001bbe4:	68 5e b6 02 c0       	push   0xc002b65e
c001bbe9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbec:	e8 c3 4b fe ff       	call   c00007b4 <strcmp>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	85 c0                	test   eax,eax
c001bbf6:	74 98                	je     c001bb90 <sysCallOpen(regs*)+0x8f>
c001bbf8:	83 ec 08             	sub    esp,0x8
c001bbfb:	68 5d b6 02 c0       	push   0xc002b65d
c001bc00:	56                   	push   esi
c001bc01:	e8 b3 fe ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	85 c0                	test   eax,eax
c001bc0b:	75 83                	jne    c001bb90 <sysCallOpen(regs*)+0x8f>
c001bc0d:	83 ec 08             	sub    esp,0x8
c001bc10:	68 83 b6 02 c0       	push   0xc002b683
c001bc15:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc18:	e8 9c fe ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	85 c0                	test   eax,eax
c001bc22:	0f 85 d9 00 00 00    	jne    c001bd01 <sysCallOpen(regs*)+0x200>
c001bc28:	83 ec 08             	sub    esp,0x8
c001bc2b:	68 88 b6 02 c0       	push   0xc002b688
c001bc30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc33:	e8 81 fe ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	85 c0                	test   eax,eax
c001bc3d:	0f 85 be 00 00 00    	jne    c001bd01 <sysCallOpen(regs*)+0x200>
c001bc43:	83 ec 08             	sub    esp,0x8
c001bc46:	68 84 b6 02 c0       	push   0xc002b684
c001bc4b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc4e:	e8 61 4b fe ff       	call   c00007b4 <strcmp>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	85 c0                	test   eax,eax
c001bc58:	0f 84 a3 00 00 00    	je     c001bd01 <sysCallOpen(regs*)+0x200>
c001bc5e:	83 ec 08             	sub    esp,0x8
c001bc61:	68 83 b6 02 c0       	push   0xc002b683
c001bc66:	56                   	push   esi
c001bc67:	e8 4d fe ff ff       	call   c001bab9 <string_ends_with(char const*, char const*)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	85 c0                	test   eax,eax
c001bc71:	0f 85 8a 00 00 00    	jne    c001bd01 <sysCallOpen(regs*)+0x200>
c001bc77:	83 ec 0c             	sub    esp,0xc
c001bc7a:	68 14 01 00 00       	push   0x114
c001bc7f:	e8 a0 39 ff ff       	call   c000f624 <malloc>
c001bc84:	83 c4 0c             	add    esp,0xc
c001bc87:	89 c6                	mov    esi,eax
c001bc89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc8e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc94:	56                   	push   esi
c001bc95:	e8 b2 71 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001bc9a:	83 c4 10             	add    esp,0x10
c001bc9d:	85 f6                	test   esi,esi
c001bc9f:	0f 84 29 ff ff ff    	je     c001bbce <sysCallOpen(regs*)+0xcd>
c001bca5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bca8:	0f b6 c2             	movzx  eax,dl
c001bcab:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bcae:	89 d0                	mov    eax,edx
c001bcb0:	83 e0 01             	and    eax,0x1
c001bcb3:	f6 c2 02             	test   dl,0x2
c001bcb6:	74 03                	je     c001bcbb <sysCallOpen(regs*)+0x1ba>
c001bcb8:	83 c8 02             	or     eax,0x2
c001bcbb:	f6 c2 04             	test   dl,0x4
c001bcbe:	74 03                	je     c001bcc3 <sysCallOpen(regs*)+0x1c2>
c001bcc0:	83 c8 04             	or     eax,0x4
c001bcc3:	f6 c2 08             	test   dl,0x8
c001bcc6:	74 03                	je     c001bccb <sysCallOpen(regs*)+0x1ca>
c001bcc8:	83 c8 0a             	or     eax,0xa
c001bccb:	83 e2 10             	and    edx,0x10
c001bcce:	74 03                	je     c001bcd3 <sysCallOpen(regs*)+0x1d2>
c001bcd0:	83 c8 12             	or     eax,0x12
c001bcd3:	83 ec 08             	sub    esp,0x8
c001bcd6:	50                   	push   eax
c001bcd7:	56                   	push   esi
c001bcd8:	e8 d3 71 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001bcdd:	83 c4 10             	add    esp,0x10
c001bce0:	85 c0                	test   eax,eax
c001bce2:	0f 85 e6 fe ff ff    	jne    c001bbce <sysCallOpen(regs*)+0xcd>
c001bce8:	83 ec 0c             	sub    esp,0xc
c001bceb:	56                   	push   esi
c001bcec:	e8 c7 57 ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001bcf1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcf4:	89 02                	mov    DWORD PTR [edx],eax
c001bcf6:	c1 f8 1f             	sar    eax,0x1f
c001bcf9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcfc:	e9 bd fe ff ff       	jmp    c001bbbe <sysCallOpen(regs*)+0xbd>
c001bd01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd04:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bd0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd11:	e9 ab fe ff ff       	jmp    c001bbc1 <sysCallOpen(regs*)+0xc0>

c001bd16 <Sys::loadSyscalls()>:
c001bd16:	c7 05 40 f6 02 c0 cc ae 01 c0 	mov    DWORD PTR ds:0xc002f640,0xc001aecc
c001bd20:	c7 05 44 f6 02 c0 2e ab 01 c0 	mov    DWORD PTR ds:0xc002f644,0xc001ab2e
c001bd2a:	c7 05 48 f6 02 c0 81 ac 01 c0 	mov    DWORD PTR ds:0xc002f648,0xc001ac81
c001bd34:	c7 05 4c f6 02 c0 64 ae 01 c0 	mov    DWORD PTR ds:0xc002f64c,0xc001ae64
c001bd3e:	c7 05 50 f6 02 c0 19 ac 01 c0 	mov    DWORD PTR ds:0xc002f650,0xc001ac19
c001bd48:	c7 05 54 f6 02 c0 65 ab 01 c0 	mov    DWORD PTR ds:0xc002f654,0xc001ab65
c001bd52:	c7 05 58 f6 02 c0 46 ab 01 c0 	mov    DWORD PTR ds:0xc002f658,0xc001ab46
c001bd5c:	c7 05 5c f6 02 c0 d6 ac 01 c0 	mov    DWORD PTR ds:0xc002f65c,0xc001acd6
c001bd66:	c7 05 64 f6 02 c0 de b3 01 c0 	mov    DWORD PTR ds:0xc002f664,0xc001b3de
c001bd70:	c7 05 60 f6 02 c0 01 bb 01 c0 	mov    DWORD PTR ds:0xc002f660,0xc001bb01
c001bd7a:	c7 05 68 f6 02 c0 66 b4 01 c0 	mov    DWORD PTR ds:0xc002f668,0xc001b466
c001bd84:	c7 05 6c f6 02 c0 cd b0 01 c0 	mov    DWORD PTR ds:0xc002f66c,0xc001b0cd
c001bd8e:	c7 05 70 f6 02 c0 07 af 01 c0 	mov    DWORD PTR ds:0xc002f670,0xc001af07
c001bd98:	c7 05 74 f6 02 c0 0c af 01 c0 	mov    DWORD PTR ds:0xc002f674,0xc001af0c
c001bda2:	c7 05 78 f6 02 c0 41 b5 01 c0 	mov    DWORD PTR ds:0xc002f678,0xc001b541
c001bdac:	c7 05 7c f6 02 c0 db b4 01 c0 	mov    DWORD PTR ds:0xc002f67c,0xc001b4db
c001bdb6:	c7 05 80 f6 02 c0 b5 b1 01 c0 	mov    DWORD PTR ds:0xc002f680,0xc001b1b5
c001bdc0:	c7 05 84 f6 02 c0 1e b2 01 c0 	mov    DWORD PTR ds:0xc002f684,0xc001b21e
c001bdca:	c7 05 88 f6 02 c0 9b b2 01 c0 	mov    DWORD PTR ds:0xc002f688,0xc001b29b
c001bdd4:	c7 05 8c f6 02 c0 11 af 01 c0 	mov    DWORD PTR ds:0xc002f68c,0xc001af11
c001bdde:	c7 05 90 f6 02 c0 b1 b5 01 c0 	mov    DWORD PTR ds:0xc002f690,0xc001b5b1
c001bde8:	c7 05 94 f6 02 c0 cb b5 01 c0 	mov    DWORD PTR ds:0xc002f694,0xc001b5cb
c001bdf2:	c7 05 98 f6 02 c0 cb b5 01 c0 	mov    DWORD PTR ds:0xc002f698,0xc001b5cb
c001bdfc:	c7 05 9c f6 02 c0 0c b6 01 c0 	mov    DWORD PTR ds:0xc002f69c,0xc001b60c
c001be06:	c7 05 a0 f6 02 c0 70 b6 01 c0 	mov    DWORD PTR ds:0xc002f6a0,0xc001b670
c001be10:	c7 05 a4 f6 02 c0 1b af 01 c0 	mov    DWORD PTR ds:0xc002f6a4,0xc001af1b
c001be1a:	c7 05 a8 f6 02 c0 d4 b6 01 c0 	mov    DWORD PTR ds:0xc002f6a8,0xc001b6d4
c001be24:	c7 05 ac f6 02 c0 8a b0 01 c0 	mov    DWORD PTR ds:0xc002f6ac,0xc001b08a
c001be2e:	c7 05 b0 f6 02 c0 20 b7 01 c0 	mov    DWORD PTR ds:0xc002f6b0,0xc001b720
c001be38:	c7 05 b4 f6 02 c0 5b b1 01 c0 	mov    DWORD PTR ds:0xc002f6b4,0xc001b15b
c001be42:	c7 05 b8 f6 02 c0 a3 b7 01 c0 	mov    DWORD PTR ds:0xc002f6b8,0xc001b7a3
c001be4c:	c7 05 bc f6 02 c0 1e b3 01 c0 	mov    DWORD PTR ds:0xc002f6bc,0xc001b31e
c001be56:	c7 05 c0 f6 02 c0 ca b7 01 c0 	mov    DWORD PTR ds:0xc002f6c0,0xc001b7ca
c001be60:	c7 05 c4 f6 02 c0 22 b8 01 c0 	mov    DWORD PTR ds:0xc002f6c4,0xc001b822
c001be6a:	c7 05 c8 f6 02 c0 cf b8 01 c0 	mov    DWORD PTR ds:0xc002f6c8,0xc001b8cf
c001be74:	c7 05 cc f6 02 c0 2b af 01 c0 	mov    DWORD PTR ds:0xc002f6cc,0xc001af2b
c001be7e:	c7 05 d0 f6 02 c0 95 af 01 c0 	mov    DWORD PTR ds:0xc002f6d0,0xc001af95
c001be88:	c7 05 d4 f6 02 c0 db af 01 c0 	mov    DWORD PTR ds:0xc002f6d4,0xc001afdb
c001be92:	c7 05 d8 f6 02 c0 ee b9 01 c0 	mov    DWORD PTR ds:0xc002f6d8,0xc001b9ee
c001be9c:	c7 05 dc f6 02 c0 e6 b5 01 c0 	mov    DWORD PTR ds:0xc002f6dc,0xc001b5e6
c001bea6:	c7 05 e0 f6 02 c0 2c b0 01 c0 	mov    DWORD PTR ds:0xc002f6e0,0xc001b02c
c001beb0:	c7 05 e4 f6 02 c0 60 ba 01 c0 	mov    DWORD PTR ds:0xc002f6e4,0xc001ba60
c001beba:	c7 05 e8 f6 02 c0 a5 ba 01 c0 	mov    DWORD PTR ds:0xc002f6e8,0xc001baa5
c001bec4:	c7 05 ec f6 02 c0 71 ab 01 c0 	mov    DWORD PTR ds:0xc002f6ec,0xc001ab71
c001bece:	c7 05 f0 f6 02 c0 f2 ac 01 c0 	mov    DWORD PTR ds:0xc002f6f0,0xc001acf2
c001bed8:	c7 05 f4 f6 02 c0 1a ae 01 c0 	mov    DWORD PTR ds:0xc002f6f4,0xc001ae1a
c001bee2:	c7 05 f8 f6 02 c0 f8 aa 01 c0 	mov    DWORD PTR ds:0xc002f6f8,0xc001aaf8
c001beec:	c3                   	ret    

c001beed <Sys::systemCall(regs*, void*)>:
c001beed:	53                   	push   ebx
c001beee:	83 ec 08             	sub    esp,0x8
c001bef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bef8:	83 f8 7f             	cmp    eax,0x7f
c001befb:	77 16                	ja     c001bf13 <Sys::systemCall(regs*, void*)+0x26>
c001befd:	8b 14 85 40 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd09c0]
c001bf04:	85 d2                	test   edx,edx
c001bf06:	74 0b                	je     c001bf13 <Sys::systemCall(regs*, void*)+0x26>
c001bf08:	83 ec 0c             	sub    esp,0xc
c001bf0b:	53                   	push   ebx
c001bf0c:	ff d2                	call   edx
c001bf0e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bf11:	eb 0d                	jmp    c001bf20 <Sys::systemCall(regs*, void*)+0x33>
c001bf13:	52                   	push   edx
c001bf14:	52                   	push   edx
c001bf15:	50                   	push   eax
c001bf16:	68 8d b6 02 c0       	push   0xc002b68d
c001bf1b:	e8 d3 69 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bf20:	83 c4 10             	add    esp,0x10
c001bf23:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bf28:	31 d2                	xor    edx,edx
c001bf2a:	83 c4 08             	add    esp,0x8
c001bf2d:	5b                   	pop    ebx
c001bf2e:	c3                   	ret    

c001bf2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf2f:	55                   	push   ebp
c001bf30:	89 e5                	mov    ebp,esp
c001bf32:	57                   	push   edi
c001bf33:	56                   	push   esi
c001bf34:	53                   	push   ebx
c001bf35:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf3b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bf3e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bf41:	85 c0                	test   eax,eax
c001bf43:	0f 95 c1             	setne  cl
c001bf46:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bf4a:	0f 94 c2             	sete   dl
c001bf4d:	84 d1                	test   cl,dl
c001bf4f:	74 26                	je     c001bf77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf51:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bf58:	74 1d                	je     c001bf77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bf5d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bf63:	89 d6                	mov    esi,edx
c001bf65:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bf6b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bf71:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bf74:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bf77:	83 ec 0c             	sub    esp,0xc
c001bf7a:	05 ff 0f 00 00       	add    eax,0xfff
c001bf7f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bf82:	6a 01                	push   0x1
c001bf84:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bf8a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bf90:	e8 6e 59 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	89 c6                	mov    esi,eax
c001bf9a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bfa0:	0f 86 21 01 00 00    	jbe    c001c0c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bfa6:	c1 eb 0c             	shr    ebx,0xc
c001bfa9:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bfb3:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bfb9:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bfbc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bfbf:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bfc5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bfc8:	29 d8                	sub    eax,ebx
c001bfca:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bfd0:	0f 83 f4 00 00 00    	jae    c001c0ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bfd6:	83 ec 0c             	sub    esp,0xc
c001bfd9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bfdf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bfe2:	3d 00 10 00 00       	cmp    eax,0x1000
c001bfe7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bfe9:	52                   	push   edx
c001bfea:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bff0:	52                   	push   edx
c001bff1:	76 05                	jbe    c001bff8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bff3:	b8 00 10 00 00       	mov    eax,0x1000
c001bff8:	31 d2                	xor    edx,edx
c001bffa:	52                   	push   edx
c001bffb:	50                   	push   eax
c001bffc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bfff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c002:	83 c4 20             	add    esp,0x20
c001c005:	85 c0                	test   eax,eax
c001c007:	74 1f                	je     c001c028 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c009:	51                   	push   ecx
c001c00a:	51                   	push   ecx
c001c00b:	50                   	push   eax
c001c00c:	68 a1 b6 02 c0       	push   0xc002b6a1
c001c011:	e8 dd 68 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c016:	89 34 24             	mov    DWORD PTR [esp],esi
c001c019:	e8 49 5c ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001c01e:	83 c4 10             	add    esp,0x10
c001c021:	31 c0                	xor    eax,eax
c001c023:	e9 7c 01 00 00       	jmp    c001c1a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c028:	e8 bd 14 00 00       	call   c001d4ea <lockScheduler()>
c001c02d:	e8 8f 3c ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001c032:	6a 07                	push   0x7
c001c034:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c03a:	56                   	push   esi
c001c03b:	50                   	push   eax
c001c03c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c042:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c045:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c04b:	e8 7e 5f ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001c050:	83 c4 0c             	add    esp,0xc
c001c053:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c059:	6a 00                	push   0x0
c001c05b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c061:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c064:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c06a:	e8 c9 5d ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001c06f:	58                   	pop    eax
c001c070:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c076:	5a                   	pop    edx
c001c077:	68 07 04 00 00       	push   0x407
c001c07c:	53                   	push   ebx
c001c07d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c083:	50                   	push   eax
c001c084:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c08a:	6a 00                	push   0x0
c001c08c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c091:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c094:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c09a:	e8 e9 62 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c09f:	83 c4 1c             	add    esp,0x1c
c001c0a2:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c0a8:	68 00 10 00 00       	push   0x1000
c001c0ad:	50                   	push   eax
c001c0ae:	56                   	push   esi
c001c0af:	e8 ec 45 fe ff       	call   c00006a0 <memcpy>
c001c0b4:	e8 33 14 00 00       	call   c001d4ec <unlockScheduler()>
c001c0b9:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	e9 f5 fe ff ff       	jmp    c001bfbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c0c7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c0ca:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c0d4:	0f 86 bc 00 00 00    	jbe    c001c196 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c0da:	e8 0b 14 00 00       	call   c001d4ea <lockScheduler()>
c001c0df:	51                   	push   ecx
c001c0e0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c0e6:	6a 00                	push   0x0
c001c0e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0f0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0f6:	e8 3d 5d ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0fb:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	c1 e8 0c             	shr    eax,0xc
c001c107:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c111:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c117:	e8 a5 3b ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001c11c:	6a 07                	push   0x7
c001c11e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c124:	56                   	push   esi
c001c125:	50                   	push   eax
c001c126:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c12c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c12f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c135:	e8 94 5e ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001c13a:	58                   	pop    eax
c001c13b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c141:	5a                   	pop    edx
c001c142:	68 07 04 00 00       	push   0x407
c001c147:	53                   	push   ebx
c001c148:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c14e:	50                   	push   eax
c001c14f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c155:	6a 00                	push   0x0
c001c157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c15f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c165:	e8 1e 62 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c16a:	83 c4 1c             	add    esp,0x1c
c001c16d:	68 00 10 00 00       	push   0x1000
c001c172:	6a 00                	push   0x0
c001c174:	56                   	push   esi
c001c175:	e8 4a 45 fe ff       	call   c00006c4 <memset>
c001c17a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c189:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c18f:	77 86                	ja     c001c117 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c191:	e8 56 13 00 00       	call   c001d4ec <unlockScheduler()>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	56                   	push   esi
c001c19a:	e8 c8 5a ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001c19f:	83 c4 10             	add    esp,0x10
c001c1a2:	b0 01                	mov    al,0x1
c001c1a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c1a7:	5b                   	pop    ebx
c001c1a8:	5e                   	pop    esi
c001c1a9:	5f                   	pop    edi
c001c1aa:	5d                   	pop    ebp
c001c1ab:	c3                   	ret    

c001c1ac <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c1ac:	55                   	push   ebp
c001c1ad:	57                   	push   edi
c001c1ae:	56                   	push   esi
c001c1af:	53                   	push   ebx
c001c1b0:	83 ec 48             	sub    esp,0x48
c001c1b3:	68 14 01 00 00       	push   0x114
c001c1b8:	e8 67 34 ff ff       	call   c000f624 <malloc>
c001c1bd:	83 c4 0c             	add    esp,0xc
c001c1c0:	89 c6                	mov    esi,eax
c001c1c2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c1c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c1ca:	50                   	push   eax
c001c1cb:	e8 7c 6c ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c1d0:	58                   	pop    eax
c001c1d1:	5a                   	pop    edx
c001c1d2:	6a 01                	push   0x1
c001c1d4:	56                   	push   esi
c001c1d5:	e8 d6 6c ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c1da:	83 c4 10             	add    esp,0x10
c001c1dd:	85 c0                	test   eax,eax
c001c1df:	0f 85 47 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1ed:	83 ec 0c             	sub    esp,0xc
c001c1f0:	6a 34                	push   0x34
c001c1f2:	e8 2d 34 ff ff       	call   c000f624 <malloc>
c001c1f7:	89 c3                	mov    ebx,eax
c001c1f9:	58                   	pop    eax
c001c1fa:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1fc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c200:	57                   	push   edi
c001c201:	53                   	push   ebx
c001c202:	6a 00                	push   0x0
c001c204:	6a 34                	push   0x34
c001c206:	56                   	push   esi
c001c207:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c20a:	83 c4 20             	add    esp,0x20
c001c20d:	85 c0                	test   eax,eax
c001c20f:	0f 85 17 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c215:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c21b:	0f 85 0b 01 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c221:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c224:	85 c0                	test   eax,eax
c001c226:	0f 84 00 01 00 00    	je     c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c22c:	31 d2                	xor    edx,edx
c001c22e:	55                   	push   ebp
c001c22f:	52                   	push   edx
c001c230:	50                   	push   eax
c001c231:	56                   	push   esi
c001c232:	e8 37 6d ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	85 c0                	test   eax,eax
c001c23c:	0f 85 ea 00 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c242:	83 ec 0c             	sub    esp,0xc
c001c245:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c248:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c250:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c254:	0f af c2             	imul   eax,edx
c001c257:	50                   	push   eax
c001c258:	e8 c7 33 ff ff       	call   c000f624 <malloc>
c001c25d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c25f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c263:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c26a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c26e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c272:	0f af c2             	imul   eax,edx
c001c275:	99                   	cdq    
c001c276:	52                   	push   edx
c001c277:	50                   	push   eax
c001c278:	56                   	push   esi
c001c279:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c27c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c27f:	83 c4 20             	add    esp,0x20
c001c282:	85 c0                	test   eax,eax
c001c284:	0f 84 a2 00 00 00    	je     c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c28a:	31 d2                	xor    edx,edx
c001c28c:	51                   	push   ecx
c001c28d:	52                   	push   edx
c001c28e:	50                   	push   eax
c001c28f:	56                   	push   esi
c001c290:	e8 d9 6c ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c295:	83 c4 10             	add    esp,0x10
c001c298:	85 c0                	test   eax,eax
c001c29a:	0f 85 8c 00 00 00    	jne    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c2a7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c2ab:	31 ed                	xor    ebp,ebp
c001c2ad:	0f af c2             	imul   eax,edx
c001c2b0:	50                   	push   eax
c001c2b1:	e8 6e 33 ff ff       	call   c000f624 <malloc>
c001c2b6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c2bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c2c7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c2cb:	0f af c2             	imul   eax,edx
c001c2ce:	99                   	cdq    
c001c2cf:	52                   	push   edx
c001c2d0:	50                   	push   eax
c001c2d1:	56                   	push   esi
c001c2d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2d5:	83 c4 20             	add    esp,0x20
c001c2d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2e0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2e4:	0f 86 80 00 00 00    	jbe    c001c36a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2ea:	0f b7 fd             	movzx  edi,bp
c001c2ed:	c1 e7 05             	shl    edi,0x5
c001c2f0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2f4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2f7:	75 6b                	jne    c001c364 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c300:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c303:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c307:	52                   	push   edx
c001c308:	31 d2                	xor    edx,edx
c001c30a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c30d:	52                   	push   edx
c001c30e:	50                   	push   eax
c001c30f:	56                   	push   esi
c001c310:	e8 59 6c ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c315:	83 c4 10             	add    esp,0x10
c001c318:	85 c0                	test   eax,eax
c001c31a:	74 17                	je     c001c333 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c31c:	83 ec 0c             	sub    esp,0xc
c001c31f:	68 cc b6 02 c0       	push   0xc002b6cc
c001c324:	e8 ca 65 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	31 c0                	xor    eax,eax
c001c32e:	e9 87 00 00 00       	jmp    c001c3ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c333:	83 ec 0c             	sub    esp,0xc
c001c336:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c339:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c33c:	50                   	push   eax
c001c33d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c345:	56                   	push   esi
c001c346:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c34a:	e8 e0 fb ff ff       	call   c001bf2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c34f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c353:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c357:	83 c4 20             	add    esp,0x20
c001c35a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c35e:	73 04                	jae    c001c364 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c364:	45                   	inc    ebp
c001c365:	e9 76 ff ff ff       	jmp    c001c2e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c36a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c36e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c376:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c37c:	83 ec 0c             	sub    esp,0xc
c001c37f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c385:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c38a:	05 00 10 00 00       	add    eax,0x1000
c001c38f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c396:	e8 99 32 ff ff       	call   c000f634 <free>
c001c39b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c39e:	e8 91 32 ff ff       	call   c000f634 <free>
c001c3a3:	58                   	pop    eax
c001c3a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3a8:	e8 87 32 ff ff       	call   c000f634 <free>
c001c3ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3b0:	e8 59 6b ff ff       	call   c0012f0e <File::close()>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	b0 01                	mov    al,0x1
c001c3ba:	83 c4 3c             	add    esp,0x3c
c001c3bd:	5b                   	pop    ebx
c001c3be:	5e                   	pop    esi
c001c3bf:	5f                   	pop    edi
c001c3c0:	5d                   	pop    ebp
c001c3c1:	c3                   	ret    

c001c3c2 <Thr::runtimeReferenceHelper()>:
c001c3c2:	83 ec 18             	sub    esp,0x18
c001c3c5:	68 d4 b6 02 c0       	push   0xc002b6d4
c001c3ca:	e8 24 65 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c3cf:	fa                   	cli    
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	eb fe                	jmp    c001c3d3 <Thr::runtimeReferenceHelper()+0x11>

c001c3d5 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c3d5:	57                   	push   edi
c001c3d6:	56                   	push   esi
c001c3d7:	53                   	push   ebx
c001c3d8:	31 db                	xor    ebx,ebx
c001c3da:	39 1d e0 ff 02 c0    	cmp    DWORD PTR ds:0xc002ffe0,ebx
c001c3e0:	7e 3c                	jle    c001c41e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3e2:	8b 34 9d 60 ff 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd00a0]
c001c3e9:	31 ff                	xor    edi,edi
c001c3eb:	39 3c 9d 60 fe 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd01a0],edi
c001c3f2:	7e 27                	jle    c001c41b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3f4:	50                   	push   eax
c001c3f5:	50                   	push   eax
c001c3f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3fa:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3fc:	03 04 9d e0 fe 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0120]
c001c403:	50                   	push   eax
c001c404:	e8 ab 43 fe ff       	call   c00007b4 <strcmp>
c001c409:	83 c4 10             	add    esp,0x10
c001c40c:	85 c0                	test   eax,eax
c001c40e:	75 05                	jne    c001c415 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c410:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c413:	eb 0b                	jmp    c001c420 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c415:	83 c6 10             	add    esi,0x10
c001c418:	47                   	inc    edi
c001c419:	eb d0                	jmp    c001c3eb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c41b:	43                   	inc    ebx
c001c41c:	eb bc                	jmp    c001c3da <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c41e:	31 c0                	xor    eax,eax
c001c420:	5b                   	pop    ebx
c001c421:	5e                   	pop    esi
c001c422:	5f                   	pop    edi
c001c423:	c3                   	ret    

c001c424 <Thr::loadKernelSymbolTable(char const*)>:
c001c424:	55                   	push   ebp
c001c425:	57                   	push   edi
c001c426:	56                   	push   esi
c001c427:	53                   	push   ebx
c001c428:	83 ec 68             	sub    esp,0x68
c001c42b:	8b 35 34 00 03 c0    	mov    esi,DWORD PTR ds:0xc0030034
c001c431:	68 14 01 00 00       	push   0x114
c001c436:	e8 e9 31 ff ff       	call   c000f624 <malloc>
c001c43b:	83 c4 0c             	add    esp,0xc
c001c43e:	89 c3                	mov    ebx,eax
c001c440:	56                   	push   esi
c001c441:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c445:	50                   	push   eax
c001c446:	e8 01 6a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c44b:	5e                   	pop    esi
c001c44c:	5f                   	pop    edi
c001c44d:	6a 01                	push   0x1
c001c44f:	53                   	push   ebx
c001c450:	e8 5b 6a ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c455:	83 c4 10             	add    esp,0x10
c001c458:	85 c0                	test   eax,eax
c001c45a:	74 17                	je     c001c473 <Thr::loadKernelSymbolTable(char const*)+0x4f>
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	68 f6 b6 02 c0       	push   0xc002b6f6
c001c464:	e8 30 da ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001c469:	83 c4 10             	add    esp,0x10
c001c46c:	31 c0                	xor    eax,eax
c001c46e:	e9 5d 02 00 00       	jmp    c001c6d0 <Thr::loadKernelSymbolTable(char const*)+0x2ac>
c001c473:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c47b:	83 ec 0c             	sub    esp,0xc
c001c47e:	6a 34                	push   0x34
c001c480:	e8 9f 31 ff ff       	call   c000f624 <malloc>
c001c485:	59                   	pop    ecx
c001c486:	89 c7                	mov    edi,eax
c001c488:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c48c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c48e:	56                   	push   esi
c001c48f:	57                   	push   edi
c001c490:	6a 00                	push   0x0
c001c492:	6a 34                	push   0x34
c001c494:	53                   	push   ebx
c001c495:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c498:	83 c4 20             	add    esp,0x20
c001c49b:	85 c0                	test   eax,eax
c001c49d:	75 bd                	jne    c001c45c <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c49f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c4a5:	75 b5                	jne    c001c45c <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c4a7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c4aa:	85 c0                	test   eax,eax
c001c4ac:	74 ae                	je     c001c45c <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c4ae:	52                   	push   edx
c001c4af:	31 d2                	xor    edx,edx
c001c4b1:	52                   	push   edx
c001c4b2:	50                   	push   eax
c001c4b3:	53                   	push   ebx
c001c4b4:	e8 b5 6a ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	85 c0                	test   eax,eax
c001c4be:	75 9c                	jne    c001c45c <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4cb:	31 ed                	xor    ebp,ebp
c001c4cd:	0f af c2             	imul   eax,edx
c001c4d0:	50                   	push   eax
c001c4d1:	e8 4e 31 ff ff       	call   c000f624 <malloc>
c001c4d6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4dc:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4e3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4eb:	0f af c2             	imul   eax,edx
c001c4ee:	99                   	cdq    
c001c4ef:	52                   	push   edx
c001c4f0:	50                   	push   eax
c001c4f1:	53                   	push   ebx
c001c4f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4f5:	83 c4 20             	add    esp,0x20
c001c4f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c500:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c508:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c510:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c518:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c51c:	0f 86 aa 00 00 00    	jbe    c001c5cc <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c522:	0f b7 f5             	movzx  esi,bp
c001c525:	6b f6 28             	imul   esi,esi,0x28
c001c528:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c52c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c52f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c533:	50                   	push   eax
c001c534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c538:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c53c:	8b 16                	mov    edx,DWORD PTR [esi]
c001c53e:	6b c0 28             	imul   eax,eax,0x28
c001c541:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c545:	89 d0                	mov    eax,edx
c001c547:	31 d2                	xor    edx,edx
c001c549:	52                   	push   edx
c001c54a:	50                   	push   eax
c001c54b:	53                   	push   ebx
c001c54c:	e8 1d 6a ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	6a 20                	push   0x20
c001c556:	6a 00                	push   0x0
c001c558:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c55c:	52                   	push   edx
c001c55d:	e8 62 41 fe ff       	call   c00006c4 <memset>
c001c562:	58                   	pop    eax
c001c563:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c565:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c569:	51                   	push   ecx
c001c56a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c56e:	52                   	push   edx
c001c56f:	6a 00                	push   0x0
c001c571:	6a 1f                	push   0x1f
c001c573:	53                   	push   ebx
c001c574:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c577:	83 c4 18             	add    esp,0x18
c001c57a:	68 0d b7 02 c0       	push   0xc002b70d
c001c57f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c583:	52                   	push   edx
c001c584:	e8 2b 42 fe ff       	call   c00007b4 <strcmp>
c001c589:	83 c4 10             	add    esp,0x10
c001c58c:	85 c0                	test   eax,eax
c001c58e:	75 0f                	jne    c001c59f <Thr::loadKernelSymbolTable(char const*)+0x17b>
c001c590:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c593:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c59b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c59f:	50                   	push   eax
c001c5a0:	50                   	push   eax
c001c5a1:	68 15 b7 02 c0       	push   0xc002b715
c001c5a6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c5aa:	50                   	push   eax
c001c5ab:	e8 04 42 fe ff       	call   c00007b4 <strcmp>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	85 c0                	test   eax,eax
c001c5b5:	75 0f                	jne    c001c5c6 <Thr::loadKernelSymbolTable(char const*)+0x1a2>
c001c5b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c5ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5c6:	45                   	inc    ebp
c001c5c7:	e9 4c ff ff ff       	jmp    c001c518 <Thr::loadKernelSymbolTable(char const*)+0xf4>
c001c5cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5d1:	75 10                	jne    c001c5e3 <Thr::loadKernelSymbolTable(char const*)+0x1bf>
c001c5d3:	83 ec 0c             	sub    esp,0xc
c001c5d6:	68 1d b7 02 c0       	push   0xc002b71d
c001c5db:	e8 b9 d8 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5e8:	75 10                	jne    c001c5fa <Thr::loadKernelSymbolTable(char const*)+0x1d6>
c001c5ea:	83 ec 0c             	sub    esp,0xc
c001c5ed:	68 1d b7 02 c0       	push   0xc002b71d
c001c5f2:	e8 a2 d8 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	31 d2                	xor    edx,edx
c001c5fc:	50                   	push   eax
c001c5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c601:	52                   	push   edx
c001c602:	50                   	push   eax
c001c603:	53                   	push   ebx
c001c604:	e8 65 69 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c609:	5a                   	pop    edx
c001c60a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c60e:	e8 11 30 ff ff       	call   c000f624 <malloc>
c001c613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c617:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c61b:	31 c9                	xor    ecx,ecx
c001c61d:	5e                   	pop    esi
c001c61e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c620:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c624:	55                   	push   ebp
c001c625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c629:	51                   	push   ecx
c001c62a:	52                   	push   edx
c001c62b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c62f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c633:	53                   	push   ebx
c001c634:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c637:	83 c4 14             	add    esp,0x14
c001c63a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c63e:	e8 e1 2f ff ff       	call   c000f624 <malloc>
c001c643:	89 c6                	mov    esi,eax
c001c645:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c647:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c64a:	56                   	push   esi
c001c64b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c64f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c653:	51                   	push   ecx
c001c654:	52                   	push   edx
c001c655:	53                   	push   ebx
c001c656:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c65d:	8b 15 e0 ff 02 c0    	mov    edx,DWORD PTR ds:0xc002ffe0
c001c663:	83 c4 1c             	add    esp,0x1c
c001c666:	c1 e8 04             	shr    eax,0x4
c001c669:	89 04 95 60 fe 02 c0 	mov    DWORD PTR [edx*4-0x3ffd01a0],eax
c001c670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c674:	31 d2                	xor    edx,edx
c001c676:	52                   	push   edx
c001c677:	50                   	push   eax
c001c678:	53                   	push   ebx
c001c679:	e8 f0 68 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c67e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c680:	31 d2                	xor    edx,edx
c001c682:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c685:	56                   	push   esi
c001c686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c68a:	52                   	push   edx
c001c68b:	50                   	push   eax
c001c68c:	53                   	push   ebx
c001c68d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c690:	83 c4 14             	add    esp,0x14
c001c693:	53                   	push   ebx
c001c694:	e8 75 68 ff ff       	call   c0012f0e <File::close()>
c001c699:	5d                   	pop    ebp
c001c69a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c69e:	e8 91 2f ff ff       	call   c000f634 <free>
c001c6a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6a6:	e8 89 2f ff ff       	call   c000f634 <free>
c001c6ab:	a1 e0 ff 02 c0       	mov    eax,ds:0xc002ffe0
c001c6b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c6b4:	8d 50 01             	lea    edx,[eax+0x1]
c001c6b7:	89 0c 85 60 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd00a0],ecx
c001c6be:	89 34 85 e0 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0120],esi
c001c6c5:	89 15 e0 ff 02 c0    	mov    DWORD PTR ds:0xc002ffe0,edx
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	b0 01                	mov    al,0x1
c001c6d0:	83 c4 5c             	add    esp,0x5c
c001c6d3:	5b                   	pop    ebx
c001c6d4:	5e                   	pop    esi
c001c6d5:	5f                   	pop    edi
c001c6d6:	5d                   	pop    ebp
c001c6d7:	c3                   	ret    

c001c6d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6d8:	55                   	push   ebp
c001c6d9:	57                   	push   edi
c001c6da:	56                   	push   esi
c001c6db:	53                   	push   ebx
c001c6dc:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6e2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6e9:	8b 1d 34 00 03 c0    	mov    ebx,DWORD PTR ds:0xc0030034
c001c6ef:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6f3:	68 14 01 00 00       	push   0x114
c001c6f8:	e8 27 2f ff ff       	call   c000f624 <malloc>
c001c6fd:	83 c4 0c             	add    esp,0xc
c001c700:	89 c5                	mov    ebp,eax
c001c702:	53                   	push   ebx
c001c703:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c70a:	50                   	push   eax
c001c70b:	e8 3c 67 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c710:	5e                   	pop    esi
c001c711:	5f                   	pop    edi
c001c712:	6a 01                	push   0x1
c001c714:	55                   	push   ebp
c001c715:	e8 96 67 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c71a:	83 c4 10             	add    esp,0x10
c001c71d:	85 c0                	test   eax,eax
c001c71f:	0f 85 8d 06 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c725:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c72d:	83 ec 0c             	sub    esp,0xc
c001c730:	6a 34                	push   0x34
c001c732:	e8 ed 2e ff ff       	call   c000f624 <malloc>
c001c737:	5b                   	pop    ebx
c001c738:	89 c7                	mov    edi,eax
c001c73a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c73e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c741:	53                   	push   ebx
c001c742:	57                   	push   edi
c001c743:	6a 00                	push   0x0
c001c745:	6a 34                	push   0x34
c001c747:	55                   	push   ebp
c001c748:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c74b:	83 c4 20             	add    esp,0x20
c001c74e:	85 c0                	test   eax,eax
c001c750:	0f 85 5c 06 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c756:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c75c:	0f 85 50 06 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c762:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c765:	85 c0                	test   eax,eax
c001c767:	0f 84 45 06 00 00    	je     c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c76d:	31 d2                	xor    edx,edx
c001c76f:	51                   	push   ecx
c001c770:	52                   	push   edx
c001c771:	50                   	push   eax
c001c772:	55                   	push   ebp
c001c773:	e8 f6 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	85 c0                	test   eax,eax
c001c77d:	0f 85 2f 06 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c783:	83 ec 0c             	sub    esp,0xc
c001c786:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c789:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c78d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c791:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c795:	0f af c2             	imul   eax,edx
c001c798:	50                   	push   eax
c001c799:	e8 86 2e ff ff       	call   c000f624 <malloc>
c001c79e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7b4:	0f af c2             	imul   eax,edx
c001c7b7:	99                   	cdq    
c001c7b8:	52                   	push   edx
c001c7b9:	50                   	push   eax
c001c7ba:	55                   	push   ebp
c001c7bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7be:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c7c1:	83 c4 20             	add    esp,0x20
c001c7c4:	85 c0                	test   eax,eax
c001c7c6:	0f 84 e6 05 00 00    	je     c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7cc:	52                   	push   edx
c001c7cd:	31 d2                	xor    edx,edx
c001c7cf:	52                   	push   edx
c001c7d0:	50                   	push   eax
c001c7d1:	55                   	push   ebp
c001c7d2:	e8 97 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c7d7:	83 c4 10             	add    esp,0x10
c001c7da:	85 c0                	test   eax,eax
c001c7dc:	0f 85 d0 05 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7e2:	83 ec 0c             	sub    esp,0xc
c001c7e5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7e9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7ed:	31 f6                	xor    esi,esi
c001c7ef:	0f af c2             	imul   eax,edx
c001c7f2:	50                   	push   eax
c001c7f3:	e8 2c 2e ff ff       	call   c000f624 <malloc>
c001c7f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c802:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c806:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c80a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c80e:	0f af c2             	imul   eax,edx
c001c811:	99                   	cdq    
c001c812:	52                   	push   edx
c001c813:	50                   	push   eax
c001c814:	55                   	push   ebp
c001c815:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c818:	83 c4 20             	add    esp,0x20
c001c81b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c81f:	0f 86 8a 00 00 00    	jbe    c001c8af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c825:	0f b7 de             	movzx  ebx,si
c001c828:	c1 e3 05             	shl    ebx,0x5
c001c82b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c82f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c832:	75 75                	jne    c001c8a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c834:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c837:	31 d2                	xor    edx,edx
c001c839:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c844:	50                   	push   eax
c001c845:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c848:	52                   	push   edx
c001c849:	50                   	push   eax
c001c84a:	55                   	push   ebp
c001c84b:	e8 1e 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	85 c0                	test   eax,eax
c001c855:	0f 85 57 05 00 00    	jne    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c85b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c862:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c865:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c869:	31 d2                	xor    edx,edx
c001c86b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c876:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c87d:	50                   	push   eax
c001c87e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c886:	52                   	push   edx
c001c887:	50                   	push   eax
c001c888:	55                   	push   ebp
c001c889:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c88c:	83 c4 1c             	add    esp,0x1c
c001c88f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c892:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c895:	50                   	push   eax
c001c896:	6a 00                	push   0x0
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c8a0:	50                   	push   eax
c001c8a1:	e8 1e 3e fe ff       	call   c00006c4 <memset>
c001c8a6:	83 c4 10             	add    esp,0x10
c001c8a9:	46                   	inc    esi
c001c8aa:	e9 6c ff ff ff       	jmp    c001c81b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c8af:	53                   	push   ebx
c001c8b0:	31 db                	xor    ebx,ebx
c001c8b2:	68 00 01 00 00       	push   0x100
c001c8b7:	6a 00                	push   0x0
c001c8b9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c8bd:	50                   	push   eax
c001c8be:	e8 01 3e fe ff       	call   c00006c4 <memset>
c001c8c3:	83 c4 0c             	add    esp,0xc
c001c8c6:	68 00 01 00 00       	push   0x100
c001c8cb:	6a 00                	push   0x0
c001c8cd:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8d4:	50                   	push   eax
c001c8d5:	e8 ea 3d fe ff       	call   c00006c4 <memset>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8e5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8fd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c905:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c909:	0f 86 30 01 00 00    	jbe    c001ca3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c90f:	0f b7 f3             	movzx  esi,bx
c001c912:	6b f6 28             	imul   esi,esi,0x28
c001c915:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c919:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c91c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c920:	52                   	push   edx
c001c921:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c925:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c929:	8b 06                	mov    eax,DWORD PTR [esi]
c001c92b:	6b d2 28             	imul   edx,edx,0x28
c001c92e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c932:	31 d2                	xor    edx,edx
c001c934:	52                   	push   edx
c001c935:	50                   	push   eax
c001c936:	55                   	push   ebp
c001c937:	e8 32 66 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c93c:	83 c4 0c             	add    esp,0xc
c001c93f:	6a 20                	push   0x20
c001c941:	6a 00                	push   0x0
c001c943:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c94a:	51                   	push   ecx
c001c94b:	e8 74 3d fe ff       	call   c00006c4 <memset>
c001c950:	59                   	pop    ecx
c001c951:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c954:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c958:	52                   	push   edx
c001c959:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c960:	51                   	push   ecx
c001c961:	6a 00                	push   0x0
c001c963:	6a 1f                	push   0x1f
c001c965:	55                   	push   ebp
c001c966:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c969:	83 c4 1c             	add    esp,0x1c
c001c96c:	6a 09                	push   0x9
c001c96e:	68 37 b7 02 c0       	push   0xc002b737
c001c973:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c97a:	51                   	push   ecx
c001c97b:	e8 bd 3c fe ff       	call   c000063d <memcmp>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	85 c0                	test   eax,eax
c001c985:	75 21                	jne    c001c9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c98f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c997:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c99a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9a1:	89 d0                	mov    eax,edx
c001c9a3:	40                   	inc    eax
c001c9a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9a8:	50                   	push   eax
c001c9a9:	6a 09                	push   0x9
c001c9ab:	68 41 b7 02 c0       	push   0xc002b741
c001c9b0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9b7:	50                   	push   eax
c001c9b8:	e8 80 3c fe ff       	call   c000063d <memcmp>
c001c9bd:	83 c4 10             	add    esp,0x10
c001c9c0:	85 c0                	test   eax,eax
c001c9c2:	75 21                	jne    c001c9e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9cc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c9d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9d7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9de:	89 d0                	mov    eax,edx
c001c9e0:	40                   	inc    eax
c001c9e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9e5:	50                   	push   eax
c001c9e6:	50                   	push   eax
c001c9e7:	68 0d b7 02 c0       	push   0xc002b70d
c001c9ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9f3:	50                   	push   eax
c001c9f4:	e8 bb 3d fe ff       	call   c00007b4 <strcmp>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	85 c0                	test   eax,eax
c001c9fe:	75 0f                	jne    c001ca0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ca00:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca0f:	50                   	push   eax
c001ca10:	50                   	push   eax
c001ca11:	68 15 b7 02 c0       	push   0xc002b715
c001ca16:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca1d:	50                   	push   eax
c001ca1e:	e8 91 3d fe ff       	call   c00007b4 <strcmp>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	85 c0                	test   eax,eax
c001ca28:	75 0f                	jne    c001ca39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ca2a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca35:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca39:	43                   	inc    ebx
c001ca3a:	e9 c6 fe ff ff       	jmp    c001c905 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca3f:	31 d2                	xor    edx,edx
c001ca41:	50                   	push   eax
c001ca42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca46:	52                   	push   edx
c001ca47:	50                   	push   eax
c001ca48:	55                   	push   ebp
c001ca49:	e8 20 65 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001ca4e:	58                   	pop    eax
c001ca4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca53:	e8 cc 2b ff ff       	call   c000f624 <malloc>
c001ca58:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca5f:	31 d2                	xor    edx,edx
c001ca61:	58                   	pop    eax
c001ca62:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca66:	53                   	push   ebx
c001ca67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca6f:	52                   	push   edx
c001ca70:	50                   	push   eax
c001ca71:	55                   	push   ebp
c001ca72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca75:	83 c4 14             	add    esp,0x14
c001ca78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca7c:	e8 a3 2b ff ff       	call   c000f624 <malloc>
c001ca81:	31 d2                	xor    edx,edx
c001ca83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca87:	83 c4 0c             	add    esp,0xc
c001ca8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca8e:	52                   	push   edx
c001ca8f:	50                   	push   eax
c001ca90:	55                   	push   ebp
c001ca91:	e8 d8 64 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001ca96:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca99:	31 d2                	xor    edx,edx
c001ca9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001caa2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001caa6:	52                   	push   edx
c001caa7:	50                   	push   eax
c001caa8:	55                   	push   ebp
c001caa9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caac:	83 c4 20             	add    esp,0x20
c001caaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cab7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cabb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cabf:	0f 84 f1 02 00 00    	je     c001cdb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cac5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cacc:	31 d2                	xor    edx,edx
c001cace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cad2:	c1 e8 03             	shr    eax,0x3
c001cad5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cad9:	51                   	push   ecx
c001cada:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cade:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cae2:	52                   	push   edx
c001cae3:	50                   	push   eax
c001cae4:	55                   	push   ebp
c001cae5:	e8 84 64 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001caea:	5b                   	pop    ebx
c001caeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caef:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001caf6:	e8 29 2b ff ff       	call   c000f624 <malloc>
c001cafb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cafe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb02:	31 d2                	xor    edx,edx
c001cb04:	5e                   	pop    esi
c001cb05:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cb09:	50                   	push   eax
c001cb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb12:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cb19:	52                   	push   edx
c001cb1a:	50                   	push   eax
c001cb1b:	55                   	push   ebp
c001cb1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb1f:	83 c4 20             	add    esp,0x20
c001cb22:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cb2e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb32:	0f 8d 62 02 00 00    	jge    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cb38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb40:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb45:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb50:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb54:	89 d8                	mov    eax,ebx
c001cb56:	c1 e8 08             	shr    eax,0x8
c001cb59:	89 c6                	mov    esi,eax
c001cb5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb5f:	c1 e6 04             	shl    esi,0x4
c001cb62:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb66:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb69:	85 d2                	test   edx,edx
c001cb6b:	0f 85 bf 00 00 00    	jne    c001cc30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb71:	83 ec 0c             	sub    esp,0xc
c001cb74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb78:	03 06                	add    eax,DWORD PTR [esi]
c001cb7a:	50                   	push   eax
c001cb7b:	e8 55 f8 ff ff       	call   c001c3d5 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb80:	83 c4 10             	add    esp,0x10
c001cb83:	89 c2                	mov    edx,eax
c001cb85:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb8a:	85 c0                	test   eax,eax
c001cb8c:	0f 85 9e 00 00 00    	jne    c001cc30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb92:	83 ec 0c             	sub    esp,0xc
c001cb95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb99:	03 06                	add    eax,DWORD PTR [esi]
c001cb9b:	50                   	push   eax
c001cb9c:	e8 3d 17 ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	89 c2                	mov    edx,eax
c001cba6:	85 c0                	test   eax,eax
c001cba8:	0f 85 82 00 00 00    	jne    c001cc30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cbb2:	50                   	push   eax
c001cbb3:	50                   	push   eax
c001cbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbb8:	03 06                	add    eax,DWORD PTR [esi]
c001cbba:	50                   	push   eax
c001cbbb:	68 4b b7 02 c0       	push   0xc002b74b
c001cbc0:	e8 2e 5d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001cbc5:	58                   	pop    eax
c001cbc6:	5a                   	pop    edx
c001cbc7:	68 65 b7 02 c0       	push   0xc002b765
c001cbcc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbd3:	50                   	push   eax
c001cbd4:	e8 8a 3b fe ff       	call   c0000763 <strcpy>
c001cbd9:	59                   	pop    ecx
c001cbda:	58                   	pop    eax
c001cbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbdf:	03 06                	add    eax,DWORD PTR [esi]
c001cbe1:	50                   	push   eax
c001cbe2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbe9:	50                   	push   eax
c001cbea:	e8 2b 3c fe ff       	call   c000081a <strcat>
c001cbef:	58                   	pop    eax
c001cbf0:	5a                   	pop    edx
c001cbf1:	68 fb b7 02 c0       	push   0xc002b7fb
c001cbf6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbfd:	50                   	push   eax
c001cbfe:	e8 17 3c fe ff       	call   c000081a <strcat>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc0b:	0f 84 43 01 00 00    	je     c001cd54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cc11:	83 ec 0c             	sub    esp,0xc
c001cc14:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc1b:	50                   	push   eax
c001cc1c:	e8 78 d2 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cc28:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc2c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc30:	80 fb 01             	cmp    bl,0x1
c001cc33:	75 7d                	jne    c001ccb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cc35:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc3c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc40:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc44:	01 ce                	add    esi,ecx
c001cc46:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc4c:	0f 94 c0             	sete   al
c001cc4f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc55:	0f 94 c3             	sete   bl
c001cc58:	09 c3                	or     ebx,eax
c001cc5a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc5c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc61:	74 36                	je     c001cc99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cc63:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc66:	84 db                	test   bl,bl
c001cc68:	75 0a                	jne    c001cc74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cc6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc6e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc72:	76 37                	jbe    c001ccab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc74:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc7d:	0f 84 d1 00 00 00    	je     c001cd54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cc83:	83 ec 0c             	sub    esp,0xc
c001cc86:	68 7c b7 02 c0       	push   0xc002b77c
c001cc8b:	e8 09 d2 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc97:	eb 12                	jmp    c001ccab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc99:	01 c1                	add    ecx,eax
c001cc9b:	84 db                	test   bl,bl
c001cc9d:	75 0c                	jne    c001ccab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc9f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cca3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cca7:	77 02                	ja     c001ccab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cca9:	01 d1                	add    ecx,edx
c001ccab:	89 0e                	mov    DWORD PTR [esi],ecx
c001ccad:	e9 df 00 00 00       	jmp    c001cd91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ccb2:	80 fb 02             	cmp    bl,0x2
c001ccb5:	75 71                	jne    c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ccb7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ccbe:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ccc2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ccc6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cccc:	74 15                	je     c001cce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ccce:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccd4:	74 0d                	je     c001cce3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ccd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccda:	83 e8 04             	sub    eax,0x4
c001ccdd:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cce1:	76 1f                	jbe    c001cd02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001cce3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cce7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccec:	74 66                	je     c001cd54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	68 98 b7 02 c0       	push   0xc002b798
c001ccf6:	e8 9e d1 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd02:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd04:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd09:	74 13                	je     c001cd1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001cd0b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cd0f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cd16:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cd1a:	01 c8                	add    eax,ecx
c001cd1c:	eb 04                	jmp    c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001cd1e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cd22:	01 c2                	add    edx,eax
c001cd24:	89 16                	mov    DWORD PTR [esi],edx
c001cd26:	eb 69                	jmp    c001cd91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cd28:	0f b6 db             	movzx  ebx,bl
c001cd2b:	50                   	push   eax
c001cd2c:	50                   	push   eax
c001cd2d:	53                   	push   ebx
c001cd2e:	68 b4 b7 02 c0       	push   0xc002b7b4
c001cd33:	e8 bb 5b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd40:	74 12                	je     c001cd54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cd42:	83 ec 0c             	sub    esp,0xc
c001cd45:	68 bf b7 02 c0       	push   0xc002b7bf
c001cd4a:	e8 4a d1 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	eb 3d                	jmp    c001cd91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cd54:	83 ec 0c             	sub    esp,0xc
c001cd57:	55                   	push   ebp
c001cd58:	e8 b1 61 ff ff       	call   c0012f0e <File::close()>
c001cd5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd66:	59                   	pop    ecx
c001cd67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd6b:	e8 c4 28 ff ff       	call   c000f634 <free>
c001cd70:	5b                   	pop    ebx
c001cd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd75:	e8 ba 28 ff ff       	call   c000f634 <free>
c001cd7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd7d:	e8 b2 28 ff ff       	call   c000f634 <free>
c001cd82:	5e                   	pop    esi
c001cd83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd87:	e8 a8 28 ff ff       	call   c000f634 <free>
c001cd8c:	83 c4 10             	add    esp,0x10
c001cd8f:	eb 21                	jmp    c001cdb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd91:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd95:	e9 90 fd ff ff       	jmp    c001cb2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cda1:	e8 8e 28 ff ff       	call   c000f634 <free>
c001cda6:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cdaa:	83 c4 10             	add    esp,0x10
c001cdad:	e9 05 fd ff ff       	jmp    c001cab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cdb2:	31 c0                	xor    eax,eax
c001cdb4:	eb 33                	jmp    c001cde9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cdb6:	83 ec 0c             	sub    esp,0xc
c001cdb9:	55                   	push   ebp
c001cdba:	e8 4f 61 ff ff       	call   c0012f0e <File::close()>
c001cdbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdc2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdc8:	58                   	pop    eax
c001cdc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdcd:	e8 62 28 ff ff       	call   c000f634 <free>
c001cdd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdd5:	e8 5a 28 ff ff       	call   c000f634 <free>
c001cdda:	5a                   	pop    edx
c001cddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cddf:	e8 50 28 ff ff       	call   c000f634 <free>
c001cde4:	83 c4 10             	add    esp,0x10
c001cde7:	b0 01                	mov    al,0x1
c001cde9:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdef:	5b                   	pop    ebx
c001cdf0:	5e                   	pop    esi
c001cdf1:	5f                   	pop    edi
c001cdf2:	5d                   	pop    ebp
c001cdf3:	c3                   	ret    

c001cdf4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cdf4:	56                   	push   esi
c001cdf5:	31 d2                	xor    edx,edx
c001cdf7:	53                   	push   ebx
c001cdf8:	8b 1d 40 f8 02 c0    	mov    ebx,DWORD PTR ds:0xc002f840
c001cdfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce02:	39 d3                	cmp    ebx,edx
c001ce04:	7e 1b                	jle    c001ce21 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ce06:	8b 04 95 60 fa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd05a0]
c001ce0d:	39 c8                	cmp    eax,ecx
c001ce0f:	77 0d                	ja     c001ce1e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ce11:	8b 34 95 60 f8 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd07a0]
c001ce18:	01 c6                	add    esi,eax
c001ce1a:	39 ce                	cmp    esi,ecx
c001ce1c:	77 05                	ja     c001ce23 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ce1e:	42                   	inc    edx
c001ce1f:	eb e1                	jmp    c001ce02 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ce21:	31 c0                	xor    eax,eax
c001ce23:	5b                   	pop    ebx
c001ce24:	5e                   	pop    esi
c001ce25:	c3                   	ret    

c001ce26 <Thr::getDriverNameFromAddress(unsigned long)>:
c001ce26:	53                   	push   ebx
c001ce27:	31 c0                	xor    eax,eax
c001ce29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce2d:	8b 1d 40 f8 02 c0    	mov    ebx,DWORD PTR ds:0xc002f840
c001ce33:	39 c3                	cmp    ebx,eax
c001ce35:	7e 22                	jle    c001ce59 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce37:	8b 14 85 60 fa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd05a0]
c001ce3e:	39 ca                	cmp    edx,ecx
c001ce40:	77 14                	ja     c001ce56 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce42:	03 14 85 60 f8 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd07a0]
c001ce49:	39 ca                	cmp    edx,ecx
c001ce4b:	76 09                	jbe    c001ce56 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce4d:	8b 04 85 60 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03a0]
c001ce54:	eb 05                	jmp    c001ce5b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce56:	40                   	inc    eax
c001ce57:	eb da                	jmp    c001ce33 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce59:	31 c0                	xor    eax,eax
c001ce5b:	5b                   	pop    ebx
c001ce5c:	c3                   	ret    

c001ce5d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce5d:	53                   	push   ebx
c001ce5e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce62:	53                   	push   ebx
c001ce63:	e8 8c ff ff ff       	call   c001cdf4 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce68:	5a                   	pop    edx
c001ce69:	31 d2                	xor    edx,edx
c001ce6b:	85 c0                	test   eax,eax
c001ce6d:	74 04                	je     c001ce73 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce6f:	89 da                	mov    edx,ebx
c001ce71:	29 c2                	sub    edx,eax
c001ce73:	89 d0                	mov    eax,edx
c001ce75:	5b                   	pop    ebx
c001ce76:	c3                   	ret    

c001ce77 <Thr::loadDLL(char const*, bool)>:
c001ce77:	55                   	push   ebp
c001ce78:	57                   	push   edi
c001ce79:	56                   	push   esi
c001ce7a:	53                   	push   ebx
c001ce7b:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce81:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce88:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ce8f:	56                   	push   esi
c001ce90:	68 d7 b7 02 c0       	push   0xc002b7d7
c001ce95:	e8 59 5a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ce9a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cea1:	e8 7e 27 ff ff       	call   c000f624 <malloc>
c001cea6:	83 c4 0c             	add    esp,0xc
c001cea9:	89 c3                	mov    ebx,eax
c001ceab:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c001ceb1:	56                   	push   esi
c001ceb2:	50                   	push   eax
c001ceb3:	e8 94 5f ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	85 db                	test   ebx,ebx
c001cebd:	75 3c                	jne    c001cefb <Thr::loadDLL(char const*, bool)+0x84>
c001cebf:	89 e8                	mov    eax,ebp
c001cec1:	84 c0                	test   al,al
c001cec3:	0f 84 b0 01 00 00    	je     c001d079 <Thr::loadDLL(char const*, bool)+0x202>
c001cec9:	50                   	push   eax
c001ceca:	50                   	push   eax
c001cecb:	68 e8 b7 02 c0       	push   0xc002b7e8
c001ced0:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001ced4:	57                   	push   edi
c001ced5:	e8 89 38 fe ff       	call   c0000763 <strcpy>
c001ceda:	58                   	pop    eax
c001cedb:	5a                   	pop    edx
c001cedc:	56                   	push   esi
c001cedd:	57                   	push   edi
c001cede:	e8 37 39 fe ff       	call   c000081a <strcat>
c001cee3:	59                   	pop    ecx
c001cee4:	58                   	pop    eax
c001cee5:	68 fb b7 02 c0       	push   0xc002b7fb
c001ceea:	57                   	push   edi
c001ceeb:	e8 2a 39 fe ff       	call   c000081a <strcat>
c001cef0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cef3:	e8 a1 cf ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	50                   	push   eax
c001cefc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cf00:	50                   	push   eax
c001cf01:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf05:	50                   	push   eax
c001cf06:	53                   	push   ebx
c001cf07:	e8 50 62 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	85 db                	test   ebx,ebx
c001cf11:	74 0c                	je     c001cf1f <Thr::loadDLL(char const*, bool)+0xa8>
c001cf13:	83 ec 0c             	sub    esp,0xc
c001cf16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf18:	53                   	push   ebx
c001cf19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cf24:	75 0a                	jne    c001cf30 <Thr::loadDLL(char const*, bool)+0xb9>
c001cf26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf2a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cf2e:	75 3c                	jne    c001cf6c <Thr::loadDLL(char const*, bool)+0xf5>
c001cf30:	89 e8                	mov    eax,ebp
c001cf32:	84 c0                	test   al,al
c001cf34:	0f 84 3d 01 00 00    	je     c001d077 <Thr::loadDLL(char const*, bool)+0x200>
c001cf3a:	50                   	push   eax
c001cf3b:	50                   	push   eax
c001cf3c:	68 e8 b7 02 c0       	push   0xc002b7e8
c001cf41:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf45:	53                   	push   ebx
c001cf46:	e8 18 38 fe ff       	call   c0000763 <strcpy>
c001cf4b:	58                   	pop    eax
c001cf4c:	5a                   	pop    edx
c001cf4d:	56                   	push   esi
c001cf4e:	53                   	push   ebx
c001cf4f:	e8 c6 38 fe ff       	call   c000081a <strcat>
c001cf54:	59                   	pop    ecx
c001cf55:	5f                   	pop    edi
c001cf56:	68 fb b7 02 c0       	push   0xc002b7fb
c001cf5b:	53                   	push   ebx
c001cf5c:	e8 b9 38 fe ff       	call   c000081a <strcat>
c001cf61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf64:	e8 30 cf ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	e8 22 4b ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001cf71:	51                   	push   ecx
c001cf72:	6a 03                	push   0x3
c001cf74:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf78:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf7c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cf82:	83 d3 00             	adc    ebx,0x0
c001cf85:	89 ca                	mov    edx,ecx
c001cf87:	89 d1                	mov    ecx,edx
c001cf89:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cf8d:	51                   	push   ecx
c001cf8e:	50                   	push   eax
c001cf8f:	e8 3a 51 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001cf94:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf97:	89 c3                	mov    ebx,eax
c001cf99:	e8 43 37 fe ff       	call   c00006e1 <strlen>
c001cf9e:	8b 3d 40 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f840
c001cfa4:	40                   	inc    eax
c001cfa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfa8:	e8 77 26 ff ff       	call   c000f624 <malloc>
c001cfad:	89 04 bd 60 fc 02 c0 	mov    DWORD PTR [edi*4-0x3ffd03a0],eax
c001cfb4:	5f                   	pop    edi
c001cfb5:	58                   	pop    eax
c001cfb6:	a1 40 f8 02 c0       	mov    eax,ds:0xc002f840
c001cfbb:	56                   	push   esi
c001cfbc:	ff 34 85 60 fc 02 c0 	push   DWORD PTR [eax*4-0x3ffd03a0]
c001cfc3:	e8 9b 37 fe ff       	call   c0000763 <strcpy>
c001cfc8:	a1 40 f8 02 c0       	mov    eax,ds:0xc002f840
c001cfcd:	8d 50 01             	lea    edx,[eax+0x1]
c001cfd0:	89 1c 85 60 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05a0],ebx
c001cfd7:	89 15 40 f8 02 c0    	mov    DWORD PTR ds:0xc002f840,edx
c001cfdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfe1:	83 c4 0c             	add    esp,0xc
c001cfe4:	89 14 85 60 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07a0],edx
c001cfeb:	6a 01                	push   0x1
c001cfed:	53                   	push   ebx
c001cfee:	56                   	push   esi
c001cfef:	e8 e4 f6 ff ff       	call   c001c6d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cff4:	83 c4 10             	add    esp,0x10
c001cff7:	89 c7                	mov    edi,eax
c001cff9:	fe c8                	dec    al
c001cffb:	74 16                	je     c001d013 <Thr::loadDLL(char const*, bool)+0x19c>
c001cffd:	89 e8                	mov    eax,ebp
c001cfff:	84 c0                	test   al,al
c001d001:	74 10                	je     c001d013 <Thr::loadDLL(char const*, bool)+0x19c>
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	68 fd b7 02 c0       	push   0xc002b7fd
c001d00b:	e8 89 ce ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001d010:	83 c4 10             	add    esp,0x10
c001d013:	31 f6                	xor    esi,esi
c001d015:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d019:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d01d:	05 ff 0f 00 00       	add    eax,0xfff
c001d022:	83 d2 00             	adc    edx,0x0
c001d025:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d029:	c1 ea 0c             	shr    edx,0xc
c001d02c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d030:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d034:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d038:	ba 00 00 00 00       	mov    edx,0x0
c001d03d:	89 d0                	mov    eax,edx
c001d03f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d043:	73 2c                	jae    c001d071 <Thr::loadDLL(char const*, bool)+0x1fa>
c001d045:	e8 49 4a ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001d04a:	89 f5                	mov    ebp,esi
c001d04c:	c1 e5 0c             	shl    ebp,0xc
c001d04f:	52                   	push   edx
c001d050:	01 dd                	add    ebp,ebx
c001d052:	52                   	push   edx
c001d053:	55                   	push   ebp
c001d054:	50                   	push   eax
c001d055:	e8 ee 4b ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d060:	75 0c                	jne    c001d06e <Thr::loadDLL(char const*, bool)+0x1f7>
c001d062:	83 ec 0c             	sub    esp,0xc
c001d065:	55                   	push   ebp
c001d066:	e8 cc 2b ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	46                   	inc    esi
c001d06f:	eb a4                	jmp    c001d015 <Thr::loadDLL(char const*, bool)+0x19e>
c001d071:	89 f8                	mov    eax,edi
c001d073:	84 c0                	test   al,al
c001d075:	75 02                	jne    c001d079 <Thr::loadDLL(char const*, bool)+0x202>
c001d077:	31 db                	xor    ebx,ebx
c001d079:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d07f:	89 d8                	mov    eax,ebx
c001d081:	5b                   	pop    ebx
c001d082:	5e                   	pop    esi
c001d083:	5f                   	pop    edi
c001d084:	5d                   	pop    ebp
c001d085:	c3                   	ret    

c001d086 <Thr::executeDLL(unsigned long, void*)>:
c001d086:	56                   	push   esi
c001d087:	53                   	push   ebx
c001d088:	51                   	push   ecx
c001d089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d08d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d091:	85 db                	test   ebx,ebx
c001d093:	75 10                	jne    c001d0a5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d095:	83 ec 0c             	sub    esp,0xc
c001d098:	68 1c b8 02 c0       	push   0xc002b81c
c001d09d:	e8 f7 cd ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001d0a9:	89 d8                	mov    eax,ebx
c001d0ab:	5a                   	pop    edx
c001d0ac:	5b                   	pop    ebx
c001d0ad:	5e                   	pop    esi
c001d0ae:	ff e0                	jmp    eax

c001d0b0 <changeTSS>:
c001d0b0:	83 ec 14             	sub    esp,0x14
c001d0b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0b8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d0bb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d0c0:	c1 e2 15             	shl    edx,0x15
c001d0c3:	29 d0                	sub    eax,edx
c001d0c5:	50                   	push   eax
c001d0c6:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d0cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0d1:	05 7c 11 00 00       	add    eax,0x117c
c001d0d6:	50                   	push   eax
c001d0d7:	e8 66 41 ff ff       	call   c0011242 <TSS::setESP(unsigned long)>
c001d0dc:	83 c4 1c             	add    esp,0x1c
c001d0df:	c3                   	ret    

c001d0e0 <Process::addArgs(char**)>:
c001d0e0:	57                   	push   edi
c001d0e1:	56                   	push   esi
c001d0e2:	53                   	push   ebx
c001d0e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d0eb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d0f5:	85 ff                	test   edi,edi
c001d0f7:	74 3d                	je     c001d136 <Process::addArgs(char**)+0x56>
c001d0f9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d0fb:	85 c0                	test   eax,eax
c001d0fd:	74 37                	je     c001d136 <Process::addArgs(char**)+0x56>
c001d0ff:	31 db                	xor    ebx,ebx
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	50                   	push   eax
c001d105:	e8 d7 35 fe ff       	call   c00006e1 <strlen>
c001d10a:	40                   	inc    eax
c001d10b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d10e:	e8 11 25 ff ff       	call   c000f624 <malloc>
c001d113:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d11a:	5a                   	pop    edx
c001d11b:	59                   	pop    ecx
c001d11c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d11f:	43                   	inc    ebx
c001d120:	50                   	push   eax
c001d121:	e8 3d 36 fe ff       	call   c0000763 <strcpy>
c001d126:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d132:	85 c0                	test   eax,eax
c001d134:	75 cb                	jne    c001d101 <Process::addArgs(char**)+0x21>
c001d136:	5b                   	pop    ebx
c001d137:	5e                   	pop    esi
c001d138:	5f                   	pop    edi
c001d139:	c3                   	ret    

c001d13a <Process::Process(char const*, Process*, char**)>:
c001d13a:	56                   	push   esi
c001d13b:	53                   	push   ebx
c001d13c:	83 ec 14             	sub    esp,0x14
c001d13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d143:	05 0c 02 00 00       	add    eax,0x20c
c001d148:	bb 07 00 00 00       	mov    ebx,0x7
c001d14d:	89 c6                	mov    esi,eax
c001d14f:	85 db                	test   ebx,ebx
c001d151:	78 12                	js     c001d165 <Process::Process(char const*, Process*, char**)+0x2b>
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	56                   	push   esi
c001d157:	e8 a6 b2 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	83 c6 63             	add    esi,0x63
c001d162:	4b                   	dec    ebx
c001d163:	eb ea                	jmp    c001d14f <Process::Process(char const*, Process*, char**)+0x15>
c001d165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d169:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d177:	e8 6e cb ff ff       	call   c0019cea <Krnl::newProcessEnv(Process*)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	89 c2                	mov    edx,eax
c001d181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d185:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d18b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d18f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d198:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d19d:	8d 50 01             	lea    edx,[eax+0x1]
c001d1a0:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d1a6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1aa:	89 02                	mov    DWORD PTR [edx],eax
c001d1ac:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d1b4:	83 ec 0c             	sub    esp,0xc
c001d1b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1bb:	e8 64 24 ff ff       	call   c000f624 <malloc>
c001d1c0:	83 c4 10             	add    esp,0x10
c001d1c3:	89 c3                	mov    ebx,eax
c001d1c5:	83 ec 08             	sub    esp,0x8
c001d1c8:	6a 00                	push   0x0
c001d1ca:	53                   	push   ebx
c001d1cb:	e8 a6 52 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001d1d0:	83 c4 10             	add    esp,0x10
c001d1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d1eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1f3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d203:	85 c0                	test   eax,eax
c001d205:	74 42                	je     c001d249 <Process::Process(char const*, Process*, char**)+0x10f>
c001d207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d20b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d211:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d21b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d225:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d22b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d235:	05 0c 01 00 00       	add    eax,0x10c
c001d23a:	83 ec 08             	sub    esp,0x8
c001d23d:	52                   	push   edx
c001d23e:	50                   	push   eax
c001d23f:	e8 1f 35 fe ff       	call   c0000763 <strcpy>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	eb 63                	jmp    c001d2ac <Process::Process(char const*, Process*, char**)+0x172>
c001d249:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d251:	83 ec 0c             	sub    esp,0xc
c001d254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d258:	e8 c7 23 ff ff       	call   c000f624 <malloc>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	89 c3                	mov    ebx,eax
c001d262:	83 ec 08             	sub    esp,0x8
c001d265:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d269:	53                   	push   ebx
c001d26a:	e8 d1 3c ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d276:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d27c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d280:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d286:	83 ec 0c             	sub    esp,0xc
c001d289:	50                   	push   eax
c001d28a:	e8 a4 30 ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001d28f:	83 c4 10             	add    esp,0x10
c001d292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d296:	05 0c 01 00 00       	add    eax,0x10c
c001d29b:	83 ec 08             	sub    esp,0x8
c001d29e:	68 46 b8 02 c0       	push   0xc002b846
c001d2a3:	50                   	push   eax
c001d2a4:	e8 ba 34 fe ff       	call   c0000763 <strcpy>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b0:	83 c0 0c             	add    eax,0xc
c001d2b3:	83 ec 08             	sub    esp,0x8
c001d2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ba:	50                   	push   eax
c001d2bb:	e8 a3 34 fe ff       	call   c0000763 <strcpy>
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	83 ec 08             	sub    esp,0x8
c001d2c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ce:	e8 0d fe ff ff       	call   c001d0e0 <Process::addArgs(char**)>
c001d2d3:	83 c4 10             	add    esp,0x10
c001d2d6:	83 ec 08             	sub    esp,0x8
c001d2d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2e1:	e8 c6 ee ff ff       	call   c001c1ac <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2f1:	83 f0 01             	xor    eax,0x1
c001d2f4:	88 c2                	mov    dl,al
c001d2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fa:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d300:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d305:	83 ec 08             	sub    esp,0x8
c001d308:	50                   	push   eax
c001d309:	68 44 b9 02 c0       	push   0xc002b944
c001d30e:	e8 e0 55 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d313:	83 c4 10             	add    esp,0x10
c001d316:	90                   	nop
c001d317:	83 c4 14             	add    esp,0x14
c001d31a:	5b                   	pop    ebx
c001d31b:	5e                   	pop    esi
c001d31c:	c3                   	ret    
c001d31d:	90                   	nop

c001d31e <Process::Process(bool, char const*, Process*, char**)>:
c001d31e:	56                   	push   esi
c001d31f:	53                   	push   ebx
c001d320:	83 ec 24             	sub    esp,0x24
c001d323:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d327:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d32b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d32f:	05 0c 02 00 00       	add    eax,0x20c
c001d334:	bb 07 00 00 00       	mov    ebx,0x7
c001d339:	89 c6                	mov    esi,eax
c001d33b:	85 db                	test   ebx,ebx
c001d33d:	78 12                	js     c001d351 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d33f:	83 ec 0c             	sub    esp,0xc
c001d342:	56                   	push   esi
c001d343:	e8 ba b0 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d348:	83 c4 10             	add    esp,0x10
c001d34b:	83 c6 63             	add    esi,0x63
c001d34e:	4b                   	dec    ebx
c001d34f:	eb ea                	jmp    c001d33b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d355:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d35c:	83 ec 0c             	sub    esp,0xc
c001d35f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d363:	e8 82 c9 ff ff       	call   c0019cea <Krnl::newProcessEnv(Process*)>
c001d368:	83 c4 10             	add    esp,0x10
c001d36b:	89 c2                	mov    edx,eax
c001d36d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d371:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d37b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d384:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d389:	8d 50 01             	lea    edx,[eax+0x1]
c001d38c:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d392:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d396:	89 02                	mov    DWORD PTR [edx],eax
c001d398:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d3a0:	83 ec 0c             	sub    esp,0xc
c001d3a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3a7:	e8 78 22 ff ff       	call   c000f624 <malloc>
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	89 c3                	mov    ebx,eax
c001d3b1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d3b6:	83 ec 08             	sub    esp,0x8
c001d3b9:	50                   	push   eax
c001d3ba:	53                   	push   ebx
c001d3bb:	e8 b6 50 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3c7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d3cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3d1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3e3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3ed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3f3:	85 c0                	test   eax,eax
c001d3f5:	74 42                	je     c001d439 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d3f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3fb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d401:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d40b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d415:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d41b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d425:	05 0c 01 00 00       	add    eax,0x10c
c001d42a:	83 ec 08             	sub    esp,0x8
c001d42d:	52                   	push   edx
c001d42e:	50                   	push   eax
c001d42f:	e8 2f 33 fe ff       	call   c0000763 <strcpy>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	eb 63                	jmp    c001d49c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d439:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d441:	83 ec 0c             	sub    esp,0xc
c001d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d448:	e8 d7 21 ff ff       	call   c000f624 <malloc>
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	89 c3                	mov    ebx,eax
c001d452:	83 ec 08             	sub    esp,0x8
c001d455:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d459:	53                   	push   ebx
c001d45a:	e8 e1 3a ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d466:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d46c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d470:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	50                   	push   eax
c001d47a:	e8 b4 2e ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d486:	05 0c 01 00 00       	add    eax,0x10c
c001d48b:	83 ec 08             	sub    esp,0x8
c001d48e:	68 46 b8 02 c0       	push   0xc002b846
c001d493:	50                   	push   eax
c001d494:	e8 ca 32 fe ff       	call   c0000763 <strcpy>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4a0:	83 c0 0c             	add    eax,0xc
c001d4a3:	83 ec 08             	sub    esp,0x8
c001d4a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d4aa:	50                   	push   eax
c001d4ab:	e8 b3 32 fe ff       	call   c0000763 <strcpy>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	83 ec 08             	sub    esp,0x8
c001d4b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d4ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4be:	e8 1d fc ff ff       	call   c001d0e0 <Process::addArgs(char**)>
c001d4c3:	83 c4 10             	add    esp,0x10
c001d4c6:	90                   	nop
c001d4c7:	83 c4 24             	add    esp,0x24
c001d4ca:	5b                   	pop    ebx
c001d4cb:	5e                   	pop    esi
c001d4cc:	c3                   	ret    

c001d4cd <disableIRQs()>:
c001d4cd:	fa                   	cli    
c001d4ce:	ff 05 0c 00 03 c0    	inc    DWORD PTR ds:0xc003000c
c001d4d4:	c3                   	ret    

c001d4d5 <getIRQNestingLevel()>:
c001d4d5:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c001d4da:	c3                   	ret    

c001d4db <enableIRQs()>:
c001d4db:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c001d4e0:	48                   	dec    eax
c001d4e1:	a3 0c 00 03 c0       	mov    ds:0xc003000c,eax
c001d4e6:	75 01                	jne    c001d4e9 <enableIRQs()+0xe>
c001d4e8:	fb                   	sti    
c001d4e9:	c3                   	ret    

c001d4ea <lockScheduler()>:
c001d4ea:	eb e1                	jmp    c001d4cd <disableIRQs()>

c001d4ec <unlockScheduler()>:
c001d4ec:	eb ed                	jmp    c001d4db <enableIRQs()>

c001d4ee <userModeEntryPoint(void*)>:
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	e8 f6 ff ff ff       	call   c001d4ec <unlockScheduler()>
c001d4f6:	fb                   	sti    
c001d4f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d4ff:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d509:	83 c4 0c             	add    esp,0xc
c001d50c:	e9 19 2e fe ff       	jmp    c000032a <goToUsermode>

c001d511 <lockStuff()>:
c001d511:	e8 b7 ff ff ff       	call   c001d4cd <disableIRQs()>
c001d516:	ff 05 08 00 03 c0    	inc    DWORD PTR ds:0xc0030008
c001d51c:	c3                   	ret    

c001d51d <taskStartupFunction>:
c001d51d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d522:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d525:	c3                   	ret    

c001d526 <updateTimeUsed()>:
c001d526:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d52b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d531:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d538:	74 50                	je     c001d58a <updateTimeUsed()+0x64>
c001d53a:	57                   	push   edi
c001d53b:	56                   	push   esi
c001d53c:	53                   	push   ebx
c001d53d:	0f 31                	rdtsc  
c001d53f:	89 c1                	mov    ecx,eax
c001d541:	a3 48 00 03 c0       	mov    ds:0xc0030048,eax
c001d546:	2b 0d 38 00 03 c0    	sub    ecx,DWORD PTR ds:0xc0030038
c001d54c:	89 d3                	mov    ebx,edx
c001d54e:	89 0d 40 00 03 c0    	mov    DWORD PTR ds:0xc0030040,ecx
c001d554:	1b 1d 3c 00 03 c0    	sbb    ebx,DWORD PTR ds:0xc003003c
c001d55a:	a3 38 00 03 c0       	mov    ds:0xc0030038,eax
c001d55f:	89 1d 44 00 03 c0    	mov    DWORD PTR ds:0xc0030044,ebx
c001d565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d56a:	89 15 4c 00 03 c0    	mov    DWORD PTR ds:0xc003004c,edx
c001d570:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d573:	89 15 3c 00 03 c0    	mov    DWORD PTR ds:0xc003003c,edx
c001d579:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d57c:	01 f1                	add    ecx,esi
c001d57e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d581:	11 fb                	adc    ebx,edi
c001d583:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d586:	5b                   	pop    ebx
c001d587:	5e                   	pop    esi
c001d588:	5f                   	pop    edi
c001d589:	c3                   	ret    
c001d58a:	c3                   	ret    

c001d58b <switchToThread(ThreadControlBlock*)>:
c001d58b:	53                   	push   ebx
c001d58c:	83 ec 08             	sub    esp,0x8
c001d58f:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c001d594:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d598:	85 c0                	test   eax,eax
c001d59a:	75 30                	jne    c001d5cc <switchToThread(ThreadControlBlock*)+0x41>
c001d59c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d59f:	3c ff                	cmp    al,0xff
c001d5a1:	74 25                	je     c001d5c8 <switchToThread(ThreadControlBlock*)+0x3d>
c001d5a3:	0f b6 d0             	movzx  edx,al
c001d5a6:	b8 84 03 00 00       	mov    eax,0x384
c001d5ab:	29 d0                	sub    eax,edx
c001d5ad:	c1 e0 10             	shl    eax,0x10
c001d5b0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d5b3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d5b6:	e8 6b ff ff ff       	call   c001d526 <updateTimeUsed()>
c001d5bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d5bf:	83 c4 08             	add    esp,0x8
c001d5c2:	5b                   	pop    ebx
c001d5c3:	e9 9a 2d fe ff       	jmp    c0000362 <switchToThreadASM>
c001d5c8:	31 c0                	xor    eax,eax
c001d5ca:	eb e7                	jmp    c001d5b3 <switchToThread(ThreadControlBlock*)+0x28>
c001d5cc:	c7 05 04 00 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030004,0x1
c001d5d6:	83 c4 08             	add    esp,0x8
c001d5d9:	5b                   	pop    ebx
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <Semaphore::Semaphore(int)>:
c001d5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5e4:	89 10                	mov    DWORD PTR [eax],edx
c001d5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d600:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d607:	90                   	nop
c001d608:	c3                   	ret    
c001d609:	90                   	nop

c001d60a <Mutex::Mutex()>:
c001d60a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d60e:	6a 01                	push   0x1
c001d610:	50                   	push   eax
c001d611:	e8 c6 ff ff ff       	call   c001d5dc <Semaphore::Semaphore(int)>
c001d616:	83 c4 08             	add    esp,0x8
c001d619:	90                   	nop
c001d61a:	c3                   	ret    
c001d61b:	90                   	nop

c001d61c <Process::createThread(void (*)(void*), void*, int)>:
c001d61c:	55                   	push   ebp
c001d61d:	31 c9                	xor    ecx,ecx
c001d61f:	57                   	push   edi
c001d620:	56                   	push   esi
c001d621:	53                   	push   ebx
c001d622:	83 ec 1c             	sub    esp,0x1c
c001d625:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d629:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d630:	89 f2                	mov    edx,esi
c001d632:	0f b7 c2             	movzx  eax,dx
c001d635:	83 e2 01             	and    edx,0x1
c001d638:	74 14                	je     c001d64e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d63a:	d1 f8                	sar    eax,1
c001d63c:	41                   	inc    ecx
c001d63d:	89 c2                	mov    edx,eax
c001d63f:	83 f9 10             	cmp    ecx,0x10
c001d642:	75 ee                	jne    c001d632 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d644:	83 c4 1c             	add    esp,0x1c
c001d647:	31 c0                	xor    eax,eax
c001d649:	5b                   	pop    ebx
c001d64a:	5e                   	pop    esi
c001d64b:	5f                   	pop    edi
c001d64c:	5d                   	pop    ebp
c001d64d:	c3                   	ret    
c001d64e:	83 ec 08             	sub    esp,0x8
c001d651:	b8 01 00 00 00       	mov    eax,0x1
c001d656:	d3 e0                	shl    eax,cl
c001d658:	09 c6                	or     esi,eax
c001d65a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d660:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d667:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d66a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d66d:	01 ce                	add    esi,ecx
c001d66f:	89 f0                	mov    eax,esi
c001d671:	c1 e0 05             	shl    eax,0x5
c001d674:	01 c6                	add    esi,eax
c001d676:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d679:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d67f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d685:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d689:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d68f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d695:	89 ca                	mov    edx,ecx
c001d697:	f7 da                	neg    edx
c001d699:	c1 e2 15             	shl    edx,0x15
c001d69c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d6a2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d6a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d6ac:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d6b6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d6bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d6c0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d6c6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d6d0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6da:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d6e1:	50                   	push   eax
c001d6e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6e6:	68 28 00 03 c0       	push   0xc0030028
c001d6eb:	e8 a0 ab 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6f7:	83 c4 1c             	add    esp,0x1c
c001d6fa:	5b                   	pop    ebx
c001d6fb:	5e                   	pop    esi
c001d6fc:	5f                   	pop    edi
c001d6fd:	5d                   	pop    ebp
c001d6fe:	c3                   	ret    
c001d6ff:	90                   	nop

c001d700 <Process::createUserThread()>:
c001d700:	83 ec 0c             	sub    esp,0xc
c001d703:	68 80 00 00 00       	push   0x80
c001d708:	6a 00                	push   0x0
c001d70a:	68 ee d4 01 c0       	push   0xc001d4ee
c001d70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d713:	e8 04 ff ff ff       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c001d718:	83 c4 1c             	add    esp,0x1c
c001d71b:	c3                   	ret    

c001d71c <setupMultitasking(void (*)())>:
c001d71c:	56                   	push   esi
c001d71d:	53                   	push   ebx
c001d71e:	53                   	push   ebx
c001d71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d723:	eb 10                	jmp    c001d735 <setupMultitasking(void (*)())+0x19>
c001d725:	83 ec 0c             	sub    esp,0xc
c001d728:	68 28 00 03 c0       	push   0xc0030028
c001d72d:	e8 b0 aa 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	83 ec 0c             	sub    esp,0xc
c001d738:	68 28 00 03 c0       	push   0xc0030028
c001d73d:	e8 84 aa 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	84 c0                	test   al,al
c001d747:	74 dc                	je     c001d725 <setupMultitasking(void (*)())+0x9>
c001d749:	83 ec 0c             	sub    esp,0xc
c001d74c:	68 3f 07 00 00       	push   0x73f
c001d751:	e8 ce 1e ff ff       	call   c000f624 <malloc>
c001d756:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d75d:	89 c3                	mov    ebx,eax
c001d75f:	6a 00                	push   0x0
c001d761:	68 4a b8 02 c0       	push   0xc002b84a
c001d766:	6a 01                	push   0x1
c001d768:	50                   	push   eax
c001d769:	e8 b0 fb ff ff       	call   c001d31e <Process::Process(bool, char const*, Process*, char**)>
c001d76e:	83 c4 18             	add    esp,0x18
c001d771:	89 1d 34 00 03 c0    	mov    DWORD PTR ds:0xc0030034,ebx
c001d777:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d77d:	68 6c b9 02 c0       	push   0xc002b96c
c001d782:	e8 6c 51 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d787:	58                   	pop    eax
c001d788:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d78e:	e8 22 33 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c001d793:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d79b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d7a4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d7ae:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d7b4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d7ba:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d7c4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d7ce:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7d8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7de:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7e4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7ee:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7f4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7fe:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d804:	5a                   	pop    edx
c001d805:	59                   	pop    ecx
c001d806:	68 46 b8 02 c0       	push   0xc002b846
c001d80b:	50                   	push   eax
c001d80c:	e8 52 2f fe ff       	call   c0000763 <strcpy>
c001d811:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d818:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d81c:	83 c4 14             	add    esp,0x14
c001d81f:	5b                   	pop    ebx
c001d820:	5e                   	pop    esi
c001d821:	e9 2e 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d826 <schedule()>:
c001d826:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c001d82b:	85 c0                	test   eax,eax
c001d82d:	74 0b                	je     c001d83a <schedule()+0x14>
c001d82f:	c7 05 04 00 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030004,0x1
c001d839:	c3                   	ret    
c001d83a:	53                   	push   ebx
c001d83b:	83 ec 14             	sub    esp,0x14
c001d83e:	68 28 00 03 c0       	push   0xc0030028
c001d843:	e8 7e a9 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d848:	83 c4 10             	add    esp,0x10
c001d84b:	84 c0                	test   al,al
c001d84d:	75 38                	jne    c001d887 <schedule()+0x61>
c001d84f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d854:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d857:	4a                   	dec    edx
c001d858:	74 32                	je     c001d88c <schedule()+0x66>
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	68 28 00 03 c0       	push   0xc0030028
c001d862:	e8 57 a9 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d867:	c7 04 24 28 00 03 c0 	mov    DWORD PTR [esp],0xc0030028
c001d86e:	89 c3                	mov    ebx,eax
c001d870:	e8 6d a9 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d875:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d87c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d87f:	e8 07 fd ff ff       	call   c001d58b <switchToThread(ThreadControlBlock*)>
c001d884:	83 c4 10             	add    esp,0x10
c001d887:	83 c4 08             	add    esp,0x8
c001d88a:	5b                   	pop    ebx
c001d88b:	c3                   	ret    
c001d88c:	83 ec 08             	sub    esp,0x8
c001d88f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d896:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d89c:	68 28 00 03 c0       	push   0xc0030028
c001d8a1:	e8 ea a9 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	eb af                	jmp    c001d85a <schedule()+0x34>

c001d8ab <unlockStuff()>:
c001d8ab:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c001d8b0:	48                   	dec    eax
c001d8b1:	a3 08 00 03 c0       	mov    ds:0xc0030008,eax
c001d8b6:	75 09                	jne    c001d8c1 <unlockStuff()+0x16>
c001d8b8:	a1 04 00 03 c0       	mov    eax,ds:0xc0030004
c001d8bd:	85 c0                	test   eax,eax
c001d8bf:	75 05                	jne    c001d8c6 <unlockStuff()+0x1b>
c001d8c1:	e9 15 fc ff ff       	jmp    c001d4db <enableIRQs()>
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	c7 05 04 00 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030004,0x0
c001d8d3:	e8 4e ff ff ff       	call   c001d826 <schedule()>
c001d8d8:	83 c4 0c             	add    esp,0xc
c001d8db:	e9 fb fb ff ff       	jmp    c001d4db <enableIRQs()>

c001d8e0 <Semaphore::tryAcquire()>:
c001d8e0:	83 ec 0c             	sub    esp,0xc
c001d8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e7:	e8 25 fc ff ff       	call   c001d511 <lockStuff()>
c001d8ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d8ef:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d8f1:	7c 0b                	jl     c001d8fe <Semaphore::tryAcquire()+0x1e>
c001d8f3:	e8 b3 ff ff ff       	call   c001d8ab <unlockStuff()>
c001d8f8:	31 c0                	xor    eax,eax
c001d8fa:	83 c4 0c             	add    esp,0xc
c001d8fd:	c3                   	ret    
c001d8fe:	42                   	inc    edx
c001d8ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d902:	e8 a4 ff ff ff       	call   c001d8ab <unlockStuff()>
c001d907:	b0 01                	mov    al,0x1
c001d909:	83 c4 0c             	add    esp,0xc
c001d90c:	c3                   	ret    
c001d90d:	90                   	nop

c001d90e <Semaphore::assertLocked(char const*)>:
c001d90e:	83 ec 0c             	sub    esp,0xc
c001d911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d915:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d919:	e8 f3 fb ff ff       	call   c001d511 <lockStuff()>
c001d91e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d920:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d923:	7c 05                	jl     c001d92a <Semaphore::assertLocked(char const*)+0x1c>
c001d925:	83 c4 0c             	add    esp,0xc
c001d928:	eb 81                	jmp    c001d8ab <unlockStuff()>
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	52                   	push   edx
c001d92e:	e8 66 c5 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001d933:	83 c4 10             	add    esp,0x10
c001d936:	83 c4 0c             	add    esp,0xc
c001d939:	e9 6d ff ff ff       	jmp    c001d8ab <unlockStuff()>

c001d93e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d93e:	83 ec 0c             	sub    esp,0xc
c001d941:	e8 8f fb ff ff       	call   c001d4d5 <getIRQNestingLevel()>
c001d946:	83 ec 08             	sub    esp,0x8
c001d949:	50                   	push   eax
c001d94a:	68 a0 b9 02 c0       	push   0xc002b9a0
c001d94f:	e8 9f 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d954:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d95d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d960:	e8 c1 fe ff ff       	call   c001d826 <schedule()>
c001d965:	e8 82 fb ff ff       	call   c001d4ec <unlockScheduler()>
c001d96a:	e8 66 fb ff ff       	call   c001d4d5 <getIRQNestingLevel()>
c001d96f:	5a                   	pop    edx
c001d970:	59                   	pop    ecx
c001d971:	50                   	push   eax
c001d972:	68 d4 b9 02 c0       	push   0xc002b9d4
c001d977:	e8 77 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d97c:	83 c4 1c             	add    esp,0x1c
c001d97f:	c3                   	ret    

c001d980 <blockTask(TaskState)>:
c001d980:	83 ec 0c             	sub    esp,0xc
c001d983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d987:	e8 5e fb ff ff       	call   c001d4ea <lockScheduler()>
c001d98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d991:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d994:	e8 8d fe ff ff       	call   c001d826 <schedule()>
c001d999:	83 c4 0c             	add    esp,0xc
c001d99c:	e9 4b fb ff ff       	jmp    c001d4ec <unlockScheduler()>

c001d9a1 <waitTask(int, int*, int)>:
c001d9a1:	83 ec 18             	sub    esp,0x18
c001d9a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9ad:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d9b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d9bc:	6a 07                	push   0x7
c001d9be:	e8 bd ff ff ff       	call   c001d980 <blockTask(TaskState)>
c001d9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d9ce:	85 d2                	test   edx,edx
c001d9d0:	74 0a                	je     c001d9dc <waitTask(int, int*, int)+0x3b>
c001d9d2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d9d5:	89 02                	mov    DWORD PTR [edx],eax
c001d9d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9dc:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d9df:	83 c4 0c             	add    esp,0xc
c001d9e2:	c3                   	ret    

c001d9e3 <nanoSleepUntil(unsigned long long)>:
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9ee:	3b 05 50 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e150
c001d9f4:	89 d1                	mov    ecx,edx
c001d9f6:	1b 0d 54 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e154
c001d9fc:	73 04                	jae    c001da02 <nanoSleepUntil(unsigned long long)+0x1f>
c001d9fe:	83 c4 0c             	add    esp,0xc
c001da01:	c3                   	ret    
c001da02:	e8 0a fb ff ff       	call   c001d511 <lockStuff()>
c001da07:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da0d:	83 ec 08             	sub    esp,0x8
c001da10:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001da13:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001da16:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da1c:	68 1c 00 03 c0       	push   0xc003001c
c001da21:	e8 6a a8 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001da2d:	e8 4e ff ff ff       	call   c001d980 <blockTask(TaskState)>
c001da32:	83 c4 1c             	add    esp,0x1c
c001da35:	e9 71 fe ff ff       	jmp    c001d8ab <unlockStuff()>

c001da3a <nanoSleep(unsigned long long)>:
c001da3a:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c001da3f:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c001da45:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001da49:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001da4d:	eb 94                	jmp    c001d9e3 <nanoSleepUntil(unsigned long long)>

c001da4f <sleep(unsigned long long)>:
c001da4f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001da57:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001da5c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001da60:	01 ca                	add    edx,ecx
c001da62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da66:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da6a:	eb ce                	jmp    c001da3a <nanoSleep(unsigned long long)>

c001da6c <Semaphore::acquire()>:
c001da6c:	83 ec 0c             	sub    esp,0xc
c001da6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da73:	e8 99 fa ff ff       	call   c001d511 <lockStuff()>
c001da78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da7b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001da7d:	7d 0c                	jge    c001da8b <Semaphore::acquire()+0x1f>
c001da7f:	42                   	inc    edx
c001da80:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da83:	83 c4 0c             	add    esp,0xc
c001da86:	e9 20 fe ff ff       	jmp    c001d8ab <unlockStuff()>
c001da8b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da91:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001da98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da9b:	85 d2                	test   edx,edx
c001da9d:	74 2a                	je     c001dac9 <Semaphore::acquire()+0x5d>
c001da9f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001daa2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001daa8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001daab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dab7:	6a 05                	push   0x5
c001dab9:	e8 c2 fe ff ff       	call   c001d980 <blockTask(TaskState)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	83 c4 0c             	add    esp,0xc
c001dac4:	e9 e2 fd ff ff       	jmp    c001d8ab <unlockStuff()>
c001dac9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dacf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dad2:	eb d7                	jmp    c001daab <Semaphore::acquire()+0x3f>

c001dad4 <taskReturned>:
c001dad4:	83 ec 18             	sub    esp,0x18
c001dad7:	68 08 ba 02 c0       	push   0xc002ba08
c001dadc:	e8 b8 c3 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	83 ec 0c             	sub    esp,0xc
c001dae7:	6a 02                	push   0x2
c001dae9:	e8 92 fe ff ff       	call   c001d980 <blockTask(TaskState)>
c001daee:	e8 f7 f9 ff ff       	call   c001d4ea <lockScheduler()>
c001daf3:	e8 2e fd ff ff       	call   c001d826 <schedule()>
c001daf8:	e8 ef f9 ff ff       	call   c001d4ec <unlockScheduler()>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	eb e2                	jmp    c001dae4 <taskReturned+0x10>

c001db02 <unblockTask(ThreadControlBlock*)>:
c001db02:	53                   	push   ebx
c001db03:	83 ec 08             	sub    esp,0x8
c001db06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db0a:	e8 db f9 ff ff       	call   c001d4ea <lockScheduler()>
c001db0f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001db12:	85 c0                	test   eax,eax
c001db14:	74 5c                	je     c001db72 <unblockTask(ThreadControlBlock*)+0x70>
c001db16:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001db19:	48                   	dec    eax
c001db1a:	74 31                	je     c001db4d <unblockTask(ThreadControlBlock*)+0x4b>
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	68 28 00 03 c0       	push   0xc0030028
c001db24:	e8 95 a6 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	85 c0                	test   eax,eax
c001db2e:	75 17                	jne    c001db47 <unblockTask(ThreadControlBlock*)+0x45>
c001db30:	eb 65                	jmp    c001db97 <unblockTask(ThreadControlBlock*)+0x95>
c001db32:	83 ec 08             	sub    esp,0x8
c001db35:	50                   	push   eax
c001db36:	68 28 00 03 c0       	push   0xc0030028
c001db3b:	e8 58 a9 00 00       	call   c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001db40:	83 c4 10             	add    esp,0x10
c001db43:	85 c0                	test   eax,eax
c001db45:	74 50                	je     c001db97 <unblockTask(ThreadControlBlock*)+0x95>
c001db47:	39 c3                	cmp    ebx,eax
c001db49:	75 e7                	jne    c001db32 <unblockTask(ThreadControlBlock*)+0x30>
c001db4b:	eb 1c                	jmp    c001db69 <unblockTask(ThreadControlBlock*)+0x67>
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	68 f8 ba 02 c0       	push   0xc002baf8
c001db55:	e8 99 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db5a:	c7 04 24 84 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba84
c001db61:	e8 8d 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	83 c4 08             	add    esp,0x8
c001db6c:	5b                   	pop    ebx
c001db6d:	e9 7a f9 ff ff       	jmp    c001d4ec <unlockScheduler()>
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	68 3c ba 02 c0       	push   0xc002ba3c
c001db7a:	e8 74 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db7f:	c7 04 24 84 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba84
c001db86:	e8 68 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	83 c4 08             	add    esp,0x8
c001db91:	5b                   	pop    ebx
c001db92:	e9 55 f9 ff ff       	jmp    c001d4ec <unlockScheduler()>
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	53                   	push   ebx
c001db9b:	68 28 00 03 c0       	push   0xc0030028
c001dba0:	e8 eb a6 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	83 c4 08             	add    esp,0x8
c001dbab:	5b                   	pop    ebx
c001dbac:	e9 3b f9 ff ff       	jmp    c001d4ec <unlockScheduler()>

c001dbb1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dbb1:	55                   	push   ebp
c001dbb2:	57                   	push   edi
c001dbb3:	56                   	push   esi
c001dbb4:	53                   	push   ebx
c001dbb5:	83 ec 1c             	sub    esp,0x1c
c001dbb8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbbc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbbf:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dbc5:	85 ff                	test   edi,edi
c001dbc7:	7e 20                	jle    c001dbe9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dbc9:	31 f6                	xor    esi,esi
c001dbcb:	83 ec 0c             	sub    esp,0xc
c001dbce:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dbd5:	46                   	inc    esi
c001dbd6:	e8 59 1a ff ff       	call   c000f634 <free>
c001dbdb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dbe7:	7f e2                	jg     c001dbcb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dbe9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbf3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dbf8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dbfb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dbfe:	d3 c0                	rol    eax,cl
c001dc00:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dc07:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dc0a:	89 f7                	mov    edi,esi
c001dc0c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dc14:	0f 85 74 01 00 00    	jne    c001dd8e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dc1a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dc20:	85 ed                	test   ebp,ebp
c001dc22:	74 1b                	je     c001dc3f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dc24:	83 ec 0c             	sub    esp,0xc
c001dc27:	55                   	push   ebp
c001dc28:	e8 d9 bf ff ff       	call   c0019c06 <EnvVarContainer::~EnvVarContainer()>
c001dc2d:	59                   	pop    ecx
c001dc2e:	5e                   	pop    esi
c001dc2f:	6a 0c                	push   0xc
c001dc31:	55                   	push   ebp
c001dc32:	e8 dc 4b ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001dc37:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	89 f7                	mov    edi,esi
c001dc3f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc45:	85 c0                	test   eax,eax
c001dc47:	0f 84 aa 00 00 00    	je     c001dcf7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc4d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dc50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc54:	31 c9                	xor    ecx,ecx
c001dc56:	eb 10                	jmp    c001dc68 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dc58:	41                   	inc    ecx
c001dc59:	83 f9 10             	cmp    ecx,0x10
c001dc5c:	0f 84 95 00 00 00    	je     c001dcf7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc62:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc68:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dc6f:	d3 fa                	sar    edx,cl
c001dc71:	83 e2 01             	and    edx,0x1
c001dc74:	74 e2                	je     c001dc58 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc76:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dc79:	01 ca                	add    edx,ecx
c001dc7b:	89 d5                	mov    ebp,edx
c001dc7d:	c1 e5 05             	shl    ebp,0x5
c001dc80:	01 ea                	add    edx,ebp
c001dc82:	01 d0                	add    eax,edx
c001dc84:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dc8a:	83 fd 07             	cmp    ebp,0x7
c001dc8d:	75 c9                	jne    c001dc58 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc8f:	05 40 02 00 00       	add    eax,0x240
c001dc94:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dc97:	83 fd ff             	cmp    ebp,0xffffffff
c001dc9a:	0f 8c 08 01 00 00    	jl     c001dda8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dca0:	0f 84 b9 01 00 00    	je     c001de5f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001dca6:	85 ed                	test   ebp,ebp
c001dca8:	0f 84 a0 01 00 00    	je     c001de4e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001dcae:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dcb0:	75 a6                	jne    c001dc58 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dcb2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dcb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dcbc:	01 d0                	add    eax,edx
c001dcbe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dccb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dcce:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcd4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dcdb:	50                   	push   eax
c001dcdc:	e8 21 fe ff ff       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dce7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dceb:	89 f7                	mov    edi,esi
c001dced:	41                   	inc    ecx
c001dcee:	83 f9 10             	cmp    ecx,0x10
c001dcf1:	0f 85 6b ff ff ff    	jne    c001dc62 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dcf7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dcfd:	85 c0                	test   eax,eax
c001dcff:	74 5d                	je     c001dd5e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dd01:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dd07:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dd0d:	74 4f                	je     c001dd5e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dd0f:	83 ec 0c             	sub    esp,0xc
c001dd12:	68 28 00 03 c0       	push   0xc0030028
c001dd17:	e8 a2 a4 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd1c:	c7 04 24 28 00 03 c0 	mov    DWORD PTR [esp],0xc0030028
c001dd23:	89 c7                	mov    edi,eax
c001dd25:	e8 9c a4 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	84 c0                	test   al,al
c001dd2f:	0f 84 e4 00 00 00    	je     c001de19 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dd35:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd38:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd3e:	85 d2                	test   edx,edx
c001dd40:	74 0f                	je     c001dd51 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dd42:	83 ec 0c             	sub    esp,0xc
c001dd45:	8b 02                	mov    eax,DWORD PTR [edx]
c001dd47:	52                   	push   edx
c001dd48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd4e:	83 c4 10             	add    esp,0x10
c001dd51:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dd5b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dd5e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dd64:	85 db                	test   ebx,ebx
c001dd66:	74 16                	je     c001dd7e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd68:	83 ec 0c             	sub    esp,0xc
c001dd6b:	53                   	push   ebx
c001dd6c:	e8 f1 40 ff ff       	call   c0011e62 <VAS::~VAS()>
c001dd71:	58                   	pop    eax
c001dd72:	5a                   	pop    edx
c001dd73:	6a 10                	push   0x10
c001dd75:	53                   	push   ebx
c001dd76:	e8 98 4a ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	68 51 b8 02 c0       	push   0xc002b851
c001dd86:	e8 68 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd8b:	83 c4 10             	add    esp,0x10
c001dd8e:	83 ec 08             	sub    esp,0x8
c001dd91:	68 3f 07 00 00       	push   0x73f
c001dd96:	68 5f b8 02 c0       	push   0xc002b85f
c001dd9b:	e8 53 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dda0:	83 c4 2c             	add    esp,0x2c
c001dda3:	5b                   	pop    ebx
c001dda4:	5e                   	pop    esi
c001dda5:	5f                   	pop    edi
c001dda6:	5d                   	pop    ebp
c001dda7:	c3                   	ret    
c001dda8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddac:	83 ec 0c             	sub    esp,0xc
c001ddaf:	68 3c bb 02 c0       	push   0xc002bb3c
c001ddb4:	e8 e0 c0 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001ddb9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	89 f7                	mov    edi,esi
c001ddc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddc5:	e9 8e fe ff ff       	jmp    c001dc58 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddd0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ddd6:	75 1c                	jne    c001ddf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ddd8:	83 ec 0c             	sub    esp,0xc
c001dddb:	68 a4 bb 02 c0       	push   0xc002bba4
c001dde0:	e8 0e 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dde5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ddec:	e8 8f fb ff ff       	call   c001d980 <blockTask(TaskState)>
c001ddf1:	83 c4 10             	add    esp,0x10
c001ddf4:	83 ec 08             	sub    esp,0x8
c001ddf7:	56                   	push   esi
c001ddf8:	68 28 00 03 c0       	push   0xc0030028
c001ddfd:	e8 8e a4 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de02:	c7 04 24 28 00 03 c0 	mov    DWORD PTR [esp],0xc0030028
c001de09:	e8 b0 a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	39 f8                	cmp    eax,edi
c001de13:	0f 84 1c ff ff ff    	je     c001dd35 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001de19:	83 ec 0c             	sub    esp,0xc
c001de1c:	68 28 00 03 c0       	push   0xc0030028
c001de21:	e8 98 a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de26:	c7 04 24 28 00 03 c0 	mov    DWORD PTR [esp],0xc0030028
c001de2d:	89 c6                	mov    esi,eax
c001de2f:	e8 ae a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de34:	83 c4 10             	add    esp,0x10
c001de37:	39 f3                	cmp    ebx,esi
c001de39:	74 b9                	je     c001ddf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de3b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001de3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de41:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001de47:	75 ab                	jne    c001ddf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de49:	e9 7c ff ff ff       	jmp    c001ddca <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001de4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	68 70 bb 02 c0       	push   0xc002bb70
c001de5a:	e9 55 ff ff ff       	jmp    c001ddb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001de5f:	8b 36                	mov    esi,DWORD PTR [esi]
c001de61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de65:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001de68:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de6b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001de71:	01 d7                	add    edi,edx
c001de73:	89 f8                	mov    eax,edi
c001de75:	e9 44 fe ff ff       	jmp    c001dcbe <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001de7a <cleanerTaskFunction(void*)>:
c001de7a:	53                   	push   ebx
c001de7b:	83 ec 08             	sub    esp,0x8
c001de7e:	e8 69 f6 ff ff       	call   c001d4ec <unlockScheduler()>
c001de83:	e8 62 f6 ff ff       	call   c001d4ea <lockScheduler()>
c001de88:	80 3d ec ff 02 c0 00 	cmp    BYTE PTR ds:0xc002ffec,0x0
c001de8f:	0f 85 8e 00 00 00    	jne    c001df23 <cleanerTaskFunction(void*)+0xa9>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	6a 02                	push   0x2
c001de9a:	e8 9f fa ff ff       	call   c001d93e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de9f:	83 c4 10             	add    esp,0x10
c001dea2:	c6 05 ec ff 02 c0 00 	mov    BYTE PTR ds:0xc002ffec,0x0
c001dea9:	e8 63 f6 ff ff       	call   c001d511 <lockStuff()>
c001deae:	e8 37 f6 ff ff       	call   c001d4ea <lockScheduler()>
c001deb3:	83 ec 0c             	sub    esp,0xc
c001deb6:	68 10 00 03 c0       	push   0xc0030010
c001debb:	e8 06 a3 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dec0:	83 c4 10             	add    esp,0x10
c001dec3:	84 c0                	test   al,al
c001dec5:	75 40                	jne    c001df07 <cleanerTaskFunction(void*)+0x8d>
c001dec7:	83 ec 0c             	sub    esp,0xc
c001deca:	68 10 00 03 c0       	push   0xc0030010
c001decf:	e8 ea a2 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ded4:	c7 04 24 10 00 03 c0 	mov    DWORD PTR [esp],0xc0030010
c001dedb:	89 c3                	mov    ebx,eax
c001dedd:	e8 00 a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dee2:	c7 04 24 75 b8 02 c0 	mov    DWORD PTR [esp],0xc002b875
c001dee9:	e8 05 4a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001deee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001def1:	e8 bb fc ff ff       	call   c001dbb1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001def6:	c7 04 24 8e b8 02 c0 	mov    DWORD PTR [esp],0xc002b88e
c001defd:	e8 f1 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001df02:	83 c4 10             	add    esp,0x10
c001df05:	eb ac                	jmp    c001deb3 <cleanerTaskFunction(void*)+0x39>
c001df07:	e8 e0 f5 ff ff       	call   c001d4ec <unlockScheduler()>
c001df0c:	e8 9a f9 ff ff       	call   c001d8ab <unlockStuff()>
c001df11:	e8 d4 f5 ff ff       	call   c001d4ea <lockScheduler()>
c001df16:	80 3d ec ff 02 c0 00 	cmp    BYTE PTR ds:0xc002ffec,0x0
c001df1d:	0f 84 72 ff ff ff    	je     c001de95 <cleanerTaskFunction(void*)+0x1b>
c001df23:	e8 c4 f5 ff ff       	call   c001d4ec <unlockScheduler()>
c001df28:	e9 75 ff ff ff       	jmp    c001dea2 <cleanerTaskFunction(void*)+0x28>

c001df2d <terminateTask(int)>:
c001df2d:	83 ec 14             	sub    esp,0x14
c001df30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df38:	83 c0 0c             	add    eax,0xc
c001df3b:	50                   	push   eax
c001df3c:	68 cc bb 02 c0       	push   0xc002bbcc
c001df41:	e8 ad 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001df46:	e8 c6 f5 ff ff       	call   c001d511 <lockStuff()>
c001df4b:	e8 9a f5 ff ff       	call   c001d4ea <lockScheduler()>
c001df50:	c7 04 24 a1 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a1
c001df57:	e8 97 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001df5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df65:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001df68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df6d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001df70:	5a                   	pop    edx
c001df71:	59                   	pop    ecx
c001df72:	50                   	push   eax
c001df73:	68 10 00 03 c0       	push   0xc0030010
c001df78:	e8 13 a3 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df82:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001df89:	c7 04 24 bb b8 02 c0 	mov    DWORD PTR [esp],0xc002b8bb
c001df90:	e8 5e 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001df95:	83 c4 10             	add    esp,0x10
c001df98:	a1 e8 ff 02 c0       	mov    eax,ds:0xc002ffe8
c001df9d:	85 c0                	test   eax,eax
c001df9f:	74 5a                	je     c001dffb <terminateTask(int)+0xce>
c001dfa1:	83 ec 0c             	sub    esp,0xc
c001dfa4:	68 d5 b8 02 c0       	push   0xc002b8d5
c001dfa9:	e8 45 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dfae:	58                   	pop    eax
c001dfaf:	c6 05 ec ff 02 c0 01 	mov    BYTE PTR ds:0xc002ffec,0x1
c001dfb6:	ff 35 e8 ff 02 c0    	push   DWORD PTR ds:0xc002ffe8
c001dfbc:	e8 41 fb ff ff       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c001dfc1:	c7 04 24 ef b8 02 c0 	mov    DWORD PTR [esp],0xc002b8ef
c001dfc8:	e8 26 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dfcd:	83 c4 10             	add    esp,0x10
c001dfd0:	e8 17 f5 ff ff       	call   c001d4ec <unlockScheduler()>
c001dfd5:	e8 d1 f8 ff ff       	call   c001d8ab <unlockStuff()>
c001dfda:	83 ec 0c             	sub    esp,0xc
c001dfdd:	68 27 b9 02 c0       	push   0xc002b927
c001dfe2:	e8 0c 49 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	e8 fb f4 ff ff       	call   c001d4ea <lockScheduler()>
c001dfef:	e8 32 f8 ff ff       	call   c001d826 <schedule()>
c001dff4:	e8 f3 f4 ff ff       	call   c001d4ec <unlockScheduler()>
c001dff9:	eb ef                	jmp    c001dfea <terminateTask(int)+0xbd>
c001dffb:	83 ec 0c             	sub    esp,0xc
c001dffe:	68 09 b9 02 c0       	push   0xc002b909
c001e003:	e8 eb 48 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	eb c3                	jmp    c001dfd0 <terminateTask(int)+0xa3>

c001e00d <Thr::terminateFromIRQ(int)>:
c001e00d:	83 ec 18             	sub    esp,0x18
c001e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e014:	e8 14 ff ff ff       	call   c001df2d <terminateTask(int)>
c001e019:	90                   	nop

c001e01a <Semaphore::release()>:
c001e01a:	83 ec 0c             	sub    esp,0xc
c001e01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e021:	e8 eb f4 ff ff       	call   c001d511 <lockStuff()>
c001e026:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e029:	85 d2                	test   edx,edx
c001e02b:	74 1a                	je     c001e047 <Semaphore::release()+0x2d>
c001e02d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e030:	83 ec 0c             	sub    esp,0xc
c001e033:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e036:	52                   	push   edx
c001e037:	e8 c6 fa ff ff       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c001e03c:	83 c4 10             	add    esp,0x10
c001e03f:	83 c4 0c             	add    esp,0xc
c001e042:	e9 64 f8 ff ff       	jmp    c001d8ab <unlockStuff()>
c001e047:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e04a:	83 c4 0c             	add    esp,0xc
c001e04d:	e9 59 f8 ff ff       	jmp    c001d8ab <unlockStuff()>

c001e052 <__static_initialization_and_destruction_0(int, int)>:
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e05a:	0f 85 88 00 00 00    	jne    c001e0e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e060:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e068:	75 7e                	jne    c001e0e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	68 28 00 03 c0       	push   0xc0030028
c001e072:	e8 c9 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e077:	83 c4 10             	add    esp,0x10
c001e07a:	83 ec 04             	sub    esp,0x4
c001e07d:	68 d8 c9 02 c0       	push   0xc002c9d8
c001e082:	68 28 00 03 c0       	push   0xc0030028
c001e087:	68 00 84 02 c0       	push   0xc0028400
c001e08c:	e8 fc 46 ff ff       	call   c001278d <__cxa_atexit>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	68 1c 00 03 c0       	push   0xc003001c
c001e09c:	e8 9f a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	83 ec 04             	sub    esp,0x4
c001e0a7:	68 d8 c9 02 c0       	push   0xc002c9d8
c001e0ac:	68 1c 00 03 c0       	push   0xc003001c
c001e0b1:	68 00 84 02 c0       	push   0xc0028400
c001e0b6:	e8 d2 46 ff ff       	call   c001278d <__cxa_atexit>
c001e0bb:	83 c4 10             	add    esp,0x10
c001e0be:	83 ec 0c             	sub    esp,0xc
c001e0c1:	68 10 00 03 c0       	push   0xc0030010
c001e0c6:	e8 75 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e0cb:	83 c4 10             	add    esp,0x10
c001e0ce:	83 ec 04             	sub    esp,0x4
c001e0d1:	68 d8 c9 02 c0       	push   0xc002c9d8
c001e0d6:	68 10 00 03 c0       	push   0xc0030010
c001e0db:	68 00 84 02 c0       	push   0xc0028400
c001e0e0:	e8 a8 46 ff ff       	call   c001278d <__cxa_atexit>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	90                   	nop
c001e0e9:	83 c4 0c             	add    esp,0xc
c001e0ec:	c3                   	ret    

c001e0ed <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e0ed:	83 ec 0c             	sub    esp,0xc
c001e0f0:	83 ec 08             	sub    esp,0x8
c001e0f3:	68 ff ff 00 00       	push   0xffff
c001e0f8:	6a 01                	push   0x1
c001e0fa:	e8 53 ff ff ff       	call   c001e052 <__static_initialization_and_destruction_0(int, int)>
c001e0ff:	83 c4 10             	add    esp,0x10
c001e102:	83 c4 0c             	add    esp,0xc
c001e105:	c3                   	ret    

c001e106 <Vm::inbv(unsigned short)>:
c001e106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e10a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e10f:	75 06                	jne    c001e117 <Vm::inbv(unsigned short)+0x11>
c001e111:	a0 6c 00 03 c0       	mov    al,ds:0xc003006c
c001e116:	c3                   	ret    
c001e117:	ec                   	in     al,dx
c001e118:	c3                   	ret    

c001e119 <Vm::outbv(unsigned short, unsigned char)>:
c001e119:	53                   	push   ebx
c001e11a:	83 ec 08             	sub    esp,0x8
c001e11d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e121:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e125:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e12a:	75 38                	jne    c001e164 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e12c:	0f b6 c3             	movzx  eax,bl
c001e12f:	51                   	push   ecx
c001e130:	51                   	push   ecx
c001e131:	50                   	push   eax
c001e132:	68 eb bb 02 c0       	push   0xc002bbeb
c001e137:	e8 b7 47 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e13c:	8b 15 6c 00 03 c0    	mov    edx,DWORD PTR ds:0xc003006c
c001e142:	83 c4 10             	add    esp,0x10
c001e145:	8d 42 01             	lea    eax,[edx+0x1]
c001e148:	88 9a 80 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff80],bl
c001e14e:	a3 6c 00 03 c0       	mov    ds:0xc003006c,eax
c001e153:	83 f8 20             	cmp    eax,0x20
c001e156:	75 0f                	jne    c001e167 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e158:	c7 05 6c 00 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003006c,0x1f
c001e162:	eb 03                	jmp    c001e167 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e164:	88 d8                	mov    al,bl
c001e166:	ee                   	out    dx,al
c001e167:	83 c4 08             	add    esp,0x8
c001e16a:	5b                   	pop    ebx
c001e16b:	c3                   	ret    

c001e16c <Vm::realToLinear(unsigned short, unsigned short)>:
c001e16c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e171:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e176:	c1 e0 04             	shl    eax,0x4
c001e179:	01 d0                	add    eax,edx
c001e17b:	c3                   	ret    

c001e17c <Vm::getSegment(unsigned int)>:
c001e17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e180:	c1 e8 10             	shr    eax,0x10
c001e183:	c3                   	ret    

c001e184 <Vm::getOffset(unsigned int)>:
c001e184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e188:	c3                   	ret    

c001e189 <Vm::mainloop2()>:
c001e189:	83 ec 0c             	sub    esp,0xc
c001e18c:	e8 59 f3 ff ff       	call   c001d4ea <lockScheduler()>
c001e191:	83 ec 0c             	sub    esp,0xc
c001e194:	c6 05 65 00 03 c0 01 	mov    BYTE PTR ds:0xc0030065,0x1
c001e19b:	6a 02                	push   0x2
c001e19d:	e8 9c f7 ff ff       	call   c001d93e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1a7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e1ab:	52                   	push   edx
c001e1ac:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e1b0:	52                   	push   edx
c001e1b1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e1b5:	52                   	push   edx
c001e1b6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e1ba:	50                   	push   eax
c001e1bb:	e8 3a 21 fe ff       	call   c00002fa <goToVM86>
c001e1c0:	83 c4 2c             	add    esp,0x2c
c001e1c3:	c3                   	ret    

c001e1c4 <Vm::mainVm8086Loop(void*)>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	e8 20 f3 ff ff       	call   c001d4ec <unlockScheduler()>
c001e1cc:	83 c4 0c             	add    esp,0xc
c001e1cf:	eb b8                	jmp    c001e189 <Vm::mainloop2()>

c001e1d1 <Vm::mainloop3(unsigned long)>:
c001e1d1:	53                   	push   ebx
c001e1d2:	83 ec 08             	sub    esp,0x8
c001e1d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1d9:	e8 0c f3 ff ff       	call   c001d4ea <lockScheduler()>
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	89 1d 60 00 03 c0    	mov    DWORD PTR ds:0xc0030060,ebx
c001e1e7:	6a 02                	push   0x2
c001e1e9:	c6 05 64 00 03 c0 01 	mov    BYTE PTR ds:0xc0030064,0x1
c001e1f0:	e8 49 f7 ff ff       	call   c001d93e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1f5:	83 c4 18             	add    esp,0x18
c001e1f8:	5b                   	pop    ebx
c001e1f9:	eb 8e                	jmp    c001e189 <Vm::mainloop2()>

c001e1fb <Vm::initialise8086()>:
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	68 80 00 00 00       	push   0x80
c001e203:	6a 00                	push   0x0
c001e205:	68 c4 e1 01 c0       	push   0xc001e1c4
c001e20a:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c001e210:	e8 07 f4 ff ff       	call   c001d61c <Process::createThread(void (*)(void*), void*, int)>
c001e215:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e21c:	a3 68 00 03 c0       	mov    ds:0xc0030068,eax
c001e221:	68 00 01 00 00       	push   0x100
c001e226:	a1 34 00 03 c0       	mov    eax,ds:0xc0030034
c001e22b:	6a 00                	push   0x0
c001e22d:	6a 00                	push   0x0
c001e22f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e235:	e8 88 40 ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e23a:	83 c4 2c             	add    esp,0x2c
c001e23d:	c3                   	ret    

c001e23e <Vm::finish8086()>:
c001e23e:	53                   	push   ebx
c001e23f:	83 ec 08             	sub    esp,0x8
c001e242:	e8 a3 f2 ff ff       	call   c001d4ea <lockScheduler()>
c001e247:	80 3d 64 00 03 c0 00 	cmp    BYTE PTR ds:0xc0030064,0x0
c001e24e:	75 0c                	jne    c001e25c <Vm::finish8086()+0x1e>
c001e250:	e8 d1 f5 ff ff       	call   c001d826 <schedule()>
c001e255:	e8 92 f2 ff ff       	call   c001d4ec <unlockScheduler()>
c001e25a:	eb e6                	jmp    c001e242 <Vm::finish8086()+0x4>
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	8b 1d 60 00 03 c0    	mov    ebx,DWORD PTR ds:0xc0030060
c001e265:	ff 35 68 00 03 c0    	push   DWORD PTR ds:0xc0030068
c001e26b:	c6 05 64 00 03 c0 00 	mov    BYTE PTR ds:0xc0030064,0x0
c001e272:	e8 8b f8 ff ff       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c001e277:	e8 70 f2 ff ff       	call   c001d4ec <unlockScheduler()>
c001e27c:	89 d8                	mov    eax,ebx
c001e27e:	83 c4 18             	add    esp,0x18
c001e281:	5b                   	pop    ebx
c001e282:	c3                   	ret    

c001e283 <Vm::getOutput8086(unsigned char*)>:
c001e283:	83 ec 10             	sub    esp,0x10
c001e286:	ff 35 6c 00 03 c0    	push   DWORD PTR ds:0xc003006c
c001e28c:	68 80 00 03 c0       	push   0xc0030080
c001e291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e295:	e8 06 24 fe ff       	call   c00006a0 <memcpy>
c001e29a:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c001e29f:	c7 05 6c 00 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003006c,0x0
c001e2a9:	83 c4 1c             	add    esp,0x1c
c001e2ac:	c3                   	ret    

c001e2ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e2ad:	55                   	push   ebp
c001e2ae:	57                   	push   edi
c001e2af:	56                   	push   esi
c001e2b0:	53                   	push   ebx
c001e2b1:	83 ec 2c             	sub    esp,0x2c
c001e2b4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e2b8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e2bc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e2c0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e2c4:	e8 21 f2 ff ff       	call   c001d4ea <lockScheduler()>
c001e2c9:	a0 65 00 03 c0       	mov    al,ds:0xc0030065
c001e2ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2d2:	84 c0                	test   al,al
c001e2d4:	75 0c                	jne    c001e2e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e2d6:	e8 4b f5 ff ff       	call   c001d826 <schedule()>
c001e2db:	e8 0c f2 ff ff       	call   c001d4ec <unlockScheduler()>
c001e2e0:	eb e2                	jmp    c001e2c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e2e2:	a1 68 00 03 c0       	mov    eax,ds:0xc0030068
c001e2e7:	c7 05 6c 00 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003006c,0x0
c001e2f1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e2f5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e2f9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e2fd:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e301:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e305:	50                   	push   eax
c001e306:	6a 20                	push   0x20
c001e308:	6a 00                	push   0x0
c001e30a:	68 80 00 03 c0       	push   0xc0030080
c001e30f:	e8 b0 23 fe ff       	call   c00006c4 <memset>
c001e314:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e31b:	e8 04 13 ff ff       	call   c000f624 <malloc>
c001e320:	83 c4 0c             	add    esp,0xc
c001e323:	89 c7                	mov    edi,eax
c001e325:	ff 35 34 00 03 c0    	push   DWORD PTR ds:0xc0030034
c001e32b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e32f:	50                   	push   eax
c001e330:	e8 17 4b ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	85 ff                	test   edi,edi
c001e33a:	75 0a                	jne    c001e346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	68 07 bc 02 c0       	push   0xc002bc07
c001e344:	eb 27                	jmp    c001e36d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e346:	50                   	push   eax
c001e347:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e34b:	50                   	push   eax
c001e34c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e350:	50                   	push   eax
c001e351:	57                   	push   edi
c001e352:	e8 05 4e ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001e357:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	89 e8                	mov    eax,ebp
c001e361:	84 c0                	test   al,al
c001e363:	74 19                	je     c001e37e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	68 1b bc 02 c0       	push   0xc002bc1b
c001e36d:	e8 27 bb ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001e372:	31 ed                	xor    ebp,ebp
c001e374:	e8 73 f1 ff ff       	call   c001d4ec <unlockScheduler()>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	eb 75                	jmp    c001e3f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e37e:	50                   	push   eax
c001e37f:	50                   	push   eax
c001e380:	6a 01                	push   0x1
c001e382:	57                   	push   edi
c001e383:	e8 28 4b ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001e388:	83 c4 10             	add    esp,0x10
c001e38b:	85 c0                	test   eax,eax
c001e38d:	74 17                	je     c001e3a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e38f:	83 ec 0c             	sub    esp,0xc
c001e392:	68 34 bc 02 c0       	push   0xc002bc34
c001e397:	e8 fd ba ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001e39c:	e8 4b f1 ff ff       	call   c001d4ec <unlockScheduler()>
c001e3a1:	83 c4 10             	add    esp,0x10
c001e3a4:	eb 4d                	jmp    c001e3f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e3a6:	0f b7 f6             	movzx  esi,si
c001e3a9:	50                   	push   eax
c001e3aa:	0f b7 db             	movzx  ebx,bx
c001e3ad:	50                   	push   eax
c001e3ae:	56                   	push   esi
c001e3af:	53                   	push   ebx
c001e3b0:	e8 b7 fd ff ff       	call   c001e16c <Vm::realToLinear(unsigned short, unsigned short)>
c001e3b5:	5a                   	pop    edx
c001e3b6:	8b 17                	mov    edx,DWORD PTR [edi]
c001e3b8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e3bc:	51                   	push   ecx
c001e3bd:	50                   	push   eax
c001e3be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3c6:	57                   	push   edi
c001e3c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e3ca:	83 c4 14             	add    esp,0x14
c001e3cd:	57                   	push   edi
c001e3ce:	e8 3b 4b ff ff       	call   c0012f0e <File::close()>
c001e3d3:	c6 05 65 00 03 c0 00 	mov    BYTE PTR ds:0xc0030065,0x0
c001e3da:	e8 0d f1 ff ff       	call   c001d4ec <unlockScheduler()>
c001e3df:	59                   	pop    ecx
c001e3e0:	ff 35 68 00 03 c0    	push   DWORD PTR ds:0xc0030068
c001e3e6:	e8 17 f7 ff ff       	call   c001db02 <unblockTask(ThreadControlBlock*)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e3f3:	83 c4 2c             	add    esp,0x2c
c001e3f6:	89 e8                	mov    eax,ebp
c001e3f8:	5b                   	pop    ebx
c001e3f9:	5e                   	pop    esi
c001e3fa:	5f                   	pop    edi
c001e3fb:	5d                   	pop    ebp
c001e3fc:	c3                   	ret    

c001e3fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e3fd:	57                   	push   edi
c001e3fe:	56                   	push   esi
c001e3ff:	53                   	push   ebx
c001e400:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e408:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e40c:	83 e8 06             	sub    eax,0x6
c001e40f:	0f b7 c0             	movzx  eax,ax
c001e412:	50                   	push   eax
c001e413:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e418:	50                   	push   eax
c001e419:	e8 4e fd ff ff       	call   c001e16c <Vm::realToLinear(unsigned short, unsigned short)>
c001e41e:	5a                   	pop    edx
c001e41f:	5e                   	pop    esi
c001e420:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e423:	8d 56 fa             	lea    edx,[esi-0x6]
c001e426:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e42c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e42f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e432:	83 c2 02             	add    edx,0x2
c001e435:	66 89 10             	mov    WORD PTR [eax],dx
c001e438:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e43b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e43f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e442:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e446:	89 d6                	mov    esi,edx
c001e448:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e44e:	66 81 e6 ff fd       	and    si,0xfdff
c001e453:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e457:	74 07                	je     c001e460 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e459:	89 d6                	mov    esi,edx
c001e45b:	66 81 ce 00 02       	or     si,0x200
c001e460:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e469:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e46d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e475:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e478:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e480:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e483:	5b                   	pop    ebx
c001e484:	5e                   	pop    esi
c001e485:	5f                   	pop    edi
c001e486:	c3                   	ret    

c001e487 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e487:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e48c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e491:	c1 e0 04             	shl    eax,0x4
c001e494:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e497:	c3                   	ret    

c001e498 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e498:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e49d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4a2:	c1 e0 04             	shl    eax,0x4
c001e4a5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e4a9:	c3                   	ret    

c001e4aa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e4aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4b4:	c1 e0 04             	shl    eax,0x4
c001e4b7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e4ba:	c3                   	ret    

c001e4bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e4bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4c5:	c1 e0 04             	shl    eax,0x4
c001e4c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4cc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e4cf:	c3                   	ret    

c001e4d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e4d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4da:	c1 e0 04             	shl    eax,0x4
c001e4dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4e1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e4e5:	c3                   	ret    

c001e4e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e4e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4f0:	c1 e0 04             	shl    eax,0x4
c001e4f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4f7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e4fa:	c3                   	ret    

c001e4fb <Vm::faultHandler(regs*)>:
c001e4fb:	55                   	push   ebp
c001e4fc:	57                   	push   edi
c001e4fd:	56                   	push   esi
c001e4fe:	53                   	push   ebx
c001e4ff:	83 ec 1c             	sub    esp,0x1c
c001e502:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e506:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e509:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e50c:	0f b7 c1             	movzx  eax,cx
c001e50f:	50                   	push   eax
c001e510:	0f b7 c3             	movzx  eax,bx
c001e513:	c1 e3 04             	shl    ebx,0x4
c001e516:	50                   	push   eax
c001e517:	e8 50 fc ff ff       	call   c001e16c <Vm::realToLinear(unsigned short, unsigned short)>
c001e51c:	5a                   	pop    edx
c001e51d:	89 c5                	mov    ebp,eax
c001e51f:	5e                   	pop    esi
c001e520:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e524:	50                   	push   eax
c001e525:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e529:	50                   	push   eax
c001e52a:	e8 3d fc ff ff       	call   c001e16c <Vm::realToLinear(unsigned short, unsigned short)>
c001e52f:	01 cb                	add    ebx,ecx
c001e531:	89 c6                	mov    esi,eax
c001e533:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e537:	50                   	push   eax
c001e538:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e53c:	50                   	push   eax
c001e53d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e541:	50                   	push   eax
c001e542:	55                   	push   ebp
c001e543:	53                   	push   ebx
c001e544:	b3 06                	mov    bl,0x6
c001e546:	68 4d bc 02 c0       	push   0xc002bc4d
c001e54b:	e8 a3 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e550:	83 c4 20             	add    esp,0x20
c001e553:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e558:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e55d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e561:	3c 9d                	cmp    al,0x9d
c001e563:	0f 84 d7 02 00 00    	je     c001e840 <Vm::faultHandler(regs*)+0x345>
c001e569:	0f 87 a3 00 00 00    	ja     c001e612 <Vm::faultHandler(regs*)+0x117>
c001e56f:	3c 66                	cmp    al,0x66
c001e571:	0f 84 15 02 00 00    	je     c001e78c <Vm::faultHandler(regs*)+0x291>
c001e577:	77 5f                	ja     c001e5d8 <Vm::faultHandler(regs*)+0xdd>
c001e579:	3c 36                	cmp    al,0x36
c001e57b:	0f 84 f1 01 00 00    	je     c001e772 <Vm::faultHandler(regs*)+0x277>
c001e581:	77 28                	ja     c001e5ab <Vm::faultHandler(regs*)+0xb0>
c001e583:	3c 26                	cmp    al,0x26
c001e585:	0f 84 99 01 00 00    	je     c001e724 <Vm::faultHandler(regs*)+0x229>
c001e58b:	3c 2e                	cmp    al,0x2e
c001e58d:	0f 85 3b 07 00 00    	jne    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e593:	83 ec 0c             	sub    esp,0xc
c001e596:	31 db                	xor    ebx,ebx
c001e598:	68 62 bc 02 c0       	push   0xc002bc62
c001e59d:	e8 51 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e5a2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	45                   	inc    ebp
c001e5a9:	eb b2                	jmp    c001e55d <Vm::faultHandler(regs*)+0x62>
c001e5ab:	3c 64                	cmp    al,0x64
c001e5ad:	0f 84 8b 01 00 00    	je     c001e73e <Vm::faultHandler(regs*)+0x243>
c001e5b3:	0f 87 9f 01 00 00    	ja     c001e758 <Vm::faultHandler(regs*)+0x25d>
c001e5b9:	3c 3e                	cmp    al,0x3e
c001e5bb:	0f 85 0d 07 00 00    	jne    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e5c1:	83 ec 0c             	sub    esp,0xc
c001e5c4:	b3 01                	mov    bl,0x1
c001e5c6:	68 66 bc 02 c0       	push   0xc002bc66
c001e5cb:	e8 23 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e5d0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e5d3:	83 c4 10             	add    esp,0x10
c001e5d6:	eb d0                	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e5d8:	3c 6d                	cmp    al,0x6d
c001e5da:	0f 84 af 03 00 00    	je     c001e98f <Vm::faultHandler(regs*)+0x494>
c001e5e0:	77 15                	ja     c001e5f7 <Vm::faultHandler(regs*)+0xfc>
c001e5e2:	3c 67                	cmp    al,0x67
c001e5e4:	0f 84 bf 01 00 00    	je     c001e7a9 <Vm::faultHandler(regs*)+0x2ae>
c001e5ea:	3c 6c                	cmp    al,0x6c
c001e5ec:	0f 84 3f 03 00 00    	je     c001e931 <Vm::faultHandler(regs*)+0x436>
c001e5f2:	e9 d7 06 00 00       	jmp    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e5f7:	3c 6f                	cmp    al,0x6f
c001e5f9:	0f 84 a4 04 00 00    	je     c001eaa3 <Vm::faultHandler(regs*)+0x5a8>
c001e5ff:	0f 82 11 04 00 00    	jb     c001ea16 <Vm::faultHandler(regs*)+0x51b>
c001e605:	3c 9c                	cmp    al,0x9c
c001e607:	0f 84 ba 01 00 00    	je     c001e7c7 <Vm::faultHandler(regs*)+0x2cc>
c001e60d:	e9 bc 06 00 00       	jmp    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e612:	3c ec                	cmp    al,0xec
c001e614:	0f 84 24 06 00 00    	je     c001ec3e <Vm::faultHandler(regs*)+0x743>
c001e61a:	0f 87 93 00 00 00    	ja     c001e6b3 <Vm::faultHandler(regs*)+0x1b8>
c001e620:	3c e4                	cmp    al,0xe4
c001e622:	0f 84 5c 05 00 00    	je     c001eb84 <Vm::faultHandler(regs*)+0x689>
c001e628:	77 6a                	ja     c001e694 <Vm::faultHandler(regs*)+0x199>
c001e62a:	3c cd                	cmp    al,0xcd
c001e62c:	0f 84 7e 02 00 00    	je     c001e8b0 <Vm::faultHandler(regs*)+0x3b5>
c001e632:	3c cf                	cmp    al,0xcf
c001e634:	0f 85 94 06 00 00    	jne    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	68 aa bc 02 c0       	push   0xc002bcaa
c001e642:	e8 ac 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e647:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e64a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e64d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e651:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e654:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e658:	0d 00 02 02 00       	or     eax,0x20200
c001e65d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e660:	56                   	push   esi
c001e661:	53                   	push   ebx
c001e662:	52                   	push   edx
c001e663:	68 b0 bc 02 c0       	push   0xc002bcb0
c001e668:	e8 86 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e66d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e671:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e677:	66 c1 e8 09          	shr    ax,0x9
c001e67b:	83 e0 01             	and    eax,0x1
c001e67e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e681:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e684:	83 c0 06             	add    eax,0x6
c001e687:	25 ff ff 00 00       	and    eax,0xffff
c001e68c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e68f:	e9 95 02 00 00       	jmp    c001e929 <Vm::faultHandler(regs*)+0x42e>
c001e694:	3c e6                	cmp    al,0xe6
c001e696:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e69a:	0f 84 4e 05 00 00    	je     c001ebee <Vm::faultHandler(regs*)+0x6f3>
c001e6a0:	0f 82 0a 05 00 00    	jb     c001ebb0 <Vm::faultHandler(regs*)+0x6b5>
c001e6a6:	3c e7                	cmp    al,0xe7
c001e6a8:	0f 84 69 05 00 00    	je     c001ec17 <Vm::faultHandler(regs*)+0x71c>
c001e6ae:	e9 1b 06 00 00       	jmp    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e6b3:	3c ef                	cmp    al,0xef
c001e6b5:	0f 84 e6 05 00 00    	je     c001eca1 <Vm::faultHandler(regs*)+0x7a6>
c001e6bb:	77 37                	ja     c001e6f4 <Vm::faultHandler(regs*)+0x1f9>
c001e6bd:	3c ed                	cmp    al,0xed
c001e6bf:	0f 84 a3 05 00 00    	je     c001ec68 <Vm::faultHandler(regs*)+0x76d>
c001e6c5:	3c ee                	cmp    al,0xee
c001e6c7:	0f 85 01 06 00 00    	jne    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e6cd:	52                   	push   edx
c001e6ce:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e6d1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6d4:	68 4b bd 02 c0       	push   0xc002bd4b
c001e6d9:	e8 15 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e6de:	59                   	pop    ecx
c001e6df:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e6e3:	5b                   	pop    ebx
c001e6e4:	50                   	push   eax
c001e6e5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6e9:	50                   	push   eax
c001e6ea:	e8 2a fa ff ff       	call   c001e119 <Vm::outbv(unsigned short, unsigned char)>
c001e6ef:	e9 a5 05 00 00       	jmp    c001ec99 <Vm::faultHandler(regs*)+0x79e>
c001e6f4:	3c fa                	cmp    al,0xfa
c001e6f6:	0f 84 f7 01 00 00    	je     c001e8f3 <Vm::faultHandler(regs*)+0x3f8>
c001e6fc:	3c fb                	cmp    al,0xfb
c001e6fe:	0f 84 0a 02 00 00    	je     c001e90e <Vm::faultHandler(regs*)+0x413>
c001e704:	3c f3                	cmp    al,0xf3
c001e706:	0f 85 c2 05 00 00    	jne    c001ecce <Vm::faultHandler(regs*)+0x7d3>
c001e70c:	83 ec 0c             	sub    esp,0xc
c001e70f:	68 83 bc 02 c0       	push   0xc002bc83
c001e714:	e8 da 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e719:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e71c:	83 c4 10             	add    esp,0x10
c001e71f:	e9 84 fe ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	b3 02                	mov    bl,0x2
c001e729:	68 5e bc 02 c0       	push   0xc002bc5e
c001e72e:	e8 c0 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e733:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e736:	83 c4 10             	add    esp,0x10
c001e739:	e9 6a fe ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	b3 03                	mov    bl,0x3
c001e743:	68 6a bc 02 c0       	push   0xc002bc6a
c001e748:	e8 a6 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e74d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e750:	83 c4 10             	add    esp,0x10
c001e753:	e9 50 fe ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	b3 04                	mov    bl,0x4
c001e75d:	68 6e bc 02 c0       	push   0xc002bc6e
c001e762:	e8 8c 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e767:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	e9 36 fe ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e772:	83 ec 0c             	sub    esp,0xc
c001e775:	b3 05                	mov    bl,0x5
c001e777:	68 72 bc 02 c0       	push   0xc002bc72
c001e77c:	e8 72 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e781:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e784:	83 c4 10             	add    esp,0x10
c001e787:	e9 1c fe ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 76 bc 02 c0       	push   0xc002bc76
c001e794:	e8 5a 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e79f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e7a4:	e9 ff fd ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e7a9:	50                   	push   eax
c001e7aa:	50                   	push   eax
c001e7ab:	6a 01                	push   0x1
c001e7ad:	68 7b bc 02 c0       	push   0xc002bc7b
c001e7b2:	e8 3c 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e7b7:	83 c4 10             	add    esp,0x10
c001e7ba:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e7bd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e7c2:	e9 e1 fd ff ff       	jmp    c001e5a8 <Vm::faultHandler(regs*)+0xad>
c001e7c7:	83 ec 0c             	sub    esp,0xc
c001e7ca:	68 89 bc 02 c0       	push   0xc002bc89
c001e7cf:	e8 1f 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e7da:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7df:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e7e2:	74 2f                	je     c001e813 <Vm::faultHandler(regs*)+0x318>
c001e7e4:	83 ea 04             	sub    edx,0x4
c001e7e7:	25 ff 0d 00 00       	and    eax,0xdff
c001e7ec:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7f2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7f5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7fe:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e802:	0f 84 bf 04 00 00    	je     c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001e808:	80 cc 02             	or     ah,0x2
c001e80b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e80e:	e9 b4 04 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001e813:	83 ea 02             	sub    edx,0x2
c001e816:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e81c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e81f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e823:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e829:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e82d:	74 05                	je     c001e834 <Vm::faultHandler(regs*)+0x339>
c001e82f:	80 cc 02             	or     ah,0x2
c001e832:	eb 03                	jmp    c001e837 <Vm::faultHandler(regs*)+0x33c>
c001e834:	80 e4 fd             	and    ah,0xfd
c001e837:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e83b:	e9 87 04 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	68 90 bc 02 c0       	push   0xc002bc90
c001e848:	e8 a6 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e855:	74 28                	je     c001e87f <Vm::faultHandler(regs*)+0x384>
c001e857:	8b 06                	mov    eax,DWORD PTR [esi]
c001e859:	25 ff 0d 00 00       	and    eax,0xdff
c001e85e:	0d 00 02 02 00       	or     eax,0x20200
c001e863:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e866:	8b 06                	mov    eax,DWORD PTR [esi]
c001e868:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e86e:	c1 e8 09             	shr    eax,0x9
c001e871:	83 e0 01             	and    eax,0x1
c001e874:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e877:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e87a:	83 c0 04             	add    eax,0x4
c001e87d:	eb 24                	jmp    c001e8a3 <Vm::faultHandler(regs*)+0x3a8>
c001e87f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e882:	0d 00 02 02 00       	or     eax,0x20200
c001e887:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e88a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e88d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e893:	66 c1 e8 09          	shr    ax,0x9
c001e897:	83 e0 01             	and    eax,0x1
c001e89a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e89d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e8a0:	83 c0 02             	add    eax,0x2
c001e8a3:	25 ff ff 00 00       	and    eax,0xffff
c001e8a8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e8ab:	e9 17 04 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001e8b0:	53                   	push   ebx
c001e8b1:	53                   	push   ebx
c001e8b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8b6:	50                   	push   eax
c001e8b7:	68 96 bc 02 c0       	push   0xc002bc96
c001e8bc:	e8 32 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e8c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8c5:	83 c4 10             	add    esp,0x10
c001e8c8:	3c ee                	cmp    al,0xee
c001e8ca:	75 10                	jne    c001e8dc <Vm::faultHandler(regs*)+0x3e1>
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e8d2:	e8 fa f8 ff ff       	call   c001e1d1 <Vm::mainloop3(unsigned long)>
c001e8d7:	e9 c0 03 00 00       	jmp    c001ec9c <Vm::faultHandler(regs*)+0x7a1>
c001e8dc:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	53                   	push   ebx
c001e8e4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e8e8:	53                   	push   ebx
c001e8e9:	55                   	push   ebp
c001e8ea:	50                   	push   eax
c001e8eb:	57                   	push   edi
c001e8ec:	e8 0c fb ff ff       	call   c001e3fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e8f1:	eb 36                	jmp    c001e929 <Vm::faultHandler(regs*)+0x42e>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	68 a0 bc 02 c0       	push   0xc002bca0
c001e8fb:	e8 f3 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e905:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e909:	e9 8b 03 00 00       	jmp    c001ec99 <Vm::faultHandler(regs*)+0x79e>
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	68 a5 bc 02 c0       	push   0xc002bca5
c001e916:	e8 d8 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e91b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e920:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e924:	e9 70 03 00 00       	jmp    c001ec99 <Vm::faultHandler(regs*)+0x79e>
c001e929:	83 c4 20             	add    esp,0x20
c001e92c:	e9 99 03 00 00       	jmp    c001ecca <Vm::faultHandler(regs*)+0x7cf>
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 e3 bc 02 c0       	push   0xc002bce3
c001e939:	e8 b5 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e944:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e949:	74 0d                	je     c001e958 <Vm::faultHandler(regs*)+0x45d>
c001e94b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e952:	0f 87 9e 01 00 00    	ja     c001eaf6 <Vm::faultHandler(regs*)+0x5fb>
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e95f:	0f b7 db             	movzx  ebx,bx
c001e962:	50                   	push   eax
c001e963:	e8 9e f7 ff ff       	call   c001e106 <Vm::inbv(unsigned short)>
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	0f b6 c0             	movzx  eax,al
c001e96e:	50                   	push   eax
c001e96f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e973:	50                   	push   eax
c001e974:	53                   	push   ebx
c001e975:	e8 41 fb ff ff       	call   c001e4bb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e980:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e984:	74 03                	je     c001e989 <Vm::faultHandler(regs*)+0x48e>
c001e986:	48                   	dec    eax
c001e987:	eb 01                	jmp    c001e98a <Vm::faultHandler(regs*)+0x48f>
c001e989:	40                   	inc    eax
c001e98a:	0f b7 c0             	movzx  eax,ax
c001e98d:	eb 7f                	jmp    c001ea0e <Vm::faultHandler(regs*)+0x513>
c001e98f:	83 ec 0c             	sub    esp,0xc
c001e992:	68 15 bd 02 c0       	push   0xc002bd15
c001e997:	e8 57 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e99c:	83 c4 10             	add    esp,0x10
c001e99f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e9a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e9a7:	74 0d                	je     c001e9b6 <Vm::faultHandler(regs*)+0x4bb>
c001e9a9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e9b0:	0f 87 40 01 00 00    	ja     c001eaf6 <Vm::faultHandler(regs*)+0x5fb>
c001e9b6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e9b9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e9bd:	0f b7 db             	movzx  ebx,bx
c001e9c0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9c5:	74 20                	je     c001e9e7 <Vm::faultHandler(regs*)+0x4ec>
c001e9c7:	ed                   	in     eax,dx
c001e9c8:	51                   	push   ecx
c001e9c9:	50                   	push   eax
c001e9ca:	56                   	push   esi
c001e9cb:	53                   	push   ebx
c001e9cc:	e8 15 fb ff ff       	call   c001e4e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e9d1:	83 c4 10             	add    esp,0x10
c001e9d4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9d7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9db:	74 05                	je     c001e9e2 <Vm::faultHandler(regs*)+0x4e7>
c001e9dd:	83 e8 04             	sub    eax,0x4
c001e9e0:	eb 27                	jmp    c001ea09 <Vm::faultHandler(regs*)+0x50e>
c001e9e2:	83 c0 04             	add    eax,0x4
c001e9e5:	eb 22                	jmp    c001ea09 <Vm::faultHandler(regs*)+0x50e>
c001e9e7:	66 ed                	in     ax,dx
c001e9e9:	0f b7 c0             	movzx  eax,ax
c001e9ec:	52                   	push   edx
c001e9ed:	50                   	push   eax
c001e9ee:	56                   	push   esi
c001e9ef:	53                   	push   ebx
c001e9f0:	e8 db fa ff ff       	call   c001e4d0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9fb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9ff:	74 05                	je     c001ea06 <Vm::faultHandler(regs*)+0x50b>
c001ea01:	83 e8 02             	sub    eax,0x2
c001ea04:	eb 03                	jmp    c001ea09 <Vm::faultHandler(regs*)+0x50e>
c001ea06:	83 c0 02             	add    eax,0x2
c001ea09:	25 ff ff 00 00       	and    eax,0xffff
c001ea0e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ea11:	e9 b1 02 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001ea16:	83 ec 0c             	sub    esp,0xc
c001ea19:	4b                   	dec    ebx
c001ea1a:	68 1b bd 02 c0       	push   0xc002bd1b
c001ea1f:	e8 cf 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ea24:	83 c4 10             	add    esp,0x10
c001ea27:	80 fb 05             	cmp    bl,0x5
c001ea2a:	77 0a                	ja     c001ea36 <Vm::faultHandler(regs*)+0x53b>
c001ea2c:	0f b6 db             	movzx  ebx,bl
c001ea2f:	ff 24 9d 8c bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4274]
c001ea36:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea3a:	eb 1b                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x55c>
c001ea3c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea40:	eb 15                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x55c>
c001ea42:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ea46:	eb 0f                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x55c>
c001ea48:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ea4c:	eb 09                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x55c>
c001ea4e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ea51:	eb 04                	jmp    c001ea57 <Vm::faultHandler(regs*)+0x55c>
c001ea53:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea57:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ea5c:	74 0d                	je     c001ea6b <Vm::faultHandler(regs*)+0x570>
c001ea5e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ea65:	0f 87 8b 00 00 00    	ja     c001eaf6 <Vm::faultHandler(regs*)+0x5fb>
c001ea6b:	53                   	push   ebx
c001ea6c:	53                   	push   ebx
c001ea6d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ea71:	52                   	push   edx
c001ea72:	50                   	push   eax
c001ea73:	e8 0f fa ff ff       	call   c001e487 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ea78:	5e                   	pop    esi
c001ea79:	0f b6 c0             	movzx  eax,al
c001ea7c:	5d                   	pop    ebp
c001ea7d:	50                   	push   eax
c001ea7e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ea82:	50                   	push   eax
c001ea83:	e8 91 f6 ff ff       	call   c001e119 <Vm::outbv(unsigned short, unsigned char)>
c001ea88:	83 c4 10             	add    esp,0x10
c001ea8b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ea8e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ea92:	74 03                	je     c001ea97 <Vm::faultHandler(regs*)+0x59c>
c001ea94:	48                   	dec    eax
c001ea95:	eb 01                	jmp    c001ea98 <Vm::faultHandler(regs*)+0x59d>
c001ea97:	40                   	inc    eax
c001ea98:	0f b7 c0             	movzx  eax,ax
c001ea9b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ea9e:	e9 24 02 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001eaa3:	83 ec 0c             	sub    esp,0xc
c001eaa6:	4b                   	dec    ebx
c001eaa7:	68 1b bd 02 c0       	push   0xc002bd1b
c001eaac:	e8 42 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	80 fb 05             	cmp    bl,0x5
c001eab7:	77 0a                	ja     c001eac3 <Vm::faultHandler(regs*)+0x5c8>
c001eab9:	0f b6 db             	movzx  ebx,bl
c001eabc:	ff 24 9d a4 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd425c]
c001eac3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001eac7:	eb 1b                	jmp    c001eae4 <Vm::faultHandler(regs*)+0x5e9>
c001eac9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001eacd:	eb 15                	jmp    c001eae4 <Vm::faultHandler(regs*)+0x5e9>
c001eacf:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ead3:	eb 0f                	jmp    c001eae4 <Vm::faultHandler(regs*)+0x5e9>
c001ead5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ead9:	eb 09                	jmp    c001eae4 <Vm::faultHandler(regs*)+0x5e9>
c001eadb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001eade:	eb 04                	jmp    c001eae4 <Vm::faultHandler(regs*)+0x5e9>
c001eae0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eae4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001eae7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eaec:	74 39                	je     c001eb27 <Vm::faultHandler(regs*)+0x62c>
c001eaee:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001eaf4:	76 31                	jbe    c001eb27 <Vm::faultHandler(regs*)+0x62c>
c001eaf6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eafa:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eafe:	51                   	push   ecx
c001eaff:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eb03:	51                   	push   ecx
c001eb04:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001eb08:	51                   	push   ecx
c001eb09:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001eb0d:	51                   	push   ecx
c001eb0e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eb12:	52                   	push   edx
c001eb13:	50                   	push   eax
c001eb14:	50                   	push   eax
c001eb15:	68 e8 bc 02 c0       	push   0xc002bce8
c001eb1a:	e8 d4 3d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001eb1f:	83 c4 20             	add    esp,0x20
c001eb22:	e9 fb 01 00 00       	jmp    c001ed22 <Vm::faultHandler(regs*)+0x827>
c001eb27:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001eb2a:	0f b7 d3             	movzx  edx,bx
c001eb2d:	81 e6 00 04 00 00    	and    esi,0x400
c001eb33:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001eb36:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb3b:	74 1d                	je     c001eb5a <Vm::faultHandler(regs*)+0x65f>
c001eb3d:	51                   	push   ecx
c001eb3e:	51                   	push   ecx
c001eb3f:	52                   	push   edx
c001eb40:	50                   	push   eax
c001eb41:	e8 64 f9 ff ff       	call   c001e4aa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eb46:	83 c4 10             	add    esp,0x10
c001eb49:	89 ea                	mov    edx,ebp
c001eb4b:	ef                   	out    dx,eax
c001eb4c:	85 f6                	test   esi,esi
c001eb4e:	74 05                	je     c001eb55 <Vm::faultHandler(regs*)+0x65a>
c001eb50:	83 eb 04             	sub    ebx,0x4
c001eb53:	eb 21                	jmp    c001eb76 <Vm::faultHandler(regs*)+0x67b>
c001eb55:	83 c3 04             	add    ebx,0x4
c001eb58:	eb 1c                	jmp    c001eb76 <Vm::faultHandler(regs*)+0x67b>
c001eb5a:	51                   	push   ecx
c001eb5b:	51                   	push   ecx
c001eb5c:	52                   	push   edx
c001eb5d:	50                   	push   eax
c001eb5e:	e8 35 f9 ff ff       	call   c001e498 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eb63:	83 c4 10             	add    esp,0x10
c001eb66:	89 ea                	mov    edx,ebp
c001eb68:	66 ef                	out    dx,ax
c001eb6a:	85 f6                	test   esi,esi
c001eb6c:	74 05                	je     c001eb73 <Vm::faultHandler(regs*)+0x678>
c001eb6e:	83 eb 02             	sub    ebx,0x2
c001eb71:	eb 03                	jmp    c001eb76 <Vm::faultHandler(regs*)+0x67b>
c001eb73:	83 c3 02             	add    ebx,0x2
c001eb76:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001eb7c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eb7f:	e9 43 01 00 00       	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001eb84:	53                   	push   ebx
c001eb85:	53                   	push   ebx
c001eb86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb8a:	50                   	push   eax
c001eb8b:	68 21 bd 02 c0       	push   0xc002bd21
c001eb90:	e8 5e 3d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001eb95:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001eb9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eba0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eba3:	e8 5e f5 ff ff       	call   c001e106 <Vm::inbv(unsigned short)>
c001eba8:	0f b6 c0             	movzx  eax,al
c001ebab:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ebae:	eb 5e                	jmp    c001ec0e <Vm::faultHandler(regs*)+0x713>
c001ebb0:	51                   	push   ecx
c001ebb1:	51                   	push   ecx
c001ebb2:	53                   	push   ebx
c001ebb3:	68 27 bd 02 c0       	push   0xc002bd27
c001ebb8:	e8 36 3d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ebbd:	83 c4 10             	add    esp,0x10
c001ebc0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ebc5:	74 07                	je     c001ebce <Vm::faultHandler(regs*)+0x6d3>
c001ebc7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebcb:	ed                   	in     eax,dx
c001ebcc:	eb 14                	jmp    c001ebe2 <Vm::faultHandler(regs*)+0x6e7>
c001ebce:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001ebd1:	66 31 db             	xor    bx,bx
c001ebd4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001ebd7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebdb:	66 ed                	in     ax,dx
c001ebdd:	0f b7 c0             	movzx  eax,ax
c001ebe0:	09 d8                	or     eax,ebx
c001ebe2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ebe5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebe9:	e9 dc 00 00 00       	jmp    c001ecca <Vm::faultHandler(regs*)+0x7cf>
c001ebee:	50                   	push   eax
c001ebef:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebf2:	53                   	push   ebx
c001ebf3:	68 2d bd 02 c0       	push   0xc002bd2d
c001ebf8:	e8 f6 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ebfd:	58                   	pop    eax
c001ebfe:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ec02:	5a                   	pop    edx
c001ec03:	50                   	push   eax
c001ec04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec08:	50                   	push   eax
c001ec09:	e8 0b f5 ff ff       	call   c001e119 <Vm::outbv(unsigned short, unsigned char)>
c001ec0e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ec12:	e9 85 00 00 00       	jmp    c001ec9c <Vm::faultHandler(regs*)+0x7a1>
c001ec17:	50                   	push   eax
c001ec18:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec1b:	53                   	push   ebx
c001ec1c:	68 36 bd 02 c0       	push   0xc002bd36
c001ec21:	e8 cd 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ec26:	83 c4 10             	add    esp,0x10
c001ec29:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ec2d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec32:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec35:	74 03                	je     c001ec3a <Vm::faultHandler(regs*)+0x73f>
c001ec37:	ef                   	out    dx,eax
c001ec38:	eb ab                	jmp    c001ebe5 <Vm::faultHandler(regs*)+0x6ea>
c001ec3a:	66 ef                	out    dx,ax
c001ec3c:	eb a7                	jmp    c001ebe5 <Vm::faultHandler(regs*)+0x6ea>
c001ec3e:	55                   	push   ebp
c001ec3f:	55                   	push   ebp
c001ec40:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec43:	68 3f bd 02 c0       	push   0xc002bd3f
c001ec48:	e8 a6 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ec4d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ec54:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec58:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec5b:	e8 a6 f4 ff ff       	call   c001e106 <Vm::inbv(unsigned short)>
c001ec60:	0f b6 c0             	movzx  eax,al
c001ec63:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ec66:	eb 31                	jmp    c001ec99 <Vm::faultHandler(regs*)+0x79e>
c001ec68:	56                   	push   esi
c001ec69:	56                   	push   esi
c001ec6a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec6d:	68 45 bd 02 c0       	push   0xc002bd45
c001ec72:	e8 7c 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec7d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec82:	74 03                	je     c001ec87 <Vm::faultHandler(regs*)+0x78c>
c001ec84:	ed                   	in     eax,dx
c001ec85:	eb 0d                	jmp    c001ec94 <Vm::faultHandler(regs*)+0x799>
c001ec87:	66 ed                	in     ax,dx
c001ec89:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ec8c:	0f b7 c0             	movzx  eax,ax
c001ec8f:	66 31 d2             	xor    dx,dx
c001ec92:	09 d0                	or     eax,edx
c001ec94:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ec97:	eb 2e                	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001ec99:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec9c:	83 c4 10             	add    esp,0x10
c001ec9f:	eb 29                	jmp    c001ecca <Vm::faultHandler(regs*)+0x7cf>
c001eca1:	50                   	push   eax
c001eca2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eca5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001eca8:	68 54 bd 02 c0       	push   0xc002bd54
c001ecad:	e8 41 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ecb2:	83 c4 10             	add    esp,0x10
c001ecb5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ecb8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ecbd:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ecc0:	74 03                	je     c001ecc5 <Vm::faultHandler(regs*)+0x7ca>
c001ecc2:	ef                   	out    dx,eax
c001ecc3:	eb 02                	jmp    c001ecc7 <Vm::faultHandler(regs*)+0x7cc>
c001ecc5:	66 ef                	out    dx,ax
c001ecc7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecca:	b0 01                	mov    al,0x1
c001eccc:	eb 56                	jmp    c001ed24 <Vm::faultHandler(regs*)+0x829>
c001ecce:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ecd2:	51                   	push   ecx
c001ecd3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ecd7:	51                   	push   ecx
c001ecd8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ecdc:	51                   	push   ecx
c001ecdd:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ece1:	51                   	push   ecx
c001ece2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ece6:	52                   	push   edx
c001ece7:	50                   	push   eax
c001ece8:	50                   	push   eax
c001ece9:	68 5d bd 02 c0       	push   0xc002bd5d
c001ecee:	e8 00 3c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ecf3:	83 c4 20             	add    esp,0x20
c001ecf6:	83 ec 0c             	sub    esp,0xc
c001ecf9:	6a 60                	push   0x60
c001ecfb:	e8 06 f4 ff ff       	call   c001e106 <Vm::inbv(unsigned short)>
c001ed00:	83 c4 10             	add    esp,0x10
c001ed03:	3c 1c                	cmp    al,0x1c
c001ed05:	74 04                	je     c001ed0b <Vm::faultHandler(regs*)+0x810>
c001ed07:	3c 5a                	cmp    al,0x5a
c001ed09:	75 eb                	jne    c001ecf6 <Vm::faultHandler(regs*)+0x7fb>
c001ed0b:	3c 1c                	cmp    al,0x1c
c001ed0d:	74 04                	je     c001ed13 <Vm::faultHandler(regs*)+0x818>
c001ed0f:	3c 5a                	cmp    al,0x5a
c001ed11:	75 0f                	jne    c001ed22 <Vm::faultHandler(regs*)+0x827>
c001ed13:	83 ec 0c             	sub    esp,0xc
c001ed16:	6a 60                	push   0x60
c001ed18:	e8 e9 f3 ff ff       	call   c001e106 <Vm::inbv(unsigned short)>
c001ed1d:	83 c4 10             	add    esp,0x10
c001ed20:	eb e9                	jmp    c001ed0b <Vm::faultHandler(regs*)+0x810>
c001ed22:	31 c0                	xor    eax,eax
c001ed24:	83 c4 1c             	add    esp,0x1c
c001ed27:	5b                   	pop    ebx
c001ed28:	5e                   	pop    esi
c001ed29:	5f                   	pop    edi
c001ed2a:	5d                   	pop    ebp
c001ed2b:	c3                   	ret    

c001ed2c <Vm::fpuInternalTo32(unsigned long long)>:
c001ed2c:	57                   	push   edi
c001ed2d:	56                   	push   esi
c001ed2e:	53                   	push   ebx
c001ed2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed37:	89 d6                	mov    esi,edx
c001ed39:	89 d7                	mov    edi,edx
c001ed3b:	89 c1                	mov    ecx,eax
c001ed3d:	c1 ef 14             	shr    edi,0x14
c001ed40:	89 d3                	mov    ebx,edx
c001ed42:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed48:	31 d2                	xor    edx,edx
c001ed4a:	89 f8                	mov    eax,edi
c001ed4c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed52:	bf ff 00 00 00       	mov    edi,0xff
c001ed57:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed5c:	83 d2 ff             	adc    edx,0xffffffff
c001ed5f:	39 c7                	cmp    edi,eax
c001ed61:	bf 00 00 00 00       	mov    edi,0x0
c001ed66:	19 d7                	sbb    edi,edx
c001ed68:	72 15                	jb     c001ed7f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed6a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed6e:	c1 e0 17             	shl    eax,0x17
c001ed71:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ed77:	09 f1                	or     ecx,esi
c001ed79:	09 c1                	or     ecx,eax
c001ed7b:	89 cf                	mov    edi,ecx
c001ed7d:	eb 02                	jmp    c001ed81 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ed7f:	31 ff                	xor    edi,edi
c001ed81:	89 f8                	mov    eax,edi
c001ed83:	5b                   	pop    ebx
c001ed84:	5e                   	pop    esi
c001ed85:	5f                   	pop    edi
c001ed86:	c3                   	ret    

c001ed87 <Vm::fpuInternalTo64(unsigned long long)>:
c001ed87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed8f:	c3                   	ret    

c001ed90 <Vm::fpu32ToInternal(unsigned int)>:
c001ed90:	57                   	push   edi
c001ed91:	31 ff                	xor    edi,edi
c001ed93:	56                   	push   esi
c001ed94:	53                   	push   ebx
c001ed95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed99:	89 cb                	mov    ebx,ecx
c001ed9b:	89 ce                	mov    esi,ecx
c001ed9d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eda3:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eda9:	c1 e9 17             	shr    ecx,0x17
c001edac:	89 f0                	mov    eax,esi
c001edae:	0f b6 d1             	movzx  edx,cl
c001edb1:	81 c2 80 03 00 00    	add    edx,0x380
c001edb7:	89 d1                	mov    ecx,edx
c001edb9:	89 fa                	mov    edx,edi
c001edbb:	c1 e1 14             	shl    ecx,0x14
c001edbe:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001edc2:	c1 e0 1d             	shl    eax,0x1d
c001edc5:	89 d7                	mov    edi,edx
c001edc7:	89 c6                	mov    esi,eax
c001edc9:	89 ca                	mov    edx,ecx
c001edcb:	89 f0                	mov    eax,esi
c001edcd:	09 fa                	or     edx,edi
c001edcf:	09 da                	or     edx,ebx
c001edd1:	5b                   	pop    ebx
c001edd2:	5e                   	pop    esi
c001edd3:	5f                   	pop    edi
c001edd4:	c3                   	ret    

c001edd5 <Vm::fpu64ToInternal(unsigned long long)>:
c001edd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eddd:	c3                   	ret    

c001edde <Vm::fpuFloatToLong(unsigned long long)>:
c001edde:	57                   	push   edi
c001eddf:	31 c0                	xor    eax,eax
c001ede1:	56                   	push   esi
c001ede2:	31 d2                	xor    edx,edx
c001ede4:	53                   	push   ebx
c001ede5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ede9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eded:	89 d9                	mov    ecx,ebx
c001edef:	c1 e9 14             	shr    ecx,0x14
c001edf2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001edf8:	89 cf                	mov    edi,ecx
c001edfa:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee00:	78 33                	js     c001ee35 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee02:	89 d9                	mov    ecx,ebx
c001ee04:	89 f0                	mov    eax,esi
c001ee06:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee0c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ee12:	89 ca                	mov    edx,ecx
c001ee14:	b9 34 00 00 00       	mov    ecx,0x34
c001ee19:	29 f9                	sub    ecx,edi
c001ee1b:	0f ad d0             	shrd   eax,edx,cl
c001ee1e:	d3 fa                	sar    edx,cl
c001ee20:	f6 c1 20             	test   cl,0x20
c001ee23:	74 05                	je     c001ee2a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ee25:	89 d0                	mov    eax,edx
c001ee27:	c1 fa 1f             	sar    edx,0x1f
c001ee2a:	85 db                	test   ebx,ebx
c001ee2c:	79 07                	jns    c001ee35 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee2e:	f7 d8                	neg    eax
c001ee30:	83 d2 00             	adc    edx,0x0
c001ee33:	f7 da                	neg    edx
c001ee35:	5b                   	pop    ebx
c001ee36:	5e                   	pop    esi
c001ee37:	5f                   	pop    edi
c001ee38:	c3                   	ret    

c001ee39 <Vm::fpuULongToFloat(unsigned long long)>:
c001ee39:	57                   	push   edi
c001ee3a:	31 c9                	xor    ecx,ecx
c001ee3c:	56                   	push   esi
c001ee3d:	53                   	push   ebx
c001ee3e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee46:	0f ba e7 14          	bt     edi,0x14
c001ee4a:	72 07                	jb     c001ee53 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee4c:	01 f6                	add    esi,esi
c001ee4e:	11 ff                	adc    edi,edi
c001ee50:	41                   	inc    ecx
c001ee51:	eb f3                	jmp    c001ee46 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee53:	89 fa                	mov    edx,edi
c001ee55:	89 f0                	mov    eax,esi
c001ee57:	bb 33 04 00 00       	mov    ebx,0x433
c001ee5c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee62:	29 cb                	sub    ebx,ecx
c001ee64:	89 d9                	mov    ecx,ebx
c001ee66:	5b                   	pop    ebx
c001ee67:	c1 e1 14             	shl    ecx,0x14
c001ee6a:	5e                   	pop    esi
c001ee6b:	09 ca                	or     edx,ecx
c001ee6d:	5f                   	pop    edi
c001ee6e:	c3                   	ret    

c001ee6f <Vm::fpuLongToFloat(long long)>:
c001ee6f:	56                   	push   esi
c001ee70:	31 c0                	xor    eax,eax
c001ee72:	53                   	push   ebx
c001ee73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee7b:	39 c8                	cmp    eax,ecx
c001ee7d:	19 d8                	sbb    eax,ebx
c001ee7f:	7d 04                	jge    c001ee85 <Vm::fpuLongToFloat(long long)+0x16>
c001ee81:	31 f6                	xor    esi,esi
c001ee83:	eb 0c                	jmp    c001ee91 <Vm::fpuLongToFloat(long long)+0x22>
c001ee85:	f7 d9                	neg    ecx
c001ee87:	be 01 00 00 00       	mov    esi,0x1
c001ee8c:	83 d3 00             	adc    ebx,0x0
c001ee8f:	f7 db                	neg    ebx
c001ee91:	31 c0                	xor    eax,eax
c001ee93:	0f ba e3 14          	bt     ebx,0x14
c001ee97:	72 07                	jb     c001eea0 <Vm::fpuLongToFloat(long long)+0x31>
c001ee99:	01 c9                	add    ecx,ecx
c001ee9b:	11 db                	adc    ebx,ebx
c001ee9d:	40                   	inc    eax
c001ee9e:	eb f3                	jmp    c001ee93 <Vm::fpuLongToFloat(long long)+0x24>
c001eea0:	ba 33 04 00 00       	mov    edx,0x433
c001eea5:	29 c2                	sub    edx,eax
c001eea7:	89 c8                	mov    eax,ecx
c001eea9:	c1 e2 14             	shl    edx,0x14
c001eeac:	89 d9                	mov    ecx,ebx
c001eeae:	89 f3                	mov    ebx,esi
c001eeb0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eeb6:	09 ca                	or     edx,ecx
c001eeb8:	84 db                	test   bl,bl
c001eeba:	74 06                	je     c001eec2 <Vm::fpuLongToFloat(long long)+0x53>
c001eebc:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eec2:	5b                   	pop    ebx
c001eec3:	5e                   	pop    esi
c001eec4:	c3                   	ret    

c001eec5 <Vm::fpuGet0()>:
c001eec5:	31 c0                	xor    eax,eax
c001eec7:	31 d2                	xor    edx,edx
c001eec9:	c3                   	ret    

c001eeca <Vm::fpuGet1()>:
c001eeca:	b8 01 00 00 00       	mov    eax,0x1
c001eecf:	31 d2                	xor    edx,edx
c001eed1:	c3                   	ret    

c001eed2 <Vm::fpuGetPi()>:
c001eed2:	b8 03 00 00 00       	mov    eax,0x3
c001eed7:	31 d2                	xor    edx,edx
c001eed9:	c3                   	ret    

c001eeda <Vm::fpuGetLog2E()>:
c001eeda:	83 ec 18             	sub    esp,0x18
c001eedd:	68 bc bd 02 c0       	push   0xc002bdbc
c001eee2:	e8 b2 af ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001eee7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eeec:	31 d2                	xor    edx,edx
c001eeee:	83 c4 1c             	add    esp,0x1c
c001eef1:	c3                   	ret    

c001eef2 <Vm::fpuGetLogE2()>:
c001eef2:	83 ec 18             	sub    esp,0x18
c001eef5:	68 c8 bd 02 c0       	push   0xc002bdc8
c001eefa:	e8 9a af ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001eeff:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef04:	31 d2                	xor    edx,edx
c001ef06:	83 c4 1c             	add    esp,0x1c
c001ef09:	c3                   	ret    

c001ef0a <Vm::fpuGetLog210()>:
c001ef0a:	83 ec 18             	sub    esp,0x18
c001ef0d:	68 d4 bd 02 c0       	push   0xc002bdd4
c001ef12:	e8 82 af ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001ef17:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef1c:	31 d2                	xor    edx,edx
c001ef1e:	83 c4 1c             	add    esp,0x1c
c001ef21:	c3                   	ret    

c001ef22 <Vm::fpuGetLog102()>:
c001ef22:	83 ec 18             	sub    esp,0x18
c001ef25:	68 e1 bd 02 c0       	push   0xc002bde1
c001ef2a:	e8 6a af ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001ef2f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef34:	31 d2                	xor    edx,edx
c001ef36:	83 c4 1c             	add    esp,0x1c
c001ef39:	c3                   	ret    

c001ef3a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef3e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef46:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef4a:	0f 92 c0             	setb   al
c001ef4d:	c3                   	ret    

c001ef4e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef56:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef5a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef5e:	09 c2                	or     edx,eax
c001ef60:	0f 94 c0             	sete   al
c001ef63:	c3                   	ret    

c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef64:	57                   	push   edi
c001ef65:	56                   	push   esi
c001ef66:	53                   	push   ebx
c001ef67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef6f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef77:	57                   	push   edi
c001ef78:	56                   	push   esi
c001ef79:	53                   	push   ebx
c001ef7a:	51                   	push   ecx
c001ef7b:	e8 ce ff ff ff       	call   c001ef4e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ef80:	83 c4 10             	add    esp,0x10
c001ef83:	88 c2                	mov    dl,al
c001ef85:	31 c0                	xor    eax,eax
c001ef87:	84 d2                	test   dl,dl
c001ef89:	75 0c                	jne    c001ef97 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ef8b:	57                   	push   edi
c001ef8c:	56                   	push   esi
c001ef8d:	53                   	push   ebx
c001ef8e:	51                   	push   ecx
c001ef8f:	e8 a6 ff ff ff       	call   c001ef3a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ef94:	83 c4 10             	add    esp,0x10
c001ef97:	83 e0 01             	and    eax,0x1
c001ef9a:	5b                   	pop    ebx
c001ef9b:	88 c1                	mov    cl,al
c001ef9d:	83 e2 01             	and    edx,0x1
c001efa0:	a0 a1 00 03 c0       	mov    al,ds:0xc00300a1
c001efa5:	c1 e2 06             	shl    edx,0x6
c001efa8:	83 e0 ba             	and    eax,0xffffffba
c001efab:	5e                   	pop    esi
c001efac:	09 c8                	or     eax,ecx
c001efae:	5f                   	pop    edi
c001efaf:	09 d0                	or     eax,edx
c001efb1:	a2 a1 00 03 c0       	mov    ds:0xc00300a1,al
c001efb6:	c3                   	ret    

c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001efb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efbf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001efc3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001efc7:	c3                   	ret    

c001efc8 <Vm::fpuAbs(unsigned long long)>:
c001efc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efd0:	c3                   	ret    

c001efd1 <Vm::fpuChs(unsigned long long)>:
c001efd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efd9:	f7 d8                	neg    eax
c001efdb:	83 d2 00             	adc    edx,0x0
c001efde:	f7 da                	neg    edx
c001efe0:	c3                   	ret    

c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001efe1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001efe5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001efea:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001efee:	eb c7                	jmp    c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001eff0:	53                   	push   ebx
c001eff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eff9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001effd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f001:	0f af ca             	imul   ecx,edx
c001f004:	0f af d8             	imul   ebx,eax
c001f007:	f7 e2                	mul    edx
c001f009:	01 d9                	add    ecx,ebx
c001f00b:	5b                   	pop    ebx
c001f00c:	01 ca                	add    edx,ecx
c001f00e:	c3                   	ret    

c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f00f:	83 ec 0c             	sub    esp,0xc
c001f012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f022:	e8 25 71 00 00       	call   c002614c <__udivdi3>
c001f027:	83 c4 1c             	add    esp,0x1c
c001f02a:	c3                   	ret    

c001f02b <Vm::fpuSquare(unsigned long long)>:
c001f02b:	50                   	push   eax
c001f02c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f034:	52                   	push   edx
c001f035:	50                   	push   eax
c001f036:	52                   	push   edx
c001f037:	50                   	push   eax
c001f038:	e8 b3 ff ff ff       	call   c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f03d:	83 c4 14             	add    esp,0x14
c001f040:	c3                   	ret    

c001f041 <Vm::fpuGetReg(int)>:
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f049:	76 10                	jbe    c001f05b <Vm::fpuGetReg(int)+0x1a>
c001f04b:	83 ec 0c             	sub    esp,0xc
c001f04e:	68 ee bd 02 c0       	push   0xc002bdee
c001f053:	e8 41 ae ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	a0 a1 00 03 c0       	mov    al,ds:0xc00300a1
c001f060:	b9 08 00 00 00       	mov    ecx,0x8
c001f065:	c0 e8 03             	shr    al,0x3
c001f068:	83 e0 07             	and    eax,0x7
c001f06b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f06f:	99                   	cdq    
c001f070:	f7 f9                	idiv   ecx
c001f072:	8b 04 d5 a4 00 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcff5c]
c001f079:	8b 14 d5 a8 00 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcff58]
c001f080:	83 c4 0c             	add    esp,0xc
c001f083:	c3                   	ret    

c001f084 <Vm::fpuSetReg(int, unsigned long long)>:
c001f084:	57                   	push   edi
c001f085:	56                   	push   esi
c001f086:	52                   	push   edx
c001f087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f08b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f08f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f094:	76 10                	jbe    c001f0a6 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	68 01 be 02 c0       	push   0xc002be01
c001f09e:	e8 f6 ad ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	a0 a1 00 03 c0       	mov    al,ds:0xc00300a1
c001f0ab:	b9 08 00 00 00       	mov    ecx,0x8
c001f0b0:	c0 e8 03             	shr    al,0x3
c001f0b3:	83 e0 07             	and    eax,0x7
c001f0b6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0ba:	99                   	cdq    
c001f0bb:	f7 f9                	idiv   ecx
c001f0bd:	89 34 d5 a4 00 03 c0 	mov    DWORD PTR [edx*8-0x3ffcff5c],esi
c001f0c4:	89 3c d5 a8 00 03 c0 	mov    DWORD PTR [edx*8-0x3ffcff58],edi
c001f0cb:	58                   	pop    eax
c001f0cc:	5e                   	pop    esi
c001f0cd:	5f                   	pop    edi
c001f0ce:	c3                   	ret    

c001f0cf <Vm::fpuPush(unsigned long long)>:
c001f0cf:	a0 a1 00 03 c0       	mov    al,ds:0xc00300a1
c001f0d4:	c0 e8 03             	shr    al,0x3
c001f0d7:	83 e0 07             	and    eax,0x7
c001f0da:	83 c0 07             	add    eax,0x7
c001f0dd:	88 c2                	mov    dl,al
c001f0df:	83 e0 07             	and    eax,0x7
c001f0e2:	83 e2 07             	and    edx,0x7
c001f0e5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f0ec:	8a 15 a1 00 03 c0    	mov    dl,BYTE PTR ds:0xc00300a1
c001f0f2:	83 e2 c7             	and    edx,0xffffffc7
c001f0f5:	09 ca                	or     edx,ecx
c001f0f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0fb:	88 15 a1 00 03 c0    	mov    BYTE PTR ds:0xc00300a1,dl
c001f101:	89 0c c5 a8 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff58],ecx
c001f108:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f10c:	89 14 c5 a4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff5c],edx
c001f113:	a1 e4 00 03 c0       	mov    eax,ds:0xc00300e4
c001f118:	83 f8 08             	cmp    eax,0x8
c001f11b:	75 08                	jne    c001f125 <Vm::fpuPush(unsigned long long)+0x56>
c001f11d:	80 0d a0 00 03 c0 40 	or     BYTE PTR ds:0xc00300a0,0x40
c001f124:	c3                   	ret    
c001f125:	40                   	inc    eax
c001f126:	a3 e4 00 03 c0       	mov    ds:0xc00300e4,eax
c001f12b:	c3                   	ret    

c001f12c <Vm::fpuPop()>:
c001f12c:	8a 0d a1 00 03 c0    	mov    cl,BYTE PTR ds:0xc00300a1
c001f132:	53                   	push   ebx
c001f133:	c0 e9 03             	shr    cl,0x3
c001f136:	8a 1d a1 00 03 c0    	mov    bl,BYTE PTR ds:0xc00300a1
c001f13c:	83 e1 07             	and    ecx,0x7
c001f13f:	83 e3 c7             	and    ebx,0xffffffc7
c001f142:	8b 04 cd a4 00 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcff5c]
c001f149:	8b 14 cd a8 00 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcff58]
c001f150:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f157:	83 e1 38             	and    ecx,0x38
c001f15a:	09 d9                	or     ecx,ebx
c001f15c:	88 0d a1 00 03 c0    	mov    BYTE PTR ds:0xc00300a1,cl
c001f162:	8b 0d e4 00 03 c0    	mov    ecx,DWORD PTR ds:0xc00300e4
c001f168:	85 c9                	test   ecx,ecx
c001f16a:	74 09                	je     c001f175 <Vm::fpuPop()+0x49>
c001f16c:	49                   	dec    ecx
c001f16d:	89 0d e4 00 03 c0    	mov    DWORD PTR ds:0xc00300e4,ecx
c001f173:	eb 07                	jmp    c001f17c <Vm::fpuPop()+0x50>
c001f175:	80 0d a0 00 03 c0 40 	or     BYTE PTR ds:0xc00300a0,0x40
c001f17c:	5b                   	pop    ebx
c001f17d:	c3                   	ret    

c001f17e <Vm::x87Handler(regs*)>:
c001f17e:	55                   	push   ebp
c001f17f:	57                   	push   edi
c001f180:	56                   	push   esi
c001f181:	53                   	push   ebx
c001f182:	83 ec 1c             	sub    esp,0x1c
c001f185:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f189:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f18e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f191:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f199:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f19d:	50                   	push   eax
c001f19e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f1a2:	50                   	push   eax
c001f1a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1a7:	50                   	push   eax
c001f1a8:	53                   	push   ebx
c001f1a9:	e8 1c a5 ff ff       	call   c00196ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f1ae:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f1b1:	83 c4 10             	add    esp,0x10
c001f1b4:	89 c6                	mov    esi,eax
c001f1b6:	80 fa d9             	cmp    dl,0xd9
c001f1b9:	0f 85 52 01 00 00    	jne    c001f311 <Vm::x87Handler(regs*)+0x193>
c001f1bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1c3:	8d 50 20             	lea    edx,[eax+0x20]
c001f1c6:	80 fa 0e             	cmp    dl,0xe
c001f1c9:	0f 87 86 00 00 00    	ja     c001f255 <Vm::x87Handler(regs*)+0xd7>
c001f1cf:	0f b6 d2             	movzx  edx,dl
c001f1d2:	ff 24 95 14 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd41ec]
c001f1d9:	e8 e7 fc ff ff       	call   c001eec5 <Vm::fpuGet0()>
c001f1de:	eb 05                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f1e0:	e8 e5 fc ff ff       	call   c001eeca <Vm::fpuGet1()>
c001f1e5:	57                   	push   edi
c001f1e6:	57                   	push   edi
c001f1e7:	52                   	push   edx
c001f1e8:	50                   	push   eax
c001f1e9:	e8 e1 fe ff ff       	call   c001f0cf <Vm::fpuPush(unsigned long long)>
c001f1ee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f1f2:	83 c4 10             	add    esp,0x10
c001f1f5:	b0 01                	mov    al,0x1
c001f1f7:	e9 e3 09 00 00       	jmp    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f1fc:	83 ec 0c             	sub    esp,0xc
c001f1ff:	6a 00                	push   0x0
c001f201:	e8 3b fe ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f206:	59                   	pop    ecx
c001f207:	5e                   	pop    esi
c001f208:	52                   	push   edx
c001f209:	50                   	push   eax
c001f20a:	e8 c2 fd ff ff       	call   c001efd1 <Vm::fpuChs(unsigned long long)>
c001f20f:	eb 13                	jmp    c001f224 <Vm::x87Handler(regs*)+0xa6>
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	6a 00                	push   0x0
c001f216:	e8 26 fe ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f21b:	5f                   	pop    edi
c001f21c:	5d                   	pop    ebp
c001f21d:	52                   	push   edx
c001f21e:	50                   	push   eax
c001f21f:	e8 a4 fd ff ff       	call   c001efc8 <Vm::fpuAbs(unsigned long long)>
c001f224:	83 c4 0c             	add    esp,0xc
c001f227:	52                   	push   edx
c001f228:	50                   	push   eax
c001f229:	6a 00                	push   0x0
c001f22b:	e8 54 fe ff ff       	call   c001f084 <Vm::fpuSetReg(int, unsigned long long)>
c001f230:	eb bc                	jmp    c001f1ee <Vm::x87Handler(regs*)+0x70>
c001f232:	e8 d3 fc ff ff       	call   c001ef0a <Vm::fpuGetLog210()>
c001f237:	eb ac                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f239:	e8 9c fc ff ff       	call   c001eeda <Vm::fpuGetLog2E()>
c001f23e:	eb a5                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f240:	e8 8d fc ff ff       	call   c001eed2 <Vm::fpuGetPi()>
c001f245:	eb 9e                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f247:	e8 d6 fc ff ff       	call   c001ef22 <Vm::fpuGetLog102()>
c001f24c:	eb 97                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f24e:	e8 9f fc ff ff       	call   c001eef2 <Vm::fpuGetLogE2()>
c001f253:	eb 90                	jmp    c001f1e5 <Vm::x87Handler(regs*)+0x67>
c001f255:	8d 50 40             	lea    edx,[eax+0x40]
c001f258:	80 fa 07             	cmp    dl,0x7
c001f25b:	77 15                	ja     c001f272 <Vm::x87Handler(regs*)+0xf4>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	2d c0 00 00 00       	sub    eax,0xc0
c001f265:	50                   	push   eax
c001f266:	e8 d6 fd ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f26b:	59                   	pop    ecx
c001f26c:	5e                   	pop    esi
c001f26d:	e9 75 ff ff ff       	jmp    c001f1e7 <Vm::x87Handler(regs*)+0x69>
c001f272:	8d 50 38             	lea    edx,[eax+0x38]
c001f275:	80 fa 07             	cmp    dl,0x7
c001f278:	77 3c                	ja     c001f2b6 <Vm::x87Handler(regs*)+0x138>
c001f27a:	83 ec 0c             	sub    esp,0xc
c001f27d:	2d c8 00 00 00       	sub    eax,0xc8
c001f282:	50                   	push   eax
c001f283:	e8 b9 fd ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f288:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f28f:	89 c6                	mov    esi,eax
c001f291:	89 d7                	mov    edi,edx
c001f293:	e8 a9 fd ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f298:	83 c4 0c             	add    esp,0xc
c001f29b:	52                   	push   edx
c001f29c:	50                   	push   eax
c001f29d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2a1:	2d c8 00 00 00       	sub    eax,0xc8
c001f2a6:	50                   	push   eax
c001f2a7:	e8 d8 fd ff ff       	call   c001f084 <Vm::fpuSetReg(int, unsigned long long)>
c001f2ac:	83 c4 0c             	add    esp,0xc
c001f2af:	57                   	push   edi
c001f2b0:	56                   	push   esi
c001f2b1:	e9 73 ff ff ff       	jmp    c001f229 <Vm::x87Handler(regs*)+0xab>
c001f2b6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2ba:	84 d2                	test   dl,dl
c001f2bc:	75 0f                	jne    c001f2cd <Vm::x87Handler(regs*)+0x14f>
c001f2be:	83 ec 0c             	sub    esp,0xc
c001f2c1:	ff 36                	push   DWORD PTR [esi]
c001f2c3:	e8 c8 fa ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f2c8:	e9 bf 00 00 00       	jmp    c001f38c <Vm::x87Handler(regs*)+0x20e>
c001f2cd:	80 fa 03             	cmp    dl,0x3
c001f2d0:	75 13                	jne    c001f2e5 <Vm::x87Handler(regs*)+0x167>
c001f2d2:	e8 55 fe ff ff       	call   c001f12c <Vm::fpuPop()>
c001f2d7:	55                   	push   ebp
c001f2d8:	55                   	push   ebp
c001f2d9:	52                   	push   edx
c001f2da:	50                   	push   eax
c001f2db:	e8 4c fa ff ff       	call   c001ed2c <Vm::fpuInternalTo32(unsigned long long)>
c001f2e0:	e9 88 00 00 00       	jmp    c001f36d <Vm::x87Handler(regs*)+0x1ef>
c001f2e5:	80 fa 05             	cmp    dl,0x5
c001f2e8:	75 0e                	jne    c001f2f8 <Vm::x87Handler(regs*)+0x17a>
c001f2ea:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2ed:	66 a3 a2 00 03 c0    	mov    ds:0xc00300a2,ax
c001f2f3:	e9 df 00 00 00       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x259>
c001f2f8:	31 c0                	xor    eax,eax
c001f2fa:	80 fa 07             	cmp    dl,0x7
c001f2fd:	0f 85 dc 08 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f303:	66 a1 a2 00 03 c0    	mov    ax,ds:0xc00300a2
c001f309:	66 89 06             	mov    WORD PTR [esi],ax
c001f30c:	e9 c6 00 00 00       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x259>
c001f311:	80 fa d8             	cmp    dl,0xd8
c001f314:	0f 84 c9 00 00 00    	je     c001f3e3 <Vm::x87Handler(regs*)+0x265>
c001f31a:	80 fa dc             	cmp    dl,0xdc
c001f31d:	0f 84 0d 02 00 00    	je     c001f530 <Vm::x87Handler(regs*)+0x3b2>
c001f323:	80 fa de             	cmp    dl,0xde
c001f326:	0f 84 cd 02 00 00    	je     c001f5f9 <Vm::x87Handler(regs*)+0x47b>
c001f32c:	80 fa dd             	cmp    dl,0xdd
c001f32f:	0f 84 5f 04 00 00    	je     c001f794 <Vm::x87Handler(regs*)+0x616>
c001f335:	80 fa da             	cmp    dl,0xda
c001f338:	0f 84 24 05 00 00    	je     c001f862 <Vm::x87Handler(regs*)+0x6e4>
c001f33e:	80 fa df             	cmp    dl,0xdf
c001f341:	0f 84 68 05 00 00    	je     c001f8af <Vm::x87Handler(regs*)+0x731>
c001f347:	31 c0                	xor    eax,eax
c001f349:	80 fa db             	cmp    dl,0xdb
c001f34c:	0f 85 8d 08 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f352:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f356:	80 fa 03             	cmp    dl,0x3
c001f359:	0f 85 70 06 00 00    	jne    c001f9cf <Vm::x87Handler(regs*)+0x851>
c001f35f:	e8 c8 fd ff ff       	call   c001f12c <Vm::fpuPop()>
c001f364:	55                   	push   ebp
c001f365:	55                   	push   ebp
c001f366:	52                   	push   edx
c001f367:	50                   	push   eax
c001f368:	e8 71 fa ff ff       	call   c001edde <Vm::fpuFloatToLong(unsigned long long)>
c001f36d:	83 c4 10             	add    esp,0x10
c001f370:	89 06                	mov    DWORD PTR [esi],eax
c001f372:	eb 63                	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x259>
c001f374:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f378:	84 d2                	test   dl,dl
c001f37a:	0f 85 e6 05 00 00    	jne    c001f966 <Vm::x87Handler(regs*)+0x7e8>
c001f380:	57                   	push   edi
c001f381:	57                   	push   edi
c001f382:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f385:	ff 36                	push   DWORD PTR [esi]
c001f387:	e8 49 fa ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001f38c:	5e                   	pop    esi
c001f38d:	5f                   	pop    edi
c001f38e:	52                   	push   edx
c001f38f:	50                   	push   eax
c001f390:	e8 3a fd ff ff       	call   c001f0cf <Vm::fpuPush(unsigned long long)>
c001f395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f399:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f39c:	e9 51 fe ff ff       	jmp    c001f1f2 <Vm::x87Handler(regs*)+0x74>
c001f3a1:	80 fa 03             	cmp    dl,0x3
c001f3a4:	0f 85 d7 06 00 00    	jne    c001fa81 <Vm::x87Handler(regs*)+0x903>
c001f3aa:	57                   	push   edi
c001f3ab:	57                   	push   edi
c001f3ac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3af:	ff 36                	push   DWORD PTR [esi]
c001f3b1:	e8 1f fa ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001f3b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3bd:	89 c6                	mov    esi,eax
c001f3bf:	89 d7                	mov    edi,edx
c001f3c1:	e8 7b fc ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f3c6:	57                   	push   edi
c001f3c7:	56                   	push   esi
c001f3c8:	52                   	push   edx
c001f3c9:	50                   	push   eax
c001f3ca:	e8 95 fb ff ff       	call   c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3cf:	83 c4 20             	add    esp,0x20
c001f3d2:	e8 55 fd ff ff       	call   c001f12c <Vm::fpuPop()>
c001f3d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3db:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3de:	e9 12 fe ff ff       	jmp    c001f1f5 <Vm::x87Handler(regs*)+0x77>
c001f3e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3e7:	8d 50 40             	lea    edx,[eax+0x40]
c001f3ea:	80 fa 07             	cmp    dl,0x7
c001f3ed:	77 29                	ja     c001f418 <Vm::x87Handler(regs*)+0x29a>
c001f3ef:	83 ec 0c             	sub    esp,0xc
c001f3f2:	2d c0 00 00 00       	sub    eax,0xc0
c001f3f7:	50                   	push   eax
c001f3f8:	e8 44 fc ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f3fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f404:	89 c6                	mov    esi,eax
c001f406:	89 d7                	mov    edi,edx
c001f408:	e8 34 fc ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f40d:	57                   	push   edi
c001f40e:	56                   	push   esi
c001f40f:	52                   	push   edx
c001f410:	50                   	push   eax
c001f411:	e8 a1 fb ff ff       	call   c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f416:	eb 2f                	jmp    c001f447 <Vm::x87Handler(regs*)+0x2c9>
c001f418:	8d 50 38             	lea    edx,[eax+0x38]
c001f41b:	80 fa 07             	cmp    dl,0x7
c001f41e:	77 2f                	ja     c001f44f <Vm::x87Handler(regs*)+0x2d1>
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	2d c8 00 00 00       	sub    eax,0xc8
c001f428:	50                   	push   eax
c001f429:	e8 13 fc ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f42e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f435:	89 c6                	mov    esi,eax
c001f437:	89 d7                	mov    edi,edx
c001f439:	e8 03 fc ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f43e:	57                   	push   edi
c001f43f:	56                   	push   esi
c001f440:	52                   	push   edx
c001f441:	50                   	push   eax
c001f442:	e8 a9 fb ff ff       	call   c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f447:	83 c4 1c             	add    esp,0x1c
c001f44a:	e9 d8 fd ff ff       	jmp    c001f227 <Vm::x87Handler(regs*)+0xa9>
c001f44f:	8d 50 30             	lea    edx,[eax+0x30]
c001f452:	80 fa 07             	cmp    dl,0x7
c001f455:	77 0d                	ja     c001f464 <Vm::x87Handler(regs*)+0x2e6>
c001f457:	83 ec 0c             	sub    esp,0xc
c001f45a:	2d d0 00 00 00       	sub    eax,0xd0
c001f45f:	e9 99 03 00 00       	jmp    c001f7fd <Vm::x87Handler(regs*)+0x67f>
c001f464:	8d 50 28             	lea    edx,[eax+0x28]
c001f467:	80 fa 07             	cmp    dl,0x7
c001f46a:	77 0d                	ja     c001f479 <Vm::x87Handler(regs*)+0x2fb>
c001f46c:	83 ec 0c             	sub    esp,0xc
c001f46f:	2d d8 00 00 00       	sub    eax,0xd8
c001f474:	e9 c0 03 00 00       	jmp    c001f839 <Vm::x87Handler(regs*)+0x6bb>
c001f479:	8d 50 20             	lea    edx,[eax+0x20]
c001f47c:	80 fa 07             	cmp    dl,0x7
c001f47f:	77 1b                	ja     c001f49c <Vm::x87Handler(regs*)+0x31e>
c001f481:	83 ec 0c             	sub    esp,0xc
c001f484:	2d e0 00 00 00       	sub    eax,0xe0
c001f489:	50                   	push   eax
c001f48a:	e8 b2 fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f48f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f496:	89 c6                	mov    esi,eax
c001f498:	89 d7                	mov    edi,edx
c001f49a:	eb 22                	jmp    c001f4be <Vm::x87Handler(regs*)+0x340>
c001f49c:	8d 50 18             	lea    edx,[eax+0x18]
c001f49f:	80 fa 07             	cmp    dl,0x7
c001f4a2:	77 2d                	ja     c001f4d1 <Vm::x87Handler(regs*)+0x353>
c001f4a4:	83 ec 0c             	sub    esp,0xc
c001f4a7:	6a 00                	push   0x0
c001f4a9:	e8 93 fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f4ae:	89 c6                	mov    esi,eax
c001f4b0:	89 d7                	mov    edi,edx
c001f4b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b6:	2d e8 00 00 00       	sub    eax,0xe8
c001f4bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4be:	e8 7e fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f4c3:	57                   	push   edi
c001f4c4:	56                   	push   esi
c001f4c5:	52                   	push   edx
c001f4c6:	50                   	push   eax
c001f4c7:	e8 15 fb ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4cc:	e9 76 ff ff ff       	jmp    c001f447 <Vm::x87Handler(regs*)+0x2c9>
c001f4d1:	8d 50 10             	lea    edx,[eax+0x10]
c001f4d4:	80 fa 07             	cmp    dl,0x7
c001f4d7:	77 1b                	ja     c001f4f4 <Vm::x87Handler(regs*)+0x376>
c001f4d9:	83 ec 0c             	sub    esp,0xc
c001f4dc:	2d f0 00 00 00       	sub    eax,0xf0
c001f4e1:	50                   	push   eax
c001f4e2:	e8 5a fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f4e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ee:	89 c6                	mov    esi,eax
c001f4f0:	89 d7                	mov    edi,edx
c001f4f2:	eb 22                	jmp    c001f516 <Vm::x87Handler(regs*)+0x398>
c001f4f4:	3c f7                	cmp    al,0xf7
c001f4f6:	0f 86 d1 03 00 00    	jbe    c001f8cd <Vm::x87Handler(regs*)+0x74f>
c001f4fc:	83 ec 0c             	sub    esp,0xc
c001f4ff:	6a 00                	push   0x0
c001f501:	e8 3b fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f506:	89 c6                	mov    esi,eax
c001f508:	89 d7                	mov    edi,edx
c001f50a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f50e:	2d f8 00 00 00       	sub    eax,0xf8
c001f513:	89 04 24             	mov    DWORD PTR [esp],eax
c001f516:	e8 26 fb ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f51b:	57                   	push   edi
c001f51c:	56                   	push   esi
c001f51d:	52                   	push   edx
c001f51e:	50                   	push   eax
c001f51f:	e8 eb fa ff ff       	call   c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f524:	83 c4 1c             	add    esp,0x1c
c001f527:	52                   	push   edx
c001f528:	50                   	push   eax
c001f529:	6a 00                	push   0x0
c001f52b:	e9 51 02 00 00       	jmp    c001f781 <Vm::x87Handler(regs*)+0x603>
c001f530:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f534:	8d 50 40             	lea    edx,[eax+0x40]
c001f537:	80 fa 07             	cmp    dl,0x7
c001f53a:	77 37                	ja     c001f573 <Vm::x87Handler(regs*)+0x3f5>
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	2d c0 00 00 00       	sub    eax,0xc0
c001f544:	50                   	push   eax
c001f545:	e8 f7 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f54a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f551:	89 c6                	mov    esi,eax
c001f553:	89 d7                	mov    edi,edx
c001f555:	e8 e7 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f55a:	57                   	push   edi
c001f55b:	56                   	push   esi
c001f55c:	52                   	push   edx
c001f55d:	50                   	push   eax
c001f55e:	e8 54 fa ff ff       	call   c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f563:	83 c4 1c             	add    esp,0x1c
c001f566:	52                   	push   edx
c001f567:	50                   	push   eax
c001f568:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f56c:	2d c0 00 00 00       	sub    eax,0xc0
c001f571:	eb 3d                	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x432>
c001f573:	8d 50 38             	lea    edx,[eax+0x38]
c001f576:	80 fa 07             	cmp    dl,0x7
c001f579:	77 3b                	ja     c001f5b6 <Vm::x87Handler(regs*)+0x438>
c001f57b:	83 ec 0c             	sub    esp,0xc
c001f57e:	2d c8 00 00 00       	sub    eax,0xc8
c001f583:	50                   	push   eax
c001f584:	e8 b8 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f589:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f590:	89 c6                	mov    esi,eax
c001f592:	89 d7                	mov    edi,edx
c001f594:	e8 a8 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f599:	57                   	push   edi
c001f59a:	56                   	push   esi
c001f59b:	52                   	push   edx
c001f59c:	50                   	push   eax
c001f59d:	e8 4e fa ff ff       	call   c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5a2:	83 c4 1c             	add    esp,0x1c
c001f5a5:	52                   	push   edx
c001f5a6:	50                   	push   eax
c001f5a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ab:	2d c8 00 00 00       	sub    eax,0xc8
c001f5b0:	50                   	push   eax
c001f5b1:	e9 75 fc ff ff       	jmp    c001f22b <Vm::x87Handler(regs*)+0xad>
c001f5b6:	83 c0 18             	add    eax,0x18
c001f5b9:	3c 07                	cmp    al,0x7
c001f5bb:	0f 87 3b 04 00 00    	ja     c001f9fc <Vm::x87Handler(regs*)+0x87e>
c001f5c1:	83 ec 0c             	sub    esp,0xc
c001f5c4:	6a 00                	push   0x0
c001f5c6:	e8 76 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f5cb:	89 c6                	mov    esi,eax
c001f5cd:	89 d7                	mov    edi,edx
c001f5cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d3:	2d e8 00 00 00       	sub    eax,0xe8
c001f5d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5db:	e8 61 fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f5e0:	57                   	push   edi
c001f5e1:	56                   	push   esi
c001f5e2:	52                   	push   edx
c001f5e3:	50                   	push   eax
c001f5e4:	e8 f8 f9 ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5e9:	83 c4 1c             	add    esp,0x1c
c001f5ec:	52                   	push   edx
c001f5ed:	50                   	push   eax
c001f5ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5f2:	2d e8 00 00 00       	sub    eax,0xe8
c001f5f7:	eb b7                	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x432>
c001f5f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5fd:	8d 50 40             	lea    edx,[eax+0x40]
c001f600:	80 fa 07             	cmp    dl,0x7
c001f603:	77 3a                	ja     c001f63f <Vm::x87Handler(regs*)+0x4c1>
c001f605:	83 ec 0c             	sub    esp,0xc
c001f608:	2d c0 00 00 00       	sub    eax,0xc0
c001f60d:	50                   	push   eax
c001f60e:	e8 2e fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f613:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f61a:	89 c6                	mov    esi,eax
c001f61c:	89 d7                	mov    edi,edx
c001f61e:	e8 1e fa ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f623:	57                   	push   edi
c001f624:	56                   	push   esi
c001f625:	52                   	push   edx
c001f626:	50                   	push   eax
c001f627:	e8 8b f9 ff ff       	call   c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f62c:	83 c4 1c             	add    esp,0x1c
c001f62f:	52                   	push   edx
c001f630:	50                   	push   eax
c001f631:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f635:	2d c0 00 00 00       	sub    eax,0xc0
c001f63a:	e9 9e 01 00 00       	jmp    c001f7dd <Vm::x87Handler(regs*)+0x65f>
c001f63f:	8d 50 20             	lea    edx,[eax+0x20]
c001f642:	80 fa 07             	cmp    dl,0x7
c001f645:	77 3a                	ja     c001f681 <Vm::x87Handler(regs*)+0x503>
c001f647:	83 ec 0c             	sub    esp,0xc
c001f64a:	2d e0 00 00 00       	sub    eax,0xe0
c001f64f:	50                   	push   eax
c001f650:	e8 ec f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f655:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f65c:	89 c6                	mov    esi,eax
c001f65e:	89 d7                	mov    edi,edx
c001f660:	e8 dc f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f665:	57                   	push   edi
c001f666:	56                   	push   esi
c001f667:	52                   	push   edx
c001f668:	50                   	push   eax
c001f669:	e8 73 f9 ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f66e:	83 c4 1c             	add    esp,0x1c
c001f671:	52                   	push   edx
c001f672:	50                   	push   eax
c001f673:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f677:	2d e0 00 00 00       	sub    eax,0xe0
c001f67c:	e9 5c 01 00 00       	jmp    c001f7dd <Vm::x87Handler(regs*)+0x65f>
c001f681:	8d 50 18             	lea    edx,[eax+0x18]
c001f684:	80 fa 07             	cmp    dl,0x7
c001f687:	77 3b                	ja     c001f6c4 <Vm::x87Handler(regs*)+0x546>
c001f689:	83 ec 0c             	sub    esp,0xc
c001f68c:	6a 00                	push   0x0
c001f68e:	e8 ae f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f693:	89 c6                	mov    esi,eax
c001f695:	89 d7                	mov    edi,edx
c001f697:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f69b:	2d e8 00 00 00       	sub    eax,0xe8
c001f6a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6a3:	e8 99 f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f6a8:	57                   	push   edi
c001f6a9:	56                   	push   esi
c001f6aa:	52                   	push   edx
c001f6ab:	50                   	push   eax
c001f6ac:	e8 30 f9 ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6b1:	83 c4 1c             	add    esp,0x1c
c001f6b4:	52                   	push   edx
c001f6b5:	50                   	push   eax
c001f6b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ba:	2d e8 00 00 00       	sub    eax,0xe8
c001f6bf:	e9 19 01 00 00       	jmp    c001f7dd <Vm::x87Handler(regs*)+0x65f>
c001f6c4:	8d 50 38             	lea    edx,[eax+0x38]
c001f6c7:	80 fa 07             	cmp    dl,0x7
c001f6ca:	77 37                	ja     c001f703 <Vm::x87Handler(regs*)+0x585>
c001f6cc:	83 ec 0c             	sub    esp,0xc
c001f6cf:	2d c8 00 00 00       	sub    eax,0xc8
c001f6d4:	50                   	push   eax
c001f6d5:	e8 67 f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f6da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6e1:	89 c6                	mov    esi,eax
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	e8 57 f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f6ea:	57                   	push   edi
c001f6eb:	56                   	push   esi
c001f6ec:	52                   	push   edx
c001f6ed:	50                   	push   eax
c001f6ee:	e8 fd f8 ff ff       	call   c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6f3:	83 c4 1c             	add    esp,0x1c
c001f6f6:	52                   	push   edx
c001f6f7:	50                   	push   eax
c001f6f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6fc:	2d c8 00 00 00       	sub    eax,0xc8
c001f701:	eb 7d                	jmp    c001f780 <Vm::x87Handler(regs*)+0x602>
c001f703:	3c f7                	cmp    al,0xf7
c001f705:	76 38                	jbe    c001f73f <Vm::x87Handler(regs*)+0x5c1>
c001f707:	83 ec 0c             	sub    esp,0xc
c001f70a:	6a 00                	push   0x0
c001f70c:	e8 30 f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f711:	89 c6                	mov    esi,eax
c001f713:	89 d7                	mov    edi,edx
c001f715:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f719:	2d f8 00 00 00       	sub    eax,0xf8
c001f71e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f721:	e8 1b f9 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f726:	57                   	push   edi
c001f727:	56                   	push   esi
c001f728:	52                   	push   edx
c001f729:	50                   	push   eax
c001f72a:	e8 e0 f8 ff ff       	call   c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f72f:	83 c4 1c             	add    esp,0x1c
c001f732:	52                   	push   edx
c001f733:	50                   	push   eax
c001f734:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f738:	2d f8 00 00 00       	sub    eax,0xf8
c001f73d:	eb 41                	jmp    c001f780 <Vm::x87Handler(regs*)+0x602>
c001f73f:	8d 50 10             	lea    edx,[eax+0x10]
c001f742:	80 fa 07             	cmp    dl,0x7
c001f745:	0f 87 5a 01 00 00    	ja     c001f8a5 <Vm::x87Handler(regs*)+0x727>
c001f74b:	83 ec 0c             	sub    esp,0xc
c001f74e:	2d f0 00 00 00       	sub    eax,0xf0
c001f753:	50                   	push   eax
c001f754:	e8 e8 f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f759:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f760:	89 c6                	mov    esi,eax
c001f762:	89 d7                	mov    edi,edx
c001f764:	e8 d8 f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f769:	57                   	push   edi
c001f76a:	56                   	push   esi
c001f76b:	52                   	push   edx
c001f76c:	50                   	push   eax
c001f76d:	e8 9d f8 ff ff       	call   c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f772:	83 c4 1c             	add    esp,0x1c
c001f775:	52                   	push   edx
c001f776:	50                   	push   eax
c001f777:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f77b:	2d f0 00 00 00       	sub    eax,0xf0
c001f780:	50                   	push   eax
c001f781:	e8 fe f8 ff ff       	call   c001f084 <Vm::fpuSetReg(int, unsigned long long)>
c001f786:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f78a:	e8 9d f9 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f78f:	e9 5e fa ff ff       	jmp    c001f1f2 <Vm::x87Handler(regs*)+0x74>
c001f794:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f798:	8d 50 30             	lea    edx,[eax+0x30]
c001f79b:	80 fa 07             	cmp    dl,0x7
c001f79e:	77 1d                	ja     c001f7bd <Vm::x87Handler(regs*)+0x63f>
c001f7a0:	83 ec 0c             	sub    esp,0xc
c001f7a3:	6a 00                	push   0x0
c001f7a5:	e8 97 f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f7aa:	83 c4 0c             	add    esp,0xc
c001f7ad:	52                   	push   edx
c001f7ae:	50                   	push   eax
c001f7af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b3:	2d d0 00 00 00       	sub    eax,0xd0
c001f7b8:	e9 f3 fd ff ff       	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x432>
c001f7bd:	8d 50 28             	lea    edx,[eax+0x28]
c001f7c0:	80 fa 07             	cmp    dl,0x7
c001f7c3:	77 28                	ja     c001f7ed <Vm::x87Handler(regs*)+0x66f>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	6a 00                	push   0x0
c001f7ca:	e8 72 f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f7cf:	83 c4 0c             	add    esp,0xc
c001f7d2:	52                   	push   edx
c001f7d3:	50                   	push   eax
c001f7d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d8:	2d d8 00 00 00       	sub    eax,0xd8
c001f7dd:	50                   	push   eax
c001f7de:	e8 a1 f8 ff ff       	call   c001f084 <Vm::fpuSetReg(int, unsigned long long)>
c001f7e3:	e8 44 f9 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f7e8:	e9 01 fa ff ff       	jmp    c001f1ee <Vm::x87Handler(regs*)+0x70>
c001f7ed:	8d 50 20             	lea    edx,[eax+0x20]
c001f7f0:	80 fa 07             	cmp    dl,0x7
c001f7f3:	77 30                	ja     c001f825 <Vm::x87Handler(regs*)+0x6a7>
c001f7f5:	83 ec 0c             	sub    esp,0xc
c001f7f8:	2d e0 00 00 00       	sub    eax,0xe0
c001f7fd:	50                   	push   eax
c001f7fe:	e8 3e f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f803:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f80a:	89 c6                	mov    esi,eax
c001f80c:	89 d7                	mov    edi,edx
c001f80e:	e8 2e f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f813:	57                   	push   edi
c001f814:	56                   	push   esi
c001f815:	52                   	push   edx
c001f816:	50                   	push   eax
c001f817:	e8 48 f7 ff ff       	call   c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f81c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f820:	e9 54 02 00 00       	jmp    c001fa79 <Vm::x87Handler(regs*)+0x8fb>
c001f825:	8d 50 18             	lea    edx,[eax+0x18]
c001f828:	80 fa 07             	cmp    dl,0x7
c001f82b:	0f 87 43 fb ff ff    	ja     c001f374 <Vm::x87Handler(regs*)+0x1f6>
c001f831:	83 ec 0c             	sub    esp,0xc
c001f834:	2d e8 00 00 00       	sub    eax,0xe8
c001f839:	50                   	push   eax
c001f83a:	e8 02 f8 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f83f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f846:	89 c6                	mov    esi,eax
c001f848:	89 d7                	mov    edi,edx
c001f84a:	e8 f2 f7 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f84f:	57                   	push   edi
c001f850:	56                   	push   esi
c001f851:	52                   	push   edx
c001f852:	50                   	push   eax
c001f853:	e8 0c f7 ff ff       	call   c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f858:	83 c4 20             	add    esp,0x20
c001f85b:	e8 cc f8 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f860:	eb 62                	jmp    c001f8c4 <Vm::x87Handler(regs*)+0x746>
c001f862:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f866:	0f 85 0f 01 00 00    	jne    c001f97b <Vm::x87Handler(regs*)+0x7fd>
c001f86c:	83 ec 0c             	sub    esp,0xc
c001f86f:	6a 01                	push   0x1
c001f871:	e8 cb f7 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f876:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f87d:	89 c6                	mov    esi,eax
c001f87f:	89 d7                	mov    edi,edx
c001f881:	e8 bb f7 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f886:	57                   	push   edi
c001f887:	56                   	push   esi
c001f888:	52                   	push   edx
c001f889:	50                   	push   eax
c001f88a:	e8 d5 f6 ff ff       	call   c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f88f:	83 c4 20             	add    esp,0x20
c001f892:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f896:	e8 91 f8 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f89b:	e8 8c f8 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f8a0:	e9 50 f9 ff ff       	jmp    c001f1f5 <Vm::x87Handler(regs*)+0x77>
c001f8a5:	3c d9                	cmp    al,0xd9
c001f8a7:	0f 85 b5 02 00 00    	jne    c001fb62 <Vm::x87Handler(regs*)+0x9e4>
c001f8ad:	eb bd                	jmp    c001f86c <Vm::x87Handler(regs*)+0x6ee>
c001f8af:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f8b3:	0f 85 ea 02 00 00    	jne    c001fba3 <Vm::x87Handler(regs*)+0xa25>
c001f8b9:	0f b7 05 a0 00 03 c0 	movzx  eax,WORD PTR ds:0xc00300a0
c001f8c0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f8c4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8c8:	e9 28 f9 ff ff       	jmp    c001f1f5 <Vm::x87Handler(regs*)+0x77>
c001f8cd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8d1:	84 d2                	test   dl,dl
c001f8d3:	75 0f                	jne    c001f8e4 <Vm::x87Handler(regs*)+0x766>
c001f8d5:	83 ec 0c             	sub    esp,0xc
c001f8d8:	ff 36                	push   DWORD PTR [esi]
c001f8da:	e8 b1 f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f8df:	e9 2c 01 00 00       	jmp    c001fa10 <Vm::x87Handler(regs*)+0x892>
c001f8e4:	80 fa 01             	cmp    dl,0x1
c001f8e7:	75 0f                	jne    c001f8f8 <Vm::x87Handler(regs*)+0x77a>
c001f8e9:	83 ec 0c             	sub    esp,0xc
c001f8ec:	ff 36                	push   DWORD PTR [esi]
c001f8ee:	e8 9d f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f8f3:	e9 81 02 00 00       	jmp    c001fb79 <Vm::x87Handler(regs*)+0x9fb>
c001f8f8:	80 fa 04             	cmp    dl,0x4
c001f8fb:	75 0f                	jne    c001f90c <Vm::x87Handler(regs*)+0x78e>
c001f8fd:	83 ec 0c             	sub    esp,0xc
c001f900:	ff 36                	push   DWORD PTR [esi]
c001f902:	e8 89 f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f907:	e9 86 01 00 00       	jmp    c001fa92 <Vm::x87Handler(regs*)+0x914>
c001f90c:	80 fa 05             	cmp    dl,0x5
c001f90f:	75 1b                	jne    c001f92c <Vm::x87Handler(regs*)+0x7ae>
c001f911:	83 ec 0c             	sub    esp,0xc
c001f914:	6a 00                	push   0x0
c001f916:	e8 26 f7 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f91b:	89 c7                	mov    edi,eax
c001f91d:	89 d5                	mov    ebp,edx
c001f91f:	58                   	pop    eax
c001f920:	ff 36                	push   DWORD PTR [esi]
c001f922:	e8 69 f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f927:	e9 a3 01 00 00       	jmp    c001facf <Vm::x87Handler(regs*)+0x951>
c001f92c:	80 fa 06             	cmp    dl,0x6
c001f92f:	75 0f                	jne    c001f940 <Vm::x87Handler(regs*)+0x7c2>
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	ff 36                	push   DWORD PTR [esi]
c001f936:	e8 55 f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f93b:	e9 ae 01 00 00       	jmp    c001faee <Vm::x87Handler(regs*)+0x970>
c001f940:	31 c0                	xor    eax,eax
c001f942:	80 fa 07             	cmp    dl,0x7
c001f945:	0f 85 94 02 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f94b:	83 ec 0c             	sub    esp,0xc
c001f94e:	6a 00                	push   0x0
c001f950:	e8 ec f6 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f955:	89 c7                	mov    edi,eax
c001f957:	89 d5                	mov    ebp,edx
c001f959:	58                   	pop    eax
c001f95a:	ff 36                	push   DWORD PTR [esi]
c001f95c:	e8 2f f4 ff ff       	call   c001ed90 <Vm::fpu32ToInternal(unsigned int)>
c001f961:	e9 cb 01 00 00       	jmp    c001fb31 <Vm::x87Handler(regs*)+0x9b3>
c001f966:	80 fa 03             	cmp    dl,0x3
c001f969:	0f 85 d3 01 00 00    	jne    c001fb42 <Vm::x87Handler(regs*)+0x9c4>
c001f96f:	e8 b8 f7 ff ff       	call   c001f12c <Vm::fpuPop()>
c001f974:	51                   	push   ecx
c001f975:	51                   	push   ecx
c001f976:	e9 de 01 00 00       	jmp    c001fb59 <Vm::x87Handler(regs*)+0x9db>
c001f97b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f97f:	80 fa 01             	cmp    dl,0x1
c001f982:	75 09                	jne    c001f98d <Vm::x87Handler(regs*)+0x80f>
c001f984:	57                   	push   edi
c001f985:	57                   	push   edi
c001f986:	8b 06                	mov    eax,DWORD PTR [esi]
c001f988:	e9 e3 01 00 00       	jmp    c001fb70 <Vm::x87Handler(regs*)+0x9f2>
c001f98d:	80 fa 04             	cmp    dl,0x4
c001f990:	75 12                	jne    c001f9a4 <Vm::x87Handler(regs*)+0x826>
c001f992:	31 d2                	xor    edx,edx
c001f994:	51                   	push   ecx
c001f995:	51                   	push   ecx
c001f996:	8b 06                	mov    eax,DWORD PTR [esi]
c001f998:	52                   	push   edx
c001f999:	50                   	push   eax
c001f99a:	e8 d0 f4 ff ff       	call   c001ee6f <Vm::fpuLongToFloat(long long)>
c001f99f:	e9 ee 00 00 00       	jmp    c001fa92 <Vm::x87Handler(regs*)+0x914>
c001f9a4:	31 c0                	xor    eax,eax
c001f9a6:	80 fa 07             	cmp    dl,0x7
c001f9a9:	0f 85 30 02 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f9af:	83 ec 0c             	sub    esp,0xc
c001f9b2:	6a 00                	push   0x0
c001f9b4:	e8 88 f6 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f9b9:	89 c7                	mov    edi,eax
c001f9bb:	89 d5                	mov    ebp,edx
c001f9bd:	58                   	pop    eax
c001f9be:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9c0:	5a                   	pop    edx
c001f9c1:	31 d2                	xor    edx,edx
c001f9c3:	52                   	push   edx
c001f9c4:	50                   	push   eax
c001f9c5:	e8 a5 f4 ff ff       	call   c001ee6f <Vm::fpuLongToFloat(long long)>
c001f9ca:	e9 62 01 00 00       	jmp    c001fb31 <Vm::x87Handler(regs*)+0x9b3>
c001f9cf:	84 d2                	test   dl,dl
c001f9d1:	75 0d                	jne    c001f9e0 <Vm::x87Handler(regs*)+0x862>
c001f9d3:	31 d2                	xor    edx,edx
c001f9d5:	55                   	push   ebp
c001f9d6:	55                   	push   ebp
c001f9d7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9d9:	52                   	push   edx
c001f9da:	50                   	push   eax
c001f9db:	e9 d3 01 00 00       	jmp    c001fbb3 <Vm::x87Handler(regs*)+0xa35>
c001f9e0:	31 c0                	xor    eax,eax
c001f9e2:	80 fa 02             	cmp    dl,0x2
c001f9e5:	0f 85 f4 01 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	6a 00                	push   0x0
c001f9f0:	e8 4c f6 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001f9f5:	59                   	pop    ecx
c001f9f6:	5f                   	pop    edi
c001f9f7:	e9 6a f9 ff ff       	jmp    c001f366 <Vm::x87Handler(regs*)+0x1e8>
c001f9fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa00:	84 d2                	test   dl,dl
c001fa02:	75 2a                	jne    c001fa2e <Vm::x87Handler(regs*)+0x8b0>
c001fa04:	50                   	push   eax
c001fa05:	50                   	push   eax
c001fa06:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa09:	ff 36                	push   DWORD PTR [esi]
c001fa0b:	e8 c5 f3 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa17:	89 c6                	mov    esi,eax
c001fa19:	89 d7                	mov    edi,edx
c001fa1b:	e8 21 f6 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fa20:	57                   	push   edi
c001fa21:	56                   	push   esi
c001fa22:	52                   	push   edx
c001fa23:	50                   	push   eax
c001fa24:	e8 8e f5 ff ff       	call   c001efb7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa29:	e9 64 01 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0xa14>
c001fa2e:	80 fa 01             	cmp    dl,0x1
c001fa31:	75 11                	jne    c001fa44 <Vm::x87Handler(regs*)+0x8c6>
c001fa33:	50                   	push   eax
c001fa34:	50                   	push   eax
c001fa35:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa38:	ff 36                	push   DWORD PTR [esi]
c001fa3a:	e8 96 f3 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa3f:	e9 35 01 00 00       	jmp    c001fb79 <Vm::x87Handler(regs*)+0x9fb>
c001fa44:	80 fa 02             	cmp    dl,0x2
c001fa47:	0f 85 54 f9 ff ff    	jne    c001f3a1 <Vm::x87Handler(regs*)+0x223>
c001fa4d:	55                   	push   ebp
c001fa4e:	55                   	push   ebp
c001fa4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa52:	ff 36                	push   DWORD PTR [esi]
c001fa54:	e8 7c f3 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa60:	89 c6                	mov    esi,eax
c001fa62:	89 d7                	mov    edi,edx
c001fa64:	e8 d8 f5 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fa69:	57                   	push   edi
c001fa6a:	56                   	push   esi
c001fa6b:	52                   	push   edx
c001fa6c:	50                   	push   eax
c001fa6d:	e8 f2 f4 ff ff       	call   c001ef64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fa76:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fa79:	83 c4 20             	add    esp,0x20
c001fa7c:	e9 74 f7 ff ff       	jmp    c001f1f5 <Vm::x87Handler(regs*)+0x77>
c001fa81:	80 fa 04             	cmp    dl,0x4
c001fa84:	75 2a                	jne    c001fab0 <Vm::x87Handler(regs*)+0x932>
c001fa86:	51                   	push   ecx
c001fa87:	51                   	push   ecx
c001fa88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa8b:	ff 36                	push   DWORD PTR [esi]
c001fa8d:	e8 43 f3 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa99:	89 c6                	mov    esi,eax
c001fa9b:	89 d7                	mov    edi,edx
c001fa9d:	e8 9f f5 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001faa2:	57                   	push   edi
c001faa3:	56                   	push   esi
c001faa4:	52                   	push   edx
c001faa5:	50                   	push   eax
c001faa6:	e8 36 f5 ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001faab:	e9 e2 00 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0xa14>
c001fab0:	80 fa 05             	cmp    dl,0x5
c001fab3:	75 28                	jne    c001fadd <Vm::x87Handler(regs*)+0x95f>
c001fab5:	83 ec 0c             	sub    esp,0xc
c001fab8:	6a 00                	push   0x0
c001faba:	e8 82 f5 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fabf:	89 c7                	mov    edi,eax
c001fac1:	89 d5                	mov    ebp,edx
c001fac3:	58                   	pop    eax
c001fac4:	5a                   	pop    edx
c001fac5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fac8:	ff 36                	push   DWORD PTR [esi]
c001faca:	e8 06 f3 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	55                   	push   ebp
c001fad3:	57                   	push   edi
c001fad4:	52                   	push   edx
c001fad5:	50                   	push   eax
c001fad6:	e8 06 f5 ff ff       	call   c001efe1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fadb:	eb 60                	jmp    c001fb3d <Vm::x87Handler(regs*)+0x9bf>
c001fadd:	80 fa 06             	cmp    dl,0x6
c001fae0:	75 2a                	jne    c001fb0c <Vm::x87Handler(regs*)+0x98e>
c001fae2:	51                   	push   ecx
c001fae3:	51                   	push   ecx
c001fae4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fae7:	ff 36                	push   DWORD PTR [esi]
c001fae9:	e8 e7 f2 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001faee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faf5:	89 c6                	mov    esi,eax
c001faf7:	89 d7                	mov    edi,edx
c001faf9:	e8 43 f5 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fafe:	57                   	push   edi
c001faff:	56                   	push   esi
c001fb00:	52                   	push   edx
c001fb01:	50                   	push   eax
c001fb02:	e8 08 f5 ff ff       	call   c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb07:	e9 86 00 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0xa14>
c001fb0c:	31 c0                	xor    eax,eax
c001fb0e:	80 fa 07             	cmp    dl,0x7
c001fb11:	0f 85 c8 00 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001fb17:	83 ec 0c             	sub    esp,0xc
c001fb1a:	6a 00                	push   0x0
c001fb1c:	e8 20 f5 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fb21:	89 c7                	mov    edi,eax
c001fb23:	89 d5                	mov    ebp,edx
c001fb25:	58                   	pop    eax
c001fb26:	5a                   	pop    edx
c001fb27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb2a:	ff 36                	push   DWORD PTR [esi]
c001fb2c:	e8 a4 f2 ff ff       	call   c001edd5 <Vm::fpu64ToInternal(unsigned long long)>
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	55                   	push   ebp
c001fb35:	57                   	push   edi
c001fb36:	52                   	push   edx
c001fb37:	50                   	push   eax
c001fb38:	e8 d2 f4 ff ff       	call   c001f00f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb3d:	83 c4 0c             	add    esp,0xc
c001fb40:	eb 53                	jmp    c001fb95 <Vm::x87Handler(regs*)+0xa17>
c001fb42:	31 c0                	xor    eax,eax
c001fb44:	80 fa 02             	cmp    dl,0x2
c001fb47:	0f 85 92 00 00 00    	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	6a 00                	push   0x0
c001fb52:	e8 ea f4 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fb57:	59                   	pop    ecx
c001fb58:	5f                   	pop    edi
c001fb59:	52                   	push   edx
c001fb5a:	50                   	push   eax
c001fb5b:	e8 27 f2 ff ff       	call   c001ed87 <Vm::fpuInternalTo64(unsigned long long)>
c001fb60:	eb 70                	jmp    c001fbd2 <Vm::x87Handler(regs*)+0xa54>
c001fb62:	31 c0                	xor    eax,eax
c001fb64:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb69:	75 74                	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001fb6b:	50                   	push   eax
c001fb6c:	50                   	push   eax
c001fb6d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb70:	31 d2                	xor    edx,edx
c001fb72:	52                   	push   edx
c001fb73:	50                   	push   eax
c001fb74:	e8 f6 f2 ff ff       	call   c001ee6f <Vm::fpuLongToFloat(long long)>
c001fb79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb80:	89 c6                	mov    esi,eax
c001fb82:	89 d7                	mov    edi,edx
c001fb84:	e8 b8 f4 ff ff       	call   c001f041 <Vm::fpuGetReg(int)>
c001fb89:	57                   	push   edi
c001fb8a:	56                   	push   esi
c001fb8b:	52                   	push   edx
c001fb8c:	50                   	push   eax
c001fb8d:	e8 5e f4 ff ff       	call   c001eff0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb92:	83 c4 1c             	add    esp,0x1c
c001fb95:	52                   	push   edx
c001fb96:	50                   	push   eax
c001fb97:	6a 00                	push   0x0
c001fb99:	e8 e6 f4 ff ff       	call   c001f084 <Vm::fpuSetReg(int, unsigned long long)>
c001fb9e:	e9 f2 f7 ff ff       	jmp    c001f395 <Vm::x87Handler(regs*)+0x217>
c001fba3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba7:	80 fa 05             	cmp    dl,0x5
c001fbaa:	75 11                	jne    c001fbbd <Vm::x87Handler(regs*)+0xa3f>
c001fbac:	55                   	push   ebp
c001fbad:	55                   	push   ebp
c001fbae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbb1:	ff 36                	push   DWORD PTR [esi]
c001fbb3:	e8 81 f2 ff ff       	call   c001ee39 <Vm::fpuULongToFloat(unsigned long long)>
c001fbb8:	e9 cf f7 ff ff       	jmp    c001f38c <Vm::x87Handler(regs*)+0x20e>
c001fbbd:	31 c0                	xor    eax,eax
c001fbbf:	80 fa 07             	cmp    dl,0x7
c001fbc2:	75 1b                	jne    c001fbdf <Vm::x87Handler(regs*)+0xa61>
c001fbc4:	e8 63 f5 ff ff       	call   c001f12c <Vm::fpuPop()>
c001fbc9:	51                   	push   ecx
c001fbca:	51                   	push   ecx
c001fbcb:	52                   	push   edx
c001fbcc:	50                   	push   eax
c001fbcd:	e8 0c f2 ff ff       	call   c001edde <Vm::fpuFloatToLong(unsigned long long)>
c001fbd2:	83 c4 10             	add    esp,0x10
c001fbd5:	89 06                	mov    DWORD PTR [esi],eax
c001fbd7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fbda:	e9 f8 f7 ff ff       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x259>
c001fbdf:	83 c4 1c             	add    esp,0x1c
c001fbe2:	5b                   	pop    ebx
c001fbe3:	5e                   	pop    esi
c001fbe4:	5f                   	pop    edi
c001fbe5:	5d                   	pop    ebp
c001fbe6:	c3                   	ret    

c001fbe7 <__static_initialization_and_destruction_0(int, int)>:
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fbef:	75 1a                	jne    c001fc0b <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbf1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fbf9:	75 10                	jne    c001fc0b <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbfb:	83 ec 0c             	sub    esp,0xc
c001fbfe:	68 a0 00 03 c0       	push   0xc00300a0
c001fc03:	e8 98 88 00 00       	call   c00284a0 <Vm::_FPUState::_FPUState()>
c001fc08:	83 c4 10             	add    esp,0x10
c001fc0b:	90                   	nop
c001fc0c:	83 c4 0c             	add    esp,0xc
c001fc0f:	c3                   	ret    

c001fc10 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	83 ec 08             	sub    esp,0x8
c001fc16:	68 ff ff 00 00       	push   0xffff
c001fc1b:	6a 01                	push   0x1
c001fc1d:	e8 c5 ff ff ff       	call   c001fbe7 <__static_initialization_and_destruction_0(int, int)>
c001fc22:	83 c4 10             	add    esp,0x10
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	c3                   	ret    
c001fc29:	90                   	nop

c001fc2a <FAT::getName()>:
c001fc2a:	b8 50 be 02 c0       	mov    eax,0xc002be50
c001fc2f:	c3                   	ret    

c001fc30 <FAT::tell(void*, unsigned long long*)>:
c001fc30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc35:	75 06                	jne    c001fc3d <FAT::tell(void*, unsigned long long*)+0xd>
c001fc37:	b8 04 00 00 00       	mov    eax,0x4
c001fc3c:	c3                   	ret    
c001fc3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc42:	75 06                	jne    c001fc4a <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc44:	b8 04 00 00 00       	mov    eax,0x4
c001fc49:	c3                   	ret    
c001fc4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc4e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc51:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc58:	89 01                	mov    DWORD PTR [ecx],eax
c001fc5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc5d:	b8 00 00 00 00       	mov    eax,0x0
c001fc62:	c3                   	ret    
c001fc63:	90                   	nop

c001fc64 <FAT::stat(void*, unsigned long long*)>:
c001fc64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc69:	75 06                	jne    c001fc71 <FAT::stat(void*, unsigned long long*)+0xd>
c001fc6b:	b8 04 00 00 00       	mov    eax,0x4
c001fc70:	c3                   	ret    
c001fc71:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc76:	75 06                	jne    c001fc7e <FAT::stat(void*, unsigned long long*)+0x1a>
c001fc78:	b8 04 00 00 00       	mov    eax,0x4
c001fc7d:	c3                   	ret    
c001fc7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc82:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fc85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc8c:	89 01                	mov    DWORD PTR [ecx],eax
c001fc8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc91:	b8 00 00 00 00       	mov    eax,0x0
c001fc96:	c3                   	ret    
c001fc97:	90                   	nop

c001fc98 <FAT::~FAT()>:
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	ba d4 be 02 c0       	mov    edx,0xc002bed4
c001fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca4:	89 10                	mov    DWORD PTR [eax],edx
c001fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	50                   	push   eax
c001fcae:	e8 69 2f ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c001fcb3:	83 c4 10             	add    esp,0x10
c001fcb6:	90                   	nop
c001fcb7:	83 c4 0c             	add    esp,0xc
c001fcba:	c3                   	ret    
c001fcbb:	90                   	nop

c001fcbc <FAT::~FAT()>:
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	83 ec 0c             	sub    esp,0xc
c001fcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc6:	e8 cd ff ff ff       	call   c001fc98 <FAT::~FAT()>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	83 ec 08             	sub    esp,0x8
c001fcd1:	6a 08                	push   0x8
c001fcd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd7:	e8 37 2b ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001fcdc:	83 c4 10             	add    esp,0x10
c001fcdf:	83 c4 0c             	add    esp,0xc
c001fce2:	c3                   	ret    
c001fce3:	90                   	nop

c001fce4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fce4:	83 ec 1c             	sub    esp,0x1c
c001fce7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fcee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fcf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcf7:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001fcfe:	83 f8 ff             	cmp    eax,0xffffffff
c001fd01:	75 34                	jne    c001fd37 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd07:	88 c2                	mov    dl,al
c001fd09:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001fd0e:	01 d0                	add    eax,edx
c001fd10:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd14:	8b 15 00 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030100
c001fd1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd1e:	89 14 85 20 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfee0],edx
c001fd25:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001fd2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd2e:	89 14 85 a0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe60],edx
c001fd35:	eb 17                	jmp    c001fd4e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd3b:	88 c2                	mov    dl,al
c001fd3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd41:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001fd48:	01 d0                	add    eax,edx
c001fd4a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd4e:	83 ec 04             	sub    esp,0x4
c001fd51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd59:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd5d:	50                   	push   eax
c001fd5e:	e8 be 6d fe ff       	call   c0006b21 <f_getlabel>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd6a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd6f:	75 07                	jne    c001fd78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd71:	b8 00 00 00 00       	mov    eax,0x0
c001fd76:	eb 05                	jmp    c001fd7d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fd78:	b8 01 00 00 00       	mov    eax,0x1
c001fd7d:	83 c4 1c             	add    esp,0x1c
c001fd80:	c3                   	ret    
c001fd81:	90                   	nop

c001fd82 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fd82:	57                   	push   edi
c001fd83:	83 ec 58             	sub    esp,0x58
c001fd86:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fd8e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fd92:	b9 0f 00 00 00       	mov    ecx,0xf
c001fd97:	b8 00 00 00 00       	mov    eax,0x0
c001fd9c:	fc                   	cld    
c001fd9d:	89 d7                	mov    edi,edx
c001fd9f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fda1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fda5:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001fdac:	83 f8 ff             	cmp    eax,0xffffffff
c001fdaf:	75 34                	jne    c001fde5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fdb1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdb5:	88 c2                	mov    dl,al
c001fdb7:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001fdbc:	01 d0                	add    eax,edx
c001fdbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdc2:	8b 15 00 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030100
c001fdc8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdcc:	89 14 85 20 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfee0],edx
c001fdd3:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001fdd8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fddc:	89 14 85 a0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe60],edx
c001fde3:	eb 17                	jmp    c001fdfc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fde5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fde9:	88 c2                	mov    dl,al
c001fdeb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdef:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001fdf6:	01 d0                	add    eax,edx
c001fdf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdfc:	83 ec 08             	sub    esp,0x8
c001fdff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe07:	50                   	push   eax
c001fe08:	e8 0d 0a fe ff       	call   c000081a <strcat>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe17:	50                   	push   eax
c001fe18:	e8 f2 6e fe ff       	call   c0006d0f <f_setlabel>
c001fe1d:	83 c4 10             	add    esp,0x10
c001fe20:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fe24:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fe29:	75 07                	jne    c001fe32 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe2b:	b8 00 00 00 00       	mov    eax,0x0
c001fe30:	eb 05                	jmp    c001fe37 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe32:	b8 01 00 00 00       	mov    eax,0x1
c001fe37:	83 c4 58             	add    esp,0x58
c001fe3a:	5f                   	pop    edi
c001fe3b:	c3                   	ret    

c001fe3c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe3c:	83 ec 2c             	sub    esp,0x2c
c001fe3f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe47:	83 ec 08             	sub    esp,0x8
c001fe4a:	68 74 be 02 c0       	push   0xc002be74
c001fe4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe53:	e8 5c 09 fe ff       	call   c00007b4 <strcmp>
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	85 c0                	test   eax,eax
c001fe5d:	0f 94 c0             	sete   al
c001fe60:	84 c0                	test   al,al
c001fe62:	74 0d                	je     c001fe71 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe64:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe6c:	e9 a6 00 00 00       	jmp    c001ff17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe71:	83 ec 08             	sub    esp,0x8
c001fe74:	68 66 be 02 c0       	push   0xc002be66
c001fe79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe7d:	e8 32 09 fe ff       	call   c00007b4 <strcmp>
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	85 c0                	test   eax,eax
c001fe87:	0f 94 c0             	sete   al
c001fe8a:	84 c0                	test   al,al
c001fe8c:	74 0a                	je     c001fe98 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fe8e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe96:	eb 7f                	jmp    c001ff17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe98:	83 ec 08             	sub    esp,0x8
c001fe9b:	68 6c be 02 c0       	push   0xc002be6c
c001fea0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fea4:	e8 0b 09 fe ff       	call   c00007b4 <strcmp>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	85 c0                	test   eax,eax
c001feae:	0f 94 c0             	sete   al
c001feb1:	84 c0                	test   al,al
c001feb3:	74 0a                	je     c001febf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001feb5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001febd:	eb 58                	jmp    c001ff17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001febf:	83 ec 08             	sub    esp,0x8
c001fec2:	68 0c 8c 02 c0       	push   0xc0028c0c
c001fec7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fecb:	e8 e4 08 fe ff       	call   c00007b4 <strcmp>
c001fed0:	83 c4 10             	add    esp,0x10
c001fed3:	85 c0                	test   eax,eax
c001fed5:	0f 94 c0             	sete   al
c001fed8:	84 c0                	test   al,al
c001feda:	74 0a                	je     c001fee6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fedc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fee4:	eb 31                	jmp    c001ff17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fee6:	83 ec 08             	sub    esp,0x8
c001fee9:	68 72 be 02 c0       	push   0xc002be72
c001feee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fef2:	e8 bd 08 fe ff       	call   c00007b4 <strcmp>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	85 c0                	test   eax,eax
c001fefc:	0f 94 c0             	sete   al
c001feff:	84 c0                	test   al,al
c001ff01:	74 0a                	je     c001ff0d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff03:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ff0b:	eb 0a                	jmp    c001ff17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff0d:	b8 08 00 00 00       	mov    eax,0x8
c001ff12:	e9 04 01 00 00       	jmp    c002001b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ff17:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ff1e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ff23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff27:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001ff2e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff31:	75 34                	jne    c001ff67 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff37:	88 c2                	mov    dl,al
c001ff39:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001ff3e:	01 d0                	add    eax,edx
c001ff40:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff44:	8b 15 00 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030100
c001ff4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff4e:	89 14 85 20 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfee0],edx
c001ff55:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001ff5a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff5e:	89 14 85 a0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe60],edx
c001ff65:	eb 17                	jmp    c001ff7e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff67:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff6b:	88 c2                	mov    dl,al
c001ff6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff71:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c001ff78:	01 d0                	add    eax,edx
c001ff7a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff82:	88 04 24             	mov    BYTE PTR [esp],al
c001ff85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ff89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ff95:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ff9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ffa2:	83 ec 0c             	sub    esp,0xc
c001ffa5:	68 00 20 00 00       	push   0x2000
c001ffaa:	e8 75 f6 fe ff       	call   c000f624 <malloc>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffb6:	68 00 20 00 00       	push   0x2000
c001ffbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffc3:	50                   	push   eax
c001ffc4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ffc8:	50                   	push   eax
c001ffc9:	e8 8c 71 fe ff       	call   c000715a <f_mkfs>
c001ffce:	83 c4 10             	add    esp,0x10
c001ffd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffda:	75 07                	jne    c001ffe3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ffdc:	b8 00 00 00 00       	mov    eax,0x0
c001ffe1:	eb 38                	jmp    c002001b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffe3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ffe8:	75 17                	jne    c0020001 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001ffea:	83 ec 0c             	sub    esp,0xc
c001ffed:	68 a4 be 02 c0       	push   0xc002bea4
c001fff2:	e8 fc 28 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	b8 09 00 00 00       	mov    eax,0x9
c001ffff:	eb 1a                	jmp    c002001b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020005:	83 ec 08             	sub    esp,0x8
c0020008:	50                   	push   eax
c0020009:	68 78 be 02 c0       	push   0xc002be78
c002000e:	e8 e0 28 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	b8 01 00 00 00       	mov    eax,0x1
c002001b:	83 c4 2c             	add    esp,0x2c
c002001e:	c3                   	ret    
c002001f:	90                   	nop

c0020020 <FAT::tryMount(LogicalDisk*, int)>:
c0020020:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020026:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c002002b:	83 f8 14             	cmp    eax,0x14
c002002e:	75 17                	jne    c0020047 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	68 8a be 02 c0       	push   0xc002be8a
c0020038:	e8 5c 9e ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002003d:	83 c4 10             	add    esp,0x10
c0020040:	b0 00                	mov    al,0x0
c0020042:	e9 d7 01 00 00       	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020047:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002004e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020054:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002005a:	3d 00 02 00 00       	cmp    eax,0x200
c002005f:	74 07                	je     c0020068 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020061:	b0 00                	mov    al,0x0
c0020063:	e9 b6 01 00 00       	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020068:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020070:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020077:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c002007e:	83 f8 ff             	cmp    eax,0xffffffff
c0020081:	74 07                	je     c002008a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020083:	b0 01                	mov    al,0x1
c0020085:	e9 94 01 00 00       	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002008a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020094:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002009c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00200a3:	88 c2                	mov    dl,al
c00200a5:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c00200aa:	01 d0                	add    eax,edx
c00200ac:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00200b3:	8b 15 00 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030100
c00200b9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200c0:	89 14 85 20 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfee0],edx
c00200c7:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c00200cc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200d3:	89 14 85 a0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe60],edx
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	68 54 02 00 00       	push   0x254
c00200e2:	e8 3d f5 fe ff       	call   c000f624 <malloc>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200f1:	83 ec 04             	sub    esp,0x4
c00200f4:	6a 00                	push   0x0
c00200f6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00200fd:	50                   	push   eax
c00200fe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020105:	e8 0e 4c fe ff       	call   c0004d18 <f_mount>
c002010a:	83 c4 10             	add    esp,0x10
c002010d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020114:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002011c:	74 19                	je     c0020137 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002011e:	83 ec 0c             	sub    esp,0xc
c0020121:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020128:	e8 17 f5 fe ff       	call   c000f644 <rfree>
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	b0 00                	mov    al,0x0
c0020132:	e9 e7 00 00 00       	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020137:	83 ec 04             	sub    esp,0x4
c002013a:	68 00 01 00 00       	push   0x100
c002013f:	6a 00                	push   0x0
c0020141:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020148:	50                   	push   eax
c0020149:	e8 76 05 fe ff       	call   c00006c4 <memset>
c002014e:	83 c4 10             	add    esp,0x10
c0020151:	83 ec 08             	sub    esp,0x8
c0020154:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002015b:	50                   	push   eax
c002015c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020163:	50                   	push   eax
c0020164:	e8 b1 06 fe ff       	call   c000081a <strcat>
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	83 ec 08             	sub    esp,0x8
c002016f:	68 98 be 02 c0       	push   0xc002be98
c0020174:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002017b:	50                   	push   eax
c002017c:	e8 99 06 fe ff       	call   c000081a <strcat>
c0020181:	83 c4 10             	add    esp,0x10
c0020184:	83 ec 04             	sub    esp,0x4
c0020187:	6a 01                	push   0x1
c0020189:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020190:	50                   	push   eax
c0020191:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020195:	50                   	push   eax
c0020196:	e8 df 4b fe ff       	call   c0004d7a <f_open>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201a5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00201ac:	85 c0                	test   eax,eax
c00201ae:	74 0a                	je     c00201ba <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00201b0:	78 2d                	js     c00201df <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201b2:	83 e8 04             	sub    eax,0x4
c00201b5:	83 f8 01             	cmp    eax,0x1
c00201b8:	77 25                	ja     c00201df <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201ba:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00201c2:	83 ec 0c             	sub    esp,0xc
c00201c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201c9:	50                   	push   eax
c00201ca:	e8 fd 56 fe ff       	call   c00058cc <f_close>
c00201cf:	83 c4 10             	add    esp,0x10
c00201d2:	90                   	nop
c00201d3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201db:	74 3a                	je     c0020217 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201dd:	eb 2d                	jmp    c002020c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201df:	83 ec 0c             	sub    esp,0xc
c00201e2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201e9:	e8 56 f4 fe ff       	call   c000f644 <rfree>
c00201ee:	83 c4 10             	add    esp,0x10
c00201f1:	83 ec 04             	sub    esp,0x4
c00201f4:	6a 00                	push   0x0
c00201f6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201fd:	50                   	push   eax
c00201fe:	6a 00                	push   0x0
c0020200:	e8 13 4b fe ff       	call   c0004d18 <f_mount>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	b0 00                	mov    al,0x0
c002020a:	eb 12                	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002020c:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0020211:	40                   	inc    eax
c0020212:	a3 00 01 03 c0       	mov    ds:0xc0030100,eax
c0020217:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002021e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020224:	c3                   	ret    
c0020225:	90                   	nop

c0020226 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020226:	81 ec 3c 02 00 00    	sub    esp,0x23c
c002022c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020234:	74 0a                	je     c0020240 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020236:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c002023e:	75 0a                	jne    c002024a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020240:	b8 04 00 00 00       	mov    eax,0x4
c0020245:	e9 db 00 00 00       	jmp    c0020325 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002024a:	83 ec 08             	sub    esp,0x8
c002024d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020254:	50                   	push   eax
c0020255:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c002025c:	e8 75 5c fe ff       	call   c0005ed6 <f_readdir>
c0020261:	83 c4 10             	add    esp,0x10
c0020264:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c002026b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020271:	83 ec 0c             	sub    esp,0xc
c0020274:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002027b:	83 c0 1a             	add    eax,0x1a
c002027e:	50                   	push   eax
c002027f:	e8 5d 04 fe ff       	call   c00006e1 <strlen>
c0020284:	83 c4 10             	add    esp,0x10
c0020287:	ba 00 00 00 00       	mov    edx,0x0
c002028c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020290:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020294:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c002029b:	0f b6 c0             	movzx  eax,al
c002029e:	83 e0 10             	and    eax,0x10
c00202a1:	74 07                	je     c00202aa <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00202a3:	b8 02 00 00 00       	mov    eax,0x2
c00202a8:	eb 05                	jmp    c00202af <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00202aa:	b8 01 00 00 00       	mov    eax,0x1
c00202af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202b3:	83 ec 08             	sub    esp,0x8
c00202b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00202bd:	83 c0 1a             	add    eax,0x1a
c00202c0:	50                   	push   eax
c00202c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00202c5:	83 c0 10             	add    eax,0x10
c00202c8:	50                   	push   eax
c00202c9:	e8 95 04 fe ff       	call   c0000763 <strcpy>
c00202ce:	83 c4 10             	add    esp,0x10
c00202d1:	83 ec 04             	sub    esp,0x4
c00202d4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00202db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00202df:	50                   	push   eax
c00202e0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00202e7:	e8 b4 03 fe ff       	call   c00006a0 <memcpy>
c00202ec:	83 c4 10             	add    esp,0x10
c00202ef:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00202f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00202fc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020303:	84 c0                	test   al,al
c0020305:	75 07                	jne    c002030e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020307:	b8 07 00 00 00       	mov    eax,0x7
c002030c:	eb 17                	jmp    c0020325 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002030e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020315:	85 c0                	test   eax,eax
c0020317:	75 07                	jne    c0020320 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020319:	b8 00 00 00 00       	mov    eax,0x0
c002031e:	eb 05                	jmp    c0020325 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020320:	b8 01 00 00 00       	mov    eax,0x1
c0020325:	81 c4 3c 02 00 00    	add    esp,0x23c
c002032b:	c3                   	ret    

c002032c <FAT::read(void*, unsigned long, void*, int*)>:
c002032c:	83 ec 1c             	sub    esp,0x1c
c002032f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020334:	74 07                	je     c002033d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020336:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002033b:	75 07                	jne    c0020344 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002033d:	b8 04 00 00 00       	mov    eax,0x4
c0020342:	eb 3d                	jmp    c0020381 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020344:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020348:	50                   	push   eax
c0020349:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002034d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020351:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020355:	e8 5c 4e fe ff       	call   c00051b6 <f_read>
c002035a:	83 c4 10             	add    esp,0x10
c002035d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020361:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020365:	89 c2                	mov    edx,eax
c0020367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002036b:	89 10                	mov    DWORD PTR [eax],edx
c002036d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020371:	85 c0                	test   eax,eax
c0020373:	75 07                	jne    c002037c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020375:	b8 00 00 00 00       	mov    eax,0x0
c002037a:	eb 05                	jmp    c0020381 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002037c:	b8 01 00 00 00       	mov    eax,0x1
c0020381:	83 c4 1c             	add    esp,0x1c
c0020384:	c3                   	ret    
c0020385:	90                   	nop

c0020386 <FAT::write(void*, unsigned long, void*, int*)>:
c0020386:	83 ec 1c             	sub    esp,0x1c
c0020389:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002038e:	74 07                	je     c0020397 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020390:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020395:	75 07                	jne    c002039e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020397:	b8 04 00 00 00       	mov    eax,0x4
c002039c:	eb 3d                	jmp    c00203db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002039e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00203a2:	50                   	push   eax
c00203a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00203a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00203ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203af:	e8 82 50 fe ff       	call   c0005436 <f_write>
c00203b4:	83 c4 10             	add    esp,0x10
c00203b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203bf:	89 c2                	mov    edx,eax
c00203c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00203c5:	89 10                	mov    DWORD PTR [eax],edx
c00203c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203cb:	85 c0                	test   eax,eax
c00203cd:	75 07                	jne    c00203d6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00203cf:	b8 00 00 00 00       	mov    eax,0x0
c00203d4:	eb 05                	jmp    c00203db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00203d6:	b8 01 00 00 00       	mov    eax,0x1
c00203db:	83 c4 1c             	add    esp,0x1c
c00203de:	c3                   	ret    
c00203df:	90                   	nop

c00203e0 <FAT::close(void*)>:
c00203e0:	83 ec 1c             	sub    esp,0x1c
c00203e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00203e8:	75 07                	jne    c00203f1 <FAT::close(void*)+0x11>
c00203ea:	b8 04 00 00 00       	mov    eax,0x4
c00203ef:	eb 36                	jmp    c0020427 <FAT::close(void*)+0x47>
c00203f1:	83 ec 0c             	sub    esp,0xc
c00203f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203f8:	e8 cf 54 fe ff       	call   c00058cc <f_close>
c00203fd:	83 c4 10             	add    esp,0x10
c0020400:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020404:	83 ec 0c             	sub    esp,0xc
c0020407:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002040b:	e8 24 f2 fe ff       	call   c000f634 <free>
c0020410:	83 c4 10             	add    esp,0x10
c0020413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020417:	85 c0                	test   eax,eax
c0020419:	75 07                	jne    c0020422 <FAT::close(void*)+0x42>
c002041b:	b8 00 00 00 00       	mov    eax,0x0
c0020420:	eb 05                	jmp    c0020427 <FAT::close(void*)+0x47>
c0020422:	b8 01 00 00 00       	mov    eax,0x1
c0020427:	83 c4 1c             	add    esp,0x1c
c002042a:	c3                   	ret    
c002042b:	90                   	nop

c002042c <FAT::closeDir(void*)>:
c002042c:	83 ec 1c             	sub    esp,0x1c
c002042f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020434:	75 07                	jne    c002043d <FAT::closeDir(void*)+0x11>
c0020436:	b8 04 00 00 00       	mov    eax,0x4
c002043b:	eb 36                	jmp    c0020473 <FAT::closeDir(void*)+0x47>
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020444:	e8 6b 5a fe ff       	call   c0005eb4 <f_closedir>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020450:	83 ec 0c             	sub    esp,0xc
c0020453:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020457:	e8 d8 f1 fe ff       	call   c000f634 <free>
c002045c:	83 c4 10             	add    esp,0x10
c002045f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020463:	85 c0                	test   eax,eax
c0020465:	75 07                	jne    c002046e <FAT::closeDir(void*)+0x42>
c0020467:	b8 00 00 00 00       	mov    eax,0x0
c002046c:	eb 05                	jmp    c0020473 <FAT::closeDir(void*)+0x47>
c002046e:	b8 01 00 00 00       	mov    eax,0x1
c0020473:	83 c4 1c             	add    esp,0x1c
c0020476:	c3                   	ret    
c0020477:	90                   	nop

c0020478 <FAT::seek(void*, unsigned long long)>:
c0020478:	83 ec 2c             	sub    esp,0x2c
c002047b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002047f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020483:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002048b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020490:	75 07                	jne    c0020499 <FAT::seek(void*, unsigned long long)+0x21>
c0020492:	b8 04 00 00 00       	mov    eax,0x4
c0020497:	eb 2f                	jmp    c00204c8 <FAT::seek(void*, unsigned long long)+0x50>
c0020499:	83 ec 04             	sub    esp,0x4
c002049c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00204a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00204a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00204a8:	e8 4e 54 fe ff       	call   c00058fb <f_lseek>
c00204ad:	83 c4 10             	add    esp,0x10
c00204b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00204b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204b8:	85 c0                	test   eax,eax
c00204ba:	75 07                	jne    c00204c3 <FAT::seek(void*, unsigned long long)+0x4b>
c00204bc:	b8 00 00 00 00       	mov    eax,0x0
c00204c1:	eb 05                	jmp    c00204c8 <FAT::seek(void*, unsigned long long)+0x50>
c00204c3:	b8 01 00 00 00       	mov    eax,0x1
c00204c8:	83 c4 2c             	add    esp,0x2c
c00204cb:	c3                   	ret    

c00204cc <fatWrapperReadDisk>:
c00204cc:	83 ec 1c             	sub    esp,0x1c
c00204cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204db:	89 04 24             	mov    DWORD PTR [esp],eax
c00204de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204eb:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c00204f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00204f6:	83 ec 0c             	sub    esp,0xc
c00204f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204fd:	52                   	push   edx
c00204fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020502:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020506:	50                   	push   eax
c0020507:	e8 a4 5b ff ff       	call   c00160b0 <LogicalDisk::read(unsigned long long, int, void*)>
c002050c:	83 c4 20             	add    esp,0x20
c002050f:	83 c4 1c             	add    esp,0x1c
c0020512:	c3                   	ret    

c0020513 <fatWrapperWriteDisk>:
c0020513:	83 ec 1c             	sub    esp,0x1c
c0020516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002051a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002051e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020522:	89 04 24             	mov    DWORD PTR [esp],eax
c0020525:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020529:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002052d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020532:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0020539:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002053d:	83 ec 0c             	sub    esp,0xc
c0020540:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020544:	52                   	push   edx
c0020545:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002054d:	50                   	push   eax
c002054e:	e8 c9 5b ff ff       	call   c001611c <LogicalDisk::write(unsigned long long, int, void*)>
c0020553:	83 c4 20             	add    esp,0x20
c0020556:	83 c4 1c             	add    esp,0x1c
c0020559:	c3                   	ret    

c002055a <fatWrapperIoctl>:
c002055a:	53                   	push   ebx
c002055b:	83 ec 28             	sub    esp,0x28
c002055e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020562:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020566:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002056a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002056e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020573:	75 31                	jne    c00205a6 <fatWrapperIoctl+0x4c>
c0020575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020579:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002057d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020582:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0020589:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002058f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020595:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020599:	66 89 02             	mov    WORD PTR [edx],ax
c002059c:	b8 00 00 00 00       	mov    eax,0x0
c00205a1:	e9 b2 00 00 00       	jmp    c0020658 <fatWrapperIoctl+0xfe>
c00205a6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00205ab:	75 6a                	jne    c0020617 <fatWrapperIoctl+0xbd>
c00205ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205b5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205ba:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c00205c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00205c7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00205cd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00205d3:	89 c8                	mov    eax,ecx
c00205d5:	89 da                	mov    edx,ebx
c00205d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00205db:	c1 e0 0a             	shl    eax,0xa
c00205de:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00205e3:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00205ea:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00205f0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00205f6:	89 cb                	mov    ebx,ecx
c00205f8:	c1 fb 1f             	sar    ebx,0x1f
c00205fb:	53                   	push   ebx
c00205fc:	51                   	push   ecx
c00205fd:	52                   	push   edx
c00205fe:	50                   	push   eax
c00205ff:	e8 48 5b 00 00       	call   c002614c <__udivdi3>
c0020604:	83 c4 10             	add    esp,0x10
c0020607:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002060b:	89 01                	mov    DWORD PTR [ecx],eax
c002060d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020610:	b8 00 00 00 00       	mov    eax,0x0
c0020615:	eb 41                	jmp    c0020658 <fatWrapperIoctl+0xfe>
c0020617:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002061c:	75 07                	jne    c0020625 <fatWrapperIoctl+0xcb>
c002061e:	b8 00 00 00 00       	mov    eax,0x0
c0020623:	eb 33                	jmp    c0020658 <fatWrapperIoctl+0xfe>
c0020625:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002062a:	75 19                	jne    c0020645 <fatWrapperIoctl+0xeb>
c002062c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020630:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020634:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020638:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002063e:	b8 00 00 00 00       	mov    eax,0x0
c0020643:	eb 13                	jmp    c0020658 <fatWrapperIoctl+0xfe>
c0020645:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002064a:	75 07                	jne    c0020653 <fatWrapperIoctl+0xf9>
c002064c:	b8 00 00 00 00       	mov    eax,0x0
c0020651:	eb 05                	jmp    c0020658 <fatWrapperIoctl+0xfe>
c0020653:	b8 04 00 00 00       	mov    eax,0x4
c0020658:	83 c4 28             	add    esp,0x28
c002065b:	5b                   	pop    ebx
c002065c:	c3                   	ret    
c002065d:	90                   	nop

c002065e <FAT::FAT()>:
c002065e:	83 ec 1c             	sub    esp,0x1c
c0020661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	50                   	push   eax
c0020669:	e8 8a 25 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	ba d4 be 02 c0       	mov    edx,0xc002bed4
c0020676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002067a:	89 10                	mov    DWORD PTR [eax],edx
c002067c:	c7 05 00 01 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030100,0x0
c0020686:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002068e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020693:	7f 15                	jg     c00206aa <FAT::FAT()+0x4c>
c0020695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020699:	c7 04 85 20 01 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcfee0],0xffffffff
c00206a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00206a8:	eb e4                	jmp    c002068e <FAT::FAT()+0x30>
c00206aa:	90                   	nop
c00206ab:	83 c4 1c             	add    esp,0x1c
c00206ae:	c3                   	ret    
c00206af:	90                   	nop

c00206b0 <FAT::fixFilepath(char*)>:
c00206b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206b4:	8a 00                	mov    al,BYTE PTR [eax]
c00206b6:	3c 40                	cmp    al,0x40
c00206b8:	7e 2c                	jle    c00206e6 <FAT::fixFilepath(char*)+0x36>
c00206ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206be:	8a 00                	mov    al,BYTE PTR [eax]
c00206c0:	83 e8 41             	sub    eax,0x41
c00206c3:	88 c2                	mov    dl,al
c00206c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206c9:	88 10                	mov    BYTE PTR [eax],dl
c00206cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206cf:	8a 00                	mov    al,BYTE PTR [eax]
c00206d1:	0f be c0             	movsx  eax,al
c00206d4:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c00206db:	83 c0 30             	add    eax,0x30
c00206de:	88 c2                	mov    dl,al
c00206e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206e4:	88 10                	mov    BYTE PTR [eax],dl
c00206e6:	90                   	nop
c00206e7:	c3                   	ret    

c00206e8 <FAT::open(char const*, void**, FileOpenMode)>:
c00206e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206f6:	74 0a                	je     c0020702 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00206f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020700:	75 0a                	jne    c002070c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020702:	b8 04 00 00 00       	mov    eax,0x4
c0020707:	e9 fd 00 00 00       	jmp    c0020809 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002070c:	83 ec 08             	sub    esp,0x8
c002070f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020716:	8d 44 24 14          	lea    eax,[esp+0x14]
c002071a:	50                   	push   eax
c002071b:	e8 43 00 fe ff       	call   c0000763 <strcpy>
c0020720:	83 c4 10             	add    esp,0x10
c0020723:	83 ec 08             	sub    esp,0x8
c0020726:	8d 44 24 10          	lea    eax,[esp+0x10]
c002072a:	50                   	push   eax
c002072b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020732:	e8 79 ff ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020737:	83 c4 10             	add    esp,0x10
c002073a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020742:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020749:	83 e0 01             	and    eax,0x1
c002074c:	74 08                	je     c0020756 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002074e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020756:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002075d:	83 e0 04             	and    eax,0x4
c0020760:	74 10                	je     c0020772 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020762:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002076a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020772:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020779:	83 e0 02             	and    eax,0x2
c002077c:	74 08                	je     c0020786 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002077e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020786:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002078d:	83 e0 08             	and    eax,0x8
c0020790:	74 08                	je     c002079a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020792:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002079a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00207a1:	83 e0 10             	and    eax,0x10
c00207a4:	74 08                	je     c00207ae <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00207a6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	68 50 02 00 00       	push   0x250
c00207b6:	e8 69 ee fe ff       	call   c000f624 <malloc>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	89 c2                	mov    edx,eax
c00207c0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00207c7:	89 10                	mov    DWORD PTR [eax],edx
c00207c9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00207d1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00207d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00207da:	83 ec 04             	sub    esp,0x4
c00207dd:	52                   	push   edx
c00207de:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207e2:	52                   	push   edx
c00207e3:	50                   	push   eax
c00207e4:	e8 91 45 fe ff       	call   c0004d7a <f_open>
c00207e9:	83 c4 10             	add    esp,0x10
c00207ec:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00207f3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00207fb:	74 07                	je     c0020804 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00207fd:	b8 01 00 00 00       	mov    eax,0x1
c0020802:	eb 05                	jmp    c0020809 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020804:	b8 00 00 00 00       	mov    eax,0x0
c0020809:	81 c4 1c 01 00 00    	add    esp,0x11c
c002080f:	c3                   	ret    

c0020810 <FAT::openDir(char const*, void**)>:
c0020810:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020816:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002081e:	74 0a                	je     c002082a <FAT::openDir(char const*, void**)+0x1a>
c0020820:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020828:	75 07                	jne    c0020831 <FAT::openDir(char const*, void**)+0x21>
c002082a:	b8 04 00 00 00       	mov    eax,0x4
c002082f:	eb 7d                	jmp    c00208ae <FAT::openDir(char const*, void**)+0x9e>
c0020831:	83 ec 08             	sub    esp,0x8
c0020834:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002083b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002083f:	50                   	push   eax
c0020840:	e8 1e ff fd ff       	call   c0000763 <strcpy>
c0020845:	83 c4 10             	add    esp,0x10
c0020848:	83 ec 08             	sub    esp,0x8
c002084b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002084f:	50                   	push   eax
c0020850:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020857:	e8 54 fe ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c002085c:	83 c4 10             	add    esp,0x10
c002085f:	83 ec 0c             	sub    esp,0xc
c0020862:	6a 4c                	push   0x4c
c0020864:	e8 bb ed fe ff       	call   c000f624 <malloc>
c0020869:	83 c4 10             	add    esp,0x10
c002086c:	89 c2                	mov    edx,eax
c002086e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020875:	89 10                	mov    DWORD PTR [eax],edx
c0020877:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002087e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020880:	83 ec 08             	sub    esp,0x8
c0020883:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020887:	52                   	push   edx
c0020888:	50                   	push   eax
c0020889:	e8 24 55 fe ff       	call   c0005db2 <f_opendir>
c002088e:	83 c4 10             	add    esp,0x10
c0020891:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020898:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00208a0:	74 07                	je     c00208a9 <FAT::openDir(char const*, void**)+0x99>
c00208a2:	b8 01 00 00 00       	mov    eax,0x1
c00208a7:	eb 05                	jmp    c00208ae <FAT::openDir(char const*, void**)+0x9e>
c00208a9:	b8 00 00 00 00       	mov    eax,0x0
c00208ae:	81 c4 1c 01 00 00    	add    esp,0x11c
c00208b4:	c3                   	ret    
c00208b5:	90                   	nop

c00208b6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00208b6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00208bc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00208c4:	75 0a                	jne    c00208d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00208c6:	b8 04 00 00 00       	mov    eax,0x4
c00208cb:	e9 c9 00 00 00       	jmp    c0020999 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208d0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00208d8:	75 0a                	jne    c00208e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00208da:	b8 04 00 00 00       	mov    eax,0x4
c00208df:	e9 b5 00 00 00       	jmp    c0020999 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208e4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00208ec:	75 0a                	jne    c00208f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00208ee:	b8 04 00 00 00       	mov    eax,0x4
c00208f3:	e9 a1 00 00 00       	jmp    c0020999 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208f8:	83 ec 08             	sub    esp,0x8
c00208fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020902:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020909:	50                   	push   eax
c002090a:	e8 54 fe fd ff       	call   c0000763 <strcpy>
c002090f:	83 c4 10             	add    esp,0x10
c0020912:	83 ec 08             	sub    esp,0x8
c0020915:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002091c:	50                   	push   eax
c002091d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020924:	e8 87 fd ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020929:	83 c4 10             	add    esp,0x10
c002092c:	83 ec 08             	sub    esp,0x8
c002092f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020933:	50                   	push   eax
c0020934:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002093b:	50                   	push   eax
c002093c:	e8 30 56 fe ff       	call   c0005f71 <f_stat>
c0020941:	83 c4 10             	add    esp,0x10
c0020944:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002094b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020952:	85 c0                	test   eax,eax
c0020954:	74 07                	je     c002095d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020956:	83 f8 04             	cmp    eax,0x4
c0020959:	74 32                	je     c002098d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002095b:	eb 37                	jmp    c0020994 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002095d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020961:	0f b6 c0             	movzx  eax,al
c0020964:	83 e0 10             	and    eax,0x10
c0020967:	0f 95 c2             	setne  dl
c002096a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020971:	88 10                	mov    BYTE PTR [eax],dl
c0020973:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020976:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002097a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020981:	89 01                	mov    DWORD PTR [ecx],eax
c0020983:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020986:	b8 00 00 00 00       	mov    eax,0x0
c002098b:	eb 0c                	jmp    c0020999 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002098d:	b8 02 00 00 00       	mov    eax,0x2
c0020992:	eb 05                	jmp    c0020999 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020994:	b8 01 00 00 00       	mov    eax,0x1
c0020999:	81 c4 2c 02 00 00    	add    esp,0x22c
c002099f:	c3                   	ret    

c00209a0 <FAT::unlink(char const*)>:
c00209a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209ae:	75 07                	jne    c00209b7 <FAT::unlink(char const*)+0x17>
c00209b0:	b8 04 00 00 00       	mov    eax,0x4
c00209b5:	eb 5c                	jmp    c0020a13 <FAT::unlink(char const*)+0x73>
c00209b7:	83 ec 08             	sub    esp,0x8
c00209ba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209c5:	50                   	push   eax
c00209c6:	e8 98 fd fd ff       	call   c0000763 <strcpy>
c00209cb:	83 c4 10             	add    esp,0x10
c00209ce:	83 ec 08             	sub    esp,0x8
c00209d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209d5:	50                   	push   eax
c00209d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209dd:	e8 ce fc ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c00209e2:	83 c4 10             	add    esp,0x10
c00209e5:	83 ec 0c             	sub    esp,0xc
c00209e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209ec:	50                   	push   eax
c00209ed:	e8 d1 58 fe ff       	call   c00062c3 <f_unlink>
c00209f2:	83 c4 10             	add    esp,0x10
c00209f5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209fc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020a03:	85 c0                	test   eax,eax
c0020a05:	75 07                	jne    c0020a0e <FAT::unlink(char const*)+0x6e>
c0020a07:	b8 00 00 00 00       	mov    eax,0x0
c0020a0c:	eb 05                	jmp    c0020a13 <FAT::unlink(char const*)+0x73>
c0020a0e:	b8 01 00 00 00       	mov    eax,0x1
c0020a13:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a19:	c3                   	ret    

c0020a1a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020a1a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020a20:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020a27:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020a2e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020a32:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020a36:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020a3e:	75 0a                	jne    c0020a4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020a40:	b8 04 00 00 00       	mov    eax,0x4
c0020a45:	e9 1c 01 00 00       	jmp    c0020b66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020a4a:	83 ec 08             	sub    esp,0x8
c0020a4d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a54:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020a58:	50                   	push   eax
c0020a59:	e8 05 fd fd ff       	call   c0000763 <strcpy>
c0020a5e:	83 c4 10             	add    esp,0x10
c0020a61:	83 ec 08             	sub    esp,0x8
c0020a64:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020a68:	50                   	push   eax
c0020a69:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a70:	e8 3b fc ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020a75:	83 c4 10             	add    esp,0x10
c0020a78:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020a80:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020a88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a8d:	83 e0 01             	and    eax,0x1
c0020a90:	74 08                	je     c0020a9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020a92:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020a9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a9f:	83 e0 02             	and    eax,0x2
c0020aa2:	74 08                	je     c0020aac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020aa4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020aac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ab1:	83 e0 04             	and    eax,0x4
c0020ab4:	74 08                	je     c0020abe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020ab6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020abe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ac3:	83 e0 08             	and    eax,0x8
c0020ac6:	74 08                	je     c0020ad0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020ac8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020ad0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ad5:	83 e0 01             	and    eax,0x1
c0020ad8:	74 08                	je     c0020ae2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020ada:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020ae2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ae7:	83 e0 02             	and    eax,0x2
c0020aea:	74 08                	je     c0020af4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020aec:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020af4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020af9:	83 e0 04             	and    eax,0x4
c0020afc:	74 08                	je     c0020b06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020afe:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020b06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020b0b:	83 e0 08             	and    eax,0x8
c0020b0e:	74 08                	je     c0020b18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020b10:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020b18:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020b1f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020b26:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020b2e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020b36:	83 ec 04             	sub    esp,0x4
c0020b39:	52                   	push   edx
c0020b3a:	50                   	push   eax
c0020b3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b3f:	50                   	push   eax
c0020b40:	e8 20 5e fe ff       	call   c0006965 <f_chmod>
c0020b45:	83 c4 10             	add    esp,0x10
c0020b48:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020b4f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020b56:	85 c0                	test   eax,eax
c0020b58:	75 07                	jne    c0020b61 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020b5a:	b8 00 00 00 00       	mov    eax,0x0
c0020b5f:	eb 05                	jmp    c0020b66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b61:	b8 01 00 00 00       	mov    eax,0x1
c0020b66:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020b6c:	c3                   	ret    
c0020b6d:	90                   	nop

c0020b6e <FAT::rename(char const*, char const*)>:
c0020b6e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020b74:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020b7c:	74 0a                	je     c0020b88 <FAT::rename(char const*, char const*)+0x1a>
c0020b7e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020b86:	75 0a                	jne    c0020b92 <FAT::rename(char const*, char const*)+0x24>
c0020b88:	b8 04 00 00 00       	mov    eax,0x4
c0020b8d:	e9 98 00 00 00       	jmp    c0020c2a <FAT::rename(char const*, char const*)+0xbc>
c0020b92:	83 ec 08             	sub    esp,0x8
c0020b95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b9c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ba3:	50                   	push   eax
c0020ba4:	e8 ba fb fd ff       	call   c0000763 <strcpy>
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	83 ec 08             	sub    esp,0x8
c0020baf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020bb6:	50                   	push   eax
c0020bb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020bbe:	e8 ed fa ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020bc3:	83 c4 10             	add    esp,0x10
c0020bc6:	83 ec 08             	sub    esp,0x8
c0020bc9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020bd0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bd4:	50                   	push   eax
c0020bd5:	e8 89 fb fd ff       	call   c0000763 <strcpy>
c0020bda:	83 c4 10             	add    esp,0x10
c0020bdd:	83 ec 08             	sub    esp,0x8
c0020be0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020be4:	50                   	push   eax
c0020be5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020bec:	e8 bf fa ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020bf1:	83 c4 10             	add    esp,0x10
c0020bf4:	83 ec 08             	sub    esp,0x8
c0020bf7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bfb:	50                   	push   eax
c0020bfc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c03:	50                   	push   eax
c0020c04:	e8 69 5a fe ff       	call   c0006672 <f_rename>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020c13:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020c1a:	85 c0                	test   eax,eax
c0020c1c:	75 07                	jne    c0020c25 <FAT::rename(char const*, char const*)+0xb7>
c0020c1e:	b8 00 00 00 00       	mov    eax,0x0
c0020c23:	eb 05                	jmp    c0020c2a <FAT::rename(char const*, char const*)+0xbc>
c0020c25:	b8 01 00 00 00       	mov    eax,0x1
c0020c2a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020c30:	c3                   	ret    
c0020c31:	90                   	nop

c0020c32 <FAT::mkdir(char const*)>:
c0020c32:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c38:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c40:	75 07                	jne    c0020c49 <FAT::mkdir(char const*)+0x17>
c0020c42:	b8 04 00 00 00       	mov    eax,0x4
c0020c47:	eb 5c                	jmp    c0020ca5 <FAT::mkdir(char const*)+0x73>
c0020c49:	83 ec 08             	sub    esp,0x8
c0020c4c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c53:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c57:	50                   	push   eax
c0020c58:	e8 06 fb fd ff       	call   c0000763 <strcpy>
c0020c5d:	83 c4 10             	add    esp,0x10
c0020c60:	83 ec 08             	sub    esp,0x8
c0020c63:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c67:	50                   	push   eax
c0020c68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c6f:	e8 3c fa ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020c74:	83 c4 10             	add    esp,0x10
c0020c77:	83 ec 0c             	sub    esp,0xc
c0020c7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c7e:	50                   	push   eax
c0020c7f:	e8 c2 57 fe ff       	call   c0006446 <f_mkdir>
c0020c84:	83 c4 10             	add    esp,0x10
c0020c87:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c8e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c95:	85 c0                	test   eax,eax
c0020c97:	75 07                	jne    c0020ca0 <FAT::mkdir(char const*)+0x6e>
c0020c99:	b8 00 00 00 00       	mov    eax,0x0
c0020c9e:	eb 05                	jmp    c0020ca5 <FAT::mkdir(char const*)+0x73>
c0020ca0:	b8 01 00 00 00       	mov    eax,0x1
c0020ca5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cab:	c3                   	ret    

c0020cac <FAT::exists(char const*)>:
c0020cac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020cb2:	83 ec 08             	sub    esp,0x8
c0020cb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020cbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cc0:	50                   	push   eax
c0020cc1:	e8 9d fa fd ff       	call   c0000763 <strcpy>
c0020cc6:	83 c4 10             	add    esp,0x10
c0020cc9:	83 ec 08             	sub    esp,0x8
c0020ccc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd0:	50                   	push   eax
c0020cd1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020cd8:	e8 d3 f9 ff ff       	call   c00206b0 <FAT::fixFilepath(char*)>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	83 ec 08             	sub    esp,0x8
c0020ce3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020cea:	50                   	push   eax
c0020ceb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cef:	50                   	push   eax
c0020cf0:	e8 7c 52 fe ff       	call   c0005f71 <f_stat>
c0020cf5:	83 c4 10             	add    esp,0x10
c0020cf8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020cff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020d06:	85 c0                	test   eax,eax
c0020d08:	75 04                	jne    c0020d0e <FAT::exists(char const*)+0x62>
c0020d0a:	b0 01                	mov    al,0x1
c0020d0c:	eb 02                	jmp    c0020d10 <FAT::exists(char const*)+0x64>
c0020d0e:	b0 00                	mov    al,0x0
c0020d10:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020d16:	c3                   	ret    
c0020d17:	90                   	nop

c0020d18 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020d18:	b8 08 00 00 00       	mov    eax,0x8
c0020d1d:	c3                   	ret    

c0020d1e <ISO9660::seek(void*, unsigned long long)>:
c0020d1e:	53                   	push   ebx
c0020d1f:	b8 04 00 00 00       	mov    eax,0x4
c0020d24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d30:	85 d2                	test   edx,edx
c0020d32:	74 17                	je     c0020d4b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d34:	89 c8                	mov    eax,ecx
c0020d36:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020d39:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020d3c:	b8 01 00 00 00       	mov    eax,0x1
c0020d41:	73 08                	jae    c0020d4b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d43:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020d46:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020d49:	31 c0                	xor    eax,eax
c0020d4b:	5b                   	pop    ebx
c0020d4c:	c3                   	ret    
c0020d4d:	90                   	nop

c0020d4e <ISO9660::tell(void*, unsigned long long*)>:
c0020d4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d56:	85 d2                	test   edx,edx
c0020d58:	74 12                	je     c0020d6c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d5a:	85 c0                	test   eax,eax
c0020d5c:	74 0e                	je     c0020d6c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d5e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020d61:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020d64:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d67:	89 10                	mov    DWORD PTR [eax],edx
c0020d69:	31 c0                	xor    eax,eax
c0020d6b:	c3                   	ret    
c0020d6c:	b8 04 00 00 00       	mov    eax,0x4
c0020d71:	c3                   	ret    

c0020d72 <ISO9660::getName()>:
c0020d72:	b8 30 bf 02 c0       	mov    eax,0xc002bf30
c0020d77:	c3                   	ret    

c0020d78 <ISO9660::stat(void*, unsigned long long*)>:
c0020d78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d80:	85 d2                	test   edx,edx
c0020d82:	74 12                	je     c0020d96 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d84:	85 c0                	test   eax,eax
c0020d86:	74 0e                	je     c0020d96 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d88:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020d8b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020d8e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d91:	89 10                	mov    DWORD PTR [eax],edx
c0020d93:	31 c0                	xor    eax,eax
c0020d95:	c3                   	ret    
c0020d96:	b8 04 00 00 00       	mov    eax,0x4
c0020d9b:	c3                   	ret    

c0020d9c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d9c:	b8 01 00 00 00       	mov    eax,0x1
c0020da1:	c3                   	ret    

c0020da2 <ISO9660::unlink(char const*)>:
c0020da2:	b8 01 00 00 00       	mov    eax,0x1
c0020da7:	c3                   	ret    

c0020da8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020da8:	b8 01 00 00 00       	mov    eax,0x1
c0020dad:	c3                   	ret    

c0020dae <ISO9660::rename(char const*, char const*)>:
c0020dae:	b8 01 00 00 00       	mov    eax,0x1
c0020db3:	c3                   	ret    

c0020db4 <ISO9660::mkdir(char const*)>:
c0020db4:	b8 01 00 00 00       	mov    eax,0x1
c0020db9:	c3                   	ret    

c0020dba <ISO9660::close(void*)>:
c0020dba:	83 ec 0c             	sub    esp,0xc
c0020dbd:	b8 04 00 00 00       	mov    eax,0x4
c0020dc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020dc6:	85 d2                	test   edx,edx
c0020dc8:	74 0e                	je     c0020dd8 <ISO9660::close(void*)+0x1e>
c0020dca:	83 ec 0c             	sub    esp,0xc
c0020dcd:	52                   	push   edx
c0020dce:	e8 61 e8 fe ff       	call   c000f634 <free>
c0020dd3:	83 c4 10             	add    esp,0x10
c0020dd6:	31 c0                	xor    eax,eax
c0020dd8:	83 c4 0c             	add    esp,0xc
c0020ddb:	c3                   	ret    

c0020ddc <ISO9660::closeDir(void*)>:
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	b8 04 00 00 00       	mov    eax,0x4
c0020de4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020de8:	85 d2                	test   edx,edx
c0020dea:	74 0e                	je     c0020dfa <ISO9660::closeDir(void*)+0x1e>
c0020dec:	83 ec 0c             	sub    esp,0xc
c0020def:	52                   	push   edx
c0020df0:	e8 3f e8 fe ff       	call   c000f634 <free>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	31 c0                	xor    eax,eax
c0020dfa:	83 c4 0c             	add    esp,0xc
c0020dfd:	c3                   	ret    

c0020dfe <ISO9660::~ISO9660()>:
c0020dfe:	83 ec 0c             	sub    esp,0xc
c0020e01:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c0020e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e0a:	89 10                	mov    DWORD PTR [eax],edx
c0020e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e10:	83 ec 0c             	sub    esp,0xc
c0020e13:	50                   	push   eax
c0020e14:	e8 03 1e ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0020e19:	83 c4 10             	add    esp,0x10
c0020e1c:	90                   	nop
c0020e1d:	83 c4 0c             	add    esp,0xc
c0020e20:	c3                   	ret    
c0020e21:	90                   	nop

c0020e22 <ISO9660::~ISO9660()>:
c0020e22:	83 ec 0c             	sub    esp,0xc
c0020e25:	83 ec 0c             	sub    esp,0xc
c0020e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e2c:	e8 cd ff ff ff       	call   c0020dfe <ISO9660::~ISO9660()>
c0020e31:	83 c4 10             	add    esp,0x10
c0020e34:	83 ec 08             	sub    esp,0x8
c0020e37:	6a 08                	push   0x8
c0020e39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e3d:	e8 d1 19 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0020e42:	83 c4 10             	add    esp,0x10
c0020e45:	83 c4 0c             	add    esp,0xc
c0020e48:	c3                   	ret    

c0020e49 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020e49:	55                   	push   ebp
c0020e4a:	31 c9                	xor    ecx,ecx
c0020e4c:	57                   	push   edi
c0020e4d:	56                   	push   esi
c0020e4e:	53                   	push   ebx
c0020e4f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020e53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020e57:	89 eb                	mov    ebx,ebp
c0020e59:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020e5d:	39 ce                	cmp    esi,ecx
c0020e5f:	7e 17                	jle    c0020e78 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020e61:	31 d2                	xor    edx,edx
c0020e63:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020e67:	7d 13                	jge    c0020e7c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020e69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e6d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020e70:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020e73:	75 0d                	jne    c0020e82 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020e75:	42                   	inc    edx
c0020e76:	eb eb                	jmp    c0020e63 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020e78:	31 c0                	xor    eax,eax
c0020e7a:	eb 0a                	jmp    c0020e86 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e7c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020e80:	eb 04                	jmp    c0020e86 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e82:	41                   	inc    ecx
c0020e83:	43                   	inc    ebx
c0020e84:	eb d7                	jmp    c0020e5d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020e86:	5b                   	pop    ebx
c0020e87:	5e                   	pop    esi
c0020e88:	5f                   	pop    edi
c0020e89:	5d                   	pop    ebp
c0020e8a:	c3                   	ret    

c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020e8b:	56                   	push   esi
c0020e8c:	53                   	push   ebx
c0020e8d:	52                   	push   edx
c0020e8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020e96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e9a:	39 0d 00 02 03 c0    	cmp    DWORD PTR ds:0xc0030200,ecx
c0020ea0:	75 08                	jne    c0020eaa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020ea2:	38 05 54 d0 02 c0    	cmp    BYTE PTR ds:0xc002d054,al
c0020ea8:	74 2b                	je     c0020ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020eaa:	83 ec 0c             	sub    esp,0xc
c0020ead:	a2 54 d0 02 c0       	mov    ds:0xc002d054,al
c0020eb2:	68 20 02 03 c0       	push   0xc0030220
c0020eb7:	0f be c0             	movsx  eax,al
c0020eba:	6a 01                	push   0x1
c0020ebc:	89 0d 00 02 03 c0    	mov    DWORD PTR ds:0xc0030200,ecx
c0020ec2:	31 db                	xor    ebx,ebx
c0020ec4:	53                   	push   ebx
c0020ec5:	51                   	push   ecx
c0020ec6:	ff 34 85 dc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2024]
c0020ecd:	e8 de 51 ff ff       	call   c00160b0 <LogicalDisk::read(unsigned long long, int, void*)>
c0020ed2:	83 c4 20             	add    esp,0x20
c0020ed5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020edd:	c7 44 24 14 20 02 03 c0 	mov    DWORD PTR [esp+0x14],0xc0030220
c0020ee5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020ee9:	58                   	pop    eax
c0020eea:	5b                   	pop    ebx
c0020eeb:	5e                   	pop    esi
c0020eec:	e9 af f7 fd ff       	jmp    c00006a0 <memcpy>
c0020ef1:	90                   	nop

c0020ef2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020ef2:	81 ec 10 08 00 00    	sub    esp,0x810
c0020ef8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020eff:	83 c0 41             	add    eax,0x41
c0020f02:	0f be c0             	movsx  eax,al
c0020f05:	50                   	push   eax
c0020f06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f0a:	50                   	push   eax
c0020f0b:	6a 10                	push   0x10
c0020f0d:	e8 79 ff ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f12:	83 c4 10             	add    esp,0x10
c0020f15:	31 c0                	xor    eax,eax
c0020f17:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020f1c:	75 1d                	jne    c0020f3b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f1e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020f23:	75 16                	jne    c0020f3b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f25:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020f2a:	75 0f                	jne    c0020f3b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f2c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020f31:	75 08                	jne    c0020f3b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f33:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020f38:	0f 94 c0             	sete   al
c0020f3b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020f41:	c3                   	ret    

c0020f42 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020f42:	55                   	push   ebp
c0020f43:	57                   	push   edi
c0020f44:	56                   	push   esi
c0020f45:	53                   	push   ebx
c0020f46:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020f4c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020f53:	85 ed                	test   ebp,ebp
c0020f55:	0f 84 d6 01 00 00    	je     c0021131 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f5b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020f63:	0f 84 c8 01 00 00    	je     c0021131 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f69:	b8 01 00 00 00       	mov    eax,0x1
c0020f6e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020f72:	0f 85 be 01 00 00    	jne    c0021136 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020f78:	31 d2                	xor    edx,edx
c0020f7a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020f81:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020f84:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020f87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f8b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f95:	01 f0                	add    eax,esi
c0020f97:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020f9a:	11 fa                	adc    edx,edi
c0020f9c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020fa0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020fa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020fa8:	19 d1                	sbb    ecx,edx
c0020faa:	72 0a                	jb     c0020fb6 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020fac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020fb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020fb4:	eb 13                	jmp    c0020fc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020fb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020fbe:	29 f0                	sub    eax,esi
c0020fc0:	19 fa                	sbb    edx,edi
c0020fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020fc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020fc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020fcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020fcf:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020fd3:	51                   	push   ecx
c0020fd4:	c1 e0 0b             	shl    eax,0xb
c0020fd7:	01 c6                	add    esi,eax
c0020fd9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020fdd:	11 d7                	adc    edi,edx
c0020fdf:	50                   	push   eax
c0020fe0:	89 fa                	mov    edx,edi
c0020fe2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020fe6:	89 f0                	mov    eax,esi
c0020fe8:	53                   	push   ebx
c0020fe9:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020fed:	50                   	push   eax
c0020fee:	e8 98 fe ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ff3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020ff7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020ffa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020ffe:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021004:	83 c4 10             	add    esp,0x10
c0021007:	b8 00 08 00 00       	mov    eax,0x800
c002100c:	29 d0                	sub    eax,edx
c002100e:	39 c1                	cmp    ecx,eax
c0021010:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021014:	83 d9 00             	sbb    ecx,0x0
c0021017:	7d 1c                	jge    c0021035 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021019:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002101e:	75 12                	jne    c0021032 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021020:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021027:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002102d:	e9 fb 00 00 00       	jmp    c002112d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021032:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021035:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021038:	31 d2                	xor    edx,edx
c002103a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002103e:	39 c2                	cmp    edx,eax
c0021040:	7d 14                	jge    c0021056 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021042:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021049:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002104d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021050:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021053:	42                   	inc    edx
c0021054:	eb e8                	jmp    c002103e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021056:	89 c3                	mov    ebx,eax
c0021058:	85 c0                	test   eax,eax
c002105a:	79 02                	jns    c002105e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002105c:	31 db                	xor    ebx,ebx
c002105e:	99                   	cdq    
c002105f:	01 c3                	add    ebx,eax
c0021061:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021068:	01 c6                	add    esi,eax
c002106a:	11 d7                	adc    edi,edx
c002106c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021070:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021074:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021077:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002107b:	29 c6                	sub    esi,eax
c002107d:	19 d7                	sbb    edi,edx
c002107f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021082:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021086:	b8 ff 07 00 00       	mov    eax,0x7ff
c002108b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002108e:	b8 00 00 00 00       	mov    eax,0x0
c0021093:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021097:	7d 3e                	jge    c00210d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021099:	52                   	push   edx
c002109a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002109e:	50                   	push   eax
c002109f:	53                   	push   ebx
c00210a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00210a8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00210ac:	50                   	push   eax
c00210ad:	e8 d9 fd ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210b2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00210ba:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00210bf:	81 c3 00 08 00 00    	add    ebx,0x800
c00210c5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00210cd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00210d2:	83 c4 10             	add    esp,0x10
c00210d5:	eb af                	jmp    c0021086 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00210d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210db:	0b 04 24             	or     eax,DWORD PTR [esp]
c00210de:	74 32                	je     c0021112 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00210e0:	50                   	push   eax
c00210e1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210e5:	50                   	push   eax
c00210e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210ea:	50                   	push   eax
c00210eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00210ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00210f3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00210f7:	56                   	push   esi
c00210f8:	e8 8e fd ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210fd:	83 c4 0c             	add    esp,0xc
c0021100:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021104:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021108:	50                   	push   eax
c0021109:	53                   	push   ebx
c002110a:	e8 91 f5 fd ff       	call   c00006a0 <memcpy>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021119:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002111d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021121:	89 38                	mov    DWORD PTR [eax],edi
c0021123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021127:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002112a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002112d:	31 c0                	xor    eax,eax
c002112f:	eb 05                	jmp    c0021136 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021131:	b8 04 00 00 00       	mov    eax,0x4
c0021136:	81 c4 2c 08 00 00    	add    esp,0x82c
c002113c:	5b                   	pop    ebx
c002113d:	5e                   	pop    esi
c002113e:	5f                   	pop    edi
c002113f:	5d                   	pop    ebp
c0021140:	c3                   	ret    
c0021141:	90                   	nop

c0021142 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021142:	55                   	push   ebp
c0021143:	57                   	push   edi
c0021144:	56                   	push   esi
c0021145:	53                   	push   ebx
c0021146:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002114c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021153:	85 f6                	test   esi,esi
c0021155:	0f 84 64 02 00 00    	je     c00213bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002115b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021163:	0f 84 56 02 00 00    	je     c00213bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021169:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002116c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002116f:	75 0a                	jne    c002117b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021171:	b8 07 00 00 00       	mov    eax,0x7
c0021176:	e9 49 02 00 00       	jmp    c00213c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002117b:	50                   	push   eax
c002117c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021180:	50                   	push   eax
c0021181:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021188:	53                   	push   ebx
c0021189:	8b 06                	mov    eax,DWORD PTR [esi]
c002118b:	c1 e0 0b             	shl    eax,0xb
c002118e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021191:	c1 e8 0b             	shr    eax,0xb
c0021194:	50                   	push   eax
c0021195:	e8 f1 fc ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002119a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002119d:	83 c4 10             	add    esp,0x10
c00211a0:	89 c1                	mov    ecx,eax
c00211a2:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00211a5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00211ab:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00211ae:	84 db                	test   bl,bl
c00211b0:	0f 85 90 00 00 00    	jne    c0021246 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00211b6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00211bc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00211c2:	29 c7                	sub    edi,eax
c00211c4:	89 fb                	mov    ebx,edi
c00211c6:	c1 fb 1f             	sar    ebx,0x1f
c00211c9:	01 f8                	add    eax,edi
c00211cb:	11 da                	adc    edx,ebx
c00211cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211d5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00211d8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00211db:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00211de:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00211e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00211e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211e8:	89 d8                	mov    eax,ebx
c00211ea:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00211ed:	ba 00 00 00 00       	mov    edx,0x0
c00211f2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00211f6:	b8 00 00 00 00       	mov    eax,0x0
c00211fb:	73 0b                	jae    c0021208 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00211fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021200:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021204:	29 f8                	sub    eax,edi
c0021206:	19 da                	sbb    edx,ebx
c0021208:	89 d3                	mov    ebx,edx
c002120a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002120d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021210:	09 c3                	or     ebx,eax
c0021212:	0f 84 59 ff ff ff    	je     c0021171 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021218:	55                   	push   ebp
c0021219:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002121d:	50                   	push   eax
c002121e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021225:	53                   	push   ebx
c0021226:	8b 06                	mov    eax,DWORD PTR [esi]
c0021228:	c1 e0 0b             	shl    eax,0xb
c002122b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002122f:	c1 e8 0b             	shr    eax,0xb
c0021232:	50                   	push   eax
c0021233:	e8 53 fc ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021238:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002123b:	83 c4 10             	add    esp,0x10
c002123e:	25 ff 07 00 00       	and    eax,0x7ff
c0021243:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021246:	57                   	push   edi
c0021247:	6a 28                	push   0x28
c0021249:	6a 00                	push   0x0
c002124b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002124f:	50                   	push   eax
c0021250:	e8 6f f4 fd ff       	call   c00006c4 <memset>
c0021255:	31 d2                	xor    edx,edx
c0021257:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c002125a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021260:	89 f8                	mov    eax,edi
c0021262:	83 c0 21             	add    eax,0x21
c0021265:	83 d2 00             	adc    edx,0x0
c0021268:	89 c7                	mov    edi,eax
c002126a:	89 d5                	mov    ebp,edx
c002126c:	83 c4 10             	add    esp,0x10
c002126f:	31 c9                	xor    ecx,ecx
c0021271:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021278:	83 f9 28             	cmp    ecx,0x28
c002127b:	88 04 24             	mov    BYTE PTR [esp],al
c002127e:	0f 94 c2             	sete   dl
c0021281:	88 d0                	mov    al,dl
c0021283:	ba ff 07 00 00       	mov    edx,0x7ff
c0021288:	39 fa                	cmp    edx,edi
c002128a:	ba 00 00 00 00       	mov    edx,0x0
c002128f:	19 ea                	sbb    edx,ebp
c0021291:	0f 92 c2             	setb   dl
c0021294:	09 c2                	or     edx,eax
c0021296:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002129a:	0f 94 c0             	sete   al
c002129d:	08 d0                	or     al,dl
c002129f:	75 16                	jne    c00212b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00212a1:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00212a5:	74 10                	je     c00212b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00212a7:	8a 04 24             	mov    al,BYTE PTR [esp]
c00212aa:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00212ae:	41                   	inc    ecx
c00212af:	83 c7 01             	add    edi,0x1
c00212b2:	83 d5 00             	adc    ebp,0x0
c00212b5:	eb ba                	jmp    c0021271 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00212b7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00212be:	83 ec 0c             	sub    esp,0xc
c00212c1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00212c5:	57                   	push   edi
c00212c6:	e8 16 f4 fd ff       	call   c00006e1 <strlen>
c00212cb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00212d3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212d7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00212de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00212e1:	5a                   	pop    edx
c00212e2:	25 ff 07 00 00       	and    eax,0x7ff
c00212e7:	01 c8                	add    eax,ecx
c00212e9:	59                   	pop    ecx
c00212ea:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00212f0:	83 e0 02             	and    eax,0x2
c00212f3:	3c 01                	cmp    al,0x1
c00212f5:	19 c0                	sbb    eax,eax
c00212f7:	83 c0 02             	add    eax,0x2
c00212fa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212fe:	57                   	push   edi
c00212ff:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021303:	50                   	push   eax
c0021304:	e8 5a f4 fd ff       	call   c0000763 <strcpy>
c0021309:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002130d:	83 c4 10             	add    esp,0x10
c0021310:	84 c0                	test   al,al
c0021312:	75 21                	jne    c0021335 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021314:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002131c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021324:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002132c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021333:	eb 28                	jmp    c002135d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021335:	fe c8                	dec    al
c0021337:	75 24                	jne    c002135d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021339:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021341:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021349:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021351:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021358:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002135d:	0f b6 fb             	movzx  edi,bl
c0021360:	31 db                	xor    ebx,ebx
c0021362:	50                   	push   eax
c0021363:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c002136a:	8d 44 24 48          	lea    eax,[esp+0x48]
c002136e:	50                   	push   eax
c002136f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021376:	e8 25 f3 fd ff       	call   c00006a0 <memcpy>
c002137b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021382:	89 f9                	mov    ecx,edi
c0021384:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002138a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c002138d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021390:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021393:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021396:	83 c4 10             	add    esp,0x10
c0021399:	39 c7                	cmp    edi,eax
c002139b:	89 df                	mov    edi,ebx
c002139d:	19 d7                	sbb    edi,edx
c002139f:	72 10                	jb     c00213b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00213a1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00213a8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00213af:	eb 0a                	jmp    c00213bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00213b1:	29 c8                	sub    eax,ecx
c00213b3:	19 da                	sbb    edx,ebx
c00213b5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00213b8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00213bb:	31 c0                	xor    eax,eax
c00213bd:	eb 05                	jmp    c00213c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00213bf:	b8 04 00 00 00       	mov    eax,0x4
c00213c4:	81 c4 5c 09 00 00    	add    esp,0x95c
c00213ca:	5b                   	pop    ebx
c00213cb:	5e                   	pop    esi
c00213cc:	5f                   	pop    edi
c00213cd:	5d                   	pop    ebp
c00213ce:	c3                   	ret    

c00213cf <readRoot(unsigned int*, unsigned int*, char)>:
c00213cf:	81 ec 40 08 00 00    	sub    esp,0x840
c00213d5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00213dd:	50                   	push   eax
c00213de:	8d 44 24 38          	lea    eax,[esp+0x38]
c00213e2:	50                   	push   eax
c00213e3:	6a 10                	push   0x10
c00213e5:	e8 a1 fa ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213ea:	83 c4 0c             	add    esp,0xc
c00213ed:	6a 22                	push   0x22
c00213ef:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00213f6:	50                   	push   eax
c00213f7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00213fb:	50                   	push   eax
c00213fc:	e8 9f f2 fd ff       	call   c00006a0 <memcpy>
c0021401:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021408:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002140c:	89 10                	mov    DWORD PTR [eax],edx
c002140e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021419:	89 10                	mov    DWORD PTR [eax],edx
c002141b:	b0 01                	mov    al,0x1
c002141d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021423:	c3                   	ret    

c0021424 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021424:	55                   	push   ebp
c0021425:	57                   	push   edi
c0021426:	56                   	push   esi
c0021427:	53                   	push   ebx
c0021428:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002142e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021435:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002143c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021440:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021444:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021448:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002144c:	75 03                	jne    c0021451 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002144e:	83 c3 02             	add    ebx,0x2
c0021451:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021454:	75 03                	jne    c0021459 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021456:	43                   	inc    ebx
c0021457:	eb f8                	jmp    c0021451 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021459:	51                   	push   ecx
c002145a:	68 00 01 00 00       	push   0x100
c002145f:	6a 00                	push   0x0
c0021461:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021465:	50                   	push   eax
c0021466:	e8 59 f2 fd ff       	call   c00006c4 <memset>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	31 d2                	xor    edx,edx
c0021470:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021473:	84 c0                	test   al,al
c0021475:	74 21                	je     c0021498 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021477:	3c 2f                	cmp    al,0x2f
c0021479:	75 0b                	jne    c0021486 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002147b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002147f:	bd 01 00 00 00       	mov    ebp,0x1
c0021484:	eb 14                	jmp    c002149a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021486:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021489:	80 f9 19             	cmp    cl,0x19
c002148c:	77 03                	ja     c0021491 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002148e:	83 e8 20             	sub    eax,0x20
c0021491:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021495:	42                   	inc    edx
c0021496:	eb d8                	jmp    c0021470 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021498:	31 ed                	xor    ebp,ebp
c002149a:	83 ec 0c             	sub    esp,0xc
c002149d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00214a4:	e8 7b e1 fe ff       	call   c000f624 <malloc>
c00214a9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00214b0:	89 c6                	mov    esi,eax
c00214b2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00214b8:	c1 ef 0b             	shr    edi,0xb
c00214bb:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00214c2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00214c6:	83 c4 10             	add    esp,0x10
c00214c9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00214ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214d2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00214d9:	74 28                	je     c0021503 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00214db:	52                   	push   edx
c00214dc:	57                   	push   edi
c00214dd:	50                   	push   eax
c00214de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214e2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00214e9:	e8 9d f9 ff ff       	call   c0020e8b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214f2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00214f9:	05 00 08 00 00       	add    eax,0x800
c00214fe:	83 c4 10             	add    esp,0x10
c0021501:	eb cb                	jmp    c00214ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021503:	83 ec 0c             	sub    esp,0xc
c0021506:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002150a:	57                   	push   edi
c002150b:	e8 d1 f1 fd ff       	call   c00006e1 <strlen>
c0021510:	50                   	push   eax
c0021511:	57                   	push   edi
c0021512:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021519:	56                   	push   esi
c002151a:	e8 2a f9 ff ff       	call   c0020e49 <__memmem(unsigned char*, int, unsigned char*, int)>
c002151f:	83 c4 20             	add    esp,0x20
c0021522:	85 c0                	test   eax,eax
c0021524:	75 13                	jne    c0021539 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	56                   	push   esi
c002152a:	e8 05 e1 fe ff       	call   c000f634 <free>
c002152f:	83 c4 10             	add    esp,0x10
c0021532:	31 c0                	xor    eax,eax
c0021534:	e9 b3 00 00 00       	jmp    c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021539:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002153d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021541:	c1 e7 08             	shl    edi,0x8
c0021544:	c1 e2 10             	shl    edx,0x10
c0021547:	09 d7                	or     edi,edx
c0021549:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002154d:	09 d7                	or     edi,edx
c002154f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021553:	c1 e2 18             	shl    edx,0x18
c0021556:	09 d7                	or     edi,edx
c0021558:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002155c:	89 d1                	mov    ecx,edx
c002155e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021562:	c1 e1 08             	shl    ecx,0x8
c0021565:	c1 e2 10             	shl    edx,0x10
c0021568:	09 ca                	or     edx,ecx
c002156a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002156e:	09 ca                	or     edx,ecx
c0021570:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021574:	c1 e1 18             	shl    ecx,0x18
c0021577:	09 ca                	or     edx,ecx
c0021579:	89 e9                	mov    ecx,ebp
c002157b:	84 c9                	test   cl,cl
c002157d:	74 3c                	je     c00215bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002157f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021583:	83 ec 0c             	sub    esp,0xc
c0021586:	56                   	push   esi
c0021587:	e8 a8 e0 fe ff       	call   c000f634 <free>
c002158c:	83 c4 0c             	add    esp,0xc
c002158f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021596:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002159b:	50                   	push   eax
c002159c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00215a3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00215aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215ae:	52                   	push   edx
c00215af:	57                   	push   edi
c00215b0:	53                   	push   ebx
c00215b1:	e8 6e fe ff ff       	call   c0021424 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00215b6:	83 c4 20             	add    esp,0x20
c00215b9:	eb 31                	jmp    c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00215bb:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00215be:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00215c5:	d0 e8                	shr    al,1
c00215c7:	89 3b                	mov    DWORD PTR [ebx],edi
c00215c9:	83 e0 01             	and    eax,0x1
c00215cc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00215d3:	83 ec 0c             	sub    esp,0xc
c00215d6:	89 13                	mov    DWORD PTR [ebx],edx
c00215d8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00215df:	89 03                	mov    DWORD PTR [ebx],eax
c00215e1:	56                   	push   esi
c00215e2:	e8 4d e0 fe ff       	call   c000f634 <free>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	b0 01                	mov    al,0x1
c00215ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215f2:	5b                   	pop    ebx
c00215f3:	5e                   	pop    esi
c00215f4:	5f                   	pop    edi
c00215f5:	5d                   	pop    ebp
c00215f6:	c3                   	ret    

c00215f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00215f7:	55                   	push   ebp
c00215f8:	57                   	push   edi
c00215f9:	56                   	push   esi
c00215fa:	53                   	push   ebx
c00215fb:	83 ec 20             	sub    esp,0x20
c00215fe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021602:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021606:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002160a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021612:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002161a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002161f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021625:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002162b:	57                   	push   edi
c002162c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021630:	50                   	push   eax
c0021631:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021635:	50                   	push   eax
c0021636:	e8 94 fd ff ff       	call   c00213cf <readRoot(unsigned int*, unsigned int*, char)>
c002163b:	5a                   	pop    edx
c002163c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021640:	e8 9c f0 fd ff       	call   c00006e1 <strlen>
c0021645:	83 c4 10             	add    esp,0x10
c0021648:	83 f8 03             	cmp    eax,0x3
c002164b:	77 17                	ja     c0021664 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002164d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021651:	89 03                	mov    DWORD PTR [ebx],eax
c0021653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021657:	89 06                	mov    DWORD PTR [esi],eax
c0021659:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021660:	b0 01                	mov    al,0x1
c0021662:	eb 19                	jmp    c002167d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021664:	50                   	push   eax
c0021665:	55                   	push   ebp
c0021666:	57                   	push   edi
c0021667:	56                   	push   esi
c0021668:	53                   	push   ebx
c0021669:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002166d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021675:	e8 aa fd ff ff       	call   c0021424 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002167a:	83 c4 20             	add    esp,0x20
c002167d:	83 c4 1c             	add    esp,0x1c
c0021680:	5b                   	pop    ebx
c0021681:	5e                   	pop    esi
c0021682:	5f                   	pop    edi
c0021683:	5d                   	pop    ebp
c0021684:	c3                   	ret    
c0021685:	90                   	nop

c0021686 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021686:	57                   	push   edi
c0021687:	56                   	push   esi
c0021688:	53                   	push   ebx
c0021689:	83 ec 10             	sub    esp,0x10
c002168c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021690:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021694:	85 ff                	test   edi,edi
c0021696:	0f 84 9d 00 00 00    	je     c0021739 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002169c:	85 f6                	test   esi,esi
c002169e:	0f 84 95 00 00 00    	je     c0021739 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00216a4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00216a9:	74 17                	je     c00216c2 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00216ab:	83 ec 0c             	sub    esp,0xc
c00216ae:	68 4b bf 02 c0       	push   0xc002bf4b
c00216b3:	e8 3b 12 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00216b8:	83 c4 10             	add    esp,0x10
c00216bb:	b8 03 00 00 00       	mov    eax,0x3
c00216c0:	eb 7c                	jmp    c002173e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00216c2:	83 ec 0c             	sub    esp,0xc
c00216c5:	6a 1c                	push   0x1c
c00216c7:	e8 58 df fe ff       	call   c000f624 <malloc>
c00216cc:	89 07                	mov    DWORD PTR [edi],eax
c00216ce:	89 c3                	mov    ebx,eax
c00216d0:	58                   	pop    eax
c00216d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216d5:	50                   	push   eax
c00216d6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00216d9:	50                   	push   eax
c00216da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216de:	50                   	push   eax
c00216df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216e3:	50                   	push   eax
c00216e4:	56                   	push   esi
c00216e5:	e8 0d ff ff ff       	call   c00215f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00216ea:	83 c4 20             	add    esp,0x20
c00216ed:	84 c0                	test   al,al
c00216ef:	74 07                	je     c00216f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00216f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00216f6:	74 0b                	je     c0021703 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00216f8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00216fc:	b8 01 00 00 00       	mov    eax,0x1
c0021701:	eb 3b                	jmp    c002173e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021707:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002170b:	89 03                	mov    DWORD PTR [ebx],eax
c002170d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021718:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002171f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021726:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021730:	8a 06                	mov    al,BYTE PTR [esi]
c0021732:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021735:	31 c0                	xor    eax,eax
c0021737:	eb 05                	jmp    c002173e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021739:	b8 04 00 00 00       	mov    eax,0x4
c002173e:	83 c4 10             	add    esp,0x10
c0021741:	5b                   	pop    ebx
c0021742:	5e                   	pop    esi
c0021743:	5f                   	pop    edi
c0021744:	c3                   	ret    
c0021745:	90                   	nop

c0021746 <ISO9660::exists(char const*)>:
c0021746:	83 ec 28             	sub    esp,0x28
c0021749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002174d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021751:	52                   	push   edx
c0021752:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021755:	52                   	push   edx
c0021756:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002175a:	52                   	push   edx
c002175b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002175f:	52                   	push   edx
c0021760:	50                   	push   eax
c0021761:	e8 91 fe ff ff       	call   c00215f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021766:	83 c4 3c             	add    esp,0x3c
c0021769:	c3                   	ret    

c002176a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002176a:	56                   	push   esi
c002176b:	53                   	push   ebx
c002176c:	83 ec 14             	sub    esp,0x14
c002176f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021773:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021777:	85 db                	test   ebx,ebx
c0021779:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002177d:	0f 94 c2             	sete   dl
c0021780:	85 f6                	test   esi,esi
c0021782:	0f 94 c0             	sete   al
c0021785:	08 c2                	or     dl,al
c0021787:	75 68                	jne    c00217f1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021789:	85 c9                	test   ecx,ecx
c002178b:	74 64                	je     c00217f1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002178d:	83 ec 0c             	sub    esp,0xc
c0021790:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021793:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021797:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002179d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217a4:	50                   	push   eax
c00217a5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00217a8:	50                   	push   eax
c00217a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217ad:	50                   	push   eax
c00217ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217b2:	50                   	push   eax
c00217b3:	51                   	push   ecx
c00217b4:	e8 3e fe ff ff       	call   c00215f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00217b9:	83 c4 20             	add    esp,0x20
c00217bc:	ba 01 00 00 00       	mov    edx,0x1
c00217c1:	84 c0                	test   al,al
c00217c3:	74 31                	je     c00217f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217d0:	89 03                	mov    DWORD PTR [ebx],eax
c00217d2:	ba 00 00 00 00       	mov    edx,0x0
c00217d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217db:	85 c0                	test   eax,eax
c00217dd:	0f 95 06             	setne  BYTE PTR [esi]
c00217e0:	74 14                	je     c00217f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00217e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217ef:	eb 05                	jmp    c00217f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217f1:	ba 04 00 00 00       	mov    edx,0x4
c00217f6:	83 c4 14             	add    esp,0x14
c00217f9:	89 d0                	mov    eax,edx
c00217fb:	5b                   	pop    ebx
c00217fc:	5e                   	pop    esi
c00217fd:	c3                   	ret    

c00217fe <ISO9660::openDir(char const*, void**)>:
c00217fe:	57                   	push   edi
c00217ff:	56                   	push   esi
c0021800:	53                   	push   ebx
c0021801:	83 ec 10             	sub    esp,0x10
c0021804:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021808:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002180c:	85 ff                	test   edi,edi
c002180e:	0f 84 95 00 00 00    	je     c00218a9 <ISO9660::openDir(char const*, void**)+0xab>
c0021814:	85 f6                	test   esi,esi
c0021816:	0f 84 8d 00 00 00    	je     c00218a9 <ISO9660::openDir(char const*, void**)+0xab>
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	6a 1c                	push   0x1c
c0021821:	e8 fe dd fe ff       	call   c000f624 <malloc>
c0021826:	89 07                	mov    DWORD PTR [edi],eax
c0021828:	89 c3                	mov    ebx,eax
c002182a:	59                   	pop    ecx
c002182b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002182f:	50                   	push   eax
c0021830:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021833:	50                   	push   eax
c0021834:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021838:	50                   	push   eax
c0021839:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002183d:	50                   	push   eax
c002183e:	56                   	push   esi
c002183f:	e8 b3 fd ff ff       	call   c00215f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021844:	83 c4 20             	add    esp,0x20
c0021847:	84 c0                	test   al,al
c0021849:	74 07                	je     c0021852 <ISO9660::openDir(char const*, void**)+0x54>
c002184b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021850:	75 21                	jne    c0021873 <ISO9660::openDir(char const*, void**)+0x75>
c0021852:	0f b6 c0             	movzx  eax,al
c0021855:	52                   	push   edx
c0021856:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002185a:	50                   	push   eax
c002185b:	68 71 bf 02 c0       	push   0xc002bf71
c0021860:	e8 8e 10 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0021865:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021869:	83 c4 10             	add    esp,0x10
c002186c:	b8 01 00 00 00       	mov    eax,0x1
c0021871:	eb 3b                	jmp    c00218ae <ISO9660::openDir(char const*, void**)+0xb0>
c0021873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021877:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002187b:	89 03                	mov    DWORD PTR [ebx],eax
c002187d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021888:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002188f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021896:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00218a0:	8a 06                	mov    al,BYTE PTR [esi]
c00218a2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00218a5:	31 c0                	xor    eax,eax
c00218a7:	eb 05                	jmp    c00218ae <ISO9660::openDir(char const*, void**)+0xb0>
c00218a9:	b8 04 00 00 00       	mov    eax,0x4
c00218ae:	83 c4 10             	add    esp,0x10
c00218b1:	5b                   	pop    ebx
c00218b2:	5e                   	pop    esi
c00218b3:	5f                   	pop    edi
c00218b4:	c3                   	ret    
c00218b5:	90                   	nop

c00218b6 <ISO9660::ISO9660()>:
c00218b6:	83 ec 0c             	sub    esp,0xc
c00218b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218bd:	83 ec 0c             	sub    esp,0xc
c00218c0:	50                   	push   eax
c00218c1:	e8 32 13 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c00218c6:	83 c4 10             	add    esp,0x10
c00218c9:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c00218ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d2:	89 10                	mov    DWORD PTR [eax],edx
c00218d4:	90                   	nop
c00218d5:	83 c4 0c             	add    esp,0xc
c00218d8:	c3                   	ret    
c00218d9:	90                   	nop

c00218da <SoundChannel::~SoundChannel()>:
c00218da:	83 ec 0c             	sub    esp,0xc
c00218dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	50                   	push   eax
c00218e8:	e8 47 dd fe ff       	call   c000f634 <free>
c00218ed:	83 c4 10             	add    esp,0x10
c00218f0:	90                   	nop
c00218f1:	83 c4 0c             	add    esp,0xc
c00218f4:	c3                   	ret    
c00218f5:	90                   	nop

c00218f6 <SoundChannel::setSpeed(float)>:
c00218f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218fe:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021901:	c3                   	ret    

c0021902 <SoundChannel::getSpeed()>:
c0021902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021906:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021909:	c3                   	ret    

c002190a <SoundChannel::setVolume(int)>:
c002190a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190e:	83 f8 64             	cmp    eax,0x64
c0021911:	7e 05                	jle    c0021918 <SoundChannel::setVolume(int)+0xe>
c0021913:	b8 64 00 00 00       	mov    eax,0x64
c0021918:	85 c0                	test   eax,eax
c002191a:	79 02                	jns    c002191e <SoundChannel::setVolume(int)+0x14>
c002191c:	31 c0                	xor    eax,eax
c002191e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021922:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021925:	c3                   	ret    

c0021926 <SoundChannel::getVolume()>:
c0021926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002192d:	c3                   	ret    

c002192e <SoundChannel::pause()>:
c002192e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021932:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021936:	c3                   	ret    
c0021937:	90                   	nop

c0021938 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021938:	83 ec 1c             	sub    esp,0x1c
c002193b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002193f:	e8 ea ff ff ff       	call   c002192e <SoundChannel::pause()>
c0021944:	83 c4 04             	add    esp,0x4
c0021947:	6a 50                	push   0x50
c0021949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002194d:	e8 b8 ff ff ff       	call   c002190a <SoundChannel::setVolume(int)>
c0021952:	83 c4 08             	add    esp,0x8
c0021955:	a1 0c c0 02 c0       	mov    eax,ds:0xc002c00c
c002195a:	50                   	push   eax
c002195b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002195f:	e8 92 ff ff ff       	call   c00218f6 <SoundChannel::setSpeed(float)>
c0021964:	83 c4 08             	add    esp,0x8
c0021967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002196b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002196f:	89 10                	mov    DWORD PTR [eax],edx
c0021971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021975:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021979:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002197c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021980:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021984:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021987:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002198c:	75 23                	jne    c00219b1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002198e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021992:	8b 10                	mov    edx,DWORD PTR [eax]
c0021994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002199b:	0f af c2             	imul   eax,edx
c002199e:	85 c0                	test   eax,eax
c00219a0:	79 03                	jns    c00219a5 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00219a2:	83 c0 03             	add    eax,0x3
c00219a5:	c1 f8 02             	sar    eax,0x2
c00219a8:	05 a0 0f 00 00       	add    eax,0xfa0
c00219ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00219b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219b9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00219bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00219c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00219d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00219d9:	c1 e0 02             	shl    eax,0x2
c00219dc:	83 ec 0c             	sub    esp,0xc
c00219df:	50                   	push   eax
c00219e0:	e8 3f dc fe ff       	call   c000f624 <malloc>
c00219e5:	83 c4 10             	add    esp,0x10
c00219e8:	89 c2                	mov    edx,eax
c00219ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00219f1:	83 ec 04             	sub    esp,0x4
c00219f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219f8:	50                   	push   eax
c00219f9:	6a 01                	push   0x1
c00219fb:	6a 04                	push   0x4
c00219fd:	e8 86 6f fe ff       	call   c0008988 <src_new>
c0021a02:	83 c4 10             	add    esp,0x10
c0021a05:	89 c2                	mov    edx,eax
c0021a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a12:	85 c0                	test   eax,eax
c0021a14:	74 10                	je     c0021a26 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021a16:	83 ec 0c             	sub    esp,0xc
c0021a19:	68 f0 bf 02 c0       	push   0xc002bff0
c0021a1e:	e8 76 84 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0021a23:	83 c4 10             	add    esp,0x10
c0021a26:	a0 20 0e 03 c0       	mov    al,ds:0xc0030e20
c0021a2b:	83 f0 01             	xor    eax,0x1
c0021a2e:	84 c0                	test   al,al
c0021a30:	74 57                	je     c0021a89 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021a32:	a1 10 c0 02 c0       	mov    eax,ds:0xc002c010
c0021a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a43:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a4b:	7f 35                	jg     c0021a82 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021a4d:	83 ec 0c             	sub    esp,0xc
c0021a50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a54:	e8 1e 50 00 00       	call   c0026a77 <__floatsisf>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	8b 15 10 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c010
c0021a62:	83 ec 08             	sub    esp,0x8
c0021a65:	52                   	push   edx
c0021a66:	50                   	push   eax
c0021a67:	e8 1d 4c 00 00       	call   c0026689 <__mulsf3>
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	89 c2                	mov    edx,eax
c0021a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a75:	89 14 85 20 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5e0],edx
c0021a7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a80:	eb c1                	jmp    c0021a43 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021a82:	c6 05 20 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e20,0x1
c0021a89:	90                   	nop
c0021a8a:	83 c4 1c             	add    esp,0x1c
c0021a8d:	c3                   	ret    

c0021a8e <SoundChannel::play()>:
c0021a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a92:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021a96:	c3                   	ret    
c0021a97:	90                   	nop

c0021a98 <SoundChannel::paused()>:
c0021a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a9c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021a9f:	c3                   	ret    

c0021aa0 <SoundChannel::getSampleRate()>:
c0021aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aa6:	c3                   	ret    
c0021aa7:	90                   	nop

c0021aa8 <SoundChannel::getBits()>:
c0021aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aaf:	c3                   	ret    

c0021ab0 <SoundChannel::getBufferUsed()>:
c0021ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ab4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ab7:	c3                   	ret    

c0021ab8 <SoundChannel::getBufferSize()>:
c0021ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021abc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021abf:	c3                   	ret    

c0021ac0 <SoundChannel::unbuffer(float*, int, int)>:
c0021ac0:	56                   	push   esi
c0021ac1:	53                   	push   ebx
c0021ac2:	83 ec 40             	sub    esp,0x40
c0021ac5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ac9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ad0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021ad3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021ad7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021adb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021adf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ae3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ae7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021aeb:	e8 87 4f 00 00       	call   c0026a77 <__floatsisf>
c0021af0:	5a                   	pop    edx
c0021af1:	89 c6                	mov    esi,eax
c0021af3:	ff 33                	push   DWORD PTR [ebx]
c0021af5:	e8 7d 4f 00 00       	call   c0026a77 <__floatsisf>
c0021afa:	59                   	pop    ecx
c0021afb:	5a                   	pop    edx
c0021afc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021aff:	50                   	push   eax
c0021b00:	e8 84 4b 00 00       	call   c0026689 <__mulsf3>
c0021b05:	59                   	pop    ecx
c0021b06:	5a                   	pop    edx
c0021b07:	50                   	push   eax
c0021b08:	56                   	push   esi
c0021b09:	e8 3e 4d 00 00       	call   c002684c <__divsf3>
c0021b0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b11:	e8 31 62 00 00       	call   c0027d47 <__extendsfdf2>
c0021b16:	59                   	pop    ecx
c0021b17:	5e                   	pop    esi
c0021b18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021b20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b2c:	50                   	push   eax
c0021b2d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b30:	e8 48 6a fe ff       	call   c000857d <src_process>
c0021b35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b39:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b3c:	83 c4 0c             	add    esp,0xc
c0021b3f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b42:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b45:	29 d0                	sub    eax,edx
c0021b47:	c1 e0 02             	shl    eax,0x2
c0021b4a:	50                   	push   eax
c0021b4b:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b4e:	50                   	push   eax
c0021b4f:	51                   	push   ecx
c0021b50:	e8 13 eb fd ff       	call   c0000668 <memmove>
c0021b55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b59:	83 c4 44             	add    esp,0x44
c0021b5c:	5b                   	pop    ebx
c0021b5d:	5e                   	pop    esi
c0021b5e:	c3                   	ret    
c0021b5f:	90                   	nop

c0021b60 <SoundChannel::buffer8(unsigned char*, int)>:
c0021b60:	55                   	push   ebp
c0021b61:	57                   	push   edi
c0021b62:	56                   	push   esi
c0021b63:	53                   	push   ebx
c0021b64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b68:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021b6c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b73:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b76:	74 7a                	je     c0021bf2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b78:	85 ff                	test   edi,edi
c0021b7a:	7e 76                	jle    c0021bf2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b7c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021b80:	8d 70 01             	lea    esi,[eax+0x1]
c0021b83:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b86:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b89:	8b 1c 9d 20 0a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcf5e0]
c0021b90:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b93:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b96:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b99:	74 5e                	je     c0021bf9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021b9b:	83 ff 01             	cmp    edi,0x1
c0021b9e:	74 4b                	je     c0021beb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ba0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ba4:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ba7:	8d 70 01             	lea    esi,[eax+0x1]
c0021baa:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021bad:	8b 1c 9d 20 0a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcf5e0]
c0021bb4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021bb7:	b8 02 00 00 00       	mov    eax,0x2
c0021bbc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021bbf:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021bc2:	75 23                	jne    c0021be7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021bc4:	eb 27                	jmp    c0021bed <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021bc6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021bcb:	8d 71 01             	lea    esi,[ecx+0x1]
c0021bce:	40                   	inc    eax
c0021bcf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021bd2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021bd5:	8b 1c 9d 20 0a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcf5e0]
c0021bdc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021bdf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021be2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021be5:	74 06                	je     c0021bed <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021be7:	39 c7                	cmp    edi,eax
c0021be9:	75 db                	jne    c0021bc6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021beb:	89 f8                	mov    eax,edi
c0021bed:	5b                   	pop    ebx
c0021bee:	5e                   	pop    esi
c0021bef:	5f                   	pop    edi
c0021bf0:	5d                   	pop    ebp
c0021bf1:	c3                   	ret    
c0021bf2:	5b                   	pop    ebx
c0021bf3:	31 c0                	xor    eax,eax
c0021bf5:	5e                   	pop    esi
c0021bf6:	5f                   	pop    edi
c0021bf7:	5d                   	pop    ebp
c0021bf8:	c3                   	ret    
c0021bf9:	b8 01 00 00 00       	mov    eax,0x1
c0021bfe:	eb ed                	jmp    c0021bed <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021c00 <SoundDevice::SoundDevice(char const*)>:
c0021c00:	83 ec 1c             	sub    esp,0x1c
c0021c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c07:	83 ec 08             	sub    esp,0x8
c0021c0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021c0e:	50                   	push   eax
c0021c0f:	e8 f6 22 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0021c14:	83 c4 10             	add    esp,0x10
c0021c17:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0021c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c20:	89 10                	mov    DWORD PTR [eax],edx
c0021c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c26:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c34:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021c3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c46:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c4b:	7f 19                	jg     c0021c66 <SoundDevice::SoundDevice(char const*)+0x66>
c0021c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c55:	83 c2 54             	add    edx,0x54
c0021c58:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021c60:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c64:	eb e0                	jmp    c0021c46 <SoundDevice::SoundDevice(char const*)+0x46>
c0021c66:	90                   	nop
c0021c67:	83 c4 1c             	add    esp,0x1c
c0021c6a:	c3                   	ret    
c0021c6b:	90                   	nop

c0021c6c <SoundDevice::~SoundDevice()>:
c0021c6c:	53                   	push   ebx
c0021c6d:	83 ec 18             	sub    esp,0x18
c0021c70:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0021c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c79:	89 10                	mov    DWORD PTR [eax],edx
c0021c7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c83:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c88:	7f 46                	jg     c0021cd0 <SoundDevice::~SoundDevice()+0x64>
c0021c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c92:	83 c2 54             	add    edx,0x54
c0021c95:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021c99:	85 c0                	test   eax,eax
c0021c9b:	74 2d                	je     c0021cca <SoundDevice::~SoundDevice()+0x5e>
c0021c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ca5:	83 c2 54             	add    edx,0x54
c0021ca8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021cac:	85 db                	test   ebx,ebx
c0021cae:	74 1a                	je     c0021cca <SoundDevice::~SoundDevice()+0x5e>
c0021cb0:	83 ec 0c             	sub    esp,0xc
c0021cb3:	53                   	push   ebx
c0021cb4:	e8 21 fc ff ff       	call   c00218da <SoundChannel::~SoundChannel()>
c0021cb9:	83 c4 10             	add    esp,0x10
c0021cbc:	83 ec 08             	sub    esp,0x8
c0021cbf:	6a 2c                	push   0x2c
c0021cc1:	53                   	push   ebx
c0021cc2:	e8 4c 0b ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021cc7:	83 c4 10             	add    esp,0x10
c0021cca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021cce:	eb b3                	jmp    c0021c83 <SoundDevice::~SoundDevice()+0x17>
c0021cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cd4:	83 ec 0c             	sub    esp,0xc
c0021cd7:	50                   	push   eax
c0021cd8:	e8 0f 1f ff ff       	call   c0013bec <Device::~Device()>
c0021cdd:	83 c4 10             	add    esp,0x10
c0021ce0:	90                   	nop
c0021ce1:	83 c4 18             	add    esp,0x18
c0021ce4:	5b                   	pop    ebx
c0021ce5:	c3                   	ret    

c0021ce6 <SoundDevice::~SoundDevice()>:
c0021ce6:	83 ec 0c             	sub    esp,0xc
c0021ce9:	83 ec 0c             	sub    esp,0xc
c0021cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cf0:	e8 77 ff ff ff       	call   c0021c6c <SoundDevice::~SoundDevice()>
c0021cf5:	83 c4 10             	add    esp,0x10
c0021cf8:	83 ec 08             	sub    esp,0x8
c0021cfb:	68 e4 01 00 00       	push   0x1e4
c0021d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d04:	e8 0a 0b ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021d09:	83 c4 10             	add    esp,0x10
c0021d0c:	83 c4 0c             	add    esp,0xc
c0021d0f:	c3                   	ret    

c0021d10 <SoundDevice::getFreeChannelNum()>:
c0021d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021d14:	31 c0                	xor    eax,eax
c0021d16:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021d1e:	74 09                	je     c0021d29 <SoundDevice::getFreeChannelNum()+0x19>
c0021d20:	40                   	inc    eax
c0021d21:	83 f8 20             	cmp    eax,0x20
c0021d24:	75 f0                	jne    c0021d16 <SoundDevice::getFreeChannelNum()+0x6>
c0021d26:	83 c8 ff             	or     eax,0xffffffff
c0021d29:	c3                   	ret    

c0021d2a <SoundDevice::addChannel(SoundChannel*)>:
c0021d2a:	56                   	push   esi
c0021d2b:	53                   	push   ebx
c0021d2c:	51                   	push   ecx
c0021d2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021d35:	53                   	push   ebx
c0021d36:	e8 d5 ff ff ff       	call   c0021d10 <SoundDevice::getFreeChannelNum()>
c0021d3b:	5a                   	pop    edx
c0021d3c:	83 f8 ff             	cmp    eax,0xffffffff
c0021d3f:	74 51                	je     c0021d92 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d41:	85 f6                	test   esi,esi
c0021d43:	74 4d                	je     c0021d92 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d45:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021d4c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021d53:	75 30                	jne    c0021d85 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021d55:	83 ec 0c             	sub    esp,0xc
c0021d58:	56                   	push   esi
c0021d59:	e8 42 fd ff ff       	call   c0021aa0 <SoundChannel::getSampleRate()>
c0021d5e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021d64:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d67:	e8 3c fd ff ff       	call   c0021aa8 <SoundChannel::getBits()>
c0021d6c:	83 c4 0c             	add    esp,0xc
c0021d6f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021d75:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d77:	50                   	push   eax
c0021d78:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021d7e:	53                   	push   ebx
c0021d7f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021d82:	83 c4 10             	add    esp,0x10
c0021d85:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021d8b:	b8 01 00 00 00       	mov    eax,0x1
c0021d90:	eb 03                	jmp    c0021d95 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021d92:	83 c8 ff             	or     eax,0xffffffff
c0021d95:	5a                   	pop    edx
c0021d96:	5b                   	pop    ebx
c0021d97:	5e                   	pop    esi
c0021d98:	c3                   	ret    
c0021d99:	90                   	nop

c0021d9a <SoundDevice::removeChannel(int)>:
c0021d9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021da2:	83 fa 1f             	cmp    edx,0x1f
c0021da5:	77 23                	ja     c0021dca <SoundDevice::removeChannel(int)+0x30>
c0021da7:	8d 14 90             	lea    edx,[eax+edx*4]
c0021daa:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021db1:	74 17                	je     c0021dca <SoundDevice::removeChannel(int)+0x30>
c0021db3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021dbd:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021dc3:	75 05                	jne    c0021dca <SoundDevice::removeChannel(int)+0x30>
c0021dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dc7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021dca:	c3                   	ret    
c0021dcb:	90                   	nop

c0021dcc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021dcc:	57                   	push   edi
c0021dcd:	56                   	push   esi
c0021dce:	53                   	push   ebx
c0021dcf:	31 db                	xor    ebx,ebx
c0021dd1:	83 ec 10             	sub    esp,0x10
c0021dd4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021dd8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021ddc:	0f 8d cb 00 00 00    	jge    c0021ead <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021de9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021dec:	e8 56 5f 00 00       	call   c0027d47 <__extendsfdf2>
c0021df1:	83 c4 10             	add    esp,0x10
c0021df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021dfc:	68 00 00 f0 3f       	push   0x3ff00000
c0021e01:	6a 00                	push   0x0
c0021e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e0b:	e8 c3 4e 00 00       	call   c0026cd3 <__adddf3>
c0021e10:	83 c4 10             	add    esp,0x10
c0021e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e1b:	68 00 00 e0 3f       	push   0x3fe00000
c0021e20:	6a 00                	push   0x0
c0021e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e2a:	e8 21 55 00 00       	call   c0027350 <__muldf3>
c0021e2f:	83 c4 10             	add    esp,0x10
c0021e32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e3a:	68 00 00 60 40       	push   0x40600000
c0021e3f:	6a 00                	push   0x0
c0021e41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e49:	e8 02 55 00 00       	call   c0027350 <__muldf3>
c0021e4e:	59                   	pop    ecx
c0021e4f:	5f                   	pop    edi
c0021e50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021e54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021e58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e60:	e8 be 5d 00 00       	call   c0027c23 <__truncdfsf2>
c0021e65:	5a                   	pop    edx
c0021e66:	89 c7                	mov    edi,eax
c0021e68:	59                   	pop    ecx
c0021e69:	68 00 00 fe 42       	push   0x42fe0000
c0021e6e:	50                   	push   eax
c0021e6f:	e8 59 4e 00 00       	call   c0026ccd <__gesf2>
c0021e74:	83 c4 10             	add    esp,0x10
c0021e77:	85 c0                	test   eax,eax
c0021e79:	78 06                	js     c0021e81 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021e7b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021e7f:	eb 26                	jmp    c0021ea7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e81:	50                   	push   eax
c0021e82:	50                   	push   eax
c0021e83:	6a 00                	push   0x0
c0021e85:	57                   	push   edi
c0021e86:	e8 46 4e 00 00       	call   c0026cd1 <__lesf2>
c0021e8b:	83 c4 10             	add    esp,0x10
c0021e8e:	85 c0                	test   eax,eax
c0021e90:	7f 06                	jg     c0021e98 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021e92:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021e96:	eb 0f                	jmp    c0021ea7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e98:	83 ec 0c             	sub    esp,0xc
c0021e9b:	57                   	push   edi
c0021e9c:	e8 3b 5f 00 00       	call   c0027ddc <lrintf>
c0021ea1:	83 c4 10             	add    esp,0x10
c0021ea4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021ea7:	43                   	inc    ebx
c0021ea8:	e9 2b ff ff ff       	jmp    c0021dd8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021ead:	83 c4 10             	add    esp,0x10
c0021eb0:	5b                   	pop    ebx
c0021eb1:	5e                   	pop    esi
c0021eb2:	5f                   	pop    edi
c0021eb3:	c3                   	ret    

c0021eb4 <SoundDevice::getAudio(int, float*, float*)>:
c0021eb4:	55                   	push   ebp
c0021eb5:	57                   	push   edi
c0021eb6:	56                   	push   esi
c0021eb7:	53                   	push   ebx
c0021eb8:	31 db                	xor    ebx,ebx
c0021eba:	83 ec 20             	sub    esp,0x20
c0021ebd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021ec1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021ec5:	c1 e0 02             	shl    eax,0x2
c0021ec8:	50                   	push   eax
c0021ec9:	6a 00                	push   0x0
c0021ecb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021ecf:	e8 f0 e7 fd ff       	call   c00006c4 <memset>
c0021ed4:	83 c4 10             	add    esp,0x10
c0021ed7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021edb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021ee2:	85 c0                	test   eax,eax
c0021ee4:	0f 84 d7 00 00 00    	je     c0021fc1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	50                   	push   eax
c0021eee:	e8 a5 fb ff ff       	call   c0021a98 <SoundChannel::paused()>
c0021ef3:	83 c4 10             	add    esp,0x10
c0021ef6:	84 c0                	test   al,al
c0021ef8:	0f 85 c3 00 00 00    	jne    c0021fc1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021efe:	83 ec 0c             	sub    esp,0xc
c0021f01:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f08:	e8 19 fa ff ff       	call   c0021926 <SoundChannel::getVolume()>
c0021f0d:	83 c4 10             	add    esp,0x10
c0021f10:	85 c0                	test   eax,eax
c0021f12:	0f 84 a9 00 00 00    	je     c0021fc1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021f18:	83 ec 0c             	sub    esp,0xc
c0021f1b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f22:	e8 ff f9 ff ff       	call   c0021926 <SoundChannel::getVolume()>
c0021f27:	83 ec 0c             	sub    esp,0xc
c0021f2a:	50                   	push   eax
c0021f2b:	e8 47 4b 00 00       	call   c0026a77 <__floatsisf>
c0021f30:	59                   	pop    ecx
c0021f31:	5d                   	pop    ebp
c0021f32:	31 ed                	xor    ebp,ebp
c0021f34:	68 00 00 c8 42       	push   0x42c80000
c0021f39:	50                   	push   eax
c0021f3a:	e8 0d 49 00 00       	call   c002684c <__divsf3>
c0021f3f:	83 c4 10             	add    esp,0x10
c0021f42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f46:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021f4a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021f50:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021f54:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f5b:	e8 60 fb ff ff       	call   c0021ac0 <SoundChannel::unbuffer(float*, int, int)>
c0021f60:	83 c4 20             	add    esp,0x20
c0021f63:	89 c1                	mov    ecx,eax
c0021f65:	39 cd                	cmp    ebp,ecx
c0021f67:	7d 52                	jge    c0021fbb <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021f69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021f6d:	50                   	push   eax
c0021f6e:	50                   	push   eax
c0021f6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021f73:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f7a:	e8 0a 47 00 00       	call   c0026689 <__mulsf3>
c0021f7f:	5a                   	pop    edx
c0021f80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f84:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021f8a:	e8 e8 4a 00 00       	call   c0026a77 <__floatsisf>
c0021f8f:	59                   	pop    ecx
c0021f90:	5a                   	pop    edx
c0021f91:	50                   	push   eax
c0021f92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f96:	e8 b1 48 00 00       	call   c002684c <__divsf3>
c0021f9b:	59                   	pop    ecx
c0021f9c:	5a                   	pop    edx
c0021f9d:	50                   	push   eax
c0021f9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021fa2:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021fa5:	e8 bc 43 00 00       	call   c0026366 <__addsf3>
c0021faa:	83 c4 10             	add    esp,0x10
c0021fad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021fb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021fb5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021fb8:	45                   	inc    ebp
c0021fb9:	eb aa                	jmp    c0021f65 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021fbb:	39 cf                	cmp    edi,ecx
c0021fbd:	7e 02                	jle    c0021fc1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021fbf:	89 cf                	mov    edi,ecx
c0021fc1:	43                   	inc    ebx
c0021fc2:	83 fb 20             	cmp    ebx,0x20
c0021fc5:	0f 85 10 ff ff ff    	jne    c0021edb <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021fcb:	83 c4 1c             	add    esp,0x1c
c0021fce:	89 f8                	mov    eax,edi
c0021fd0:	5b                   	pop    ebx
c0021fd1:	5e                   	pop    esi
c0021fd2:	5f                   	pop    edi
c0021fd3:	5d                   	pop    ebp
c0021fd4:	c3                   	ret    
c0021fd5:	90                   	nop

c0021fd6 <PCI::open(int, int, void*)>:
c0021fd6:	83 ec 18             	sub    esp,0x18
c0021fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fdf:	50                   	push   eax
c0021fe0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021fe3:	31 c0                	xor    eax,eax
c0021fe5:	83 c4 1c             	add    esp,0x1c
c0021fe8:	c3                   	ret    
c0021fe9:	90                   	nop

c0021fea <PCI::close(int, int, void*)>:
c0021fea:	31 c0                	xor    eax,eax
c0021fec:	c3                   	ret    
c0021fed:	90                   	nop

c0021fee <PCI::PCI()>:
c0021fee:	83 ec 0c             	sub    esp,0xc
c0021ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff5:	83 ec 08             	sub    esp,0x8
c0021ff8:	68 4c c0 02 c0       	push   0xc002c04c
c0021ffd:	50                   	push   eax
c0021ffe:	e8 8b 15 ff ff       	call   c001358e <Bus::Bus(char const*)>
c0022003:	83 c4 10             	add    esp,0x10
c0022006:	ba b8 c0 02 c0       	mov    edx,0xc002c0b8
c002200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200f:	89 10                	mov    DWORD PTR [eax],edx
c0022011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022015:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002201b:	0f b6 d0             	movzx  edx,al
c002201e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022022:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022033:	0f b6 d0             	movzx  edx,al
c0022036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002203f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022043:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022049:	8d 50 01             	lea    edx,[eax+0x1]
c002204c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022050:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022056:	0f b6 d0             	movzx  edx,al
c0022059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022061:	83 c9 c0             	or     ecx,0xffffffc0
c0022064:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022068:	90                   	nop
c0022069:	83 c4 0c             	add    esp,0xc
c002206c:	c3                   	ret    
c002206d:	90                   	nop

c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002206e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022072:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022077:	89 ca                	mov    edx,ecx
c0022079:	c1 e0 10             	shl    eax,0x10
c002207c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022082:	09 d0                	or     eax,edx
c0022084:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022089:	c1 e2 08             	shl    edx,0x8
c002208c:	09 d0                	or     eax,edx
c002208e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022093:	c1 e2 0b             	shl    edx,0xb
c0022096:	09 d0                	or     eax,edx
c0022098:	ba f8 0c 00 00       	mov    edx,0xcf8
c002209d:	0d 00 00 00 80       	or     eax,0x80000000
c00220a2:	ef                   	out    dx,eax
c00220a3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00220a8:	ed                   	in     eax,dx
c00220a9:	83 e1 02             	and    ecx,0x2
c00220ac:	0f b6 c9             	movzx  ecx,cl
c00220af:	c1 e1 03             	shl    ecx,0x3
c00220b2:	d3 e8                	shr    eax,cl
c00220b4:	c3                   	ret    
c00220b5:	90                   	nop

c00220b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00220b6:	6a 00                	push   0x0
c00220b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220bd:	50                   	push   eax
c00220be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220c3:	50                   	push   eax
c00220c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220c9:	50                   	push   eax
c00220ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220ce:	e8 9b ff ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220d3:	83 c4 14             	add    esp,0x14
c00220d6:	c3                   	ret    
c00220d7:	90                   	nop

c00220d8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00220d8:	6a 0e                	push   0xe
c00220da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220df:	50                   	push   eax
c00220e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220e5:	50                   	push   eax
c00220e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220eb:	50                   	push   eax
c00220ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220f0:	e8 79 ff ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220f5:	83 c4 14             	add    esp,0x14
c00220f8:	0f b6 c0             	movzx  eax,al
c00220fb:	c3                   	ret    

c00220fc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00220fc:	55                   	push   ebp
c00220fd:	57                   	push   edi
c00220fe:	56                   	push   esi
c00220ff:	53                   	push   ebx
c0022100:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022105:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002210a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002210f:	6a 0a                	push   0xa
c0022111:	56                   	push   esi
c0022112:	55                   	push   ebp
c0022113:	57                   	push   edi
c0022114:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022118:	e8 51 ff ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002211d:	6a 0a                	push   0xa
c002211f:	89 c3                	mov    ebx,eax
c0022121:	56                   	push   esi
c0022122:	0f b6 db             	movzx  ebx,bl
c0022125:	55                   	push   ebp
c0022126:	57                   	push   edi
c0022127:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002212b:	e8 3e ff ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022130:	83 c4 28             	add    esp,0x28
c0022133:	25 00 ff 00 00       	and    eax,0xff00
c0022138:	09 d8                	or     eax,ebx
c002213a:	5b                   	pop    ebx
c002213b:	5e                   	pop    esi
c002213c:	5f                   	pop    edi
c002213d:	5d                   	pop    ebp
c002213e:	c3                   	ret    
c002213f:	90                   	nop

c0022140 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022140:	6a 08                	push   0x8
c0022142:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022147:	50                   	push   eax
c0022148:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002214d:	50                   	push   eax
c002214e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022153:	50                   	push   eax
c0022154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022158:	e8 11 ff ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002215d:	83 c4 14             	add    esp,0x14
c0022160:	0f b6 c4             	movzx  eax,ah
c0022163:	c3                   	ret    

c0022164 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022164:	6a 08                	push   0x8
c0022166:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002216b:	50                   	push   eax
c002216c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022171:	50                   	push   eax
c0022172:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022177:	50                   	push   eax
c0022178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217c:	e8 ed fe ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022181:	83 c4 14             	add    esp,0x14
c0022184:	c3                   	ret    
c0022185:	90                   	nop

c0022186 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022186:	6a 3c                	push   0x3c
c0022188:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002218d:	50                   	push   eax
c002218e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022193:	50                   	push   eax
c0022194:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022199:	50                   	push   eax
c002219a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002219e:	e8 cb fe ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221a3:	83 c4 14             	add    esp,0x14
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00221a8:	6a 18                	push   0x18
c00221aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00221af:	50                   	push   eax
c00221b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00221b5:	50                   	push   eax
c00221b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00221bb:	50                   	push   eax
c00221bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221c0:	e8 a9 fe ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221c5:	83 c4 14             	add    esp,0x14
c00221c8:	0f b6 c4             	movzx  eax,ah
c00221cb:	c3                   	ret    

c00221cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00221cc:	55                   	push   ebp
c00221cd:	57                   	push   edi
c00221ce:	56                   	push   esi
c00221cf:	53                   	push   ebx
c00221d0:	50                   	push   eax
c00221d1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00221d5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00221da:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00221df:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00221e4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00221eb:	8d 43 12             	lea    eax,[ebx+0x12]
c00221ee:	83 c3 10             	add    ebx,0x10
c00221f1:	0f b6 c0             	movzx  eax,al
c00221f4:	0f b6 db             	movzx  ebx,bl
c00221f7:	50                   	push   eax
c00221f8:	51                   	push   ecx
c00221f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00221fd:	57                   	push   edi
c00221fe:	55                   	push   ebp
c00221ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022203:	e8 66 fe ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022208:	53                   	push   ebx
c0022209:	89 c6                	mov    esi,eax
c002220b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002220f:	c1 e6 10             	shl    esi,0x10
c0022212:	51                   	push   ecx
c0022213:	57                   	push   edi
c0022214:	55                   	push   ebp
c0022215:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022219:	e8 50 fe ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002221e:	83 c4 2c             	add    esp,0x2c
c0022221:	0f b7 c0             	movzx  eax,ax
c0022224:	5b                   	pop    ebx
c0022225:	09 f0                	or     eax,esi
c0022227:	5e                   	pop    esi
c0022228:	5f                   	pop    edi
c0022229:	5d                   	pop    ebp
c002222a:	c3                   	ret    
c002222b:	90                   	nop

c002222c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002222c:	53                   	push   ebx
c002222d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022232:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022237:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002223b:	c1 e1 10             	shl    ecx,0x10
c002223e:	25 fc 00 00 00       	and    eax,0xfc
c0022243:	09 c1                	or     ecx,eax
c0022245:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002224a:	c1 e0 08             	shl    eax,0x8
c002224d:	09 c1                	or     ecx,eax
c002224f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022254:	c1 e0 0b             	shl    eax,0xb
c0022257:	09 c1                	or     ecx,eax
c0022259:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002225f:	89 c8                	mov    eax,ecx
c0022261:	ef                   	out    dx,eax
c0022262:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022267:	ed                   	in     eax,dx
c0022268:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002226d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022272:	74 0a                	je     c002227e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022274:	0f b7 d8             	movzx  ebx,ax
c0022277:	89 d0                	mov    eax,edx
c0022279:	c1 e0 10             	shl    eax,0x10
c002227c:	eb 05                	jmp    c0022283 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002227e:	66 31 c0             	xor    ax,ax
c0022281:	89 d3                	mov    ebx,edx
c0022283:	09 c3                	or     ebx,eax
c0022285:	ba f8 0c 00 00       	mov    edx,0xcf8
c002228a:	89 c8                	mov    eax,ecx
c002228c:	ef                   	out    dx,eax
c002228d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022292:	89 d8                	mov    eax,ebx
c0022294:	ef                   	out    dx,eax
c0022295:	5b                   	pop    ebx
c0022296:	c3                   	ret    
c0022297:	90                   	nop

c0022298 <PCI::checkBus(unsigned char)>:
c0022298:	56                   	push   esi
c0022299:	53                   	push   ebx
c002229a:	31 db                	xor    ebx,ebx
c002229c:	51                   	push   ecx
c002229d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00222a2:	52                   	push   edx
c00222a3:	53                   	push   ebx
c00222a4:	43                   	inc    ebx
c00222a5:	56                   	push   esi
c00222a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222aa:	e8 2b 03 00 00       	call   c00225da <PCI::checkDevice(unsigned char, unsigned char)>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	83 fb 20             	cmp    ebx,0x20
c00222b5:	75 eb                	jne    c00222a2 <PCI::checkBus(unsigned char)+0xa>
c00222b7:	58                   	pop    eax
c00222b8:	5b                   	pop    ebx
c00222b9:	5e                   	pop    esi
c00222ba:	c3                   	ret    
c00222bb:	90                   	nop

c00222bc <PCI::foundDevice(PCIDeviceInfo)>:
c00222bc:	55                   	push   ebp
c00222bd:	57                   	push   edi
c00222be:	56                   	push   esi
c00222bf:	53                   	push   ebx
c00222c0:	83 ec 1c             	sub    esp,0x1c
c00222c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00222c7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00222cd:	0f 84 52 01 00 00    	je     c0022425 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00222d3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00222d7:	66 81 f9 06 04       	cmp    cx,0x406
c00222dc:	75 2c                	jne    c002230a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00222de:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00222e3:	50                   	push   eax
c00222e4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00222e9:	50                   	push   eax
c00222ea:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00222ef:	50                   	push   eax
c00222f0:	56                   	push   esi
c00222f1:	e8 b2 fe ff ff       	call   c00221a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00222f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00222fa:	0f b6 c0             	movzx  eax,al
c00222fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022301:	83 c4 2c             	add    esp,0x2c
c0022304:	5b                   	pop    ebx
c0022305:	5e                   	pop    esi
c0022306:	5f                   	pop    edi
c0022307:	5d                   	pop    ebp
c0022308:	eb 8e                	jmp    c0022298 <PCI::checkBus(unsigned char)>
c002230a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002230e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022314:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022318:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002231c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022320:	88 d3                	mov    bl,dl
c0022322:	85 c0                	test   eax,eax
c0022324:	74 33                	je     c0022359 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022326:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022329:	85 d2                	test   edx,edx
c002232b:	74 28                	je     c0022355 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002232d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022333:	31 ef                	xor    edi,ebp
c0022335:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002233b:	75 18                	jne    c0022355 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002233d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022341:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022347:	75 0c                	jne    c0022355 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022349:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002234f:	0f 84 d0 00 00 00    	je     c0022425 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022355:	8b 00                	mov    eax,DWORD PTR [eax]
c0022357:	eb c9                	jmp    c0022322 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022359:	66 81 f9 01 06       	cmp    cx,0x601
c002235e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022362:	75 19                	jne    c002237d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022364:	83 ec 0c             	sub    esp,0xc
c0022367:	68 64 01 00 00       	push   0x164
c002236c:	e8 b3 d2 fe ff       	call   c000f624 <malloc>
c0022371:	89 c5                	mov    ebp,eax
c0022373:	89 04 24             	mov    DWORD PTR [esp],eax
c0022376:	e8 95 0f 00 00       	call   c0023310 <SATABus::SATABus()>
c002237b:	eb 1e                	jmp    c002239b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002237d:	66 81 f9 01 01       	cmp    cx,0x101
c0022382:	75 60                	jne    c00223e4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022384:	83 ec 0c             	sub    esp,0xc
c0022387:	68 70 02 00 00       	push   0x270
c002238c:	e8 93 d2 fe ff       	call   c000f624 <malloc>
c0022391:	89 c5                	mov    ebp,eax
c0022393:	89 04 24             	mov    DWORD PTR [esp],eax
c0022396:	e8 03 03 00 00       	call   c002269e <IDE::IDE()>
c002239b:	58                   	pop    eax
c002239c:	5a                   	pop    edx
c002239d:	55                   	push   ebp
c002239e:	56                   	push   esi
c002239f:	e8 76 19 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00223a4:	83 ec 1c             	sub    esp,0x1c
c00223a7:	b9 09 00 00 00       	mov    ecx,0x9
c00223ac:	fc                   	cld    
c00223ad:	89 e7                	mov    edi,esp
c00223af:	89 de                	mov    esi,ebx
c00223b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00223b3:	55                   	push   ebp
c00223b4:	e8 6b 18 ff ff       	call   c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c00223b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00223bc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00223c0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00223c8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00223d0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00223d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223db:	83 c4 4c             	add    esp,0x4c
c00223de:	5b                   	pop    ebx
c00223df:	5e                   	pop    esi
c00223e0:	5f                   	pop    edi
c00223e1:	5d                   	pop    ebp
c00223e2:	ff e0                	jmp    eax
c00223e4:	83 ec 0c             	sub    esp,0xc
c00223e7:	68 58 01 00 00       	push   0x158
c00223ec:	e8 33 d2 fe ff       	call   c000f624 <malloc>
c00223f1:	89 c5                	mov    ebp,eax
c00223f3:	58                   	pop    eax
c00223f4:	5a                   	pop    edx
c00223f5:	68 54 c0 02 c0       	push   0xc002c054
c00223fa:	55                   	push   ebp
c00223fb:	e8 10 1c ff ff       	call   c0014010 <DriverlessDevice::DriverlessDevice(char const*)>
c0022400:	59                   	pop    ecx
c0022401:	5f                   	pop    edi
c0022402:	55                   	push   ebp
c0022403:	56                   	push   esi
c0022404:	e8 11 19 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0022409:	b9 09 00 00 00       	mov    ecx,0x9
c002240e:	fc                   	cld    
c002240f:	89 df                	mov    edi,ebx
c0022411:	89 de                	mov    esi,ebx
c0022413:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022415:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022419:	83 c4 2c             	add    esp,0x2c
c002241c:	5b                   	pop    ebx
c002241d:	5e                   	pop    esi
c002241e:	5f                   	pop    edi
c002241f:	5d                   	pop    ebp
c0022420:	e9 ff 17 ff ff       	jmp    c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c0022425:	83 c4 1c             	add    esp,0x1c
c0022428:	5b                   	pop    ebx
c0022429:	5e                   	pop    esi
c002242a:	5f                   	pop    edi
c002242b:	5d                   	pop    ebp
c002242c:	c3                   	ret    
c002242d:	90                   	nop

c002242e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002242e:	55                   	push   ebp
c002242f:	57                   	push   edi
c0022430:	56                   	push   esi
c0022431:	53                   	push   ebx
c0022432:	83 ec 5c             	sub    esp,0x5c
c0022435:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002243d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022441:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022446:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002244a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002244e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022457:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002245c:	6a 0c                	push   0xc
c002245e:	55                   	push   ebp
c002245f:	53                   	push   ebx
c0022460:	57                   	push   edi
c0022461:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022468:	e8 01 fc ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002246d:	55                   	push   ebp
c002246e:	53                   	push   ebx
c002246f:	57                   	push   edi
c0022470:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022477:	e8 80 fc ff ff       	call   c00220fc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002247c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022481:	83 c4 24             	add    esp,0x24
c0022484:	55                   	push   ebp
c0022485:	53                   	push   ebx
c0022486:	57                   	push   edi
c0022487:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002248b:	e8 f6 fc ff ff       	call   c0022186 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022490:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022494:	6a 3c                	push   0x3c
c0022496:	55                   	push   ebp
c0022497:	53                   	push   ebx
c0022498:	57                   	push   edi
c0022499:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00224a0:	e8 c9 fb ff ff       	call   c002206e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224a5:	0f b6 c4             	movzx  eax,ah
c00224a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224ac:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00224b0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00224b4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00224b9:	83 c4 24             	add    esp,0x24
c00224bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00224c2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00224c9:	74 6c                	je     c0022537 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224cb:	31 f6                	xor    esi,esi
c00224cd:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00224d3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224d9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00224df:	7e 56                	jle    c0022537 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224e1:	8d 14 f2             	lea    edx,[edx+esi*8]
c00224e4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00224eb:	39 cb                	cmp    ebx,ecx
c00224ed:	75 45                	jne    c0022534 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224ef:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00224f6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00224fa:	75 38                	jne    c0022534 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	68 6e c0 02 c0       	push   0xc002c06e
c0022504:	e8 ea 03 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022509:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c002250f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022515:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002251d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022521:	52                   	push   edx
c0022522:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022526:	53                   	push   ebx
c0022527:	68 93 c0 02 c0       	push   0xc002c093
c002252c:	e8 c2 03 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022531:	83 c4 20             	add    esp,0x20
c0022534:	46                   	inc    esi
c0022535:	eb 96                	jmp    c00224cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022537:	31 d2                	xor    edx,edx
c0022539:	83 ec 0c             	sub    esp,0xc
c002253c:	55                   	push   ebp
c002253d:	53                   	push   ebx
c002253e:	57                   	push   edi
c002253f:	52                   	push   edx
c0022540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022544:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002254b:	e8 7c fc ff ff       	call   c00221cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022550:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022554:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022558:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002255c:	42                   	inc    edx
c002255d:	83 c4 20             	add    esp,0x20
c0022560:	83 fa 06             	cmp    edx,0x6
c0022563:	75 d4                	jne    c0022539 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022565:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022569:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002256d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022571:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022575:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022579:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002257d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022582:	86 e0                	xchg   al,ah
c0022584:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022589:	55                   	push   ebp
c002258a:	53                   	push   ebx
c002258b:	57                   	push   edi
c002258c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022590:	e8 ab fb ff ff       	call   c0022140 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022595:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022599:	55                   	push   ebp
c002259a:	53                   	push   ebx
c002259b:	57                   	push   edi
c002259c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00225a3:	e8 0e fb ff ff       	call   c00220b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225a8:	83 ec 0c             	sub    esp,0xc
c00225ab:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00225b0:	b9 09 00 00 00       	mov    ecx,0x9
c00225b5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00225b9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00225bd:	fc                   	cld    
c00225be:	89 e7                	mov    edi,esp
c00225c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00225c2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00225c9:	e8 ee fc ff ff       	call   c00222bc <PCI::foundDevice(PCIDeviceInfo)>
c00225ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225d4:	5b                   	pop    ebx
c00225d5:	5e                   	pop    esi
c00225d6:	5f                   	pop    edi
c00225d7:	5d                   	pop    ebp
c00225d8:	c3                   	ret    
c00225d9:	90                   	nop

c00225da <PCI::checkDevice(unsigned char, unsigned char)>:
c00225da:	55                   	push   ebp
c00225db:	57                   	push   edi
c00225dc:	56                   	push   esi
c00225dd:	53                   	push   ebx
c00225de:	83 ec 0c             	sub    esp,0xc
c00225e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00225e5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00225ea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00225ef:	6a 00                	push   0x0
c00225f1:	56                   	push   esi
c00225f2:	57                   	push   edi
c00225f3:	55                   	push   ebp
c00225f4:	e8 bd fa ff ff       	call   c00220b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225f9:	6a 00                	push   0x0
c00225fb:	56                   	push   esi
c00225fc:	57                   	push   edi
c00225fd:	55                   	push   ebp
c00225fe:	e8 2b fe ff ff       	call   c002242e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022603:	83 c4 20             	add    esp,0x20
c0022606:	6a 00                	push   0x0
c0022608:	56                   	push   esi
c0022609:	57                   	push   edi
c002260a:	55                   	push   ebp
c002260b:	e8 c8 fa ff ff       	call   c00220d8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022610:	83 c4 10             	add    esp,0x10
c0022613:	84 c0                	test   al,al
c0022615:	79 27                	jns    c002263e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022617:	bb 01 00 00 00       	mov    ebx,0x1
c002261c:	53                   	push   ebx
c002261d:	56                   	push   esi
c002261e:	57                   	push   edi
c002261f:	55                   	push   ebp
c0022620:	e8 91 fa ff ff       	call   c00220b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022625:	83 c4 10             	add    esp,0x10
c0022628:	66 40                	inc    ax
c002262a:	74 0c                	je     c0022638 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002262c:	53                   	push   ebx
c002262d:	56                   	push   esi
c002262e:	57                   	push   edi
c002262f:	55                   	push   ebp
c0022630:	e8 f9 fd ff ff       	call   c002242e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022635:	83 c4 10             	add    esp,0x10
c0022638:	43                   	inc    ebx
c0022639:	83 fb 08             	cmp    ebx,0x8
c002263c:	75 de                	jne    c002261c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002263e:	83 c4 0c             	add    esp,0xc
c0022641:	5b                   	pop    ebx
c0022642:	5e                   	pop    esi
c0022643:	5f                   	pop    edi
c0022644:	5d                   	pop    ebp
c0022645:	c3                   	ret    

c0022646 <PCI::detect()>:
c0022646:	56                   	push   esi
c0022647:	53                   	push   ebx
c0022648:	53                   	push   ebx
c0022649:	31 db                	xor    ebx,ebx
c002264b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002264f:	6a 00                	push   0x0
c0022651:	6a 00                	push   0x0
c0022653:	6a 00                	push   0x0
c0022655:	56                   	push   esi
c0022656:	e8 7d fa ff ff       	call   c00220d8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002265b:	83 c4 10             	add    esp,0x10
c002265e:	a8 80                	test   al,0x80
c0022660:	75 21                	jne    c0022683 <PCI::detect()+0x3d>
c0022662:	51                   	push   ecx
c0022663:	51                   	push   ecx
c0022664:	6a 00                	push   0x0
c0022666:	56                   	push   esi
c0022667:	e8 2c fc ff ff       	call   c0022298 <PCI::checkBus(unsigned char)>
c002266c:	83 c4 10             	add    esp,0x10
c002266f:	eb 24                	jmp    c0022695 <PCI::detect()+0x4f>
c0022671:	52                   	push   edx
c0022672:	52                   	push   edx
c0022673:	53                   	push   ebx
c0022674:	43                   	inc    ebx
c0022675:	56                   	push   esi
c0022676:	e8 1d fc ff ff       	call   c0022298 <PCI::checkBus(unsigned char)>
c002267b:	83 c4 10             	add    esp,0x10
c002267e:	83 fb 08             	cmp    ebx,0x8
c0022681:	74 12                	je     c0022695 <PCI::detect()+0x4f>
c0022683:	53                   	push   ebx
c0022684:	6a 00                	push   0x0
c0022686:	6a 00                	push   0x0
c0022688:	56                   	push   esi
c0022689:	e8 28 fa ff ff       	call   c00220b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002268e:	83 c4 10             	add    esp,0x10
c0022691:	66 40                	inc    ax
c0022693:	74 dc                	je     c0022671 <PCI::detect()+0x2b>
c0022695:	58                   	pop    eax
c0022696:	5b                   	pop    ebx
c0022697:	5e                   	pop    esi
c0022698:	c3                   	ret    
c0022699:	90                   	nop

c002269a <IDE::close(int, int, void*)>:
c002269a:	83 c8 ff             	or     eax,0xffffffff
c002269d:	c3                   	ret    

c002269e <IDE::IDE()>:
c002269e:	83 ec 0c             	sub    esp,0xc
c00226a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a5:	83 ec 08             	sub    esp,0x8
c00226a8:	68 dc c0 02 c0       	push   0xc002c0dc
c00226ad:	50                   	push   eax
c00226ae:	e8 f3 19 ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	ba 1c c3 02 c0       	mov    edx,0xc002c31c
c00226bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226bf:	89 10                	mov    DWORD PTR [eax],edx
c00226c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226c5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00226cc:	90                   	nop
c00226cd:	83 c4 0c             	add    esp,0xc
c00226d0:	c3                   	ret    
c00226d1:	90                   	nop

c00226d2 <IDE::prepareInterrupt(unsigned char)>:
c00226d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00226d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226db:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00226e3:	c3                   	ret    

c00226e4 <selectDrive(unsigned char, unsigned char)>:
c00226e4:	c3                   	ret    
c00226e5:	90                   	nop

c00226e6 <IDE::getBase(unsigned char)>:
c00226e6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00226eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226ef:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00226f7:	c3                   	ret    

c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00226f8:	55                   	push   ebp
c00226f9:	57                   	push   edi
c00226fa:	56                   	push   esi
c00226fb:	53                   	push   ebx
c00226fc:	83 ec 1c             	sub    esp,0x1c
c00226ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022703:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022707:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002270a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002270e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022712:	80 f9 03             	cmp    cl,0x3
c0022715:	77 51                	ja     c0022768 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022717:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002271b:	0f b6 f2             	movzx  esi,dl
c002271e:	0f b6 db             	movzx  ebx,bl
c0022721:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022724:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022728:	83 ca 80             	or     edx,0xffffff80
c002272b:	0f b6 d2             	movzx  edx,dl
c002272e:	52                   	push   edx
c002272f:	6a 0c                	push   0xc
c0022731:	56                   	push   esi
c0022732:	57                   	push   edi
c0022733:	e8 c0 ff ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022738:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002273d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022741:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022745:	ee                   	out    dx,al
c0022746:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002274b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002274f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022753:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022757:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002275f:	83 c4 2c             	add    esp,0x2c
c0022762:	5b                   	pop    ebx
c0022763:	5e                   	pop    esi
c0022764:	5f                   	pop    edi
c0022765:	5d                   	pop    ebp
c0022766:	eb 90                	jmp    c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022768:	80 fb 07             	cmp    bl,0x7
c002276b:	77 12                	ja     c002277f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002276d:	0f b6 d2             	movzx  edx,dl
c0022770:	0f b6 db             	movzx  ebx,bl
c0022773:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002277b:	89 da                	mov    edx,ebx
c002277d:	eb 2f                	jmp    c00227ae <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002277f:	80 fb 0d             	cmp    bl,0xd
c0022782:	77 13                	ja     c0022797 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022784:	0f b6 d2             	movzx  edx,dl
c0022787:	0f b6 db             	movzx  ebx,bl
c002278a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022791:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022795:	eb 17                	jmp    c00227ae <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022797:	80 fb 15             	cmp    bl,0x15
c002279a:	77 13                	ja     c00227af <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002279c:	0f b6 d2             	movzx  edx,dl
c002279f:	0f b6 db             	movzx  ebx,bl
c00227a2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00227aa:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00227ae:	ee                   	out    dx,al
c00227af:	83 c4 1c             	add    esp,0x1c
c00227b2:	5b                   	pop    ebx
c00227b3:	5e                   	pop    esi
c00227b4:	5f                   	pop    edi
c00227b5:	5d                   	pop    ebp
c00227b6:	c3                   	ret    
c00227b7:	90                   	nop

c00227b8 <IDE::read(unsigned char, unsigned char)>:
c00227b8:	55                   	push   ebp
c00227b9:	57                   	push   edi
c00227ba:	56                   	push   esi
c00227bb:	53                   	push   ebx
c00227bc:	83 ec 1c             	sub    esp,0x1c
c00227bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00227c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00227c7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00227ca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00227ce:	3c 03                	cmp    al,0x3
c00227d0:	77 43                	ja     c0022815 <IDE::read(unsigned char, unsigned char)+0x5d>
c00227d2:	0f b6 f2             	movzx  esi,dl
c00227d5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00227d8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00227dc:	83 c8 80             	or     eax,0xffffff80
c00227df:	0f b6 c0             	movzx  eax,al
c00227e2:	50                   	push   eax
c00227e3:	6a 0c                	push   0xc
c00227e5:	56                   	push   esi
c00227e6:	57                   	push   edi
c00227e7:	e8 0c ff ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227ec:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00227f1:	0f b6 c3             	movzx  eax,bl
c00227f4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00227f8:	ec                   	in     al,dx
c00227f9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00227fd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022802:	52                   	push   edx
c0022803:	6a 0c                	push   0xc
c0022805:	56                   	push   esi
c0022806:	57                   	push   edi
c0022807:	e8 ec fe ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002280c:	83 c4 20             	add    esp,0x20
c002280f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022813:	eb 49                	jmp    c002285e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022815:	80 fb 07             	cmp    bl,0x7
c0022818:	77 12                	ja     c002282c <IDE::read(unsigned char, unsigned char)+0x74>
c002281a:	0f b6 d2             	movzx  edx,dl
c002281d:	0f b6 c3             	movzx  eax,bl
c0022820:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022828:	89 c2                	mov    edx,eax
c002282a:	eb 31                	jmp    c002285d <IDE::read(unsigned char, unsigned char)+0xa5>
c002282c:	80 fb 0d             	cmp    bl,0xd
c002282f:	77 13                	ja     c0022844 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022831:	0f b6 d2             	movzx  edx,dl
c0022834:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002283b:	0f b6 d3             	movzx  edx,bl
c002283e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022842:	eb 19                	jmp    c002285d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022844:	31 c0                	xor    eax,eax
c0022846:	80 fb 15             	cmp    bl,0x15
c0022849:	77 13                	ja     c002285e <IDE::read(unsigned char, unsigned char)+0xa6>
c002284b:	0f b6 d2             	movzx  edx,dl
c002284e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022856:	0f b6 d3             	movzx  edx,bl
c0022859:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002285d:	ec                   	in     al,dx
c002285e:	83 c4 1c             	add    esp,0x1c
c0022861:	5b                   	pop    ebx
c0022862:	5e                   	pop    esi
c0022863:	5f                   	pop    edi
c0022864:	5d                   	pop    ebp
c0022865:	c3                   	ret    

c0022866 <IDE::waitInterrupt(unsigned char)>:
c0022866:	55                   	push   ebp
c0022867:	57                   	push   edi
c0022868:	56                   	push   esi
c0022869:	53                   	push   ebx
c002286a:	31 db                	xor    ebx,ebx
c002286c:	83 ec 0c             	sub    esp,0xc
c002286f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022873:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022878:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022880:	89 e8                	mov    eax,ebp
c0022882:	84 c0                	test   al,al
c0022884:	75 34                	jne    c00228ba <IDE::waitInterrupt(unsigned char)+0x54>
c0022886:	52                   	push   edx
c0022887:	6a 0c                	push   0xc
c0022889:	56                   	push   esi
c002288a:	57                   	push   edi
c002288b:	e8 28 ff ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022890:	83 c4 10             	add    esp,0x10
c0022893:	a8 01                	test   al,0x1
c0022895:	75 2b                	jne    c00228c2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022897:	f6 c3 04             	test   bl,0x4
c002289a:	75 16                	jne    c00228b2 <IDE::waitInterrupt(unsigned char)+0x4c>
c002289c:	83 fb 32             	cmp    ebx,0x32
c002289f:	7e 11                	jle    c00228b2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00228a1:	50                   	push   eax
c00228a2:	50                   	push   eax
c00228a3:	6a 00                	push   0x0
c00228a5:	68 80 96 98 00       	push   0x989680
c00228aa:	e8 8b b1 ff ff       	call   c001da3a <nanoSleep(unsigned long long)>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	83 fb 3c             	cmp    ebx,0x3c
c00228b5:	74 0b                	je     c00228c2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00228b7:	43                   	inc    ebx
c00228b8:	eb be                	jmp    c0022878 <IDE::waitInterrupt(unsigned char)+0x12>
c00228ba:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00228c2:	83 c4 0c             	add    esp,0xc
c00228c5:	89 e8                	mov    eax,ebp
c00228c7:	5b                   	pop    ebx
c00228c8:	5e                   	pop    esi
c00228c9:	5f                   	pop    edi
c00228ca:	5d                   	pop    ebp
c00228cb:	c3                   	ret    

c00228cc <ideChannel0IRQHandler(regs*, void*)>:
c00228cc:	83 ec 10             	sub    esp,0x10
c00228cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228d3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00228da:	6a 07                	push   0x7
c00228dc:	6a 00                	push   0x0
c00228de:	50                   	push   eax
c00228df:	e8 d4 fe ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c00228e4:	83 c4 1c             	add    esp,0x1c
c00228e7:	c3                   	ret    

c00228e8 <ideChannel1IRQHandler(regs*, void*)>:
c00228e8:	83 ec 10             	sub    esp,0x10
c00228eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228ef:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00228f6:	6a 07                	push   0x7
c00228f8:	6a 01                	push   0x1
c00228fa:	50                   	push   eax
c00228fb:	e8 b8 fe ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022900:	83 c4 1c             	add    esp,0x1c
c0022903:	c3                   	ret    

c0022904 <IDE::enableIRQs(unsigned char, bool)>:
c0022904:	57                   	push   edi
c0022905:	56                   	push   esi
c0022906:	be 04 00 00 00       	mov    esi,0x4
c002290b:	53                   	push   ebx
c002290c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022915:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002291a:	0f 94 c0             	sete   al
c002291d:	d1 e0                	shl    eax,1
c002291f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022926:	0f b6 c0             	movzx  eax,al
c0022929:	50                   	push   eax
c002292a:	6a 0c                	push   0xc
c002292c:	57                   	push   edi
c002292d:	53                   	push   ebx
c002292e:	e8 c5 fd ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022933:	83 c4 10             	add    esp,0x10
c0022936:	50                   	push   eax
c0022937:	6a 0c                	push   0xc
c0022939:	57                   	push   edi
c002293a:	53                   	push   ebx
c002293b:	e8 78 fe ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022940:	83 c4 10             	add    esp,0x10
c0022943:	4e                   	dec    esi
c0022944:	75 f0                	jne    c0022936 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022946:	5b                   	pop    ebx
c0022947:	5e                   	pop    esi
c0022948:	5f                   	pop    edi
c0022949:	c3                   	ret    

c002294a <IDE::open(int, int, void*)>:
c002294a:	55                   	push   ebp
c002294b:	57                   	push   edi
c002294c:	56                   	push   esi
c002294d:	53                   	push   ebx
c002294e:	83 ec 1c             	sub    esp,0x1c
c0022951:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022955:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002295e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022967:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002296e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022975:	0f 85 b0 02 00 00    	jne    c0022c2b <IDE::open(int, int, void*)+0x2e1>
c002297b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022981:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022985:	83 e0 7f             	and    eax,0x7f
c0022988:	3c 05                	cmp    al,0x5
c002298a:	74 04                	je     c0022990 <IDE::open(int, int, void*)+0x46>
c002298c:	3c 0f                	cmp    al,0xf
c002298e:	75 32                	jne    c00229c2 <IDE::open(int, int, void*)+0x78>
c0022990:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022996:	83 e0 fc             	and    eax,0xfffffffc
c0022999:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00229a0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00229a6:	83 e0 fc             	and    eax,0xfffffffc
c00229a9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00229b0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00229b6:	83 e0 fc             	and    eax,0xfffffffc
c00229b9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00229c0:	eb 14                	jmp    c00229d6 <IDE::open(int, int, void*)+0x8c>
c00229c2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00229cc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00229d6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00229dd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00229e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00229e8:	89 c6                	mov    esi,eax
c00229ea:	bf f8 0c 00 00       	mov    edi,0xcf8
c00229ef:	c1 e6 10             	shl    esi,0x10
c00229f2:	89 e8                	mov    eax,ebp
c00229f4:	89 fa                	mov    edx,edi
c00229f6:	c1 e0 0b             	shl    eax,0xb
c00229f9:	09 f0                	or     eax,esi
c00229fb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022a02:	c1 e6 08             	shl    esi,0x8
c0022a05:	09 c6                	or     esi,eax
c0022a07:	89 f0                	mov    eax,esi
c0022a09:	0d 08 00 00 80       	or     eax,0x80000008
c0022a0e:	ef                   	out    dx,eax
c0022a0f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022a14:	89 ca                	mov    edx,ecx
c0022a16:	ed                   	in     eax,dx
c0022a17:	c1 e8 10             	shr    eax,0x10
c0022a1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0022a1f:	0f 84 f5 00 00 00    	je     c0022b1a <IDE::open(int, int, void*)+0x1d0>
c0022a25:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022a2b:	89 fa                	mov    edx,edi
c0022a2d:	89 f0                	mov    eax,esi
c0022a2f:	ef                   	out    dx,eax
c0022a30:	b0 fe                	mov    al,0xfe
c0022a32:	89 ca                	mov    edx,ecx
c0022a34:	ee                   	out    dx,al
c0022a35:	89 f0                	mov    eax,esi
c0022a37:	89 fa                	mov    edx,edi
c0022a39:	ef                   	out    dx,eax
c0022a3a:	89 ca                	mov    edx,ecx
c0022a3c:	ed                   	in     eax,dx
c0022a3d:	3c fe                	cmp    al,0xfe
c0022a3f:	0f 85 a9 00 00 00    	jne    c0022aee <IDE::open(int, int, void*)+0x1a4>
c0022a45:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c0022a4b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022a52:	74 33                	je     c0022a87 <IDE::open(int, int, void*)+0x13d>
c0022a54:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022a5a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022a5e:	40                   	inc    eax
c0022a5f:	83 ec 0c             	sub    esp,0xc
c0022a62:	0f b6 c0             	movzx  eax,al
c0022a65:	50                   	push   eax
c0022a66:	55                   	push   ebp
c0022a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a6b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022a71:	51                   	push   ecx
c0022a72:	e8 e5 51 ff ff       	call   c0017c5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022a77:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022a7c:	83 c4 1c             	add    esp,0x1c
c0022a7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022a85:	eb 0a                	jmp    c0022a91 <IDE::open(int, int, void*)+0x147>
c0022a87:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022a91:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022a98:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022a9f:	c1 e1 10             	shl    ecx,0x10
c0022aa2:	c1 e0 08             	shl    eax,0x8
c0022aa5:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022aaa:	09 c1                	or     ecx,eax
c0022aac:	89 fa                	mov    edx,edi
c0022aae:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022ab5:	c1 e0 0b             	shl    eax,0xb
c0022ab8:	09 c1                	or     ecx,eax
c0022aba:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022ac0:	89 c8                	mov    eax,ecx
c0022ac2:	ef                   	out    dx,eax
c0022ac3:	be fc 0c 00 00       	mov    esi,0xcfc
c0022ac8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022ace:	89 f2                	mov    edx,esi
c0022ad0:	ee                   	out    dx,al
c0022ad1:	89 c8                	mov    eax,ecx
c0022ad3:	89 fa                	mov    edx,edi
c0022ad5:	ef                   	out    dx,eax
c0022ad6:	89 f2                	mov    edx,esi
c0022ad8:	ed                   	in     eax,dx
c0022ad9:	0f b6 c0             	movzx  eax,al
c0022adc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022ae2:	74 46                	je     c0022b2a <IDE::open(int, int, void*)+0x1e0>
c0022ae4:	83 ec 0c             	sub    esp,0xc
c0022ae7:	68 f4 c0 02 c0       	push   0xc002c0f4
c0022aec:	eb 34                	jmp    c0022b22 <IDE::open(int, int, void*)+0x1d8>
c0022aee:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022af7:	75 17                	jne    c0022b10 <IDE::open(int, int, void*)+0x1c6>
c0022af9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022afe:	74 07                	je     c0022b07 <IDE::open(int, int, void*)+0x1bd>
c0022b00:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022b05:	75 09                	jne    c0022b10 <IDE::open(int, int, void*)+0x1c6>
c0022b07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022b0e:	eb 1a                	jmp    c0022b2a <IDE::open(int, int, void*)+0x1e0>
c0022b10:	83 ec 0c             	sub    esp,0xc
c0022b13:	68 fc c0 02 c0       	push   0xc002c0fc
c0022b18:	eb 08                	jmp    c0022b22 <IDE::open(int, int, void*)+0x1d8>
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	68 2d c1 02 c0       	push   0xc002c12d
c0022b22:	e8 72 73 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0022b27:	83 c4 10             	add    esp,0x10
c0022b2a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022b31:	79 1a                	jns    c0022b4d <IDE::open(int, int, void*)+0x203>
c0022b33:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022b39:	83 e0 fc             	and    eax,0xfffffffc
c0022b3c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022b43:	83 c0 08             	add    eax,0x8
c0022b46:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022b4d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022b53:	89 c2                	mov    edx,eax
c0022b55:	83 e2 0f             	and    edx,0xf
c0022b58:	66 83 fa 08          	cmp    dx,0x8
c0022b5c:	75 0a                	jne    c0022b68 <IDE::open(int, int, void*)+0x21e>
c0022b5e:	83 e8 02             	sub    eax,0x2
c0022b61:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b68:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022b6e:	89 c2                	mov    edx,eax
c0022b70:	83 e2 0f             	and    edx,0xf
c0022b73:	66 83 fa 08          	cmp    dx,0x8
c0022b77:	75 0a                	jne    c0022b83 <IDE::open(int, int, void*)+0x239>
c0022b79:	83 e8 02             	sub    eax,0x2
c0022b7c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022b83:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022b8a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022b91:	89 d0                	mov    eax,edx
c0022b93:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b96:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022b9a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022b9e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022ba1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022ba6:	0f b6 c9             	movzx  ecx,cl
c0022ba9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022bb0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022bb3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022bb7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022bbb:	8d 50 02             	lea    edx,[eax+0x2]
c0022bbe:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022bc3:	0f b6 d2             	movzx  edx,dl
c0022bc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022bcc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022bcf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022bd3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022bd7:	8d 48 03             	lea    ecx,[eax+0x3]
c0022bda:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bdf:	0f b6 c9             	movzx  ecx,cl
c0022be2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022be8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022beb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022bef:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022bf3:	8d 50 04             	lea    edx,[eax+0x4]
c0022bf6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022bfc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022c01:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022c08:	66 85 f6             	test   si,si
c0022c0b:	74 3e                	je     c0022c4b <IDE::open(int, int, void*)+0x301>
c0022c0d:	0f b6 d2             	movzx  edx,dl
c0022c10:	83 c0 05             	add    eax,0x5
c0022c13:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022c16:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022c1a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022c1e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022c24:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022c29:	eb 20                	jmp    c0022c4b <IDE::open(int, int, void*)+0x301>
c0022c2b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022c35:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022c3f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022c46:	e9 02 ff ff ff       	jmp    c0022b4d <IDE::open(int, int, void*)+0x203>
c0022c4b:	52                   	push   edx
c0022c4c:	52                   	push   edx
c0022c4d:	6a 00                	push   0x0
c0022c4f:	53                   	push   ebx
c0022c50:	e8 7d fa ff ff       	call   c00226d2 <IDE::prepareInterrupt(unsigned char)>
c0022c55:	59                   	pop    ecx
c0022c56:	5e                   	pop    esi
c0022c57:	6a 01                	push   0x1
c0022c59:	53                   	push   ebx
c0022c5a:	e8 73 fa ff ff       	call   c00226d2 <IDE::prepareInterrupt(unsigned char)>
c0022c5f:	83 c4 0c             	add    esp,0xc
c0022c62:	6a 00                	push   0x0
c0022c64:	6a 00                	push   0x0
c0022c66:	53                   	push   ebx
c0022c67:	e8 98 fc ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0022c6c:	83 c4 0c             	add    esp,0xc
c0022c6f:	6a 00                	push   0x0
c0022c71:	6a 01                	push   0x1
c0022c73:	53                   	push   ebx
c0022c74:	e8 8b fc ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0022c79:	83 c4 10             	add    esp,0x10
c0022c7c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022c83:	74 40                	je     c0022cc5 <IDE::open(int, int, void*)+0x37b>
c0022c85:	83 ec 0c             	sub    esp,0xc
c0022c88:	68 57 c1 02 c0       	push   0xc002c157
c0022c8d:	e8 61 fc fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022c92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c95:	6a 01                	push   0x1
c0022c97:	68 cc 28 02 c0       	push   0xc00228cc
c0022c9c:	6a 0e                	push   0xe
c0022c9e:	53                   	push   ebx
c0022c9f:	e8 fa 0f ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ca4:	83 c4 14             	add    esp,0x14
c0022ca7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022cad:	53                   	push   ebx
c0022cae:	6a 01                	push   0x1
c0022cb0:	68 e8 28 02 c0       	push   0xc00228e8
c0022cb5:	6a 0f                	push   0xf
c0022cb7:	53                   	push   ebx
c0022cb8:	e8 e1 0f ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cbd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022cc3:	eb 4a                	jmp    c0022d0f <IDE::open(int, int, void*)+0x3c5>
c0022cc5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022ccf:	50                   	push   eax
c0022cd0:	6a 0f                	push   0xf
c0022cd2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cd8:	68 73 c1 02 c0       	push   0xc002c173
c0022cdd:	e8 11 fc fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022ce2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ce5:	6a 00                	push   0x0
c0022ce7:	68 cc 28 02 c0       	push   0xc00228cc
c0022cec:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cf2:	53                   	push   ebx
c0022cf3:	e8 a6 0f ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cf8:	83 c4 14             	add    esp,0x14
c0022cfb:	53                   	push   ebx
c0022cfc:	6a 00                	push   0x0
c0022cfe:	68 e8 28 02 c0       	push   0xc00228e8
c0022d03:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022d09:	53                   	push   ebx
c0022d0a:	e8 8f 0f ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022d0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d11:	83 c4 20             	add    esp,0x20
c0022d14:	83 ec 0c             	sub    esp,0xc
c0022d17:	53                   	push   ebx
c0022d18:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022d1b:	83 c4 0c             	add    esp,0xc
c0022d1e:	6a 07                	push   0x7
c0022d20:	6a 00                	push   0x0
c0022d22:	53                   	push   ebx
c0022d23:	e8 90 fa ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022d28:	83 c4 0c             	add    esp,0xc
c0022d2b:	6a 07                	push   0x7
c0022d2d:	6a 01                	push   0x1
c0022d2f:	53                   	push   ebx
c0022d30:	e8 83 fa ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022d35:	83 c4 0c             	add    esp,0xc
c0022d38:	6a 01                	push   0x1
c0022d3a:	6a 00                	push   0x0
c0022d3c:	53                   	push   ebx
c0022d3d:	e8 c2 fb ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0022d42:	83 c4 0c             	add    esp,0xc
c0022d45:	6a 01                	push   0x1
c0022d47:	6a 01                	push   0x1
c0022d49:	53                   	push   ebx
c0022d4a:	e8 b5 fb ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0022d4f:	83 c4 2c             	add    esp,0x2c
c0022d52:	31 c0                	xor    eax,eax
c0022d54:	5b                   	pop    ebx
c0022d55:	5e                   	pop    esi
c0022d56:	5f                   	pop    edi
c0022d57:	5d                   	pop    ebp
c0022d58:	c3                   	ret    
c0022d59:	90                   	nop

c0022d5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022d5a:	55                   	push   ebp
c0022d5b:	57                   	push   edi
c0022d5c:	56                   	push   esi
c0022d5d:	53                   	push   ebx
c0022d5e:	83 ec 1c             	sub    esp,0x1c
c0022d61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d69:	8d 50 f8             	lea    edx,[eax-0x8]
c0022d6c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d70:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022d74:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022d78:	80 fa 03             	cmp    dl,0x3
c0022d7b:	77 5d                	ja     c0022dda <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022d7d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022d81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d85:	0f b6 db             	movzx  ebx,bl
c0022d88:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022d8b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022d8f:	83 ca 80             	or     edx,0xffffff80
c0022d92:	0f b6 d2             	movzx  edx,dl
c0022d95:	52                   	push   edx
c0022d96:	6a 0c                	push   0xc
c0022d98:	53                   	push   ebx
c0022d99:	56                   	push   esi
c0022d9a:	e8 59 f9 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d9f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022da8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022dac:	0f b6 c0             	movzx  eax,al
c0022daf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022db3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022db5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022dba:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022dbe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022dc2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022dc6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022dce:	83 c4 2c             	add    esp,0x2c
c0022dd1:	5b                   	pop    ebx
c0022dd2:	5e                   	pop    esi
c0022dd3:	5f                   	pop    edi
c0022dd4:	5d                   	pop    ebp
c0022dd5:	e9 1e f9 ff ff       	jmp    c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dda:	3c 07                	cmp    al,0x7
c0022ddc:	77 10                	ja     c0022dee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022dde:	0f b6 db             	movzx  ebx,bl
c0022de1:	0f b6 d0             	movzx  edx,al
c0022de4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022dec:	eb 2d                	jmp    c0022e1b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dee:	3c 0d                	cmp    al,0xd
c0022df0:	77 13                	ja     c0022e05 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022df2:	0f b6 db             	movzx  ebx,bl
c0022df5:	0f b6 c0             	movzx  eax,al
c0022df8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022dff:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022e03:	eb 16                	jmp    c0022e1b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022e05:	3c 15                	cmp    al,0x15
c0022e07:	77 14                	ja     c0022e1d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022e09:	0f b6 db             	movzx  ebx,bl
c0022e0c:	0f b6 c0             	movzx  eax,al
c0022e0f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022e17:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022e1b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022e1d:	83 c4 1c             	add    esp,0x1c
c0022e20:	5b                   	pop    ebx
c0022e21:	5e                   	pop    esi
c0022e22:	5f                   	pop    edi
c0022e23:	5d                   	pop    ebp
c0022e24:	c3                   	ret    
c0022e25:	90                   	nop

c0022e26 <IDE::detect()>:
c0022e26:	55                   	push   ebp
c0022e27:	57                   	push   edi
c0022e28:	56                   	push   esi
c0022e29:	53                   	push   ebx
c0022e2a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022e30:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022e37:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022e3e:	0f 85 be 02 00 00    	jne    c0023102 <IDE::detect()+0x2dc>
c0022e44:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022e4b:	31 f6                	xor    esi,esi
c0022e4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022e55:	31 ed                	xor    ebp,ebp
c0022e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e5b:	c1 e0 06             	shl    eax,0x6
c0022e5e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022e66:	89 e8                	mov    eax,ebp
c0022e68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022e6c:	c1 e0 04             	shl    eax,0x4
c0022e6f:	83 c8 a0             	or     eax,0xffffffa0
c0022e72:	0f b6 c0             	movzx  eax,al
c0022e75:	50                   	push   eax
c0022e76:	6a 06                	push   0x6
c0022e78:	56                   	push   esi
c0022e79:	53                   	push   ebx
c0022e7a:	e8 79 f8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e7f:	83 c4 0c             	add    esp,0xc
c0022e82:	6a 0c                	push   0xc
c0022e84:	56                   	push   esi
c0022e85:	53                   	push   ebx
c0022e86:	e8 2d f9 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022e8b:	83 c4 0c             	add    esp,0xc
c0022e8e:	6a 0c                	push   0xc
c0022e90:	56                   	push   esi
c0022e91:	53                   	push   ebx
c0022e92:	e8 21 f9 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022e97:	83 c4 0c             	add    esp,0xc
c0022e9a:	6a 0c                	push   0xc
c0022e9c:	56                   	push   esi
c0022e9d:	53                   	push   ebx
c0022e9e:	e8 15 f9 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022ea3:	83 c4 0c             	add    esp,0xc
c0022ea6:	6a 0c                	push   0xc
c0022ea8:	56                   	push   esi
c0022ea9:	53                   	push   ebx
c0022eaa:	e8 09 f9 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022eaf:	68 ec 00 00 00       	push   0xec
c0022eb4:	6a 07                	push   0x7
c0022eb6:	56                   	push   esi
c0022eb7:	53                   	push   ebx
c0022eb8:	e8 3b f8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ebd:	83 c4 1c             	add    esp,0x1c
c0022ec0:	6a 0c                	push   0xc
c0022ec2:	56                   	push   esi
c0022ec3:	53                   	push   ebx
c0022ec4:	e8 ef f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022ec9:	83 c4 0c             	add    esp,0xc
c0022ecc:	6a 0c                	push   0xc
c0022ece:	56                   	push   esi
c0022ecf:	53                   	push   ebx
c0022ed0:	e8 e3 f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022ed5:	83 c4 0c             	add    esp,0xc
c0022ed8:	6a 0c                	push   0xc
c0022eda:	56                   	push   esi
c0022edb:	53                   	push   ebx
c0022edc:	e8 d7 f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022ee1:	83 c4 0c             	add    esp,0xc
c0022ee4:	6a 0c                	push   0xc
c0022ee6:	56                   	push   esi
c0022ee7:	53                   	push   ebx
c0022ee8:	e8 cb f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022eed:	83 c4 0c             	add    esp,0xc
c0022ef0:	6a 0c                	push   0xc
c0022ef2:	56                   	push   esi
c0022ef3:	53                   	push   ebx
c0022ef4:	e8 bf f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022ef9:	83 c4 10             	add    esp,0x10
c0022efc:	84 c0                	test   al,al
c0022efe:	0f 84 8b 01 00 00    	je     c002308f <IDE::detect()+0x269>
c0022f04:	31 ff                	xor    edi,edi
c0022f06:	50                   	push   eax
c0022f07:	6a 0c                	push   0xc
c0022f09:	56                   	push   esi
c0022f0a:	53                   	push   ebx
c0022f0b:	e8 a8 f8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	a8 01                	test   al,0x1
c0022f15:	0f 85 8e 01 00 00    	jne    c00230a9 <IDE::detect()+0x283>
c0022f1b:	84 c0                	test   al,al
c0022f1d:	78 04                	js     c0022f23 <IDE::detect()+0xfd>
c0022f1f:	a8 08                	test   al,0x8
c0022f21:	75 27                	jne    c0022f4a <IDE::detect()+0x124>
c0022f23:	47                   	inc    edi
c0022f24:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022f2a:	7e da                	jle    c0022f06 <IDE::detect()+0xe0>
c0022f2c:	50                   	push   eax
c0022f2d:	50                   	push   eax
c0022f2e:	6a 00                	push   0x0
c0022f30:	68 40 4b 4c 00       	push   0x4c4b40
c0022f35:	e8 00 ab ff ff       	call   c001da3a <nanoSleep(unsigned long long)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022f43:	75 c1                	jne    c0022f06 <IDE::detect()+0xe0>
c0022f45:	e9 5f 01 00 00       	jmp    c00230a9 <IDE::detect()+0x283>
c0022f4a:	31 c9                	xor    ecx,ecx
c0022f4c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022f50:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022f54:	83 ec 0c             	sub    esp,0xc
c0022f57:	68 80 00 00 00       	push   0x80
c0022f5c:	57                   	push   edi
c0022f5d:	6a 00                	push   0x0
c0022f5f:	56                   	push   esi
c0022f60:	53                   	push   ebx
c0022f61:	e8 f4 fd ff ff       	call   c0022d5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022f66:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022f6f:	89 d1                	mov    ecx,edx
c0022f71:	c1 e0 06             	shl    eax,0x6
c0022f74:	01 d8                	add    eax,ebx
c0022f76:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022f7d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022f84:	89 f2                	mov    edx,esi
c0022f86:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022f8c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022f90:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022f96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f9a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022fa1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022fa9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022fb0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022fb8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022fbe:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022fc5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022fcb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022fcf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022fd3:	83 c4 20             	add    esp,0x20
c0022fd6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022fd9:	83 c0 02             	add    eax,0x2
c0022fdc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022fe2:	83 c7 02             	add    edi,0x2
c0022fe5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022fe8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022fee:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022ff2:	75 e2                	jne    c0022fd6 <IDE::detect()+0x1b0>
c0022ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff8:	c1 e0 06             	shl    eax,0x6
c0022ffb:	01 d8                	add    eax,ebx
c0022ffd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023003:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002300a:	66 c1 ea 09          	shr    dx,0x9
c002300e:	83 e2 01             	and    edx,0x1
c0023011:	84 c9                	test   cl,cl
c0023013:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023019:	75 2f                	jne    c002304a <IDE::detect()+0x224>
c002301b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023021:	85 c0                	test   eax,eax
c0023023:	74 66                	je     c002308b <IDE::detect()+0x265>
c0023025:	50                   	push   eax
c0023026:	55                   	push   ebp
c0023027:	56                   	push   esi
c0023028:	68 8f c1 02 c0       	push   0xc002c18f
c002302d:	e8 c1 f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023032:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023039:	e8 e6 c5 fe ff       	call   c000f624 <malloc>
c002303e:	89 c7                	mov    edi,eax
c0023040:	89 04 24             	mov    DWORD PTR [esp],eax
c0023043:	e8 78 06 00 00       	call   c00236c0 <ATA::ATA()>
c0023048:	eb 28                	jmp    c0023072 <IDE::detect()+0x24c>
c002304a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023050:	55                   	push   ebp
c0023051:	56                   	push   esi
c0023052:	68 be c1 02 c0       	push   0xc002c1be
c0023057:	e8 97 f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002305c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023063:	e8 bc c5 fe ff       	call   c000f624 <malloc>
c0023068:	89 c7                	mov    edi,eax
c002306a:	89 04 24             	mov    DWORD PTR [esp],eax
c002306d:	e8 84 0c 00 00       	call   c0023cf6 <ATAPI::ATAPI()>
c0023072:	5a                   	pop    edx
c0023073:	59                   	pop    ecx
c0023074:	57                   	push   edi
c0023075:	53                   	push   ebx
c0023076:	e8 9f 0c ff ff       	call   c0013d1a <Device::addChild(Device*)>
c002307b:	8b 07                	mov    eax,DWORD PTR [edi]
c002307d:	53                   	push   ebx
c002307e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023082:	6a 00                	push   0x0
c0023084:	57                   	push   edi
c0023085:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023088:	83 c4 20             	add    esp,0x20
c002308b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002308f:	4d                   	dec    ebp
c0023090:	74 0a                	je     c002309c <IDE::detect()+0x276>
c0023092:	bd 01 00 00 00       	mov    ebp,0x1
c0023097:	e9 bb fd ff ff       	jmp    c0022e57 <IDE::detect()+0x31>
c002309c:	4e                   	dec    esi
c002309d:	74 63                	je     c0023102 <IDE::detect()+0x2dc>
c002309f:	be 01 00 00 00       	mov    esi,0x1
c00230a4:	e9 ac fd ff ff       	jmp    c0022e55 <IDE::detect()+0x2f>
c00230a9:	50                   	push   eax
c00230aa:	6a 04                	push   0x4
c00230ac:	56                   	push   esi
c00230ad:	53                   	push   ebx
c00230ae:	e8 05 f7 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c00230b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230b7:	83 c4 0c             	add    esp,0xc
c00230ba:	6a 05                	push   0x5
c00230bc:	56                   	push   esi
c00230bd:	53                   	push   ebx
c00230be:	e8 f5 f6 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c00230c3:	83 c4 10             	add    esp,0x10
c00230c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00230ca:	80 fa 14             	cmp    dl,0x14
c00230cd:	75 04                	jne    c00230d3 <IDE::detect()+0x2ad>
c00230cf:	3c eb                	cmp    al,0xeb
c00230d1:	eb 07                	jmp    c00230da <IDE::detect()+0x2b4>
c00230d3:	3c 96                	cmp    al,0x96
c00230d5:	75 b8                	jne    c002308f <IDE::detect()+0x269>
c00230d7:	80 fa 69             	cmp    dl,0x69
c00230da:	75 b3                	jne    c002308f <IDE::detect()+0x269>
c00230dc:	68 a1 00 00 00       	push   0xa1
c00230e1:	6a 07                	push   0x7
c00230e3:	56                   	push   esi
c00230e4:	53                   	push   ebx
c00230e5:	e8 0e f6 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ea:	5f                   	pop    edi
c00230eb:	58                   	pop    eax
c00230ec:	6a 00                	push   0x0
c00230ee:	68 40 42 0f 00       	push   0xf4240
c00230f3:	e8 42 a9 ff ff       	call   c001da3a <nanoSleep(unsigned long long)>
c00230f8:	83 c4 10             	add    esp,0x10
c00230fb:	b1 01                	mov    cl,0x1
c00230fd:	e9 4a fe ff ff       	jmp    c0022f4c <IDE::detect()+0x126>
c0023102:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023108:	5b                   	pop    ebx
c0023109:	5e                   	pop    esi
c002310a:	5f                   	pop    edi
c002310b:	5d                   	pop    ebp
c002310c:	c3                   	ret    
c002310d:	90                   	nop

c002310e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002310e:	55                   	push   ebp
c002310f:	57                   	push   edi
c0023110:	56                   	push   esi
c0023111:	53                   	push   ebx
c0023112:	83 ec 1c             	sub    esp,0x1c
c0023115:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023119:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002311d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023121:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023125:	88 c3                	mov    bl,al
c0023127:	84 c0                	test   al,al
c0023129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002312d:	0f 84 67 01 00 00    	je     c002329a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023133:	83 ec 0c             	sub    esp,0xc
c0023136:	68 ef c1 02 c0       	push   0xc002c1ef
c002313b:	e8 b3 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023140:	83 c4 10             	add    esp,0x10
c0023143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023147:	3c 01                	cmp    al,0x1
c0023149:	75 17                	jne    c0023162 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002314b:	83 ec 0c             	sub    esp,0xc
c002314e:	b3 13                	mov    bl,0x13
c0023150:	68 fb c1 02 c0       	push   0xc002c1fb
c0023155:	e8 99 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002315a:	83 c4 10             	add    esp,0x10
c002315d:	e9 25 01 00 00       	jmp    c0023287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023162:	3c 02                	cmp    al,0x2
c0023164:	0f 85 ef 00 00 00    	jne    c0023259 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002316a:	d1 e6                	shl    esi,1
c002316c:	09 ee                	or     esi,ebp
c002316e:	52                   	push   edx
c002316f:	89 f0                	mov    eax,esi
c0023171:	6a 01                	push   0x1
c0023173:	0f b6 f0             	movzx  esi,al
c0023176:	c1 e6 06             	shl    esi,0x6
c0023179:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023181:	50                   	push   eax
c0023182:	57                   	push   edi
c0023183:	e8 30 f6 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0023188:	83 c4 10             	add    esp,0x10
c002318b:	89 c6                	mov    esi,eax
c002318d:	a8 01                	test   al,0x1
c002318f:	74 12                	je     c00231a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023191:	83 ec 0c             	sub    esp,0xc
c0023194:	b3 07                	mov    bl,0x7
c0023196:	68 10 c2 02 c0       	push   0xc002c210
c002319b:	e8 53 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00231a0:	83 c4 10             	add    esp,0x10
c00231a3:	f7 c6 02 00 00 00    	test   esi,0x2
c00231a9:	74 12                	je     c00231bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00231ab:	83 ec 0c             	sub    esp,0xc
c00231ae:	b3 03                	mov    bl,0x3
c00231b0:	68 2e c2 02 c0       	push   0xc002c22e
c00231b5:	e8 39 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00231ba:	83 c4 10             	add    esp,0x10
c00231bd:	f7 c6 04 00 00 00    	test   esi,0x4
c00231c3:	74 12                	je     c00231d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00231c5:	83 ec 0c             	sub    esp,0xc
c00231c8:	b3 14                	mov    bl,0x14
c00231ca:	68 4e c2 02 c0       	push   0xc002c24e
c00231cf:	e8 1f f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00231d4:	83 c4 10             	add    esp,0x10
c00231d7:	f7 c6 08 00 00 00    	test   esi,0x8
c00231dd:	74 12                	je     c00231f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00231df:	83 ec 0c             	sub    esp,0xc
c00231e2:	b3 03                	mov    bl,0x3
c00231e4:	68 2e c2 02 c0       	push   0xc002c22e
c00231e9:	e8 05 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00231ee:	83 c4 10             	add    esp,0x10
c00231f1:	f7 c6 10 00 00 00    	test   esi,0x10
c00231f7:	74 12                	je     c002320b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00231f9:	83 ec 0c             	sub    esp,0xc
c00231fc:	b3 15                	mov    bl,0x15
c00231fe:	68 66 c2 02 c0       	push   0xc002c266
c0023203:	e8 eb f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023208:	83 c4 10             	add    esp,0x10
c002320b:	f7 c6 20 00 00 00    	test   esi,0x20
c0023211:	74 12                	je     c0023225 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023213:	83 ec 0c             	sub    esp,0xc
c0023216:	b3 03                	mov    bl,0x3
c0023218:	68 2e c2 02 c0       	push   0xc002c22e
c002321d:	e8 d1 f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023222:	83 c4 10             	add    esp,0x10
c0023225:	f7 c6 40 00 00 00    	test   esi,0x40
c002322b:	74 12                	je     c002323f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002322d:	83 ec 0c             	sub    esp,0xc
c0023230:	b3 16                	mov    bl,0x16
c0023232:	68 80 c2 02 c0       	push   0xc002c280
c0023237:	e8 b7 f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002323c:	83 c4 10             	add    esp,0x10
c002323f:	89 f0                	mov    eax,esi
c0023241:	84 c0                	test   al,al
c0023243:	79 42                	jns    c0023287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023245:	83 ec 0c             	sub    esp,0xc
c0023248:	b3 0d                	mov    bl,0xd
c002324a:	68 a1 c2 02 c0       	push   0xc002c2a1
c002324f:	e8 9f f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023254:	83 c4 10             	add    esp,0x10
c0023257:	eb 2e                	jmp    c0023287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023259:	3c 03                	cmp    al,0x3
c002325b:	75 14                	jne    c0023271 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002325d:	83 ec 0c             	sub    esp,0xc
c0023260:	b3 17                	mov    bl,0x17
c0023262:	68 b5 c2 02 c0       	push   0xc002c2b5
c0023267:	e8 87 f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002326c:	83 c4 10             	add    esp,0x10
c002326f:	eb 16                	jmp    c0023287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023271:	3c 04                	cmp    al,0x4
c0023273:	75 12                	jne    c0023287 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023275:	83 ec 0c             	sub    esp,0xc
c0023278:	b3 08                	mov    bl,0x8
c002327a:	68 cb c2 02 c0       	push   0xc002c2cb
c002327f:	e8 6f f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023284:	83 c4 10             	add    esp,0x10
c0023287:	50                   	push   eax
c0023288:	50                   	push   eax
c0023289:	0f b6 c3             	movzx  eax,bl
c002328c:	50                   	push   eax
c002328d:	68 e3 c2 02 c0       	push   0xc002c2e3
c0023292:	e8 5c f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023297:	83 c4 10             	add    esp,0x10
c002329a:	83 c4 1c             	add    esp,0x1c
c002329d:	88 d8                	mov    al,bl
c002329f:	5b                   	pop    ebx
c00232a0:	5e                   	pop    esi
c00232a1:	5f                   	pop    edi
c00232a2:	5d                   	pop    ebp
c00232a3:	c3                   	ret    

c00232a4 <IDE::polling(unsigned char, unsigned int)>:
c00232a4:	57                   	push   edi
c00232a5:	56                   	push   esi
c00232a6:	53                   	push   ebx
c00232a7:	bb 04 00 00 00       	mov    ebx,0x4
c00232ac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00232b0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00232b5:	52                   	push   edx
c00232b6:	6a 0c                	push   0xc
c00232b8:	56                   	push   esi
c00232b9:	57                   	push   edi
c00232ba:	e8 f9 f4 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c00232bf:	83 c4 10             	add    esp,0x10
c00232c2:	4b                   	dec    ebx
c00232c3:	75 f0                	jne    c00232b5 <IDE::polling(unsigned char, unsigned int)+0x11>
c00232c5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00232ca:	50                   	push   eax
c00232cb:	6a 0c                	push   0xc
c00232cd:	56                   	push   esi
c00232ce:	57                   	push   edi
c00232cf:	e8 e4 f4 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c00232d4:	83 c4 10             	add    esp,0x10
c00232d7:	a8 01                	test   al,0x1
c00232d9:	74 12                	je     c00232ed <IDE::polling(unsigned char, unsigned int)+0x49>
c00232db:	83 ec 0c             	sub    esp,0xc
c00232de:	68 fd c2 02 c0       	push   0xc002c2fd
c00232e3:	e8 0b f6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00232e8:	83 c4 10             	add    esp,0x10
c00232eb:	eb 17                	jmp    c0023304 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232ed:	a8 20                	test   al,0x20
c00232ef:	75 0f                	jne    c0023300 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00232f1:	4b                   	dec    ebx
c00232f2:	74 10                	je     c0023304 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232f4:	84 c0                	test   al,al
c00232f6:	78 d2                	js     c00232ca <IDE::polling(unsigned char, unsigned int)+0x26>
c00232f8:	a8 08                	test   al,0x8
c00232fa:	74 ce                	je     c00232ca <IDE::polling(unsigned char, unsigned int)+0x26>
c00232fc:	31 c0                	xor    eax,eax
c00232fe:	eb 06                	jmp    c0023306 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023300:	b0 01                	mov    al,0x1
c0023302:	eb 02                	jmp    c0023306 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023304:	b0 02                	mov    al,0x2
c0023306:	5b                   	pop    ebx
c0023307:	5e                   	pop    esi
c0023308:	5f                   	pop    edi
c0023309:	c3                   	ret    

c002330a <SATABus::close(int, int, void*)>:
c002330a:	31 c0                	xor    eax,eax
c002330c:	c3                   	ret    
c002330d:	90                   	nop

c002330e <SATABus::detect()>:
c002330e:	c3                   	ret    
c002330f:	90                   	nop

c0023310 <SATABus::SATABus()>:
c0023310:	83 ec 0c             	sub    esp,0xc
c0023313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023317:	83 ec 08             	sub    esp,0x8
c002331a:	68 40 c3 02 c0       	push   0xc002c340
c002331f:	50                   	push   eax
c0023320:	e8 81 0d ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c0023325:	83 c4 10             	add    esp,0x10
c0023328:	ba fc c3 02 c0       	mov    edx,0xc002c3fc
c002332d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023331:	89 10                	mov    DWORD PTR [eax],edx
c0023333:	83 ec 0c             	sub    esp,0xc
c0023336:	6a 50                	push   0x50
c0023338:	e8 4c ca fe ff       	call   c000fd89 <Phys::allocateContiguousPages(int)>
c002333d:	83 c4 10             	add    esp,0x10
c0023340:	89 c2                	mov    edx,eax
c0023342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023346:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002334c:	83 ec 0c             	sub    esp,0xc
c002334f:	6a 50                	push   0x50
c0023351:	e8 ad e5 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0023356:	83 c4 10             	add    esp,0x10
c0023359:	89 c2                	mov    edx,eax
c002335b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023365:	e8 29 e7 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c002336a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002336e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023378:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002337e:	83 ec 0c             	sub    esp,0xc
c0023381:	6a 03                	push   0x3
c0023383:	6a 50                	push   0x50
c0023385:	51                   	push   ecx
c0023386:	52                   	push   edx
c0023387:	50                   	push   eax
c0023388:	e8 35 ef fe ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002338d:	83 c4 20             	add    esp,0x20
c0023390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023394:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002339a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00233a4:	83 ec 04             	sub    esp,0x4
c00233a7:	52                   	push   edx
c00233a8:	50                   	push   eax
c00233a9:	68 64 c3 02 c0       	push   0xc002c364
c00233ae:	e8 40 f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00233b3:	83 c4 10             	add    esp,0x10
c00233b6:	90                   	nop
c00233b7:	83 c4 0c             	add    esp,0xc
c00233ba:	c3                   	ret    
c00233bb:	90                   	nop

c00233bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00233bc:	83 ec 0c             	sub    esp,0xc
c00233bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233c3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00233c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00233c9:	09 c2                	or     edx,eax
c00233cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00233d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00233d7:	31 c0                	xor    eax,eax
c00233d9:	c1 e9 08             	shr    ecx,0x8
c00233dc:	83 e1 0f             	and    ecx,0xf
c00233df:	39 c8                	cmp    eax,ecx
c00233e1:	74 0a                	je     c00233ed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00233e3:	f6 c2 01             	test   dl,0x1
c00233e6:	74 18                	je     c0023400 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00233e8:	d1 ea                	shr    edx,1
c00233ea:	40                   	inc    eax
c00233eb:	eb f2                	jmp    c00233df <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00233ed:	83 ec 0c             	sub    esp,0xc
c00233f0:	68 88 c3 02 c0       	push   0xc002c388
c00233f5:	e8 9f 6a ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00233fa:	83 c4 10             	add    esp,0x10
c00233fd:	83 c8 ff             	or     eax,0xffffffff
c0023400:	83 c4 0c             	add    esp,0xc
c0023403:	c3                   	ret    

c0023404 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023404:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023408:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002340b:	89 c2                	mov    edx,eax
c002340d:	c1 ea 08             	shr    edx,0x8
c0023410:	83 e2 0f             	and    edx,0xf
c0023413:	fe ca                	dec    dl
c0023415:	75 31                	jne    c0023448 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023417:	83 e0 0f             	and    eax,0xf
c002341a:	3c 03                	cmp    al,0x3
c002341c:	75 2a                	jne    c0023448 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002341e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023421:	b8 02 00 00 00       	mov    eax,0x2
c0023426:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002342c:	74 1c                	je     c002344a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002342e:	b8 04 00 00 00       	mov    eax,0x4
c0023433:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023439:	74 0f                	je     c002344a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002343b:	31 c0                	xor    eax,eax
c002343d:	83 fa 03             	cmp    edx,0x3
c0023440:	0f 94 c0             	sete   al
c0023443:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023447:	c3                   	ret    
c0023448:	31 c0                	xor    eax,eax
c002344a:	c3                   	ret    
c002344b:	90                   	nop

c002344c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002344c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023450:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023453:	0f ba e2 0f          	bt     edx,0xf
c0023457:	72 f7                	jb     c0023450 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023459:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002345c:	83 ca 10             	or     edx,0x10
c002345f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023462:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023465:	83 ca 01             	or     edx,0x1
c0023468:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002346b:	c3                   	ret    

c002346c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002346c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023470:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023473:	83 e2 fe             	and    edx,0xfffffffe
c0023476:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023479:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002347c:	83 e2 ef             	and    edx,0xffffffef
c002347f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023482:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023485:	0f ba e2 0e          	bt     edx,0xe
c0023489:	72 f7                	jb     c0023482 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002348b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002348e:	0f ba e2 0f          	bt     edx,0xf
c0023492:	72 ee                	jb     c0023482 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023494:	c3                   	ret    
c0023495:	90                   	nop

c0023496 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023496:	55                   	push   ebp
c0023497:	57                   	push   edi
c0023498:	56                   	push   esi
c0023499:	53                   	push   ebx
c002349a:	83 ec 1c             	sub    esp,0x1c
c002349d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00234a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00234a9:	53                   	push   ebx
c00234aa:	89 fd                	mov    ebp,edi
c00234ac:	56                   	push   esi
c00234ad:	c1 e5 0a             	shl    ebp,0xa
c00234b0:	e8 b7 ff ff ff       	call   c002346c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00234b5:	83 ec 0c             	sub    esp,0xc
c00234b8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00234be:	01 e8                	add    eax,ebp
c00234c0:	89 03                	mov    DWORD PTR [ebx],eax
c00234c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234c4:	68 00 04 00 00       	push   0x400
c00234c9:	6a 00                	push   0x0
c00234cb:	50                   	push   eax
c00234cc:	e8 f3 d1 fd ff       	call   c00006c4 <memset>
c00234d1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00234d7:	89 fa                	mov    edx,edi
c00234d9:	01 e8                	add    eax,ebp
c00234db:	c1 e7 0d             	shl    edi,0xd
c00234de:	89 03                	mov    DWORD PTR [ebx],eax
c00234e0:	c1 e2 08             	shl    edx,0x8
c00234e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00234ea:	81 c2 00 80 00 00    	add    edx,0x8000
c00234f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00234f4:	89 d0                	mov    eax,edx
c00234f6:	83 c4 1c             	add    esp,0x1c
c00234f9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00234ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023502:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023505:	68 00 01 00 00       	push   0x100
c002350a:	6a 00                	push   0x0
c002350c:	50                   	push   eax
c002350d:	e8 b2 d1 fd ff       	call   c00006c4 <memset>
c0023512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023516:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002351c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023522:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023526:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023533:	31 ff                	xor    edi,edi
c0023535:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002353b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023545:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002354b:	83 c5 20             	add    ebp,0x20
c002354e:	01 f8                	add    eax,edi
c0023550:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023553:	52                   	push   edx
c0023554:	68 00 01 00 00       	push   0x100
c0023559:	6a 00                	push   0x0
c002355b:	50                   	push   eax
c002355c:	e8 63 d1 fd ff       	call   c00006c4 <memset>
c0023561:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023565:	83 c4 10             	add    esp,0x10
c0023568:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002356e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023575:	01 f8                	add    eax,edi
c0023577:	81 c7 00 01 00 00    	add    edi,0x100
c002357d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023580:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023586:	75 b3                	jne    c002353b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023588:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002358c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023590:	83 c4 1c             	add    esp,0x1c
c0023593:	5b                   	pop    ebx
c0023594:	5e                   	pop    esi
c0023595:	5f                   	pop    edi
c0023596:	5d                   	pop    ebp
c0023597:	e9 b0 fe ff ff       	jmp    c002344c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002359c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002359c:	55                   	push   ebp
c002359d:	57                   	push   edi
c002359e:	56                   	push   esi
c002359f:	53                   	push   ebx
c00235a0:	31 db                	xor    ebx,ebx
c00235a2:	83 ec 0c             	sub    esp,0xc
c00235a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00235a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00235ad:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00235b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00235b6:	0f 84 aa 00 00 00    	je     c0023666 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00235bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00235c0:	89 d8                	mov    eax,ebx
c00235c2:	c1 e0 07             	shl    eax,0x7
c00235c5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00235cc:	55                   	push   ebp
c00235cd:	56                   	push   esi
c00235ce:	e8 31 fe ff ff       	call   c0023404 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00235d3:	5a                   	pop    edx
c00235d4:	83 f8 01             	cmp    eax,0x1
c00235d7:	59                   	pop    ecx
c00235d8:	75 30                	jne    c002360a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00235da:	50                   	push   eax
c00235db:	50                   	push   eax
c00235dc:	53                   	push   ebx
c00235dd:	68 ad c3 02 c0       	push   0xc002c3ad
c00235e2:	e8 0c f3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00235e7:	83 c4 0c             	add    esp,0xc
c00235ea:	53                   	push   ebx
c00235eb:	55                   	push   ebp
c00235ec:	56                   	push   esi
c00235ed:	e8 a4 fe ff ff       	call   c0023496 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235f2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00235f9:	e8 26 c0 fe ff       	call   c000f624 <malloc>
c00235fe:	89 c5                	mov    ebp,eax
c0023600:	89 04 24             	mov    DWORD PTR [esp],eax
c0023603:	e8 56 0d 00 00       	call   c002435e <SATA::SATA()>
c0023608:	eb 33                	jmp    c002363d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002360a:	83 f8 04             	cmp    eax,0x4
c002360d:	75 47                	jne    c0023656 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002360f:	50                   	push   eax
c0023610:	50                   	push   eax
c0023611:	53                   	push   ebx
c0023612:	68 c4 c3 02 c0       	push   0xc002c3c4
c0023617:	e8 d7 f2 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002361c:	83 c4 0c             	add    esp,0xc
c002361f:	53                   	push   ebx
c0023620:	55                   	push   ebp
c0023621:	56                   	push   esi
c0023622:	e8 6f fe ff ff       	call   c0023496 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023627:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002362e:	e8 f1 bf fe ff       	call   c000f624 <malloc>
c0023633:	89 c5                	mov    ebp,eax
c0023635:	89 04 24             	mov    DWORD PTR [esp],eax
c0023638:	e8 f9 10 00 00       	call   c0024736 <SATAPI::SATAPI()>
c002363d:	5a                   	pop    edx
c002363e:	59                   	pop    ecx
c002363f:	55                   	push   ebp
c0023640:	56                   	push   esi
c0023641:	e8 d4 06 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0023646:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023649:	56                   	push   esi
c002364a:	6a 00                	push   0x0
c002364c:	53                   	push   ebx
c002364d:	55                   	push   ebp
c002364e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023651:	83 c4 20             	add    esp,0x20
c0023654:	eb 10                	jmp    c0023666 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023656:	50                   	push   eax
c0023657:	50                   	push   eax
c0023658:	53                   	push   ebx
c0023659:	68 dd c3 02 c0       	push   0xc002c3dd
c002365e:	e8 90 f2 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023663:	83 c4 10             	add    esp,0x10
c0023666:	d1 ef                	shr    edi,1
c0023668:	43                   	inc    ebx
c0023669:	83 fb 20             	cmp    ebx,0x20
c002366c:	0f 85 3e ff ff ff    	jne    c00235b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023672:	83 c4 0c             	add    esp,0xc
c0023675:	5b                   	pop    ebx
c0023676:	5e                   	pop    esi
c0023677:	5f                   	pop    edi
c0023678:	5d                   	pop    ebp
c0023679:	c3                   	ret    

c002367a <SATABus::open(int, int, void*)>:
c002367a:	83 ec 14             	sub    esp,0x14
c002367d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023681:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023687:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002368d:	52                   	push   edx
c002368e:	50                   	push   eax
c002368f:	e8 08 ff ff ff       	call   c002359c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023694:	31 c0                	xor    eax,eax
c0023696:	83 c4 1c             	add    esp,0x1c
c0023699:	c3                   	ret    

c002369a <ATA::close(int, int, void*)>:
c002369a:	83 ec 0c             	sub    esp,0xc
c002369d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00236a7:	85 c0                	test   eax,eax
c00236a9:	74 0c                	je     c00236b7 <ATA::close(int, int, void*)+0x1d>
c00236ab:	83 ec 0c             	sub    esp,0xc
c00236ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00236b0:	50                   	push   eax
c00236b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00236b4:	83 c4 10             	add    esp,0x10
c00236b7:	31 c0                	xor    eax,eax
c00236b9:	83 c4 0c             	add    esp,0xc
c00236bc:	c3                   	ret    
c00236bd:	90                   	nop

c00236be <ATA::powerSaving(PowerSavingLevel)>:
c00236be:	c3                   	ret    
c00236bf:	90                   	nop

c00236c0 <ATA::ATA()>:
c00236c0:	83 ec 0c             	sub    esp,0xc
c00236c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c7:	83 ec 04             	sub    esp,0x4
c00236ca:	68 00 02 00 00       	push   0x200
c00236cf:	68 b9 c4 02 c0       	push   0xc002c4b9
c00236d4:	50                   	push   eax
c00236d5:	e8 64 0a ff ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00236da:	83 c4 10             	add    esp,0x10
c00236dd:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c00236e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e6:	89 10                	mov    DWORD PTR [eax],edx
c00236e8:	90                   	nop
c00236e9:	83 c4 0c             	add    esp,0xc
c00236ec:	c3                   	ret    
c00236ed:	90                   	nop

c00236ee <ATA::flush(bool)>:
c00236ee:	53                   	push   ebx
c00236ef:	83 ec 08             	sub    esp,0x8
c00236f2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00236f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00236fb:	19 c0                	sbb    eax,eax
c00236fd:	83 e0 fd             	and    eax,0xfffffffd
c0023700:	05 ea 00 00 00       	add    eax,0xea
c0023705:	50                   	push   eax
c0023706:	6a 07                	push   0x7
c0023708:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002370f:	50                   	push   eax
c0023710:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023716:	e8 dd ef ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002371b:	83 c4 0c             	add    esp,0xc
c002371e:	6a 00                	push   0x0
c0023720:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023727:	50                   	push   eax
c0023728:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002372e:	e8 71 fb ff ff       	call   c00232a4 <IDE::polling(unsigned char, unsigned int)>
c0023733:	83 c4 18             	add    esp,0x18
c0023736:	5b                   	pop    ebx
c0023737:	c3                   	ret    

c0023738 <ATA::readyForCommand()>:
c0023738:	56                   	push   esi
c0023739:	53                   	push   ebx
c002373a:	31 db                	xor    ebx,ebx
c002373c:	50                   	push   eax
c002373d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023741:	50                   	push   eax
c0023742:	6a 0c                	push   0xc
c0023744:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002374b:	50                   	push   eax
c002374c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023752:	e8 61 f0 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0023757:	83 c4 10             	add    esp,0x10
c002375a:	a8 88                	test   al,0x88
c002375c:	74 23                	je     c0023781 <ATA::readyForCommand()+0x49>
c002375e:	43                   	inc    ebx
c002375f:	83 fb 63             	cmp    ebx,0x63
c0023762:	7e dd                	jle    c0023741 <ATA::readyForCommand()+0x9>
c0023764:	51                   	push   ecx
c0023765:	51                   	push   ecx
c0023766:	6a 00                	push   0x0
c0023768:	68 40 42 0f 00       	push   0xf4240
c002376d:	e8 c8 a2 ff ff       	call   c001da3a <nanoSleep(unsigned long long)>
c0023772:	83 c4 10             	add    esp,0x10
c0023775:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002377b:	75 c4                	jne    c0023741 <ATA::readyForCommand()+0x9>
c002377d:	31 c0                	xor    eax,eax
c002377f:	eb 02                	jmp    c0023783 <ATA::readyForCommand()+0x4b>
c0023781:	b0 01                	mov    al,0x1
c0023783:	5a                   	pop    edx
c0023784:	5b                   	pop    ebx
c0023785:	5e                   	pop    esi
c0023786:	c3                   	ret    
c0023787:	90                   	nop

c0023788 <ATA::access(unsigned long long, int, void*, bool)>:
c0023788:	55                   	push   ebp
c0023789:	57                   	push   edi
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	83 ec 2c             	sub    esp,0x2c
c002378f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023793:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023797:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002379b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002379f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00237a3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00237a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00237ab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00237b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00237b5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00237bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00237bf:	c1 e0 06             	shl    eax,0x6
c00237c2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00237ca:	74 5d                	je     c0023829 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00237cc:	89 fa                	mov    edx,edi
c00237ce:	89 f0                	mov    eax,esi
c00237d0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00237d4:	c1 ea 1c             	shr    edx,0x1c
c00237d7:	89 d1                	mov    ecx,edx
c00237d9:	09 c1                	or     ecx,eax
c00237db:	74 25                	je     c0023802 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00237dd:	31 ed                	xor    ebp,ebp
c00237df:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00237e6:	89 fa                	mov    edx,edi
c00237e8:	89 f0                	mov    eax,esi
c00237ea:	0f ad d0             	shrd   eax,edx,cl
c00237ed:	d3 ea                	shr    edx,cl
c00237ef:	f6 c1 20             	test   cl,0x20
c00237f2:	74 02                	je     c00237f6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00237f4:	89 d0                	mov    eax,edx
c00237f6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00237fa:	45                   	inc    ebp
c00237fb:	83 fd 06             	cmp    ebp,0x6
c00237fe:	75 df                	jne    c00237df <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023800:	eb 76                	jmp    c0023878 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023802:	89 f0                	mov    eax,esi
c0023804:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023809:	89 fa                	mov    edx,edi
c002380b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023812:	0f ac d0 10          	shrd   eax,edx,0x10
c0023816:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002381b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002381f:	c1 ee 18             	shr    esi,0x18
c0023822:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023827:	eb 56                	jmp    c002387f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023829:	6a 00                	push   0x0
c002382b:	6a 3f                	push   0x3f
c002382d:	57                   	push   edi
c002382e:	56                   	push   esi
c002382f:	e8 18 2a 00 00       	call   c002624c <__umoddi3>
c0023834:	83 c4 10             	add    esp,0x10
c0023837:	40                   	inc    eax
c0023838:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002383c:	6a 00                	push   0x0
c002383e:	68 f0 03 00 00       	push   0x3f0
c0023843:	57                   	push   edi
c0023844:	56                   	push   esi
c0023845:	e8 02 29 00 00       	call   c002614c <__udivdi3>
c002384a:	83 c4 10             	add    esp,0x10
c002384d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023852:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023859:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002385e:	6a 00                	push   0x0
c0023860:	6a 3f                	push   0x3f
c0023862:	57                   	push   edi
c0023863:	56                   	push   esi
c0023864:	e8 e3 28 00 00       	call   c002614c <__udivdi3>
c0023869:	83 c4 10             	add    esp,0x10
c002386c:	89 c6                	mov    esi,eax
c002386e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023873:	83 e6 0f             	and    esi,0xf
c0023876:	eb 07                	jmp    c002387f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023878:	31 f6                	xor    esi,esi
c002387a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002387f:	bf 01 00 00 00       	mov    edi,0x1
c0023884:	50                   	push   eax
c0023885:	6a 00                	push   0x0
c0023887:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002388e:	50                   	push   eax
c002388f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023893:	e8 6c f0 ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0023898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002389b:	e8 98 fe ff ff       	call   c0023738 <ATA::readyForCommand()>
c00238a0:	83 c4 10             	add    esp,0x10
c00238a3:	84 c0                	test   al,al
c00238a5:	0f 84 50 02 00 00    	je     c0023afb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00238ab:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00238b1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238b7:	c1 e0 04             	shl    eax,0x4
c00238ba:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00238c1:	09 c6                	or     esi,eax
c00238c3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00238c8:	75 05                	jne    c00238cf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00238ca:	83 ce a0             	or     esi,0xffffffa0
c00238cd:	eb 03                	jmp    c00238d2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00238cf:	83 ce e0             	or     esi,0xffffffe0
c00238d2:	89 f0                	mov    eax,esi
c00238d4:	0f b6 f0             	movzx  esi,al
c00238d7:	56                   	push   esi
c00238d8:	6a 06                	push   0x6
c00238da:	51                   	push   ecx
c00238db:	52                   	push   edx
c00238dc:	e8 17 ee ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238e1:	83 c4 10             	add    esp,0x10
c00238e4:	6a 00                	push   0x0
c00238e6:	6a 01                	push   0x1
c00238e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238ef:	50                   	push   eax
c00238f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00238f6:	e8 fd ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238fb:	83 c4 10             	add    esp,0x10
c00238fe:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023903:	75 6e                	jne    c0023973 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023905:	6a 00                	push   0x0
c0023907:	6a 08                	push   0x8
c0023909:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023910:	50                   	push   eax
c0023911:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023917:	e8 dc ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002391c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023921:	50                   	push   eax
c0023922:	6a 09                	push   0x9
c0023924:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002392b:	50                   	push   eax
c002392c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023932:	e8 c1 ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023937:	83 c4 20             	add    esp,0x20
c002393a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002393f:	50                   	push   eax
c0023940:	6a 0a                	push   0xa
c0023942:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023949:	50                   	push   eax
c002394a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023950:	e8 a3 ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023955:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002395a:	50                   	push   eax
c002395b:	6a 0b                	push   0xb
c002395d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023964:	50                   	push   eax
c0023965:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002396b:	e8 88 ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023970:	83 c4 20             	add    esp,0x20
c0023973:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023978:	50                   	push   eax
c0023979:	6a 02                	push   0x2
c002397b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023982:	50                   	push   eax
c0023983:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023989:	e8 6a ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002398e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023993:	50                   	push   eax
c0023994:	6a 03                	push   0x3
c0023996:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002399d:	50                   	push   eax
c002399e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239a4:	e8 4f ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a9:	83 c4 20             	add    esp,0x20
c00239ac:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00239b1:	50                   	push   eax
c00239b2:	6a 04                	push   0x4
c00239b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239bb:	50                   	push   eax
c00239bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239c2:	e8 31 ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00239cc:	50                   	push   eax
c00239cd:	6a 05                	push   0x5
c00239cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239d6:	50                   	push   eax
c00239d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239dd:	e8 16 ed ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e2:	83 c4 20             	add    esp,0x20
c00239e5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00239ea:	0f 94 c0             	sete   al
c00239ed:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00239f2:	74 09                	je     c00239fd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00239f4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00239fb:	eb 07                	jmp    c0023a04 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00239fd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023a04:	0f b6 c0             	movzx  eax,al
c0023a07:	50                   	push   eax
c0023a08:	6a 07                	push   0x7
c0023a0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a11:	50                   	push   eax
c0023a12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a18:	e8 db ec ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a1d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023a21:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023a25:	83 c4 10             	add    esp,0x10
c0023a28:	85 f6                	test   esi,esi
c0023a2a:	0f 84 ac 00 00 00    	je     c0023adc <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023a30:	50                   	push   eax
c0023a31:	6a 01                	push   0x1
c0023a33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a3a:	50                   	push   eax
c0023a3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a41:	e8 5e f8 ff ff       	call   c00232a4 <IDE::polling(unsigned char, unsigned int)>
c0023a46:	83 c4 10             	add    esp,0x10
c0023a49:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023a4f:	84 c0                	test   al,al
c0023a51:	74 20                	je     c0023a73 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0023a53:	0f b6 f8             	movzx  edi,al
c0023a56:	0f b6 d2             	movzx  edx,dl
c0023a59:	57                   	push   edi
c0023a5a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023a61:	50                   	push   eax
c0023a62:	52                   	push   edx
c0023a63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a69:	e8 a0 f6 ff ff       	call   c002310e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023a6e:	e9 85 00 00 00       	jmp    c0023af8 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0023a73:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023a78:	74 41                	je     c0023abb <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023a7a:	31 c9                	xor    ecx,ecx
c0023a7c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023a80:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023a84:	50                   	push   eax
c0023a85:	50                   	push   eax
c0023a86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a8d:	50                   	push   eax
c0023a8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a94:	e8 4d ec ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0023a99:	89 c2                	mov    edx,eax
c0023a9b:	89 e8                	mov    eax,ebp
c0023a9d:	66 ef                	out    dx,ax
c0023a9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023aa3:	83 c4 10             	add    esp,0x10
c0023aa6:	41                   	inc    ecx
c0023aa7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023aad:	75 cd                	jne    c0023a7c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023aaf:	4e                   	dec    esi
c0023ab0:	81 c7 00 02 00 00    	add    edi,0x200
c0023ab6:	e9 6d ff ff ff       	jmp    c0023a28 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023abb:	0f b6 d2             	movzx  edx,dl
c0023abe:	51                   	push   ecx
c0023abf:	51                   	push   ecx
c0023ac0:	52                   	push   edx
c0023ac1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ac7:	e8 1a ec ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0023acc:	b9 00 01 00 00       	mov    ecx,0x100
c0023ad1:	89 c2                	mov    edx,eax
c0023ad3:	fc                   	cld    
c0023ad4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023ad7:	83 c4 10             	add    esp,0x10
c0023ada:	eb d3                	jmp    c0023aaf <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023adc:	31 ff                	xor    edi,edi
c0023ade:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023ae3:	74 16                	je     c0023afb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023ae5:	50                   	push   eax
c0023ae6:	50                   	push   eax
c0023ae7:	31 c0                	xor    eax,eax
c0023ae9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023aee:	0f 94 c0             	sete   al
c0023af1:	50                   	push   eax
c0023af2:	53                   	push   ebx
c0023af3:	e8 f6 fb ff ff       	call   c00236ee <ATA::flush(bool)>
c0023af8:	83 c4 10             	add    esp,0x10
c0023afb:	83 c4 2c             	add    esp,0x2c
c0023afe:	89 f8                	mov    eax,edi
c0023b00:	5b                   	pop    ebx
c0023b01:	5e                   	pop    esi
c0023b02:	5f                   	pop    edi
c0023b03:	5d                   	pop    ebp
c0023b04:	c3                   	ret    
c0023b05:	90                   	nop

c0023b06 <ATA::read(unsigned long long, int, void*)>:
c0023b06:	57                   	push   edi
c0023b07:	b8 04 00 00 00       	mov    eax,0x4
c0023b0c:	56                   	push   esi
c0023b0d:	53                   	push   ebx
c0023b0e:	83 ec 10             	sub    esp,0x10
c0023b11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023b19:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023b1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023b20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b24:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023b2a:	77 3b                	ja     c0023b67 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b2c:	b8 06 00 00 00       	mov    eax,0x6
c0023b31:	85 d2                	test   edx,edx
c0023b33:	74 32                	je     c0023b67 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b35:	50                   	push   eax
c0023b36:	50                   	push   eax
c0023b37:	6a 00                	push   0x0
c0023b39:	52                   	push   edx
c0023b3a:	53                   	push   ebx
c0023b3b:	57                   	push   edi
c0023b3c:	56                   	push   esi
c0023b3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023b41:	e8 42 fc ff ff       	call   c0023788 <ATA::access(unsigned long long, int, void*, bool)>
c0023b46:	83 c4 20             	add    esp,0x20
c0023b49:	85 c0                	test   eax,eax
c0023b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b4f:	75 11                	jne    c0023b62 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023b51:	01 1d 28 0e 03 c0    	add    DWORD PTR ds:0xc0030e28,ebx
c0023b57:	e8 fc cb fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0023b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b60:	eb 05                	jmp    c0023b67 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b62:	b8 01 00 00 00       	mov    eax,0x1
c0023b67:	83 c4 10             	add    esp,0x10
c0023b6a:	5b                   	pop    ebx
c0023b6b:	5e                   	pop    esi
c0023b6c:	5f                   	pop    edi
c0023b6d:	c3                   	ret    

c0023b6e <ATA::write(unsigned long long, int, void*)>:
c0023b6e:	57                   	push   edi
c0023b6f:	b8 04 00 00 00       	mov    eax,0x4
c0023b74:	56                   	push   esi
c0023b75:	53                   	push   ebx
c0023b76:	83 ec 10             	sub    esp,0x10
c0023b79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023b81:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023b84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023b88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b8c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023b92:	77 3b                	ja     c0023bcf <ATA::write(unsigned long long, int, void*)+0x61>
c0023b94:	b8 06 00 00 00       	mov    eax,0x6
c0023b99:	85 d2                	test   edx,edx
c0023b9b:	74 32                	je     c0023bcf <ATA::write(unsigned long long, int, void*)+0x61>
c0023b9d:	50                   	push   eax
c0023b9e:	50                   	push   eax
c0023b9f:	6a 01                	push   0x1
c0023ba1:	52                   	push   edx
c0023ba2:	53                   	push   ebx
c0023ba3:	57                   	push   edi
c0023ba4:	56                   	push   esi
c0023ba5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ba9:	e8 da fb ff ff       	call   c0023788 <ATA::access(unsigned long long, int, void*, bool)>
c0023bae:	83 c4 20             	add    esp,0x20
c0023bb1:	85 c0                	test   eax,eax
c0023bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023bb7:	75 11                	jne    c0023bca <ATA::write(unsigned long long, int, void*)+0x5c>
c0023bb9:	01 1d 24 0e 03 c0    	add    DWORD PTR ds:0xc0030e24,ebx
c0023bbf:	e8 94 cb fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0023bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bc8:	eb 05                	jmp    c0023bcf <ATA::write(unsigned long long, int, void*)+0x61>
c0023bca:	b8 01 00 00 00       	mov    eax,0x1
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	5b                   	pop    ebx
c0023bd3:	5e                   	pop    esi
c0023bd4:	5f                   	pop    edi
c0023bd5:	c3                   	ret    

c0023bd6 <ATA::detectCHS()>:
c0023bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023bda:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023be0:	c1 e0 06             	shl    eax,0x6
c0023be3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023be9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023bf3:	c7 44 24 04 20 c4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c420
c0023bfb:	e9 99 62 ff ff       	jmp    c0019e99 <Krnl::panic(char const*)>

c0023c00 <ATA::open(int, int, void*)>:
c0023c00:	53                   	push   ebx
c0023c01:	83 ec 08             	sub    esp,0x8
c0023c04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c10:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023c16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023c1c:	c1 e0 06             	shl    eax,0x6
c0023c1f:	01 d0                	add    eax,edx
c0023c21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023c28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023c2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023c35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023c3f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023c45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023c4c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023c53:	75 0c                	jne    c0023c61 <ATA::open(int, int, void*)+0x61>
c0023c55:	83 ec 0c             	sub    esp,0xc
c0023c58:	53                   	push   ebx
c0023c59:	e8 78 ff ff ff       	call   c0023bd6 <ATA::detectCHS()>
c0023c5e:	83 c4 10             	add    esp,0x10
c0023c61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023c67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023c6d:	c1 e0 06             	shl    eax,0x6
c0023c70:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023c77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023c81:	d1 e8                	shr    eax,1
c0023c83:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023c89:	6a 04                	push   0x4
c0023c8b:	6a 0c                	push   0xc
c0023c8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c94:	50                   	push   eax
c0023c95:	52                   	push   edx
c0023c96:	e8 5d ea ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c9b:	90                   	nop
c0023c9c:	90                   	nop
c0023c9d:	6a 00                	push   0x0
c0023c9f:	6a 0c                	push   0xc
c0023ca1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ca8:	50                   	push   eax
c0023ca9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023caf:	e8 44 ea ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cb4:	83 c4 14             	add    esp,0x14
c0023cb7:	53                   	push   ebx
c0023cb8:	e8 e9 04 ff ff       	call   c00141a6 <PhysicalDisk::startCache()>
c0023cbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cc0:	e8 03 26 ff ff       	call   c00162c8 <createPartitionsForDisk(PhysicalDisk*)>
c0023cc5:	31 c0                	xor    eax,eax
c0023cc7:	83 c4 18             	add    esp,0x18
c0023cca:	5b                   	pop    ebx
c0023ccb:	c3                   	ret    

c0023ccc <ATAPI::write(unsigned long long, int, void*)>:
c0023ccc:	b8 03 00 00 00       	mov    eax,0x3
c0023cd1:	c3                   	ret    

c0023cd2 <ATAPI::close(int, int, void*)>:
c0023cd2:	83 ec 0c             	sub    esp,0xc
c0023cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023cdf:	85 c0                	test   eax,eax
c0023ce1:	74 0c                	je     c0023cef <ATAPI::close(int, int, void*)+0x1d>
c0023ce3:	83 ec 0c             	sub    esp,0xc
c0023ce6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ce8:	50                   	push   eax
c0023ce9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023cec:	83 c4 10             	add    esp,0x10
c0023cef:	31 c0                	xor    eax,eax
c0023cf1:	83 c4 0c             	add    esp,0xc
c0023cf4:	c3                   	ret    
c0023cf5:	90                   	nop

c0023cf6 <ATAPI::ATAPI()>:
c0023cf6:	83 ec 0c             	sub    esp,0xc
c0023cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfd:	83 ec 04             	sub    esp,0x4
c0023d00:	68 00 08 00 00       	push   0x800
c0023d05:	68 21 c5 02 c0       	push   0xc002c521
c0023d0a:	50                   	push   eax
c0023d0b:	e8 2e 04 ff ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d10:	83 c4 10             	add    esp,0x10
c0023d13:	ba 74 c4 02 c0       	mov    edx,0xc002c474
c0023d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1c:	89 10                	mov    DWORD PTR [eax],edx
c0023d1e:	90                   	nop
c0023d1f:	83 c4 0c             	add    esp,0xc
c0023d22:	c3                   	ret    
c0023d23:	90                   	nop

c0023d24 <ATAPI::readyForCommand()>:
c0023d24:	56                   	push   esi
c0023d25:	53                   	push   ebx
c0023d26:	31 db                	xor    ebx,ebx
c0023d28:	50                   	push   eax
c0023d29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d2d:	50                   	push   eax
c0023d2e:	6a 0c                	push   0xc
c0023d30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d37:	50                   	push   eax
c0023d38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d3e:	e8 75 ea ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0023d43:	83 c4 10             	add    esp,0x10
c0023d46:	a8 88                	test   al,0x88
c0023d48:	74 23                	je     c0023d6d <ATAPI::readyForCommand()+0x49>
c0023d4a:	43                   	inc    ebx
c0023d4b:	83 fb 63             	cmp    ebx,0x63
c0023d4e:	7e dd                	jle    c0023d2d <ATAPI::readyForCommand()+0x9>
c0023d50:	51                   	push   ecx
c0023d51:	51                   	push   ecx
c0023d52:	6a 00                	push   0x0
c0023d54:	68 40 42 0f 00       	push   0xf4240
c0023d59:	e8 dc 9c ff ff       	call   c001da3a <nanoSleep(unsigned long long)>
c0023d5e:	83 c4 10             	add    esp,0x10
c0023d61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d67:	75 c4                	jne    c0023d2d <ATAPI::readyForCommand()+0x9>
c0023d69:	31 c0                	xor    eax,eax
c0023d6b:	eb 02                	jmp    c0023d6f <ATAPI::readyForCommand()+0x4b>
c0023d6d:	b0 01                	mov    al,0x1
c0023d6f:	5a                   	pop    edx
c0023d70:	5b                   	pop    ebx
c0023d71:	5e                   	pop    esi
c0023d72:	c3                   	ret    
c0023d73:	90                   	nop

c0023d74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023d74:	55                   	push   ebp
c0023d75:	57                   	push   edi
c0023d76:	56                   	push   esi
c0023d77:	53                   	push   ebx
c0023d78:	83 ec 20             	sub    esp,0x20
c0023d7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023d7f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023d83:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023d87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d8b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023d8f:	6a 01                	push   0x1
c0023d91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d98:	50                   	push   eax
c0023d99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d9f:	e8 60 eb ff ff       	call   c0022904 <IDE::enableIRQs(unsigned char, bool)>
c0023da4:	5e                   	pop    esi
c0023da5:	58                   	pop    eax
c0023da6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023dad:	50                   	push   eax
c0023dae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023db4:	e8 19 e9 ff ff       	call   c00226d2 <IDE::prepareInterrupt(unsigned char)>
c0023db9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023dbc:	e8 63 ff ff ff       	call   c0023d24 <ATAPI::readyForCommand()>
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	84 c0                	test   al,al
c0023dc6:	75 0a                	jne    c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023dc8:	bb 01 00 00 00       	mov    ebx,0x1
c0023dcd:	e9 57 02 00 00       	jmp    c0024029 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023dd2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023dd8:	c1 e0 04             	shl    eax,0x4
c0023ddb:	0f b6 c0             	movzx  eax,al
c0023dde:	50                   	push   eax
c0023ddf:	6a 06                	push   0x6
c0023de1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023de8:	50                   	push   eax
c0023de9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023def:	e8 04 e9 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023df4:	6a 00                	push   0x0
c0023df6:	6a 01                	push   0x1
c0023df8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023dff:	50                   	push   eax
c0023e00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e06:	e8 ed e8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e0b:	83 c4 20             	add    esp,0x20
c0023e0e:	0f b6 c3             	movzx  eax,bl
c0023e11:	0f b6 df             	movzx  ebx,bh
c0023e14:	50                   	push   eax
c0023e15:	6a 04                	push   0x4
c0023e17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e1e:	50                   	push   eax
c0023e1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e25:	e8 ce e8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2a:	53                   	push   ebx
c0023e2b:	6a 05                	push   0x5
c0023e2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e34:	50                   	push   eax
c0023e35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e3b:	e8 b8 e8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e40:	83 c4 20             	add    esp,0x20
c0023e43:	68 a0 00 00 00       	push   0xa0
c0023e48:	6a 07                	push   0x7
c0023e4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e51:	50                   	push   eax
c0023e52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e58:	e8 9b e8 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e5d:	83 c4 0c             	add    esp,0xc
c0023e60:	6a 01                	push   0x1
c0023e62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e69:	50                   	push   eax
c0023e6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e70:	e8 2f f4 ff ff       	call   c00232a4 <IDE::polling(unsigned char, unsigned int)>
c0023e75:	83 c4 10             	add    esp,0x10
c0023e78:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023e7e:	84 c0                	test   al,al
c0023e80:	74 23                	je     c0023ea5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023e82:	0f b6 d8             	movzx  ebx,al
c0023e85:	0f b6 d2             	movzx  edx,dl
c0023e88:	53                   	push   ebx
c0023e89:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023e90:	50                   	push   eax
c0023e91:	52                   	push   edx
c0023e92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e98:	e8 71 f2 ff ff       	call   c002310e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023e9d:	83 c4 10             	add    esp,0x10
c0023ea0:	e9 84 01 00 00       	jmp    c0024029 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023ea5:	0f b6 d2             	movzx  edx,dl
c0023ea8:	53                   	push   ebx
c0023ea9:	53                   	push   ebx
c0023eaa:	52                   	push   edx
c0023eab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023eb1:	e8 30 e8 ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0023eb6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023eba:	b9 06 00 00 00       	mov    ecx,0x6
c0023ebf:	89 c2                	mov    edx,eax
c0023ec1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023ec4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023ec8:	83 c4 10             	add    esp,0x10
c0023ecb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023ed1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023ed8:	85 db                	test   ebx,ebx
c0023eda:	0f 84 ec 00 00 00    	je     c0023fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023ee0:	51                   	push   ecx
c0023ee1:	51                   	push   ecx
c0023ee2:	52                   	push   edx
c0023ee3:	50                   	push   eax
c0023ee4:	e8 7d e9 ff ff       	call   c0022866 <IDE::waitInterrupt(unsigned char)>
c0023ee9:	83 c4 10             	add    esp,0x10
c0023eec:	84 c0                	test   al,al
c0023eee:	0f 84 d4 fe ff ff    	je     c0023dc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023ef4:	56                   	push   esi
c0023ef5:	56                   	push   esi
c0023ef6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023efd:	50                   	push   eax
c0023efe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f04:	e8 c9 e7 ff ff       	call   c00226d2 <IDE::prepareInterrupt(unsigned char)>
c0023f09:	83 c4 0c             	add    esp,0xc
c0023f0c:	6a 04                	push   0x4
c0023f0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f15:	50                   	push   eax
c0023f16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f1c:	e8 97 e8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0023f21:	83 c4 0c             	add    esp,0xc
c0023f24:	89 c6                	mov    esi,eax
c0023f26:	6a 05                	push   0x5
c0023f28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f2f:	50                   	push   eax
c0023f30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f36:	e8 7d e8 ff ff       	call   c00227b8 <IDE::read(unsigned char, unsigned char)>
c0023f3b:	89 f1                	mov    ecx,esi
c0023f3d:	0f b6 c0             	movzx  eax,al
c0023f40:	0f b6 f1             	movzx  esi,cl
c0023f43:	c1 e0 08             	shl    eax,0x8
c0023f46:	09 c6                	or     esi,eax
c0023f48:	d1 fe                	sar    esi,1
c0023f4a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023f4e:	83 c4 10             	add    esp,0x10
c0023f51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023f56:	74 41                	je     c0023f99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023f58:	31 c9                	xor    ecx,ecx
c0023f5a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023f60:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023f67:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023f6b:	75 0a                	jne    c0023f77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023f6d:	01 c9                	add    ecx,ecx
c0023f6f:	01 cd                	add    ebp,ecx
c0023f71:	4b                   	dec    ebx
c0023f72:	e9 54 ff ff ff       	jmp    c0023ecb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023f77:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023f7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f80:	51                   	push   ecx
c0023f81:	51                   	push   ecx
c0023f82:	52                   	push   edx
c0023f83:	50                   	push   eax
c0023f84:	e8 5d e7 ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0023f89:	89 c2                	mov    edx,eax
c0023f8b:	89 f0                	mov    eax,esi
c0023f8d:	66 ef                	out    dx,ax
c0023f8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f93:	83 c4 10             	add    esp,0x10
c0023f96:	41                   	inc    ecx
c0023f97:	eb c1                	jmp    c0023f5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023f99:	31 f6                	xor    esi,esi
c0023f9b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023fa1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023fa8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023fac:	75 06                	jne    c0023fb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023fae:	01 f6                	add    esi,esi
c0023fb0:	01 f5                	add    ebp,esi
c0023fb2:	eb bd                	jmp    c0023f71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023fb4:	51                   	push   ecx
c0023fb5:	51                   	push   ecx
c0023fb6:	52                   	push   edx
c0023fb7:	50                   	push   eax
c0023fb8:	e8 29 e7 ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0023fbd:	89 c2                	mov    edx,eax
c0023fbf:	66 ed                	in     ax,dx
c0023fc1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023fc6:	83 c4 10             	add    esp,0x10
c0023fc9:	46                   	inc    esi
c0023fca:	eb cf                	jmp    c0023f9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023fcc:	51                   	push   ecx
c0023fcd:	51                   	push   ecx
c0023fce:	52                   	push   edx
c0023fcf:	50                   	push   eax
c0023fd0:	e8 91 e8 ff ff       	call   c0022866 <IDE::waitInterrupt(unsigned char)>
c0023fd5:	83 c4 10             	add    esp,0x10
c0023fd8:	84 c0                	test   al,al
c0023fda:	0f 84 e8 fd ff ff    	je     c0023dc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023fe0:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023fe5:	52                   	push   edx
c0023fe6:	52                   	push   edx
c0023fe7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fee:	50                   	push   eax
c0023fef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ff5:	e8 d8 e6 ff ff       	call   c00226d2 <IDE::prepareInterrupt(unsigned char)>
c0023ffa:	83 c4 10             	add    esp,0x10
c0023ffd:	50                   	push   eax
c0023ffe:	50                   	push   eax
c0023fff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024006:	50                   	push   eax
c0024007:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002400d:	e8 d4 e6 ff ff       	call   c00226e6 <IDE::getBase(unsigned char)>
c0024012:	8d 50 07             	lea    edx,[eax+0x7]
c0024015:	ec                   	in     al,dx
c0024016:	83 c4 10             	add    esp,0x10
c0024019:	a8 88                	test   al,0x88
c002401b:	74 0a                	je     c0024027 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002401d:	4b                   	dec    ebx
c002401e:	75 dd                	jne    c0023ffd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024020:	bb 02 00 00 00       	mov    ebx,0x2
c0024025:	eb 02                	jmp    c0024029 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024027:	31 db                	xor    ebx,ebx
c0024029:	83 c4 1c             	add    esp,0x1c
c002402c:	89 d8                	mov    eax,ebx
c002402e:	5b                   	pop    ebx
c002402f:	5e                   	pop    esi
c0024030:	5f                   	pop    edi
c0024031:	5d                   	pop    ebp
c0024032:	c3                   	ret    
c0024033:	90                   	nop

c0024034 <ATAPI::diskRemoved()>:
c0024034:	83 ec 18             	sub    esp,0x18
c0024037:	68 2d c5 02 c0       	push   0xc002c52d
c002403c:	e8 b2 e8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024045:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002404c:	83 c4 1c             	add    esp,0x1c
c002404f:	c3                   	ret    

c0024050 <ATAPI::eject()>:
c0024050:	57                   	push   edi
c0024051:	b9 03 00 00 00       	mov    ecx,0x3
c0024056:	53                   	push   ebx
c0024057:	83 ec 14             	sub    esp,0x14
c002405a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002405e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024062:	fc                   	cld    
c0024063:	31 c0                	xor    eax,eax
c0024065:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024067:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002406c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024071:	50                   	push   eax
c0024072:	50                   	push   eax
c0024073:	6a 00                	push   0x0
c0024075:	6a 00                	push   0x0
c0024077:	6a 00                	push   0x0
c0024079:	6a 02                	push   0x2
c002407b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002407f:	50                   	push   eax
c0024080:	53                   	push   ebx
c0024081:	e8 ee fc ff ff       	call   c0023d74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024086:	83 c4 14             	add    esp,0x14
c0024089:	53                   	push   ebx
c002408a:	e8 a5 ff ff ff       	call   c0024034 <ATAPI::diskRemoved()>
c002408f:	83 c4 24             	add    esp,0x24
c0024092:	31 c0                	xor    eax,eax
c0024094:	5b                   	pop    ebx
c0024095:	5f                   	pop    edi
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <ATAPI::diskInserted()>:
c0024098:	53                   	push   ebx
c0024099:	83 ec 14             	sub    esp,0x14
c002409c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00240a0:	68 44 c5 02 c0       	push   0xc002c544
c00240a5:	e8 49 e8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00240aa:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00240b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240b4:	e8 ed 00 ff ff       	call   c00141a6 <PhysicalDisk::startCache()>
c00240b9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00240bd:	83 c4 18             	add    esp,0x18
c00240c0:	5b                   	pop    ebx
c00240c1:	e9 02 22 ff ff       	jmp    c00162c8 <createPartitionsForDisk(PhysicalDisk*)>

c00240c6 <ATAPI::detectMedia()>:
c00240c6:	56                   	push   esi
c00240c7:	53                   	push   ebx
c00240c8:	83 ec 28             	sub    esp,0x28
c00240cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00240cf:	6a 0c                	push   0xc
c00240d1:	6a 00                	push   0x0
c00240d3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00240d7:	56                   	push   esi
c00240d8:	e8 e7 c5 fd ff       	call   c00006c4 <memset>
c00240dd:	58                   	pop    eax
c00240de:	5a                   	pop    edx
c00240df:	6a 00                	push   0x0
c00240e1:	6a 00                	push   0x0
c00240e3:	6a 00                	push   0x0
c00240e5:	6a 00                	push   0x0
c00240e7:	56                   	push   esi
c00240e8:	53                   	push   ebx
c00240e9:	e8 86 fc ff ff       	call   c0023d74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00240ee:	83 c4 1c             	add    esp,0x1c
c00240f1:	6a 0c                	push   0xc
c00240f3:	6a 00                	push   0x0
c00240f5:	56                   	push   esi
c00240f6:	e8 c9 c5 fd ff       	call   c00006c4 <memset>
c00240fb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024100:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024105:	59                   	pop    ecx
c0024106:	58                   	pop    eax
c0024107:	6a 01                	push   0x1
c0024109:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002410d:	50                   	push   eax
c002410e:	6a 00                	push   0x0
c0024110:	6a 12                	push   0x12
c0024112:	56                   	push   esi
c0024113:	53                   	push   ebx
c0024114:	e8 5b fc ff ff       	call   c0023d74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024119:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002411d:	83 c4 20             	add    esp,0x20
c0024120:	83 e0 7f             	and    eax,0x7f
c0024123:	3c 70                	cmp    al,0x70
c0024125:	74 15                	je     c002413c <ATAPI::detectMedia()+0x76>
c0024127:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002412e:	75 0c                	jne    c002413c <ATAPI::detectMedia()+0x76>
c0024130:	83 ec 0c             	sub    esp,0xc
c0024133:	53                   	push   ebx
c0024134:	e8 5f ff ff ff       	call   c0024098 <ATAPI::diskInserted()>
c0024139:	83 c4 10             	add    esp,0x10
c002413c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024140:	83 e0 0f             	and    eax,0xf
c0024143:	3c 02                	cmp    al,0x2
c0024145:	75 1b                	jne    c0024162 <ATAPI::detectMedia()+0x9c>
c0024147:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002414c:	75 2d                	jne    c002417b <ATAPI::detectMedia()+0xb5>
c002414e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024155:	74 24                	je     c002417b <ATAPI::detectMedia()+0xb5>
c0024157:	83 ec 0c             	sub    esp,0xc
c002415a:	53                   	push   ebx
c002415b:	e8 d4 fe ff ff       	call   c0024034 <ATAPI::diskRemoved()>
c0024160:	eb 16                	jmp    c0024178 <ATAPI::detectMedia()+0xb2>
c0024162:	84 c0                	test   al,al
c0024164:	75 15                	jne    c002417b <ATAPI::detectMedia()+0xb5>
c0024166:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002416d:	75 0c                	jne    c002417b <ATAPI::detectMedia()+0xb5>
c002416f:	83 ec 0c             	sub    esp,0xc
c0024172:	53                   	push   ebx
c0024173:	e8 20 ff ff ff       	call   c0024098 <ATAPI::diskInserted()>
c0024178:	83 c4 10             	add    esp,0x10
c002417b:	83 c4 24             	add    esp,0x24
c002417e:	5b                   	pop    ebx
c002417f:	5e                   	pop    esi
c0024180:	c3                   	ret    
c0024181:	90                   	nop

c0024182 <ATAPI::open(int, int, void*)>:
c0024182:	53                   	push   ebx
c0024183:	83 ec 08             	sub    esp,0x8
c0024186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002418a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002418e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024192:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024198:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002419e:	c1 e0 06             	shl    eax,0x6
c00241a1:	01 d0                	add    eax,edx
c00241a3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00241aa:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00241b0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00241b7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00241c1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00241c7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00241ce:	6a 04                	push   0x4
c00241d0:	6a 0c                	push   0xc
c00241d2:	51                   	push   ecx
c00241d3:	52                   	push   edx
c00241d4:	e8 1f e5 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d9:	90                   	nop
c00241da:	90                   	nop
c00241db:	6a 00                	push   0x0
c00241dd:	6a 0c                	push   0xc
c00241df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e6:	50                   	push   eax
c00241e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ed:	e8 06 e5 ff ff       	call   c00226f8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00241f9:	83 c4 14             	add    esp,0x14
c00241fc:	53                   	push   ebx
c00241fd:	e8 c4 fe ff ff       	call   c00240c6 <ATAPI::detectMedia()>
c0024202:	31 c0                	xor    eax,eax
c0024204:	83 c4 18             	add    esp,0x18
c0024207:	5b                   	pop    ebx
c0024208:	c3                   	ret    
c0024209:	90                   	nop

c002420a <ATAPI::read(unsigned long long, int, void*)>:
c002420a:	55                   	push   ebp
c002420b:	57                   	push   edi
c002420c:	56                   	push   esi
c002420d:	53                   	push   ebx
c002420e:	83 ec 1c             	sub    esp,0x1c
c0024211:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024215:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024219:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002421d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024224:	74 41                	je     c0024267 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024226:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002422a:	b9 03 00 00 00       	mov    ecx,0x3
c002422f:	fc                   	cld    
c0024230:	31 c0                	xor    eax,eax
c0024232:	86 fb                	xchg   bl,bh
c0024234:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024236:	c1 c3 10             	rol    ebx,0x10
c0024239:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002423e:	89 e8                	mov    eax,ebp
c0024240:	86 fb                	xchg   bl,bh
c0024242:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024246:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002424a:	50                   	push   eax
c002424b:	50                   	push   eax
c002424c:	55                   	push   ebp
c002424d:	c1 e5 0b             	shl    ebp,0xb
c0024250:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024254:	6a 00                	push   0x0
c0024256:	55                   	push   ebp
c0024257:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002425b:	50                   	push   eax
c002425c:	56                   	push   esi
c002425d:	e8 12 fb ff ff       	call   c0023d74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024262:	83 c4 20             	add    esp,0x20
c0024265:	eb 1a                	jmp    c0024281 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024267:	83 ec 0c             	sub    esp,0xc
c002426a:	56                   	push   esi
c002426b:	e8 56 fe ff ff       	call   c00240c6 <ATAPI::detectMedia()>
c0024270:	83 c4 10             	add    esp,0x10
c0024273:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002427a:	75 aa                	jne    c0024226 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002427c:	b8 02 00 00 00       	mov    eax,0x2
c0024281:	83 c4 1c             	add    esp,0x1c
c0024284:	5b                   	pop    ebx
c0024285:	5e                   	pop    esi
c0024286:	5f                   	pop    edi
c0024287:	5d                   	pop    ebp
c0024288:	c3                   	ret    
c0024289:	90                   	nop

c002428a <SATA::close(int, int, void*)>:
c002428a:	83 ec 0c             	sub    esp,0xc
c002428d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024291:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024297:	85 c0                	test   eax,eax
c0024299:	74 0c                	je     c00242a7 <SATA::close(int, int, void*)+0x1d>
c002429b:	83 ec 0c             	sub    esp,0xc
c002429e:	8b 10                	mov    edx,DWORD PTR [eax]
c00242a0:	50                   	push   eax
c00242a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00242a4:	83 c4 10             	add    esp,0x10
c00242a7:	31 c0                	xor    eax,eax
c00242a9:	83 c4 0c             	add    esp,0xc
c00242ac:	c3                   	ret    
c00242ad:	90                   	nop

c00242ae <SATA::powerSaving(PowerSavingLevel)>:
c00242ae:	c3                   	ret    
c00242af:	90                   	nop

c00242b0 <SATA::open(int, int, void*)>:
c00242b0:	56                   	push   esi
c00242b1:	53                   	push   ebx
c00242b2:	50                   	push   eax
c00242b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00242bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00242cb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00242d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00242e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242f0:	e8 cc b9 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c00242f5:	89 c6                	mov    esi,eax
c00242f7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00242fd:	81 c6 00 10 00 00    	add    esi,0x1000
c0024303:	e8 b9 b9 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024308:	39 c6                	cmp    esi,eax
c002430a:	74 10                	je     c002431c <SATA::open(int, int, void*)+0x6c>
c002430c:	83 ec 0c             	sub    esp,0xc
c002430f:	68 a4 c4 02 c0       	push   0xc002c4a4
c0024314:	e8 80 5b ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0024319:	83 c4 10             	add    esp,0x10
c002431c:	83 ec 0c             	sub    esp,0xc
c002431f:	6a 02                	push   0x2
c0024321:	e8 dd d5 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0024326:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002432c:	e8 62 d7 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0024331:	6a 03                	push   0x3
c0024333:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024339:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002433f:	50                   	push   eax
c0024340:	e8 89 dc fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0024345:	83 c4 14             	add    esp,0x14
c0024348:	53                   	push   ebx
c0024349:	e8 58 fe fe ff       	call   c00141a6 <PhysicalDisk::startCache()>
c002434e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024351:	e8 72 1f ff ff       	call   c00162c8 <createPartitionsForDisk(PhysicalDisk*)>
c0024356:	83 c4 14             	add    esp,0x14
c0024359:	31 c0                	xor    eax,eax
c002435b:	5b                   	pop    ebx
c002435c:	5e                   	pop    esi
c002435d:	c3                   	ret    

c002435e <SATA::SATA()>:
c002435e:	83 ec 0c             	sub    esp,0xc
c0024361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024365:	83 ec 04             	sub    esp,0x4
c0024368:	68 00 02 00 00       	push   0x200
c002436d:	68 b8 c4 02 c0       	push   0xc002c4b8
c0024372:	50                   	push   eax
c0024373:	e8 c6 fd fe ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	ba f0 c4 02 c0       	mov    edx,0xc002c4f0
c0024380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024384:	89 10                	mov    DWORD PTR [eax],edx
c0024386:	90                   	nop
c0024387:	83 c4 0c             	add    esp,0xc
c002438a:	c3                   	ret    
c002438b:	90                   	nop

c002438c <SATA::access(unsigned long long, int, void*, bool)>:
c002438c:	55                   	push   ebp
c002438d:	57                   	push   edi
c002438e:	56                   	push   esi
c002438f:	53                   	push   ebx
c0024390:	83 ec 2c             	sub    esp,0x2c
c0024393:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0024397:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002439b:	89 04 24             	mov    DWORD PTR [esp],eax
c002439e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00243a2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00243a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00243aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243ae:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c00243b3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00243b8:	7e 33                	jle    c00243ed <SATA::access(unsigned long long, int, void*, bool)+0x61>
c00243ba:	57                   	push   edi
c00243bb:	57                   	push   edi
c00243bc:	53                   	push   ebx
c00243bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00243c1:	6a 10                	push   0x10
c00243c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243cb:	55                   	push   ebp
c00243cc:	e8 bb ff ff ff       	call   c002438c <SATA::access(unsigned long long, int, void*, bool)>
c00243d1:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c00243d6:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c00243db:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00243e0:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c00243e8:	83 c4 20             	add    esp,0x20
c00243eb:	eb c6                	jmp    c00243b3 <SATA::access(unsigned long long, int, void*, bool)+0x27>
c00243ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00243f0:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c00243f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00243fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024402:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024408:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002440e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024412:	89 d8                	mov    eax,ebx
c0024414:	c1 e0 07             	shl    eax,0x7
c0024417:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002441b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024425:	56                   	push   esi
c0024426:	8d 43 02             	lea    eax,[ebx+0x2]
c0024429:	56                   	push   esi
c002442a:	c1 e0 07             	shl    eax,0x7
c002442d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024431:	50                   	push   eax
c0024432:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024438:	e8 7f ef ff ff       	call   c00233bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002443d:	ba 01 00 00 00       	mov    edx,0x1
c0024442:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024446:	83 c4 10             	add    esp,0x10
c0024449:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002444e:	0f 84 dd 01 00 00    	je     c0024631 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024454:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024458:	c1 e0 09             	shl    eax,0x9
c002445b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024460:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024464:	74 17                	je     c002447d <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c0024466:	51                   	push   ecx
c0024467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002446b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002446f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024475:	e8 26 c2 fd ff       	call   c00006a0 <memcpy>
c002447a:	83 c4 10             	add    esp,0x10
c002447d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024483:	8d 43 02             	lea    eax,[ebx+0x2]
c0024486:	c1 e0 07             	shl    eax,0x7
c0024489:	89 de                	mov    esi,ebx
c002448b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002448f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024491:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024497:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002449d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00244a1:	c1 e1 05             	shl    ecx,0x5
c00244a4:	01 c8                	add    eax,ecx
c00244a6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00244aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00244ac:	83 e1 01             	and    ecx,0x1
c00244af:	83 e7 bf             	and    edi,0xffffffbf
c00244b2:	c1 e1 06             	shl    ecx,0x6
c00244b5:	09 f9                	or     ecx,edi
c00244b7:	88 08                	mov    BYTE PTR [eax],cl
c00244b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244bb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00244c1:	81 c9 05 00 01 00    	or     ecx,0x10005
c00244c7:	89 08                	mov    DWORD PTR [eax],ecx
c00244c9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00244cf:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c00244d5:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c00244db:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c00244de:	52                   	push   edx
c00244df:	68 90 00 00 00       	push   0x90
c00244e4:	6a 00                	push   0x0
c00244e6:	57                   	push   edi
c00244e7:	e8 d8 c1 fd ff       	call   c00006c4 <memset>
c00244ec:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00244f2:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c00244f6:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c00244fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024500:	83 c4 10             	add    esp,0x10
c0024503:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024506:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c002450c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024512:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024517:	09 c8                	or     eax,ecx
c0024519:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c002451f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0024522:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c0024529:	66 25 00 7f          	and    ax,0x7f00
c002452d:	66 0d 27 80          	or     ax,0x8027
c0024531:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024536:	66 89 07             	mov    WORD PTR [edi],ax
c0024539:	19 c0                	sbb    eax,eax
c002453b:	c1 e6 07             	shl    esi,0x7
c002453e:	83 e0 f0             	and    eax,0xfffffff0
c0024541:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024545:	83 c0 35             	add    eax,0x35
c0024548:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c002454b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002454e:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c0024552:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024556:	c1 e8 10             	shr    eax,0x10
c0024559:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c002455c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024560:	c1 e8 18             	shr    eax,0x18
c0024563:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c0024566:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002456a:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c002456d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024571:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c0024574:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024578:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c002457c:	31 c0                	xor    eax,eax
c002457e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024584:	80 e1 88             	and    cl,0x88
c0024587:	74 0a                	je     c0024593 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c0024589:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002458e:	74 0a                	je     c002459a <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c0024590:	40                   	inc    eax
c0024591:	eb eb                	jmp    c002457e <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c0024593:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024598:	75 0a                	jne    c00245a4 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c002459a:	83 ec 0c             	sub    esp,0xc
c002459d:	68 c8 c4 02 c0       	push   0xc002c4c8
c00245a2:	eb 56                	jmp    c00245fa <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c00245a4:	b8 01 00 00 00       	mov    eax,0x1
c00245a9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00245ad:	c1 e3 07             	shl    ebx,0x7
c00245b0:	d3 e0                	shl    eax,cl
c00245b2:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00245b6:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00245bc:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c00245c2:	85 c8                	test   eax,ecx
c00245c4:	74 20                	je     c00245e6 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c00245c6:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c00245cc:	0f ba e1 1e          	bt     ecx,0x1e
c00245d0:	73 ea                	jae    c00245bc <SATA::access(unsigned long long, int, void*, bool)+0x230>
c00245d2:	83 ec 0c             	sub    esp,0xc
c00245d5:	68 d6 c4 02 c0       	push   0xc002c4d6
c00245da:	e8 ba 58 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00245df:	83 c4 10             	add    esp,0x10
c00245e2:	31 d2                	xor    edx,edx
c00245e4:	eb 4b                	jmp    c0024631 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c00245e6:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00245ec:	0f ba e0 1e          	bt     eax,0x1e
c00245f0:	73 17                	jae    c0024609 <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c00245f2:	83 ec 0c             	sub    esp,0xc
c00245f5:	68 d6 c4 02 c0       	push   0xc002c4d6
c00245fa:	e8 9a 58 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00245ff:	83 c4 10             	add    esp,0x10
c0024602:	ba 01 00 00 00       	mov    edx,0x1
c0024607:	eb 28                	jmp    c0024631 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024609:	31 d2                	xor    edx,edx
c002460b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024610:	75 1f                	jne    c0024631 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024612:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024616:	50                   	push   eax
c0024617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002461b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024621:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024625:	e8 76 c0 fd ff       	call   c00006a0 <memcpy>
c002462a:	83 c4 10             	add    esp,0x10
c002462d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024631:	83 c4 2c             	add    esp,0x2c
c0024634:	89 d0                	mov    eax,edx
c0024636:	5b                   	pop    ebx
c0024637:	5e                   	pop    esi
c0024638:	5f                   	pop    edi
c0024639:	5d                   	pop    ebp
c002463a:	c3                   	ret    
c002463b:	90                   	nop

c002463c <SATA::read(unsigned long long, int, void*)>:
c002463c:	57                   	push   edi
c002463d:	b8 04 00 00 00       	mov    eax,0x4
c0024642:	56                   	push   esi
c0024643:	53                   	push   ebx
c0024644:	83 ec 10             	sub    esp,0x10
c0024647:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002464b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002464f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024652:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024656:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002465a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024660:	77 3b                	ja     c002469d <SATA::read(unsigned long long, int, void*)+0x61>
c0024662:	b8 06 00 00 00       	mov    eax,0x6
c0024667:	85 d2                	test   edx,edx
c0024669:	74 32                	je     c002469d <SATA::read(unsigned long long, int, void*)+0x61>
c002466b:	50                   	push   eax
c002466c:	50                   	push   eax
c002466d:	6a 00                	push   0x0
c002466f:	52                   	push   edx
c0024670:	53                   	push   ebx
c0024671:	57                   	push   edi
c0024672:	56                   	push   esi
c0024673:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024677:	e8 10 fd ff ff       	call   c002438c <SATA::access(unsigned long long, int, void*, bool)>
c002467c:	83 c4 20             	add    esp,0x20
c002467f:	85 c0                	test   eax,eax
c0024681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024685:	75 11                	jne    c0024698 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024687:	01 1d 28 0e 03 c0    	add    DWORD PTR ds:0xc0030e28,ebx
c002468d:	e8 c6 c0 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0024692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024696:	eb 05                	jmp    c002469d <SATA::read(unsigned long long, int, void*)+0x61>
c0024698:	b8 01 00 00 00       	mov    eax,0x1
c002469d:	83 c4 10             	add    esp,0x10
c00246a0:	5b                   	pop    ebx
c00246a1:	5e                   	pop    esi
c00246a2:	5f                   	pop    edi
c00246a3:	c3                   	ret    

c00246a4 <SATA::write(unsigned long long, int, void*)>:
c00246a4:	57                   	push   edi
c00246a5:	b8 04 00 00 00       	mov    eax,0x4
c00246aa:	56                   	push   esi
c00246ab:	53                   	push   ebx
c00246ac:	83 ec 10             	sub    esp,0x10
c00246af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00246b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00246b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00246ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00246be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00246c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00246c8:	77 3b                	ja     c0024705 <SATA::write(unsigned long long, int, void*)+0x61>
c00246ca:	b8 06 00 00 00       	mov    eax,0x6
c00246cf:	85 d2                	test   edx,edx
c00246d1:	74 32                	je     c0024705 <SATA::write(unsigned long long, int, void*)+0x61>
c00246d3:	50                   	push   eax
c00246d4:	50                   	push   eax
c00246d5:	6a 01                	push   0x1
c00246d7:	52                   	push   edx
c00246d8:	53                   	push   ebx
c00246d9:	57                   	push   edi
c00246da:	56                   	push   esi
c00246db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00246df:	e8 a8 fc ff ff       	call   c002438c <SATA::access(unsigned long long, int, void*, bool)>
c00246e4:	83 c4 20             	add    esp,0x20
c00246e7:	85 c0                	test   eax,eax
c00246e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246ed:	75 11                	jne    c0024700 <SATA::write(unsigned long long, int, void*)+0x5c>
c00246ef:	01 1d 24 0e 03 c0    	add    DWORD PTR ds:0xc0030e24,ebx
c00246f5:	e8 5e c0 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c00246fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246fe:	eb 05                	jmp    c0024705 <SATA::write(unsigned long long, int, void*)+0x61>
c0024700:	b8 01 00 00 00       	mov    eax,0x1
c0024705:	83 c4 10             	add    esp,0x10
c0024708:	5b                   	pop    ebx
c0024709:	5e                   	pop    esi
c002470a:	5f                   	pop    edi
c002470b:	c3                   	ret    

c002470c <SATAPI::write(unsigned long long, int, void*)>:
c002470c:	b8 03 00 00 00       	mov    eax,0x3
c0024711:	c3                   	ret    

c0024712 <SATAPI::close(int, int, void*)>:
c0024712:	83 ec 0c             	sub    esp,0xc
c0024715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024719:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002471f:	85 c0                	test   eax,eax
c0024721:	74 0c                	je     c002472f <SATAPI::close(int, int, void*)+0x1d>
c0024723:	83 ec 0c             	sub    esp,0xc
c0024726:	8b 10                	mov    edx,DWORD PTR [eax]
c0024728:	50                   	push   eax
c0024729:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002472c:	83 c4 10             	add    esp,0x10
c002472f:	31 c0                	xor    eax,eax
c0024731:	83 c4 0c             	add    esp,0xc
c0024734:	c3                   	ret    
c0024735:	90                   	nop

c0024736 <SATAPI::SATAPI()>:
c0024736:	83 ec 0c             	sub    esp,0xc
c0024739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473d:	83 ec 04             	sub    esp,0x4
c0024740:	68 00 08 00 00       	push   0x800
c0024745:	68 20 c5 02 c0       	push   0xc002c520
c002474a:	50                   	push   eax
c002474b:	e8 ee f9 fe ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024750:	83 c4 10             	add    esp,0x10
c0024753:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c0024758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002475c:	89 10                	mov    DWORD PTR [eax],edx
c002475e:	90                   	nop
c002475f:	83 c4 0c             	add    esp,0xc
c0024762:	c3                   	ret    
c0024763:	90                   	nop

c0024764 <SATAPI::diskRemoved()>:
c0024764:	83 ec 18             	sub    esp,0x18
c0024767:	68 2c c5 02 c0       	push   0xc002c52c
c002476c:	e8 82 e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024775:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002477c:	83 c4 1c             	add    esp,0x1c
c002477f:	c3                   	ret    

c0024780 <SATAPI::diskInserted()>:
c0024780:	53                   	push   ebx
c0024781:	83 ec 14             	sub    esp,0x14
c0024784:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024788:	68 43 c5 02 c0       	push   0xc002c543
c002478d:	e8 61 e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024792:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002479c:	e8 05 fa fe ff       	call   c00141a6 <PhysicalDisk::startCache()>
c00247a1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00247a5:	83 c4 18             	add    esp,0x18
c00247a8:	5b                   	pop    ebx
c00247a9:	e9 1a 1b ff ff       	jmp    c00162c8 <createPartitionsForDisk(PhysicalDisk*)>

c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00247ae:	55                   	push   ebp
c00247af:	57                   	push   edi
c00247b0:	56                   	push   esi
c00247b1:	53                   	push   ebx
c00247b2:	83 ec 38             	sub    esp,0x38
c00247b5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00247b9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00247bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00247c1:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00247c5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00247c9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00247cd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00247d1:	52                   	push   edx
c00247d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00247d6:	55                   	push   ebp
c00247d7:	68 5b c5 02 c0       	push   0xc002c55b
c00247dc:	e8 12 e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00247e1:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00247e7:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00247ed:	8d 5f 02             	lea    ebx,[edi+0x2]
c00247f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00247f6:	c1 e3 07             	shl    ebx,0x7
c00247f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00247fd:	89 f8                	mov    eax,edi
c00247ff:	c1 e0 07             	shl    eax,0x7
c0024802:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0024806:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002480a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024814:	83 c4 18             	add    esp,0x18
c0024817:	03 5c 24 14          	add    ebx,DWORD PTR [esp+0x14]
c002481b:	53                   	push   ebx
c002481c:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024822:	e8 95 eb ff ff       	call   c00233bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024827:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002482b:	83 c4 10             	add    esp,0x10
c002482e:	b8 01 00 00 00       	mov    eax,0x1
c0024833:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024838:	0f 84 c6 01 00 00    	je     c0024a04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c002483e:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024844:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024846:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002484c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024852:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024856:	c1 e1 05             	shl    ecx,0x5
c0024859:	01 c8                	add    eax,ecx
c002485b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002485d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024863:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024869:	89 08                	mov    DWORD PTR [eax],ecx
c002486b:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024871:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024877:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002487d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024880:	50                   	push   eax
c0024881:	68 90 00 00 00       	push   0x90
c0024886:	6a 00                	push   0x0
c0024888:	53                   	push   ebx
c0024889:	e8 36 be fd ff       	call   c00006c4 <memset>
c002488e:	c7 04 24 95 c5 02 c0 	mov    DWORD PTR [esp],0xc002c595
c0024895:	e8 59 e0 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002489a:	83 c4 0c             	add    esp,0xc
c002489d:	8d 43 40             	lea    eax,[ebx+0x40]
c00248a0:	6a 0c                	push   0xc
c00248a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248a6:	50                   	push   eax
c00248a7:	e8 f4 bd fd ff       	call   c00006a0 <memcpy>
c00248ac:	c7 04 24 9f c5 02 c0 	mov    DWORD PTR [esp],0xc002c59f
c00248b3:	e8 3b e0 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00248b8:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00248be:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00248c1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00248c7:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00248cd:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00248d3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00248d7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00248dc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00248e0:	09 c8                	or     eax,ecx
c00248e2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00248e8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00248eb:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00248f2:	66 25 00 7f          	and    ax,0x7f00
c00248f6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00248fa:	66 0d 27 80          	or     ax,0x8027
c00248fe:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024902:	66 89 03             	mov    WORD PTR [ebx],ax
c0024905:	89 d0                	mov    eax,edx
c0024907:	c1 ea 18             	shr    edx,0x18
c002490a:	c1 e8 10             	shr    eax,0x10
c002490d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024910:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024913:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024917:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002491a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002491e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024921:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024925:	83 c4 10             	add    esp,0x10
c0024928:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002492c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024930:	31 c0                	xor    eax,eax
c0024932:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024938:	80 e1 88             	and    cl,0x88
c002493b:	74 0a                	je     c0024947 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x199>
c002493d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024942:	74 0a                	je     c002494e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a0>
c0024944:	40                   	inc    eax
c0024945:	eb eb                	jmp    c0024932 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x184>
c0024947:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002494c:	75 0f                	jne    c002495d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002494e:	83 ec 0c             	sub    esp,0xc
c0024951:	68 c8 c4 02 c0       	push   0xc002c4c8
c0024956:	e8 3e 55 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002495b:	eb 3b                	jmp    c0024998 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ea>
c002495d:	b8 01 00 00 00       	mov    eax,0x1
c0024962:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024966:	c1 e7 07             	shl    edi,0x7
c0024969:	d3 e0                	shl    eax,cl
c002496b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c002496f:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024975:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002497b:	85 d0                	test   eax,edx
c002497d:	74 23                	je     c00249a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c002497f:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024985:	0f ba e2 1e          	bt     edx,0x1e
c0024989:	73 ea                	jae    c0024975 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c7>
c002498b:	83 ec 0c             	sub    esp,0xc
c002498e:	68 aa c5 02 c0       	push   0xc002c5aa
c0024993:	e8 5b df fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024998:	83 c4 10             	add    esp,0x10
c002499b:	b8 01 00 00 00       	mov    eax,0x1
c00249a0:	eb 62                	jmp    c0024a04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c00249a2:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00249a8:	0f ba e0 1e          	bt     eax,0x1e
c00249ac:	73 0a                	jae    c00249b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20a>
c00249ae:	83 ec 0c             	sub    esp,0xc
c00249b1:	68 bd c5 02 c0       	push   0xc002c5bd
c00249b6:	eb db                	jmp    c0024993 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e5>
c00249b8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00249bd:	74 33                	je     c00249f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c00249bf:	85 ed                	test   ebp,ebp
c00249c1:	74 2f                	je     c00249f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c00249c3:	83 ec 0c             	sub    esp,0xc
c00249c6:	68 d2 c5 02 c0       	push   0xc002c5d2
c00249cb:	e8 23 df fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00249d0:	83 c4 0c             	add    esp,0xc
c00249d3:	55                   	push   ebp
c00249d4:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00249da:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00249de:	e8 bd bc fd ff       	call   c00006a0 <memcpy>
c00249e3:	c7 04 24 dc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5dc
c00249ea:	e8 04 df fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00249ef:	83 c4 10             	add    esp,0x10
c00249f2:	83 ec 0c             	sub    esp,0xc
c00249f5:	68 e7 c5 02 c0       	push   0xc002c5e7
c00249fa:	e8 f4 de fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00249ff:	83 c4 10             	add    esp,0x10
c0024a02:	31 c0                	xor    eax,eax
c0024a04:	83 c4 2c             	add    esp,0x2c
c0024a07:	5b                   	pop    ebx
c0024a08:	5e                   	pop    esi
c0024a09:	5f                   	pop    edi
c0024a0a:	5d                   	pop    ebp
c0024a0b:	c3                   	ret    

c0024a0c <SATAPI::eject()>:
c0024a0c:	57                   	push   edi
c0024a0d:	b9 03 00 00 00       	mov    ecx,0x3
c0024a12:	53                   	push   ebx
c0024a13:	83 ec 14             	sub    esp,0x14
c0024a16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a1a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a1e:	fc                   	cld    
c0024a1f:	31 c0                	xor    eax,eax
c0024a21:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a23:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a28:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a2d:	50                   	push   eax
c0024a2e:	6a 00                	push   0x0
c0024a30:	6a 00                	push   0x0
c0024a32:	6a 00                	push   0x0
c0024a34:	6a 00                	push   0x0
c0024a36:	6a 02                	push   0x2
c0024a38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a3c:	50                   	push   eax
c0024a3d:	53                   	push   ebx
c0024a3e:	e8 6b fd ff ff       	call   c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a43:	83 c4 14             	add    esp,0x14
c0024a46:	53                   	push   ebx
c0024a47:	e8 18 fd ff ff       	call   c0024764 <SATAPI::diskRemoved()>
c0024a4c:	83 c4 24             	add    esp,0x24
c0024a4f:	31 c0                	xor    eax,eax
c0024a51:	5b                   	pop    ebx
c0024a52:	5f                   	pop    edi
c0024a53:	c3                   	ret    

c0024a54 <SATAPI::detectMedia()>:
c0024a54:	56                   	push   esi
c0024a55:	53                   	push   ebx
c0024a56:	83 ec 28             	sub    esp,0x28
c0024a59:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a5d:	6a 0c                	push   0xc
c0024a5f:	6a 00                	push   0x0
c0024a61:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a65:	56                   	push   esi
c0024a66:	e8 59 bc fd ff       	call   c00006c4 <memset>
c0024a6b:	83 c4 0c             	add    esp,0xc
c0024a6e:	6a 00                	push   0x0
c0024a70:	6a 00                	push   0x0
c0024a72:	6a 00                	push   0x0
c0024a74:	6a 00                	push   0x0
c0024a76:	6a 00                	push   0x0
c0024a78:	56                   	push   esi
c0024a79:	53                   	push   ebx
c0024a7a:	e8 2f fd ff ff       	call   c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a7f:	83 c4 1c             	add    esp,0x1c
c0024a82:	6a 0c                	push   0xc
c0024a84:	6a 00                	push   0x0
c0024a86:	56                   	push   esi
c0024a87:	e8 38 bc fd ff       	call   c00006c4 <memset>
c0024a8c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a91:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a96:	83 c4 0c             	add    esp,0xc
c0024a99:	6a 01                	push   0x1
c0024a9b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024a9f:	50                   	push   eax
c0024aa0:	6a 00                	push   0x0
c0024aa2:	6a 00                	push   0x0
c0024aa4:	6a 12                	push   0x12
c0024aa6:	56                   	push   esi
c0024aa7:	53                   	push   ebx
c0024aa8:	e8 01 fd ff ff       	call   c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024aad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ab1:	83 c4 20             	add    esp,0x20
c0024ab4:	83 e0 7f             	and    eax,0x7f
c0024ab7:	3c 70                	cmp    al,0x70
c0024ab9:	74 15                	je     c0024ad0 <SATAPI::detectMedia()+0x7c>
c0024abb:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ac2:	75 0c                	jne    c0024ad0 <SATAPI::detectMedia()+0x7c>
c0024ac4:	83 ec 0c             	sub    esp,0xc
c0024ac7:	53                   	push   ebx
c0024ac8:	e8 b3 fc ff ff       	call   c0024780 <SATAPI::diskInserted()>
c0024acd:	83 c4 10             	add    esp,0x10
c0024ad0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ad4:	83 e0 0f             	and    eax,0xf
c0024ad7:	3c 02                	cmp    al,0x2
c0024ad9:	75 1b                	jne    c0024af6 <SATAPI::detectMedia()+0xa2>
c0024adb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ae0:	75 2d                	jne    c0024b0f <SATAPI::detectMedia()+0xbb>
c0024ae2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ae9:	74 24                	je     c0024b0f <SATAPI::detectMedia()+0xbb>
c0024aeb:	83 ec 0c             	sub    esp,0xc
c0024aee:	53                   	push   ebx
c0024aef:	e8 70 fc ff ff       	call   c0024764 <SATAPI::diskRemoved()>
c0024af4:	eb 16                	jmp    c0024b0c <SATAPI::detectMedia()+0xb8>
c0024af6:	84 c0                	test   al,al
c0024af8:	75 15                	jne    c0024b0f <SATAPI::detectMedia()+0xbb>
c0024afa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024b01:	75 0c                	jne    c0024b0f <SATAPI::detectMedia()+0xbb>
c0024b03:	83 ec 0c             	sub    esp,0xc
c0024b06:	53                   	push   ebx
c0024b07:	e8 74 fc ff ff       	call   c0024780 <SATAPI::diskInserted()>
c0024b0c:	83 c4 10             	add    esp,0x10
c0024b0f:	83 c4 24             	add    esp,0x24
c0024b12:	5b                   	pop    ebx
c0024b13:	5e                   	pop    esi
c0024b14:	c3                   	ret    
c0024b15:	90                   	nop

c0024b16 <SATAPI::open(int, int, void*)>:
c0024b16:	56                   	push   esi
c0024b17:	53                   	push   ebx
c0024b18:	50                   	push   eax
c0024b19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b21:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b2b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b31:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b3f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b49:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b4f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b56:	e8 66 b1 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024b5b:	89 c6                	mov    esi,eax
c0024b5d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b63:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b69:	e8 53 b1 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024b6e:	39 c6                	cmp    esi,eax
c0024b70:	74 10                	je     c0024b82 <SATAPI::open(int, int, void*)+0x6c>
c0024b72:	83 ec 0c             	sub    esp,0xc
c0024b75:	68 fc c5 02 c0       	push   0xc002c5fc
c0024b7a:	e8 1a 53 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0024b7f:	83 c4 10             	add    esp,0x10
c0024b82:	83 ec 0c             	sub    esp,0xc
c0024b85:	6a 02                	push   0x2
c0024b87:	e8 77 cd fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0024b8c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024b92:	e8 fc ce fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0024b97:	6a 03                	push   0x3
c0024b99:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024b9f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ba5:	50                   	push   eax
c0024ba6:	e8 23 d4 fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bab:	83 c4 14             	add    esp,0x14
c0024bae:	68 12 c6 02 c0       	push   0xc002c612
c0024bb3:	e8 3b dd fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024bb8:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024bbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bc2:	e8 8d fe ff ff       	call   c0024a54 <SATAPI::detectMedia()>
c0024bc7:	83 c4 14             	add    esp,0x14
c0024bca:	31 c0                	xor    eax,eax
c0024bcc:	5b                   	pop    ebx
c0024bcd:	5e                   	pop    esi
c0024bce:	c3                   	ret    
c0024bcf:	90                   	nop

c0024bd0 <SATAPI::read(unsigned long long, int, void*)>:
c0024bd0:	55                   	push   ebp
c0024bd1:	57                   	push   edi
c0024bd2:	56                   	push   esi
c0024bd3:	53                   	push   ebx
c0024bd4:	83 ec 1c             	sub    esp,0x1c
c0024bd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024bdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bdf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024be3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024bea:	74 19                	je     c0024c05 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024bec:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024bf1:	7e 2e                	jle    c0024c21 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024bf3:	83 ec 0c             	sub    esp,0xc
c0024bf6:	68 2f c6 02 c0       	push   0xc002c62f
c0024bfb:	e8 99 52 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0024c00:	83 c4 10             	add    esp,0x10
c0024c03:	eb 1c                	jmp    c0024c21 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024c05:	83 ec 0c             	sub    esp,0xc
c0024c08:	55                   	push   ebp
c0024c09:	e8 46 fe ff ff       	call   c0024a54 <SATAPI::detectMedia()>
c0024c0e:	83 c4 10             	add    esp,0x10
c0024c11:	b8 02 00 00 00       	mov    eax,0x2
c0024c16:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024c1d:	75 cd                	jne    c0024bec <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c1f:	eb 49                	jmp    c0024c6a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024c21:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c25:	b9 03 00 00 00       	mov    ecx,0x3
c0024c2a:	fc                   	cld    
c0024c2b:	31 c0                	xor    eax,eax
c0024c2d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c2f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c34:	89 d8                	mov    eax,ebx
c0024c36:	86 e0                	xchg   al,ah
c0024c38:	c1 c0 10             	rol    eax,0x10
c0024c3b:	86 e0                	xchg   al,ah
c0024c3d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024c41:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024c45:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c49:	50                   	push   eax
c0024c4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024c4e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024c52:	56                   	push   esi
c0024c53:	53                   	push   ebx
c0024c54:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c58:	c1 e0 0b             	shl    eax,0xb
c0024c5b:	50                   	push   eax
c0024c5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c60:	50                   	push   eax
c0024c61:	55                   	push   ebp
c0024c62:	e8 47 fb ff ff       	call   c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c67:	83 c4 20             	add    esp,0x20
c0024c6a:	83 c4 1c             	add    esp,0x1c
c0024c6d:	5b                   	pop    ebx
c0024c6e:	5e                   	pop    esi
c0024c6f:	5f                   	pop    edi
c0024c70:	5d                   	pop    ebp
c0024c71:	c3                   	ret    

c0024c72 <AVX::open(int, int, void*)>:
c0024c72:	83 ec 0c             	sub    esp,0xc
c0024c75:	e8 3e 11 00 00       	call   c0025db8 <avxInit>
c0024c7a:	b8 00 00 00 00       	mov    eax,0x0
c0024c7f:	83 c4 0c             	add    esp,0xc
c0024c82:	c3                   	ret    
c0024c83:	90                   	nop

c0024c84 <AVX::close(int, int, void*)>:
c0024c84:	83 ec 0c             	sub    esp,0xc
c0024c87:	e8 2d 11 00 00       	call   c0025db9 <avxClose>
c0024c8c:	b8 00 00 00 00       	mov    eax,0x0
c0024c91:	83 c4 0c             	add    esp,0xc
c0024c94:	c3                   	ret    
c0024c95:	90                   	nop

c0024c96 <AVX::available()>:
c0024c96:	83 ec 0c             	sub    esp,0xc
c0024c99:	e8 12 11 00 00       	call   c0025db0 <avxDetect>
c0024c9e:	85 c0                	test   eax,eax
c0024ca0:	0f 95 c0             	setne  al
c0024ca3:	83 c4 0c             	add    esp,0xc
c0024ca6:	c3                   	ret    
c0024ca7:	90                   	nop

c0024ca8 <AVX::save(void*)>:
c0024ca8:	83 ec 0c             	sub    esp,0xc
c0024cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024caf:	83 ec 0c             	sub    esp,0xc
c0024cb2:	50                   	push   eax
c0024cb3:	e8 fe 10 00 00       	call   c0025db6 <avxSave>
c0024cb8:	83 c4 10             	add    esp,0x10
c0024cbb:	90                   	nop
c0024cbc:	83 c4 0c             	add    esp,0xc
c0024cbf:	c3                   	ret    

c0024cc0 <AVX::load(void*)>:
c0024cc0:	83 ec 0c             	sub    esp,0xc
c0024cc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cc7:	83 ec 0c             	sub    esp,0xc
c0024cca:	50                   	push   eax
c0024ccb:	e8 e7 10 00 00       	call   c0025db7 <avxLoad>
c0024cd0:	83 c4 10             	add    esp,0x10
c0024cd3:	90                   	nop
c0024cd4:	83 c4 0c             	add    esp,0xc
c0024cd7:	c3                   	ret    

c0024cd8 <AVX::AVX()>:
c0024cd8:	83 ec 0c             	sub    esp,0xc
c0024cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cdf:	83 ec 08             	sub    esp,0x8
c0024ce2:	68 94 c6 02 c0       	push   0xc002c694
c0024ce7:	50                   	push   eax
c0024ce8:	e8 2f f5 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024ced:	83 c4 10             	add    esp,0x10
c0024cf0:	ba a4 c6 02 c0       	mov    edx,0xc002c6a4
c0024cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf9:	89 10                	mov    DWORD PTR [eax],edx
c0024cfb:	90                   	nop
c0024cfc:	83 c4 0c             	add    esp,0xc
c0024cff:	c3                   	ret    

c0024d00 <MMX::available()>:
c0024d00:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024d05:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024d0b:	83 e0 20             	and    eax,0x20
c0024d0e:	84 c0                	test   al,al
c0024d10:	0f 95 c0             	setne  al
c0024d13:	c3                   	ret    

c0024d14 <MMX::open(int, int, void*)>:
c0024d14:	83 ec 0c             	sub    esp,0xc
c0024d17:	e8 20 11 00 00       	call   c0025e3c <x87Init>
c0024d1c:	b8 00 00 00 00       	mov    eax,0x0
c0024d21:	83 c4 0c             	add    esp,0xc
c0024d24:	c3                   	ret    
c0024d25:	90                   	nop

c0024d26 <MMX::close(int, int, void*)>:
c0024d26:	83 ec 0c             	sub    esp,0xc
c0024d29:	e8 28 11 00 00       	call   c0025e56 <x87Close>
c0024d2e:	b8 00 00 00 00       	mov    eax,0x0
c0024d33:	83 c4 0c             	add    esp,0xc
c0024d36:	c3                   	ret    
c0024d37:	90                   	nop

c0024d38 <MMX::save(void*)>:
c0024d38:	83 ec 0c             	sub    esp,0xc
c0024d3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d3f:	83 ec 0c             	sub    esp,0xc
c0024d42:	50                   	push   eax
c0024d43:	e8 e9 10 00 00       	call   c0025e31 <x87Save>
c0024d48:	83 c4 10             	add    esp,0x10
c0024d4b:	90                   	nop
c0024d4c:	83 c4 0c             	add    esp,0xc
c0024d4f:	c3                   	ret    

c0024d50 <MMX::load(void*)>:
c0024d50:	83 ec 0c             	sub    esp,0xc
c0024d53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d57:	83 ec 0c             	sub    esp,0xc
c0024d5a:	50                   	push   eax
c0024d5b:	e8 d7 10 00 00       	call   c0025e37 <x87Load>
c0024d60:	83 c4 10             	add    esp,0x10
c0024d63:	90                   	nop
c0024d64:	83 c4 0c             	add    esp,0xc
c0024d67:	c3                   	ret    

c0024d68 <MMX::MMX()>:
c0024d68:	83 ec 0c             	sub    esp,0xc
c0024d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d6f:	83 ec 08             	sub    esp,0x8
c0024d72:	68 d4 c6 02 c0       	push   0xc002c6d4
c0024d77:	50                   	push   eax
c0024d78:	e8 9f f4 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024d7d:	83 c4 10             	add    esp,0x10
c0024d80:	ba e4 c6 02 c0       	mov    edx,0xc002c6e4
c0024d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d89:	89 10                	mov    DWORD PTR [eax],edx
c0024d8b:	90                   	nop
c0024d8c:	83 c4 0c             	add    esp,0xc
c0024d8f:	c3                   	ret    

c0024d90 <SSE::open(int, int, void*)>:
c0024d90:	83 ec 0c             	sub    esp,0xc
c0024d93:	e8 5c 10 00 00       	call   c0025df4 <sseInit>
c0024d98:	b8 00 00 00 00       	mov    eax,0x0
c0024d9d:	83 c4 0c             	add    esp,0xc
c0024da0:	c3                   	ret    
c0024da1:	90                   	nop

c0024da2 <SSE::close(int, int, void*)>:
c0024da2:	83 ec 0c             	sub    esp,0xc
c0024da5:	e8 5a 10 00 00       	call   c0025e04 <sseClose>
c0024daa:	b8 00 00 00 00       	mov    eax,0x0
c0024daf:	83 c4 0c             	add    esp,0xc
c0024db2:	c3                   	ret    
c0024db3:	90                   	nop

c0024db4 <SSE::available()>:
c0024db4:	83 ec 1c             	sub    esp,0x1c
c0024db7:	e8 14 10 00 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c0024dbc:	85 c0                	test   eax,eax
c0024dbe:	0f 95 c0             	setne  al
c0024dc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024dc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024dc9:	83 c4 1c             	add    esp,0x1c
c0024dcc:	c3                   	ret    
c0024dcd:	90                   	nop

c0024dce <SSE::save(void*)>:
c0024dce:	83 ec 0c             	sub    esp,0xc
c0024dd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dd5:	83 ec 0c             	sub    esp,0xc
c0024dd8:	50                   	push   eax
c0024dd9:	e8 0a 10 00 00       	call   c0025de8 <sseSave>
c0024dde:	83 c4 10             	add    esp,0x10
c0024de1:	90                   	nop
c0024de2:	83 c4 0c             	add    esp,0xc
c0024de5:	c3                   	ret    

c0024de6 <SSE::load(void*)>:
c0024de6:	83 ec 0c             	sub    esp,0xc
c0024de9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ded:	83 ec 0c             	sub    esp,0xc
c0024df0:	50                   	push   eax
c0024df1:	e8 f8 0f 00 00       	call   c0025dee <sseLoad>
c0024df6:	83 c4 10             	add    esp,0x10
c0024df9:	90                   	nop
c0024dfa:	83 c4 0c             	add    esp,0xc
c0024dfd:	c3                   	ret    

c0024dfe <SSE::SSE()>:
c0024dfe:	83 ec 0c             	sub    esp,0xc
c0024e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e05:	83 ec 08             	sub    esp,0x8
c0024e08:	68 14 c7 02 c0       	push   0xc002c714
c0024e0d:	50                   	push   eax
c0024e0e:	e8 09 f4 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024e13:	83 c4 10             	add    esp,0x10
c0024e16:	ba 24 c7 02 c0       	mov    edx,0xc002c724
c0024e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1f:	89 10                	mov    DWORD PTR [eax],edx
c0024e21:	90                   	nop
c0024e22:	83 c4 0c             	add    esp,0xc
c0024e25:	c3                   	ret    

c0024e26 <x87::open(int, int, void*)>:
c0024e26:	83 ec 0c             	sub    esp,0xc
c0024e29:	e8 0e 10 00 00       	call   c0025e3c <x87Init>
c0024e2e:	b8 00 00 00 00       	mov    eax,0x0
c0024e33:	83 c4 0c             	add    esp,0xc
c0024e36:	c3                   	ret    
c0024e37:	90                   	nop

c0024e38 <x87::close(int, int, void*)>:
c0024e38:	83 ec 0c             	sub    esp,0xc
c0024e3b:	e8 16 10 00 00       	call   c0025e56 <x87Close>
c0024e40:	b8 00 00 00 00       	mov    eax,0x0
c0024e45:	83 c4 0c             	add    esp,0xc
c0024e48:	c3                   	ret    
c0024e49:	90                   	nop

c0024e4a <x87::available()>:
c0024e4a:	83 ec 0c             	sub    esp,0xc
c0024e4d:	e8 c4 0f 00 00       	call   c0025e16 <x87Detect>
c0024e52:	85 c0                	test   eax,eax
c0024e54:	0f 95 c0             	setne  al
c0024e57:	83 c4 0c             	add    esp,0xc
c0024e5a:	c3                   	ret    
c0024e5b:	90                   	nop

c0024e5c <x87::save(void*)>:
c0024e5c:	83 ec 0c             	sub    esp,0xc
c0024e5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e63:	83 ec 0c             	sub    esp,0xc
c0024e66:	50                   	push   eax
c0024e67:	e8 c5 0f 00 00       	call   c0025e31 <x87Save>
c0024e6c:	83 c4 10             	add    esp,0x10
c0024e6f:	90                   	nop
c0024e70:	83 c4 0c             	add    esp,0xc
c0024e73:	c3                   	ret    

c0024e74 <x87::load(void*)>:
c0024e74:	83 ec 0c             	sub    esp,0xc
c0024e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e7b:	83 ec 0c             	sub    esp,0xc
c0024e7e:	50                   	push   eax
c0024e7f:	e8 b3 0f 00 00       	call   c0025e37 <x87Load>
c0024e84:	83 c4 10             	add    esp,0x10
c0024e87:	90                   	nop
c0024e88:	83 c4 0c             	add    esp,0xc
c0024e8b:	c3                   	ret    

c0024e8c <x87::x87()>:
c0024e8c:	83 ec 0c             	sub    esp,0xc
c0024e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e93:	83 ec 08             	sub    esp,0x8
c0024e96:	68 54 c7 02 c0       	push   0xc002c754
c0024e9b:	50                   	push   eax
c0024e9c:	e8 7b f3 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024ea1:	83 c4 10             	add    esp,0x10
c0024ea4:	ba 64 c7 02 c0       	mov    edx,0xc002c764
c0024ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ead:	89 10                	mov    DWORD PTR [eax],edx
c0024eaf:	90                   	nop
c0024eb0:	83 c4 0c             	add    esp,0xc
c0024eb3:	c3                   	ret    

c0024eb4 <APIC::disable()>:
c0024eb4:	90                   	nop
c0024eb5:	c3                   	ret    

c0024eb6 <APIC::close(int, int, void*)>:
c0024eb6:	55                   	push   ebp
c0024eb7:	89 e5                	mov    ebp,esp
c0024eb9:	83 ec 08             	sub    esp,0x8
c0024ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ec1:	83 c0 3c             	add    eax,0x3c
c0024ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ec6:	83 ec 0c             	sub    esp,0xc
c0024ec9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ecc:	ff d0                	call   eax
c0024ece:	83 c4 10             	add    esp,0x10
c0024ed1:	b8 00 00 00 00       	mov    eax,0x0
c0024ed6:	c9                   	leave  
c0024ed7:	c3                   	ret    

c0024ed8 <IOAPIC::close(int, int, void*)>:
c0024ed8:	b8 00 00 00 00       	mov    eax,0x0
c0024edd:	c3                   	ret    

c0024ede <APIC::io_wait()>:
c0024ede:	eb 00                	jmp    c0024ee0 <APIC::io_wait()+0x2>
c0024ee0:	eb 00                	jmp    c0024ee2 <APIC::io_wait()+0x4>
c0024ee2:	90                   	nop
c0024ee3:	c3                   	ret    

c0024ee4 <APIC::getBase()>:
c0024ee4:	55                   	push   ebp
c0024ee5:	89 e5                	mov    ebp,esp
c0024ee7:	83 ec 18             	sub    esp,0x18
c0024eea:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024eef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024ef5:	83 e0 08             	and    eax,0x8
c0024ef8:	84 c0                	test   al,al
c0024efa:	75 07                	jne    c0024f03 <APIC::getBase()+0x1f>
c0024efc:	b8 00 00 00 00       	mov    eax,0x0
c0024f01:	eb 21                	jmp    c0024f24 <APIC::getBase()+0x40>
c0024f03:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024f08:	83 ec 08             	sub    esp,0x8
c0024f0b:	6a 1b                	push   0x1b
c0024f0d:	50                   	push   eax
c0024f0e:	e8 b9 9c fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0024f13:	83 c4 10             	add    esp,0x10
c0024f16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024f19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024f1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f1f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024f24:	c9                   	leave  
c0024f25:	c3                   	ret    

c0024f26 <APIC::eoi(unsigned char)>:
c0024f26:	55                   	push   ebp
c0024f27:	89 e5                	mov    ebp,esp
c0024f29:	83 ec 28             	sub    esp,0x28
c0024f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024f2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024f32:	83 ec 0c             	sub    esp,0xc
c0024f35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f38:	e8 a7 ff ff ff       	call   c0024ee4 <APIC::getBase()>
c0024f3d:	83 c4 10             	add    esp,0x10
c0024f40:	05 b0 00 00 00       	add    eax,0xb0
c0024f45:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024f48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024f4b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024f51:	90                   	nop
c0024f52:	c9                   	leave  
c0024f53:	c3                   	ret    

c0024f54 <APIC::open(int, int, void*)>:
c0024f54:	55                   	push   ebp
c0024f55:	89 e5                	mov    ebp,esp
c0024f57:	57                   	push   edi
c0024f58:	56                   	push   esi
c0024f59:	53                   	push   ebx
c0024f5a:	83 ec 2c             	sub    esp,0x2c
c0024f5d:	83 ec 0c             	sub    esp,0xc
c0024f60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f63:	e8 7c ff ff ff       	call   c0024ee4 <APIC::getBase()>
c0024f68:	83 c4 10             	add    esp,0x10
c0024f6b:	89 c2                	mov    edx,eax
c0024f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f70:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f76:	0f b6 f8             	movzx  edi,al
c0024f79:	89 d0                	mov    eax,edx
c0024f7b:	ba 00 00 00 00       	mov    edx,0x0
c0024f80:	89 c1                	mov    ecx,eax
c0024f82:	80 e5 ff             	and    ch,0xff
c0024f85:	89 cb                	mov    ebx,ecx
c0024f87:	0f b6 f2             	movzx  esi,dl
c0024f8a:	89 d8                	mov    eax,ebx
c0024f8c:	89 f2                	mov    edx,esi
c0024f8e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f91:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f94:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f98:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f9c:	83 e0 00             	and    eax,0x0
c0024f9f:	09 d0                	or     eax,edx
c0024fa1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fa8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024fae:	8d 50 01             	lea    edx,[eax+0x1]
c0024fb1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024fb4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024fba:	0f b6 d0             	movzx  edx,al
c0024fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fc0:	83 c2 08             	add    edx,0x8
c0024fc3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024fc7:	0f b6 c9             	movzx  ecx,cl
c0024fca:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024fd0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024fd4:	83 ec 0c             	sub    esp,0xc
c0024fd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fda:	e8 05 ff ff ff       	call   c0024ee4 <APIC::getBase()>
c0024fdf:	83 c4 10             	add    esp,0x10
c0024fe2:	05 f0 00 00 00       	add    eax,0xf0
c0024fe7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024fea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024fed:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024ff2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024ff9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025000:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025003:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025006:	89 10                	mov    DWORD PTR [eax],edx
c0025008:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002500f:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c0025014:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025017:	7d 7c                	jge    c0025095 <APIC::open(int, int, void*)+0x141>
c0025019:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002501c:	8b 04 85 c0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c40]
c0025023:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025026:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025029:	8b 04 85 c0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c40]
c0025030:	c1 e8 08             	shr    eax,0x8
c0025033:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025037:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002503a:	8b 04 85 c0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c40]
c0025041:	c1 e8 18             	shr    eax,0x18
c0025044:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025047:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002504b:	75 40                	jne    c002508d <APIC::open(int, int, void*)+0x139>
c002504d:	83 ec 0c             	sub    esp,0xc
c0025050:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025053:	e8 8c fe ff ff       	call   c0024ee4 <APIC::getBase()>
c0025058:	83 c4 10             	add    esp,0x10
c002505b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002505f:	75 07                	jne    c0025068 <APIC::open(int, int, void*)+0x114>
c0025061:	ba 60 03 00 00       	mov    edx,0x360
c0025066:	eb 05                	jmp    c002506d <APIC::open(int, int, void*)+0x119>
c0025068:	ba 50 03 00 00       	mov    edx,0x350
c002506d:	01 d0                	add    eax,edx
c002506f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025072:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025075:	8b 00                	mov    eax,DWORD PTR [eax]
c0025077:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002507a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025081:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025085:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025088:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002508b:	89 10                	mov    DWORD PTR [eax],edx
c002508d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025090:	e9 7a ff ff ff       	jmp    c002500f <APIC::open(int, int, void*)+0xbb>
c0025095:	b8 00 00 00 00       	mov    eax,0x0
c002509a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002509d:	5b                   	pop    ebx
c002509e:	5e                   	pop    esi
c002509f:	5f                   	pop    edi
c00250a0:	5d                   	pop    ebp
c00250a1:	c3                   	ret    

c00250a2 <IOAPIC::IOAPIC()>:
c00250a2:	83 ec 0c             	sub    esp,0xc
c00250a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a9:	83 ec 08             	sub    esp,0x8
c00250ac:	68 94 c7 02 c0       	push   0xc002c794
c00250b1:	50                   	push   eax
c00250b2:	e8 53 ee fe ff       	call   c0013f0a <Device::Device(char const*)>
c00250b7:	83 c4 10             	add    esp,0x10
c00250ba:	ba bc c8 02 c0       	mov    edx,0xc002c8bc
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	89 10                	mov    DWORD PTR [eax],edx
c00250c5:	90                   	nop
c00250c6:	83 c4 0c             	add    esp,0xc
c00250c9:	c3                   	ret    

c00250ca <APIC::APIC()>:
c00250ca:	53                   	push   ebx
c00250cb:	83 ec 18             	sub    esp,0x18
c00250ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250d2:	83 ec 08             	sub    esp,0x8
c00250d5:	68 9c c7 02 c0       	push   0xc002c79c
c00250da:	50                   	push   eax
c00250db:	e8 96 f5 fe ff       	call   c0014676 <InterruptController::InterruptController(char const*)>
c00250e0:	83 c4 10             	add    esp,0x10
c00250e3:	ba 74 c8 02 c0       	mov    edx,0xc002c874
c00250e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250ec:	89 10                	mov    DWORD PTR [eax],edx
c00250ee:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c00250f3:	83 f0 01             	xor    eax,0x1
c00250f6:	84 c0                	test   al,al
c00250f8:	0f 84 a1 00 00 00    	je     c002519f <APIC::APIC()+0xd5>
c00250fe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025103:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c0025108:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002510c:	0f 83 86 00 00 00    	jae    c0025198 <APIC::APIC()+0xce>
c0025112:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002511a:	83 ec 0c             	sub    esp,0xc
c002511d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025121:	e8 fe a4 fe ff       	call   c000f624 <malloc>
c0025126:	83 c4 10             	add    esp,0x10
c0025129:	89 c3                	mov    ebx,eax
c002512b:	83 ec 0c             	sub    esp,0xc
c002512e:	53                   	push   ebx
c002512f:	e8 6e ff ff ff       	call   c00250a2 <IOAPIC::IOAPIC()>
c0025134:	83 c4 10             	add    esp,0x10
c0025137:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002513b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025140:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025144:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c002514b:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c0025150:	40                   	inc    eax
c0025151:	a3 40 0e 03 c0       	mov    ds:0xc0030e40,eax
c0025156:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c002515b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025161:	83 ec 08             	sub    esp,0x8
c0025164:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025168:	50                   	push   eax
c0025169:	e8 ac eb fe ff       	call   c0013d1a <Device::addChild(Device*)>
c002516e:	83 c4 10             	add    esp,0x10
c0025171:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025175:	8b 00                	mov    eax,DWORD PTR [eax]
c0025177:	83 c0 08             	add    eax,0x8
c002517a:	8b 00                	mov    eax,DWORD PTR [eax]
c002517c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025181:	6a 00                	push   0x0
c0025183:	6a 00                	push   0x0
c0025185:	52                   	push   edx
c0025186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002518a:	ff d0                	call   eax
c002518c:	83 c4 10             	add    esp,0x10
c002518f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025193:	e9 6b ff ff ff       	jmp    c0025103 <APIC::APIC()+0x39>
c0025198:	c6 05 80 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e80,0x1
c002519f:	90                   	nop
c00251a0:	83 c4 18             	add    esp,0x18
c00251a3:	5b                   	pop    ebx
c00251a4:	c3                   	ret    
c00251a5:	90                   	nop

c00251a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00251a6:	55                   	push   ebp
c00251a7:	89 e5                	mov    ebp,esp
c00251a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251b2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251b5:	72 1d                	jb     c00251d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251ba:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00251c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251c3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00251c9:	01 d0                	add    eax,edx
c00251cb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251ce:	73 04                	jae    c00251d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251d0:	b0 01                	mov    al,0x1
c00251d2:	eb 02                	jmp    c00251d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00251d4:	b0 00                	mov    al,0x0
c00251d6:	5d                   	pop    ebp
c00251d7:	c3                   	ret    

c00251d8 <IOAPIC::read(int)>:
c00251d8:	55                   	push   ebp
c00251d9:	89 e5                	mov    ebp,esp
c00251db:	83 ec 10             	sub    esp,0x10
c00251de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00251e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00251ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251ed:	0f b6 d0             	movzx  edx,al
c00251f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251f3:	89 10                	mov    DWORD PTR [eax],edx
c00251f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251f8:	83 c0 10             	add    eax,0x10
c00251fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00251fd:	c9                   	leave  
c00251fe:	c3                   	ret    
c00251ff:	90                   	nop

c0025200 <IOAPIC::open(int, int, void*)>:
c0025200:	55                   	push   ebp
c0025201:	89 e5                	mov    ebp,esp
c0025203:	57                   	push   edi
c0025204:	56                   	push   esi
c0025205:	53                   	push   ebx
c0025206:	83 ec 0c             	sub    esp,0xc
c0025209:	83 ec 0c             	sub    esp,0xc
c002520c:	68 c7 c7 02 c0       	push   0xc002c7c7
c0025211:	e8 dd d6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0025216:	83 c4 10             	add    esp,0x10
c0025219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002521c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002521f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025228:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002522e:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c0025235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025238:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002523e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025241:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025247:	8b 14 85 20 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ae0]
c002524e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025251:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002525a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025263:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025269:	0f b6 f8             	movzx  edi,al
c002526c:	89 d0                	mov    eax,edx
c002526e:	ba 00 00 00 00       	mov    edx,0x0
c0025273:	89 c1                	mov    ecx,eax
c0025275:	80 e5 ff             	and    ch,0xff
c0025278:	89 cb                	mov    ebx,ecx
c002527a:	0f b6 f2             	movzx  esi,dl
c002527d:	89 d8                	mov    eax,ebx
c002527f:	89 f2                	mov    edx,esi
c0025281:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025284:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025287:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002528b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002528f:	83 e0 00             	and    eax,0x0
c0025292:	09 d0                	or     eax,edx
c0025294:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002529b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00252a1:	8d 50 01             	lea    edx,[eax+0x1]
c00252a4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00252a7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00252ad:	0f b6 d0             	movzx  edx,al
c00252b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252b3:	83 c2 08             	add    edx,0x8
c00252b6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00252ba:	0f b6 c9             	movzx  ecx,cl
c00252bd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00252c3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00252c7:	83 ec 08             	sub    esp,0x8
c00252ca:	6a 01                	push   0x1
c00252cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252cf:	e8 04 ff ff ff       	call   c00251d8 <IOAPIC::read(int)>
c00252d4:	83 c4 10             	add    esp,0x10
c00252d7:	c1 f8 10             	sar    eax,0x10
c00252da:	0f b6 c0             	movzx  eax,al
c00252dd:	8d 50 01             	lea    edx,[eax+0x1]
c00252e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252e3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00252e9:	b8 00 00 00 00       	mov    eax,0x0
c00252ee:	8d 65 f4             	lea    esp,[ebp-0xc]
c00252f1:	5b                   	pop    ebx
c00252f2:	5e                   	pop    esi
c00252f3:	5f                   	pop    edi
c00252f4:	5d                   	pop    ebp
c00252f5:	c3                   	ret    

c00252f6 <IOAPIC::write(int, int)>:
c00252f6:	55                   	push   ebp
c00252f7:	89 e5                	mov    ebp,esp
c00252f9:	83 ec 10             	sub    esp,0x10
c00252fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025305:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025308:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002530b:	0f b6 d0             	movzx  edx,al
c002530e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025311:	89 10                	mov    DWORD PTR [eax],edx
c0025313:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025316:	8d 50 10             	lea    edx,[eax+0x10]
c0025319:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002531c:	89 02                	mov    DWORD PTR [edx],eax
c002531e:	90                   	nop
c002531f:	c9                   	leave  
c0025320:	c3                   	ret    
c0025321:	90                   	nop

c0025322 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025322:	55                   	push   ebp
c0025323:	89 e5                	mov    ebp,esp
c0025325:	53                   	push   ebx
c0025326:	83 ec 2c             	sub    esp,0x2c
c0025329:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002532c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002532f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025332:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025335:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025338:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002533b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002533e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025341:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025344:	88 d8                	mov    al,bl
c0025346:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025349:	88 c8                	mov    al,cl
c002534b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002534e:	88 d0                	mov    al,dl
c0025350:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025353:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025357:	83 c0 08             	add    eax,0x8
c002535a:	01 c0                	add    eax,eax
c002535c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002535f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025363:	83 c0 08             	add    eax,0x8
c0025366:	01 c0                	add    eax,eax
c0025368:	40                   	inc    eax
c0025369:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002536c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002536f:	50                   	push   eax
c0025370:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025373:	e8 60 fe ff ff       	call   c00251d8 <IOAPIC::read(int)>
c0025378:	83 c4 08             	add    esp,0x8
c002537b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002537e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025385:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025388:	c1 e0 18             	shl    eax,0x18
c002538b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002538e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025391:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025394:	52                   	push   edx
c0025395:	50                   	push   eax
c0025396:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025399:	e8 58 ff ff ff       	call   c00252f6 <IOAPIC::write(int, int)>
c002539e:	83 c4 0c             	add    esp,0xc
c00253a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253a4:	50                   	push   eax
c00253a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253a8:	e8 2b fe ff ff       	call   c00251d8 <IOAPIC::read(int)>
c00253ad:	83 c4 08             	add    esp,0x8
c00253b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253b3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00253ba:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00253c1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00253c8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00253cc:	74 09                	je     c00253d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00253ce:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00253d5:	eb 07                	jmp    c00253de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00253d7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00253de:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00253e2:	74 09                	je     c00253ed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00253e4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00253eb:	eb 07                	jmp    c00253f4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00253ed:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00253f4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00253fb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00253ff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025402:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025405:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025408:	52                   	push   edx
c0025409:	50                   	push   eax
c002540a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002540d:	e8 e4 fe ff ff       	call   c00252f6 <IOAPIC::write(int, int)>
c0025412:	83 c4 0c             	add    esp,0xc
c0025415:	90                   	nop
c0025416:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025419:	c9                   	leave  
c002541a:	c3                   	ret    
c002541b:	90                   	nop

c002541c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002541c:	55                   	push   ebp
c002541d:	89 e5                	mov    ebp,esp
c002541f:	57                   	push   edi
c0025420:	56                   	push   esi
c0025421:	53                   	push   ebx
c0025422:	83 ec 2c             	sub    esp,0x2c
c0025425:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025428:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002542b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002542f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025433:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025437:	74 5a                	je     c0025493 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025439:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002543d:	7f 44                	jg     c0025483 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002543f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025442:	05 20 cd 02 c0       	add    eax,0xc002cd20
c0025447:	8a 00                	mov    al,BYTE PTR [eax]
c0025449:	0f b6 c0             	movzx  eax,al
c002544c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002544f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025452:	66 8b 84 00 40 f4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0bc0]
c002545a:	0f b7 c0             	movzx  eax,ax
c002545d:	83 e0 02             	and    eax,0x2
c0025460:	85 c0                	test   eax,eax
c0025462:	74 04                	je     c0025468 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025464:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025468:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002546b:	66 8b 84 00 40 f4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0bc0]
c0025473:	0f b7 c0             	movzx  eax,ax
c0025476:	83 e0 08             	and    eax,0x8
c0025479:	85 c0                	test   eax,eax
c002547b:	74 16                	je     c0025493 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002547d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025481:	eb 10                	jmp    c0025493 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025483:	83 ec 0c             	sub    esp,0xc
c0025486:	68 d8 c7 02 c0       	push   0xc002c7d8
c002548b:	e8 09 4a ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0025490:	83 c4 10             	add    esp,0x10
c0025493:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025497:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c002549c:	83 ec 08             	sub    esp,0x8
c002549f:	50                   	push   eax
c00254a0:	68 10 c8 02 c0       	push   0xc002c810
c00254a5:	e8 49 d4 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00254aa:	83 c4 10             	add    esp,0x10
c00254ad:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00254b4:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c00254b9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00254bc:	7d 67                	jge    c0025525 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00254be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254c1:	8b 04 85 60 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1a0]
c00254c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00254cb:	83 ec 08             	sub    esp,0x8
c00254ce:	52                   	push   edx
c00254cf:	50                   	push   eax
c00254d0:	e8 d1 fc ff ff       	call   c00251a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00254d5:	83 c4 10             	add    esp,0x10
c00254d8:	84 c0                	test   al,al
c00254da:	74 44                	je     c0025520 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00254dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254df:	8b 1c 85 60 0e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf1a0]
c00254e6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00254ea:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00254ed:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00254f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254f4:	83 c0 20             	add    eax,0x20
c00254f7:	0f b6 f0             	movzx  esi,al
c00254fa:	b8 00 00 00 00       	mov    eax,0x0
c00254ff:	99                   	cdq    
c0025500:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025503:	0f b6 c9             	movzx  ecx,cl
c0025506:	83 ec 04             	sub    esp,0x4
c0025509:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002550c:	57                   	push   edi
c002550d:	56                   	push   esi
c002550e:	52                   	push   edx
c002550f:	50                   	push   eax
c0025510:	51                   	push   ecx
c0025511:	53                   	push   ebx
c0025512:	e8 0b fe ff ff       	call   c0025322 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025517:	83 c4 20             	add    esp,0x20
c002551a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002551e:	eb 05                	jmp    c0025525 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025520:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025523:	eb 8f                	jmp    c00254b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025525:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025528:	83 f0 01             	xor    eax,0x1
c002552b:	84 c0                	test   al,al
c002552d:	74 10                	je     c002553f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002552f:	83 ec 0c             	sub    esp,0xc
c0025532:	68 27 c8 02 c0       	push   0xc002c827
c0025537:	e8 5d 49 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002553c:	83 c4 10             	add    esp,0x10
c002553f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025543:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002554a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002554e:	7f 65                	jg     c00255b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025553:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025556:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002555d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025560:	01 ca                	add    edx,ecx
c0025562:	83 c2 54             	add    edx,0x54
c0025565:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025569:	85 c0                	test   eax,eax
c002556b:	75 43                	jne    c00255b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002556d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025570:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025573:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002557a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002557d:	01 ca                	add    edx,ecx
c002557f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025582:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025585:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002558c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002558f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025596:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025599:	01 ca                	add    edx,ecx
c002559b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00255a1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00255a4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00255a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255ab:	83 e8 20             	sub    eax,0x20
c00255ae:	eb 1a                	jmp    c00255ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00255b0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00255b3:	eb 95                	jmp    c002554a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00255b5:	83 ec 0c             	sub    esp,0xc
c00255b8:	68 34 c8 02 c0       	push   0xc002c834
c00255bd:	e8 d7 48 ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00255c2:	83 c4 10             	add    esp,0x10
c00255c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00255ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255cd:	5b                   	pop    ebx
c00255ce:	5e                   	pop    esi
c00255cf:	5f                   	pop    edi
c00255d0:	5d                   	pop    ebp
c00255d1:	c3                   	ret    

c00255d2 <PIC::disable()>:
c00255d2:	55                   	push   ebp
c00255d3:	89 e5                	mov    ebp,esp
c00255d5:	83 ec 10             	sub    esp,0x10
c00255d8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00255de:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00255e2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00255e5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00255e9:	ee                   	out    dx,al
c00255ea:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00255f0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00255f4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00255f7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00255fb:	ee                   	out    dx,al
c00255fc:	90                   	nop
c00255fd:	c9                   	leave  
c00255fe:	c3                   	ret    
c00255ff:	90                   	nop

c0025600 <PIC::close(int, int, void*)>:
c0025600:	55                   	push   ebp
c0025601:	89 e5                	mov    ebp,esp
c0025603:	83 ec 08             	sub    esp,0x8
c0025606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025609:	8b 00                	mov    eax,DWORD PTR [eax]
c002560b:	83 c0 3c             	add    eax,0x3c
c002560e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025616:	ff d0                	call   eax
c0025618:	83 c4 10             	add    esp,0x10
c002561b:	b8 00 00 00 00       	mov    eax,0x0
c0025620:	c9                   	leave  
c0025621:	c3                   	ret    

c0025622 <PIC::PIC()>:
c0025622:	83 ec 0c             	sub    esp,0xc
c0025625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025629:	83 ec 08             	sub    esp,0x8
c002562c:	68 e0 c8 02 c0       	push   0xc002c8e0
c0025631:	50                   	push   eax
c0025632:	e8 3f f0 fe ff       	call   c0014676 <InterruptController::InterruptController(char const*)>
c0025637:	83 c4 10             	add    esp,0x10
c002563a:	ba 0c c9 02 c0       	mov    edx,0xc002c90c
c002563f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025643:	89 10                	mov    DWORD PTR [eax],edx
c0025645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025649:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002564f:	0f b6 d0             	movzx  edx,al
c0025652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025656:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002565d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025661:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025667:	0f b6 d0             	movzx  edx,al
c002566a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025677:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002567d:	8d 50 01             	lea    edx,[eax+0x1]
c0025680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025684:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002568a:	0f b6 d0             	movzx  edx,al
c002568d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025691:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025695:	83 e1 3f             	and    ecx,0x3f
c0025698:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002569c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256a6:	0f b6 d0             	movzx  edx,al
c00256a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ad:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00256b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256be:	0f b6 d0             	movzx  edx,al
c00256c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00256ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256d4:	8d 50 01             	lea    edx,[eax+0x1]
c00256d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256db:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00256e1:	0f b6 d0             	movzx  edx,al
c00256e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00256ec:	83 e1 3f             	and    ecx,0x3f
c00256ef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00256f3:	90                   	nop
c00256f4:	83 c4 0c             	add    esp,0xc
c00256f7:	c3                   	ret    

c00256f8 <PIC::ioWait()>:
c00256f8:	eb 00                	jmp    c00256fa <PIC::ioWait()+0x2>
c00256fa:	eb 00                	jmp    c00256fc <PIC::ioWait()+0x4>
c00256fc:	90                   	nop
c00256fd:	c3                   	ret    

c00256fe <PIC::getIRQReg(int)>:
c00256fe:	55                   	push   ebp
c00256ff:	89 e5                	mov    ebp,esp
c0025701:	83 ec 10             	sub    esp,0x10
c0025704:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025707:	0f b6 c0             	movzx  eax,al
c002570a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025710:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025713:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025716:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002571a:	ee                   	out    dx,al
c002571b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002571e:	0f b6 c0             	movzx  eax,al
c0025721:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025727:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002572a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002572d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025731:	ee                   	out    dx,al
c0025732:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025738:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002573c:	89 c2                	mov    edx,eax
c002573e:	ec                   	in     al,dx
c002573f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025742:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025745:	0f b6 c0             	movzx  eax,al
c0025748:	c1 e0 08             	shl    eax,0x8
c002574b:	89 c1                	mov    ecx,eax
c002574d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025753:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025757:	89 c2                	mov    edx,eax
c0025759:	ec                   	in     al,dx
c002575a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002575d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025760:	0f b6 c0             	movzx  eax,al
c0025763:	09 c8                	or     eax,ecx
c0025765:	c9                   	leave  
c0025766:	c3                   	ret    
c0025767:	90                   	nop

c0025768 <PIC::eoi(unsigned char)>:
c0025768:	55                   	push   ebp
c0025769:	89 e5                	mov    ebp,esp
c002576b:	83 ec 14             	sub    esp,0x14
c002576e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025771:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025774:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025778:	75 1e                	jne    c0025798 <PIC::eoi(unsigned char)+0x30>
c002577a:	6a 0b                	push   0xb
c002577c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577f:	e8 7a ff ff ff       	call   c00256fe <PIC::getIRQReg(int)>
c0025784:	83 c4 08             	add    esp,0x8
c0025787:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002578b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002578f:	25 80 00 00 00       	and    eax,0x80
c0025794:	85 c0                	test   eax,eax
c0025796:	74 5f                	je     c00257f7 <PIC::eoi(unsigned char)+0x8f>
c0025798:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002579c:	75 2d                	jne    c00257cb <PIC::eoi(unsigned char)+0x63>
c002579e:	6a 0b                	push   0xb
c00257a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a3:	e8 56 ff ff ff       	call   c00256fe <PIC::getIRQReg(int)>
c00257a8:	83 c4 08             	add    esp,0x8
c00257ab:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00257af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b2:	66 85 c0             	test   ax,ax
c00257b5:	78 14                	js     c00257cb <PIC::eoi(unsigned char)+0x63>
c00257b7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00257bd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00257c1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00257c4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00257c8:	ee                   	out    dx,al
c00257c9:	eb 2d                	jmp    c00257f8 <PIC::eoi(unsigned char)+0x90>
c00257cb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00257cf:	76 12                	jbe    c00257e3 <PIC::eoi(unsigned char)+0x7b>
c00257d1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00257d7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00257db:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00257de:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00257e2:	ee                   	out    dx,al
c00257e3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00257e9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00257ed:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00257f0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00257f4:	ee                   	out    dx,al
c00257f5:	eb 01                	jmp    c00257f8 <PIC::eoi(unsigned char)+0x90>
c00257f7:	90                   	nop
c00257f8:	c9                   	leave  
c00257f9:	c3                   	ret    

c00257fa <PIC::remap()>:
c00257fa:	55                   	push   ebp
c00257fb:	89 e5                	mov    ebp,esp
c00257fd:	83 ec 48             	sub    esp,0x48
c0025800:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025807:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002580e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025814:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025817:	89 c2                	mov    edx,eax
c0025819:	ec                   	in     al,dx
c002581a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002581d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025820:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025823:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025829:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002582c:	89 c2                	mov    edx,eax
c002582e:	ec                   	in     al,dx
c002582f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025832:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025835:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025838:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002583e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025842:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025845:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025848:	ee                   	out    dx,al
c0025849:	83 ec 0c             	sub    esp,0xc
c002584c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584f:	e8 a4 fe ff ff       	call   c00256f8 <PIC::ioWait()>
c0025854:	83 c4 10             	add    esp,0x10
c0025857:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002585d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025861:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025864:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025867:	ee                   	out    dx,al
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002586e:	e8 85 fe ff ff       	call   c00256f8 <PIC::ioWait()>
c0025873:	83 c4 10             	add    esp,0x10
c0025876:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025879:	0f b6 c0             	movzx  eax,al
c002587c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025882:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025885:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025888:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002588b:	ee                   	out    dx,al
c002588c:	83 ec 0c             	sub    esp,0xc
c002588f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025892:	e8 61 fe ff ff       	call   c00256f8 <PIC::ioWait()>
c0025897:	83 c4 10             	add    esp,0x10
c002589a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002589d:	0f b6 c0             	movzx  eax,al
c00258a0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00258a6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00258a9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00258ac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00258af:	ee                   	out    dx,al
c00258b0:	83 ec 0c             	sub    esp,0xc
c00258b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b6:	e8 3d fe ff ff       	call   c00256f8 <PIC::ioWait()>
c00258bb:	83 c4 10             	add    esp,0x10
c00258be:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00258c4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00258c8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00258cb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00258ce:	ee                   	out    dx,al
c00258cf:	83 ec 0c             	sub    esp,0xc
c00258d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258d5:	e8 1e fe ff ff       	call   c00256f8 <PIC::ioWait()>
c00258da:	83 c4 10             	add    esp,0x10
c00258dd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00258e3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00258e7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00258ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258ed:	ee                   	out    dx,al
c00258ee:	83 ec 0c             	sub    esp,0xc
c00258f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258f4:	e8 ff fd ff ff       	call   c00256f8 <PIC::ioWait()>
c00258f9:	83 c4 10             	add    esp,0x10
c00258fc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025902:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025906:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025909:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002590c:	ee                   	out    dx,al
c002590d:	83 ec 0c             	sub    esp,0xc
c0025910:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025913:	e8 e0 fd ff ff       	call   c00256f8 <PIC::ioWait()>
c0025918:	83 c4 10             	add    esp,0x10
c002591b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025921:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025925:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025928:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002592b:	ee                   	out    dx,al
c002592c:	83 ec 0c             	sub    esp,0xc
c002592f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025932:	e8 c1 fd ff ff       	call   c00256f8 <PIC::ioWait()>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002593e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025944:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025947:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002594a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002594d:	ee                   	out    dx,al
c002594e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025952:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025958:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002595b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002595e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025961:	ee                   	out    dx,al
c0025962:	90                   	nop
c0025963:	c9                   	leave  
c0025964:	c3                   	ret    
c0025965:	90                   	nop

c0025966 <PIC::open(int, int, void*)>:
c0025966:	55                   	push   ebp
c0025967:	89 e5                	mov    ebp,esp
c0025969:	83 ec 18             	sub    esp,0x18
c002596c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025972:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025976:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025979:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002597d:	ee                   	out    dx,al
c002597e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025984:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025988:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002598b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002598f:	ee                   	out    dx,al
c0025990:	83 ec 0c             	sub    esp,0xc
c0025993:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025996:	e8 5f fe ff ff       	call   c00257fa <PIC::remap()>
c002599b:	83 c4 10             	add    esp,0x10
c002599e:	b8 00 00 00 00       	mov    eax,0x0
c00259a3:	c9                   	leave  
c00259a4:	c3                   	ret    
c00259a5:	90                   	nop

c00259a6 <APICTimer::close(int, int, void*)>:
c00259a6:	b8 00 00 00 00       	mov    eax,0x0
c00259ab:	c3                   	ret    

c00259ac <apicTimerHandler(regs*, void*)>:
c00259ac:	83 ec 0c             	sub    esp,0xc
c00259af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00259b5:	99                   	cdq    
c00259b6:	52                   	push   edx
c00259b7:	50                   	push   eax
c00259b8:	6a 00                	push   0x0
c00259ba:	68 00 ca 9a 3b       	push   0x3b9aca00
c00259bf:	e8 88 07 00 00       	call   c002614c <__udivdi3>
c00259c4:	83 c4 10             	add    esp,0x10
c00259c7:	83 ec 08             	sub    esp,0x8
c00259ca:	52                   	push   edx
c00259cb:	50                   	push   eax
c00259cc:	e8 9c 0c ff ff       	call   c001666d <timerHandler(unsigned long long)>
c00259d1:	83 c4 10             	add    esp,0x10
c00259d4:	90                   	nop
c00259d5:	83 c4 0c             	add    esp,0xc
c00259d8:	c3                   	ret    
c00259d9:	90                   	nop

c00259da <APICTimer::write(int)>:
c00259da:	53                   	push   ebx
c00259db:	83 ec 28             	sub    esp,0x28
c00259de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00259e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00259e6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259ec:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00259f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00259fd:	83 ec 0c             	sub    esp,0xc
c0025a00:	50                   	push   eax
c0025a01:	e8 de f4 ff ff       	call   c0024ee4 <APIC::getBase()>
c0025a06:	83 c4 10             	add    esp,0x10
c0025a09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a0d:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a12:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025a1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a24:	05 e0 03 00 00       	add    eax,0x3e0
c0025a29:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025a2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a33:	05 80 03 00 00       	add    eax,0x380
c0025a38:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025a3e:	fb                   	sti    
c0025a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a47:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025a4c:	83 d2 00             	adc    edx,0x0
c0025a4f:	89 c1                	mov    ecx,eax
c0025a51:	89 d3                	mov    ebx,edx
c0025a53:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a58:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a5e:	39 c8                	cmp    eax,ecx
c0025a60:	89 d0                	mov    eax,edx
c0025a62:	19 d8                	sbb    eax,ebx
c0025a64:	73 02                	jae    c0025a68 <APICTimer::write(int)+0x8e>
c0025a66:	eb d7                	jmp    c0025a3f <APICTimer::write(int)+0x65>
c0025a68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a6c:	05 20 03 00 00       	add    eax,0x320
c0025a71:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025a77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a7b:	05 90 03 00 00       	add    eax,0x390
c0025a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a82:	f7 d0                	not    eax
c0025a84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a88:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a90:	ba 00 00 00 00       	mov    edx,0x0
c0025a95:	f7 f3                	div    ebx
c0025a97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025a9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025aa5:	0d 00 00 02 00       	or     eax,0x20000
c0025aaa:	89 c2                	mov    edx,eax
c0025aac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ab0:	05 20 03 00 00       	add    eax,0x320
c0025ab5:	89 10                	mov    DWORD PTR [eax],edx
c0025ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025abb:	05 e0 03 00 00       	add    eax,0x3e0
c0025ac0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ac6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025aca:	05 80 03 00 00       	add    eax,0x380
c0025acf:	89 c2                	mov    edx,eax
c0025ad1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ad5:	89 02                	mov    DWORD PTR [edx],eax
c0025ad7:	90                   	nop
c0025ad8:	83 c4 28             	add    esp,0x28
c0025adb:	5b                   	pop    ebx
c0025adc:	c3                   	ret    
c0025add:	90                   	nop

c0025ade <APICTimer::open(int, int, void*)>:
c0025ade:	57                   	push   edi
c0025adf:	56                   	push   esi
c0025ae0:	53                   	push   ebx
c0025ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae7:	83 c0 24             	add    eax,0x24
c0025aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aec:	83 ec 08             	sub    esp,0x8
c0025aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af7:	ff d0                	call   eax
c0025af9:	83 c4 10             	add    esp,0x10
c0025afc:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0025b01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b07:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b0d:	83 ec 0c             	sub    esp,0xc
c0025b10:	50                   	push   eax
c0025b11:	e8 ce f3 ff ff       	call   c0024ee4 <APIC::getBase()>
c0025b16:	83 c4 10             	add    esp,0x10
c0025b19:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b23:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b29:	0f b6 f8             	movzx  edi,al
c0025b2c:	89 d0                	mov    eax,edx
c0025b2e:	ba 00 00 00 00       	mov    edx,0x0
c0025b33:	89 c1                	mov    ecx,eax
c0025b35:	80 e5 ff             	and    ch,0xff
c0025b38:	89 cb                	mov    ebx,ecx
c0025b3a:	0f b6 f2             	movzx  esi,dl
c0025b3d:	89 d8                	mov    eax,ebx
c0025b3f:	89 f2                	mov    edx,esi
c0025b41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b45:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b48:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b4c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b50:	83 e0 00             	and    eax,0x0
c0025b53:	09 d0                	or     eax,edx
c0025b55:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b5d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b63:	8d 50 01             	lea    edx,[eax+0x1]
c0025b66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b6a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b70:	0f b6 d0             	movzx  edx,al
c0025b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b77:	83 c2 08             	add    edx,0x8
c0025b7a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b7e:	0f b6 c9             	movzx  ecx,cl
c0025b81:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025b87:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025b93:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ba1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025bab:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025bb1:	83 ec 0c             	sub    esp,0xc
c0025bb4:	51                   	push   ecx
c0025bb5:	6a 01                	push   0x1
c0025bb7:	68 ac 59 02 c0       	push   0xc00259ac
c0025bbc:	52                   	push   edx
c0025bbd:	50                   	push   eax
c0025bbe:	e8 db e0 fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025bc3:	83 c4 20             	add    esp,0x20
c0025bc6:	89 c2                	mov    edx,eax
c0025bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bcc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025bd2:	b8 00 00 00 00       	mov    eax,0x0
c0025bd7:	5b                   	pop    ebx
c0025bd8:	5e                   	pop    esi
c0025bd9:	5f                   	pop    edi
c0025bda:	c3                   	ret    
c0025bdb:	90                   	nop

c0025bdc <APICTimer::APICTimer()>:
c0025bdc:	83 ec 0c             	sub    esp,0xc
c0025bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be3:	83 ec 08             	sub    esp,0x8
c0025be6:	68 4c c9 02 c0       	push   0xc002c94c
c0025beb:	50                   	push   eax
c0025bec:	e8 ed 09 ff ff       	call   c00165de <Timer::Timer(char const*)>
c0025bf1:	83 c4 10             	add    esp,0x10
c0025bf4:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c0025bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfd:	89 10                	mov    DWORD PTR [eax],edx
c0025bff:	90                   	nop
c0025c00:	83 c4 0c             	add    esp,0xc
c0025c03:	c3                   	ret    

c0025c04 <PIT::write(int)>:
c0025c04:	83 ec 10             	sub    esp,0x10
c0025c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025c0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025c19:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c0025c1e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025c23:	99                   	cdq    
c0025c24:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025c2c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025c33:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025c38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025c3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025c41:	ee                   	out    dx,al
c0025c42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c46:	0f b6 c0             	movzx  eax,al
c0025c49:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025c50:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025c54:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025c58:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025c5d:	ee                   	out    dx,al
c0025c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c62:	c1 f8 08             	sar    eax,0x8
c0025c65:	0f b6 c0             	movzx  eax,al
c0025c68:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025c6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025c73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025c77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025c7c:	ee                   	out    dx,al
c0025c7d:	90                   	nop
c0025c7e:	83 c4 10             	add    esp,0x10
c0025c81:	c3                   	ret    

c0025c82 <pitHandler(regs*, void*)>:
c0025c82:	83 ec 0c             	sub    esp,0xc
c0025c85:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c0025c8a:	99                   	cdq    
c0025c8b:	52                   	push   edx
c0025c8c:	50                   	push   eax
c0025c8d:	6a 00                	push   0x0
c0025c8f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025c94:	e8 b3 04 00 00       	call   c002614c <__udivdi3>
c0025c99:	83 c4 10             	add    esp,0x10
c0025c9c:	83 ec 08             	sub    esp,0x8
c0025c9f:	52                   	push   edx
c0025ca0:	50                   	push   eax
c0025ca1:	e8 c7 09 ff ff       	call   c001666d <timerHandler(unsigned long long)>
c0025ca6:	83 c4 10             	add    esp,0x10
c0025ca9:	90                   	nop
c0025caa:	83 c4 0c             	add    esp,0xc
c0025cad:	c3                   	ret    

c0025cae <PIT::open(int, int, void*)>:
c0025cae:	83 ec 0c             	sub    esp,0xc
c0025cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cb7:	83 c0 24             	add    eax,0x24
c0025cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cbc:	83 ec 08             	sub    esp,0x8
c0025cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc7:	ff d0                	call   eax
c0025cc9:	83 c4 10             	add    esp,0x10
c0025ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd0:	83 ec 0c             	sub    esp,0xc
c0025cd3:	6a 00                	push   0x0
c0025cd5:	6a 01                	push   0x1
c0025cd7:	68 82 5c 02 c0       	push   0xc0025c82
c0025cdc:	6a 00                	push   0x0
c0025cde:	50                   	push   eax
c0025cdf:	e8 ba df fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025ce4:	83 c4 20             	add    esp,0x20
c0025ce7:	89 c2                	mov    edx,eax
c0025ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ced:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025cf3:	b8 00 00 00 00       	mov    eax,0x0
c0025cf8:	83 c4 0c             	add    esp,0xc
c0025cfb:	c3                   	ret    

c0025cfc <PIT::close(int, int, void*)>:
c0025cfc:	83 ec 0c             	sub    esp,0xc
c0025cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d03:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d11:	6a 01                	push   0x1
c0025d13:	68 82 5c 02 c0       	push   0xc0025c82
c0025d18:	6a 00                	push   0x0
c0025d1a:	50                   	push   eax
c0025d1b:	e8 bc df fe ff       	call   c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025d20:	83 c4 10             	add    esp,0x10
c0025d23:	b8 00 00 00 00       	mov    eax,0x0
c0025d28:	83 c4 0c             	add    esp,0xc
c0025d2b:	c3                   	ret    

c0025d2c <PIT::PIT()>:
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d33:	83 ec 08             	sub    esp,0x8
c0025d36:	68 88 c9 02 c0       	push   0xc002c988
c0025d3b:	50                   	push   eax
c0025d3c:	e8 9d 08 ff ff       	call   c00165de <Timer::Timer(char const*)>
c0025d41:	83 c4 10             	add    esp,0x10
c0025d44:	ba b0 c9 02 c0       	mov    edx,0xc002c9b0
c0025d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4d:	89 10                	mov    DWORD PTR [eax],edx
c0025d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d59:	0f b6 d0             	movzx  edx,al
c0025d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d60:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d71:	0f b6 d0             	movzx  edx,al
c0025d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d78:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d87:	8d 50 01             	lea    edx,[eax+0x1]
c0025d8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d8e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d94:	0f b6 d0             	movzx  edx,al
c0025d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d9f:	83 e1 3f             	and    ecx,0x3f
c0025da2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025da6:	90                   	nop
c0025da7:	83 c4 0c             	add    esp,0xc
c0025daa:	c3                   	ret    
c0025dab:	66 90                	xchg   ax,ax
c0025dad:	66 90                	xchg   ax,ax
c0025daf:	90                   	nop

c0025db0 <avxDetect>:
c0025db0:	b8 00 00 00 00       	mov    eax,0x0
c0025db5:	c3                   	ret    

c0025db6 <avxSave>:
c0025db6:	c3                   	ret    

c0025db7 <avxLoad>:
c0025db7:	c3                   	ret    

c0025db8 <avxInit>:
c0025db8:	c3                   	ret    

c0025db9 <avxClose>:
c0025db9:	c3                   	ret    

c0025dba <wouldSheSayYes>:
c0025dba:	c3                   	ret    
c0025dbb:	49                   	dec    ecx
c0025dbc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025dc0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025dc4:	75 20                	jne    c0025de6 <sseDetect.noSSE+0x1>
c0025dc6:	4e                   	dec    esi
c0025dc7:	79 61                	jns    c0025e2a <x87Detect+0x14>
c0025dc9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025dce:	66 90                	xchg   ax,ax

c0025dd0 <absolutelyNoChanceInHell>:
c0025dd0:	b8 01 00 00 00       	mov    eax,0x1
c0025dd5:	0f a2                	cpuid  
c0025dd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025ddd:	74 06                	je     c0025de5 <sseDetect.noSSE>
c0025ddf:	b8 01 00 00 00       	mov    eax,0x1
c0025de4:	c3                   	ret    

c0025de5 <sseDetect.noSSE>:
c0025de5:	31 c0                	xor    eax,eax
c0025de7:	c3                   	ret    

c0025de8 <sseSave>:
c0025de8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025ded:	c3                   	ret    

c0025dee <sseLoad>:
c0025dee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025df3:	c3                   	ret    

c0025df4 <sseInit>:
c0025df4:	e8 43 00 00 00       	call   c0025e3c <x87Init>
c0025df9:	0f 20 e0             	mov    eax,cr4
c0025dfc:	66 0d 00 06          	or     ax,0x600
c0025e00:	0f 22 e0             	mov    cr4,eax
c0025e03:	c3                   	ret    

c0025e04 <sseClose>:
c0025e04:	c3                   	ret    
c0025e05:	66 90                	xchg   ax,ax
c0025e07:	66 90                	xchg   ax,ax
c0025e09:	66 90                	xchg   ax,ax
c0025e0b:	66 90                	xchg   ax,ax
c0025e0d:	66 90                	xchg   ax,ax
c0025e0f:	90                   	nop

c0025e10 <value_37F>:
c0025e10:	7f 03                	jg     c0025e15 <value_37A+0x1>

c0025e12 <value_37E>:
c0025e12:	7e 03                	jle    c0025e17 <x87Detect+0x1>

c0025e14 <value_37A>:
c0025e14:	7a 03                	jp     c0025e19 <x87Detect+0x3>

c0025e16 <x87Detect>:
c0025e16:	b8 01 00 00 00       	mov    eax,0x1
c0025e1b:	0f a2                	cpuid  
c0025e1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025e23:	74 06                	je     c0025e2b <x87Detect.nox87>
c0025e25:	b8 01 00 00 00       	mov    eax,0x1
c0025e2a:	c3                   	ret    

c0025e2b <x87Detect.nox87>:
c0025e2b:	b8 00 00 00 00       	mov    eax,0x0
c0025e30:	c3                   	ret    

c0025e31 <x87Save>:
c0025e31:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025e36:	c3                   	ret    

c0025e37 <x87Load>:
c0025e37:	dd 64 24 08          	frstor [esp+0x8]
c0025e3b:	c3                   	ret    

c0025e3c <x87Init>:
c0025e3c:	9b db e3             	finit  
c0025e3f:	0f 20 c0             	mov    eax,cr0
c0025e42:	66 25 fb ff          	and    ax,0xfffb
c0025e46:	66 0d 22 00          	or     ax,0x22
c0025e4a:	0f 22 c0             	mov    cr0,eax
c0025e4d:	0f 06                	clts   
c0025e4f:	d9 2d 14 5e 02 c0    	fldcw  WORD PTR ds:0xc0025e14
c0025e55:	c3                   	ret    

c0025e56 <x87Close>:
c0025e56:	c3                   	ret    
c0025e57:	90                   	nop

c0025e58 <__do_global_ctors_aux>:
c0025e58:	a1 9c 89 02 c0       	mov    eax,ds:0xc002899c
c0025e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0025e60:	74 1a                	je     c0025e7c <__do_global_ctors_aux+0x24>
c0025e62:	55                   	push   ebp
c0025e63:	89 e5                	mov    ebp,esp
c0025e65:	53                   	push   ebx
c0025e66:	52                   	push   edx
c0025e67:	bb 9c 89 02 c0       	mov    ebx,0xc002899c
c0025e6c:	ff d0                	call   eax
c0025e6e:	83 eb 04             	sub    ebx,0x4
c0025e71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e73:	83 f8 ff             	cmp    eax,0xffffffff
c0025e76:	75 f4                	jne    c0025e6c <__do_global_ctors_aux+0x14>
c0025e78:	58                   	pop    eax
c0025e79:	5b                   	pop    ebx
c0025e7a:	5d                   	pop    ebp
c0025e7b:	c3                   	ret    
c0025e7c:	c3                   	ret    
c0025e7d:	66 90                	xchg   ax,ax
c0025e7f:	90                   	nop

c0025e80 <__divdi3>:
c0025e80:	55                   	push   ebp
c0025e81:	57                   	push   edi
c0025e82:	56                   	push   esi
c0025e83:	53                   	push   ebx
c0025e84:	83 ec 1c             	sub    esp,0x1c
c0025e87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025e8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025e92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025e9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025e9e:	85 db                	test   ebx,ebx
c0025ea0:	0f 88 8e 00 00 00    	js     c0025f34 <__divdi3+0xb4>
c0025ea6:	89 dd                	mov    ebp,ebx
c0025ea8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025eb0:	89 d3                	mov    ebx,edx
c0025eb2:	85 d2                	test   edx,edx
c0025eb4:	79 0d                	jns    c0025ec3 <__divdi3+0x43>
c0025eb6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025eba:	f7 d8                	neg    eax
c0025ebc:	83 d2 00             	adc    edx,0x0
c0025ebf:	f7 da                	neg    edx
c0025ec1:	89 d3                	mov    ebx,edx
c0025ec3:	89 c7                	mov    edi,eax
c0025ec5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025ec8:	85 db                	test   ebx,ebx
c0025eca:	75 48                	jne    c0025f14 <__divdi3+0x94>
c0025ecc:	39 ef                	cmp    edi,ebp
c0025ece:	76 24                	jbe    c0025ef4 <__divdi3+0x74>
c0025ed0:	89 ea                	mov    edx,ebp
c0025ed2:	f7 f7                	div    edi
c0025ed4:	89 c1                	mov    ecx,eax
c0025ed6:	31 f6                	xor    esi,esi
c0025ed8:	89 c8                	mov    eax,ecx
c0025eda:	89 f2                	mov    edx,esi
c0025edc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ee0:	85 c9                	test   ecx,ecx
c0025ee2:	74 07                	je     c0025eeb <__divdi3+0x6b>
c0025ee4:	f7 d8                	neg    eax
c0025ee6:	83 d2 00             	adc    edx,0x0
c0025ee9:	f7 da                	neg    edx
c0025eeb:	83 c4 1c             	add    esp,0x1c
c0025eee:	5b                   	pop    ebx
c0025eef:	5e                   	pop    esi
c0025ef0:	5f                   	pop    edi
c0025ef1:	5d                   	pop    ebp
c0025ef2:	c3                   	ret    
c0025ef3:	90                   	nop
c0025ef4:	85 ff                	test   edi,edi
c0025ef6:	75 0b                	jne    c0025f03 <__divdi3+0x83>
c0025ef8:	b8 01 00 00 00       	mov    eax,0x1
c0025efd:	31 d2                	xor    edx,edx
c0025eff:	f7 f3                	div    ebx
c0025f01:	89 c7                	mov    edi,eax
c0025f03:	31 d2                	xor    edx,edx
c0025f05:	89 e8                	mov    eax,ebp
c0025f07:	f7 f7                	div    edi
c0025f09:	89 c6                	mov    esi,eax
c0025f0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025f0e:	f7 f7                	div    edi
c0025f10:	89 c1                	mov    ecx,eax
c0025f12:	eb c4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f14:	39 eb                	cmp    ebx,ebp
c0025f16:	77 3c                	ja     c0025f54 <__divdi3+0xd4>
c0025f18:	0f bd f3             	bsr    esi,ebx
c0025f1b:	83 f6 1f             	xor    esi,0x1f
c0025f1e:	75 40                	jne    c0025f60 <__divdi3+0xe0>
c0025f20:	39 eb                	cmp    ebx,ebp
c0025f22:	72 09                	jb     c0025f2d <__divdi3+0xad>
c0025f24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025f27:	0f 87 97 00 00 00    	ja     c0025fc4 <__divdi3+0x144>
c0025f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0025f32:	eb a4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f34:	f7 d9                	neg    ecx
c0025f36:	83 d3 00             	adc    ebx,0x0
c0025f39:	f7 db                	neg    ebx
c0025f3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025f3e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025f42:	89 dd                	mov    ebp,ebx
c0025f44:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025f4c:	e9 5f ff ff ff       	jmp    c0025eb0 <__divdi3+0x30>
c0025f51:	8d 76 00             	lea    esi,[esi+0x0]
c0025f54:	31 f6                	xor    esi,esi
c0025f56:	31 c9                	xor    ecx,ecx
c0025f58:	e9 7b ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f60:	b8 20 00 00 00       	mov    eax,0x20
c0025f65:	29 f0                	sub    eax,esi
c0025f67:	89 f1                	mov    ecx,esi
c0025f69:	d3 e3                	shl    ebx,cl
c0025f6b:	89 fa                	mov    edx,edi
c0025f6d:	88 c1                	mov    cl,al
c0025f6f:	d3 ea                	shr    edx,cl
c0025f71:	09 da                	or     edx,ebx
c0025f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025f77:	89 f1                	mov    ecx,esi
c0025f79:	d3 e7                	shl    edi,cl
c0025f7b:	89 eb                	mov    ebx,ebp
c0025f7d:	88 c1                	mov    cl,al
c0025f7f:	d3 eb                	shr    ebx,cl
c0025f81:	89 f1                	mov    ecx,esi
c0025f83:	d3 e5                	shl    ebp,cl
c0025f85:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025f88:	88 c1                	mov    cl,al
c0025f8a:	d3 ea                	shr    edx,cl
c0025f8c:	09 d5                	or     ebp,edx
c0025f8e:	89 e8                	mov    eax,ebp
c0025f90:	89 da                	mov    edx,ebx
c0025f92:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025f96:	89 d3                	mov    ebx,edx
c0025f98:	89 c5                	mov    ebp,eax
c0025f9a:	f7 e7                	mul    edi
c0025f9c:	39 d3                	cmp    ebx,edx
c0025f9e:	72 18                	jb     c0025fb8 <__divdi3+0x138>
c0025fa0:	74 0a                	je     c0025fac <__divdi3+0x12c>
c0025fa2:	89 e9                	mov    ecx,ebp
c0025fa4:	31 f6                	xor    esi,esi
c0025fa6:	e9 2d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fab:	90                   	nop
c0025fac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025faf:	89 f1                	mov    ecx,esi
c0025fb1:	d3 e7                	shl    edi,cl
c0025fb3:	39 c7                	cmp    edi,eax
c0025fb5:	73 eb                	jae    c0025fa2 <__divdi3+0x122>
c0025fb7:	90                   	nop
c0025fb8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025fbb:	31 f6                	xor    esi,esi
c0025fbd:	e9 16 ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fc2:	66 90                	xchg   ax,ax
c0025fc4:	31 c9                	xor    ecx,ecx
c0025fc6:	e9 0d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fcb:	90                   	nop

c0025fcc <__moddi3>:
c0025fcc:	55                   	push   ebp
c0025fcd:	57                   	push   edi
c0025fce:	56                   	push   esi
c0025fcf:	53                   	push   ebx
c0025fd0:	83 ec 2c             	sub    esp,0x2c
c0025fd3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025fd7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025fdb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025fdf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025fe3:	85 db                	test   ebx,ebx
c0025fe5:	0f 88 85 00 00 00    	js     c0026070 <__moddi3+0xa4>
c0025feb:	89 de                	mov    esi,ebx
c0025fed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025ff5:	89 d7                	mov    edi,edx
c0025ff7:	85 d2                	test   edx,edx
c0025ff9:	79 09                	jns    c0026004 <__moddi3+0x38>
c0025ffb:	f7 d8                	neg    eax
c0025ffd:	83 d2 00             	adc    edx,0x0
c0026000:	f7 da                	neg    edx
c0026002:	89 d7                	mov    edi,edx
c0026004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026008:	89 cd                	mov    ebp,ecx
c002600a:	85 ff                	test   edi,edi
c002600c:	75 52                	jne    c0026060 <__moddi3+0x94>
c002600e:	89 c3                	mov    ebx,eax
c0026010:	39 f0                	cmp    eax,esi
c0026012:	76 24                	jbe    c0026038 <__moddi3+0x6c>
c0026014:	89 c8                	mov    eax,ecx
c0026016:	89 f2                	mov    edx,esi
c0026018:	f7 f3                	div    ebx
c002601a:	89 d6                	mov    esi,edx
c002601c:	89 f0                	mov    eax,esi
c002601e:	31 d2                	xor    edx,edx
c0026020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026024:	85 c9                	test   ecx,ecx
c0026026:	74 07                	je     c002602f <__moddi3+0x63>
c0026028:	f7 d8                	neg    eax
c002602a:	83 d2 00             	adc    edx,0x0
c002602d:	f7 da                	neg    edx
c002602f:	83 c4 2c             	add    esp,0x2c
c0026032:	5b                   	pop    ebx
c0026033:	5e                   	pop    esi
c0026034:	5f                   	pop    edi
c0026035:	5d                   	pop    ebp
c0026036:	c3                   	ret    
c0026037:	90                   	nop
c0026038:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002603c:	85 db                	test   ebx,ebx
c002603e:	75 0d                	jne    c002604d <__moddi3+0x81>
c0026040:	b8 01 00 00 00       	mov    eax,0x1
c0026045:	31 d2                	xor    edx,edx
c0026047:	f7 f7                	div    edi
c0026049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002604d:	89 f0                	mov    eax,esi
c002604f:	31 d2                	xor    edx,edx
c0026051:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026055:	f7 f7                	div    edi
c0026057:	89 e8                	mov    eax,ebp
c0026059:	f7 f7                	div    edi
c002605b:	89 d6                	mov    esi,edx
c002605d:	eb bd                	jmp    c002601c <__moddi3+0x50>
c002605f:	90                   	nop
c0026060:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026064:	39 f7                	cmp    edi,esi
c0026066:	76 20                	jbe    c0026088 <__moddi3+0xbc>
c0026068:	89 c8                	mov    eax,ecx
c002606a:	89 f2                	mov    edx,esi
c002606c:	eb b2                	jmp    c0026020 <__moddi3+0x54>
c002606e:	66 90                	xchg   ax,ax
c0026070:	f7 d9                	neg    ecx
c0026072:	83 d3 00             	adc    ebx,0x0
c0026075:	f7 db                	neg    ebx
c0026077:	89 de                	mov    esi,ebx
c0026079:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026081:	e9 6f ff ff ff       	jmp    c0025ff5 <__moddi3+0x29>
c0026086:	66 90                	xchg   ax,ax
c0026088:	0f bd c7             	bsr    eax,edi
c002608b:	83 f0 1f             	xor    eax,0x1f
c002608e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026092:	75 24                	jne    c00260b8 <__moddi3+0xec>
c0026094:	39 f7                	cmp    edi,esi
c0026096:	72 06                	jb     c002609e <__moddi3+0xd2>
c0026098:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002609c:	77 0c                	ja     c00260aa <__moddi3+0xde>
c002609e:	89 e9                	mov    ecx,ebp
c00260a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00260a4:	19 fe                	sbb    esi,edi
c00260a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00260aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260ae:	89 f2                	mov    edx,esi
c00260b0:	e9 6b ff ff ff       	jmp    c0026020 <__moddi3+0x54>
c00260b5:	8d 76 00             	lea    esi,[esi+0x0]
c00260b8:	b8 20 00 00 00       	mov    eax,0x20
c00260bd:	89 c2                	mov    edx,eax
c00260bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00260c3:	29 da                	sub    edx,ebx
c00260c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00260c9:	88 d9                	mov    cl,bl
c00260cb:	d3 e7                	shl    edi,cl
c00260cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260d1:	88 d1                	mov    cl,dl
c00260d3:	d3 e8                	shr    eax,cl
c00260d5:	09 c7                	or     edi,eax
c00260d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00260db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00260df:	89 d8                	mov    eax,ebx
c00260e1:	88 d9                	mov    cl,bl
c00260e3:	d3 e7                	shl    edi,cl
c00260e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00260e9:	89 f3                	mov    ebx,esi
c00260eb:	88 d1                	mov    cl,dl
c00260ed:	d3 eb                	shr    ebx,cl
c00260ef:	89 c7                	mov    edi,eax
c00260f1:	88 c1                	mov    cl,al
c00260f3:	d3 e6                	shl    esi,cl
c00260f5:	89 e8                	mov    eax,ebp
c00260f7:	88 d1                	mov    cl,dl
c00260f9:	d3 e8                	shr    eax,cl
c00260fb:	09 f0                	or     eax,esi
c00260fd:	89 f9                	mov    ecx,edi
c00260ff:	d3 e5                	shl    ebp,cl
c0026101:	89 da                	mov    edx,ebx
c0026103:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026107:	89 d3                	mov    ebx,edx
c0026109:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002610d:	89 c6                	mov    esi,eax
c002610f:	89 d1                	mov    ecx,edx
c0026111:	39 d3                	cmp    ebx,edx
c0026113:	72 27                	jb     c002613c <__moddi3+0x170>
c0026115:	74 21                	je     c0026138 <__moddi3+0x16c>
c0026117:	29 f5                	sub    ebp,esi
c0026119:	19 cb                	sbb    ebx,ecx
c002611b:	89 de                	mov    esi,ebx
c002611d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026121:	d3 e6                	shl    esi,cl
c0026123:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026127:	89 f9                	mov    ecx,edi
c0026129:	d3 ed                	shr    ebp,cl
c002612b:	09 ee                	or     esi,ebp
c002612d:	89 f0                	mov    eax,esi
c002612f:	d3 eb                	shr    ebx,cl
c0026131:	89 da                	mov    edx,ebx
c0026133:	e9 e8 fe ff ff       	jmp    c0026020 <__moddi3+0x54>
c0026138:	39 c5                	cmp    ebp,eax
c002613a:	73 db                	jae    c0026117 <__moddi3+0x14b>
c002613c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026140:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026144:	89 d1                	mov    ecx,edx
c0026146:	89 c6                	mov    esi,eax
c0026148:	eb cd                	jmp    c0026117 <__moddi3+0x14b>
c002614a:	66 90                	xchg   ax,ax

c002614c <__udivdi3>:
c002614c:	55                   	push   ebp
c002614d:	57                   	push   edi
c002614e:	56                   	push   esi
c002614f:	53                   	push   ebx
c0026150:	83 ec 1c             	sub    esp,0x1c
c0026153:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026157:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002615b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002615f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026163:	85 d2                	test   edx,edx
c0026165:	75 41                	jne    c00261a8 <__udivdi3+0x5c>
c0026167:	39 f7                	cmp    edi,esi
c0026169:	76 15                	jbe    c0026180 <__udivdi3+0x34>
c002616b:	89 e8                	mov    eax,ebp
c002616d:	89 f2                	mov    edx,esi
c002616f:	f7 f7                	div    edi
c0026171:	31 db                	xor    ebx,ebx
c0026173:	89 da                	mov    edx,ebx
c0026175:	83 c4 1c             	add    esp,0x1c
c0026178:	5b                   	pop    ebx
c0026179:	5e                   	pop    esi
c002617a:	5f                   	pop    edi
c002617b:	5d                   	pop    ebp
c002617c:	c3                   	ret    
c002617d:	8d 76 00             	lea    esi,[esi+0x0]
c0026180:	89 f9                	mov    ecx,edi
c0026182:	85 ff                	test   edi,edi
c0026184:	75 0b                	jne    c0026191 <__udivdi3+0x45>
c0026186:	b8 01 00 00 00       	mov    eax,0x1
c002618b:	31 d2                	xor    edx,edx
c002618d:	f7 f7                	div    edi
c002618f:	89 c1                	mov    ecx,eax
c0026191:	31 d2                	xor    edx,edx
c0026193:	89 f0                	mov    eax,esi
c0026195:	f7 f1                	div    ecx
c0026197:	89 c3                	mov    ebx,eax
c0026199:	89 e8                	mov    eax,ebp
c002619b:	f7 f1                	div    ecx
c002619d:	89 da                	mov    edx,ebx
c002619f:	83 c4 1c             	add    esp,0x1c
c00261a2:	5b                   	pop    ebx
c00261a3:	5e                   	pop    esi
c00261a4:	5f                   	pop    edi
c00261a5:	5d                   	pop    ebp
c00261a6:	c3                   	ret    
c00261a7:	90                   	nop
c00261a8:	39 f2                	cmp    edx,esi
c00261aa:	77 1c                	ja     c00261c8 <__udivdi3+0x7c>
c00261ac:	0f bd da             	bsr    ebx,edx
c00261af:	83 f3 1f             	xor    ebx,0x1f
c00261b2:	75 24                	jne    c00261d8 <__udivdi3+0x8c>
c00261b4:	39 f2                	cmp    edx,esi
c00261b6:	72 08                	jb     c00261c0 <__udivdi3+0x74>
c00261b8:	39 ef                	cmp    edi,ebp
c00261ba:	0f 87 84 00 00 00    	ja     c0026244 <__udivdi3+0xf8>
c00261c0:	b8 01 00 00 00       	mov    eax,0x1
c00261c5:	eb ac                	jmp    c0026173 <__udivdi3+0x27>
c00261c7:	90                   	nop
c00261c8:	31 db                	xor    ebx,ebx
c00261ca:	31 c0                	xor    eax,eax
c00261cc:	89 da                	mov    edx,ebx
c00261ce:	83 c4 1c             	add    esp,0x1c
c00261d1:	5b                   	pop    ebx
c00261d2:	5e                   	pop    esi
c00261d3:	5f                   	pop    edi
c00261d4:	5d                   	pop    ebp
c00261d5:	c3                   	ret    
c00261d6:	66 90                	xchg   ax,ax
c00261d8:	b8 20 00 00 00       	mov    eax,0x20
c00261dd:	29 d8                	sub    eax,ebx
c00261df:	88 d9                	mov    cl,bl
c00261e1:	d3 e2                	shl    edx,cl
c00261e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00261e7:	89 fa                	mov    edx,edi
c00261e9:	88 c1                	mov    cl,al
c00261eb:	d3 ea                	shr    edx,cl
c00261ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00261f1:	09 d1                	or     ecx,edx
c00261f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00261f7:	88 d9                	mov    cl,bl
c00261f9:	d3 e7                	shl    edi,cl
c00261fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00261ff:	89 f7                	mov    edi,esi
c0026201:	88 c1                	mov    cl,al
c0026203:	d3 ef                	shr    edi,cl
c0026205:	88 d9                	mov    cl,bl
c0026207:	d3 e6                	shl    esi,cl
c0026209:	89 ea                	mov    edx,ebp
c002620b:	88 c1                	mov    cl,al
c002620d:	d3 ea                	shr    edx,cl
c002620f:	09 d6                	or     esi,edx
c0026211:	89 f0                	mov    eax,esi
c0026213:	89 fa                	mov    edx,edi
c0026215:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026219:	89 d7                	mov    edi,edx
c002621b:	89 c6                	mov    esi,eax
c002621d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026221:	39 d7                	cmp    edi,edx
c0026223:	72 13                	jb     c0026238 <__udivdi3+0xec>
c0026225:	74 09                	je     c0026230 <__udivdi3+0xe4>
c0026227:	89 f0                	mov    eax,esi
c0026229:	31 db                	xor    ebx,ebx
c002622b:	e9 43 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026230:	88 d9                	mov    cl,bl
c0026232:	d3 e5                	shl    ebp,cl
c0026234:	39 c5                	cmp    ebp,eax
c0026236:	73 ef                	jae    c0026227 <__udivdi3+0xdb>
c0026238:	8d 46 ff             	lea    eax,[esi-0x1]
c002623b:	31 db                	xor    ebx,ebx
c002623d:	e9 31 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026242:	66 90                	xchg   ax,ax
c0026244:	31 c0                	xor    eax,eax
c0026246:	e9 28 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c002624b:	90                   	nop

c002624c <__umoddi3>:
c002624c:	55                   	push   ebp
c002624d:	57                   	push   edi
c002624e:	56                   	push   esi
c002624f:	53                   	push   ebx
c0026250:	83 ec 1c             	sub    esp,0x1c
c0026253:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026257:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002625b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002625f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026263:	89 da                	mov    edx,ebx
c0026265:	85 c0                	test   eax,eax
c0026267:	75 37                	jne    c00262a0 <__umoddi3+0x54>
c0026269:	39 df                	cmp    edi,ebx
c002626b:	76 13                	jbe    c0026280 <__umoddi3+0x34>
c002626d:	89 f0                	mov    eax,esi
c002626f:	f7 f7                	div    edi
c0026271:	89 d0                	mov    eax,edx
c0026273:	31 d2                	xor    edx,edx
c0026275:	83 c4 1c             	add    esp,0x1c
c0026278:	5b                   	pop    ebx
c0026279:	5e                   	pop    esi
c002627a:	5f                   	pop    edi
c002627b:	5d                   	pop    ebp
c002627c:	c3                   	ret    
c002627d:	8d 76 00             	lea    esi,[esi+0x0]
c0026280:	89 fd                	mov    ebp,edi
c0026282:	85 ff                	test   edi,edi
c0026284:	75 0b                	jne    c0026291 <__umoddi3+0x45>
c0026286:	b8 01 00 00 00       	mov    eax,0x1
c002628b:	31 d2                	xor    edx,edx
c002628d:	f7 f7                	div    edi
c002628f:	89 c5                	mov    ebp,eax
c0026291:	89 d8                	mov    eax,ebx
c0026293:	31 d2                	xor    edx,edx
c0026295:	f7 f5                	div    ebp
c0026297:	89 f0                	mov    eax,esi
c0026299:	f7 f5                	div    ebp
c002629b:	89 d0                	mov    eax,edx
c002629d:	eb d4                	jmp    c0026273 <__umoddi3+0x27>
c002629f:	90                   	nop
c00262a0:	89 f1                	mov    ecx,esi
c00262a2:	39 d8                	cmp    eax,ebx
c00262a4:	76 0a                	jbe    c00262b0 <__umoddi3+0x64>
c00262a6:	89 f0                	mov    eax,esi
c00262a8:	83 c4 1c             	add    esp,0x1c
c00262ab:	5b                   	pop    ebx
c00262ac:	5e                   	pop    esi
c00262ad:	5f                   	pop    edi
c00262ae:	5d                   	pop    ebp
c00262af:	c3                   	ret    
c00262b0:	0f bd e8             	bsr    ebp,eax
c00262b3:	83 f5 1f             	xor    ebp,0x1f
c00262b6:	75 1c                	jne    c00262d4 <__umoddi3+0x88>
c00262b8:	39 d8                	cmp    eax,ebx
c00262ba:	72 04                	jb     c00262c0 <__umoddi3+0x74>
c00262bc:	39 f7                	cmp    edi,esi
c00262be:	77 08                	ja     c00262c8 <__umoddi3+0x7c>
c00262c0:	89 da                	mov    edx,ebx
c00262c2:	29 fe                	sub    esi,edi
c00262c4:	19 c2                	sbb    edx,eax
c00262c6:	89 f1                	mov    ecx,esi
c00262c8:	89 c8                	mov    eax,ecx
c00262ca:	83 c4 1c             	add    esp,0x1c
c00262cd:	5b                   	pop    ebx
c00262ce:	5e                   	pop    esi
c00262cf:	5f                   	pop    edi
c00262d0:	5d                   	pop    ebp
c00262d1:	c3                   	ret    
c00262d2:	66 90                	xchg   ax,ax
c00262d4:	ba 20 00 00 00       	mov    edx,0x20
c00262d9:	29 ea                	sub    edx,ebp
c00262db:	89 e9                	mov    ecx,ebp
c00262dd:	d3 e0                	shl    eax,cl
c00262df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262e3:	89 f8                	mov    eax,edi
c00262e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00262e9:	88 d1                	mov    cl,dl
c00262eb:	d3 e8                	shr    eax,cl
c00262ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262f1:	09 c1                	or     ecx,eax
c00262f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00262f7:	89 e9                	mov    ecx,ebp
c00262f9:	d3 e7                	shl    edi,cl
c00262fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00262ff:	89 d8                	mov    eax,ebx
c0026301:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026305:	88 d1                	mov    cl,dl
c0026307:	d3 e8                	shr    eax,cl
c0026309:	89 c7                	mov    edi,eax
c002630b:	89 e9                	mov    ecx,ebp
c002630d:	d3 e3                	shl    ebx,cl
c002630f:	89 f0                	mov    eax,esi
c0026311:	88 d1                	mov    cl,dl
c0026313:	d3 e8                	shr    eax,cl
c0026315:	09 d8                	or     eax,ebx
c0026317:	89 e9                	mov    ecx,ebp
c0026319:	d3 e6                	shl    esi,cl
c002631b:	89 f3                	mov    ebx,esi
c002631d:	89 fa                	mov    edx,edi
c002631f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026323:	89 d1                	mov    ecx,edx
c0026325:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026329:	89 c6                	mov    esi,eax
c002632b:	89 d7                	mov    edi,edx
c002632d:	39 d1                	cmp    ecx,edx
c002632f:	72 27                	jb     c0026358 <__umoddi3+0x10c>
c0026331:	74 21                	je     c0026354 <__umoddi3+0x108>
c0026333:	89 ca                	mov    edx,ecx
c0026335:	29 f3                	sub    ebx,esi
c0026337:	19 fa                	sbb    edx,edi
c0026339:	89 d0                	mov    eax,edx
c002633b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002633f:	d3 e0                	shl    eax,cl
c0026341:	89 e9                	mov    ecx,ebp
c0026343:	d3 eb                	shr    ebx,cl
c0026345:	09 d8                	or     eax,ebx
c0026347:	d3 ea                	shr    edx,cl
c0026349:	83 c4 1c             	add    esp,0x1c
c002634c:	5b                   	pop    ebx
c002634d:	5e                   	pop    esi
c002634e:	5f                   	pop    edi
c002634f:	5d                   	pop    ebp
c0026350:	c3                   	ret    
c0026351:	8d 76 00             	lea    esi,[esi+0x0]
c0026354:	39 c3                	cmp    ebx,eax
c0026356:	73 db                	jae    c0026333 <__umoddi3+0xe7>
c0026358:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002635c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026360:	89 d7                	mov    edi,edx
c0026362:	89 c6                	mov    esi,eax
c0026364:	eb cd                	jmp    c0026333 <__umoddi3+0xe7>

c0026366 <__addsf3>:
c0026366:	55                   	push   ebp
c0026367:	89 e5                	mov    ebp,esp
c0026369:	57                   	push   edi
c002636a:	56                   	push   esi
c002636b:	53                   	push   ebx
c002636c:	83 ec 08             	sub    esp,0x8
c002636f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026372:	89 fa                	mov    edx,edi
c0026374:	89 f8                	mov    eax,edi
c0026376:	c1 f8 17             	sar    eax,0x17
c0026379:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002637c:	c1 e2 08             	shl    edx,0x8
c002637f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026385:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026388:	89 de                	mov    esi,ebx
c002638a:	c1 fe 17             	sar    esi,0x17
c002638d:	c1 e3 08             	shl    ebx,0x8
c0026390:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026396:	31 f0                	xor    eax,esi
c0026398:	0f 88 3b 01 00 00    	js     c00264d9 <__addsf3+0x173>
c002639e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00263a1:	29 f1                	sub    ecx,esi
c00263a3:	85 c9                	test   ecx,ecx
c00263a5:	7e 54                	jle    c00263fb <__addsf3+0x95>
c00263a7:	89 f0                	mov    eax,esi
c00263a9:	84 c0                	test   al,al
c00263ab:	75 10                	jne    c00263bd <__addsf3+0x57>
c00263ad:	85 db                	test   ebx,ebx
c00263af:	0f 84 aa 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263b5:	49                   	dec    ecx
c00263b6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00263b9:	74 38                	je     c00263f3 <__addsf3+0x8d>
c00263bb:	eb 13                	jmp    c00263d0 <__addsf3+0x6a>
c00263bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263c0:	f7 d0                	not    eax
c00263c2:	84 c0                	test   al,al
c00263c4:	0f 84 95 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263ca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00263d0:	83 f9 1f             	cmp    ecx,0x1f
c00263d3:	0f 8f 86 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c00263d9:	89 de                	mov    esi,ebx
c00263db:	d3 ee                	shr    esi,cl
c00263dd:	b8 20 00 00 00       	mov    eax,0x20
c00263e2:	29 c8                	sub    eax,ecx
c00263e4:	89 c1                	mov    ecx,eax
c00263e6:	d3 e3                	shl    ebx,cl
c00263e8:	31 c0                	xor    eax,eax
c00263ea:	85 db                	test   ebx,ebx
c00263ec:	0f 95 c0             	setne  al
c00263ef:	09 f0                	or     eax,esi
c00263f1:	01 d0                	add    eax,edx
c00263f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00263f6:	e9 b6 00 00 00       	jmp    c00264b1 <__addsf3+0x14b>
c00263fb:	74 5c                	je     c0026459 <__addsf3+0xf3>
c00263fd:	89 f1                	mov    ecx,esi
c00263ff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026402:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026405:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026409:	75 14                	jne    c002641f <__addsf3+0xb9>
c002640b:	85 d2                	test   edx,edx
c002640d:	0f 84 4c 02 00 00    	je     c002665f <__addsf3+0x2f9>
c0026413:	49                   	dec    ecx
c0026414:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026417:	0f 84 94 00 00 00    	je     c00264b1 <__addsf3+0x14b>
c002641d:	eb 12                	jmp    c0026431 <__addsf3+0xcb>
c002641f:	89 f0                	mov    eax,esi
c0026421:	f7 d0                	not    eax
c0026423:	84 c0                	test   al,al
c0026425:	0f 84 34 02 00 00    	je     c002665f <__addsf3+0x2f9>
c002642b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026431:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026434:	83 f9 1f             	cmp    ecx,0x1f
c0026437:	0f 8f 22 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c002643d:	89 d7                	mov    edi,edx
c002643f:	d3 ef                	shr    edi,cl
c0026441:	b8 20 00 00 00       	mov    eax,0x20
c0026446:	29 c8                	sub    eax,ecx
c0026448:	89 c1                	mov    ecx,eax
c002644a:	d3 e2                	shl    edx,cl
c002644c:	31 c0                	xor    eax,eax
c002644e:	85 d2                	test   edx,edx
c0026450:	0f 95 c0             	setne  al
c0026453:	09 f8                	or     eax,edi
c0026455:	01 d8                	add    eax,ebx
c0026457:	eb 58                	jmp    c00264b1 <__addsf3+0x14b>
c0026459:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002645c:	8d 70 01             	lea    esi,[eax+0x1]
c002645f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026465:	75 32                	jne    c0026499 <__addsf3+0x133>
c0026467:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002646b:	75 1f                	jne    c002648c <__addsf3+0x126>
c002646d:	85 d2                	test   edx,edx
c002646f:	0f 84 e0 01 00 00    	je     c0026655 <__addsf3+0x2ef>
c0026475:	85 db                	test   ebx,ebx
c0026477:	0f 84 e2 01 00 00    	je     c002665f <__addsf3+0x2f9>
c002647d:	89 d0                	mov    eax,edx
c002647f:	01 d8                	add    eax,ebx
c0026481:	0f 89 a9 01 00 00    	jns    c0026630 <__addsf3+0x2ca>
c0026487:	e9 9d 01 00 00       	jmp    c0026629 <__addsf3+0x2c3>
c002648c:	85 d2                	test   edx,edx
c002648e:	0f 85 cb 01 00 00    	jne    c002665f <__addsf3+0x2f9>
c0026494:	e9 bc 01 00 00       	jmp    c0026655 <__addsf3+0x2ef>
c0026499:	31 c0                	xor    eax,eax
c002649b:	89 f1                	mov    ecx,esi
c002649d:	f7 d1                	not    ecx
c002649f:	84 c9                	test   cl,cl
c00264a1:	0f 84 90 01 00 00    	je     c0026637 <__addsf3+0x2d1>
c00264a7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00264aa:	d1 e8                	shr    eax,1
c00264ac:	e9 86 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264b1:	85 c0                	test   eax,eax
c00264b3:	0f 89 7e 01 00 00    	jns    c0026637 <__addsf3+0x2d1>
c00264b9:	46                   	inc    esi
c00264ba:	89 f2                	mov    edx,esi
c00264bc:	f7 d2                	not    edx
c00264be:	84 d2                	test   dl,dl
c00264c0:	0f 84 6f 01 00 00    	je     c0026635 <__addsf3+0x2cf>
c00264c6:	89 c2                	mov    edx,eax
c00264c8:	83 e2 01             	and    edx,0x1
c00264cb:	d1 e8                	shr    eax,1
c00264cd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00264d2:	09 d0                	or     eax,edx
c00264d4:	e9 5e 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264d9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00264dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264e0:	89 f0                	mov    eax,esi
c00264e2:	0f b6 c0             	movzx  eax,al
c00264e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264e8:	29 c1                	sub    ecx,eax
c00264ea:	85 c9                	test   ecx,ecx
c00264ec:	7e 55                	jle    c0026543 <__addsf3+0x1dd>
c00264ee:	85 c0                	test   eax,eax
c00264f0:	75 11                	jne    c0026503 <__addsf3+0x19d>
c00264f2:	85 db                	test   ebx,ebx
c00264f4:	0f 84 65 01 00 00    	je     c002665f <__addsf3+0x2f9>
c00264fa:	49                   	dec    ecx
c00264fb:	75 19                	jne    c0026516 <__addsf3+0x1b0>
c00264fd:	89 d0                	mov    eax,edx
c00264ff:	29 d8                	sub    eax,ebx
c0026501:	eb 38                	jmp    c002653b <__addsf3+0x1d5>
c0026503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026506:	f7 d0                	not    eax
c0026508:	84 c0                	test   al,al
c002650a:	0f 84 4f 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026510:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026516:	83 f9 1f             	cmp    ecx,0x1f
c0026519:	0f 8f 40 01 00 00    	jg     c002665f <__addsf3+0x2f9>
c002651f:	89 de                	mov    esi,ebx
c0026521:	d3 ee                	shr    esi,cl
c0026523:	b8 20 00 00 00       	mov    eax,0x20
c0026528:	29 c8                	sub    eax,ecx
c002652a:	89 c1                	mov    ecx,eax
c002652c:	d3 e3                	shl    ebx,cl
c002652e:	31 c0                	xor    eax,eax
c0026530:	85 db                	test   ebx,ebx
c0026532:	0f 95 c0             	setne  al
c0026535:	09 f0                	or     eax,esi
c0026537:	29 c2                	sub    edx,eax
c0026539:	89 d0                	mov    eax,edx
c002653b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002653e:	e9 af 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026543:	74 5c                	je     c00265a1 <__addsf3+0x23b>
c0026545:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026548:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002654b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002654f:	75 14                	jne    c0026565 <__addsf3+0x1ff>
c0026551:	85 d2                	test   edx,edx
c0026553:	0f 84 06 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026559:	48                   	dec    eax
c002655a:	75 1b                	jne    c0026577 <__addsf3+0x211>
c002655c:	89 d8                	mov    eax,ebx
c002655e:	29 d0                	sub    eax,edx
c0026560:	e9 8d 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026565:	89 f1                	mov    ecx,esi
c0026567:	f7 d1                	not    ecx
c0026569:	84 c9                	test   cl,cl
c002656b:	0f 84 ee 00 00 00    	je     c002665f <__addsf3+0x2f9>
c0026571:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026577:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002657a:	83 f8 1f             	cmp    eax,0x1f
c002657d:	0f 8f dc 00 00 00    	jg     c002665f <__addsf3+0x2f9>
c0026583:	89 d7                	mov    edi,edx
c0026585:	88 c1                	mov    cl,al
c0026587:	d3 ef                	shr    edi,cl
c0026589:	b9 20 00 00 00       	mov    ecx,0x20
c002658e:	29 c1                	sub    ecx,eax
c0026590:	d3 e2                	shl    edx,cl
c0026592:	31 c0                	xor    eax,eax
c0026594:	85 d2                	test   edx,edx
c0026596:	0f 95 c0             	setne  al
c0026599:	09 f8                	or     eax,edi
c002659b:	29 c3                	sub    ebx,eax
c002659d:	89 d8                	mov    eax,ebx
c002659f:	eb 51                	jmp    c00265f2 <__addsf3+0x28c>
c00265a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265a4:	40                   	inc    eax
c00265a5:	a8 fe                	test   al,0xfe
c00265a7:	75 3d                	jne    c00265e6 <__addsf3+0x280>
c00265a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00265ad:	0f 85 a7 00 00 00    	jne    c002665a <__addsf3+0x2f4>
c00265b3:	85 d2                	test   edx,edx
c00265b5:	75 12                	jne    c00265c9 <__addsf3+0x263>
c00265b7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00265ba:	85 db                	test   ebx,ebx
c00265bc:	0f 85 9d 00 00 00    	jne    c002665f <__addsf3+0x2f9>
c00265c2:	31 ff                	xor    edi,edi
c00265c4:	e9 96 00 00 00       	jmp    c002665f <__addsf3+0x2f9>
c00265c9:	85 db                	test   ebx,ebx
c00265cb:	0f 84 8e 00 00 00    	je     c002665f <__addsf3+0x2f9>
c00265d1:	89 d0                	mov    eax,edx
c00265d3:	29 d8                	sub    eax,ebx
c00265d5:	79 06                	jns    c00265dd <__addsf3+0x277>
c00265d7:	89 d8                	mov    eax,ebx
c00265d9:	29 d0                	sub    eax,edx
c00265db:	eb 5a                	jmp    c0026637 <__addsf3+0x2d1>
c00265dd:	bf 00 00 00 00       	mov    edi,0x0
c00265e2:	74 7b                	je     c002665f <__addsf3+0x2f9>
c00265e4:	eb 4a                	jmp    c0026630 <__addsf3+0x2ca>
c00265e6:	89 d0                	mov    eax,edx
c00265e8:	29 d8                	sub    eax,ebx
c00265ea:	79 12                	jns    c00265fe <__addsf3+0x298>
c00265ec:	89 d8                	mov    eax,ebx
c00265ee:	29 d0                	sub    eax,edx
c00265f0:	eb 09                	jmp    c00265fb <__addsf3+0x295>
c00265f2:	85 c0                	test   eax,eax
c00265f4:	79 41                	jns    c0026637 <__addsf3+0x2d1>
c00265f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265fb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00265fe:	31 f6                	xor    esi,esi
c0026600:	85 c0                	test   eax,eax
c0026602:	74 33                	je     c0026637 <__addsf3+0x2d1>
c0026604:	0f bd c8             	bsr    ecx,eax
c0026607:	83 f1 1f             	xor    ecx,0x1f
c002660a:	d3 e0                	shl    eax,cl
c002660c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026610:	39 ca                	cmp    edx,ecx
c0026612:	7f 10                	jg     c0026624 <__addsf3+0x2be>
c0026614:	29 d1                	sub    ecx,edx
c0026616:	41                   	inc    ecx
c0026617:	d3 e8                	shr    eax,cl
c0026619:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002661c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026622:	eb 13                	jmp    c0026637 <__addsf3+0x2d1>
c0026624:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026627:	29 ce                	sub    esi,ecx
c0026629:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002662e:	eb 07                	jmp    c0026637 <__addsf3+0x2d1>
c0026630:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026633:	eb 02                	jmp    c0026637 <__addsf3+0x2d1>
c0026635:	31 c0                	xor    eax,eax
c0026637:	89 c2                	mov    edx,eax
c0026639:	c1 ea 08             	shr    edx,0x8
c002663c:	a8 7f                	test   al,0x7f
c002663e:	0f 95 c1             	setne  cl
c0026641:	09 d1                	or     ecx,edx
c0026643:	83 e1 01             	and    ecx,0x1
c0026646:	c1 e8 07             	shr    eax,0x7
c0026649:	21 c8                	and    eax,ecx
c002664b:	c1 e6 17             	shl    esi,0x17
c002664e:	09 d6                	or     esi,edx
c0026650:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026653:	eb 0a                	jmp    c002665f <__addsf3+0x2f9>
c0026655:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026658:	eb 05                	jmp    c002665f <__addsf3+0x2f9>
c002665a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002665f:	89 f8                	mov    eax,edi
c0026661:	5a                   	pop    edx
c0026662:	59                   	pop    ecx
c0026663:	5b                   	pop    ebx
c0026664:	5e                   	pop    esi
c0026665:	5f                   	pop    edi
c0026666:	5d                   	pop    ebp
c0026667:	c3                   	ret    

c0026668 <__subsf3>:
c0026668:	55                   	push   ebp
c0026669:	89 e5                	mov    ebp,esp
c002666b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666e:	05 00 00 00 80       	add    eax,0x80000000
c0026673:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026676:	5d                   	pop    ebp
c0026677:	e9 ea fc ff ff       	jmp    c0026366 <__addsf3>

c002667c <__negsf2>:
c002667c:	55                   	push   ebp
c002667d:	89 e5                	mov    ebp,esp
c002667f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026682:	05 00 00 00 80       	add    eax,0x80000000
c0026687:	5d                   	pop    ebp
c0026688:	c3                   	ret    

c0026689 <__mulsf3>:
c0026689:	55                   	push   ebp
c002668a:	89 e5                	mov    ebp,esp
c002668c:	57                   	push   edi
c002668d:	56                   	push   esi
c002668e:	53                   	push   ebx
c002668f:	83 ec 1c             	sub    esp,0x1c
c0026692:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026695:	89 f0                	mov    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	c1 f9 17             	sar    ecx,0x17
c002669c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002669f:	c1 e0 08             	shl    eax,0x8
c00266a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00266a7:	89 c1                	mov    ecx,eax
c00266a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266ac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00266af:	89 c7                	mov    edi,eax
c00266b1:	c1 ff 17             	sar    edi,0x17
c00266b4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00266b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00266bb:	89 f8                	mov    eax,edi
c00266bd:	0f b6 c0             	movzx  eax,al
c00266c0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00266c3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00266c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00266ca:	42                   	inc    edx
c00266cb:	80 e2 fe             	and    dl,0xfe
c00266ce:	75 7b                	jne    c002674b <__mulsf3+0xc2>
c00266d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00266d4:	74 54                	je     c002672a <__mulsf3+0xa1>
c00266d6:	85 c9                	test   ecx,ecx
c00266d8:	0f 85 64 01 00 00    	jne    c0026842 <__mulsf3+0x1b9>
c00266de:	8d 57 01             	lea    edx,[edi+0x1]
c00266e1:	80 e2 fe             	and    dl,0xfe
c00266e4:	75 1f                	jne    c0026705 <__mulsf3+0x7c>
c00266e6:	85 c0                	test   eax,eax
c00266e8:	b8 00 00 00 00       	mov    eax,0x0
c00266ed:	74 29                	je     c0026718 <__mulsf3+0x8f>
c00266ef:	53                   	push   ebx
c00266f0:	53                   	push   ebx
c00266f1:	50                   	push   eax
c00266f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266f5:	e8 96 05 00 00       	call   c0026c90 <__nesf2>
c00266fa:	83 c4 10             	add    esp,0x10
c00266fd:	85 c0                	test   eax,eax
c00266ff:	0f 85 3a 01 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026705:	85 ff                	test   edi,edi
c0026707:	0f 89 35 01 00 00    	jns    c0026842 <__mulsf3+0x1b9>
c002670d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026713:	e9 2a 01 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026718:	51                   	push   ecx
c0026719:	51                   	push   ecx
c002671a:	50                   	push   eax
c002671b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002671e:	e8 6d 05 00 00       	call   c0026c90 <__nesf2>
c0026723:	83 c4 10             	add    esp,0x10
c0026726:	85 c0                	test   eax,eax
c0026728:	eb 15                	jmp    c002673f <__mulsf3+0xb6>
c002672a:	85 c9                	test   ecx,ecx
c002672c:	74 0b                	je     c0026739 <__mulsf3+0xb0>
c002672e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026731:	01 c9                	add    ecx,ecx
c0026733:	78 16                	js     c002674b <__mulsf3+0xc2>
c0026735:	89 d3                	mov    ebx,edx
c0026737:	eb f5                	jmp    c002672e <__mulsf3+0xa5>
c0026739:	89 f8                	mov    eax,edi
c002673b:	f7 d0                	not    eax
c002673d:	84 c0                	test   al,al
c002673f:	75 c4                	jne    c0026705 <__mulsf3+0x7c>
c0026741:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026746:	e9 f7 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c002674b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002674e:	c1 e6 08             	shl    esi,0x8
c0026751:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026757:	8d 57 01             	lea    edx,[edi+0x1]
c002675a:	80 e2 fe             	and    dl,0xfe
c002675d:	75 63                	jne    c00267c2 <__mulsf3+0x139>
c002675f:	85 c0                	test   eax,eax
c0026761:	74 2f                	je     c0026792 <__mulsf3+0x109>
c0026763:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026767:	0f 89 d2 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c002676d:	52                   	push   edx
c002676e:	52                   	push   edx
c002676f:	6a 00                	push   0x0
c0026771:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026774:	e8 dc 04 00 00       	call   c0026c55 <__eqsf2>
c0026779:	83 c4 10             	add    esp,0x10
c002677c:	85 c0                	test   eax,eax
c002677e:	0f 85 bb 00 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026787:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002678d:	e9 b0 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026792:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026795:	50                   	push   eax
c0026796:	50                   	push   eax
c0026797:	6a 00                	push   0x0
c0026799:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002679c:	e8 b4 04 00 00       	call   c0026c55 <__eqsf2>
c00267a1:	83 c4 10             	add    esp,0x10
c00267a4:	85 c0                	test   eax,eax
c00267a6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00267a9:	75 0c                	jne    c00267b7 <__mulsf3+0x12e>
c00267ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00267af:	0f 89 8a 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c00267b5:	eb cd                	jmp    c0026784 <__mulsf3+0xfb>
c00267b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00267ba:	01 f6                	add    esi,esi
c00267bc:	78 04                	js     c00267c2 <__mulsf3+0x139>
c00267be:	89 c3                	mov    ebx,eax
c00267c0:	eb f5                	jmp    c00267b7 <__mulsf3+0x12e>
c00267c2:	89 c8                	mov    eax,ecx
c00267c4:	0d 00 00 00 80       	or     eax,0x80000000
c00267c9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267cf:	f7 e6                	mul    esi
c00267d1:	85 c0                	test   eax,eax
c00267d3:	0f 95 c0             	setne  al
c00267d6:	0f b6 c0             	movzx  eax,al
c00267d9:	09 c2                	or     edx,eax
c00267db:	78 03                	js     c00267e0 <__mulsf3+0x157>
c00267dd:	01 d2                	add    edx,edx
c00267df:	4b                   	dec    ebx
c00267e0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00267e6:	7f 22                	jg     c002680a <__mulsf3+0x181>
c00267e8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	7f 23                	jg     c0026815 <__mulsf3+0x18c>
c00267f2:	83 fb e9             	cmp    ebx,0xffffffe9
c00267f5:	7c 1a                	jl     c0026811 <__mulsf3+0x188>
c00267f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267fd:	b9 01 00 00 00       	mov    ecx,0x1
c0026802:	29 d9                	sub    ecx,ebx
c0026804:	d3 ea                	shr    edx,cl
c0026806:	31 db                	xor    ebx,ebx
c0026808:	eb 0b                	jmp    c0026815 <__mulsf3+0x18c>
c002680a:	bb ff 00 00 00       	mov    ebx,0xff
c002680f:	eb 02                	jmp    c0026813 <__mulsf3+0x18a>
c0026811:	31 db                	xor    ebx,ebx
c0026813:	31 d2                	xor    edx,edx
c0026815:	89 d0                	mov    eax,edx
c0026817:	c1 e8 08             	shr    eax,0x8
c002681a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002681d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026823:	09 fb                	or     ebx,edi
c0026825:	c1 e3 17             	shl    ebx,0x17
c0026828:	09 c3                	or     ebx,eax
c002682a:	f6 c2 7f             	test   dl,0x7f
c002682d:	0f 95 c1             	setne  cl
c0026830:	09 c8                	or     eax,ecx
c0026832:	83 e0 01             	and    eax,0x1
c0026835:	c1 ea 07             	shr    edx,0x7
c0026838:	21 c2                	and    edx,eax
c002683a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002683d:	eb 03                	jmp    c0026842 <__mulsf3+0x1b9>
c002683f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026842:	89 f0                	mov    eax,esi
c0026844:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026847:	5b                   	pop    ebx
c0026848:	5e                   	pop    esi
c0026849:	5f                   	pop    edi
c002684a:	5d                   	pop    ebp
c002684b:	c3                   	ret    

c002684c <__divsf3>:
c002684c:	55                   	push   ebp
c002684d:	89 e5                	mov    ebp,esp
c002684f:	57                   	push   edi
c0026850:	56                   	push   esi
c0026851:	53                   	push   ebx
c0026852:	83 ec 1c             	sub    esp,0x1c
c0026855:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026858:	89 d8                	mov    eax,ebx
c002685a:	89 d9                	mov    ecx,ebx
c002685c:	c1 f9 17             	sar    ecx,0x17
c002685f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026862:	c1 e0 08             	shl    eax,0x8
c0026865:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002686a:	89 c1                	mov    ecx,eax
c002686c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002686f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026872:	89 c7                	mov    edi,eax
c0026874:	c1 ff 17             	sar    edi,0x17
c0026877:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002687b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002687e:	89 f8                	mov    eax,edi
c0026880:	0f b6 c0             	movzx  eax,al
c0026883:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026886:	29 c6                	sub    esi,eax
c0026888:	83 c6 7f             	add    esi,0x7f
c002688b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002688e:	42                   	inc    edx
c002688f:	80 e2 fe             	and    dl,0xfe
c0026892:	0f 85 9c 00 00 00    	jne    c0026934 <__divsf3+0xe8>
c0026898:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002689c:	74 33                	je     c00268d1 <__divsf3+0x85>
c002689e:	85 c9                	test   ecx,ecx
c00268a0:	0f 85 c7 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268a6:	8d 57 01             	lea    edx,[edi+0x1]
c00268a9:	80 e2 fe             	and    dl,0xfe
c00268ac:	75 2f                	jne    c00268dd <__divsf3+0x91>
c00268ae:	85 c0                	test   eax,eax
c00268b0:	74 2b                	je     c00268dd <__divsf3+0x91>
c00268b2:	51                   	push   ecx
c00268b3:	51                   	push   ecx
c00268b4:	6a 00                	push   0x0
c00268b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268b9:	e8 d2 03 00 00       	call   c0026c90 <__nesf2>
c00268be:	83 c4 10             	add    esp,0x10
c00268c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00268c4:	85 c0                	test   eax,eax
c00268c6:	0f 85 a1 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268cc:	e9 92 01 00 00       	jmp    c0026a63 <__divsf3+0x217>
c00268d1:	85 c9                	test   ecx,ecx
c00268d3:	75 1b                	jne    c00268f0 <__divsf3+0xa4>
c00268d5:	8d 57 01             	lea    edx,[edi+0x1]
c00268d8:	80 e2 fe             	and    dl,0xfe
c00268db:	74 1e                	je     c00268fb <__divsf3+0xaf>
c00268dd:	85 ff                	test   edi,edi
c00268df:	0f 89 88 01 00 00    	jns    c0026a6d <__divsf3+0x221>
c00268e5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00268eb:	e9 7d 01 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00268f0:	8d 56 ff             	lea    edx,[esi-0x1]
c00268f3:	01 c9                	add    ecx,ecx
c00268f5:	78 3d                	js     c0026934 <__divsf3+0xe8>
c00268f7:	89 d6                	mov    esi,edx
c00268f9:	eb f5                	jmp    c00268f0 <__divsf3+0xa4>
c00268fb:	85 c0                	test   eax,eax
c00268fd:	b8 00 00 00 00       	mov    eax,0x0
c0026902:	74 18                	je     c002691c <__divsf3+0xd0>
c0026904:	52                   	push   edx
c0026905:	52                   	push   edx
c0026906:	50                   	push   eax
c0026907:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002690a:	e8 81 03 00 00       	call   c0026c90 <__nesf2>
c002690f:	83 c4 10             	add    esp,0x10
c0026912:	85 c0                	test   eax,eax
c0026914:	0f 85 50 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c002691a:	eb c1                	jmp    c00268dd <__divsf3+0x91>
c002691c:	56                   	push   esi
c002691d:	56                   	push   esi
c002691e:	50                   	push   eax
c002691f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026922:	e8 69 03 00 00       	call   c0026c90 <__nesf2>
c0026927:	83 c4 10             	add    esp,0x10
c002692a:	85 c0                	test   eax,eax
c002692c:	0f 84 31 01 00 00    	je     c0026a63 <__divsf3+0x217>
c0026932:	eb a9                	jmp    c00268dd <__divsf3+0x91>
c0026934:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026937:	c1 e3 08             	shl    ebx,0x8
c002693a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026940:	8d 57 01             	lea    edx,[edi+0x1]
c0026943:	80 e2 fe             	and    dl,0xfe
c0026946:	75 71                	jne    c00269b9 <__divsf3+0x16d>
c0026948:	85 c0                	test   eax,eax
c002694a:	ba 00 00 00 00       	mov    edx,0x0
c002694f:	74 2f                	je     c0026980 <__divsf3+0x134>
c0026951:	51                   	push   ecx
c0026952:	51                   	push   ecx
c0026953:	52                   	push   edx
c0026954:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026957:	e8 f9 02 00 00       	call   c0026c55 <__eqsf2>
c002695c:	83 c4 10             	add    esp,0x10
c002695f:	85 c0                	test   eax,eax
c0026961:	0f 85 03 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c0026967:	31 d2                	xor    edx,edx
c0026969:	89 d3                	mov    ebx,edx
c002696b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002696e:	31 f8                	xor    eax,edi
c0026970:	0f 89 f7 00 00 00    	jns    c0026a6d <__divsf3+0x221>
c0026976:	bb 00 00 00 80       	mov    ebx,0x80000000
c002697b:	e9 ed 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c0026980:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026983:	50                   	push   eax
c0026984:	50                   	push   eax
c0026985:	52                   	push   edx
c0026986:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026989:	e8 c7 02 00 00       	call   c0026c55 <__eqsf2>
c002698e:	83 c4 10             	add    esp,0x10
c0026991:	85 c0                	test   eax,eax
c0026993:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026996:	75 16                	jne    c00269ae <__divsf3+0x162>
c0026998:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002699b:	31 fb                	xor    ebx,edi
c002699d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00269a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00269a9:	e9 bf 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00269ae:	8d 46 01             	lea    eax,[esi+0x1]
c00269b1:	01 db                	add    ebx,ebx
c00269b3:	78 04                	js     c00269b9 <__divsf3+0x16d>
c00269b5:	89 c6                	mov    esi,eax
c00269b7:	eb f5                	jmp    c00269ae <__divsf3+0x162>
c00269b9:	89 c8                	mov    eax,ecx
c00269bb:	0d 00 00 00 80       	or     eax,0x80000000
c00269c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269c6:	31 d2                	xor    edx,edx
c00269c8:	39 d8                	cmp    eax,ebx
c00269ca:	72 07                	jb     c00269d3 <__divsf3+0x187>
c00269cc:	29 d8                	sub    eax,ebx
c00269ce:	ba 01 00 00 00       	mov    edx,0x1
c00269d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00269da:	01 d2                	add    edx,edx
c00269dc:	89 c1                	mov    ecx,eax
c00269de:	01 c0                	add    eax,eax
c00269e0:	85 c9                	test   ecx,ecx
c00269e2:	78 04                	js     c00269e8 <__divsf3+0x19c>
c00269e4:	39 c3                	cmp    ebx,eax
c00269e6:	77 05                	ja     c00269ed <__divsf3+0x1a1>
c00269e8:	29 d8                	sub    eax,ebx
c00269ea:	83 ca 01             	or     edx,0x1
c00269ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00269f0:	75 e8                	jne    c00269da <__divsf3+0x18e>
c00269f2:	85 c0                	test   eax,eax
c00269f4:	0f 95 c0             	setne  al
c00269f7:	0f b6 c0             	movzx  eax,al
c00269fa:	c1 e2 06             	shl    edx,0x6
c00269fd:	09 c2                	or     edx,eax
c00269ff:	78 03                	js     c0026a04 <__divsf3+0x1b8>
c0026a01:	01 d2                	add    edx,edx
c0026a03:	4e                   	dec    esi
c0026a04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026a0a:	7f 22                	jg     c0026a2e <__divsf3+0x1e2>
c0026a0c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a12:	85 f6                	test   esi,esi
c0026a14:	7f 23                	jg     c0026a39 <__divsf3+0x1ed>
c0026a16:	83 fe e9             	cmp    esi,0xffffffe9
c0026a19:	7c 1a                	jl     c0026a35 <__divsf3+0x1e9>
c0026a1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a21:	b9 01 00 00 00       	mov    ecx,0x1
c0026a26:	29 f1                	sub    ecx,esi
c0026a28:	d3 ea                	shr    edx,cl
c0026a2a:	31 f6                	xor    esi,esi
c0026a2c:	eb 0b                	jmp    c0026a39 <__divsf3+0x1ed>
c0026a2e:	be ff 00 00 00       	mov    esi,0xff
c0026a33:	eb 02                	jmp    c0026a37 <__divsf3+0x1eb>
c0026a35:	31 f6                	xor    esi,esi
c0026a37:	31 d2                	xor    edx,edx
c0026a39:	89 d0                	mov    eax,edx
c0026a3b:	c1 e8 08             	shr    eax,0x8
c0026a3e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026a41:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026a47:	09 fe                	or     esi,edi
c0026a49:	c1 e6 17             	shl    esi,0x17
c0026a4c:	09 c6                	or     esi,eax
c0026a4e:	f6 c2 7f             	test   dl,0x7f
c0026a51:	0f 95 c1             	setne  cl
c0026a54:	09 c8                	or     eax,ecx
c0026a56:	83 e0 01             	and    eax,0x1
c0026a59:	c1 ea 07             	shr    edx,0x7
c0026a5c:	21 c2                	and    edx,eax
c0026a5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026a61:	eb 0a                	jmp    c0026a6d <__divsf3+0x221>
c0026a63:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026a68:	eb 03                	jmp    c0026a6d <__divsf3+0x221>
c0026a6a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a6d:	89 d8                	mov    eax,ebx
c0026a6f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a72:	5b                   	pop    ebx
c0026a73:	5e                   	pop    esi
c0026a74:	5f                   	pop    edi
c0026a75:	5d                   	pop    ebp
c0026a76:	c3                   	ret    

c0026a77 <__floatsisf>:
c0026a77:	55                   	push   ebp
c0026a78:	89 e5                	mov    ebp,esp
c0026a7a:	53                   	push   ebx
c0026a7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026a7e:	85 d2                	test   edx,edx
c0026a80:	7e 2b                	jle    c0026aad <__floatsisf+0x36>
c0026a82:	0f bd ca             	bsr    ecx,edx
c0026a85:	83 f1 1f             	xor    ecx,0x1f
c0026a88:	d3 e2                	shl    edx,cl
c0026a8a:	89 d0                	mov    eax,edx
c0026a8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a91:	89 c3                	mov    ebx,eax
c0026a93:	c1 eb 08             	shr    ebx,0x8
c0026a96:	80 e2 7f             	and    dl,0x7f
c0026a99:	0f 95 c2             	setne  dl
c0026a9c:	09 da                	or     edx,ebx
c0026a9e:	83 e2 01             	and    edx,0x1
c0026aa1:	c1 e8 07             	shr    eax,0x7
c0026aa4:	21 c2                	and    edx,eax
c0026aa6:	b8 9e 00 00 00       	mov    eax,0x9e
c0026aab:	eb 32                	jmp    c0026adf <__floatsisf+0x68>
c0026aad:	b8 00 00 00 00       	mov    eax,0x0
c0026ab2:	74 34                	je     c0026ae8 <__floatsisf+0x71>
c0026ab4:	f7 da                	neg    edx
c0026ab6:	0f bd ca             	bsr    ecx,edx
c0026ab9:	83 f1 1f             	xor    ecx,0x1f
c0026abc:	d3 e2                	shl    edx,cl
c0026abe:	89 d0                	mov    eax,edx
c0026ac0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ac5:	89 c3                	mov    ebx,eax
c0026ac7:	c1 eb 08             	shr    ebx,0x8
c0026aca:	80 e2 7f             	and    dl,0x7f
c0026acd:	0f 95 c2             	setne  dl
c0026ad0:	09 da                	or     edx,ebx
c0026ad2:	83 e2 01             	and    edx,0x1
c0026ad5:	c1 e8 07             	shr    eax,0x7
c0026ad8:	21 c2                	and    edx,eax
c0026ada:	b8 9e 01 00 00       	mov    eax,0x19e
c0026adf:	29 c8                	sub    eax,ecx
c0026ae1:	c1 e0 17             	shl    eax,0x17
c0026ae4:	09 d8                	or     eax,ebx
c0026ae6:	01 d0                	add    eax,edx
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5d                   	pop    ebp
c0026aea:	c3                   	ret    

c0026aeb <__floatunsisf>:
c0026aeb:	55                   	push   ebp
c0026aec:	89 e5                	mov    ebp,esp
c0026aee:	53                   	push   ebx
c0026aef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026af2:	31 c0                	xor    eax,eax
c0026af4:	85 d2                	test   edx,edx
c0026af6:	74 32                	je     c0026b2a <__floatunsisf+0x3f>
c0026af8:	0f bd ca             	bsr    ecx,edx
c0026afb:	83 f1 1f             	xor    ecx,0x1f
c0026afe:	d3 e2                	shl    edx,cl
c0026b00:	89 d0                	mov    eax,edx
c0026b02:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b07:	89 c3                	mov    ebx,eax
c0026b09:	c1 eb 08             	shr    ebx,0x8
c0026b0c:	80 e2 7f             	and    dl,0x7f
c0026b0f:	0f 95 c2             	setne  dl
c0026b12:	09 da                	or     edx,ebx
c0026b14:	83 e2 01             	and    edx,0x1
c0026b17:	c1 e8 07             	shr    eax,0x7
c0026b1a:	21 c2                	and    edx,eax
c0026b1c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026b21:	29 c8                	sub    eax,ecx
c0026b23:	c1 e0 17             	shl    eax,0x17
c0026b26:	09 d8                	or     eax,ebx
c0026b28:	01 d0                	add    eax,edx
c0026b2a:	5b                   	pop    ebx
c0026b2b:	5d                   	pop    ebp
c0026b2c:	c3                   	ret    

c0026b2d <__fixsfsi>:
c0026b2d:	55                   	push   ebp
c0026b2e:	89 e5                	mov    ebp,esp
c0026b30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b33:	89 d1                	mov    ecx,edx
c0026b35:	c1 e1 08             	shl    ecx,0x8
c0026b38:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026b3e:	c1 fa 17             	sar    edx,0x17
c0026b41:	78 1c                	js     c0026b5f <__fixsfsi+0x32>
c0026b43:	83 ea 7f             	sub    edx,0x7f
c0026b46:	31 c0                	xor    eax,eax
c0026b48:	83 fa 1e             	cmp    edx,0x1e
c0026b4b:	77 40                	ja     c0026b8d <__fixsfsi+0x60>
c0026b4d:	89 c8                	mov    eax,ecx
c0026b4f:	0d 00 00 00 80       	or     eax,0x80000000
c0026b54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b59:	29 d1                	sub    ecx,edx
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	eb 2e                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b5f:	31 c0                	xor    eax,eax
c0026b61:	81 c2 81 00 00 00    	add    edx,0x81
c0026b67:	78 24                	js     c0026b8d <__fixsfsi+0x60>
c0026b69:	83 fa 1e             	cmp    edx,0x1e
c0026b6c:	7e 09                	jle    c0026b77 <__fixsfsi+0x4a>
c0026b6e:	83 fa 1f             	cmp    edx,0x1f
c0026b71:	75 18                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b73:	85 c9                	test   ecx,ecx
c0026b75:	75 14                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b77:	89 c8                	mov    eax,ecx
c0026b79:	0d 00 00 00 80       	or     eax,0x80000000
c0026b7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b83:	29 d1                	sub    ecx,edx
c0026b85:	d3 e8                	shr    eax,cl
c0026b87:	f7 d8                	neg    eax
c0026b89:	eb 02                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b8b:	31 c0                	xor    eax,eax
c0026b8d:	5d                   	pop    ebp
c0026b8e:	c3                   	ret    

c0026b8f <__fixunssfsi>:
c0026b8f:	55                   	push   ebp
c0026b90:	89 e5                	mov    ebp,esp
c0026b92:	53                   	push   ebx
c0026b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b96:	89 d3                	mov    ebx,edx
c0026b98:	c1 fb 17             	sar    ebx,0x17
c0026b9b:	83 eb 7f             	sub    ebx,0x7f
c0026b9e:	31 c0                	xor    eax,eax
c0026ba0:	83 fb 1f             	cmp    ebx,0x1f
c0026ba3:	77 18                	ja     c0026bbd <__fixunssfsi+0x2e>
c0026ba5:	89 d0                	mov    eax,edx
c0026ba7:	c1 e0 08             	shl    eax,0x8
c0026baa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026baf:	0d 00 00 00 80       	or     eax,0x80000000
c0026bb4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026bb9:	29 d9                	sub    ecx,ebx
c0026bbb:	d3 e8                	shr    eax,cl
c0026bbd:	5b                   	pop    ebx
c0026bbe:	5d                   	pop    ebp
c0026bbf:	c3                   	ret    

c0026bc0 <__cmpsf2>:
c0026bc0:	55                   	push   ebp
c0026bc1:	89 e5                	mov    ebp,esp
c0026bc3:	57                   	push   edi
c0026bc4:	56                   	push   esi
c0026bc5:	53                   	push   ebx
c0026bc6:	83 ec 24             	sub    esp,0x24
c0026bc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bcf:	e8 4f 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bd4:	5a                   	pop    edx
c0026bd5:	59                   	pop    ecx
c0026bd6:	89 c3                	mov    ebx,eax
c0026bd8:	c1 e8 17             	shr    eax,0x17
c0026bdb:	0f b6 f0             	movzx  esi,al
c0026bde:	89 d8                	mov    eax,ebx
c0026be0:	c1 e8 1f             	shr    eax,0x1f
c0026be3:	31 c6                	xor    esi,eax
c0026be5:	c1 e3 08             	shl    ebx,0x8
c0026be8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026beb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026bee:	e8 30 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bf3:	83 c4 10             	add    esp,0x10
c0026bf6:	89 c1                	mov    ecx,eax
c0026bf8:	c1 e9 17             	shr    ecx,0x17
c0026bfb:	0f b6 c9             	movzx  ecx,cl
c0026bfe:	89 c7                	mov    edi,eax
c0026c00:	c1 ef 1f             	shr    edi,0x1f
c0026c03:	89 ca                	mov    edx,ecx
c0026c05:	31 fa                	xor    edx,edi
c0026c07:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026c0a:	c1 e0 08             	shl    eax,0x8
c0026c0d:	89 c2                	mov    edx,eax
c0026c0f:	89 d8                	mov    eax,ebx
c0026c11:	09 d0                	or     eax,edx
c0026c13:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c18:	09 f0                	or     eax,esi
c0026c1a:	75 08                	jne    c0026c24 <__cmpsf2+0x64>
c0026c1c:	31 c0                	xor    eax,eax
c0026c1e:	39 f9                	cmp    ecx,edi
c0026c20:	75 0c                	jne    c0026c2e <__cmpsf2+0x6e>
c0026c22:	eb 29                	jmp    c0026c4d <__cmpsf2+0x8d>
c0026c24:	b8 01 00 00 00       	mov    eax,0x1
c0026c29:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c2c:	7f 1f                	jg     c0026c4d <__cmpsf2+0x8d>
c0026c2e:	83 c8 ff             	or     eax,0xffffffff
c0026c31:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c34:	7c 17                	jl     c0026c4d <__cmpsf2+0x8d>
c0026c36:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c3c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c42:	b8 01 00 00 00       	mov    eax,0x1
c0026c47:	39 d3                	cmp    ebx,edx
c0026c49:	77 02                	ja     c0026c4d <__cmpsf2+0x8d>
c0026c4b:	19 c0                	sbb    eax,eax
c0026c4d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c50:	5b                   	pop    ebx
c0026c51:	5e                   	pop    esi
c0026c52:	5f                   	pop    edi
c0026c53:	5d                   	pop    ebp
c0026c54:	c3                   	ret    

c0026c55 <__eqsf2>:
c0026c55:	55                   	push   ebp
c0026c56:	89 e5                	mov    ebp,esp
c0026c58:	83 ec 24             	sub    esp,0x24
c0026c5b:	6a 01                	push   0x1
c0026c5d:	83 ec 0c             	sub    esp,0xc
c0026c60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c63:	e8 df 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c68:	83 c4 10             	add    esp,0x10
c0026c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c71:	52                   	push   edx
c0026c72:	50                   	push   eax
c0026c73:	50                   	push   eax
c0026c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c77:	e8 cb 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c7c:	59                   	pop    ecx
c0026c7d:	59                   	pop    ecx
c0026c7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c84:	52                   	push   edx
c0026c85:	50                   	push   eax
c0026c86:	e8 35 ff ff ff       	call   c0026bc0 <__cmpsf2>
c0026c8b:	83 c4 20             	add    esp,0x20
c0026c8e:	c9                   	leave  
c0026c8f:	c3                   	ret    

c0026c90 <__nesf2>:
c0026c90:	eb c3                	jmp    c0026c55 <__eqsf2>

c0026c92 <__gtsf2>:
c0026c92:	55                   	push   ebp
c0026c93:	89 e5                	mov    ebp,esp
c0026c95:	83 ec 24             	sub    esp,0x24
c0026c98:	6a ff                	push   0xffffffff
c0026c9a:	83 ec 0c             	sub    esp,0xc
c0026c9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ca0:	e8 a2 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026ca5:	83 c4 10             	add    esp,0x10
c0026ca8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cae:	52                   	push   edx
c0026caf:	50                   	push   eax
c0026cb0:	50                   	push   eax
c0026cb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cb4:	e8 8e 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026cb9:	59                   	pop    ecx
c0026cba:	59                   	pop    ecx
c0026cbb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cbe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cc1:	52                   	push   edx
c0026cc2:	50                   	push   eax
c0026cc3:	e8 f8 fe ff ff       	call   c0026bc0 <__cmpsf2>
c0026cc8:	83 c4 20             	add    esp,0x20
c0026ccb:	c9                   	leave  
c0026ccc:	c3                   	ret    

c0026ccd <__gesf2>:
c0026ccd:	eb c3                	jmp    c0026c92 <__gtsf2>

c0026ccf <__ltsf2>:
c0026ccf:	eb 84                	jmp    c0026c55 <__eqsf2>

c0026cd1 <__lesf2>:
c0026cd1:	eb 82                	jmp    c0026c55 <__eqsf2>

c0026cd3 <__adddf3>:
c0026cd3:	55                   	push   ebp
c0026cd4:	89 e5                	mov    ebp,esp
c0026cd6:	57                   	push   edi
c0026cd7:	56                   	push   esi
c0026cd8:	53                   	push   ebx
c0026cd9:	83 ec 24             	sub    esp,0x24
c0026cdc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cdf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ce2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ce5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ce8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026ceb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026cee:	89 c8                	mov    eax,ecx
c0026cf0:	89 ce                	mov    esi,ecx
c0026cf2:	c1 fe 14             	sar    esi,0x14
c0026cf5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026cf8:	89 fb                	mov    ebx,edi
c0026cfa:	89 fa                	mov    edx,edi
c0026cfc:	c1 e2 0b             	shl    edx,0xb
c0026cff:	c1 e0 0b             	shl    eax,0xb
c0026d02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d07:	c1 eb 15             	shr    ebx,0x15
c0026d0a:	09 d8                	or     eax,ebx
c0026d0c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026d0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026d12:	c1 fe 14             	sar    esi,0x14
c0026d15:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026d18:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d1b:	89 f3                	mov    ebx,esi
c0026d1d:	c1 e3 0b             	shl    ebx,0xb
c0026d20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026d23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d26:	c1 e3 0b             	shl    ebx,0xb
c0026d29:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026d2f:	c1 ee 15             	shr    esi,0x15
c0026d32:	09 f3                	or     ebx,esi
c0026d34:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026d37:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d3a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026d3d:	0f 88 5f 02 00 00    	js     c0026fa2 <__adddf3+0x2cf>
c0026d43:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d46:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026d49:	85 db                	test   ebx,ebx
c0026d4b:	0f 8e c7 00 00 00    	jle    c0026e18 <__adddf3+0x145>
c0026d51:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026d58:	75 1a                	jne    c0026d74 <__adddf3+0xa1>
c0026d5a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d5d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026d60:	0f 84 b2 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d66:	4b                   	dec    ebx
c0026d67:	75 23                	jne    c0026d8c <__adddf3+0xb9>
c0026d69:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d6c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d6f:	e9 99 00 00 00       	jmp    c0026e0d <__adddf3+0x13a>
c0026d74:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d77:	f7 d6                	not    esi
c0026d79:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d7f:	0f 84 93 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d85:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026d8c:	83 fb 1f             	cmp    ebx,0x1f
c0026d8f:	7e 42                	jle    c0026dd3 <__adddf3+0x100>
c0026d91:	83 fb 3f             	cmp    ebx,0x3f
c0026d94:	0f 8f 7e 05 00 00    	jg     c0027318 <__adddf3+0x645>
c0026d9a:	83 e3 1f             	and    ebx,0x1f
c0026d9d:	89 d9                	mov    ecx,ebx
c0026d9f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026da2:	d3 ef                	shr    edi,cl
c0026da4:	31 db                	xor    ebx,ebx
c0026da6:	85 c9                	test   ecx,ecx
c0026da8:	74 15                	je     c0026dbf <__adddf3+0xec>
c0026daa:	be 20 00 00 00       	mov    esi,0x20
c0026daf:	29 ce                	sub    esi,ecx
c0026db1:	89 f1                	mov    ecx,esi
c0026db3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026db6:	d3 e6                	shl    esi,cl
c0026db8:	31 db                	xor    ebx,ebx
c0026dba:	85 f6                	test   esi,esi
c0026dbc:	0f 95 c3             	setne  bl
c0026dbf:	31 c9                	xor    ecx,ecx
c0026dc1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026dc5:	0f 95 c1             	setne  cl
c0026dc8:	09 cf                	or     edi,ecx
c0026dca:	09 fb                	or     ebx,edi
c0026dcc:	01 da                	add    edx,ebx
c0026dce:	83 d0 00             	adc    eax,0x0
c0026dd1:	eb 3a                	jmp    c0026e0d <__adddf3+0x13a>
c0026dd3:	bf 20 00 00 00       	mov    edi,0x20
c0026dd8:	29 df                	sub    edi,ebx
c0026dda:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ddd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026de0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026de3:	d3 e6                	shl    esi,cl
c0026de5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026de8:	88 d9                	mov    cl,bl
c0026dea:	d3 ef                	shr    edi,cl
c0026dec:	09 fe                	or     esi,edi
c0026dee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026df1:	88 d9                	mov    cl,bl
c0026df3:	d3 ef                	shr    edi,cl
c0026df5:	89 fb                	mov    ebx,edi
c0026df7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026dfa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026dfd:	d3 e7                	shl    edi,cl
c0026dff:	85 ff                	test   edi,edi
c0026e01:	0f 95 c1             	setne  cl
c0026e04:	0f b6 c9             	movzx  ecx,cl
c0026e07:	09 ce                	or     esi,ecx
c0026e09:	01 f2                	add    edx,esi
c0026e0b:	11 d8                	adc    eax,ebx
c0026e0d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e13:	e9 52 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e18:	0f 84 d5 00 00 00    	je     c0026ef3 <__adddf3+0x220>
c0026e1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e21:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026e24:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e27:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e2a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026e31:	75 20                	jne    c0026e53 <__adddf3+0x180>
c0026e33:	89 d6                	mov    esi,edx
c0026e35:	09 c6                	or     esi,eax
c0026e37:	0f 84 db 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e3d:	4b                   	dec    ebx
c0026e3e:	75 29                	jne    c0026e69 <__adddf3+0x196>
c0026e40:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e46:	01 d1                	add    ecx,edx
c0026e48:	11 c6                	adc    esi,eax
c0026e4a:	89 f0                	mov    eax,esi
c0026e4c:	89 ca                	mov    edx,ecx
c0026e4e:	e9 17 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e53:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026e56:	f7 d6                	not    esi
c0026e58:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e5e:	0f 84 b4 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e64:	0d 00 00 00 80       	or     eax,0x80000000
c0026e69:	83 fb 1f             	cmp    ebx,0x1f
c0026e6c:	7e 48                	jle    c0026eb6 <__adddf3+0x1e3>
c0026e6e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e71:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e74:	83 fb 3f             	cmp    ebx,0x3f
c0026e77:	0f 8f 9b 04 00 00    	jg     c0027318 <__adddf3+0x645>
c0026e7d:	83 e3 1f             	and    ebx,0x1f
c0026e80:	89 d9                	mov    ecx,ebx
c0026e82:	89 c7                	mov    edi,eax
c0026e84:	d3 ef                	shr    edi,cl
c0026e86:	31 db                	xor    ebx,ebx
c0026e88:	85 c9                	test   ecx,ecx
c0026e8a:	74 12                	je     c0026e9e <__adddf3+0x1cb>
c0026e8c:	be 20 00 00 00       	mov    esi,0x20
c0026e91:	29 ce                	sub    esi,ecx
c0026e93:	89 f1                	mov    ecx,esi
c0026e95:	d3 e0                	shl    eax,cl
c0026e97:	31 db                	xor    ebx,ebx
c0026e99:	85 c0                	test   eax,eax
c0026e9b:	0f 95 c3             	setne  bl
c0026e9e:	31 c0                	xor    eax,eax
c0026ea0:	85 d2                	test   edx,edx
c0026ea2:	0f 95 c0             	setne  al
c0026ea5:	09 c7                	or     edi,eax
c0026ea7:	09 fb                	or     ebx,edi
c0026ea9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026eac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eaf:	01 da                	add    edx,ebx
c0026eb1:	83 d6 00             	adc    esi,0x0
c0026eb4:	eb 39                	jmp    c0026eef <__adddf3+0x21c>
c0026eb6:	be 20 00 00 00       	mov    esi,0x20
c0026ebb:	29 de                	sub    esi,ebx
c0026ebd:	89 c7                	mov    edi,eax
c0026ebf:	89 f1                	mov    ecx,esi
c0026ec1:	d3 e7                	shl    edi,cl
c0026ec3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026ec6:	89 d7                	mov    edi,edx
c0026ec8:	88 d9                	mov    cl,bl
c0026eca:	d3 ef                	shr    edi,cl
c0026ecc:	89 f9                	mov    ecx,edi
c0026ece:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026ed1:	09 cf                	or     edi,ecx
c0026ed3:	88 d9                	mov    cl,bl
c0026ed5:	d3 e8                	shr    eax,cl
c0026ed7:	89 f1                	mov    ecx,esi
c0026ed9:	d3 e2                	shl    edx,cl
c0026edb:	85 d2                	test   edx,edx
c0026edd:	0f 95 c2             	setne  dl
c0026ee0:	0f b6 d2             	movzx  edx,dl
c0026ee3:	09 d7                	or     edi,edx
c0026ee5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ee8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eeb:	01 fa                	add    edx,edi
c0026eed:	11 c6                	adc    esi,eax
c0026eef:	89 f0                	mov    eax,esi
c0026ef1:	eb 77                	jmp    c0026f6a <__adddf3+0x297>
c0026ef3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ef6:	46                   	inc    esi
c0026ef7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026efa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026f00:	75 41                	jne    c0026f43 <__adddf3+0x270>
c0026f02:	89 d3                	mov    ebx,edx
c0026f04:	09 c3                	or     ebx,eax
c0026f06:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f0d:	75 27                	jne    c0026f36 <__adddf3+0x263>
c0026f0f:	85 db                	test   ebx,ebx
c0026f11:	0f 84 fb 03 00 00    	je     c0027312 <__adddf3+0x63f>
c0026f17:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f1a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026f1d:	0f 84 f5 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026f23:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f26:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f29:	85 c0                	test   eax,eax
c0026f2b:	0f 89 91 03 00 00    	jns    c00272c2 <__adddf3+0x5ef>
c0026f31:	e9 85 03 00 00       	jmp    c00272bb <__adddf3+0x5e8>
c0026f36:	85 db                	test   ebx,ebx
c0026f38:	0f 85 da 03 00 00    	jne    c0027318 <__adddf3+0x645>
c0026f3e:	e9 cf 03 00 00       	jmp    c0027312 <__adddf3+0x63f>
c0026f43:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f46:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f4c:	f7 d1                	not    ecx
c0026f4e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f54:	0f 84 70 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f5a:	d1 ea                	shr    edx,1
c0026f5c:	89 c1                	mov    ecx,eax
c0026f5e:	c1 e1 1f             	shl    ecx,0x1f
c0026f61:	09 ca                	or     edx,ecx
c0026f63:	d1 e8                	shr    eax,1
c0026f65:	e9 6f 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026f6a:	85 c0                	test   eax,eax
c0026f6c:	0f 89 67 03 00 00    	jns    c00272d9 <__adddf3+0x606>
c0026f72:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026f75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f78:	f7 d1                	not    ecx
c0026f7a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f80:	0f 84 44 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f86:	89 d1                	mov    ecx,edx
c0026f88:	d1 e9                	shr    ecx,1
c0026f8a:	83 e2 01             	and    edx,0x1
c0026f8d:	09 ca                	or     edx,ecx
c0026f8f:	89 c1                	mov    ecx,eax
c0026f91:	c1 e1 1f             	shl    ecx,0x1f
c0026f94:	09 ca                	or     edx,ecx
c0026f96:	d1 e8                	shr    eax,1
c0026f98:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026f9d:	e9 37 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026fa2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026fa5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026fab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026fae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026fb1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fb7:	29 de                	sub    esi,ebx
c0026fb9:	85 f6                	test   esi,esi
c0026fbb:	0f 8e bd 00 00 00    	jle    c002707e <__adddf3+0x3ab>
c0026fc1:	85 db                	test   ebx,ebx
c0026fc3:	75 17                	jne    c0026fdc <__adddf3+0x309>
c0026fc5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fc8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026fcb:	0f 84 47 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fd1:	4e                   	dec    esi
c0026fd2:	75 20                	jne    c0026ff4 <__adddf3+0x321>
c0026fd4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026fd7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026fda:	eb 5b                	jmp    c0027037 <__adddf3+0x364>
c0026fdc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026fdf:	f7 d3                	not    ebx
c0026fe1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fe7:	0f 84 2b 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026ff4:	83 fe 1f             	cmp    esi,0x1f
c0026ff7:	7e 49                	jle    c0027042 <__adddf3+0x36f>
c0026ff9:	83 fe 3f             	cmp    esi,0x3f
c0026ffc:	0f 8f 16 03 00 00    	jg     c0027318 <__adddf3+0x645>
c0027002:	83 e6 1f             	and    esi,0x1f
c0027005:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027008:	89 f1                	mov    ecx,esi
c002700a:	d3 ef                	shr    edi,cl
c002700c:	31 db                	xor    ebx,ebx
c002700e:	85 f6                	test   esi,esi
c0027010:	74 13                	je     c0027025 <__adddf3+0x352>
c0027012:	b9 20 00 00 00       	mov    ecx,0x20
c0027017:	29 f1                	sub    ecx,esi
c0027019:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002701c:	d3 e6                	shl    esi,cl
c002701e:	31 db                	xor    ebx,ebx
c0027020:	85 f6                	test   esi,esi
c0027022:	0f 95 c3             	setne  bl
c0027025:	31 c9                	xor    ecx,ecx
c0027027:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002702b:	0f 95 c1             	setne  cl
c002702e:	09 cf                	or     edi,ecx
c0027030:	09 fb                	or     ebx,edi
c0027032:	29 da                	sub    edx,ebx
c0027034:	83 d8 00             	sbb    eax,0x0
c0027037:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002703a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002703d:	e9 aa 01 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027042:	bf 20 00 00 00       	mov    edi,0x20
c0027047:	29 f7                	sub    edi,esi
c0027049:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002704c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002704f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027052:	d3 e3                	shl    ebx,cl
c0027054:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027057:	89 f1                	mov    ecx,esi
c0027059:	d3 ef                	shr    edi,cl
c002705b:	09 fb                	or     ebx,edi
c002705d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027060:	89 f1                	mov    ecx,esi
c0027062:	d3 ef                	shr    edi,cl
c0027064:	89 fe                	mov    esi,edi
c0027066:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027069:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002706c:	d3 e7                	shl    edi,cl
c002706e:	85 ff                	test   edi,edi
c0027070:	0f 95 c1             	setne  cl
c0027073:	0f b6 c9             	movzx  ecx,cl
c0027076:	09 cb                	or     ebx,ecx
c0027078:	29 da                	sub    edx,ebx
c002707a:	19 f0                	sbb    eax,esi
c002707c:	eb b9                	jmp    c0027037 <__adddf3+0x364>
c002707e:	0f 84 cd 00 00 00    	je     c0027151 <__adddf3+0x47e>
c0027084:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027087:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002708a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002708d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027091:	75 1b                	jne    c00270ae <__adddf3+0x3db>
c0027093:	89 d6                	mov    esi,edx
c0027095:	09 c6                	or     esi,eax
c0027097:	0f 84 7b 02 00 00    	je     c0027318 <__adddf3+0x645>
c002709d:	4b                   	dec    ebx
c002709e:	75 24                	jne    c00270c4 <__adddf3+0x3f1>
c00270a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00270a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270a6:	29 d1                	sub    ecx,edx
c00270a8:	19 c6                	sbb    esi,eax
c00270aa:	89 ca                	mov    edx,ecx
c00270ac:	eb 61                	jmp    c002710f <__adddf3+0x43c>
c00270ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00270b1:	f7 d6                	not    esi
c00270b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270b9:	0f 84 59 02 00 00    	je     c0027318 <__adddf3+0x645>
c00270bf:	0d 00 00 00 80       	or     eax,0x80000000
c00270c4:	83 fb 1f             	cmp    ebx,0x1f
c00270c7:	7e 4d                	jle    c0027116 <__adddf3+0x443>
c00270c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00270cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00270cf:	83 fb 3f             	cmp    ebx,0x3f
c00270d2:	0f 8f 40 02 00 00    	jg     c0027318 <__adddf3+0x645>
c00270d8:	83 e3 1f             	and    ebx,0x1f
c00270db:	89 d9                	mov    ecx,ebx
c00270dd:	89 c7                	mov    edi,eax
c00270df:	d3 ef                	shr    edi,cl
c00270e1:	31 db                	xor    ebx,ebx
c00270e3:	85 c9                	test   ecx,ecx
c00270e5:	74 12                	je     c00270f9 <__adddf3+0x426>
c00270e7:	be 20 00 00 00       	mov    esi,0x20
c00270ec:	29 ce                	sub    esi,ecx
c00270ee:	89 f1                	mov    ecx,esi
c00270f0:	d3 e0                	shl    eax,cl
c00270f2:	31 db                	xor    ebx,ebx
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 95 c3             	setne  bl
c00270f9:	31 c0                	xor    eax,eax
c00270fb:	85 d2                	test   edx,edx
c00270fd:	0f 95 c0             	setne  al
c0027100:	09 c7                	or     edi,eax
c0027102:	09 fb                	or     ebx,edi
c0027104:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027107:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002710a:	29 da                	sub    edx,ebx
c002710c:	83 de 00             	sbb    esi,0x0
c002710f:	89 f0                	mov    eax,esi
c0027111:	e9 d6 00 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027116:	be 20 00 00 00       	mov    esi,0x20
c002711b:	29 de                	sub    esi,ebx
c002711d:	89 c7                	mov    edi,eax
c002711f:	89 f1                	mov    ecx,esi
c0027121:	d3 e7                	shl    edi,cl
c0027123:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027126:	89 d7                	mov    edi,edx
c0027128:	88 d9                	mov    cl,bl
c002712a:	d3 ef                	shr    edi,cl
c002712c:	89 f9                	mov    ecx,edi
c002712e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027131:	09 cf                	or     edi,ecx
c0027133:	88 d9                	mov    cl,bl
c0027135:	d3 e8                	shr    eax,cl
c0027137:	89 f1                	mov    ecx,esi
c0027139:	d3 e2                	shl    edx,cl
c002713b:	85 d2                	test   edx,edx
c002713d:	0f 95 c2             	setne  dl
c0027140:	0f b6 d2             	movzx  edx,dl
c0027143:	09 d7                	or     edi,edx
c0027145:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027148:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002714b:	29 fa                	sub    edx,edi
c002714d:	19 c6                	sbb    esi,eax
c002714f:	eb be                	jmp    c002710f <__adddf3+0x43c>
c0027151:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027154:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027157:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002715d:	75 6a                	jne    c00271c9 <__adddf3+0x4f6>
c002715f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027163:	75 58                	jne    c00271bd <__adddf3+0x4ea>
c0027165:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027168:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002716b:	89 d6                	mov    esi,edx
c002716d:	09 c6                	or     esi,eax
c002716f:	75 17                	jne    c0027188 <__adddf3+0x4b5>
c0027171:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027174:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027177:	85 db                	test   ebx,ebx
c0027179:	0f 85 99 01 00 00    	jne    c0027318 <__adddf3+0x645>
c002717f:	31 ff                	xor    edi,edi
c0027181:	31 c9                	xor    ecx,ecx
c0027183:	e9 90 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c0027188:	85 db                	test   ebx,ebx
c002718a:	0f 84 88 01 00 00    	je     c0027318 <__adddf3+0x645>
c0027190:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027193:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027196:	85 c0                	test   eax,eax
c0027198:	79 10                	jns    c00271aa <__adddf3+0x4d7>
c002719a:	31 c9                	xor    ecx,ecx
c002719c:	f7 da                	neg    edx
c002719e:	0f 95 c1             	setne  cl
c00271a1:	01 c8                	add    eax,ecx
c00271a3:	f7 d8                	neg    eax
c00271a5:	e9 2f 01 00 00       	jmp    c00272d9 <__adddf3+0x606>
c00271aa:	31 ff                	xor    edi,edi
c00271ac:	31 c9                	xor    ecx,ecx
c00271ae:	89 c3                	mov    ebx,eax
c00271b0:	09 d3                	or     ebx,edx
c00271b2:	0f 84 60 01 00 00    	je     c0027318 <__adddf3+0x645>
c00271b8:	e9 05 01 00 00       	jmp    c00272c2 <__adddf3+0x5ef>
c00271bd:	31 ff                	xor    edi,edi
c00271bf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00271c4:	e9 4f 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c00271c9:	89 c1                	mov    ecx,eax
c00271cb:	89 d0                	mov    eax,edx
c00271cd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00271d0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00271d3:	89 ca                	mov    edx,ecx
c00271d5:	85 c9                	test   ecx,ecx
c00271d7:	79 2c                	jns    c0027205 <__adddf3+0x532>
c00271d9:	31 c9                	xor    ecx,ecx
c00271db:	f7 d8                	neg    eax
c00271dd:	0f 95 c1             	setne  cl
c00271e0:	01 ca                	add    edx,ecx
c00271e2:	f7 da                	neg    edx
c00271e4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00271e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00271ea:	eb 19                	jmp    c0027205 <__adddf3+0x532>
c00271ec:	85 c0                	test   eax,eax
c00271ee:	0f 89 e5 00 00 00    	jns    c00272d9 <__adddf3+0x606>
c00271f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f9:	89 c1                	mov    ecx,eax
c00271fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00271fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027201:	89 d0                	mov    eax,edx
c0027203:	89 ca                	mov    edx,ecx
c0027205:	85 d2                	test   edx,edx
c0027207:	74 59                	je     c0027262 <__adddf3+0x58f>
c0027209:	0f bd da             	bsr    ebx,edx
c002720c:	83 f3 1f             	xor    ebx,0x1f
c002720f:	88 d9                	mov    cl,bl
c0027211:	d3 e2                	shl    edx,cl
c0027213:	bf 20 00 00 00       	mov    edi,0x20
c0027218:	89 f9                	mov    ecx,edi
c002721a:	29 d9                	sub    ecx,ebx
c002721c:	89 c6                	mov    esi,eax
c002721e:	d3 ee                	shr    esi,cl
c0027220:	09 d6                	or     esi,edx
c0027222:	88 d9                	mov    cl,bl
c0027224:	d3 e0                	shl    eax,cl
c0027226:	89 c2                	mov    edx,eax
c0027228:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002722b:	25 ff 07 00 00       	and    eax,0x7ff
c0027230:	39 d8                	cmp    eax,ebx
c0027232:	7f 22                	jg     c0027256 <__adddf3+0x583>
c0027234:	29 c3                	sub    ebx,eax
c0027236:	43                   	inc    ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 ea                	shr    edx,cl
c002723b:	29 df                	sub    edi,ebx
c002723d:	89 f9                	mov    ecx,edi
c002723f:	89 f0                	mov    eax,esi
c0027241:	d3 e0                	shl    eax,cl
c0027243:	09 c2                	or     edx,eax
c0027245:	89 f0                	mov    eax,esi
c0027247:	88 d9                	mov    cl,bl
c0027249:	d3 e8                	shr    eax,cl
c002724b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002724e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027254:	eb 6f                	jmp    c00272c5 <__adddf3+0x5f2>
c0027256:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027259:	29 d8                	sub    eax,ebx
c002725b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002725e:	89 f0                	mov    eax,esi
c0027260:	eb 59                	jmp    c00272bb <__adddf3+0x5e8>
c0027262:	85 c0                	test   eax,eax
c0027264:	74 6a                	je     c00272d0 <__adddf3+0x5fd>
c0027266:	0f bd c8             	bsr    ecx,eax
c0027269:	83 f1 1f             	xor    ecx,0x1f
c002726c:	d3 e0                	shl    eax,cl
c002726e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027271:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027277:	83 c1 20             	add    ecx,0x20
c002727a:	39 cb                	cmp    ebx,ecx
c002727c:	7f 35                	jg     c00272b3 <__adddf3+0x5e0>
c002727e:	29 d9                	sub    ecx,ebx
c0027280:	8d 71 01             	lea    esi,[ecx+0x1]
c0027283:	83 fe 1f             	cmp    esi,0x1f
c0027286:	7e 09                	jle    c0027291 <__adddf3+0x5be>
c0027288:	83 e9 1f             	sub    ecx,0x1f
c002728b:	d3 e8                	shr    eax,cl
c002728d:	89 c3                	mov    ebx,eax
c002728f:	eb 11                	jmp    c00272a2 <__adddf3+0x5cf>
c0027291:	b9 20 00 00 00       	mov    ecx,0x20
c0027296:	29 f1                	sub    ecx,esi
c0027298:	89 c3                	mov    ebx,eax
c002729a:	d3 e3                	shl    ebx,cl
c002729c:	89 f1                	mov    ecx,esi
c002729e:	d3 e8                	shr    eax,cl
c00272a0:	89 c2                	mov    edx,eax
c00272a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00272aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00272ad:	89 d0                	mov    eax,edx
c00272af:	89 da                	mov    edx,ebx
c00272b1:	eb 26                	jmp    c00272d9 <__adddf3+0x606>
c00272b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272b6:	29 cf                	sub    edi,ecx
c00272b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c0:	eb 17                	jmp    c00272d9 <__adddf3+0x606>
c00272c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272c8:	eb 0f                	jmp    c00272d9 <__adddf3+0x606>
c00272ca:	31 d2                	xor    edx,edx
c00272cc:	31 c0                	xor    eax,eax
c00272ce:	eb 09                	jmp    c00272d9 <__adddf3+0x606>
c00272d0:	89 c2                	mov    edx,eax
c00272d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00272d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00272dc:	c1 e1 14             	shl    ecx,0x14
c00272df:	89 c3                	mov    ebx,eax
c00272e1:	c1 eb 0b             	shr    ebx,0xb
c00272e4:	09 d9                	or     ecx,ebx
c00272e6:	89 d3                	mov    ebx,edx
c00272e8:	c1 eb 0b             	shr    ebx,0xb
c00272eb:	c1 e0 15             	shl    eax,0x15
c00272ee:	09 d8                	or     eax,ebx
c00272f0:	89 c7                	mov    edi,eax
c00272f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00272f8:	0f 95 c0             	setne  al
c00272fb:	89 c6                	mov    esi,eax
c00272fd:	09 f3                	or     ebx,esi
c00272ff:	83 e3 01             	and    ebx,0x1
c0027302:	c1 ea 0a             	shr    edx,0xa
c0027305:	21 da                	and    edx,ebx
c0027307:	89 f8                	mov    eax,edi
c0027309:	01 d0                	add    eax,edx
c002730b:	83 d1 00             	adc    ecx,0x0
c002730e:	89 c7                	mov    edi,eax
c0027310:	eb 06                	jmp    c0027318 <__adddf3+0x645>
c0027312:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027315:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027318:	89 f8                	mov    eax,edi
c002731a:	89 ca                	mov    edx,ecx
c002731c:	83 c4 24             	add    esp,0x24
c002731f:	5b                   	pop    ebx
c0027320:	5e                   	pop    esi
c0027321:	5f                   	pop    edi
c0027322:	5d                   	pop    ebp
c0027323:	c3                   	ret    

c0027324 <__subdf3>:
c0027324:	55                   	push   ebp
c0027325:	89 e5                	mov    ebp,esp
c0027327:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002732a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002732d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027333:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027336:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027339:	5d                   	pop    ebp
c002733a:	e9 94 f9 ff ff       	jmp    c0026cd3 <__adddf3>

c002733f <__negdf2>:
c002733f:	55                   	push   ebp
c0027340:	89 e5                	mov    ebp,esp
c0027342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027345:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027348:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002734e:	5d                   	pop    ebp
c002734f:	c3                   	ret    

c0027350 <__muldf3>:
c0027350:	55                   	push   ebp
c0027351:	89 e5                	mov    ebp,esp
c0027353:	57                   	push   edi
c0027354:	56                   	push   esi
c0027355:	53                   	push   ebx
c0027356:	83 ec 24             	sub    esp,0x24
c0027359:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002735c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002735f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027365:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027368:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002736b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002736e:	89 c8                	mov    eax,ecx
c0027370:	c1 f8 14             	sar    eax,0x14
c0027373:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027376:	89 f8                	mov    eax,edi
c0027378:	89 fb                	mov    ebx,edi
c002737a:	c1 e3 0b             	shl    ebx,0xb
c002737d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027380:	c1 e1 0b             	shl    ecx,0xb
c0027383:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027389:	c1 e8 15             	shr    eax,0x15
c002738c:	09 c1                	or     ecx,eax
c002738e:	89 d6                	mov    esi,edx
c0027390:	89 d0                	mov    eax,edx
c0027392:	c1 f8 14             	sar    eax,0x14
c0027395:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027398:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002739b:	89 c3                	mov    ebx,eax
c002739d:	c1 e3 0b             	shl    ebx,0xb
c00273a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00273a3:	c1 e6 0b             	shl    esi,0xb
c00273a6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00273ac:	c1 e8 15             	shr    eax,0x15
c00273af:	09 c6                	or     esi,eax
c00273b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273b4:	25 ff 07 00 00       	and    eax,0x7ff
c00273b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00273bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273bf:	25 ff 07 00 00       	and    eax,0x7ff
c00273c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00273c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00273ca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00273cd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00273d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273d7:	40                   	inc    eax
c00273d8:	a9 fe 07 00 00       	test   eax,0x7fe
c00273dd:	0f 85 8d 00 00 00    	jne    c0027470 <__muldf3+0x120>
c00273e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273e6:	09 c8                	or     eax,ecx
c00273e8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00273ec:	74 44                	je     c0027432 <__muldf3+0xe2>
c00273ee:	85 c0                	test   eax,eax
c00273f0:	0f 85 31 02 00 00    	jne    c0027627 <__muldf3+0x2d7>
c00273f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273f9:	40                   	inc    eax
c00273fa:	a9 fe 07 00 00       	test   eax,0x7fe
c00273ff:	75 13                	jne    c0027414 <__muldf3+0xc4>
c0027401:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027404:	09 f1                	or     ecx,esi
c0027406:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002740a:	74 22                	je     c002742e <__muldf3+0xde>
c002740c:	85 c9                	test   ecx,ecx
c002740e:	0f 85 0d 02 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027414:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027418:	0f 89 09 02 00 00    	jns    c0027627 <__muldf3+0x2d7>
c002741e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027421:	05 00 00 00 80       	add    eax,0x80000000
c0027426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027429:	e9 f9 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c002742e:	85 c9                	test   ecx,ecx
c0027430:	eb 2e                	jmp    c0027460 <__muldf3+0x110>
c0027432:	85 c0                	test   eax,eax
c0027434:	74 20                	je     c0027456 <__muldf3+0x106>
c0027436:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027439:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002743c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002743f:	c1 ef 1f             	shr    edi,0x1f
c0027442:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027445:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027448:	8d 43 ff             	lea    eax,[ebx-0x1]
c002744b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002744e:	09 f9                	or     ecx,edi
c0027450:	78 1e                	js     c0027470 <__muldf3+0x120>
c0027452:	89 c3                	mov    ebx,eax
c0027454:	eb e0                	jmp    c0027436 <__muldf3+0xe6>
c0027456:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027459:	f7 d0                	not    eax
c002745b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027460:	75 b2                	jne    c0027414 <__muldf3+0xc4>
c0027462:	31 ff                	xor    edi,edi
c0027464:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002746b:	e9 b7 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c0027470:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027473:	40                   	inc    eax
c0027474:	a9 fe 07 00 00       	test   eax,0x7fe
c0027479:	75 57                	jne    c00274d2 <__muldf3+0x182>
c002747b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002747e:	09 f0                	or     eax,esi
c0027480:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027484:	74 23                	je     c00274a9 <__muldf3+0x159>
c0027486:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002748a:	0f 89 91 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c0027490:	85 c0                	test   eax,eax
c0027492:	0f 85 89 01 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027498:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002749b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00274a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274a4:	e9 7e 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c00274a9:	85 c0                	test   eax,eax
c00274ab:	75 0c                	jne    c00274b9 <__muldf3+0x169>
c00274ad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00274b1:	0f 89 6a 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c00274b7:	eb df                	jmp    c0027498 <__muldf3+0x148>
c00274b9:	01 f6                	add    esi,esi
c00274bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274be:	c1 ea 1f             	shr    edx,0x1f
c00274c1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274c4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00274c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00274ca:	09 d6                	or     esi,edx
c00274cc:	78 04                	js     c00274d2 <__muldf3+0x182>
c00274ce:	89 c3                	mov    ebx,eax
c00274d0:	eb e7                	jmp    c00274b9 <__muldf3+0x169>
c00274d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00274d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00274de:	89 c8                	mov    eax,ecx
c00274e0:	f7 e6                	mul    esi
c00274e2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00274e5:	89 c7                	mov    edi,eax
c00274e7:	89 c8                	mov    eax,ecx
c00274e9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00274ec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00274ef:	89 c1                	mov    ecx,eax
c00274f1:	89 f0                	mov    eax,esi
c00274f3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00274f6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00274f9:	89 c6                	mov    esi,eax
c00274fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274fe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027501:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027504:	31 c0                	xor    eax,eax
c0027506:	01 f1                	add    ecx,esi
c0027508:	0f 92 c0             	setb   al
c002750b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002750e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027511:	83 d6 00             	adc    esi,0x0
c0027514:	01 c7                	add    edi,eax
c0027516:	83 d6 00             	adc    esi,0x0
c0027519:	01 ca                	add    edx,ecx
c002751b:	0f 92 c1             	setb   cl
c002751e:	0f b6 c9             	movzx  ecx,cl
c0027521:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027524:	83 d6 00             	adc    esi,0x0
c0027527:	01 cf                	add    edi,ecx
c0027529:	83 d6 00             	adc    esi,0x0
c002752c:	31 c9                	xor    ecx,ecx
c002752e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027531:	0f 95 c1             	setne  cl
c0027534:	09 cf                	or     edi,ecx
c0027536:	85 f6                	test   esi,esi
c0027538:	78 0c                	js     c0027546 <__muldf3+0x1f6>
c002753a:	01 f6                	add    esi,esi
c002753c:	89 f8                	mov    eax,edi
c002753e:	c1 e8 1f             	shr    eax,0x1f
c0027541:	09 c6                	or     esi,eax
c0027543:	01 ff                	add    edi,edi
c0027545:	4b                   	dec    ebx
c0027546:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002754c:	0f 8f 85 00 00 00    	jg     c00275d7 <__muldf3+0x287>
c0027552:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027558:	85 db                	test   ebx,ebx
c002755a:	0f 8f 84 00 00 00    	jg     c00275e4 <__muldf3+0x294>
c0027560:	83 fb cc             	cmp    ebx,0xffffffcc
c0027563:	7c 79                	jl     c00275de <__muldf3+0x28e>
c0027565:	ba 01 00 00 00       	mov    edx,0x1
c002756a:	29 da                	sub    edx,ebx
c002756c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027572:	83 fa 1f             	cmp    edx,0x1f
c0027575:	7e 30                	jle    c00275a7 <__muldf3+0x257>
c0027577:	83 fa 20             	cmp    edx,0x20
c002757a:	75 0b                	jne    c0027587 <__muldf3+0x237>
c002757c:	31 c0                	xor    eax,eax
c002757e:	85 ff                	test   edi,edi
c0027580:	0f 95 c0             	setne  al
c0027583:	89 c7                	mov    edi,eax
c0027585:	eb 1a                	jmp    c00275a1 <__muldf3+0x251>
c0027587:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002758a:	89 f0                	mov    eax,esi
c002758c:	d3 e0                	shl    eax,cl
c002758e:	09 f8                	or     eax,edi
c0027590:	0f 95 c0             	setne  al
c0027593:	0f b6 c0             	movzx  eax,al
c0027596:	89 c7                	mov    edi,eax
c0027598:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002759d:	29 d9                	sub    ecx,ebx
c002759f:	d3 ee                	shr    esi,cl
c00275a1:	09 f7                	or     edi,esi
c00275a3:	31 db                	xor    ebx,ebx
c00275a5:	eb 3b                	jmp    c00275e2 <__muldf3+0x292>
c00275a7:	83 c3 1f             	add    ebx,0x1f
c00275aa:	89 f0                	mov    eax,esi
c00275ac:	88 d9                	mov    cl,bl
c00275ae:	d3 e0                	shl    eax,cl
c00275b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275b3:	89 f8                	mov    eax,edi
c00275b5:	88 d1                	mov    cl,dl
c00275b7:	d3 e8                	shr    eax,cl
c00275b9:	89 c1                	mov    ecx,eax
c00275bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275be:	09 c8                	or     eax,ecx
c00275c0:	88 d9                	mov    cl,bl
c00275c2:	d3 e7                	shl    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 ff                	test   edi,edi
c00275c8:	0f 95 c3             	setne  bl
c00275cb:	89 df                	mov    edi,ebx
c00275cd:	09 c7                	or     edi,eax
c00275cf:	88 d1                	mov    cl,dl
c00275d1:	d3 ee                	shr    esi,cl
c00275d3:	31 db                	xor    ebx,ebx
c00275d5:	eb 0d                	jmp    c00275e4 <__muldf3+0x294>
c00275d7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00275dc:	eb 02                	jmp    c00275e0 <__muldf3+0x290>
c00275de:	31 db                	xor    ebx,ebx
c00275e0:	31 ff                	xor    edi,edi
c00275e2:	31 f6                	xor    esi,esi
c00275e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00275e7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00275ea:	25 00 f8 ff ff       	and    eax,0xfffff800
c00275ef:	09 c3                	or     ebx,eax
c00275f1:	c1 e3 14             	shl    ebx,0x14
c00275f4:	89 f0                	mov    eax,esi
c00275f6:	c1 e8 0b             	shr    eax,0xb
c00275f9:	09 c3                	or     ebx,eax
c00275fb:	89 f8                	mov    eax,edi
c00275fd:	c1 e8 0b             	shr    eax,0xb
c0027600:	c1 e6 15             	shl    esi,0x15
c0027603:	09 c6                	or     esi,eax
c0027605:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002760b:	0f 95 c1             	setne  cl
c002760e:	09 c8                	or     eax,ecx
c0027610:	83 e0 01             	and    eax,0x1
c0027613:	c1 ef 0a             	shr    edi,0xa
c0027616:	21 c7                	and    edi,eax
c0027618:	01 f7                	add    edi,esi
c002761a:	83 d3 00             	adc    ebx,0x0
c002761d:	89 da                	mov    edx,ebx
c002761f:	eb 03                	jmp    c0027624 <__muldf3+0x2d4>
c0027621:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027624:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027627:	89 f8                	mov    eax,edi
c0027629:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002762c:	83 c4 24             	add    esp,0x24
c002762f:	5b                   	pop    ebx
c0027630:	5e                   	pop    esi
c0027631:	5f                   	pop    edi
c0027632:	5d                   	pop    ebp
c0027633:	c3                   	ret    

c0027634 <__divdf3>:
c0027634:	55                   	push   ebp
c0027635:	89 e5                	mov    ebp,esp
c0027637:	57                   	push   edi
c0027638:	56                   	push   esi
c0027639:	53                   	push   ebx
c002763a:	83 ec 2c             	sub    esp,0x2c
c002763d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027640:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027643:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027646:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027649:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002764c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002764f:	89 ce                	mov    esi,ecx
c0027651:	89 c8                	mov    eax,ecx
c0027653:	c1 f8 14             	sar    eax,0x14
c0027656:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027659:	89 f8                	mov    eax,edi
c002765b:	89 fb                	mov    ebx,edi
c002765d:	c1 e3 0b             	shl    ebx,0xb
c0027660:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027663:	c1 e6 0b             	shl    esi,0xb
c0027666:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002766c:	c1 e8 15             	shr    eax,0x15
c002766f:	09 c6                	or     esi,eax
c0027671:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027674:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027677:	89 c2                	mov    edx,eax
c0027679:	c1 fa 14             	sar    edx,0x14
c002767c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002767f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027682:	89 de                	mov    esi,ebx
c0027684:	c1 e6 0b             	shl    esi,0xb
c0027687:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002768a:	c1 e0 0b             	shl    eax,0xb
c002768d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027692:	c1 eb 15             	shr    ebx,0x15
c0027695:	09 d8                	or     eax,ebx
c0027697:	89 c2                	mov    edx,eax
c0027699:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002769c:	25 ff 07 00 00       	and    eax,0x7ff
c00276a1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00276a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276a7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276ad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00276b0:	29 d8                	sub    eax,ebx
c00276b2:	05 ff 03 00 00       	add    eax,0x3ff
c00276b7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00276ba:	46                   	inc    esi
c00276bb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276c1:	0f 85 a5 00 00 00    	jne    c002776c <__divdf3+0x138>
c00276c7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276ca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00276cd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00276d1:	74 2a                	je     c00276fd <__divdf3+0xc9>
c00276d3:	85 f6                	test   esi,esi
c00276d5:	0f 85 cc 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276de:	40                   	inc    eax
c00276df:	a9 fe 07 00 00       	test   eax,0x7fe
c00276e4:	75 26                	jne    c002770c <__divdf3+0xd8>
c00276e6:	85 db                	test   ebx,ebx
c00276e8:	74 22                	je     c002770c <__divdf3+0xd8>
c00276ea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00276ed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00276f0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00276f3:	09 d0                	or     eax,edx
c00276f5:	0f 85 ac 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276fb:	eb 63                	jmp    c0027760 <__divdf3+0x12c>
c00276fd:	85 f6                	test   esi,esi
c00276ff:	75 22                	jne    c0027723 <__divdf3+0xef>
c0027701:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027704:	40                   	inc    eax
c0027705:	a9 fe 07 00 00       	test   eax,0x7fe
c002770a:	74 36                	je     c0027742 <__divdf3+0x10e>
c002770c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027710:	0f 89 91 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c0027716:	89 f8                	mov    eax,edi
c0027718:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002771e:	e9 80 02 00 00       	jmp    c00279a3 <__divdf3+0x36f>
c0027723:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027726:	01 f6                	add    esi,esi
c0027728:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002772b:	c1 ef 1f             	shr    edi,0x1f
c002772e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027731:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027734:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027737:	09 f7                	or     edi,esi
c0027739:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002773c:	78 2e                	js     c002776c <__divdf3+0x138>
c002773e:	89 c8                	mov    eax,ecx
c0027740:	eb e1                	jmp    c0027723 <__divdf3+0xef>
c0027742:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027745:	09 d0                	or     eax,edx
c0027747:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002774b:	74 0f                	je     c002775c <__divdf3+0x128>
c002774d:	85 c0                	test   eax,eax
c002774f:	74 bb                	je     c002770c <__divdf3+0xd8>
c0027751:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027754:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027757:	e9 4b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002775c:	85 c0                	test   eax,eax
c002775e:	75 ac                	jne    c002770c <__divdf3+0xd8>
c0027760:	31 ff                	xor    edi,edi
c0027762:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027767:	e9 3b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002776c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027772:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027778:	75 6b                	jne    c00277e5 <__divdf3+0x1b1>
c002777a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002777d:	09 d6                	or     esi,edx
c002777f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027783:	74 28                	je     c00277ad <__divdf3+0x179>
c0027785:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027788:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002778b:	85 f6                	test   esi,esi
c002778d:	0f 85 14 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c0027793:	31 ff                	xor    edi,edi
c0027795:	31 c9                	xor    ecx,ecx
c0027797:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002779a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002779d:	0f 89 04 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c00277a3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00277a8:	e9 fa 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277ad:	85 f6                	test   esi,esi
c00277af:	75 1b                	jne    c00277cc <__divdf3+0x198>
c00277b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277b4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00277b7:	25 00 00 00 80       	and    eax,0x80000000
c00277bc:	31 c9                	xor    ecx,ecx
c00277be:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00277c3:	89 cf                	mov    edi,ecx
c00277c5:	89 c1                	mov    ecx,eax
c00277c7:	e9 db 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277cc:	01 d2                	add    edx,edx
c00277ce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277d1:	c1 eb 1f             	shr    ebx,0x1f
c00277d4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00277da:	8d 48 01             	lea    ecx,[eax+0x1]
c00277dd:	09 da                	or     edx,ebx
c00277df:	78 04                	js     c00277e5 <__divdf3+0x1b1>
c00277e1:	89 c8                	mov    eax,ecx
c00277e3:	eb e7                	jmp    c00277cc <__divdf3+0x198>
c00277e5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00277ee:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277f4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00277f7:	39 d6                	cmp    esi,edx
c00277f9:	77 0d                	ja     c0027808 <__divdf3+0x1d4>
c00277fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00277fe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027801:	72 1b                	jb     c002781e <__divdf3+0x1ea>
c0027803:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027806:	75 16                	jne    c002781e <__divdf3+0x1ea>
c0027808:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002780b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002780e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027811:	83 de 00             	sbb    esi,0x0
c0027814:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027817:	ba 01 00 00 00       	mov    edx,0x1
c002781c:	eb 02                	jmp    c0027820 <__divdf3+0x1ec>
c002781e:	31 d2                	xor    edx,edx
c0027820:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027827:	31 ff                	xor    edi,edi
c0027829:	01 ff                	add    edi,edi
c002782b:	89 d1                	mov    ecx,edx
c002782d:	c1 e9 1f             	shr    ecx,0x1f
c0027830:	09 cf                	or     edi,ecx
c0027832:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027835:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027838:	89 da                	mov    edx,ebx
c002783a:	89 f3                	mov    ebx,esi
c002783c:	8d 34 36             	lea    esi,[esi+esi*1]
c002783f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027842:	c1 e9 1f             	shr    ecx,0x1f
c0027845:	09 ce                	or     esi,ecx
c0027847:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002784a:	01 c9                	add    ecx,ecx
c002784c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002784f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027852:	85 db                	test   ebx,ebx
c0027854:	78 29                	js     c002787f <__divdf3+0x24b>
c0027856:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027859:	72 07                	jb     c0027862 <__divdf3+0x22e>
c002785b:	75 3c                	jne    c0027899 <__divdf3+0x265>
c002785d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027860:	77 37                	ja     c0027899 <__divdf3+0x265>
c0027862:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027865:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027868:	31 d2                	xor    edx,edx
c002786a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002786d:	0f 97 c2             	seta   dl
c0027870:	29 d6                	sub    esi,edx
c0027872:	89 d9                	mov    ecx,ebx
c0027874:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027877:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002787a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002787d:	eb 17                	jmp    c0027896 <__divdf3+0x262>
c002787f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027882:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027885:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027888:	0f 97 c1             	seta   cl
c002788b:	0f b6 c9             	movzx  ecx,cl
c002788e:	29 ce                	sub    esi,ecx
c0027890:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027893:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027896:	83 ca 01             	or     edx,0x1
c0027899:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002789c:	75 8b                	jne    c0027829 <__divdf3+0x1f5>
c002789e:	c1 e7 09             	shl    edi,0x9
c00278a1:	89 d1                	mov    ecx,edx
c00278a3:	c1 e9 17             	shr    ecx,0x17
c00278a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278a9:	09 f3                	or     ebx,esi
c00278ab:	0f 95 c3             	setne  bl
c00278ae:	0f b6 db             	movzx  ebx,bl
c00278b1:	c1 e2 09             	shl    edx,0x9
c00278b4:	09 d3                	or     ebx,edx
c00278b6:	89 ca                	mov    edx,ecx
c00278b8:	09 fa                	or     edx,edi
c00278ba:	78 0c                	js     c00278c8 <__divdf3+0x294>
c00278bc:	01 d2                	add    edx,edx
c00278be:	89 d9                	mov    ecx,ebx
c00278c0:	c1 e9 1f             	shr    ecx,0x1f
c00278c3:	09 ca                	or     edx,ecx
c00278c5:	01 db                	add    ebx,ebx
c00278c7:	48                   	dec    eax
c00278c8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00278cd:	0f 8f 83 00 00 00    	jg     c0027956 <__divdf3+0x322>
c00278d3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278d9:	85 c0                	test   eax,eax
c00278db:	0f 8f 82 00 00 00    	jg     c0027963 <__divdf3+0x32f>
c00278e1:	83 f8 cc             	cmp    eax,0xffffffcc
c00278e4:	7c 77                	jl     c002795d <__divdf3+0x329>
c00278e6:	be 01 00 00 00       	mov    esi,0x1
c00278eb:	29 c6                	sub    esi,eax
c00278ed:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278f3:	83 fe 1f             	cmp    esi,0x1f
c00278f6:	7e 2f                	jle    c0027927 <__divdf3+0x2f3>
c00278f8:	83 fe 20             	cmp    esi,0x20
c00278fb:	75 0a                	jne    c0027907 <__divdf3+0x2d3>
c00278fd:	85 db                	test   ebx,ebx
c00278ff:	0f 95 c3             	setne  bl
c0027902:	0f b6 db             	movzx  ebx,bl
c0027905:	eb 1a                	jmp    c0027921 <__divdf3+0x2ed>
c0027907:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002790a:	89 d7                	mov    edi,edx
c002790c:	d3 e7                	shl    edi,cl
c002790e:	89 f9                	mov    ecx,edi
c0027910:	09 d9                	or     ecx,ebx
c0027912:	0f 95 c3             	setne  bl
c0027915:	0f b6 db             	movzx  ebx,bl
c0027918:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002791d:	29 c1                	sub    ecx,eax
c002791f:	d3 ea                	shr    edx,cl
c0027921:	09 d3                	or     ebx,edx
c0027923:	31 c0                	xor    eax,eax
c0027925:	eb 3a                	jmp    c0027961 <__divdf3+0x32d>
c0027927:	83 c0 1f             	add    eax,0x1f
c002792a:	89 d7                	mov    edi,edx
c002792c:	88 c1                	mov    cl,al
c002792e:	d3 e7                	shl    edi,cl
c0027930:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027933:	89 df                	mov    edi,ebx
c0027935:	89 f1                	mov    ecx,esi
c0027937:	d3 ef                	shr    edi,cl
c0027939:	89 f9                	mov    ecx,edi
c002793b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002793e:	09 cf                	or     edi,ecx
c0027940:	88 c1                	mov    cl,al
c0027942:	d3 e3                	shl    ebx,cl
c0027944:	85 db                	test   ebx,ebx
c0027946:	0f 95 c3             	setne  bl
c0027949:	0f b6 db             	movzx  ebx,bl
c002794c:	09 fb                	or     ebx,edi
c002794e:	89 f1                	mov    ecx,esi
c0027950:	d3 ea                	shr    edx,cl
c0027952:	31 c0                	xor    eax,eax
c0027954:	eb 0d                	jmp    c0027963 <__divdf3+0x32f>
c0027956:	b8 ff 07 00 00       	mov    eax,0x7ff
c002795b:	eb 02                	jmp    c002795f <__divdf3+0x32b>
c002795d:	31 c0                	xor    eax,eax
c002795f:	31 db                	xor    ebx,ebx
c0027961:	31 d2                	xor    edx,edx
c0027963:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027966:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027969:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002796f:	09 c8                	or     eax,ecx
c0027971:	c1 e0 14             	shl    eax,0x14
c0027974:	89 d1                	mov    ecx,edx
c0027976:	c1 e9 0b             	shr    ecx,0xb
c0027979:	09 c8                	or     eax,ecx
c002797b:	89 c6                	mov    esi,eax
c002797d:	89 d9                	mov    ecx,ebx
c002797f:	c1 e9 0b             	shr    ecx,0xb
c0027982:	c1 e2 15             	shl    edx,0x15
c0027985:	09 ca                	or     edx,ecx
c0027987:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002798d:	0f 95 c0             	setne  al
c0027990:	09 c1                	or     ecx,eax
c0027992:	83 e1 01             	and    ecx,0x1
c0027995:	c1 eb 0a             	shr    ebx,0xa
c0027998:	21 cb                	and    ebx,ecx
c002799a:	01 d3                	add    ebx,edx
c002799c:	89 d8                	mov    eax,ebx
c002799e:	83 d6 00             	adc    esi,0x0
c00279a1:	89 f2                	mov    edx,esi
c00279a3:	89 c7                	mov    edi,eax
c00279a5:	89 d1                	mov    ecx,edx
c00279a7:	89 f8                	mov    eax,edi
c00279a9:	89 ca                	mov    edx,ecx
c00279ab:	83 c4 2c             	add    esp,0x2c
c00279ae:	5b                   	pop    ebx
c00279af:	5e                   	pop    esi
c00279b0:	5f                   	pop    edi
c00279b1:	5d                   	pop    ebp
c00279b2:	c3                   	ret    

c00279b3 <__floatsidf>:
c00279b3:	55                   	push   ebp
c00279b4:	89 e5                	mov    ebp,esp
c00279b6:	56                   	push   esi
c00279b7:	53                   	push   ebx
c00279b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279bb:	85 db                	test   ebx,ebx
c00279bd:	7e 15                	jle    c00279d4 <__floatsidf+0x21>
c00279bf:	0f bd cb             	bsr    ecx,ebx
c00279c2:	83 f1 1f             	xor    ecx,0x1f
c00279c5:	d3 e3                	shl    ebx,cl
c00279c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00279d2:	eb 21                	jmp    c00279f5 <__floatsidf+0x42>
c00279d4:	b8 00 00 00 00       	mov    eax,0x0
c00279d9:	ba 00 00 00 00       	mov    edx,0x0
c00279de:	74 2a                	je     c0027a0a <__floatsidf+0x57>
c00279e0:	f7 db                	neg    ebx
c00279e2:	0f bd cb             	bsr    ecx,ebx
c00279e5:	83 f1 1f             	xor    ecx,0x1f
c00279e8:	d3 e3                	shl    ebx,cl
c00279ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00279f5:	29 c8                	sub    eax,ecx
c00279f7:	c1 e0 14             	shl    eax,0x14
c00279fa:	89 c1                	mov    ecx,eax
c00279fc:	89 de                	mov    esi,ebx
c00279fe:	c1 ee 0b             	shr    esi,0xb
c0027a01:	09 f1                	or     ecx,esi
c0027a03:	89 ca                	mov    edx,ecx
c0027a05:	c1 e3 15             	shl    ebx,0x15
c0027a08:	89 d8                	mov    eax,ebx
c0027a0a:	5b                   	pop    ebx
c0027a0b:	5e                   	pop    esi
c0027a0c:	5d                   	pop    ebp
c0027a0d:	c3                   	ret    

c0027a0e <__floatunsidf>:
c0027a0e:	55                   	push   ebp
c0027a0f:	89 e5                	mov    ebp,esp
c0027a11:	56                   	push   esi
c0027a12:	53                   	push   ebx
c0027a13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a16:	85 db                	test   ebx,ebx
c0027a18:	74 2a                	je     c0027a44 <__floatunsidf+0x36>
c0027a1a:	0f bd cb             	bsr    ecx,ebx
c0027a1d:	83 f1 1f             	xor    ecx,0x1f
c0027a20:	d3 e3                	shl    ebx,cl
c0027a22:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027a28:	b8 1e 04 00 00       	mov    eax,0x41e
c0027a2d:	29 c8                	sub    eax,ecx
c0027a2f:	c1 e0 14             	shl    eax,0x14
c0027a32:	89 c1                	mov    ecx,eax
c0027a34:	89 de                	mov    esi,ebx
c0027a36:	c1 ee 0b             	shr    esi,0xb
c0027a39:	09 f1                	or     ecx,esi
c0027a3b:	89 ca                	mov    edx,ecx
c0027a3d:	c1 e3 15             	shl    ebx,0x15
c0027a40:	89 d8                	mov    eax,ebx
c0027a42:	eb 04                	jmp    c0027a48 <__floatunsidf+0x3a>
c0027a44:	31 c0                	xor    eax,eax
c0027a46:	31 d2                	xor    edx,edx
c0027a48:	5b                   	pop    ebx
c0027a49:	5e                   	pop    esi
c0027a4a:	5d                   	pop    ebp
c0027a4b:	c3                   	ret    

c0027a4c <__fixdfsi>:
c0027a4c:	55                   	push   ebp
c0027a4d:	89 e5                	mov    ebp,esp
c0027a4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a52:	89 d1                	mov    ecx,edx
c0027a54:	c1 e1 0b             	shl    ecx,0xb
c0027a57:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a60:	c1 e8 15             	shr    eax,0x15
c0027a63:	09 c1                	or     ecx,eax
c0027a65:	c1 fa 14             	sar    edx,0x14
c0027a68:	78 1f                	js     c0027a89 <__fixdfsi+0x3d>
c0027a6a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027a70:	31 c0                	xor    eax,eax
c0027a72:	83 fa 1e             	cmp    edx,0x1e
c0027a75:	77 40                	ja     c0027ab7 <__fixdfsi+0x6b>
c0027a77:	89 c8                	mov    eax,ecx
c0027a79:	0d 00 00 00 80       	or     eax,0x80000000
c0027a7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a83:	29 d1                	sub    ecx,edx
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	eb 2e                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027a89:	31 c0                	xor    eax,eax
c0027a8b:	81 c2 01 04 00 00    	add    edx,0x401
c0027a91:	78 24                	js     c0027ab7 <__fixdfsi+0x6b>
c0027a93:	83 fa 1e             	cmp    edx,0x1e
c0027a96:	7e 09                	jle    c0027aa1 <__fixdfsi+0x55>
c0027a98:	83 fa 1f             	cmp    edx,0x1f
c0027a9b:	75 18                	jne    c0027ab5 <__fixdfsi+0x69>
c0027a9d:	85 c9                	test   ecx,ecx
c0027a9f:	75 14                	jne    c0027ab5 <__fixdfsi+0x69>
c0027aa1:	89 c8                	mov    eax,ecx
c0027aa3:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aad:	29 d1                	sub    ecx,edx
c0027aaf:	d3 e8                	shr    eax,cl
c0027ab1:	f7 d8                	neg    eax
c0027ab3:	eb 02                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027ab5:	31 c0                	xor    eax,eax
c0027ab7:	5d                   	pop    ebp
c0027ab8:	c3                   	ret    

c0027ab9 <__fixunsdfsi>:
c0027ab9:	55                   	push   ebp
c0027aba:	89 e5                	mov    ebp,esp
c0027abc:	53                   	push   ebx
c0027abd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027ac0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ac3:	89 d3                	mov    ebx,edx
c0027ac5:	c1 fb 14             	sar    ebx,0x14
c0027ac8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027ace:	31 c0                	xor    eax,eax
c0027ad0:	83 fb 1f             	cmp    ebx,0x1f
c0027ad3:	77 1d                	ja     c0027af2 <__fixunsdfsi+0x39>
c0027ad5:	89 d0                	mov    eax,edx
c0027ad7:	c1 e0 0b             	shl    eax,0xb
c0027ada:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027adf:	c1 e9 15             	shr    ecx,0x15
c0027ae2:	09 c8                	or     eax,ecx
c0027ae4:	0d 00 00 00 80       	or     eax,0x80000000
c0027ae9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	d3 e8                	shr    eax,cl
c0027af2:	5b                   	pop    ebx
c0027af3:	5d                   	pop    ebp
c0027af4:	c3                   	ret    

c0027af5 <__cmpdf2>:
c0027af5:	55                   	push   ebp
c0027af6:	89 e5                	mov    ebp,esp
c0027af8:	57                   	push   edi
c0027af9:	56                   	push   esi
c0027afa:	53                   	push   ebx
c0027afb:	83 ec 0c             	sub    esp,0xc
c0027afe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027b01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b04:	89 ca                	mov    edx,ecx
c0027b06:	c1 ea 14             	shr    edx,0x14
c0027b09:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027b0f:	89 cb                	mov    ebx,ecx
c0027b11:	c1 fb 1f             	sar    ebx,0x1f
c0027b14:	31 da                	xor    edx,ebx
c0027b16:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b19:	89 df                	mov    edi,ebx
c0027b1b:	c1 e7 0b             	shl    edi,0xb
c0027b1e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b21:	c1 e1 0b             	shl    ecx,0xb
c0027b24:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b2a:	c1 eb 15             	shr    ebx,0x15
c0027b2d:	09 d9                	or     ecx,ebx
c0027b2f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027b32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b35:	89 ce                	mov    esi,ecx
c0027b37:	c1 ee 14             	shr    esi,0x14
c0027b3a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b40:	89 cb                	mov    ebx,ecx
c0027b42:	c1 fb 1f             	sar    ebx,0x1f
c0027b45:	31 de                	xor    esi,ebx
c0027b47:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027b4a:	89 df                	mov    edi,ebx
c0027b4c:	c1 e7 0b             	shl    edi,0xb
c0027b4f:	c1 e1 0b             	shl    ecx,0xb
c0027b52:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b58:	c1 eb 15             	shr    ebx,0x15
c0027b5b:	09 d9                	or     ecx,ebx
c0027b5d:	89 d3                	mov    ebx,edx
c0027b5f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b65:	43                   	inc    ebx
c0027b66:	83 fb 01             	cmp    ebx,0x1
c0027b69:	77 08                	ja     c0027b73 <__cmpdf2+0x7e>
c0027b6b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b6e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b71:	75 68                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b73:	89 f3                	mov    ebx,esi
c0027b75:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b7b:	43                   	inc    ebx
c0027b7c:	83 fb 01             	cmp    ebx,0x1
c0027b7f:	77 06                	ja     c0027b87 <__cmpdf2+0x92>
c0027b81:	89 fb                	mov    ebx,edi
c0027b83:	09 cb                	or     ebx,ecx
c0027b85:	75 54                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b8a:	09 f8                	or     eax,edi
c0027b8c:	09 c8                	or     eax,ecx
c0027b8e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027b91:	75 12                	jne    c0027ba5 <__cmpdf2+0xb0>
c0027b93:	8d 42 01             	lea    eax,[edx+0x1]
c0027b96:	83 f8 01             	cmp    eax,0x1
c0027b99:	77 0a                	ja     c0027ba5 <__cmpdf2+0xb0>
c0027b9b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fb 01             	cmp    ebx,0x1
c0027ba3:	76 36                	jbe    c0027bdb <__cmpdf2+0xe6>
c0027ba5:	b8 01 00 00 00       	mov    eax,0x1
c0027baa:	39 f2                	cmp    edx,esi
c0027bac:	7f 2d                	jg     c0027bdb <__cmpdf2+0xe6>
c0027bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027bb3:	7c 26                	jl     c0027bdb <__cmpdf2+0xe6>
c0027bb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027bb8:	77 07                	ja     c0027bc1 <__cmpdf2+0xcc>
c0027bba:	72 16                	jb     c0027bd2 <__cmpdf2+0xdd>
c0027bbc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027bbf:	76 0a                	jbe    c0027bcb <__cmpdf2+0xd6>
c0027bc1:	89 d0                	mov    eax,edx
c0027bc3:	c1 f8 1f             	sar    eax,0x1f
c0027bc6:	83 c8 01             	or     eax,0x1
c0027bc9:	eb 10                	jmp    c0027bdb <__cmpdf2+0xe6>
c0027bcb:	b8 00 00 00 00       	mov    eax,0x0
c0027bd0:	73 09                	jae    c0027bdb <__cmpdf2+0xe6>
c0027bd2:	89 d0                	mov    eax,edx
c0027bd4:	c1 f8 1f             	sar    eax,0x1f
c0027bd7:	83 e0 02             	and    eax,0x2
c0027bda:	48                   	dec    eax
c0027bdb:	83 c4 0c             	add    esp,0xc
c0027bde:	5b                   	pop    ebx
c0027bdf:	5e                   	pop    esi
c0027be0:	5f                   	pop    edi
c0027be1:	5d                   	pop    ebp
c0027be2:	c3                   	ret    

c0027be3 <__eqdf2>:
c0027be3:	55                   	push   ebp
c0027be4:	89 e5                	mov    ebp,esp
c0027be6:	50                   	push   eax
c0027be7:	6a 01                	push   0x1
c0027be9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027bef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bf5:	e8 fb fe ff ff       	call   c0027af5 <__cmpdf2>
c0027bfa:	83 c4 18             	add    esp,0x18
c0027bfd:	c9                   	leave  
c0027bfe:	c3                   	ret    

c0027bff <__nedf2>:
c0027bff:	eb e2                	jmp    c0027be3 <__eqdf2>

c0027c01 <__gtdf2>:
c0027c01:	55                   	push   ebp
c0027c02:	89 e5                	mov    ebp,esp
c0027c04:	50                   	push   eax
c0027c05:	6a ff                	push   0xffffffff
c0027c07:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c0a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c13:	e8 dd fe ff ff       	call   c0027af5 <__cmpdf2>
c0027c18:	83 c4 18             	add    esp,0x18
c0027c1b:	c9                   	leave  
c0027c1c:	c3                   	ret    

c0027c1d <__gedf2>:
c0027c1d:	eb e2                	jmp    c0027c01 <__gtdf2>

c0027c1f <__ltdf2>:
c0027c1f:	eb c2                	jmp    c0027be3 <__eqdf2>

c0027c21 <__ledf2>:
c0027c21:	eb c0                	jmp    c0027be3 <__eqdf2>

c0027c23 <__truncdfsf2>:
c0027c23:	55                   	push   ebp
c0027c24:	89 e5                	mov    ebp,esp
c0027c26:	57                   	push   edi
c0027c27:	56                   	push   esi
c0027c28:	53                   	push   ebx
c0027c29:	83 ec 0c             	sub    esp,0xc
c0027c2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027c2f:	89 d1                	mov    ecx,edx
c0027c31:	c1 f9 14             	sar    ecx,0x14
c0027c34:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c37:	89 df                	mov    edi,ebx
c0027c39:	c1 e7 0b             	shl    edi,0xb
c0027c3c:	89 d0                	mov    eax,edx
c0027c3e:	c1 e0 0b             	shl    eax,0xb
c0027c41:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c46:	c1 eb 15             	shr    ebx,0x15
c0027c49:	09 d8                	or     eax,ebx
c0027c4b:	89 cb                	mov    ebx,ecx
c0027c4d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c53:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027c59:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027c5f:	0f 86 9e 00 00 00    	jbe    c0027d03 <__truncdfsf2+0xe0>
c0027c65:	85 db                	test   ebx,ebx
c0027c67:	75 0a                	jne    c0027c73 <__truncdfsf2+0x50>
c0027c69:	c1 fa 17             	sar    edx,0x17
c0027c6c:	30 d2                	xor    dl,dl
c0027c6e:	e9 84 00 00 00       	jmp    c0027cf7 <__truncdfsf2+0xd4>
c0027c73:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027c79:	83 fe 83             	cmp    esi,0xffffff83
c0027c7c:	7d 4b                	jge    c0027cc9 <__truncdfsf2+0xa6>
c0027c7e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027c83:	29 f1                	sub    ecx,esi
c0027c85:	83 f9 1f             	cmp    ecx,0x1f
c0027c88:	7f 6b                	jg     c0027cf5 <__truncdfsf2+0xd2>
c0027c8a:	0d 00 00 00 80       	or     eax,0x80000000
c0027c8f:	89 c3                	mov    ebx,eax
c0027c91:	d3 eb                	shr    ebx,cl
c0027c93:	be 01 00 00 00       	mov    esi,0x1
c0027c98:	d3 e6                	shl    esi,cl
c0027c9a:	4e                   	dec    esi
c0027c9b:	21 f0                	and    eax,esi
c0027c9d:	09 f8                	or     eax,edi
c0027c9f:	0f 95 c0             	setne  al
c0027ca2:	0f b6 c0             	movzx  eax,al
c0027ca5:	09 c3                	or     ebx,eax
c0027ca7:	89 d9                	mov    ecx,ebx
c0027ca9:	c1 e9 08             	shr    ecx,0x8
c0027cac:	f6 c3 7f             	test   bl,0x7f
c0027caf:	0f 95 c0             	setne  al
c0027cb2:	09 c8                	or     eax,ecx
c0027cb4:	83 e0 01             	and    eax,0x1
c0027cb7:	c1 eb 07             	shr    ebx,0x7
c0027cba:	21 c3                	and    ebx,eax
c0027cbc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027cc2:	09 d1                	or     ecx,edx
c0027cc4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027cc7:	eb 76                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027cc9:	83 c6 80             	add    esi,0xffffff80
c0027ccc:	7e 1d                	jle    c0027ceb <__truncdfsf2+0xc8>
c0027cce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027cd4:	75 0b                	jne    c0027ce1 <__truncdfsf2+0xbe>
c0027cd6:	09 f8                	or     eax,edi
c0027cd8:	74 09                	je     c0027ce3 <__truncdfsf2+0xc0>
c0027cda:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027cdf:	eb 02                	jmp    c0027ce3 <__truncdfsf2+0xc0>
c0027ce1:	31 c0                	xor    eax,eax
c0027ce3:	c1 fa 17             	sar    edx,0x17
c0027ce6:	80 ca ff             	or     dl,0xff
c0027ce9:	eb 0e                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027ceb:	c1 fa 1f             	sar    edx,0x1f
c0027cee:	c1 e2 08             	shl    edx,0x8
c0027cf1:	09 ca                	or     edx,ecx
c0027cf3:	eb 04                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027cf5:	31 d2                	xor    edx,edx
c0027cf7:	31 c0                	xor    eax,eax
c0027cf9:	c1 e2 17             	shl    edx,0x17
c0027cfc:	c1 e8 08             	shr    eax,0x8
c0027cff:	09 d0                	or     eax,edx
c0027d01:	eb 3c                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027d03:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027d09:	89 ca                	mov    edx,ecx
c0027d0b:	c1 fa 0b             	sar    edx,0xb
c0027d0e:	c1 e2 08             	shl    edx,0x8
c0027d11:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d14:	31 db                	xor    ebx,ebx
c0027d16:	85 ff                	test   edi,edi
c0027d18:	0f 95 c3             	setne  bl
c0027d1b:	09 d8                	or     eax,ebx
c0027d1d:	89 c3                	mov    ebx,eax
c0027d1f:	c1 eb 08             	shr    ebx,0x8
c0027d22:	a8 7f                	test   al,0x7f
c0027d24:	0f 95 c2             	setne  dl
c0027d27:	89 d6                	mov    esi,edx
c0027d29:	09 de                	or     esi,ebx
c0027d2b:	83 e6 01             	and    esi,0x1
c0027d2e:	c1 e8 07             	shr    eax,0x7
c0027d31:	21 f0                	and    eax,esi
c0027d33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d36:	09 ca                	or     edx,ecx
c0027d38:	c1 e2 17             	shl    edx,0x17
c0027d3b:	09 da                	or     edx,ebx
c0027d3d:	01 d0                	add    eax,edx
c0027d3f:	83 c4 0c             	add    esp,0xc
c0027d42:	5b                   	pop    ebx
c0027d43:	5e                   	pop    esi
c0027d44:	5f                   	pop    edi
c0027d45:	5d                   	pop    ebp
c0027d46:	c3                   	ret    

c0027d47 <__extendsfdf2>:
c0027d47:	55                   	push   ebp
c0027d48:	89 e5                	mov    ebp,esp
c0027d4a:	57                   	push   edi
c0027d4b:	56                   	push   esi
c0027d4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d4f:	89 d1                	mov    ecx,edx
c0027d51:	c1 f9 17             	sar    ecx,0x17
c0027d54:	c1 e2 08             	shl    edx,0x8
c0027d57:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d5d:	89 c8                	mov    eax,ecx
c0027d5f:	80 e4 f8             	and    ah,0xf8
c0027d62:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d65:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027d6b:	75 27                	jne    c0027d94 <__extendsfdf2+0x4d>
c0027d6d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027d73:	75 18                	jne    c0027d8d <__extendsfdf2+0x46>
c0027d75:	85 d2                	test   edx,edx
c0027d77:	74 20                	je     c0027d99 <__extendsfdf2+0x52>
c0027d79:	41                   	inc    ecx
c0027d7a:	01 d2                	add    edx,edx
c0027d7c:	79 fb                	jns    c0027d79 <__extendsfdf2+0x32>
c0027d7e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d84:	29 c8                	sub    eax,ecx
c0027d86:	05 81 03 00 00       	add    eax,0x381
c0027d8b:	eb 0c                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d8d:	05 00 07 00 00       	add    eax,0x700
c0027d92:	eb 05                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d94:	05 80 03 00 00       	add    eax,0x380
c0027d99:	c1 e0 14             	shl    eax,0x14
c0027d9c:	89 c1                	mov    ecx,eax
c0027d9e:	89 d0                	mov    eax,edx
c0027da0:	c1 e8 0b             	shr    eax,0xb
c0027da3:	09 c1                	or     ecx,eax
c0027da5:	c1 e2 15             	shl    edx,0x15
c0027da8:	89 d0                	mov    eax,edx
c0027daa:	89 ca                	mov    edx,ecx
c0027dac:	5e                   	pop    esi
c0027dad:	5f                   	pop    edi
c0027dae:	5d                   	pop    ebp
c0027daf:	c3                   	ret    

c0027db0 <fabs>:
c0027db0:	83 ec 0c             	sub    esp,0xc
c0027db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027dba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027dbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027dc7:	dd 04 24             	fld    QWORD PTR [esp]
c0027dca:	83 c4 0c             	add    esp,0xc
c0027dcd:	c3                   	ret    
c0027dce:	66 90                	xchg   ax,ax

c0027dd0 <lrint>:
c0027dd0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027dd4:	83 ec 04             	sub    esp,0x4
c0027dd7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027dda:	58                   	pop    eax
c0027ddb:	c3                   	ret    

c0027ddc <lrintf>:
c0027ddc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027de0:	83 ec 04             	sub    esp,0x4
c0027de3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027de6:	58                   	pop    eax
c0027de7:	c3                   	ret    

Disassembly of section .init:

c0027de8 <_init>:
c0027de8:	55                   	push   ebp
c0027de9:	89 e5                	mov    ebp,esp
c0027deb:	e8 28 83 fd ff       	call   c0000118 <frame_dummy>
c0027df0:	e8 63 e0 ff ff       	call   c0025e58 <__do_global_ctors_aux>
c0027df5:	5d                   	pop    ebp
c0027df6:	c3                   	ret    

Disassembly of section .fini:

c0027df7 <_fini>:
c0027df7:	55                   	push   ebp
c0027df8:	89 e5                	mov    ebp,esp
c0027dfa:	e8 a9 82 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027dff:	5d                   	pop    ebp
c0027e00:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027e02 <Computer::~Computer()>:
c0027e02:	83 ec 0c             	sub    esp,0xc
c0027e05:	ba 48 99 02 c0       	mov    edx,0xc0029948
c0027e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e0e:	89 10                	mov    DWORD PTR [eax],edx
c0027e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e14:	83 ec 0c             	sub    esp,0xc
c0027e17:	50                   	push   eax
c0027e18:	e8 cf bd fe ff       	call   c0013bec <Device::~Device()>
c0027e1d:	83 c4 10             	add    esp,0x10
c0027e20:	90                   	nop
c0027e21:	83 c4 0c             	add    esp,0xc
c0027e24:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027e26 <Computer::~Computer()>:
c0027e26:	83 ec 0c             	sub    esp,0xc
c0027e29:	83 ec 0c             	sub    esp,0xc
c0027e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e30:	e8 cd ff ff ff       	call   c0027e02 <Computer::~Computer()>
c0027e35:	83 c4 10             	add    esp,0x10
c0027e38:	83 ec 08             	sub    esp,0x8
c0027e3b:	68 ec 01 00 00       	push   0x1ec
c0027e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e44:	e8 ca a9 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0027e49:	83 c4 10             	add    esp,0x10
c0027e4c:	83 c4 0c             	add    esp,0xc
c0027e4f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027e50 <idleCommon()>:
c0027e50:	83 ec 0c             	sub    esp,0xc
c0027e53:	e8 92 56 ff ff       	call   c001d4ea <lockScheduler()>
c0027e58:	e8 c9 59 ff ff       	call   c001d826 <schedule()>
c0027e5d:	83 c4 0c             	add    esp,0xc
c0027e60:	e9 87 56 ff ff       	jmp    c001d4ec <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027e66 <LinkedList<UnixFile>::~LinkedList()>:
c0027e66:	90                   	nop
c0027e67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027e68 <LinkedList<UnixFile>::LinkedList()>:
c0027e68:	83 ec 0c             	sub    esp,0xc
c0027e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027eab:	83 ec 0c             	sub    esp,0xc
c0027eae:	68 06 9c 02 c0       	push   0xc0029c06
c0027eb3:	e8 3b aa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0027eb8:	83 c4 10             	add    esp,0x10
c0027ebb:	90                   	nop
c0027ebc:	83 c4 0c             	add    esp,0xc
c0027ebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027ec0:	83 ec 0c             	sub    esp,0xc
c0027ec3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027ec8:	75 10                	jne    c0027eda <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027eca:	83 ec 0c             	sub    esp,0xc
c0027ecd:	68 20 9c 02 c0       	push   0xc0029c20
c0027ed2:	e8 c2 1f ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0027ed7:	83 c4 10             	add    esp,0x10
c0027eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ee0:	85 c0                	test   eax,eax
c0027ee2:	74 34                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eeb:	85 c0                	test   eax,eax
c0027eed:	74 29                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027efa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f16:	eb 65                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f1e:	85 c0                	test   eax,eax
c0027f20:	75 4b                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f29:	85 c0                	test   eax,eax
c0027f2b:	75 40                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f35:	89 10                	mov    DWORD PTR [eax],edx
c0027f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f57:	85 c0                	test   eax,eax
c0027f59:	74 22                	je     c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f5b:	83 ec 0c             	sub    esp,0xc
c0027f5e:	68 42 9c 02 c0       	push   0xc0029c42
c0027f63:	e8 31 1f ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0027f68:	83 c4 10             	add    esp,0x10
c0027f6b:	eb 10                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f6d:	83 ec 0c             	sub    esp,0xc
c0027f70:	68 4c 9c 02 c0       	push   0xc0029c4c
c0027f75:	e8 1f 1f ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0027f7a:	83 c4 10             	add    esp,0x10
c0027f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f84:	8d 50 01             	lea    edx,[eax+0x1]
c0027f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f8e:	90                   	nop
c0027f8f:	83 c4 0c             	add    esp,0xc
c0027f92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027f94 <LinkedList<UnixFile>::getFirstElement()>:
c0027f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027f9c <LinkedList<UnixFile>::removeFirst()>:
c0027f9c:	83 ec 0c             	sub    esp,0xc
c0027f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fa5:	85 c0                	test   eax,eax
c0027fa7:	75 12                	jne    c0027fbb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027fa9:	83 ec 0c             	sub    esp,0xc
c0027fac:	68 58 9c 02 c0       	push   0xc0029c58
c0027fb1:	e8 e3 1e ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0027fb6:	83 c4 10             	add    esp,0x10
c0027fb9:	eb 7e                	jmp    c0028039 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fc5:	85 c0                	test   eax,eax
c0027fc7:	74 10                	je     c0027fd9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027fc9:	83 ec 0c             	sub    esp,0xc
c0027fcc:	68 a3 9c 02 c0       	push   0xc0029ca3
c0027fd1:	e8 c3 1e ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0027fd6:	83 c4 10             	add    esp,0x10
c0027fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fe2:	85 c0                	test   eax,eax
c0027fe4:	75 33                	jne    c0028019 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028002:	83 f8 01             	cmp    eax,0x1
c0028005:	74 21                	je     c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028007:	83 ec 0c             	sub    esp,0xc
c002800a:	68 7c 9c 02 c0       	push   0xc0029c7c
c002800f:	e8 85 1e ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0028014:	83 c4 10             	add    esp,0x10
c0028017:	eb 0f                	jmp    c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002801d:	8b 00                	mov    eax,DWORD PTR [eax]
c002801f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028026:	89 10                	mov    DWORD PTR [eax],edx
c0028028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002802f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028039:	83 c4 0c             	add    esp,0xc
c002803c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002803e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028042:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028045:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028046 <DriverlessDevice::~DriverlessDevice()>:
c0028046:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c002804b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002804f:	89 10                	mov    DWORD PTR [eax],edx
c0028051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028055:	50                   	push   eax
c0028056:	e8 91 bb fe ff       	call   c0013bec <Device::~Device()>
c002805b:	83 c4 04             	add    esp,0x4
c002805e:	90                   	nop
c002805f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028060 <DriverlessDevice::~DriverlessDevice()>:
c0028060:	83 ec 0c             	sub    esp,0xc
c0028063:	83 ec 0c             	sub    esp,0xc
c0028066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002806a:	e8 d7 ff ff ff       	call   c0028046 <DriverlessDevice::~DriverlessDevice()>
c002806f:	83 c4 10             	add    esp,0x10
c0028072:	83 ec 08             	sub    esp,0x8
c0028075:	68 58 01 00 00       	push   0x158
c002807a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002807e:	e8 90 a7 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028083:	83 c4 10             	add    esp,0x10
c0028086:	83 c4 0c             	add    esp,0xc
c0028089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002808a <LinkedList<Device>::addElement(Device*)>:
c002808a:	83 ec 0c             	sub    esp,0xc
c002808d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028092:	75 10                	jne    c00280a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028094:	83 ec 0c             	sub    esp,0xc
c0028097:	68 20 9c 02 c0       	push   0xc0029c20
c002809c:	e8 f8 1d ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00280a1:	83 c4 10             	add    esp,0x10
c00280a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280aa:	85 c0                	test   eax,eax
c00280ac:	74 3a                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280b5:	85 c0                	test   eax,eax
c00280b7:	74 2f                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00280ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00280e6:	eb 68                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c00280e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ee:	85 c0                	test   eax,eax
c00280f0:	75 4e                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280f9:	85 c0                	test   eax,eax
c00280fb:	75 43                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028101:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028105:	89 10                	mov    DWORD PTR [eax],edx
c0028107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002810f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028119:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028127:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002812a:	85 c0                	test   eax,eax
c002812c:	74 22                	je     c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c002812e:	83 ec 0c             	sub    esp,0xc
c0028131:	68 42 9c 02 c0       	push   0xc0029c42
c0028136:	e8 5e 1d ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002813b:	83 c4 10             	add    esp,0x10
c002813e:	eb 10                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028140:	83 ec 0c             	sub    esp,0xc
c0028143:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028148:	e8 4c 1d ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028154:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028157:	8d 50 01             	lea    edx,[eax+0x1]
c002815a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002815e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028161:	90                   	nop
c0028162:	83 c4 0c             	add    esp,0xc
c0028165:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028166 <LinkedList<Device>::LinkedList()>:
c0028166:	83 ec 0c             	sub    esp,0xc
c0028169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002816d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028177:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028182:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028197:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00281a9:	83 ec 0c             	sub    esp,0xc
c00281ac:	68 06 9c 02 c0       	push   0xc0029c06
c00281b1:	e8 3d a7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00281b6:	83 c4 10             	add    esp,0x10
c00281b9:	90                   	nop
c00281ba:	83 c4 0c             	add    esp,0xc
c00281bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00281be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00281c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00281c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00281cc:	85 c0                	test   eax,eax
c00281ce:	75 0e                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281d7:	85 c0                	test   eax,eax
c00281d9:	75 03                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281db:	b0 01                	mov    al,0x1
c00281dd:	c3                   	ret    
c00281de:	b0 00                	mov    al,0x0
c00281e0:	90                   	nop
c00281e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00281e2:	83 ec 0c             	sub    esp,0xc
c00281e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00281eb:	85 c0                	test   eax,eax
c00281ed:	75 15                	jne    c0028204 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00281ef:	83 ec 0c             	sub    esp,0xc
c00281f2:	68 58 9c 02 c0       	push   0xc0029c58
c00281f7:	e8 9d 1c ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00281fc:	83 c4 10             	add    esp,0x10
c00281ff:	e9 88 00 00 00       	jmp    c002828c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002820b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002820e:	85 c0                	test   eax,eax
c0028210:	0f 95 c0             	setne  al
c0028213:	84 c0                	test   al,al
c0028215:	74 10                	je     c0028227 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028217:	83 ec 0c             	sub    esp,0xc
c002821a:	68 a3 9c 02 c0       	push   0xc0029ca3
c002821f:	e8 75 1c ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0028224:	83 c4 10             	add    esp,0x10
c0028227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822b:	8b 00                	mov    eax,DWORD PTR [eax]
c002822d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028230:	85 c0                	test   eax,eax
c0028232:	0f 94 c0             	sete   al
c0028235:	84 c0                	test   al,al
c0028237:	74 33                	je     c002826c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002823d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028247:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028252:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028255:	83 f8 01             	cmp    eax,0x1
c0028258:	74 21                	je     c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002825a:	83 ec 0c             	sub    esp,0xc
c002825d:	68 7c 9c 02 c0       	push   0xc0029c7c
c0028262:	e8 32 1c ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0028267:	83 c4 10             	add    esp,0x10
c002826a:	eb 0f                	jmp    c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002826c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028270:	8b 00                	mov    eax,DWORD PTR [eax]
c0028272:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028279:	89 10                	mov    DWORD PTR [eax],edx
c002827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028282:	8d 50 ff             	lea    edx,[eax-0x1]
c0028285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028289:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002828c:	83 c4 0c             	add    esp,0xc
c002828f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028298:	75 10                	jne    c00282aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002829a:	83 ec 0c             	sub    esp,0xc
c002829d:	68 20 9c 02 c0       	push   0xc0029c20
c00282a2:	e8 f2 1b ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c00282a7:	83 c4 10             	add    esp,0x10
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00282b0:	85 c0                	test   eax,eax
c00282b2:	74 34                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282bb:	85 c0                	test   eax,eax
c00282bd:	74 29                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00282cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00282e6:	eb 65                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00282ee:	85 c0                	test   eax,eax
c00282f0:	75 4b                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282f9:	85 c0                	test   eax,eax
c00282fb:	75 40                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028305:	89 10                	mov    DWORD PTR [eax],edx
c0028307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002830f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028319:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028324:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028327:	85 c0                	test   eax,eax
c0028329:	74 22                	je     c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	68 42 9c 02 c0       	push   0xc0029c42
c0028333:	e8 61 1b ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c0028338:	83 c4 10             	add    esp,0x10
c002833b:	eb 10                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002833d:	83 ec 0c             	sub    esp,0xc
c0028340:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028345:	e8 4f 1b ff ff       	call   c0019e99 <Krnl::panic(char const*)>
c002834a:	83 c4 10             	add    esp,0x10
c002834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028354:	8d 50 01             	lea    edx,[eax+0x1]
c0028357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002835e:	90                   	nop
c002835f:	83 c4 0c             	add    esp,0xc
c0028362:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028364 <ACPI::~ACPI()>:
c0028364:	83 ec 0c             	sub    esp,0xc
c0028367:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c002836c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028370:	89 10                	mov    DWORD PTR [eax],edx
c0028372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028376:	83 ec 0c             	sub    esp,0xc
c0028379:	50                   	push   eax
c002837a:	e8 6d b8 fe ff       	call   c0013bec <Device::~Device()>
c002837f:	83 c4 10             	add    esp,0x10
c0028382:	90                   	nop
c0028383:	83 c4 0c             	add    esp,0xc
c0028386:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028388 <ACPI::~ACPI()>:
c0028388:	83 ec 0c             	sub    esp,0xc
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028392:	e8 cd ff ff ff       	call   c0028364 <ACPI::~ACPI()>
c0028397:	83 c4 10             	add    esp,0x10
c002839a:	83 ec 08             	sub    esp,0x8
c002839d:	68 68 12 00 00       	push   0x1268
c00283a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283a6:	e8 68 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00283ab:	83 c4 10             	add    esp,0x10
c00283ae:	83 c4 0c             	add    esp,0xc
c00283b1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00283b2 <CPU::~CPU()>:
c00283b2:	83 ec 0c             	sub    esp,0xc
c00283b5:	ba 68 b1 02 c0       	mov    edx,0xc002b168
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	89 10                	mov    DWORD PTR [eax],edx
c00283c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c4:	83 ec 0c             	sub    esp,0xc
c00283c7:	50                   	push   eax
c00283c8:	e8 1f b8 fe ff       	call   c0013bec <Device::~Device()>
c00283cd:	83 c4 10             	add    esp,0x10
c00283d0:	90                   	nop
c00283d1:	83 c4 0c             	add    esp,0xc
c00283d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00283d6 <CPU::~CPU()>:
c00283d6:	83 ec 0c             	sub    esp,0xc
c00283d9:	83 ec 0c             	sub    esp,0xc
c00283dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e0:	e8 cd ff ff ff       	call   c00283b2 <CPU::~CPU()>
c00283e5:	83 c4 10             	add    esp,0x10
c00283e8:	83 ec 08             	sub    esp,0x8
c00283eb:	68 98 11 00 00       	push   0x1198
c00283f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283f4:	e8 1a a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00283f9:	83 c4 10             	add    esp,0x10
c00283fc:	83 c4 0c             	add    esp,0xc
c00283ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028400 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028400:	90                   	nop
c0028401:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028402 <ThreadControlBlock::ThreadControlBlock()>:
c0028402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028406:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002840d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028411:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002841c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028427:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002842e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028432:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002843a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002843e:	90                   	nop
c002843f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028451:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028471:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028483:	83 ec 0c             	sub    esp,0xc
c0028486:	68 06 9c 02 c0       	push   0xc0029c06
c002848b:	e8 63 a4 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0028490:	83 c4 10             	add    esp,0x10
c0028493:	90                   	nop
c0028494:	83 c4 0c             	add    esp,0xc
c0028497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002849c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002849f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00284a0 <Vm::_FPUState::_FPUState()>:
c00284a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00284ab:	90                   	nop
c00284ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00284ae <PCI::~PCI()>:
c00284ae:	83 ec 0c             	sub    esp,0xc
c00284b1:	ba b8 c0 02 c0       	mov    edx,0xc002c0b8
c00284b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ba:	89 10                	mov    DWORD PTR [eax],edx
c00284bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c0:	83 ec 0c             	sub    esp,0xc
c00284c3:	50                   	push   eax
c00284c4:	e8 fb b0 fe ff       	call   c00135c4 <Bus::~Bus()>
c00284c9:	83 c4 10             	add    esp,0x10
c00284cc:	90                   	nop
c00284cd:	83 c4 0c             	add    esp,0xc
c00284d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00284d2 <PCI::~PCI()>:
c00284d2:	83 ec 0c             	sub    esp,0xc
c00284d5:	83 ec 0c             	sub    esp,0xc
c00284d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284dc:	e8 cd ff ff ff       	call   c00284ae <PCI::~PCI()>
c00284e1:	83 c4 10             	add    esp,0x10
c00284e4:	83 ec 08             	sub    esp,0x8
c00284e7:	68 58 01 00 00       	push   0x158
c00284ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f0:	e8 1e a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00284f5:	83 c4 10             	add    esp,0x10
c00284f8:	83 c4 0c             	add    esp,0xc
c00284fb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00284fc <IDE::~IDE()>:
c00284fc:	83 ec 0c             	sub    esp,0xc
c00284ff:	ba 1c c3 02 c0       	mov    edx,0xc002c31c
c0028504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028508:	89 10                	mov    DWORD PTR [eax],edx
c002850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850e:	83 ec 0c             	sub    esp,0xc
c0028511:	50                   	push   eax
c0028512:	e8 c5 bb fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028517:	83 c4 10             	add    esp,0x10
c002851a:	90                   	nop
c002851b:	83 c4 0c             	add    esp,0xc
c002851e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028520 <IDE::~IDE()>:
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	83 ec 0c             	sub    esp,0xc
c0028526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002852a:	e8 cd ff ff ff       	call   c00284fc <IDE::~IDE()>
c002852f:	83 c4 10             	add    esp,0x10
c0028532:	83 ec 08             	sub    esp,0x8
c0028535:	68 70 02 00 00       	push   0x270
c002853a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002853e:	e8 d0 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028543:	83 c4 10             	add    esp,0x10
c0028546:	83 c4 0c             	add    esp,0xc
c0028549:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002854a <SATABus::~SATABus()>:
c002854a:	83 ec 0c             	sub    esp,0xc
c002854d:	ba fc c3 02 c0       	mov    edx,0xc002c3fc
c0028552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028556:	89 10                	mov    DWORD PTR [eax],edx
c0028558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855c:	83 ec 0c             	sub    esp,0xc
c002855f:	50                   	push   eax
c0028560:	e8 77 bb fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	90                   	nop
c0028569:	83 c4 0c             	add    esp,0xc
c002856c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002856e <SATABus::~SATABus()>:
c002856e:	83 ec 0c             	sub    esp,0xc
c0028571:	83 ec 0c             	sub    esp,0xc
c0028574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028578:	e8 cd ff ff ff       	call   c002854a <SATABus::~SATABus()>
c002857d:	83 c4 10             	add    esp,0x10
c0028580:	83 ec 08             	sub    esp,0x8
c0028583:	68 64 01 00 00       	push   0x164
c0028588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002858c:	e8 82 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028591:	83 c4 10             	add    esp,0x10
c0028594:	83 c4 0c             	add    esp,0xc
c0028597:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028598 <ATA::~ATA()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c00285a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a4:	89 10                	mov    DWORD PTR [eax],edx
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	83 ec 0c             	sub    esp,0xc
c00285ad:	50                   	push   eax
c00285ae:	e8 1b bc fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c00285b3:	83 c4 10             	add    esp,0x10
c00285b6:	90                   	nop
c00285b7:	83 c4 0c             	add    esp,0xc
c00285ba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00285bc <ATA::~ATA()>:
c00285bc:	83 ec 0c             	sub    esp,0xc
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285c6:	e8 cd ff ff ff       	call   c0028598 <ATA::~ATA()>
c00285cb:	83 c4 10             	add    esp,0x10
c00285ce:	83 ec 08             	sub    esp,0x8
c00285d1:	68 7c 01 00 00       	push   0x17c
c00285d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285da:	e8 34 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00285df:	83 c4 10             	add    esp,0x10
c00285e2:	83 c4 0c             	add    esp,0xc
c00285e5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00285e6 <ATAPI::~ATAPI()>:
c00285e6:	83 ec 0c             	sub    esp,0xc
c00285e9:	ba 74 c4 02 c0       	mov    edx,0xc002c474
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	89 10                	mov    DWORD PTR [eax],edx
c00285f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f8:	83 ec 0c             	sub    esp,0xc
c00285fb:	50                   	push   eax
c00285fc:	e8 cd bb fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c0028601:	83 c4 10             	add    esp,0x10
c0028604:	90                   	nop
c0028605:	83 c4 0c             	add    esp,0xc
c0028608:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002860a <ATAPI::~ATAPI()>:
c002860a:	83 ec 0c             	sub    esp,0xc
c002860d:	83 ec 0c             	sub    esp,0xc
c0028610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028614:	e8 cd ff ff ff       	call   c00285e6 <ATAPI::~ATAPI()>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	83 ec 08             	sub    esp,0x8
c002861f:	68 80 01 00 00       	push   0x180
c0028624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028628:	e8 e6 a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002862d:	83 c4 10             	add    esp,0x10
c0028630:	83 c4 0c             	add    esp,0xc
c0028633:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028634 <SATA::~SATA()>:
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	ba f0 c4 02 c0       	mov    edx,0xc002c4f0
c002863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028640:	89 10                	mov    DWORD PTR [eax],edx
c0028642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	50                   	push   eax
c002864a:	e8 7f bb fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c002864f:	83 c4 10             	add    esp,0x10
c0028652:	90                   	nop
c0028653:	83 c4 0c             	add    esp,0xc
c0028656:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028658 <SATA::~SATA()>:
c0028658:	83 ec 0c             	sub    esp,0xc
c002865b:	83 ec 0c             	sub    esp,0xc
c002865e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028662:	e8 cd ff ff ff       	call   c0028634 <SATA::~SATA()>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	83 ec 08             	sub    esp,0x8
c002866d:	68 7c 01 00 00       	push   0x17c
c0028672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028676:	e8 98 a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002867b:	83 c4 10             	add    esp,0x10
c002867e:	83 c4 0c             	add    esp,0xc
c0028681:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028682 <SATAPI::~SATAPI()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	89 10                	mov    DWORD PTR [eax],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	50                   	push   eax
c0028698:	e8 31 bb fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	90                   	nop
c00286a1:	83 c4 0c             	add    esp,0xc
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00286a6 <SATAPI::~SATAPI()>:
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	83 ec 0c             	sub    esp,0xc
c00286ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b0:	e8 cd ff ff ff       	call   c0028682 <SATAPI::~SATAPI()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	83 ec 08             	sub    esp,0x8
c00286bb:	68 80 01 00 00       	push   0x180
c00286c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c4:	e8 4a a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00286c9:	83 c4 10             	add    esp,0x10
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00286d0 <AVX::~AVX()>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	ba a4 c6 02 c0       	mov    edx,0xc002c6a4
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	89 10                	mov    DWORD PTR [eax],edx
c00286de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e2:	83 ec 0c             	sub    esp,0xc
c00286e5:	50                   	push   eax
c00286e6:	e8 67 bb fe ff       	call   c0014252 <FPU::~FPU()>
c00286eb:	83 c4 10             	add    esp,0x10
c00286ee:	90                   	nop
c00286ef:	83 c4 0c             	add    esp,0xc
c00286f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00286f4 <AVX::~AVX()>:
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286fe:	e8 cd ff ff ff       	call   c00286d0 <AVX::~AVX()>
c0028703:	83 c4 10             	add    esp,0x10
c0028706:	83 ec 08             	sub    esp,0x8
c0028709:	68 58 01 00 00       	push   0x158
c002870e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028712:	e8 fc a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028717:	83 c4 10             	add    esp,0x10
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002871e <MMX::~MMX()>:
c002871e:	83 ec 0c             	sub    esp,0xc
c0028721:	ba e4 c6 02 c0       	mov    edx,0xc002c6e4
c0028726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872a:	89 10                	mov    DWORD PTR [eax],edx
c002872c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	50                   	push   eax
c0028734:	e8 19 bb fe ff       	call   c0014252 <FPU::~FPU()>
c0028739:	83 c4 10             	add    esp,0x10
c002873c:	90                   	nop
c002873d:	83 c4 0c             	add    esp,0xc
c0028740:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028742 <MMX::~MMX()>:
c0028742:	83 ec 0c             	sub    esp,0xc
c0028745:	83 ec 0c             	sub    esp,0xc
c0028748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002874c:	e8 cd ff ff ff       	call   c002871e <MMX::~MMX()>
c0028751:	83 c4 10             	add    esp,0x10
c0028754:	83 ec 08             	sub    esp,0x8
c0028757:	68 58 01 00 00       	push   0x158
c002875c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028760:	e8 ae a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028765:	83 c4 10             	add    esp,0x10
c0028768:	83 c4 0c             	add    esp,0xc
c002876b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002876c <SSE::~SSE()>:
c002876c:	83 ec 0c             	sub    esp,0xc
c002876f:	ba 24 c7 02 c0       	mov    edx,0xc002c724
c0028774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028778:	89 10                	mov    DWORD PTR [eax],edx
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	83 ec 0c             	sub    esp,0xc
c0028781:	50                   	push   eax
c0028782:	e8 cb ba fe ff       	call   c0014252 <FPU::~FPU()>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	90                   	nop
c002878b:	83 c4 0c             	add    esp,0xc
c002878e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028790 <SSE::~SSE()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 cd ff ff ff       	call   c002876c <SSE::~SSE()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 60 a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00287ba <x87::~x87()>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	ba 64 c7 02 c0       	mov    edx,0xc002c764
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	89 10                	mov    DWORD PTR [eax],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	50                   	push   eax
c00287d0:	e8 7d ba fe ff       	call   c0014252 <FPU::~FPU()>
c00287d5:	83 c4 10             	add    esp,0x10
c00287d8:	90                   	nop
c00287d9:	83 c4 0c             	add    esp,0xc
c00287dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00287de <x87::~x87()>:
c00287de:	83 ec 0c             	sub    esp,0xc
c00287e1:	83 ec 0c             	sub    esp,0xc
c00287e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287e8:	e8 cd ff ff ff       	call   c00287ba <x87::~x87()>
c00287ed:	83 c4 10             	add    esp,0x10
c00287f0:	83 ec 08             	sub    esp,0x8
c00287f3:	68 58 01 00 00       	push   0x158
c00287f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287fc:	e8 12 a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028801:	83 c4 10             	add    esp,0x10
c0028804:	83 c4 0c             	add    esp,0xc
c0028807:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028808 <IOAPIC::~IOAPIC()>:
c0028808:	83 ec 0c             	sub    esp,0xc
c002880b:	ba bc c8 02 c0       	mov    edx,0xc002c8bc
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	89 10                	mov    DWORD PTR [eax],edx
c0028816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	50                   	push   eax
c002881e:	e8 c9 b3 fe ff       	call   c0013bec <Device::~Device()>
c0028823:	83 c4 10             	add    esp,0x10
c0028826:	90                   	nop
c0028827:	83 c4 0c             	add    esp,0xc
c002882a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002882c <IOAPIC::~IOAPIC()>:
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	83 ec 0c             	sub    esp,0xc
c0028832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028836:	e8 cd ff ff ff       	call   c0028808 <IOAPIC::~IOAPIC()>
c002883b:	83 c4 10             	add    esp,0x10
c002883e:	83 ec 08             	sub    esp,0x8
c0028841:	68 68 01 00 00       	push   0x168
c0028846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002884a:	e8 c4 9f fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002884f:	83 c4 10             	add    esp,0x10
c0028852:	83 c4 0c             	add    esp,0xc
c0028855:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028856 <APIC::~APIC()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	ba 74 c8 02 c0       	mov    edx,0xc002c874
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	89 10                	mov    DWORD PTR [eax],edx
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	50                   	push   eax
c002886c:	e8 ab be fe ff       	call   c001471c <InterruptController::~InterruptController()>
c0028871:	83 c4 10             	add    esp,0x10
c0028874:	90                   	nop
c0028875:	83 c4 0c             	add    esp,0xc
c0028878:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002887a <APIC::~APIC()>:
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028884:	e8 cd ff ff ff       	call   c0028856 <APIC::~APIC()>
c0028889:	83 c4 10             	add    esp,0x10
c002888c:	83 ec 08             	sub    esp,0x8
c002888f:	68 58 21 00 00       	push   0x2158
c0028894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028898:	e8 76 9f fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	83 c4 0c             	add    esp,0xc
c00288a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00288a4 <PIC::~PIC()>:
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	ba 0c c9 02 c0       	mov    edx,0xc002c90c
c00288ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b0:	89 10                	mov    DWORD PTR [eax],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	50                   	push   eax
c00288ba:	e8 5d be fe ff       	call   c001471c <InterruptController::~InterruptController()>
c00288bf:	83 c4 10             	add    esp,0x10
c00288c2:	90                   	nop
c00288c3:	83 c4 0c             	add    esp,0xc
c00288c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00288c8 <PIC::~PIC()>:
c00288c8:	83 ec 0c             	sub    esp,0xc
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d2:	e8 cd ff ff ff       	call   c00288a4 <PIC::~PIC()>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	83 ec 08             	sub    esp,0x8
c00288dd:	68 58 21 00 00       	push   0x2158
c00288e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e6:	e8 28 9f fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00288eb:	83 c4 10             	add    esp,0x10
c00288ee:	83 c4 0c             	add    esp,0xc
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00288f2 <APICTimer::~APICTimer()>:
c00288f2:	83 ec 0c             	sub    esp,0xc
c00288f5:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c00288fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fe:	89 10                	mov    DWORD PTR [eax],edx
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	50                   	push   eax
c0028908:	e8 07 dd fe ff       	call   c0016614 <Timer::~Timer()>
c002890d:	83 c4 10             	add    esp,0x10
c0028910:	90                   	nop
c0028911:	83 c4 0c             	add    esp,0xc
c0028914:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028916 <APICTimer::~APICTimer()>:
c0028916:	83 ec 0c             	sub    esp,0xc
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028920:	e8 cd ff ff ff       	call   c00288f2 <APICTimer::~APICTimer()>
c0028925:	83 c4 10             	add    esp,0x10
c0028928:	83 ec 08             	sub    esp,0x8
c002892b:	68 60 01 00 00       	push   0x160
c0028930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028934:	e8 da 9e fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028939:	83 c4 10             	add    esp,0x10
c002893c:	83 c4 0c             	add    esp,0xc
c002893f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028940 <PIT::~PIT()>:
c0028940:	83 ec 0c             	sub    esp,0xc
c0028943:	ba b0 c9 02 c0       	mov    edx,0xc002c9b0
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	89 10                	mov    DWORD PTR [eax],edx
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	83 ec 0c             	sub    esp,0xc
c0028955:	50                   	push   eax
c0028956:	e8 b9 dc fe ff       	call   c0016614 <Timer::~Timer()>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	90                   	nop
c002895f:	83 c4 0c             	add    esp,0xc
c0028962:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028964 <PIT::~PIT()>:
c0028964:	83 ec 0c             	sub    esp,0xc
c0028967:	83 ec 0c             	sub    esp,0xc
c002896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896e:	e8 cd ff ff ff       	call   c0028940 <PIT::~PIT()>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	83 ec 08             	sub    esp,0x8
c0028979:	68 5c 01 00 00       	push   0x15c
c002897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028982:	e8 8c 9e fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028987:	83 c4 10             	add    esp,0x10
c002898a:	83 c4 0c             	add    esp,0xc
c002898d:	c3                   	ret    
