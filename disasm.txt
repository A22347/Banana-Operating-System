
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 fa 00 00       	call   c000fa23 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 8a 02 00       	call   c0028a28 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 7c 96 02 c0       	mov    ebx,0xc002967c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 88 96 02 c0    	cmp    ebx,0xc0029688
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000049:	3d 58 db 02 c0       	cmp    eax,0xc002db58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 db 02 c0       	push   0xc002db58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000075:	2d 58 db 02 c0       	sub    eax,0xc002db58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 db 02 c0       	push   0xc002db58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e188,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 90 96 02 c0       	mov    ebx,0xc0029690
c00000bb:	81 eb 8c 96 02 c0    	sub    ebx,0xc002968c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 8c 96 02 c0       	mov    esi,0xc002968c
c00000ca:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e1 02 c0       	mov    ds:0xc002e18c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 db 02 c0       	push   0xc002db58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e188,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e1 02 c0       	push   0xc002e190
c000012c:	68 58 db 02 c0       	push   0xc002db58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 0d d4 01 00       	call   c001d7b0 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 70 23 01 00       	call   c001272b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 eb d3 01 00       	call   c001d7b0 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 93 d8 01 00       	call   c001dc77 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 b8 de 01 00       	call   c001e2a5 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 e5 02 c0 	lgdtd  ds:0xc002e5d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 d9 40 01 00       	call   c00146bb <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 a0 96 02 c0 02 	test   BYTE PTR [edx-0x3ffd6960],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6960],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 a0 96 02 c0 08 	test   BYTE PTR [edx-0x3ffd6960],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 a0 96 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6960],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 a0 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6960],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1c0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e3c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e3c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1fc
c0000e38:	c7 42 0c f4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1f4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1c0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 9f e7 00 00       	call   c000f6b8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 e1 e6 00 00       	call   c000f6b8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 cb e6 00 00       	call   c000f6b8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 a7 e6 00 00       	call   c000f6b8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1c0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e3c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e3c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e0c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e200
c00011ba:	81 fb f4 e1 02 c0    	cmp    ebx,0xc002e1f4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 e1 02 c0       	cmp    eax,0xc002e1f4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc e1 02 c0       	mov    ds:0xc002e1fc,eax
c00011f6:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c00011fb:	a3 f0 e1 02 c0       	mov    ds:0xc002e1f0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001209:	c7 40 0c f4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1f4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e48]
c000125a:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e40]
c0001275:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b0c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e0c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,ecx
c000132f:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0001335:	c7 41 08 f4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1f4
c000133c:	c7 41 0c f4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1f4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e14]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec e1 02 c0 	lea    edx,[eax*4-0x3ffd1e14]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b0c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edi
c0001402:	89 3d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,edi
c0001408:	c7 47 08 f4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1f4
c000140f:	c7 47 0c f4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1f4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e514
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 e5 02 c0    	mov    DWORD PTR ds:0xc002e514,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c e5 02 c0    	push   DWORD PTR ds:0xc002e51c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c e5 02 c0       	mov    eax,ds:0xc002e51c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e3c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 e1 02 c0       	mov    eax,0xc002e1f4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec e4 02 c0       	cmp    eax,0xc002e4ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e510
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e524
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e534
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 a4 97 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd685c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 aa f1 01 00       	jmp    c0020d9c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 db f1 01 00       	jmp    c0020de3 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 03 f2 01 00       	jmp    c0020e2a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 7a 4e 02 00       	call   c0026d84 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 c0 98 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6740]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 c0 98 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6740]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba e0 98 02 c0       	mov    edx,0xc00298e0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 54 ca 02 c0       	mov    edx,0xc002ca54
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ec 98 02 c0       	mov    edx,0xc00298ec
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1aa0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 e5 02 c0    	mov    ax,ds:0xc002e540
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 e5 02 c0    	mov    ds:0xc002e540,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 77 3c 02 00       	call   c0026d84 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 f2 98 02 c0       	mov    eax,0xc00298f2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 40 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd67c0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 fb 98 02 c0       	mov    eax,0xc00298fb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 c0 98 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6740]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 42 26 02 00       	call   c0026d84 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba d0 97 02 c0       	mov    edx,0xc00297d0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1aa0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1aa0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 09 10 02 00       	call   c0026d84 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 ef 0f 02 00       	call   c0026d84 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 17 98 02 c0       	mov    eax,0xc0029817
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 10 98 02 c0       	mov    eax,0xc0029810
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 88 fb 01 00       	call   c0026d84 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 60 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1aa0]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 00 98 02 c0       	mov    esi,0xc0029800
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 fc f4 01 00       	call   c0026d84 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba e0 98 02 c0       	mov    edx,0xc00298e0
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba e0 97 02 c0       	mov    edx,0xc00297e0
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba f0 97 02 c0       	mov    edx,0xc00297f0
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 02 99 02 c0       	mov    edx,0xc0029902
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 0e 99 02 c0       	mov    edx,0xc002990e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 22 99 02 c0       	mov    edx,0xc0029922
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 be 72 00 00       	call   c000f95d <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 b8 72 00 00       	call   c000f96d <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 40 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029c40
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 40 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c40
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 fd 6f 00 00       	call   c000f96d <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 e7 6f 00 00       	call   c000f96d <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 50 fe 01 00       	call   c0028857 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 13 fe 01 00       	call   c0028839 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 e7 fd 01 00       	call   c0028857 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 9a f4 01 00       	call   c0027f5c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 1c ff 01 00       	call   c00289f0 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 61 fd 01 00       	call   c0028857 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 a3 fc 01 00       	call   c0028857 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 70 fc 01 00       	call   c0028839 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 5d fb 01 00       	call   c0028857 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 25 fb 01 00       	call   c0028839 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 c6 6b 00 00       	call   c000f98d <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 61 6b 00 00       	call   c000f96d <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 31 f9 01 00       	call   c0028857 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 f6 f8 01 00       	call   c0028839 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 a0 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e60]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 06 f6 01 00       	call   c00285eb <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 84 ef 01 00       	call   c0027f88 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 40 f8 01 00       	call   c002885b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 2e f9 01 00       	call   c002897f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 18 ef 01 00       	call   c0027f88 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 c3 f7 01 00       	call   c0028855 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 a4 f7 01 00       	call   c0028859 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 3a f9 01 00       	call   c0028a10 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 e4 f4 01 00       	call   c00285eb <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 62 ee 01 00       	call   c0027f88 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 1e f7 01 00       	call   c002885b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 0c f8 01 00       	call   c002897f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 f6 ed 01 00       	call   c0027f88 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 a1 f6 01 00       	call   c0028855 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 81 f6 01 00       	call   c0028859 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 16 f8 01 00       	call   c0028a10 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 bc f5 01 00       	call   c0028857 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 7a f5 01 00       	call   c0028839 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 62 f5 01 00       	call   c0028857 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 d4 f2 01 00       	call   c00285eb <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 d6 e5 01 00       	call   c002790b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 39 ec 01 00       	call   c0027f88 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 8b f2 01 00       	call   c00285eb <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 91 e5 01 00       	call   c002790b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 60 f2 01 00       	call   c00285eb <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 b0 f4 01 00       	call   c0028855 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 8d eb 01 00       	call   c0027f5c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 0f f6 01 00       	call   c00289f0 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 36 f4 01 00       	call   c0028839 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 31 eb 01 00       	call   c0027f5c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 af f1 01 00       	call   c00285eb <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 32 eb 01 00       	call   c0027f88 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 84 f1 01 00       	call   c00285eb <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 eb ed 01 00       	call   c002826c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 6a e4 01 00       	call   c002790b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 ca dd 01 00       	call   c00272a0 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 a1 f4 01 00       	call   c002897f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 8a ea 01 00       	call   c0027f88 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 71 f4 01 00       	call   c002897f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 e3 e3 01 00       	call   c002790b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 1c f3 01 00       	call   c002885b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 04 ed 01 00       	call   c002826c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 8a e3 01 00       	call   c002790b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 78 f4 01 00       	call   c0028a10 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 4a f0 01 00       	call   c00285eb <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 a1 e9 01 00       	call   c0027f5c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 80 f2 01 00       	call   c0028857 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 19 e3 01 00       	call   c002790b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 45 e9 01 00       	call   c0027f5c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 e7 f3 01 00       	call   c0028a10 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 98 ef 01 00       	call   c00285eb <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 15 e9 01 00       	call   c0027f88 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 68 ef 01 00       	call   c00285eb <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 6e e2 01 00       	call   c002790b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 3e ef 01 00       	call   c00285eb <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 90 f1 01 00       	call   c0028857 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 67 e8 01 00       	call   c0027f5c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 e9 f2 01 00       	call   c00289f0 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 10 f1 01 00       	call   c0028839 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 0a e8 01 00       	call   c0027f5c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 88 ee 01 00       	call   c00285eb <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 0b e8 01 00       	call   c0027f88 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 5d ee 01 00       	call   c00285eb <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 c4 ea 01 00       	call   c002826c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 43 e1 01 00       	call   c002790b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 93 da 01 00       	call   c00272a0 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 6a f1 01 00       	call   c002897f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 53 e7 01 00       	call   c0027f88 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 3a f1 01 00       	call   c002897f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 ac e0 01 00       	call   c002790b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 e5 ef 01 00       	call   c002885b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 cc e9 01 00       	call   c002826c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 4b e0 01 00       	call   c002790b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 39 f1 01 00       	call   c0028a10 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 0b ed 01 00       	call   c00285eb <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 62 e6 01 00       	call   c0027f5c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 41 ef 01 00       	call   c0028857 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 da df 01 00       	call   c002790b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 06 e6 01 00       	call   c0027f5c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 7b ec 01 00       	call   c00285eb <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 81 df 01 00       	call   c002790b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 00 a2 02 c0       	mov    eax,0xc002a200
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 14 a2 02 c0       	mov    eax,0xc002a214
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 fa 5e 00 00       	call   c000f96d <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 fc 5e 00 00       	call   c000f98d <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 f6 ea 01 00       	call   c00285eb <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 74 e4 01 00       	call   c0027f88 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 06 d7 01 00       	call   c00272a0 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 dd ed 01 00       	call   c002897f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 c6 e3 01 00       	call   c0027f88 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 a9 ed 01 00       	call   c002897f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 1b dd 01 00       	call   c002790b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 7b ed 01 00       	call   c002897f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 6a e3 01 00       	call   c0027f88 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 d3 dc 01 00       	call   c002790b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 f4 d5 01 00       	call   c00272a0 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 cb ec 01 00       	call   c002897f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 b4 e2 01 00       	call   c0027f88 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 97 ec 01 00       	call   c002897f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 09 dc 01 00       	call   c002790b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 69 ec 01 00       	call   c002897f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 58 e2 01 00       	call   c0027f88 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 c1 db 01 00       	call   c002790b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 9f db 01 00       	call   c002790b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 7b d4 01 00       	call   c00272a0 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 52 eb 01 00       	call   c002897f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 3b e1 01 00       	call   c0027f88 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 1e eb 01 00       	call   c002897f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 90 da 01 00       	call   c002790b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 f0 ea 01 00       	call   c002897f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 d9 e0 01 00       	call   c0027f88 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 42 da 01 00       	call   c002790b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 a2 ea 01 00       	call   c002897f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 8b e0 01 00       	call   c0027f88 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 f4 d9 01 00       	call   c002790b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 09 d3 01 00       	call   c00272a0 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 e0 e9 01 00       	call   c002897f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 c9 df 01 00       	call   c0027f88 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 b0 e9 01 00       	call   c002897f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 22 d9 01 00       	call   c002790b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 82 e9 01 00       	call   c002897f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 6b df 01 00       	call   c0027f88 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 d4 d8 01 00       	call   c002790b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 34 e9 01 00       	call   c002897f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 1d df 01 00       	call   c0027f88 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 86 d8 01 00       	call   c002790b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 5a d8 01 00       	call   c002790b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 b7 de 01 00       	call   c0027f88 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 73 e7 01 00       	call   c002885b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 02 d8 01 00       	call   c002790b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 5f de 01 00       	call   c0027f88 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 1b e7 01 00       	call   c002885b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 95 d0 01 00       	call   c00272a0 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 6c e7 01 00       	call   c002897f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 55 dd 01 00       	call   c0027f88 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 38 e7 01 00       	call   c002897f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 aa d6 01 00       	call   c002790b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 0a e7 01 00       	call   c002897f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 f3 dc 01 00       	call   c0027f88 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 5c d6 01 00       	call   c002790b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 bc e6 01 00       	call   c002897f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 a5 dc 01 00       	call   c0027f88 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 0e d6 01 00       	call   c002790b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 6e e6 01 00       	call   c002897f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 57 dc 01 00       	call   c0027f88 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 c0 d5 01 00       	call   c002790b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 20 e6 01 00       	call   c002897f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 09 dc 01 00       	call   c0027f88 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 72 d5 01 00       	call   c002790b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 74 ce 01 00       	call   c00272a0 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 4b e5 01 00       	call   c002897f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 34 db 01 00       	call   c0027f88 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 1b e5 01 00       	call   c002897f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 8d d4 01 00       	call   c002790b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 ed e4 01 00       	call   c002897f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 d6 da 01 00       	call   c0027f88 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 3f d4 01 00       	call   c002790b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 9f e4 01 00       	call   c002897f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 88 da 01 00       	call   c0027f88 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 f1 d3 01 00       	call   c002790b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 51 e4 01 00       	call   c002897f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 3a da 01 00       	call   c0027f88 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 a3 d3 01 00       	call   c002790b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 03 e4 01 00       	call   c002897f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 ec d9 01 00       	call   c0027f88 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 55 d3 01 00       	call   c002790b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 29 d3 01 00       	call   c002790b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 86 d9 01 00       	call   c0027f88 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 42 e2 01 00       	call   c002885b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 d1 d2 01 00       	call   c002790b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 2e d9 01 00       	call   c0027f88 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 ea e1 01 00       	call   c002885b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 78 d2 01 00       	call   c002790b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 d5 d8 01 00       	call   c0027f88 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 91 e1 01 00       	call   c002885b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 1f d2 01 00       	call   c002790b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 7c d8 01 00       	call   c0027f88 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 38 e1 01 00       	call   c002885b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 96 ca 01 00       	call   c00272a0 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 6d e1 01 00       	call   c002897f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 56 d7 01 00       	call   c0027f88 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 39 e1 01 00       	call   c002897f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 ab d0 01 00       	call   c002790b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 0b e1 01 00       	call   c002897f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 f4 d6 01 00       	call   c0027f88 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 5d d0 01 00       	call   c002790b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 bd e0 01 00       	call   c002897f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 a6 d6 01 00       	call   c0027f88 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 0f d0 01 00       	call   c002790b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 6f e0 01 00       	call   c002897f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 58 d6 01 00       	call   c0027f88 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 c1 cf 01 00       	call   c002790b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 21 e0 01 00       	call   c002897f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 0a d6 01 00       	call   c0027f88 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 73 cf 01 00       	call   c002790b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 d3 df 01 00       	call   c002897f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 bc d5 01 00       	call   c0027f88 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 22 cf 01 00       	call   c002790b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 82 df 01 00       	call   c002897f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 6b d5 01 00       	call   c0027f88 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 d4 ce 01 00       	call   c002790b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 ce c7 01 00       	call   c00272a0 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 a5 de 01 00       	call   c002897f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 8e d4 01 00       	call   c0027f88 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 6e de 01 00       	call   c002897f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 e0 cd 01 00       	call   c002790b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 40 de 01 00       	call   c002897f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 29 d4 01 00       	call   c0027f88 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 92 cd 01 00       	call   c002790b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 f2 dd 01 00       	call   c002897f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 db d3 01 00       	call   c0027f88 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 44 cd 01 00       	call   c002790b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 a4 dd 01 00       	call   c002897f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 8d d3 01 00       	call   c0027f88 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 f6 cc 01 00       	call   c002790b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 56 dd 01 00       	call   c002897f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 3f d3 01 00       	call   c0027f88 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 a8 cc 01 00       	call   c002790b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 08 dd 01 00       	call   c002897f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 f1 d2 01 00       	call   c0027f88 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 57 cc 01 00       	call   c002790b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 b7 dc 01 00       	call   c002897f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 a0 d2 01 00       	call   c0027f88 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 0f cc 01 00       	call   c002790b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 e8 cb 01 00       	call   c002790b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 46 d2 01 00       	call   c0027f88 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 02 db 01 00       	call   c002885b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 91 cb 01 00       	call   c002790b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 ef d1 01 00       	call   c0027f88 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 ab da 01 00       	call   c002885b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 39 cb 01 00       	call   c002790b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 97 d1 01 00       	call   c0027f88 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 53 da 01 00       	call   c002885b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 e1 ca 01 00       	call   c002790b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 3f d1 01 00       	call   c0027f88 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 fb d9 01 00       	call   c002885b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 89 ca 01 00       	call   c002790b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 e7 d0 01 00       	call   c0027f88 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 a3 d9 01 00       	call   c002885b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 37 ca 01 00       	call   c002790b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 95 d0 01 00       	call   c0027f88 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 51 d9 01 00       	call   c002885b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 65 c2 01 00       	call   c00272a0 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 3c d9 01 00       	call   c002897f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 25 cf 01 00       	call   c0027f88 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 0c d9 01 00       	call   c002897f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 7e c8 01 00       	call   c002790b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 44 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5dbc]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 b2 d8 01 00       	call   c002897f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 9b ce 01 00       	call   c0027f88 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 06 c8 01 00       	call   c002790b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 53 d8 01 00       	call   c002897f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 3c ce 01 00       	call   c0027f88 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 a7 c7 01 00       	call   c002790b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 f4 d7 01 00       	call   c002897f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 dd cd 01 00       	call   c0027f88 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 48 c7 01 00       	call   c002790b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 95 d7 01 00       	call   c002897f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 7e cd 01 00       	call   c0027f88 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 e9 c6 01 00       	call   c002790b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 36 d7 01 00       	call   c002897f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 1f cd 01 00       	call   c0027f88 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 8a c6 01 00       	call   c002790b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 d7 d6 01 00       	call   c002897f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 c0 cc 01 00       	call   c0027f88 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 2b c6 01 00       	call   c002790b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 78 d6 01 00       	call   c002897f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 61 cc 01 00       	call   c0027f88 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 cc c5 01 00       	call   c002790b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 19 d6 01 00       	call   c002897f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 02 cc 01 00       	call   c0027f88 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 6d c5 01 00       	call   c002790b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 77 be 01 00       	call   c00272a0 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 4e d5 01 00       	call   c002897f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 37 cb 01 00       	call   c0027f88 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 1e d5 01 00       	call   c002897f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 90 c4 01 00       	call   c002790b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 60 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5da0]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 c3 d4 01 00       	call   c002897f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 ac ca 01 00       	call   c0027f88 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 17 c4 01 00       	call   c002790b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 63 d4 01 00       	call   c002897f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 4c ca 01 00       	call   c0027f88 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 b7 c3 01 00       	call   c002790b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 03 d4 01 00       	call   c002897f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 ec c9 01 00       	call   c0027f88 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 57 c3 01 00       	call   c002790b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 a3 d3 01 00       	call   c002897f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 8c c9 01 00       	call   c0027f88 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 f7 c2 01 00       	call   c002790b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 43 d3 01 00       	call   c002897f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 2c c9 01 00       	call   c0027f88 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 97 c2 01 00       	call   c002790b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 e3 d2 01 00       	call   c002897f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 cc c8 01 00       	call   c0027f88 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 37 c2 01 00       	call   c002790b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 83 d2 01 00       	call   c002897f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 6c c8 01 00       	call   c0027f88 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 d7 c1 01 00       	call   c002790b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 23 d2 01 00       	call   c002897f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 0c c8 01 00       	call   c0027f88 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 77 c1 01 00       	call   c002790b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 7c a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d84]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 1c c1 01 00       	call   c002790b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 79 c7 01 00       	call   c0027f88 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 35 d0 01 00       	call   c002885b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 bf c0 01 00       	call   c002790b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 1c c7 01 00       	call   c0027f88 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 d8 cf 01 00       	call   c002885b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 62 c0 01 00       	call   c002790b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 bf c6 01 00       	call   c0027f88 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 7b cf 01 00       	call   c002885b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 05 c0 01 00       	call   c002790b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 62 c6 01 00       	call   c0027f88 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 1e cf 01 00       	call   c002885b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 a8 bf 01 00       	call   c002790b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 05 c6 01 00       	call   c0027f88 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 c1 ce 01 00       	call   c002885b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 4b bf 01 00       	call   c002790b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 a8 c5 01 00       	call   c0027f88 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 64 ce 01 00       	call   c002885b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 ee be 01 00       	call   c002790b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 4b c5 01 00       	call   c0027f88 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 07 ce 01 00       	call   c002885b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 91 be 01 00       	call   c002790b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 ee c4 01 00       	call   c0027f88 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 aa cd 01 00       	call   c002885b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 a6 c4 01 00       	call   c0027f88 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 1e cf 01 00       	jmp    c0028a10 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 88 cb 01 00       	call   c0028857 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 46 cb 01 00       	call   c0028839 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 dd c8 01 00       	call   c00285eb <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 de bb 01 00       	call   c002790b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 ad c8 01 00       	call   c00285eb <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 14 c5 01 00       	call   c002826c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 b3 ca 01 00       	call   c0028839 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 b6 ca 01 00       	call   c0028857 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 89 ca 01 00       	call   c0028857 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 82 c4 01 00       	call   c002826c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 0c cc 01 00       	call   c0028a10 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 e7 cb 01 00       	call   c0028a10 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 b9 c7 01 00       	call   c00285eb <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 10 c1 01 00       	call   c0027f5c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 ef c9 01 00       	call   c0028857 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 88 ba 01 00       	call   c002790b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 ac c0 01 00       	call   c0027f5c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 4e cb 01 00       	call   c0028a10 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 86 c3 01 00       	call   c002826c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 03 ba 01 00       	call   c002790b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 2f c6 01 00       	call   c00285eb <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 2f b9 01 00       	call   c002790b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 0f b9 01 00       	call   c002790b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 df c5 01 00       	call   c00285eb <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 2f c8 01 00       	call   c0028855 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 0e bf 01 00       	call   c0027f5c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 90 c9 01 00       	call   c00289f0 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 b7 c7 01 00       	call   c0028839 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 b5 be 01 00       	call   c0027f5c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 33 c5 01 00       	call   c00285eb <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 b6 be 01 00       	call   c0027f88 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 08 c5 01 00       	call   c00285eb <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 6f c1 01 00       	call   c002826c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 ee b7 01 00       	call   c002790b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 b8 c4 01 00       	call   c00285eb <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 04 c7 01 00       	call   c0028857 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 f9 bd 01 00       	call   c0027f88 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 cb bd 01 00       	call   c0027f88 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 04 c4 01 00       	call   c00285eb <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 68 c0 01 00       	call   c002826c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 30 c0 01 00       	call   c002826c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 af b6 01 00       	call   c002790b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 9c c7 01 00       	call   c0028a10 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 6e c3 01 00       	call   c00285eb <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 c5 bc 01 00       	call   c0027f5c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 a4 c5 01 00       	call   c0028857 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 3c b6 01 00       	call   c002790b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 60 bc 01 00       	call   c0027f5c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 02 c7 01 00       	call   c0028a10 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 c3 c4 01 00       	call   c0028857 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 81 c4 01 00       	call   c0028839 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 18 c2 01 00       	call   c00285eb <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 19 b5 01 00       	call   c002790b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 e8 c1 01 00       	call   c00285eb <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 4f be 01 00       	call   c002826c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 ee c3 01 00       	call   c0028839 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 f1 c3 01 00       	call   c0028857 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 c4 c3 01 00       	call   c0028857 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 bd bd 01 00       	call   c002826c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 47 c5 01 00       	call   c0028a10 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 22 c5 01 00       	call   c0028a10 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 f4 c0 01 00       	call   c00285eb <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 4b ba 01 00       	call   c0027f5c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 2a c3 01 00       	call   c0028857 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 c3 b3 01 00       	call   c002790b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 e7 b9 01 00       	call   c0027f5c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 89 c4 01 00       	call   c0028a10 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 c1 bc 01 00       	call   c002826c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 3e b3 01 00       	call   c002790b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 69 bf 01 00       	call   c00285eb <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 69 b2 01 00       	call   c002790b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 49 b2 01 00       	call   c002790b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 19 bf 01 00       	call   c00285eb <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 69 c1 01 00       	call   c0028855 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 47 b8 01 00       	call   c0027f5c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 c9 c2 01 00       	call   c00289f0 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 f0 c0 01 00       	call   c0028839 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 ed b7 01 00       	call   c0027f5c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 6b be 01 00       	call   c00285eb <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 ee b7 01 00       	call   c0027f88 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 40 be 01 00       	call   c00285eb <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 a7 ba 01 00       	call   c002826c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 26 b1 01 00       	call   c002790b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 f0 bd 01 00       	call   c00285eb <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 3c c0 01 00       	call   c0028857 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 31 b7 01 00       	call   c0027f88 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 03 b7 01 00       	call   c0027f88 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 3a bd 01 00       	call   c00285eb <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 9e b9 01 00       	call   c002826c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 6b b9 01 00       	call   c002826c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 ea af 01 00       	call   c002790b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 d7 c0 01 00       	call   c0028a10 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 a9 bc 01 00       	call   c00285eb <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 00 b6 01 00       	call   c0027f5c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 df be 01 00       	call   c0028857 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 77 af 01 00       	call   c002790b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 9b b5 01 00       	call   c0027f5c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 3d c0 01 00       	call   c0028a10 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 fe bd 01 00       	call   c0028857 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 bc bd 01 00       	call   c0028839 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 53 bb 01 00       	call   c00285eb <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 54 ae 01 00       	call   c002790b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 23 bb 01 00       	call   c00285eb <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 8a b7 01 00       	call   c002826c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 29 bd 01 00       	call   c0028839 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 2c bd 01 00       	call   c0028857 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 ff bc 01 00       	call   c0028857 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 f8 b6 01 00       	call   c002826c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 82 be 01 00       	call   c0028a10 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 5d be 01 00       	call   c0028a10 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 2f ba 01 00       	call   c00285eb <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 86 b3 01 00       	call   c0027f5c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 65 bc 01 00       	call   c0028857 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 fe ac 01 00       	call   c002790b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 22 b3 01 00       	call   c0027f5c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 c4 bd 01 00       	call   c0028a10 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 fc b5 01 00       	call   c002826c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 79 ac 01 00       	call   c002790b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 a4 b8 01 00       	call   c00285eb <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 a4 ab 01 00       	call   c002790b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 84 ab 01 00       	call   c002790b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 54 b8 01 00       	call   c00285eb <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 a4 ba 01 00       	call   c0028855 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 82 b1 01 00       	call   c0027f5c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 04 bc 01 00       	call   c00289f0 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 2b ba 01 00       	call   c0028839 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 28 b1 01 00       	call   c0027f5c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 a6 b7 01 00       	call   c00285eb <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 29 b1 01 00       	call   c0027f88 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 7b b7 01 00       	call   c00285eb <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 e2 b3 01 00       	call   c002826c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 61 aa 01 00       	call   c002790b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 2b b7 01 00       	call   c00285eb <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 77 b9 01 00       	call   c0028857 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 6c b0 01 00       	call   c0027f88 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 3e b0 01 00       	call   c0027f88 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 75 b6 01 00       	call   c00285eb <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 d9 b2 01 00       	call   c002826c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 a6 b2 01 00       	call   c002826c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 25 a9 01 00       	call   c002790b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 12 ba 01 00       	call   c0028a10 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 e4 b5 01 00       	call   c00285eb <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 3b af 01 00       	call   c0027f5c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 1a b8 01 00       	call   c0028857 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 b2 a8 01 00       	call   c002790b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 d6 ae 01 00       	call   c0027f5c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 78 b9 01 00       	call   c0028a10 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 39 b7 01 00       	call   c0028857 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 f7 b6 01 00       	call   c0028839 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 8e b4 01 00       	call   c00285eb <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 8f a7 01 00       	call   c002790b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 5e b4 01 00       	call   c00285eb <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 c5 b0 01 00       	call   c002826c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 64 b6 01 00       	call   c0028839 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 67 b6 01 00       	call   c0028857 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 3a b6 01 00       	call   c0028857 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 33 b0 01 00       	call   c002826c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 bd b7 01 00       	call   c0028a10 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 98 b7 01 00       	call   c0028a10 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 6a b3 01 00       	call   c00285eb <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 c1 ac 01 00       	call   c0027f5c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 a0 b5 01 00       	call   c0028857 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 39 a6 01 00       	call   c002790b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 5d ac 01 00       	call   c0027f5c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 ff b6 01 00       	call   c0028a10 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 37 af 01 00       	call   c002826c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 b4 a5 01 00       	call   c002790b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 df b1 01 00       	call   c00285eb <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 df a4 01 00       	call   c002790b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 bf a4 01 00       	call   c002790b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 8f b1 01 00       	call   c00285eb <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 df b3 01 00       	call   c0028855 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 bd aa 01 00       	call   c0027f5c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 3f b5 01 00       	call   c00289f0 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 66 b3 01 00       	call   c0028839 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 63 aa 01 00       	call   c0027f5c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 e1 b0 01 00       	call   c00285eb <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 64 aa 01 00       	call   c0027f88 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 b6 b0 01 00       	call   c00285eb <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 1d ad 01 00       	call   c002826c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 9c a3 01 00       	call   c002790b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 66 b0 01 00       	call   c00285eb <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 b2 b2 01 00       	call   c0028857 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 a7 a9 01 00       	call   c0027f88 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 79 a9 01 00       	call   c0027f88 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 b0 af 01 00       	call   c00285eb <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 14 ac 01 00       	call   c002826c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 e1 ab 01 00       	call   c002826c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 60 a2 01 00       	call   c002790b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 4d b3 01 00       	call   c0028a10 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 1f af 01 00       	call   c00285eb <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 76 a8 01 00       	call   c0027f5c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 55 b1 01 00       	call   c0028857 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 ed a1 01 00       	call   c002790b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 11 a8 01 00       	call   c0027f5c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 b3 b2 01 00       	call   c0028a10 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 71 b0 01 00       	call   c0028857 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 2f b0 01 00       	call   c0028839 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 c6 ad 01 00       	call   c00285eb <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 c7 a0 01 00       	call   c002790b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 96 ad 01 00       	call   c00285eb <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 fd a9 01 00       	call   c002826c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 9c af 01 00       	call   c0028839 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 9f af 01 00       	call   c0028857 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 72 af 01 00       	call   c0028857 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 6b a9 01 00       	call   c002826c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 f5 b0 01 00       	call   c0028a10 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 cc b0 01 00       	call   c0028a10 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 9e ac 01 00       	call   c00285eb <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 f5 a5 01 00       	call   c0027f5c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 d4 ae 01 00       	call   c0028857 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 6d 9f 01 00       	call   c002790b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 95 a5 01 00       	call   c0027f5c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 37 b0 01 00       	call   c0028a10 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 70 a8 01 00       	call   c002826c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 ed 9e 01 00       	call   c002790b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 19 ab 01 00       	call   c00285eb <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 19 9e 01 00       	call   c002790b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 f9 9d 01 00       	call   c002790b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 c9 aa 01 00       	call   c00285eb <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 fd ac 01 00       	call   c0028839 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 f4 a3 01 00       	call   c0027f5c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 76 ae 01 00       	call   c00289f0 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 9d ac 01 00       	call   c0028839 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 97 a3 01 00       	call   c0027f5c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 15 aa 01 00       	call   c00285eb <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 98 a3 01 00       	call   c0027f88 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 ea a9 01 00       	call   c00285eb <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 51 a6 01 00       	call   c002826c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 d0 9c 01 00       	call   c002790b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 9a a9 01 00       	call   c00285eb <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 e6 ab 01 00       	call   c0028857 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 db a2 01 00       	call   c0027f88 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 ad a2 01 00       	call   c0027f88 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 f1 a8 01 00       	call   c00285eb <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 58 a5 01 00       	call   c002826c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 41 a2 01 00       	call   c0027f88 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 fd aa 01 00       	call   c002885b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 f0 a4 01 00       	call   c002826c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 6f 9b 01 00       	call   c002790b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 5c ac 01 00       	call   c0028a10 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 2e a8 01 00       	call   c00285eb <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 85 a1 01 00       	call   c0027f5c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 64 aa 01 00       	call   c0028857 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 fc 9a 01 00       	call   c002790b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 24 a1 01 00       	call   c0027f5c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 c6 ab 01 00       	call   c0028a10 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 a4 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d5c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 98 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d68]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 c0 1a 00 00       	call   c000f96d <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 79 a8 01 00       	call   c0028857 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 37 a8 01 00       	call   c0028839 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 23 a8 01 00       	call   c0028857 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 95 a5 01 00       	call   c00285eb <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 13 9f 01 00       	call   c0027f88 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 65 a5 01 00       	call   c00285eb <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 6b 98 01 00       	call   c002790b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 3a a5 01 00       	call   c00285eb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 8a a7 01 00       	call   c0028855 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 6b 9e 01 00       	call   c0027f5c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 ed a8 01 00       	call   c00289f0 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 14 a7 01 00       	call   c0028839 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 13 9e 01 00       	call   c0027f5c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 91 a4 01 00       	call   c00285eb <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 14 9e 01 00       	call   c0027f88 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 66 a4 01 00       	call   c00285eb <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 cd a0 01 00       	call   c002826c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 4c 97 01 00       	call   c002790b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 74 a0 01 00       	call   c002826c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 fa 96 01 00       	call   c002790b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 e8 a7 01 00       	call   c0028a10 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 ba a3 01 00       	call   c00285eb <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 11 9d 01 00       	call   c0027f5c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 f0 a5 01 00       	call   c0028857 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 89 96 01 00       	call   c002790b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 b5 9c 01 00       	call   c0027f5c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 57 a7 01 00       	call   c0028a10 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 04 a3 01 00       	call   c00285eb <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 81 9c 01 00       	call   c0027f88 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 d2 a2 01 00       	call   c00285eb <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 d8 95 01 00       	call   c002790b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 a8 a2 01 00       	call   c00285eb <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 fc a4 01 00       	call   c0028859 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 d5 9b 01 00       	call   c0027f5c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 57 a6 01 00       	call   c00289f0 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 7e a4 01 00       	call   c0028839 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 7c 9b 01 00       	call   c0027f5c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 fa a1 01 00       	call   c00285eb <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 7d 9b 01 00       	call   c0027f88 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 cf a1 01 00       	call   c00285eb <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 36 9e 01 00       	call   c002826c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 b5 94 01 00       	call   c002790b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 d1 9d 01 00       	call   c002826c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 50 94 01 00       	call   c002790b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 3e a5 01 00       	call   c0028a10 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 10 a1 01 00       	call   c00285eb <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 67 9a 01 00       	call   c0027f5c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 46 a3 01 00       	call   c0028857 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 df 93 01 00       	call   c002790b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 0b 9a 01 00       	call   c0027f5c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 7c a0 01 00       	call   c00285eb <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 82 93 01 00       	call   c002790b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 be a3 02 c0       	mov    eax,0xc002a3be
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 cf a3 02 c0       	mov    eax,0xc002a3cf
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 02 13 00 00       	call   c000f96d <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 04 13 00 00       	call   c000f98d <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 7e 12 00 00       	jmp    c000f95d <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 99 12 00 00       	jmp    c000f97d <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000e708:	48                   	dec    eax
c000e709:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c000e719:	ff 05 c4 fa 02 c0    	inc    DWORD PTR ds:0xc002fac4
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c000e728:	48                   	dec    eax
c000e729:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d c0 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fac0,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c000e743:	e8 9d f7 00 00       	call   c001dee5 <schedule()>
c000e748:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000e74d:	48                   	dec    eax
c000e74e:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 06 a4 02 c0       	push   0xc002a406
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 c8 e5 02 c0       	mov    eax,0xc002e5c8
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 0f a4 02 c0       	push   0xc002a40f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 84 6d 02 c0       	mov    eax,0xc0026d84
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 19 a4 02 c0       	push   0xc002a419
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 b8 6a 02 c0       	mov    eax,0xc0026ab8
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 22 a4 02 c0       	push   0xc002a422
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 84 6e 02 c0       	mov    eax,0xc0026e84
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 2c a4 02 c0       	push   0xc002a42c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 04 6c 02 c0       	mov    eax,0xc0026c04
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 35 a4 02 c0       	push   0xc002a435
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 cc e5 02 c0       	mov    eax,0xc002e5cc
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 42 a4 02 c0       	push   0xc002a442
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 cd e5 02 c0       	mov    eax,0xc002e5cd
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 d5 56 00 00       	call   c0013f78 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 4f a4 02 c0       	push   0xc002a44f
c000e8d3:	e8 df 10 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 66 a4 02 c0 	mov    DWORD PTR [esp],0xc002a466
c000e8e0:	e8 d2 10 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 6c 10 00 00       	call   c000f95d <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c000e900:	68 7f a4 02 c0       	push   0xc002a47f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 bb f1 00 00       	call   c001dac8 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 ef f1 00 c0       	push   0xc000f1ef
c000e91c:	53                   	push   ebx
c000e91d:	e8 9e f3 00 00       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 b3 e6 01 c0       	push   0xc001e6b3
c000e92b:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c000e931:	e8 8a f3 00 00       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 a8 fa 02 c0       	mov    ds:0xc002faa8,eax
c000e93e:	68 e8 a5 02 c0       	push   0xc002a5e8
c000e943:	c6 05 cd e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5cd,0x1
c000e94a:	e8 68 10 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 0b 01 01 00       	call   c001ea5f <Vm::initialise8086()>
c000e954:	e8 e7 43 00 00       	call   c0012d40 <Fs::initVFS()>
c000e959:	c7 04 24 8c a4 02 c0 	mov    DWORD PTR [esp],0xc002a48c
c000e960:	e8 52 10 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e965:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 e8 a5 02 c0       	push   0xc002a5e8
c000e984:	e8 2e 10 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e989:	e8 c2 d9 00 00       	call   c001c350 <Sys::loadSyscalls()>
c000e98e:	e8 b7 b8 00 00       	call   c001a24a <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 a6 a4 02 c0       	push   0xc002a4a6
c000e99d:	68 af a4 02 c0       	push   0xc002a4af
c000e9a2:	e8 68 c7 00 00       	call   c001b10f <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 81 4e 00 00       	call   c0013830 <User::loadClockSettings(int)>
c000e9af:	c7 04 24 0c a6 02 c0 	mov    DWORD PTR [esp],0xc002a60c
c000e9b6:	e8 fc 0f 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 6c 55 00 00       	call   c0013f38 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 b7 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4b7
c000e9d3:	e8 df 0f 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 d5 b3 00 00       	call   c0019db2 <Krnl::startCPUs()>
c000e9dd:	c7 04 24 d1 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4d1
c000e9e4:	e8 ce 0f 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 e2 a4 02 c0       	push   0xc002a4e2
c000e9f8:	e8 23 eb 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 4b ed 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 a8 f6 00 00       	call   c001e0bb <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 fe a4 02 c0       	push   0xc002a4fe
c000ea27:	50                   	push   eax
c000ea28:	e8 c5 55 00 00       	call   c0013ff2 <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 e1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e1,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 85 7e 01 00       	call   c0026a46 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 b8 a0 00 00       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 91 a0 00 00       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 6f a0 00 00       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 4d a0 00 00       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 e0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5e0,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 5b 9f 00 00       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 36 9f 00 00       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 ef 7c 01 00       	call   c0026a00 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 ac 7c 01 00       	call   c00269e0 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 52 9f 00 00       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 07 a5 02 c0       	push   0xc002a507
c000eda4:	e8 aa b5 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 0d a5 02 c0       	push   0xc002a50d
c000eddc:	e8 72 b5 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 2c a6 02 c0       	push   0xc002a62c
c000ee32:	e8 80 0b 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 e0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e0,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 00 d5 02 c0 	sete   BYTE PTR ds:0xc002d500
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 13 a5 02 c0       	push   0xc002a513
c000ee51:	e8 5f 3b 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 29 a5 02 c0       	push   0xc002a529
c000ee62:	e8 4e 3b 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 3d a5 02 c0       	push   0xc002a53d
c000ee70:	e8 40 3b 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000ee75:	c7 04 24 50 a5 02 c0 	mov    DWORD PTR [esp],0xc002a550
c000ee7c:	e8 36 0b 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000ee81:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee88:	e8 d0 0a 00 00       	call   c000f95d <malloc>
c000ee8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee90:	89 c6                	mov    esi,eax
c000ee92:	e8 81 90 00 00       	call   c0017f18 <ACPI::ACPI()>
c000ee97:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ee9d:	c7 04 24 6a a5 02 c0 	mov    DWORD PTR [esp],0xc002a56a
c000eea4:	e8 0e 0b 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000eea9:	59                   	pop    ecx
c000eeaa:	5e                   	pop    esi
c000eeab:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 37 4f 00 00       	call   c0013dee <Device::addChild(Device*)>
c000eeb7:	c7 04 24 50 a6 02 c0 	mov    DWORD PTR [esp],0xc002a650
c000eebe:	e8 f4 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000eec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec6:	e8 ab fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eecb:	c7 04 24 70 a6 02 c0 	mov    DWORD PTR [esp],0xc002a670
c000eed2:	e8 e0 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000eed7:	c7 04 24 84 a5 02 c0 	mov    DWORD PTR [esp],0xc002a584
c000eede:	e8 d4 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000eee3:	58                   	pop    eax
c000eee4:	5a                   	pop    edx
c000eee5:	6a 01                	push   0x1
c000eee7:	53                   	push   ebx
c000eee8:	e8 1f ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eeed:	c7 04 24 b7 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4b7
c000eef4:	e8 be 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000eef9:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef00:	e8 58 0a 00 00       	call   c000f95d <malloc>
c000ef05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef08:	89 c6                	mov    esi,eax
c000ef0a:	e8 5d 9e 00 00       	call   c0018d6c <CPU::CPU()>
c000ef0f:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef15:	59                   	pop    ecx
c000ef16:	58                   	pop    eax
c000ef17:	56                   	push   esi
c000ef18:	53                   	push   ebx
c000ef19:	e8 d0 4e 00 00       	call   c0013dee <Device::addChild(Device*)>
c000ef1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef24:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef2a:	6a 00                	push   0x0
c000ef2c:	6a 00                	push   0x0
c000ef2e:	50                   	push   eax
c000ef2f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef32:	83 c4 14             	add    esp,0x14
c000ef35:	68 90 a6 02 c0       	push   0xc002a690
c000ef3a:	e8 78 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000ef3f:	e8 42 54 00 00       	call   c0014386 <setupFPU()>
c000ef44:	83 c4 10             	add    esp,0x10
c000ef47:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef4d:	85 c0                	test   eax,eax
c000ef4f:	74 1f                	je     c000ef70 <Computer::open(int, int, void*)+0x14c>
c000ef51:	83 ec 08             	sub    esp,0x8
c000ef54:	50                   	push   eax
c000ef55:	53                   	push   ebx
c000ef56:	e8 93 4e 00 00       	call   c0013dee <Device::addChild(Device*)>
c000ef5b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef61:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef63:	6a 00                	push   0x0
c000ef65:	6a 00                	push   0x0
c000ef67:	6a 00                	push   0x0
c000ef69:	50                   	push   eax
c000ef6a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef6d:	83 c4 20             	add    esp,0x20
c000ef70:	83 ec 0c             	sub    esp,0xc
c000ef73:	68 95 a5 02 c0       	push   0xc002a595
c000ef78:	e8 3a 0a 00 00       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000ef7d:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef84:	e8 59 ee 00 00       	call   c001dde2 <setupMultitasking(void (*)())>
c000ef89:	83 c4 14             	add    esp,0x14
c000ef8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef91:	5b                   	pop    ebx
c000ef92:	5e                   	pop    esi
c000ef93:	c3                   	ret    

c000ef94 <Computer::disableNMI()>:
c000ef94:	6a 00                	push   0x0
c000ef96:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef9a:	e8 6d fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef9f:	58                   	pop    eax
c000efa0:	5a                   	pop    edx
c000efa1:	c3                   	ret    

c000efa2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efa6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efad:	19 c0                	sbb    eax,eax
c000efaf:	83 e0 80             	and    eax,0xffffff80
c000efb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efb6:	e6 70                	out    0x70,al
c000efb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbc:	e6 71                	out    0x71,al
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <Computer::handleNMI()>:
c000efc0:	56                   	push   esi
c000efc1:	53                   	push   ebx
c000efc2:	83 ec 10             	sub    esp,0x10
c000efc5:	e4 92                	in     al,0x92
c000efc7:	89 c6                	mov    esi,eax
c000efc9:	e4 61                	in     al,0x61
c000efcb:	68 b0 a5 02 c0       	push   0xc002a5b0
c000efd0:	88 c3                	mov    bl,al
c000efd2:	e8 de 39 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	83 e6 10             	and    esi,0x10
c000efdd:	75 0d                	jne    c000efec <Computer::handleNMI()+0x2c>
c000efdf:	f6 c3 40             	test   bl,0x40
c000efe2:	75 1d                	jne    c000f001 <Computer::handleNMI()+0x41>
c000efe4:	84 db                	test   bl,bl
c000efe6:	78 2d                	js     c000f015 <Computer::handleNMI()+0x55>
c000efe8:	58                   	pop    eax
c000efe9:	5b                   	pop    ebx
c000efea:	5e                   	pop    esi
c000efeb:	c3                   	ret    
c000efec:	83 ec 0c             	sub    esp,0xc
c000efef:	68 c1 a5 02 c0       	push   0xc002a5c1
c000eff4:	e8 5a b3 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000eff9:	83 c4 10             	add    esp,0x10
c000effc:	f6 c3 40             	test   bl,0x40
c000efff:	74 e3                	je     c000efe4 <Computer::handleNMI()+0x24>
c000f001:	83 ec 0c             	sub    esp,0xc
c000f004:	68 ce a5 02 c0       	push   0xc002a5ce
c000f009:	e8 45 b3 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	84 db                	test   bl,bl
c000f013:	79 d3                	jns    c000efe8 <Computer::handleNMI()+0x28>
c000f015:	c7 44 24 10 d8 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a5d8
c000f01d:	5a                   	pop    edx
c000f01e:	5b                   	pop    ebx
c000f01f:	5e                   	pop    esi
c000f020:	e9 2e b3 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c000f025:	90                   	nop

c000f026 <Computer::setDiskActivityLight(int, bool)>:
c000f026:	56                   	push   esi
c000f027:	53                   	push   ebx
c000f028:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f02c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f031:	77 1b                	ja     c000f04e <Computer::setDiskActivityLight(int, bool)+0x28>
c000f033:	e4 92                	in     al,0x92
c000f035:	bb 40 00 00 00       	mov    ebx,0x40
c000f03a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f03e:	89 da                	mov    edx,ebx
c000f040:	d3 e2                	shl    edx,cl
c000f042:	89 f1                	mov    ecx,esi
c000f044:	f7 d2                	not    edx
c000f046:	d3 e3                	shl    ebx,cl
c000f048:	21 d0                	and    eax,edx
c000f04a:	09 d8                	or     eax,ebx
c000f04c:	e6 92                	out    0x92,al
c000f04e:	5b                   	pop    ebx
c000f04f:	5e                   	pop    esi
c000f050:	c3                   	ret    
c000f051:	90                   	nop

c000f052 <GDTEntry::setBase(unsigned int)>:
c000f052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f056:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f05a:	89 c1                	mov    ecx,eax
c000f05c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f060:	c1 e9 10             	shr    ecx,0x10
c000f063:	c1 e8 18             	shr    eax,0x18
c000f066:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f069:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f06c:	c3                   	ret    
c000f06d:	90                   	nop

c000f06e <GDTEntry::setLimit(unsigned int)>:
c000f06e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f072:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f076:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f079:	66 89 01             	mov    WORD PTR [ecx],ax
c000f07c:	83 e2 f0             	and    edx,0xfffffff0
c000f07f:	c1 e8 10             	shr    eax,0x10
c000f082:	83 e0 0f             	and    eax,0xf
c000f085:	09 d0                	or     eax,edx
c000f087:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f08a:	c3                   	ret    
c000f08b:	90                   	nop

c000f08c <GDT::GDT()>:
c000f08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a0:	90                   	nop
c000f0a1:	c3                   	ret    

c000f0a2 <GDT::addEntry(GDTEntry)>:
c000f0a2:	53                   	push   ebx
c000f0a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0b5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0b9:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0bc:	c1 e0 03             	shl    eax,0x3
c000f0bf:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0c1:	5b                   	pop    ebx
c000f0c2:	c3                   	ret    
c000f0c3:	90                   	nop

c000f0c4 <GDT::getNumberOfEntries()>:
c000f0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ca:	c3                   	ret    
c000f0cb:	90                   	nop

c000f0cc <GDT::flush()>:
c000f0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0d2:	83 c0 04             	add    eax,0x4
c000f0d5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0dc:	a3 d2 e5 02 c0       	mov    ds:0xc002e5d2,eax
c000f0e1:	66 89 15 d0 e5 02 c0 	mov    WORD PTR ds:0xc002e5d0,dx
c000f0e8:	e9 63 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0ed:	90                   	nop

c000f0ee <GDT::setup()>:
c000f0ee:	55                   	push   ebp
c000f0ef:	57                   	push   edi
c000f0f0:	56                   	push   esi
c000f0f1:	53                   	push   ebx
c000f0f2:	83 ec 3c             	sub    esp,0x3c
c000f0f5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0f9:	6a 00                	push   0x0
c000f0fb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ff:	53                   	push   ebx
c000f100:	e8 4d ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f105:	6a 00                	push   0x0
c000f107:	53                   	push   ebx
c000f108:	e8 61 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f10d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f115:	6a 00                	push   0x0
c000f117:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f11b:	53                   	push   ebx
c000f11c:	e8 31 ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f121:	68 ff ff ff 00       	push   0xffffff
c000f126:	53                   	push   ebx
c000f127:	e8 42 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f12c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f130:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f135:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f13a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f147:	53                   	push   ebx
c000f148:	e8 05 ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f14d:	68 ff ff ff 00       	push   0xffffff
c000f152:	53                   	push   ebx
c000f153:	e8 16 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f158:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f15c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f160:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f164:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f168:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f16c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f171:	0d 00 92 c0 00       	or     eax,0xc09200
c000f176:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f17a:	89 d8                	mov    eax,ebx
c000f17c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f180:	80 cc 60             	or     ah,0x60
c000f183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f187:	83 c4 0c             	add    esp,0xc
c000f18a:	89 f8                	mov    eax,edi
c000f18c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f190:	80 cc 60             	or     ah,0x60
c000f193:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f197:	89 c7                	mov    edi,eax
c000f199:	55                   	push   ebp
c000f19a:	e8 03 ff ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f19f:	83 c4 0c             	add    esp,0xc
c000f1a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1aa:	55                   	push   ebp
c000f1ab:	e8 f2 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1b0:	83 c4 0c             	add    esp,0xc
c000f1b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1bb:	55                   	push   ebp
c000f1bc:	e8 e1 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1c1:	83 c4 0c             	add    esp,0xc
c000f1c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1cc:	53                   	push   ebx
c000f1cd:	51                   	push   ecx
c000f1ce:	55                   	push   ebp
c000f1cf:	e8 ce fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1d4:	83 c4 0c             	add    esp,0xc
c000f1d7:	57                   	push   edi
c000f1d8:	56                   	push   esi
c000f1d9:	55                   	push   ebp
c000f1da:	e8 c3 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1e2:	e8 e5 fe ff ff       	call   c000f0cc <GDT::flush()>
c000f1e7:	83 c4 4c             	add    esp,0x4c
c000f1ea:	5b                   	pop    ebx
c000f1eb:	5e                   	pop    esi
c000f1ec:	5f                   	pop    edi
c000f1ed:	5d                   	pop    ebp
c000f1ee:	c3                   	ret    

c000f1ef <idleFunction(void*)>:
c000f1ef:	53                   	push   ebx
c000f1f0:	83 ec 08             	sub    esp,0x8
c000f1f3:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000f1f8:	48                   	dec    eax
c000f1f9:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000f1fe:	75 01                	jne    c000f201 <idleFunction(void*)+0x12>
c000f200:	fb                   	sti    
c000f201:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000f206:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f20c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f213:	74 3c                	je     c000f251 <idleFunction(void*)+0x62>
c000f215:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f21c:	74 33                	je     c000f251 <idleFunction(void*)+0x62>
c000f21e:	31 db                	xor    ebx,ebx
c000f220:	52                   	push   edx
c000f221:	52                   	push   edx
c000f222:	68 e1 00 00 00       	push   0xe1
c000f227:	50                   	push   eax
c000f228:	e8 55 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f22d:	53                   	push   ebx
c000f22e:	83 e0 02             	and    eax,0x2
c000f231:	50                   	push   eax
c000f232:	68 e1 00 00 00       	push   0xe1
c000f237:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c000f23d:	e8 6c fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f242:	83 c4 20             	add    esp,0x20
c000f245:	e8 35 10 ff ff       	call   c000027f <doTPAUSE>
c000f24a:	e8 41 98 01 00       	call   c0028a90 <idleCommon()>
c000f24f:	eb f4                	jmp    c000f245 <idleFunction(void*)+0x56>
c000f251:	fb                   	sti    
c000f252:	f4                   	hlt    
c000f253:	e8 38 98 01 00       	call   c0028a90 <idleCommon()>
c000f258:	eb f7                	jmp    c000f251 <idleFunction(void*)+0x62>

c000f25a <IDTEntry::IDTEntry(bool)>:
c000f25a:	83 ec 04             	sub    esp,0x4
c000f25d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f261:	88 04 24             	mov    BYTE PTR [esp],al
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f272:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f27d:	83 e2 f0             	and    edx,0xfffffff0
c000f280:	83 ca 0e             	or     edx,0xe
c000f283:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f28a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28d:	83 e2 ef             	and    edx,0xffffffef
c000f290:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f293:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f297:	74 04                	je     c000f29d <IDTEntry::IDTEntry(bool)+0x43>
c000f299:	b2 03                	mov    dl,0x3
c000f29b:	eb 02                	jmp    c000f29f <IDTEntry::IDTEntry(bool)+0x45>
c000f29d:	b2 00                	mov    dl,0x0
c000f29f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a3:	83 e2 03             	and    edx,0x3
c000f2a6:	88 d1                	mov    cl,dl
c000f2a8:	c1 e1 05             	shl    ecx,0x5
c000f2ab:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ae:	83 e2 9f             	and    edx,0xffffff9f
c000f2b1:	09 ca                	or     edx,ecx
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 ca 80             	or     edx,0xffffff80
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	90                   	nop
c000f2c4:	83 c4 04             	add    esp,0x4
c000f2c7:	c3                   	ret    

c000f2c8 <IDTEntry::setOffset(unsigned int)>:
c000f2c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d0:	66 89 02             	mov    WORD PTR [edx],ax
c000f2d3:	c1 e8 10             	shr    eax,0x10
c000f2d6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2da:	c3                   	ret    
c000f2db:	90                   	nop

c000f2dc <IDT::IDT()>:
c000f2dc:	90                   	nop
c000f2dd:	c3                   	ret    

c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2e2:	83 c0 30             	add    eax,0x30
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(IDTEntry, int)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2f7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2fa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2fe:	5b                   	pop    ebx
c000f2ff:	c3                   	ret    

c000f300 <IDT::addEntry(int, void (*)(), bool)>:
c000f300:	53                   	push   ebx
c000f301:	83 ec 10             	sub    esp,0x10
c000f304:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f309:	50                   	push   eax
c000f30a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f30e:	53                   	push   ebx
c000f30f:	e8 46 ff ff ff       	call   c000f25a <IDTEntry::IDTEntry(bool)>
c000f314:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f318:	53                   	push   ebx
c000f319:	e8 aa ff ff ff       	call   c000f2c8 <IDTEntry::setOffset(unsigned int)>
c000f31e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f326:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f32a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f32e:	e8 b3 ff ff ff       	call   c000f2e6 <IDT::addEntry(IDTEntry, int)>
c000f333:	83 c4 30             	add    esp,0x30
c000f336:	5b                   	pop    ebx
c000f337:	c3                   	ret    

c000f338 <IDT::flush()>:
c000f338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f33c:	66 c7 05 d8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5d8,0x7ff
c000f345:	a3 da e5 02 c0       	mov    ds:0xc002e5da,eax
c000f34a:	0f 01 1d d8 e5 02 c0 	lidtd  ds:0xc002e5d8
c000f351:	c3                   	ret    

c000f352 <IDT::setup()>:
c000f352:	57                   	push   edi
c000f353:	56                   	push   esi
c000f354:	53                   	push   ebx
c000f355:	83 ec 10             	sub    esp,0x10
c000f358:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f35c:	6a 00                	push   0x0
c000f35e:	68 70 04 00 c0       	push   0xc0000470
c000f363:	6a 00                	push   0x0
c000f365:	53                   	push   ebx
c000f366:	e8 95 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f36b:	6a 00                	push   0x0
c000f36d:	68 80 04 00 c0       	push   0xc0000480
c000f372:	6a 01                	push   0x1
c000f374:	53                   	push   ebx
c000f375:	e8 86 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f37a:	83 c4 20             	add    esp,0x20
c000f37d:	6a 00                	push   0x0
c000f37f:	68 8a 04 00 c0       	push   0xc000048a
c000f384:	6a 02                	push   0x2
c000f386:	53                   	push   ebx
c000f387:	e8 74 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f38c:	6a 00                	push   0x0
c000f38e:	68 94 04 00 c0       	push   0xc0000494
c000f393:	6a 03                	push   0x3
c000f395:	53                   	push   ebx
c000f396:	e8 65 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	83 c4 20             	add    esp,0x20
c000f39e:	6a 00                	push   0x0
c000f3a0:	68 9e 04 00 c0       	push   0xc000049e
c000f3a5:	6a 04                	push   0x4
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 53 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 a8 04 00 c0       	push   0xc00004a8
c000f3b4:	6a 05                	push   0x5
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 44 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	83 c4 20             	add    esp,0x20
c000f3bf:	6a 00                	push   0x0
c000f3c1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3c6:	6a 06                	push   0x6
c000f3c8:	53                   	push   ebx
c000f3c9:	e8 32 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 bc 04 00 c0       	push   0xc00004bc
c000f3d5:	6a 07                	push   0x7
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 23 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	83 c4 20             	add    esp,0x20
c000f3e0:	6a 00                	push   0x0
c000f3e2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3e7:	6a 08                	push   0x8
c000f3e9:	53                   	push   ebx
c000f3ea:	e8 11 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 ce 04 00 c0       	push   0xc00004ce
c000f3f6:	6a 09                	push   0x9
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 02 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	83 c4 20             	add    esp,0x20
c000f401:	6a 00                	push   0x0
c000f403:	68 d8 04 00 c0       	push   0xc00004d8
c000f408:	6a 0a                	push   0xa
c000f40a:	53                   	push   ebx
c000f40b:	e8 f0 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f410:	6a 00                	push   0x0
c000f412:	68 e0 04 00 c0       	push   0xc00004e0
c000f417:	6a 0b                	push   0xb
c000f419:	53                   	push   ebx
c000f41a:	e8 e1 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	83 c4 20             	add    esp,0x20
c000f422:	6a 00                	push   0x0
c000f424:	68 e8 04 00 c0       	push   0xc00004e8
c000f429:	6a 0c                	push   0xc
c000f42b:	53                   	push   ebx
c000f42c:	e8 cf fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f431:	6a 00                	push   0x0
c000f433:	68 f0 04 00 c0       	push   0xc00004f0
c000f438:	6a 0d                	push   0xd
c000f43a:	53                   	push   ebx
c000f43b:	e8 c0 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	83 c4 20             	add    esp,0x20
c000f443:	6a 00                	push   0x0
c000f445:	68 f8 04 00 c0       	push   0xc00004f8
c000f44a:	6a 0e                	push   0xe
c000f44c:	53                   	push   ebx
c000f44d:	e8 ae fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f452:	6a 00                	push   0x0
c000f454:	68 00 05 00 c0       	push   0xc0000500
c000f459:	6a 0f                	push   0xf
c000f45b:	53                   	push   ebx
c000f45c:	e8 9f fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	83 c4 20             	add    esp,0x20
c000f464:	6a 00                	push   0x0
c000f466:	68 0a 05 00 c0       	push   0xc000050a
c000f46b:	6a 10                	push   0x10
c000f46d:	53                   	push   ebx
c000f46e:	e8 8d fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f473:	6a 00                	push   0x0
c000f475:	68 14 05 00 c0       	push   0xc0000514
c000f47a:	6a 11                	push   0x11
c000f47c:	53                   	push   ebx
c000f47d:	e8 7e fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	83 c4 20             	add    esp,0x20
c000f485:	6a 00                	push   0x0
c000f487:	68 1e 05 00 c0       	push   0xc000051e
c000f48c:	6a 12                	push   0x12
c000f48e:	53                   	push   ebx
c000f48f:	e8 6c fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f494:	6a 01                	push   0x1
c000f496:	68 b8 05 00 c0       	push   0xc00005b8
c000f49b:	6a 60                	push   0x60
c000f49d:	53                   	push   ebx
c000f49e:	e8 5d fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	83 c4 20             	add    esp,0x20
c000f4a6:	6a 00                	push   0x0
c000f4a8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4ad:	6a 20                	push   0x20
c000f4af:	53                   	push   ebx
c000f4b0:	e8 4b fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4bc:	6a 21                	push   0x21
c000f4be:	53                   	push   ebx
c000f4bf:	e8 3c fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	83 c4 20             	add    esp,0x20
c000f4c7:	6a 00                	push   0x0
c000f4c9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4ce:	6a 22                	push   0x22
c000f4d0:	53                   	push   ebx
c000f4d1:	e8 2a fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 28 05 00 c0       	push   0xc0000528
c000f4dd:	6a 23                	push   0x23
c000f4df:	53                   	push   ebx
c000f4e0:	e8 1b fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	83 c4 20             	add    esp,0x20
c000f4e8:	6a 00                	push   0x0
c000f4ea:	68 32 05 00 c0       	push   0xc0000532
c000f4ef:	6a 24                	push   0x24
c000f4f1:	53                   	push   ebx
c000f4f2:	e8 09 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 3c 05 00 c0       	push   0xc000053c
c000f4fe:	6a 25                	push   0x25
c000f500:	53                   	push   ebx
c000f501:	e8 fa fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	83 c4 20             	add    esp,0x20
c000f509:	6a 00                	push   0x0
c000f50b:	68 46 05 00 c0       	push   0xc0000546
c000f510:	6a 26                	push   0x26
c000f512:	53                   	push   ebx
c000f513:	e8 e8 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f518:	6a 00                	push   0x0
c000f51a:	68 50 05 00 c0       	push   0xc0000550
c000f51f:	6a 27                	push   0x27
c000f521:	53                   	push   ebx
c000f522:	e8 d9 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	83 c4 20             	add    esp,0x20
c000f52a:	6a 00                	push   0x0
c000f52c:	68 5a 05 00 c0       	push   0xc000055a
c000f531:	6a 28                	push   0x28
c000f533:	53                   	push   ebx
c000f534:	e8 c7 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f539:	6a 00                	push   0x0
c000f53b:	68 64 05 00 c0       	push   0xc0000564
c000f540:	6a 29                	push   0x29
c000f542:	53                   	push   ebx
c000f543:	e8 b8 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	83 c4 20             	add    esp,0x20
c000f54b:	6a 00                	push   0x0
c000f54d:	68 6e 05 00 c0       	push   0xc000056e
c000f552:	6a 2a                	push   0x2a
c000f554:	53                   	push   ebx
c000f555:	e8 a6 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f55a:	6a 00                	push   0x0
c000f55c:	68 78 05 00 c0       	push   0xc0000578
c000f561:	6a 2b                	push   0x2b
c000f563:	53                   	push   ebx
c000f564:	e8 97 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	83 c4 20             	add    esp,0x20
c000f56c:	6a 00                	push   0x0
c000f56e:	68 82 05 00 c0       	push   0xc0000582
c000f573:	6a 2c                	push   0x2c
c000f575:	53                   	push   ebx
c000f576:	e8 85 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f57b:	6a 00                	push   0x0
c000f57d:	68 8c 05 00 c0       	push   0xc000058c
c000f582:	6a 2d                	push   0x2d
c000f584:	53                   	push   ebx
c000f585:	e8 76 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	83 c4 20             	add    esp,0x20
c000f58d:	6a 00                	push   0x0
c000f58f:	68 96 05 00 c0       	push   0xc0000596
c000f594:	6a 2e                	push   0x2e
c000f596:	53                   	push   ebx
c000f597:	e8 64 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f59c:	6a 00                	push   0x0
c000f59e:	68 a0 05 00 c0       	push   0xc00005a0
c000f5a3:	6a 2f                	push   0x2f
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 55 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	83 c4 20             	add    esp,0x20
c000f5ae:	6a 00                	push   0x0
c000f5b0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5b5:	6a 30                	push   0x30
c000f5b7:	53                   	push   ebx
c000f5b8:	e8 43 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 00 06 00 c0       	push   0xc0000600
c000f5c4:	6a 31                	push   0x31
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 34 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	83 c4 20             	add    esp,0x20
c000f5cf:	6a 00                	push   0x0
c000f5d1:	68 0a 06 00 c0       	push   0xc000060a
c000f5d6:	6a 32                	push   0x32
c000f5d8:	53                   	push   ebx
c000f5d9:	e8 22 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 14 06 00 c0       	push   0xc0000614
c000f5e5:	6a 33                	push   0x33
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 13 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	83 c4 20             	add    esp,0x20
c000f5f0:	6a 00                	push   0x0
c000f5f2:	68 1e 06 00 c0       	push   0xc000061e
c000f5f7:	6a 34                	push   0x34
c000f5f9:	53                   	push   ebx
c000f5fa:	e8 01 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ff:	6a 00                	push   0x0
c000f601:	68 28 06 00 c0       	push   0xc0000628
c000f606:	6a 35                	push   0x35
c000f608:	53                   	push   ebx
c000f609:	e8 f2 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	83 c4 20             	add    esp,0x20
c000f611:	6a 00                	push   0x0
c000f613:	68 32 06 00 c0       	push   0xc0000632
c000f618:	6a 36                	push   0x36
c000f61a:	53                   	push   ebx
c000f61b:	e8 e0 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f620:	6a 00                	push   0x0
c000f622:	68 3c 06 00 c0       	push   0xc000063c
c000f627:	6a 37                	push   0x37
c000f629:	53                   	push   ebx
c000f62a:	e8 d1 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	83 c4 1c             	add    esp,0x1c
c000f632:	6a 03                	push   0x3
c000f634:	6a 02                	push   0x2
c000f636:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c000f63c:	e8 4b 27 00 00       	call   c0011d8c <VAS::allocatePages(int, int)>
c000f641:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f648:	89 c6                	mov    esi,eax
c000f64a:	e8 0e 03 00 00       	call   c000f95d <malloc>
c000f64f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f655:	89 04 24             	mov    DWORD PTR [esp],eax
c000f658:	89 c7                	mov    edi,eax
c000f65a:	e8 cb 18 00 00       	call   c0010f2a <TSS::TSS()>
c000f65f:	83 c4 0c             	add    esp,0xc
c000f662:	68 c6 04 00 c0       	push   0xc00004c6
c000f667:	56                   	push   esi
c000f668:	57                   	push   edi
c000f669:	e8 fc 18 00 00       	call   c0010f6a <TSS::setup(unsigned long, unsigned long)>
c000f66e:	89 c6                	mov    esi,eax
c000f670:	58                   	pop    eax
c000f671:	5a                   	pop    edx
c000f672:	6a 00                	push   0x0
c000f674:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f678:	50                   	push   eax
c000f679:	e8 dc fb ff ff       	call   c000f25a <IDTEntry::IDTEntry(bool)>
c000f67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f682:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f687:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f68e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f698:	80 ce 05             	or     dh,0x5
c000f69b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f69e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6a6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ac:	e8 87 fc ff ff       	call   c000f338 <IDT::flush()>
c000f6b1:	83 c4 20             	add    esp,0x20
c000f6b4:	5b                   	pop    ebx
c000f6b5:	5e                   	pop    esi
c000f6b6:	5f                   	pop    edi
c000f6b7:	c3                   	ret    

c000f6b8 <sbrk>:
c000f6b8:	55                   	push   ebp
c000f6b9:	57                   	push   edi
c000f6ba:	56                   	push   esi
c000f6bb:	53                   	push   ebx
c000f6bc:	83 ec 24             	sub    esp,0x24
c000f6bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6c3:	53                   	push   ebx
c000f6c4:	68 e0 a6 02 c0       	push   0xc002a6e0
c000f6c9:	e8 e7 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f6ce:	83 c4 10             	add    esp,0x10
c000f6d1:	85 db                	test   ebx,ebx
c000f6d3:	74 6b                	je     c000f740 <sbrk+0x88>
c000f6d5:	78 73                	js     c000f74a <sbrk+0x92>
c000f6d7:	83 ec 0c             	sub    esp,0xc
c000f6da:	68 fe a6 02 c0       	push   0xc002a6fe
c000f6df:	e8 d1 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f6e4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000f6e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6ef:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000f6f5:	83 e0 01             	and    eax,0x1
c000f6f8:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000f6fc:	c7 04 24 04 a7 02 c0 	mov    DWORD PTR [esp],0xc002a704
c000f703:	e8 ad 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f708:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c000f70d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f711:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f717:	89 d8                	mov    eax,ebx
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	85 db                	test   ebx,ebx
c000f71e:	78 45                	js     c000f765 <sbrk+0xad>
c000f720:	c1 f8 0c             	sar    eax,0xc
c000f723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f727:	89 c7                	mov    edi,eax
c000f729:	83 ec 0c             	sub    esp,0xc
c000f72c:	68 0a a7 02 c0       	push   0xc002a70a
c000f731:	e8 7f 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	be 00 00 00 00       	mov    esi,0x0
c000f73e:	eb 65                	jmp    c000f7a5 <sbrk+0xed>
c000f740:	a1 88 d3 02 c0       	mov    eax,ds:0xc002d388
c000f745:	e9 ec 00 00 00       	jmp    c000f836 <sbrk+0x17e>
c000f74a:	83 ec 08             	sub    esp,0x8
c000f74d:	53                   	push   ebx
c000f74e:	68 64 a7 02 c0       	push   0xc002a764
c000f753:	e8 5d 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f760:	e9 d1 00 00 00       	jmp    c000f836 <sbrk+0x17e>
c000f765:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f76b:	eb b3                	jmp    c000f720 <sbrk+0x68>
c000f76d:	83 ec 0c             	sub    esp,0xc
c000f770:	68 1c a7 02 c0       	push   0xc002a71c
c000f775:	e8 3b 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f77a:	8b 1d 88 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d388
c000f780:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f783:	83 c4 10             	add    esp,0x10
c000f786:	83 ec 0c             	sub    esp,0xc
c000f789:	68 22 a7 02 c0       	push   0xc002a722
c000f78e:	e8 22 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f793:	81 05 88 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d388,0x1000
c000f79d:	46                   	inc    esi
c000f79e:	83 c4 10             	add    esp,0x10
c000f7a1:	39 f7                	cmp    edi,esi
c000f7a3:	74 44                	je     c000f7e9 <sbrk+0x131>
c000f7a5:	83 ec 0c             	sub    esp,0xc
c000f7a8:	68 10 a7 02 c0       	push   0xc002a710
c000f7ad:	e8 03 32 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f7b2:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c000f7b8:	8b 2d 88 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d388
c000f7be:	e8 96 05 00 00       	call   c000fd59 <Phys::allocatePage()>
c000f7c3:	68 01 04 00 00       	push   0x401
c000f7c8:	55                   	push   ebp
c000f7c9:	50                   	push   eax
c000f7ca:	53                   	push   ebx
c000f7cb:	e8 ba 24 00 00       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7d0:	83 c4 14             	add    esp,0x14
c000f7d3:	68 16 a7 02 c0       	push   0xc002a716
c000f7d8:	e8 d8 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7e5:	74 9f                	je     c000f786 <sbrk+0xce>
c000f7e7:	eb 84                	jmp    c000f76d <sbrk+0xb5>
c000f7e9:	83 ec 0c             	sub    esp,0xc
c000f7ec:	68 28 a7 02 c0       	push   0xc002a728
c000f7f1:	e8 bf 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f7f6:	83 c4 10             	add    esp,0x10
c000f7f9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7fe:	75 3e                	jne    c000f83e <sbrk+0x186>
c000f800:	83 ec 0c             	sub    esp,0xc
c000f803:	68 b4 bc 02 c0       	push   0xc002bcb4
c000f808:	e8 a8 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f80d:	0f 20 d8             	mov    eax,cr3
c000f810:	0f 22 d8             	mov    cr3,eax
c000f813:	c7 04 24 2e a7 02 c0 	mov    DWORD PTR [esp],0xc002a72e
c000f81a:	e8 96 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f81f:	83 c4 10             	add    esp,0x10
c000f822:	83 ec 0c             	sub    esp,0xc
c000f825:	68 52 a7 02 c0       	push   0xc002a752
c000f82a:	e8 86 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f82f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	83 c4 1c             	add    esp,0x1c
c000f839:	5b                   	pop    ebx
c000f83a:	5e                   	pop    esi
c000f83b:	5f                   	pop    edi
c000f83c:	5d                   	pop    ebp
c000f83d:	c3                   	ret    
c000f83e:	83 ec 0c             	sub    esp,0xc
c000f841:	68 34 a7 02 c0       	push   0xc002a734
c000f846:	e8 6a 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f84b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f84f:	89 c3                	mov    ebx,eax
c000f851:	c1 eb 0a             	shr    ebx,0xa
c000f854:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f85a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f860:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f864:	c1 e6 0c             	shl    esi,0xc
c000f867:	01 c6                	add    esi,eax
c000f869:	c1 ee 0a             	shr    esi,0xa
c000f86c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000f872:	81 ee 00 00 40 00    	sub    esi,0x400000
c000f878:	c7 04 24 3a a7 02 c0 	mov    DWORD PTR [esp],0xc002a73a
c000f87f:	e8 31 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	39 f3                	cmp    ebx,esi
c000f889:	77 29                	ja     c000f8b4 <sbrk+0x1fc>
c000f88b:	83 ec 0c             	sub    esp,0xc
c000f88e:	68 40 a7 02 c0       	push   0xc002a740
c000f893:	e8 1d 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f898:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f89b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f8a1:	c7 04 24 46 a7 02 c0 	mov    DWORD PTR [esp],0xc002a746
c000f8a8:	e8 08 31 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	39 de                	cmp    esi,ebx
c000f8b2:	73 d7                	jae    c000f88b <sbrk+0x1d3>
c000f8b4:	83 ec 0c             	sub    esp,0xc
c000f8b7:	68 4c a7 02 c0       	push   0xc002a74c
c000f8bc:	e8 f4 30 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	e9 59 ff ff ff       	jmp    c000f822 <sbrk+0x16a>

c000f8c9 <mmap>:
c000f8c9:	83 ec 18             	sub    esp,0x18
c000f8cc:	68 58 a7 02 c0       	push   0xc002a758
c000f8d1:	e8 7d aa 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000f8d6:	b8 00 00 00 00       	mov    eax,0x0
c000f8db:	83 c4 1c             	add    esp,0x1c
c000f8de:	c3                   	ret    

c000f8df <munmap>:
c000f8df:	83 ec 18             	sub    esp,0x18
c000f8e2:	68 5d a7 02 c0       	push   0xc002a75d
c000f8e7:	e8 67 aa 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000f8ec:	b8 00 00 00 00       	mov    eax,0x0
c000f8f1:	83 c4 1c             	add    esp,0x1c
c000f8f4:	c3                   	ret    

c000f8f5 <liballoc_lock()>:
c000f8f5:	fa                   	cli    
c000f8f6:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c000f8fc:	b8 00 00 00 00       	mov    eax,0x0
c000f901:	c3                   	ret    

c000f902 <liballoc_unlock()>:
c000f902:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000f907:	48                   	dec    eax
c000f908:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000f90d:	75 01                	jne    c000f910 <liballoc_unlock()+0xe>
c000f90f:	fb                   	sti    
c000f910:	b8 00 00 00 00       	mov    eax,0x0
c000f915:	c3                   	ret    

c000f916 <liballoc_alloc(int)>:
c000f916:	83 ec 10             	sub    esp,0x10
c000f919:	6a 01                	push   0x1
c000f91b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f91f:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c000f925:	e8 62 24 00 00       	call   c0011d8c <VAS::allocatePages(int, int)>
c000f92a:	83 c4 1c             	add    esp,0x1c
c000f92d:	c3                   	ret    

c000f92e <liballoc_free(void*, int)>:
c000f92e:	83 ec 14             	sub    esp,0x14
c000f931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f935:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c000f93b:	e8 f6 20 00 00       	call   c0011a36 <VAS::freeAllocatedPages(unsigned long)>
c000f940:	b8 00 00 00 00       	mov    eax,0x0
c000f945:	83 c4 1c             	add    esp,0x1c
c000f948:	c3                   	ret    

c000f949 <realloc>:
c000f949:	83 ec 14             	sub    esp,0x14
c000f94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f954:	e8 d3 1c ff ff       	call   c000162c <dlrealloc>
c000f959:	83 c4 1c             	add    esp,0x1c
c000f95c:	c3                   	ret    

c000f95d <malloc>:
c000f95d:	83 ec 18             	sub    esp,0x18
c000f960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f964:	e8 86 17 ff ff       	call   c00010ef <dlmalloc>
c000f969:	83 c4 1c             	add    esp,0x1c
c000f96c:	c3                   	ret    

c000f96d <free>:
c000f96d:	83 ec 18             	sub    esp,0x18
c000f970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f974:	e8 1b 14 ff ff       	call   c0000d94 <dlfree>
c000f979:	83 c4 1c             	add    esp,0x1c
c000f97c:	c3                   	ret    

c000f97d <rfree>:
c000f97d:	83 ec 18             	sub    esp,0x18
c000f980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f984:	e8 0b 14 ff ff       	call   c0000d94 <dlfree>
c000f989:	83 c4 1c             	add    esp,0x1c
c000f98c:	c3                   	ret    

c000f98d <calloc>:
c000f98d:	56                   	push   esi
c000f98e:	53                   	push   ebx
c000f98f:	83 ec 10             	sub    esp,0x10
c000f992:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f996:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f99b:	53                   	push   ebx
c000f99c:	e8 bc ff ff ff       	call   c000f95d <malloc>
c000f9a1:	89 c6                	mov    esi,eax
c000f9a3:	83 c4 0c             	add    esp,0xc
c000f9a6:	53                   	push   ebx
c000f9a7:	6a 00                	push   0x0
c000f9a9:	50                   	push   eax
c000f9aa:	e8 a1 0d ff ff       	call   c0000750 <memset>
c000f9af:	89 f0                	mov    eax,esi
c000f9b1:	83 c4 14             	add    esp,0x14
c000f9b4:	5b                   	pop    ebx
c000f9b5:	5e                   	pop    esi
c000f9b6:	c3                   	ret    

c000f9b7 <Krnl::setBootMessage(char const*)>:
c000f9b7:	57                   	push   edi
c000f9b8:	56                   	push   esi
c000f9b9:	53                   	push   ebx
c000f9ba:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f9c0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f9c7:	68 9e 00 00 00       	push   0x9e
c000f9cc:	6a 00                	push   0x0
c000f9ce:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f9d2:	56                   	push   esi
c000f9d3:	e8 78 0d ff ff       	call   c0000750 <memset>
c000f9d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9db:	e8 8c 0d ff ff       	call   c000076c <strlen>
c000f9e0:	ba 50 00 00 00       	mov    edx,0x50
c000f9e5:	83 c4 10             	add    esp,0x10
c000f9e8:	29 c2                	sub    edx,eax
c000f9ea:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f9ee:	d1 ea                	shr    edx,1
c000f9f0:	84 c0                	test   al,al
c000f9f2:	74 19                	je     c000fa0d <Krnl::setBootMessage(char const*)+0x56>
c000f9f4:	01 d2                	add    edx,edx
c000f9f6:	43                   	inc    ebx
c000f9f7:	01 f2                	add    edx,esi
c000f9f9:	80 cc 0f             	or     ah,0xf
c000f9fc:	83 c2 02             	add    edx,0x2
c000f9ff:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000fa03:	43                   	inc    ebx
c000fa04:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000fa09:	84 c0                	test   al,al
c000fa0b:	75 ec                	jne    c000f9f9 <Krnl::setBootMessage(char const*)+0x42>
c000fa0d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa12:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa19:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fa1f:	5b                   	pop    ebx
c000fa20:	5e                   	pop    esi
c000fa21:	5f                   	pop    edi
c000fa22:	c3                   	ret    

c000fa23 <kernel_main>:
c000fa23:	57                   	push   edi
c000fa24:	bf f9 03 00 00       	mov    edi,0x3f9
c000fa29:	56                   	push   esi
c000fa2a:	89 fa                	mov    edx,edi
c000fa2c:	53                   	push   ebx
c000fa2d:	31 f6                	xor    esi,esi
c000fa2f:	83 ec 2c             	sub    esp,0x2c
c000fa32:	89 f0                	mov    eax,esi
c000fa34:	ee                   	out    dx,al
c000fa35:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa3a:	b0 80                	mov    al,0x80
c000fa3c:	89 da                	mov    edx,ebx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	b1 03                	mov    cl,0x3
c000fa41:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa46:	88 c8                	mov    al,cl
c000fa48:	ee                   	out    dx,al
c000fa49:	89 f0                	mov    eax,esi
c000fa4b:	89 fa                	mov    edx,edi
c000fa4d:	ee                   	out    dx,al
c000fa4e:	88 c8                	mov    al,cl
c000fa50:	89 da                	mov    edx,ebx
c000fa52:	ee                   	out    dx,al
c000fa53:	b0 c7                	mov    al,0xc7
c000fa55:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa5a:	ee                   	out    dx,al
c000fa5b:	b0 0b                	mov    al,0xb
c000fa5d:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa62:	ee                   	out    dx,al
c000fa63:	68 94 a7 02 c0       	push   0xc002a794
c000fa68:	e8 48 2f 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fa6d:	e8 b8 09 00 00       	call   c001042a <installVgaTextImplementation()>
c000fa72:	0f b6 05 a0 d3 02 c0 	movzx  eax,BYTE PTR ds:0xc002d3a0
c000fa79:	83 c4 10             	add    esp,0x10
c000fa7c:	84 c0                	test   al,al
c000fa7e:	74 6c                	je     c000faec <kernel_main+0xc9>
c000fa80:	31 db                	xor    ebx,ebx
c000fa82:	bf 0a 00 00 00       	mov    edi,0xa
c000fa87:	be 05 00 00 00       	mov    esi,0x5
c000fa8c:	31 c9                	xor    ecx,ecx
c000fa8e:	eb 2a                	jmp    c000faba <kernel_main+0x97>
c000fa90:	3c 0d                	cmp    al,0xd
c000fa92:	74 1a                	je     c000faae <kernel_main+0x8b>
c000fa94:	3c 0a                	cmp    al,0xa
c000fa96:	74 40                	je     c000fad8 <kernel_main+0xb5>
c000fa98:	8d 14 b6             	lea    edx,[esi+esi*4]
c000fa9b:	80 cc 0e             	or     ah,0xe
c000fa9e:	c1 e2 04             	shl    edx,0x4
c000faa1:	01 ca                	add    edx,ecx
c000faa3:	41                   	inc    ecx
c000faa4:	01 fa                	add    edx,edi
c000faa6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000faae:	43                   	inc    ebx
c000faaf:	0f b6 83 a0 d3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2c60]
c000fab6:	84 c0                	test   al,al
c000fab8:	74 32                	je     c000faec <kernel_main+0xc9>
c000faba:	80 b9 d6 d3 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2c2a],0xdb
c000fac1:	75 cd                	jne    c000fa90 <kernel_main+0x6d>
c000fac3:	0f b6 91 d5 d3 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2c2b]
c000faca:	83 e2 fe             	and    edx,0xfffffffe
c000facd:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fad3:	75 bb                	jne    c000fa90 <kernel_main+0x6d>
c000fad5:	47                   	inc    edi
c000fad6:	eb b8                	jmp    c000fa90 <kernel_main+0x6d>
c000fad8:	43                   	inc    ebx
c000fad9:	46                   	inc    esi
c000fada:	31 c9                	xor    ecx,ecx
c000fadc:	0f b6 83 a0 d3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2c60]
c000fae3:	bf 0a 00 00 00       	mov    edi,0xa
c000fae8:	84 c0                	test   al,al
c000faea:	75 ce                	jne    c000faba <kernel_main+0x97>
c000faec:	83 ec 0c             	sub    esp,0xc
c000faef:	68 ac a7 02 c0       	push   0xc002a7ac
c000faf4:	e8 be fe ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c000faf9:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fafe:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c000fb03:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb08:	05 ff 0f 00 00       	add    eax,0xfff
c000fb0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb12:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb15:	e8 cb 03 00 00       	call   c000fee5 <Phys::physicalMemorySetup(unsigned int)>
c000fb1a:	e8 83 1c 00 00       	call   c00117a2 <Virt::virtualMemorySetup()>
c000fb1f:	58                   	pop    eax
c000fb20:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb24:	53                   	push   ebx
c000fb25:	e8 34 1d 00 00       	call   c001185e <VAS::VAS()>
c000fb2a:	89 1d 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,ebx
c000fb30:	e8 eb 04 ff ff       	call   c0000020 <callGlobalConstructors>
c000fb35:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fb3c:	e8 1c fe ff ff       	call   c000f95d <malloc>
c000fb41:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb44:	89 c6                	mov    esi,eax
c000fb46:	e8 cd ee ff ff       	call   c000ea18 <Computer::Computer()>
c000fb4b:	6a 00                	push   0x0
c000fb4d:	89 35 c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,esi
c000fb53:	6a 00                	push   0x0
c000fb55:	6a 00                	push   0x0
c000fb57:	56                   	push   esi
c000fb58:	e8 c7 f2 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fb5d:	83 c4 14             	add    esp,0x14
c000fb60:	53                   	push   ebx
c000fb61:	e8 a8 1f 00 00       	call   c0011b0e <VAS::~VAS()>
c000fb66:	83 c4 30             	add    esp,0x30
c000fb69:	5b                   	pop    ebx
c000fb6a:	5e                   	pop    esi
c000fb6b:	5f                   	pop    edi
c000fb6c:	c3                   	ret    

c000fb6d <Phys::allocateDMA(unsigned long)>:
c000fb6d:	55                   	push   ebp
c000fb6e:	31 ed                	xor    ebp,ebp
c000fb70:	57                   	push   edi
c000fb71:	56                   	push   esi
c000fb72:	53                   	push   ebx
c000fb73:	31 db                	xor    ebx,ebx
c000fb75:	83 ec 18             	sub    esp,0x18
c000fb78:	68 cb a7 02 c0       	push   0xc002a7cb
c000fb7d:	e8 33 2e 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fb82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb86:	31 d2                	xor    edx,edx
c000fb88:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	c1 ee 0c             	shr    esi,0xc
c000fb94:	31 c9                	xor    ecx,ecx
c000fb96:	eb 17                	jmp    c000fbaf <Phys::allocateDMA(unsigned long)+0x42>
c000fb98:	85 c9                	test   ecx,ecx
c000fb9a:	75 04                	jne    c000fba0 <Phys::allocateDMA(unsigned long)+0x33>
c000fb9c:	89 d5                	mov    ebp,edx
c000fb9e:	89 d3                	mov    ebx,edx
c000fba0:	8d 41 01             	lea    eax,[ecx+0x1]
c000fba3:	39 c6                	cmp    esi,eax
c000fba5:	74 23                	je     c000fbca <Phys::allocateDMA(unsigned long)+0x5d>
c000fba7:	42                   	inc    edx
c000fba8:	89 c1                	mov    ecx,eax
c000fbaa:	83 fa 2f             	cmp    edx,0x2f
c000fbad:	7f 11                	jg     c000fbc0 <Phys::allocateDMA(unsigned long)+0x53>
c000fbaf:	80 ba 20 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19e0],0x0
c000fbb6:	74 e0                	je     c000fb98 <Phys::allocateDMA(unsigned long)+0x2b>
c000fbb8:	31 c9                	xor    ecx,ecx
c000fbba:	42                   	inc    edx
c000fbbb:	83 fa 2f             	cmp    edx,0x2f
c000fbbe:	7e ef                	jle    c000fbaf <Phys::allocateDMA(unsigned long)+0x42>
c000fbc0:	83 c4 0c             	add    esp,0xc
c000fbc3:	31 c0                	xor    eax,eax
c000fbc5:	5b                   	pop    ebx
c000fbc6:	5e                   	pop    esi
c000fbc7:	5f                   	pop    edi
c000fbc8:	5d                   	pop    ebp
c000fbc9:	c3                   	ret    
c000fbca:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fbcd:	89 d7                	mov    edi,edx
c000fbcf:	4f                   	dec    edi
c000fbd0:	79 03                	jns    c000fbd5 <Phys::allocateDMA(unsigned long)+0x68>
c000fbd2:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fbd5:	c1 ff 04             	sar    edi,0x4
c000fbd8:	89 da                	mov    edx,ebx
c000fbda:	c1 fa 04             	sar    edx,0x4
c000fbdd:	39 fa                	cmp    edx,edi
c000fbdf:	75 43                	jne    c000fc24 <Phys::allocateDMA(unsigned long)+0xb7>
c000fbe1:	85 c0                	test   eax,eax
c000fbe3:	74 1a                	je     c000fbff <Phys::allocateDMA(unsigned long)+0x92>
c000fbe5:	be 20 e6 02 c0       	mov    esi,0xc002e620
c000fbea:	8d 93 20 e6 02 c0    	lea    edx,[ebx-0x3ffd19e0]
c000fbf0:	f7 d6                	not    esi
c000fbf2:	29 de                	sub    esi,ebx
c000fbf4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fbf7:	42                   	inc    edx
c000fbf8:	8d 04 16             	lea    eax,[esi+edx*1]
c000fbfb:	39 c1                	cmp    ecx,eax
c000fbfd:	7f f5                	jg     c000fbf4 <Phys::allocateDMA(unsigned long)+0x87>
c000fbff:	83 ec 0c             	sub    esp,0xc
c000fc02:	68 e4 a7 02 c0       	push   0xc002a7e4
c000fc07:	e8 a9 2d 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fc0c:	83 c4 10             	add    esp,0x10
c000fc0f:	85 ff                	test   edi,edi
c000fc11:	74 17                	je     c000fc2a <Phys::allocateDMA(unsigned long)+0xbd>
c000fc13:	83 c4 0c             	add    esp,0xc
c000fc16:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fc1c:	5b                   	pop    ebx
c000fc1d:	c1 e0 0c             	shl    eax,0xc
c000fc20:	5e                   	pop    esi
c000fc21:	5f                   	pop    edi
c000fc22:	5d                   	pop    ebp
c000fc23:	c3                   	ret    
c000fc24:	89 ea                	mov    edx,ebp
c000fc26:	31 c9                	xor    ecx,ecx
c000fc28:	eb 90                	jmp    c000fbba <Phys::allocateDMA(unsigned long)+0x4d>
c000fc2a:	83 c4 0c             	add    esp,0xc
c000fc2d:	c1 e3 0c             	shl    ebx,0xc
c000fc30:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fc36:	5b                   	pop    ebx
c000fc37:	5e                   	pop    esi
c000fc38:	5f                   	pop    edi
c000fc39:	5d                   	pop    ebp
c000fc3a:	c3                   	ret    

c000fc3b <Phys::freeDMA(unsigned long, unsigned long)>:
c000fc3b:	83 ec 18             	sub    esp,0x18
c000fc3e:	68 fb a7 02 c0       	push   0xc002a7fb
c000fc43:	e8 6d 2d 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fc48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc59:	c1 e9 0c             	shr    ecx,0xc
c000fc5c:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fc64:	76 29                	jbe    c000fc8f <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fc66:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fc6c:	c1 ea 0c             	shr    edx,0xc
c000fc6f:	83 c2 10             	add    edx,0x10
c000fc72:	85 c9                	test   ecx,ecx
c000fc74:	74 15                	je     c000fc8b <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fc76:	8d 82 20 e6 02 c0    	lea    eax,[edx-0x3ffd19e0]
c000fc7c:	8d 94 11 20 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19e0]
c000fc83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fc86:	40                   	inc    eax
c000fc87:	39 d0                	cmp    eax,edx
c000fc89:	75 f8                	jne    c000fc83 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fc8b:	83 c4 0c             	add    esp,0xc
c000fc8e:	c3                   	ret    
c000fc8f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fc95:	c1 ea 0c             	shr    edx,0xc
c000fc98:	eb d8                	jmp    c000fc72 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fc9a <Phys::setPageState(unsigned long, bool)>:
c000fc9a:	56                   	push   esi
c000fc9b:	ba 01 00 00 00       	mov    edx,0x1
c000fca0:	53                   	push   ebx
c000fca1:	8b 35 e4 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4e4
c000fca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcaf:	89 c8                	mov    eax,ecx
c000fcb1:	83 e1 07             	and    ecx,0x7
c000fcb4:	c1 e8 03             	shr    eax,0x3
c000fcb7:	d3 e3                	shl    ebx,cl
c000fcb9:	01 c6                	add    esi,eax
c000fcbb:	d3 e2                	shl    edx,cl
c000fcbd:	f7 d2                	not    edx
c000fcbf:	20 16                	and    BYTE PTR [esi],dl
c000fcc1:	03 05 e4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4e4
c000fcc7:	08 18                	or     BYTE PTR [eax],bl
c000fcc9:	5b                   	pop    ebx
c000fcca:	5e                   	pop    esi
c000fccb:	c3                   	ret    

c000fccc <Phys::getPageState(unsigned long)>:
c000fccc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fcd0:	8b 15 e4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4e4
c000fcd6:	89 c8                	mov    eax,ecx
c000fcd8:	83 e1 07             	and    ecx,0x7
c000fcdb:	c1 e8 03             	shr    eax,0x3
c000fcde:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fce2:	d3 f8                	sar    eax,cl
c000fce4:	83 e0 01             	and    eax,0x1
c000fce7:	c3                   	ret    

c000fce8 <Phys::freePage(unsigned long)>:
c000fce8:	53                   	push   ebx
c000fce9:	83 ec 10             	sub    esp,0x10
c000fcec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fcf0:	53                   	push   ebx
c000fcf1:	68 11 a8 02 c0       	push   0xc002a811
c000fcf6:	e8 ba 2c 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fd04:	76 3d                	jbe    c000fd43 <Phys::freePage(unsigned long)+0x5b>
c000fd06:	83 ec 0c             	sub    esp,0xc
c000fd09:	c1 eb 0c             	shr    ebx,0xc
c000fd0c:	53                   	push   ebx
c000fd0d:	e8 ba ff ff ff       	call   c000fccc <Phys::getPageState(unsigned long)>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	84 c0                	test   al,al
c000fd17:	74 19                	je     c000fd32 <Phys::freePage(unsigned long)+0x4a>
c000fd19:	83 ec 08             	sub    esp,0x8
c000fd1c:	ff 0d 10 e6 02 c0    	dec    DWORD PTR ds:0xc002e610
c000fd22:	6a 00                	push   0x0
c000fd24:	53                   	push   ebx
c000fd25:	e8 70 ff ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 c4 08             	add    esp,0x8
c000fd30:	5b                   	pop    ebx
c000fd31:	c3                   	ret    
c000fd32:	c7 44 24 10 24 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a824
c000fd3a:	83 c4 08             	add    esp,0x8
c000fd3d:	5b                   	pop    ebx
c000fd3e:	e9 10 a6 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c000fd43:	83 ec 08             	sub    esp,0x8
c000fd46:	68 00 10 00 00       	push   0x1000
c000fd4b:	53                   	push   ebx
c000fd4c:	e8 ea fe ff ff       	call   c000fc3b <Phys::freeDMA(unsigned long, unsigned long)>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	83 c4 08             	add    esp,0x8
c000fd57:	5b                   	pop    ebx
c000fd58:	c3                   	ret    

c000fd59 <Phys::allocatePage()>:
c000fd59:	56                   	push   esi
c000fd5a:	53                   	push   ebx
c000fd5b:	83 ec 14             	sub    esp,0x14
c000fd5e:	8b 35 04 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e604
c000fd64:	89 f3                	mov    ebx,esi
c000fd66:	eb 0a                	jmp    c000fd72 <Phys::allocatePage()+0x19>
c000fd68:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c000fd6e:	39 de                	cmp    esi,ebx
c000fd70:	74 24                	je     c000fd96 <Phys::allocatePage()+0x3d>
c000fd72:	53                   	push   ebx
c000fd73:	e8 54 ff ff ff       	call   c000fccc <Phys::getPageState(unsigned long)>
c000fd78:	5a                   	pop    edx
c000fd79:	84 c0                	test   al,al
c000fd7b:	74 76                	je     c000fdf3 <Phys::allocatePage()+0x9a>
c000fd7d:	43                   	inc    ebx
c000fd7e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd84:	75 e2                	jne    c000fd68 <Phys::allocatePage()+0xf>
c000fd86:	31 db                	xor    ebx,ebx
c000fd88:	c7 05 04 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x0
c000fd92:	39 de                	cmp    esi,ebx
c000fd94:	75 dc                	jne    c000fd72 <Phys::allocatePage()+0x19>
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	68 58 a8 02 c0       	push   0xc002a858
c000fd9e:	e8 12 2c 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fda3:	58                   	pop    eax
c000fda4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fda9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fdb2:	e8 8d 28 00 00       	call   c0012644 <VAS::scanForEviction()>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	85 c0                	test   eax,eax
c000fdbc:	75 76                	jne    c000fe34 <Phys::allocatePage()+0xdb>
c000fdbe:	83 ec 0c             	sub    esp,0xc
c000fdc1:	68 00 10 00 00       	push   0x1000
c000fdc6:	e8 a2 fd ff ff       	call   c000fb6d <Phys::allocateDMA(unsigned long)>
c000fdcb:	83 c4 10             	add    esp,0x10
c000fdce:	85 c0                	test   eax,eax
c000fdd0:	75 5c                	jne    c000fe2e <Phys::allocatePage()+0xd5>
c000fdd2:	83 ec 0c             	sub    esp,0xc
c000fdd5:	68 70 a8 02 c0       	push   0xc002a870
c000fdda:	e8 74 a5 00 00       	call   c001a353 <Krnl::panic(char const*)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	8b 1d 04 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e604
c000fde8:	53                   	push   ebx
c000fde9:	e8 de fe ff ff       	call   c000fccc <Phys::getPageState(unsigned long)>
c000fdee:	5a                   	pop    edx
c000fdef:	84 c0                	test   al,al
c000fdf1:	75 8a                	jne    c000fd7d <Phys::allocatePage()+0x24>
c000fdf3:	6a 01                	push   0x1
c000fdf5:	53                   	push   ebx
c000fdf6:	e8 9f fe ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c000fdfb:	5a                   	pop    edx
c000fdfc:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c000fe01:	59                   	pop    ecx
c000fe02:	40                   	inc    eax
c000fe03:	8b 15 04 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e604
c000fe09:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c000fe0e:	c1 e2 0c             	shl    edx,0xc
c000fe11:	52                   	push   edx
c000fe12:	ff 35 14 e6 02 c0    	push   DWORD PTR ds:0xc002e614
c000fe18:	50                   	push   eax
c000fe19:	68 3a a8 02 c0       	push   0xc002a83a
c000fe1e:	e8 92 2b 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000fe23:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	c1 e0 0c             	shl    eax,0xc
c000fe2e:	83 c4 14             	add    esp,0x14
c000fe31:	5b                   	pop    ebx
c000fe32:	5e                   	pop    esi
c000fe33:	c3                   	ret    
c000fe34:	83 ec 08             	sub    esp,0x8
c000fe37:	89 c2                	mov    edx,eax
c000fe39:	6a 01                	push   0x1
c000fe3b:	c1 ea 0c             	shr    edx,0xc
c000fe3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe42:	52                   	push   edx
c000fe43:	e8 52 fe ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c000fe48:	83 c4 10             	add    esp,0x10
c000fe4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4f:	eb dd                	jmp    c000fe2e <Phys::allocatePage()+0xd5>

c000fe51 <Phys::allocateContiguousPages(int)>:
c000fe51:	57                   	push   edi
c000fe52:	56                   	push   esi
c000fe53:	53                   	push   ebx
c000fe54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe58:	fa                   	cli    
c000fe59:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c000fe5f:	31 db                	xor    ebx,ebx
c000fe61:	85 db                	test   ebx,ebx
c000fe63:	75 11                	jne    c000fe76 <Phys::allocateContiguousPages(int)+0x25>
c000fe65:	e8 ef fe ff ff       	call   c000fd59 <Phys::allocatePage()>
c000fe6a:	83 fe 01             	cmp    esi,0x1
c000fe6d:	89 c7                	mov    edi,eax
c000fe6f:	74 21                	je     c000fe92 <Phys::allocateContiguousPages(int)+0x41>
c000fe71:	bb 01 00 00 00       	mov    ebx,0x1
c000fe76:	e8 de fe ff ff       	call   c000fd59 <Phys::allocatePage()>
c000fe7b:	89 da                	mov    edx,ebx
c000fe7d:	c1 e2 0c             	shl    edx,0xc
c000fe80:	01 fa                	add    edx,edi
c000fe82:	39 c2                	cmp    edx,eax
c000fe84:	74 20                	je     c000fea6 <Phys::allocateContiguousPages(int)+0x55>
c000fe86:	bb 01 00 00 00       	mov    ebx,0x1
c000fe8b:	89 c7                	mov    edi,eax
c000fe8d:	83 fe 01             	cmp    esi,0x1
c000fe90:	75 e4                	jne    c000fe76 <Phys::allocateContiguousPages(int)+0x25>
c000fe92:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c000fe97:	48                   	dec    eax
c000fe98:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c000fe9d:	75 01                	jne    c000fea0 <Phys::allocateContiguousPages(int)+0x4f>
c000fe9f:	fb                   	sti    
c000fea0:	89 f8                	mov    eax,edi
c000fea2:	5b                   	pop    ebx
c000fea3:	5e                   	pop    esi
c000fea4:	5f                   	pop    edi
c000fea5:	c3                   	ret    
c000fea6:	43                   	inc    ebx
c000fea7:	39 f3                	cmp    ebx,esi
c000fea9:	75 b6                	jne    c000fe61 <Phys::allocateContiguousPages(int)+0x10>
c000feab:	eb e5                	jmp    c000fe92 <Phys::allocateContiguousPages(int)+0x41>

c000fead <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fead:	56                   	push   esi
c000feae:	53                   	push   ebx
c000feaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feb3:	39 1d 08 e6 02 c0    	cmp    DWORD PTR ds:0xc002e608,ebx
c000feb9:	73 06                	jae    c000fec1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000febb:	89 1d 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,ebx
c000fec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fec5:	c1 eb 0c             	shr    ebx,0xc
c000fec8:	c1 e8 0c             	shr    eax,0xc
c000fecb:	39 d8                	cmp    eax,ebx
c000fecd:	73 13                	jae    c000fee2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fecf:	6a 00                	push   0x0
c000fed1:	8d 70 01             	lea    esi,[eax+0x1]
c000fed4:	50                   	push   eax
c000fed5:	e8 c0 fd ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c000feda:	5a                   	pop    edx
c000fedb:	89 f0                	mov    eax,esi
c000fedd:	59                   	pop    ecx
c000fede:	39 f3                	cmp    ebx,esi
c000fee0:	75 ed                	jne    c000fecf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fee2:	5b                   	pop    ebx
c000fee3:	5e                   	pop    esi
c000fee4:	c3                   	ret    

c000fee5 <Phys::physicalMemorySetup(unsigned int)>:
c000fee5:	55                   	push   ebp
c000fee6:	57                   	push   edi
c000fee7:	56                   	push   esi
c000fee8:	53                   	push   ebx
c000fee9:	83 ec 40             	sub    esp,0x40
c000feec:	6a 30                	push   0x30
c000feee:	6a 00                	push   0x0
c000fef0:	68 20 e6 02 c0       	push   0xc002e620
c000fef5:	e8 56 08 ff ff       	call   c0000750 <memset>
c000fefa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fefe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff03:	05 00 10 00 00       	add    eax,0x1000
c000ff08:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff0c:	5b                   	pop    ebx
c000ff0d:	31 db                	xor    ebx,ebx
c000ff0f:	5e                   	pop    esi
c000ff10:	50                   	push   eax
c000ff11:	68 7e a8 02 c0       	push   0xc002a87e
c000ff16:	e8 9a 2a 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	83 ec 08             	sub    esp,0x8
c000ff21:	6a 01                	push   0x1
c000ff23:	53                   	push   ebx
c000ff24:	43                   	inc    ebx
c000ff25:	e8 70 fd ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff33:	75 e9                	jne    c000ff1e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ff35:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000ff3c:	66 85 c0             	test   ax,ax
c000ff3f:	0f 84 8e 01 00 00    	je     c00100d3 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000ff45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ff49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ff51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff55:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ff5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff5e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ff66:	eb 15                	jmp    c000ff7d <Phys::physicalMemorySetup(unsigned int)+0x98>
c000ff68:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000ff6c:	83 c3 18             	add    ebx,0x18
c000ff6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff73:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ff77:	0f 84 66 01 00 00    	je     c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ff7d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ff80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff83:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ff86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff8a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff8e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ff90:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ff93:	01 f0                	add    eax,esi
c000ff95:	55                   	push   ebp
c000ff96:	11 fa                	adc    edx,edi
c000ff98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff9c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ffa0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ffa4:	56                   	push   esi
c000ffa5:	68 c0 a8 02 c0       	push   0xc002a8c0
c000ffaa:	e8 06 2a 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c000ffaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffb3:	83 c4 10             	add    esp,0x10
c000ffb6:	09 f8                	or     eax,edi
c000ffb8:	0f 85 25 01 00 00    	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ffbe:	4d                   	dec    ebp
c000ffbf:	75 a7                	jne    c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ffc1:	ba 00 00 08 00       	mov    edx,0x80000
c000ffc6:	89 c1                	mov    ecx,eax
c000ffc8:	39 f2                	cmp    edx,esi
c000ffca:	19 f9                	sbb    ecx,edi
c000ffcc:	0f 82 a7 00 00 00    	jb     c0010079 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000ffd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000ffd6:	89 c1                	mov    ecx,eax
c000ffd8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ffdc:	0f 83 97 00 00 00    	jae    c0010079 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000ffe2:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ffe7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ffeb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ffef:	39 fa                	cmp    edx,edi
c000fff1:	19 e8                	sbb    eax,ebp
c000fff3:	0f 82 14 01 00 00    	jb     c001010d <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fff9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fffd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010001:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010007:	ba ff 1f 00 00       	mov    edx,0x1fff
c001000c:	83 d5 ff             	adc    ebp,0xffffffff
c001000f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010013:	31 c0                	xor    eax,eax
c0010015:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010019:	39 fa                	cmp    edx,edi
c001001b:	89 c1                	mov    ecx,eax
c001001d:	19 e9                	sbb    ecx,ebp
c001001f:	0f 83 43 ff ff ff    	jae    c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010025:	be 00 00 08 00       	mov    esi,0x80000
c001002a:	50                   	push   eax
c001002b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	68 e4 a8 02 c0       	push   0xc002a8e4
c0010036:	e8 7a 29 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001003b:	5a                   	pop    edx
c001003c:	59                   	pop    ecx
c001003d:	57                   	push   edi
c001003e:	56                   	push   esi
c001003f:	e8 69 fe ff ff       	call   c000fead <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010044:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010048:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001004c:	83 c4 0c             	add    esp,0xc
c001004f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010053:	03 05 14 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e614
c0010059:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010060:	a3 14 e6 02 c0       	mov    ds:0xc002e614,eax
c0010065:	52                   	push   edx
c0010066:	50                   	push   eax
c0010067:	68 a4 a8 02 c0       	push   0xc002a8a4
c001006c:	e8 44 29 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0010071:	83 c4 10             	add    esp,0x10
c0010074:	e9 ef fe ff ff       	jmp    c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010079:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001007d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010081:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010085:	39 ea                	cmp    edx,ebp
c0010087:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001008b:	0f 82 d7 fe ff ff    	jb     c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010091:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010096:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001009a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001009e:	0f 83 c4 fe ff ff    	jae    c000ff68 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100a4:	39 ee                	cmp    esi,ebp
c00100a6:	89 f8                	mov    eax,edi
c00100a8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00100ac:	0f 83 78 ff ff ff    	jae    c001002a <Phys::physicalMemorySetup(unsigned int)+0x145>
c00100b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100ba:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00100be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00100c2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00100c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ce:	e9 57 ff ff ff       	jmp    c001002a <Phys::physicalMemorySetup(unsigned int)+0x145>
c00100d3:	83 ec 0c             	sub    esp,0xc
c00100d6:	68 96 a8 02 c0       	push   0xc002a896
c00100db:	e8 73 a2 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	bb 40 01 00 00       	mov    ebx,0x140
c00100e8:	83 ec 08             	sub    esp,0x8
c00100eb:	6a 00                	push   0x0
c00100ed:	53                   	push   ebx
c00100ee:	43                   	inc    ebx
c00100ef:	e8 a6 fb ff ff       	call   c000fc9a <Phys::setPageState(unsigned long, bool)>
c00100f4:	ff 05 14 e6 02 c0    	inc    DWORD PTR ds:0xc002e614
c00100fa:	83 c4 10             	add    esp,0x10
c00100fd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010103:	75 e3                	jne    c00100e8 <Phys::physicalMemorySetup(unsigned int)+0x203>
c0010105:	83 c4 3c             	add    esp,0x3c
c0010108:	5b                   	pop    ebx
c0010109:	5e                   	pop    esi
c001010a:	5f                   	pop    edi
c001010b:	5d                   	pop    ebp
c001010c:	c3                   	ret    
c001010d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010115:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001011d:	e9 d7 fe ff ff       	jmp    c000fff9 <Phys::physicalMemorySetup(unsigned int)+0x114>

c0010122 <Pipe::isAtty()>:
c0010122:	31 c0                	xor    eax,eax
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <Pipe::~Pipe()>:
c0010126:	83 ec 0c             	sub    esp,0xc
c0010129:	ba 50 a9 02 c0       	mov    edx,0xc002a950
c001012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010132:	89 10                	mov    DWORD PTR [eax],edx
c0010134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010138:	83 ec 0c             	sub    esp,0xc
c001013b:	50                   	push   eax
c001013c:	e8 41 12 00 00       	call   c0011382 <UnixFile::~UnixFile()>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	90                   	nop
c0010145:	83 c4 0c             	add    esp,0xc
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <Pipe::~Pipe()>:
c001014a:	83 ec 0c             	sub    esp,0xc
c001014d:	83 ec 0c             	sub    esp,0xc
c0010150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010154:	e8 cd ff ff ff       	call   c0010126 <Pipe::~Pipe()>
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	83 ec 08             	sub    esp,0x8
c001015f:	6a 20                	push   0x20
c0010161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010165:	e8 73 27 00 00       	call   c00128dd <operator delete(void*, unsigned long)>
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	83 c4 0c             	add    esp,0xc
c0010170:	c3                   	ret    
c0010171:	90                   	nop

c0010172 <Pipe::read(unsigned long long, void*, int*)>:
c0010172:	55                   	push   ebp
c0010173:	57                   	push   edi
c0010174:	56                   	push   esi
c0010175:	53                   	push   ebx
c0010176:	83 ec 1c             	sub    esp,0x1c
c0010179:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001017d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010181:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010185:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010188:	89 c8                	mov    eax,ecx
c001018a:	99                   	cdq    
c001018b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001018f:	74 24                	je     c00101b5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010191:	39 f9                	cmp    ecx,edi
c0010193:	89 d1                	mov    ecx,edx
c0010195:	19 f1                	sbb    ecx,esi
c0010197:	73 1c                	jae    c00101b5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010199:	fa                   	cli    
c001019a:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c00101a0:	e8 40 dd 00 00       	call   c001dee5 <schedule()>
c00101a5:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00101aa:	48                   	dec    eax
c00101ab:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c00101b0:	75 d3                	jne    c0010185 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101b2:	fb                   	sti    
c00101b3:	eb d0                	jmp    c0010185 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101b5:	39 f8                	cmp    eax,edi
c00101b7:	89 d1                	mov    ecx,edx
c00101b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00101bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00101c0:	19 f1                	sbb    ecx,esi
c00101c2:	73 07                	jae    c00101cb <Pipe::read(unsigned long long, void*, int*)+0x59>
c00101c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00101c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101cb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00101ce:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00101d1:	29 f7                	sub    edi,esi
c00101d3:	89 f8                	mov    eax,edi
c00101d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00101d9:	99                   	cdq    
c00101da:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00101dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e1:	19 d0                	sbb    eax,edx
c00101e3:	73 07                	jae    c00101ec <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00101e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00101e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101ec:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00101ef:	89 ea                	mov    edx,ebp
c00101f1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00101f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00101fa:	74 0d                	je     c0010209 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00101fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00101ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010207:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010209:	85 d2                	test   edx,edx
c001020b:	74 11                	je     c001021e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001020d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010211:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010214:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010218:	89 d1                	mov    ecx,edx
c001021a:	89 c7                	mov    edi,eax
c001021c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001021e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010221:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010224:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010227:	99                   	cdq    
c0010228:	89 f7                	mov    edi,esi
c001022a:	03 04 24             	add    eax,DWORD PTR [esp]
c001022d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010231:	c1 ff 1f             	sar    edi,0x1f
c0010234:	57                   	push   edi
c0010235:	56                   	push   esi
c0010236:	52                   	push   edx
c0010237:	50                   	push   eax
c0010238:	e8 47 6c 01 00       	call   c0026e84 <__umoddi3>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010243:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010248:	75 10                	jne    c001025a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001024a:	83 ec 0c             	sub    esp,0xc
c001024d:	68 0d a9 02 c0       	push   0xc002a90d
c0010252:	e8 fc a0 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0010257:	83 c4 10             	add    esp,0x10
c001025a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001025e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010261:	89 10                	mov    DWORD PTR [eax],edx
c0010263:	83 c4 1c             	add    esp,0x1c
c0010266:	31 c0                	xor    eax,eax
c0010268:	5b                   	pop    ebx
c0010269:	5e                   	pop    esi
c001026a:	5f                   	pop    edi
c001026b:	5d                   	pop    ebp
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <Pipe::write(unsigned long long, void*, int*)>:
c001026e:	55                   	push   ebp
c001026f:	57                   	push   edi
c0010270:	56                   	push   esi
c0010271:	53                   	push   ebx
c0010272:	83 ec 1c             	sub    esp,0x1c
c0010275:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010279:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001027d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010280:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010284:	89 04 24             	mov    DWORD PTR [esp],eax
c0010287:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001028b:	89 d8                	mov    eax,ebx
c001028d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010290:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010294:	89 d6                	mov    esi,edx
c0010296:	89 d7                	mov    edi,edx
c0010298:	c1 ff 1f             	sar    edi,0x1f
c001029b:	03 34 24             	add    esi,DWORD PTR [esp]
c001029e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102a2:	c1 f8 1f             	sar    eax,0x1f
c00102a5:	39 f3                	cmp    ebx,esi
c00102a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102af:	19 f8                	sbb    eax,edi
c00102b1:	b8 01 00 00 00       	mov    eax,0x1
c00102b6:	72 6e                	jb     c0010326 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00102b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00102bb:	01 d0                	add    eax,edx
c00102bd:	99                   	cdq    
c00102be:	f7 fb                	idiv   ebx
c00102c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c4:	29 d3                	sub    ebx,edx
c00102c6:	89 d7                	mov    edi,edx
c00102c8:	89 de                	mov    esi,ebx
c00102ca:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102cd:	c1 fb 1f             	sar    ebx,0x1f
c00102d0:	39 f2                	cmp    edx,esi
c00102d2:	19 d8                	sbb    eax,ebx
c00102d4:	b8 00 00 00 00       	mov    eax,0x0
c00102d9:	72 04                	jb     c00102df <Pipe::write(unsigned long long, void*, int*)+0x71>
c00102db:	89 d0                	mov    eax,edx
c00102dd:	29 f0                	sub    eax,esi
c00102df:	89 d3                	mov    ebx,edx
c00102e1:	29 c3                	sub    ebx,eax
c00102e3:	74 0b                	je     c00102f0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00102e5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00102e8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00102ec:	89 d9                	mov    ecx,ebx
c00102ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f0:	85 c0                	test   eax,eax
c00102f2:	74 0d                	je     c0010301 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00102f4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00102f8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00102fb:	89 de                	mov    esi,ebx
c00102fd:	89 c1                	mov    ecx,eax
c00102ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010301:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010304:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010309:	75 10                	jne    c001031b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001030b:	83 ec 0c             	sub    esp,0xc
c001030e:	68 29 a9 02 c0       	push   0xc002a929
c0010313:	e8 3b a0 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001031f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010322:	89 08                	mov    DWORD PTR [eax],ecx
c0010324:	31 c0                	xor    eax,eax
c0010326:	83 c4 1c             	add    esp,0x1c
c0010329:	5b                   	pop    ebx
c001032a:	5e                   	pop    esi
c001032b:	5f                   	pop    edi
c001032c:	5d                   	pop    ebp
c001032d:	c3                   	ret    

c001032e <Pipe::Pipe(int)>:
c001032e:	83 ec 0c             	sub    esp,0xc
c0010331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010335:	83 ec 08             	sub    esp,0x8
c0010338:	6a 00                	push   0x0
c001033a:	50                   	push   eax
c001033b:	e8 60 0e 00 00       	call   c00111a0 <UnixFile::UnixFile(int)>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	ba 50 a9 02 c0       	mov    edx,0xc002a950
c0010348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001034c:	89 10                	mov    DWORD PTR [eax],edx
c001034e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010352:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010356:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010368:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001036f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010373:	83 ec 0c             	sub    esp,0xc
c0010376:	50                   	push   eax
c0010377:	e8 e1 f5 ff ff       	call   c000f95d <malloc>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	89 c2                	mov    edx,eax
c0010381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010385:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010390:	90                   	nop
c0010391:	83 c4 0c             	add    esp,0xc
c0010394:	c3                   	ret    
c0010395:	90                   	nop

c0010396 <VgaText::isAtty()>:
c0010396:	b0 01                	mov    al,0x1
c0010398:	c3                   	ret    
c0010399:	90                   	nop

c001039a <VgaText::~VgaText()>:
c001039a:	83 ec 0c             	sub    esp,0xc
c001039d:	ba d8 a9 02 c0       	mov    edx,0xc002a9d8
c00103a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a6:	89 10                	mov    DWORD PTR [eax],edx
c00103a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	50                   	push   eax
c00103b0:	e8 cd 0f 00 00       	call   c0011382 <UnixFile::~UnixFile()>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	90                   	nop
c00103b9:	83 c4 0c             	add    esp,0xc
c00103bc:	c3                   	ret    
c00103bd:	90                   	nop

c00103be <VgaText::~VgaText()>:
c00103be:	83 ec 0c             	sub    esp,0xc
c00103c1:	83 ec 0c             	sub    esp,0xc
c00103c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c8:	e8 cd ff ff ff       	call   c001039a <VgaText::~VgaText()>
c00103cd:	83 c4 10             	add    esp,0x10
c00103d0:	83 ec 08             	sub    esp,0x8
c00103d3:	68 c4 02 00 00       	push   0x2c4
c00103d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dc:	e8 fc 24 00 00       	call   c00128dd <operator delete(void*, unsigned long)>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	83 c4 0c             	add    esp,0xc
c00103e7:	c3                   	ret    

c00103e8 <VgaText::read(unsigned long long, void*, int*)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f7:	e8 86 5a 00 00       	call   c0015e82 <readKeyboard(VgaText*, char*, unsigned long)>
c00103fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010400:	89 02                	mov    DWORD PTR [edx],eax
c0010402:	31 c0                	xor    eax,eax
c0010404:	83 c4 1c             	add    esp,0x1c
c0010407:	c3                   	ret    

c0010408 <setTerminalScrollLock(bool)>:
c0010408:	c3                   	ret    

c0010409 <addToTerminalCycle(VgaText*)>:
c0010409:	8b 15 80 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e680
c001040f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010413:	85 d2                	test   edx,edx
c0010415:	75 09                	jne    c0010420 <addToTerminalCycle(VgaText*)+0x17>
c0010417:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001041a:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c001041f:	c3                   	ret    
c0010420:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010423:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010426:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010429:	c3                   	ret    

c001042a <installVgaTextImplementation()>:
c001042a:	83 ec 10             	sub    esp,0x10
c001042d:	6a 20                	push   0x20
c001042f:	6a 00                	push   0x0
c0010431:	68 60 e6 02 c0       	push   0xc002e660
c0010436:	e8 15 03 ff ff       	call   c0000750 <memset>
c001043b:	83 c4 1c             	add    esp,0x1c
c001043e:	c3                   	ret    

c001043f <scrollTerminalScrollLock(int)>:
c001043f:	c3                   	ret    

c0010440 <VgaText::updateTitle()>:
c0010440:	53                   	push   ebx
c0010441:	31 c0                	xor    eax,eax
c0010443:	83 ec 58             	sub    esp,0x58
c0010446:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001044a:	89 e1                	mov    ecx,esp
c001044c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010450:	40                   	inc    eax
c0010451:	83 f8 50             	cmp    eax,0x50
c0010454:	75 f6                	jne    c001044c <VgaText::updateTitle()+0xc>
c0010456:	31 c0                	xor    eax,eax
c0010458:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001045f:	84 db                	test   bl,bl
c0010461:	74 06                	je     c0010469 <VgaText::updateTitle()+0x29>
c0010463:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010466:	40                   	inc    eax
c0010467:	eb ef                	jmp    c0010458 <VgaText::updateTitle()+0x18>
c0010469:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001046c:	85 c0                	test   eax,eax
c001046e:	74 09                	je     c0010479 <VgaText::updateTitle()+0x39>
c0010470:	53                   	push   ebx
c0010471:	53                   	push   ebx
c0010472:	51                   	push   ecx
c0010473:	52                   	push   edx
c0010474:	ff d0                	call   eax
c0010476:	83 c4 10             	add    esp,0x10
c0010479:	83 c4 58             	add    esp,0x58
c001047c:	5b                   	pop    ebx
c001047d:	c3                   	ret    

c001047e <VgaText::load()>:
c001047e:	53                   	push   ebx
c001047f:	31 c0                	xor    eax,eax
c0010481:	83 ec 58             	sub    esp,0x58
c0010484:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010488:	89 e2                	mov    edx,esp
c001048a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001048e:	40                   	inc    eax
c001048f:	83 f8 50             	cmp    eax,0x50
c0010492:	75 f6                	jne    c001048a <VgaText::load()+0xc>
c0010494:	31 c0                	xor    eax,eax
c0010496:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001049d:	84 c9                	test   cl,cl
c001049f:	74 06                	je     c00104a7 <VgaText::load()+0x29>
c00104a1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00104a4:	40                   	inc    eax
c00104a5:	eb ef                	jmp    c0010496 <VgaText::load()+0x18>
c00104a7:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00104aa:	85 c0                	test   eax,eax
c00104ac:	74 09                	je     c00104b7 <VgaText::load()+0x39>
c00104ae:	51                   	push   ecx
c00104af:	51                   	push   ecx
c00104b0:	52                   	push   edx
c00104b1:	53                   	push   ebx
c00104b2:	ff d0                	call   eax
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00104ba:	85 c0                	test   eax,eax
c00104bc:	74 09                	je     c00104c7 <VgaText::load()+0x49>
c00104be:	83 ec 0c             	sub    esp,0xc
c00104c1:	53                   	push   ebx
c00104c2:	ff d0                	call   eax
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	83 c4 58             	add    esp,0x58
c00104ca:	5b                   	pop    ebx
c00104cb:	c3                   	ret    

c00104cc <VgaText::updateCursor()>:
c00104cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d0:	39 05 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,eax
c00104d6:	75 09                	jne    c00104e1 <VgaText::updateCursor()+0x15>
c00104d8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00104db:	85 c0                	test   eax,eax
c00104dd:	74 02                	je     c00104e1 <VgaText::updateCursor()+0x15>
c00104df:	ff e0                	jmp    eax
c00104e1:	c3                   	ret    

c00104e2 <VgaText::doANSI_SGR(int)>:
c00104e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ea:	85 d2                	test   edx,edx
c00104ec:	75 0b                	jne    c00104f9 <VgaText::doANSI_SGR(int)+0x17>
c00104ee:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00104f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00104f4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00104f7:	eb 59                	jmp    c0010552 <VgaText::doANSI_SGR(int)+0x70>
c00104f9:	83 fa 07             	cmp    edx,0x7
c00104fc:	75 0b                	jne    c0010509 <VgaText::doANSI_SGR(int)+0x27>
c00104fe:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010501:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010504:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010507:	eb 49                	jmp    c0010552 <VgaText::doANSI_SGR(int)+0x70>
c0010509:	83 fa 1b             	cmp    edx,0x1b
c001050c:	74 e0                	je     c00104ee <VgaText::doANSI_SGR(int)+0xc>
c001050e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010511:	83 f9 07             	cmp    ecx,0x7
c0010514:	77 09                	ja     c001051f <VgaText::doANSI_SGR(int)+0x3d>
c0010516:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c001051d:	eb 20                	jmp    c001053f <VgaText::doANSI_SGR(int)+0x5d>
c001051f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010522:	83 f9 07             	cmp    ecx,0x7
c0010525:	77 09                	ja     c0010530 <VgaText::doANSI_SGR(int)+0x4e>
c0010527:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c001052e:	eb 22                	jmp    c0010552 <VgaText::doANSI_SGR(int)+0x70>
c0010530:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010533:	83 f9 07             	cmp    ecx,0x7
c0010536:	77 0b                	ja     c0010543 <VgaText::doANSI_SGR(int)+0x61>
c0010538:	8b 14 95 d8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c28]
c001053f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010542:	c3                   	ret    
c0010543:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010546:	83 f9 07             	cmp    ecx,0x7
c0010549:	77 0a                	ja     c0010555 <VgaText::doANSI_SGR(int)+0x73>
c001054b:	8b 14 95 b0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c50]
c0010552:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010555:	c3                   	ret    

c0010556 <VgaText::setDefaultBgColour(VgaColour)>:
c0010556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001055e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010561:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::setDefaultFgColour(VgaColour)>:
c0010566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001056e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010571:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010574:	c3                   	ret    
c0010575:	90                   	nop

c0010576 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010576:	53                   	push   ebx
c0010577:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001057b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001057f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010583:	51                   	push   ecx
c0010584:	e8 cd ff ff ff       	call   c0010556 <VgaText::setDefaultBgColour(VgaColour)>
c0010589:	58                   	pop    eax
c001058a:	5a                   	pop    edx
c001058b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001058f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010593:	5b                   	pop    ebx
c0010594:	eb d0                	jmp    c0010566 <VgaText::setDefaultFgColour(VgaColour)>

c0010596 <VgaText::setTitleTextColour(VgaColour)>:
c0010596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001059a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001059e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00105a1:	e9 9a fe ff ff       	jmp    c0010440 <VgaText::updateTitle()>

c00105a6 <VgaText::setTitleColour(VgaColour)>:
c00105a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00105b1:	e9 8a fe ff ff       	jmp    c0010440 <VgaText::updateTitle()>

c00105b6 <VgaText::setTitle(char*)>:
c00105b6:	53                   	push   ebx
c00105b7:	83 ec 10             	sub    esp,0x10
c00105ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c2:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00105c8:	50                   	push   eax
c00105c9:	e8 3e 02 ff ff       	call   c000080c <strcpy>
c00105ce:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00105d2:	83 c4 18             	add    esp,0x18
c00105d5:	5b                   	pop    ebx
c00105d6:	e9 65 fe ff ff       	jmp    c0010440 <VgaText::updateTitle()>
c00105db:	90                   	nop

c00105dc <VgaText::combineColours(unsigned char, unsigned char)>:
c00105dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00105e0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00105e5:	83 e0 0f             	and    eax,0xf
c00105e8:	c1 e2 04             	shl    edx,0x4
c00105eb:	09 d0                	or     eax,edx
c00105ed:	c3                   	ret    

c00105ee <VgaText::scrollScreen()>:
c00105ee:	55                   	push   ebp
c00105ef:	b9 01 00 00 00       	mov    ecx,0x1
c00105f4:	57                   	push   edi
c00105f5:	56                   	push   esi
c00105f6:	53                   	push   ebx
c00105f7:	83 ec 0c             	sub    esp,0xc
c00105fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105fe:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010604:	31 ff                	xor    edi,edi
c0010606:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010609:	83 f9 17             	cmp    ecx,0x17
c001060c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001060f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010616:	75 27                	jne    c001063f <VgaText::scrollScreen()+0x51>
c0010618:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001061b:	01 f5                	add    ebp,esi
c001061d:	f7 c7 01 00 00 00    	test   edi,0x1
c0010623:	74 16                	je     c001063b <VgaText::scrollScreen()+0x4d>
c0010625:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010629:	50                   	push   eax
c001062a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001062e:	50                   	push   eax
c001062f:	e8 a8 ff ff ff       	call   c00105dc <VgaText::combineColours(unsigned char, unsigned char)>
c0010634:	5a                   	pop    edx
c0010635:	5a                   	pop    edx
c0010636:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010639:	eb 04                	jmp    c001063f <VgaText::scrollScreen()+0x51>
c001063b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001063f:	47                   	inc    edi
c0010640:	46                   	inc    esi
c0010641:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010647:	75 bd                	jne    c0010606 <VgaText::scrollScreen()+0x18>
c0010649:	41                   	inc    ecx
c001064a:	83 f9 18             	cmp    ecx,0x18
c001064d:	75 af                	jne    c00105fe <VgaText::scrollScreen()+0x10>
c001064f:	39 1d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ebx
c0010655:	75 1b                	jne    c0010672 <VgaText::scrollScreen()+0x84>
c0010657:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001065b:	74 05                	je     c0010662 <VgaText::scrollScreen()+0x74>
c001065d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010660:	eb 10                	jmp    c0010672 <VgaText::scrollScreen()+0x84>
c0010662:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010665:	85 c0                	test   eax,eax
c0010667:	74 09                	je     c0010672 <VgaText::scrollScreen()+0x84>
c0010669:	83 ec 0c             	sub    esp,0xc
c001066c:	53                   	push   ebx
c001066d:	ff d0                	call   eax
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010676:	83 c4 0c             	add    esp,0xc
c0010679:	5b                   	pop    ebx
c001067a:	5e                   	pop    esi
c001067b:	5f                   	pop    edi
c001067c:	5d                   	pop    ebp
c001067d:	e9 4a fe ff ff       	jmp    c00104cc <VgaText::updateCursor()>

c0010682 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010682:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010687:	c1 e0 08             	shl    eax,0x8
c001068a:	89 c2                	mov    edx,eax
c001068c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010691:	09 d0                	or     eax,edx
c0010693:	c3                   	ret    

c0010694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010694:	56                   	push   esi
c0010695:	53                   	push   ebx
c0010696:	51                   	push   ecx
c0010697:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001069b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106a0:	50                   	push   eax
c00106a1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106a6:	50                   	push   eax
c00106a7:	e8 30 ff ff ff       	call   c00105dc <VgaText::combineColours(unsigned char, unsigned char)>
c00106ac:	5b                   	pop    ebx
c00106ad:	0f b6 c0             	movzx  eax,al
c00106b0:	5e                   	pop    esi
c00106b1:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00106b6:	50                   	push   eax
c00106b7:	53                   	push   ebx
c00106b8:	e8 c5 ff ff ff       	call   c0010682 <VgaText::combineCharAndColour(char, unsigned char)>
c00106bd:	5a                   	pop    edx
c00106be:	5e                   	pop    esi
c00106bf:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00106c2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00106c8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00106cc:	0f b7 d2             	movzx  edx,dx
c00106cf:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00106d3:	39 0d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ecx
c00106d9:	75 10                	jne    c00106eb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00106db:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00106de:	85 c0                	test   eax,eax
c00106e0:	74 09                	je     c00106eb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00106e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00106e6:	5a                   	pop    edx
c00106e7:	5b                   	pop    ebx
c00106e8:	5e                   	pop    esi
c00106e9:	ff e0                	jmp    eax
c00106eb:	58                   	pop    eax
c00106ec:	5b                   	pop    ebx
c00106ed:	5e                   	pop    esi
c00106ee:	c3                   	ret    
c00106ef:	90                   	nop

c00106f0 <VgaText::getCursorX()>:
c00106f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00106f7:	c3                   	ret    

c00106f8 <VgaText::getCursorY()>:
c00106f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00106ff:	c3                   	ret    

c0010700 <VgaText::setCursor(int, int)>:
c0010700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010708:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001070b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001070f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010712:	e9 b5 fd ff ff       	jmp    c00104cc <VgaText::updateCursor()>

c0010717 <setActiveTerminal(VgaText*)>:
c0010717:	53                   	push   ebx
c0010718:	83 ec 08             	sub    esp,0x8
c001071b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071f:	85 db                	test   ebx,ebx
c0010721:	75 11                	jne    c0010734 <setActiveTerminal(VgaText*)+0x1d>
c0010723:	c7 44 24 10 64 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a964
c001072b:	83 c4 08             	add    esp,0x8
c001072e:	5b                   	pop    ebx
c001072f:	e9 1f 9c 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c0010734:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0010739:	85 c0                	test   eax,eax
c001073b:	74 0c                	je     c0010749 <setActiveTerminal(VgaText*)+0x32>
c001073d:	83 ec 0c             	sub    esp,0xc
c0010740:	50                   	push   eax
c0010741:	e8 86 fd ff ff       	call   c00104cc <VgaText::updateCursor()>
c0010746:	83 c4 10             	add    esp,0x10
c0010749:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c001074f:	51                   	push   ecx
c0010750:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010753:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010756:	53                   	push   ebx
c0010757:	e8 a4 ff ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c001075c:	83 c4 10             	add    esp,0x10
c001075f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010763:	75 07                	jne    c001076c <setActiveTerminal(VgaText*)+0x55>
c0010765:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001076c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010770:	83 c4 08             	add    esp,0x8
c0010773:	5b                   	pop    ebx
c0010774:	e9 05 fd ff ff       	jmp    c001047e <VgaText::load()>

c0010779 <doTerminalCycle()>:
c0010779:	83 ec 18             	sub    esp,0x18
c001077c:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0010781:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010784:	50                   	push   eax
c0010785:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c001078a:	e8 88 ff ff ff       	call   c0010717 <setActiveTerminal(VgaText*)>
c001078f:	83 c4 1c             	add    esp,0x1c
c0010792:	c3                   	ret    
c0010793:	90                   	nop

c0010794 <VgaText::setCursorX(int)>:
c0010794:	83 ec 10             	sub    esp,0x10
c0010797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001079b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001079e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a2:	50                   	push   eax
c00107a3:	e8 58 ff ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c00107a8:	83 c4 1c             	add    esp,0x1c
c00107ab:	c3                   	ret    

c00107ac <VgaText::setCursorY(int)>:
c00107ac:	83 ec 10             	sub    esp,0x10
c00107af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107b7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00107ba:	50                   	push   eax
c00107bb:	e8 40 ff ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c00107c0:	83 c4 1c             	add    esp,0x1c
c00107c3:	c3                   	ret    

c00107c4 <VgaText::incrementCursor(bool)>:
c00107c4:	56                   	push   esi
c00107c5:	53                   	push   ebx
c00107c6:	51                   	push   ecx
c00107c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00107cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00107d2:	40                   	inc    eax
c00107d3:	83 f8 50             	cmp    eax,0x50
c00107d6:	74 05                	je     c00107dd <VgaText::incrementCursor(bool)+0x19>
c00107d8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00107db:	eb 24                	jmp    c0010801 <VgaText::incrementCursor(bool)+0x3d>
c00107dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00107e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107e7:	8d 50 01             	lea    edx,[eax+0x1]
c00107ea:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00107ed:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00107f0:	75 0f                	jne    c0010801 <VgaText::incrementCursor(bool)+0x3d>
c00107f2:	83 ec 0c             	sub    esp,0xc
c00107f5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00107f8:	53                   	push   ebx
c00107f9:	e8 f0 fd ff ff       	call   c00105ee <VgaText::scrollScreen()>
c00107fe:	83 c4 10             	add    esp,0x10
c0010801:	89 f0                	mov    eax,esi
c0010803:	84 c0                	test   al,al
c0010805:	74 0c                	je     c0010813 <VgaText::incrementCursor(bool)+0x4f>
c0010807:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001080b:	5a                   	pop    edx
c001080c:	5b                   	pop    ebx
c001080d:	5e                   	pop    esi
c001080e:	e9 b9 fc ff ff       	jmp    c00104cc <VgaText::updateCursor()>
c0010813:	58                   	pop    eax
c0010814:	5b                   	pop    ebx
c0010815:	5e                   	pop    esi
c0010816:	c3                   	ret    
c0010817:	90                   	nop

c0010818 <VgaText::decrementCursor(bool)>:
c0010818:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001081c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010820:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010823:	85 c0                	test   eax,eax
c0010825:	74 04                	je     c001082b <VgaText::decrementCursor(bool)+0x13>
c0010827:	48                   	dec    eax
c0010828:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001082b:	84 c9                	test   cl,cl
c001082d:	74 09                	je     c0010838 <VgaText::decrementCursor(bool)+0x20>
c001082f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010833:	e9 94 fc ff ff       	jmp    c00104cc <VgaText::updateCursor()>
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001083a:	53                   	push   ebx
c001083b:	83 ec 08             	sub    esp,0x8
c001083e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010842:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010846:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001084a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001084e:	3c 07                	cmp    al,0x7
c0010850:	75 2a                	jne    c001087c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010852:	a1 38 e7 02 c0       	mov    eax,ds:0xc002e738
c0010857:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001085f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010867:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001086f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010873:	83 c4 08             	add    esp,0x8
c0010876:	5b                   	pop    ebx
c0010877:	e9 46 2f 00 00       	jmp    c00137c2 <Buzzer::beep(int, int, bool)>
c001087c:	3c 0d                	cmp    al,0xd
c001087e:	75 09                	jne    c0010889 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010880:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010887:	eb 2c                	jmp    c00108b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010889:	3c 0a                	cmp    al,0xa
c001088b:	75 31                	jne    c00108be <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001088d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010890:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010897:	8d 50 01             	lea    edx,[eax+0x1]
c001089a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001089d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108a0:	75 0f                	jne    c00108b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00108a2:	83 ec 0c             	sub    esp,0xc
c00108a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108a8:	53                   	push   ebx
c00108a9:	e8 40 fd ff ff       	call   c00105ee <VgaText::scrollScreen()>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108b5:	83 c4 08             	add    esp,0x8
c00108b8:	5b                   	pop    ebx
c00108b9:	e9 0e fc ff ff       	jmp    c00104cc <VgaText::updateCursor()>
c00108be:	3c 08                	cmp    al,0x8
c00108c0:	75 25                	jne    c00108e7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00108c2:	50                   	push   eax
c00108c3:	50                   	push   eax
c00108c4:	6a 01                	push   0x1
c00108c6:	53                   	push   ebx
c00108c7:	e8 4c ff ff ff       	call   c0010818 <VgaText::decrementCursor(bool)>
c00108cc:	5a                   	pop    edx
c00108cd:	59                   	pop    ecx
c00108ce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108d4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108da:	6a 20                	push   0x20
c00108dc:	53                   	push   ebx
c00108dd:	e8 b2 fd ff ff       	call   c0010694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108e2:	83 c4 28             	add    esp,0x28
c00108e5:	5b                   	pop    ebx
c00108e6:	c3                   	ret    
c00108e7:	83 ec 08             	sub    esp,0x8
c00108ea:	0f be c0             	movsx  eax,al
c00108ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108f0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108f3:	51                   	push   ecx
c00108f4:	52                   	push   edx
c00108f5:	50                   	push   eax
c00108f6:	53                   	push   ebx
c00108f7:	e8 98 fd ff ff       	call   c0010694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108fc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010900:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010908:	83 c4 28             	add    esp,0x28
c001090b:	5b                   	pop    ebx
c001090c:	e9 b3 fe ff ff       	jmp    c00107c4 <VgaText::incrementCursor(bool)>
c0010911:	90                   	nop

c0010912 <VgaText::doUpdate()>:
c0010912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010916:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010919:	85 c0                	test   eax,eax
c001091b:	74 02                	je     c001091f <VgaText::doUpdate()+0xd>
c001091d:	ff e0                	jmp    eax
c001091f:	c3                   	ret    

c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010920:	55                   	push   ebp
c0010921:	31 ed                	xor    ebp,ebp
c0010923:	57                   	push   edi
c0010924:	56                   	push   esi
c0010925:	53                   	push   ebx
c0010926:	83 ec 1c             	sub    esp,0x1c
c0010929:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001092d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010932:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010939:	50                   	push   eax
c001093a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001093f:	50                   	push   eax
c0010940:	e8 97 fc ff ff       	call   c00105dc <VgaText::combineColours(unsigned char, unsigned char)>
c0010945:	59                   	pop    ecx
c0010946:	0f b6 c0             	movzx  eax,al
c0010949:	5e                   	pop    esi
c001094a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001094f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010953:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001095a:	0f b7 f6             	movzx  esi,si
c001095d:	01 f6                	add    esi,esi
c001095f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010962:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010965:	84 c0                	test   al,al
c0010967:	0f 84 fd 00 00 00    	je     c0010a6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001096d:	3c 0d                	cmp    al,0xd
c001096f:	75 0c                	jne    c001097d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010971:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010978:	e9 e7 00 00 00       	jmp    c0010a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001097d:	3c 0a                	cmp    al,0xa
c001097f:	75 47                	jne    c00109c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010981:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010984:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001098b:	8d 48 01             	lea    ecx,[eax+0x1]
c001098e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010991:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010994:	75 0f                	jne    c00109a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010996:	83 ec 0c             	sub    esp,0xc
c0010999:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001099c:	53                   	push   ebx
c001099d:	e8 4c fc ff ff       	call   c00105ee <VgaText::scrollScreen()>
c00109a2:	83 c4 10             	add    esp,0x10
c00109a5:	83 ec 0c             	sub    esp,0xc
c00109a8:	31 ed                	xor    ebp,ebp
c00109aa:	53                   	push   ebx
c00109ab:	e8 1c fb ff ff       	call   c00104cc <VgaText::updateCursor()>
c00109b0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109bb:	0f b7 f6             	movzx  esi,si
c00109be:	01 f6                	add    esi,esi
c00109c0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109c3:	e9 9c 00 00 00       	jmp    c0010a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109c8:	3c 08                	cmp    al,0x8
c00109ca:	75 35                	jne    c0010a01 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00109cc:	56                   	push   esi
c00109cd:	56                   	push   esi
c00109ce:	6a 01                	push   0x1
c00109d0:	53                   	push   ebx
c00109d1:	e8 42 fe ff ff       	call   c0010818 <VgaText::decrementCursor(bool)>
c00109d6:	58                   	pop    eax
c00109d7:	5a                   	pop    edx
c00109d8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00109db:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00109de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00109e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00109e4:	6a 20                	push   0x20
c00109e6:	53                   	push   ebx
c00109e7:	e8 a8 fc ff ff       	call   c0010694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109f1:	83 c4 20             	add    esp,0x20
c00109f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109f7:	0f b7 f6             	movzx  esi,si
c00109fa:	01 f6                	add    esi,esi
c00109fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109ff:	eb 63                	jmp    c0010a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a01:	51                   	push   ecx
c0010a02:	51                   	push   ecx
c0010a03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a07:	50                   	push   eax
c0010a08:	e8 75 fc ff ff       	call   c0010682 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	66 89 06             	mov    WORD PTR [esi],ax
c0010a13:	39 1d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ebx
c0010a19:	75 21                	jne    c0010a3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a1b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010a1e:	85 c0                	test   eax,eax
c0010a20:	74 1a                	je     c0010a3c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a22:	52                   	push   edx
c0010a23:	52                   	push   edx
c0010a24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a32:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010a35:	51                   	push   ecx
c0010a36:	53                   	push   ebx
c0010a37:	ff d0                	call   eax
c0010a39:	83 c4 20             	add    esp,0x20
c0010a3c:	83 c6 02             	add    esi,0x2
c0010a3f:	50                   	push   eax
c0010a40:	50                   	push   eax
c0010a41:	6a 00                	push   0x0
c0010a43:	53                   	push   ebx
c0010a44:	e8 7b fd ff ff       	call   c00107c4 <VgaText::incrementCursor(bool)>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010a50:	75 0d                	jne    c0010a5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010a52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a57:	0f b7 f6             	movzx  esi,si
c0010a5a:	01 f6                	add    esi,esi
c0010a5c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a5f:	bd 01 00 00 00       	mov    ebp,0x1
c0010a64:	47                   	inc    edi
c0010a65:	e9 f8 fe ff ff       	jmp    c0010962 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010a6a:	83 ec 0c             	sub    esp,0xc
c0010a6d:	53                   	push   ebx
c0010a6e:	e8 59 fa ff ff       	call   c00104cc <VgaText::updateCursor()>
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	89 e8                	mov    eax,ebp
c0010a78:	84 c0                	test   al,al
c0010a7a:	74 0c                	je     c0010a88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010a7c:	83 ec 0c             	sub    esp,0xc
c0010a7f:	53                   	push   ebx
c0010a80:	e8 8d fe ff ff       	call   c0010912 <VgaText::doUpdate()>
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010a8f:	83 c4 1c             	add    esp,0x1c
c0010a92:	5b                   	pop    ebx
c0010a93:	5e                   	pop    esi
c0010a94:	5f                   	pop    edi
c0010a95:	5d                   	pop    ebp
c0010a96:	c3                   	ret    
c0010a97:	90                   	nop

c0010a98 <VgaText::clearScreen()>:
c0010a98:	57                   	push   edi
c0010a99:	56                   	push   esi
c0010a9a:	31 f6                	xor    esi,esi
c0010a9c:	53                   	push   ebx
c0010a9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aa1:	52                   	push   edx
c0010aa2:	6a 00                	push   0x0
c0010aa4:	6a 00                	push   0x0
c0010aa6:	53                   	push   ebx
c0010aa7:	e8 54 fc ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c0010aac:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ab9:	7e 20                	jle    c0010adb <VgaText::clearScreen()+0x43>
c0010abb:	31 ff                	xor    edi,edi
c0010abd:	50                   	push   eax
c0010abe:	50                   	push   eax
c0010abf:	56                   	push   esi
c0010ac0:	57                   	push   edi
c0010ac1:	47                   	inc    edi
c0010ac2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ac5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ac8:	6a 20                	push   0x20
c0010aca:	53                   	push   ebx
c0010acb:	e8 c4 fb ff ff       	call   c0010694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ad0:	83 c4 20             	add    esp,0x20
c0010ad3:	83 ff 50             	cmp    edi,0x50
c0010ad6:	75 e5                	jne    c0010abd <VgaText::clearScreen()+0x25>
c0010ad8:	46                   	inc    esi
c0010ad9:	eb db                	jmp    c0010ab6 <VgaText::clearScreen()+0x1e>
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	53                   	push   ebx
c0010adf:	e8 2e fe ff ff       	call   c0010912 <VgaText::doUpdate()>
c0010ae4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	5b                   	pop    ebx
c0010aef:	5e                   	pop    esi
c0010af0:	5f                   	pop    edi
c0010af1:	c3                   	ret    

c0010af2 <VgaText::putchar(char)>:
c0010af2:	56                   	push   esi
c0010af3:	53                   	push   ebx
c0010af4:	83 ec 14             	sub    esp,0x14
c0010af7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010aff:	3c 5b                	cmp    al,0x5b
c0010b01:	75 18                	jne    c0010b1b <VgaText::putchar(char)+0x29>
c0010b03:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b07:	74 1f                	je     c0010b28 <VgaText::putchar(char)+0x36>
c0010b09:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b0f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b16:	e9 bd 00 00 00       	jmp    c0010bd8 <VgaText::putchar(char)+0xe6>
c0010b1b:	3c 1b                	cmp    al,0x1b
c0010b1d:	75 09                	jne    c0010b28 <VgaText::putchar(char)+0x36>
c0010b1f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010b23:	e9 b0 00 00 00       	jmp    c0010bd8 <VgaText::putchar(char)+0xe6>
c0010b28:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010b2b:	84 c9                	test   cl,cl
c0010b2d:	0f 84 92 00 00 00    	je     c0010bc5 <VgaText::putchar(char)+0xd3>
c0010b33:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b36:	80 fa 3e             	cmp    dl,0x3e
c0010b39:	77 76                	ja     c0010bb1 <VgaText::putchar(char)+0xbf>
c0010b3b:	3c 6d                	cmp    al,0x6d
c0010b3d:	75 47                	jne    c0010b86 <VgaText::putchar(char)+0x94>
c0010b3f:	31 f6                	xor    esi,esi
c0010b41:	31 d2                	xor    edx,edx
c0010b43:	31 c0                	xor    eax,eax
c0010b45:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010b48:	7e 2d                	jle    c0010b77 <VgaText::putchar(char)+0x85>
c0010b4a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010b4f:	80 fa 3b             	cmp    dl,0x3b
c0010b52:	75 17                	jne    c0010b6b <VgaText::putchar(char)+0x79>
c0010b54:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b58:	50                   	push   eax
c0010b59:	53                   	push   ebx
c0010b5a:	e8 83 f9 ff ff       	call   c00104e2 <VgaText::doANSI_SGR(int)>
c0010b5f:	59                   	pop    ecx
c0010b60:	31 d2                	xor    edx,edx
c0010b62:	58                   	pop    eax
c0010b63:	31 c0                	xor    eax,eax
c0010b65:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b69:	eb 09                	jmp    c0010b74 <VgaText::putchar(char)+0x82>
c0010b6b:	6b c0 0a             	imul   eax,eax,0xa
c0010b6e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b72:	88 ca                	mov    dl,cl
c0010b74:	46                   	inc    esi
c0010b75:	eb ce                	jmp    c0010b45 <VgaText::putchar(char)+0x53>
c0010b77:	84 d2                	test   dl,dl
c0010b79:	74 2e                	je     c0010ba9 <VgaText::putchar(char)+0xb7>
c0010b7b:	50                   	push   eax
c0010b7c:	53                   	push   ebx
c0010b7d:	e8 60 f9 ff ff       	call   c00104e2 <VgaText::doANSI_SGR(int)>
c0010b82:	58                   	pop    eax
c0010b83:	5a                   	pop    edx
c0010b84:	eb 23                	jmp    c0010ba9 <VgaText::putchar(char)+0xb7>
c0010b86:	3c 4a                	cmp    al,0x4a
c0010b88:	75 1f                	jne    c0010ba9 <VgaText::putchar(char)+0xb7>
c0010b8a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010b8e:	75 19                	jne    c0010ba9 <VgaText::putchar(char)+0xb7>
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	53                   	push   ebx
c0010b94:	e8 ff fe ff ff       	call   c0010a98 <VgaText::clearScreen()>
c0010b99:	83 c4 0c             	add    esp,0xc
c0010b9c:	6a 00                	push   0x0
c0010b9e:	6a 00                	push   0x0
c0010ba0:	53                   	push   ebx
c0010ba1:	e8 5a fb ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c0010ba6:	83 c4 10             	add    esp,0x10
c0010ba9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010baf:	eb 27                	jmp    c0010bd8 <VgaText::putchar(char)+0xe6>
c0010bb1:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010bb4:	83 fa 0e             	cmp    edx,0xe
c0010bb7:	7f 1f                	jg     c0010bd8 <VgaText::putchar(char)+0xe6>
c0010bb9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010bbc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010bbf:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010bc3:	eb 13                	jmp    c0010bd8 <VgaText::putchar(char)+0xe6>
c0010bc5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bc8:	0f be c0             	movsx  eax,al
c0010bcb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bce:	50                   	push   eax
c0010bcf:	53                   	push   ebx
c0010bd0:	e8 65 fc ff ff       	call   c001083a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	83 c4 14             	add    esp,0x14
c0010bdb:	5b                   	pop    ebx
c0010bdc:	5e                   	pop    esi
c0010bdd:	c3                   	ret    

c0010bde <VgaText::putx(unsigned int)>:
c0010bde:	57                   	push   edi
c0010bdf:	b9 11 00 00 00       	mov    ecx,0x11
c0010be4:	56                   	push   esi
c0010be5:	be 72 a9 02 c0       	mov    esi,0xc002a972
c0010bea:	53                   	push   ebx
c0010beb:	83 ec 20             	sub    esp,0x20
c0010bee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010bf2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010bf6:	fc                   	cld    
c0010bf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bf9:	be 08 00 00 00       	mov    esi,0x8
c0010bfe:	50                   	push   eax
c0010bff:	50                   	push   eax
c0010c00:	89 d8                	mov    eax,ebx
c0010c02:	c1 e3 04             	shl    ebx,0x4
c0010c05:	c1 e8 1c             	shr    eax,0x1c
c0010c08:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c0d:	50                   	push   eax
c0010c0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c12:	e8 db fe ff ff       	call   c0010af2 <VgaText::putchar(char)>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	4e                   	dec    esi
c0010c1b:	75 e1                	jne    c0010bfe <VgaText::putx(unsigned int)+0x20>
c0010c1d:	83 c4 20             	add    esp,0x20
c0010c20:	5b                   	pop    ebx
c0010c21:	5e                   	pop    esi
c0010c22:	5f                   	pop    edi
c0010c23:	c3                   	ret    

c0010c24 <VgaText::puts(char const*)>:
c0010c24:	53                   	push   ebx
c0010c25:	83 ec 08             	sub    esp,0x8
c0010c28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c2c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c2f:	84 c0                	test   al,al
c0010c31:	74 12                	je     c0010c45 <VgaText::puts(char const*)+0x21>
c0010c33:	43                   	inc    ebx
c0010c34:	51                   	push   ecx
c0010c35:	51                   	push   ecx
c0010c36:	50                   	push   eax
c0010c37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c3b:	e8 b2 fe ff ff       	call   c0010af2 <VgaText::putchar(char)>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	eb e7                	jmp    c0010c2c <VgaText::puts(char const*)+0x8>
c0010c45:	83 c4 08             	add    esp,0x8
c0010c48:	5b                   	pop    ebx
c0010c49:	c3                   	ret    

c0010c4a <VgaText::VgaText(char const*)>:
c0010c4a:	57                   	push   edi
c0010c4b:	56                   	push   esi
c0010c4c:	53                   	push   ebx
c0010c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c51:	83 ec 08             	sub    esp,0x8
c0010c54:	6a 00                	push   0x0
c0010c56:	50                   	push   eax
c0010c57:	e8 44 05 00 00       	call   c00111a0 <UnixFile::UnixFile(int)>
c0010c5c:	83 c4 10             	add    esp,0x10
c0010c5f:	ba d8 a9 02 c0       	mov    edx,0xc002a9d8
c0010c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c68:	89 10                	mov    DWORD PTR [eax],edx
c0010c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c6e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c79:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c84:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c8c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c94:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c9f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010caa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc0:	8d 50 60             	lea    edx,[eax+0x60]
c0010cc3:	bb 60 e6 02 c0       	mov    ebx,0xc002e660
c0010cc8:	b8 08 00 00 00       	mov    eax,0x8
c0010ccd:	fc                   	cld    
c0010cce:	89 d7                	mov    edi,edx
c0010cd0:	89 de                	mov    esi,ebx
c0010cd2:	89 c1                	mov    ecx,eax
c0010cd4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cda:	05 82 00 00 00       	add    eax,0x82
c0010cdf:	83 ec 08             	sub    esp,0x8
c0010ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ce6:	50                   	push   eax
c0010ce7:	e8 20 fb fe ff       	call   c000080c <strcpy>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf3:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010cfa:	83 ec 0c             	sub    esp,0xc
c0010cfd:	6a 01                	push   0x1
c0010cff:	e8 df 08 00 00       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c0010d04:	83 c4 10             	add    esp,0x10
c0010d07:	89 c2                	mov    edx,eax
c0010d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d10:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d1d:	89 c6                	mov    esi,eax
c0010d1f:	e8 35 f0 ff ff       	call   c000fd59 <Phys::allocatePage()>
c0010d24:	68 05 0c 00 00       	push   0xc05
c0010d29:	56                   	push   esi
c0010d2a:	50                   	push   eax
c0010d2b:	53                   	push   ebx
c0010d2c:	e8 59 0f 00 00       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d3b:	83 ec 04             	sub    esp,0x4
c0010d3e:	68 00 0f 00 00       	push   0xf00
c0010d43:	6a 00                	push   0x0
c0010d45:	50                   	push   eax
c0010d46:	e8 05 fa fe ff       	call   c0000750 <memset>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	83 ec 04             	sub    esp,0x4
c0010d51:	6a 00                	push   0x0
c0010d53:	6a 07                	push   0x7
c0010d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d59:	e8 18 f8 ff ff       	call   c0010576 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	83 ec 04             	sub    esp,0x4
c0010d64:	6a 00                	push   0x0
c0010d66:	6a 00                	push   0x0
c0010d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d6c:	e8 8f f9 ff ff       	call   c0010700 <VgaText::setCursor(int, int)>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d7b:	e8 18 fd ff ff       	call   c0010a98 <VgaText::clearScreen()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d87:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8f:	05 02 01 00 00       	add    eax,0x102
c0010d94:	83 ec 04             	sub    esp,0x4
c0010d97:	68 96 00 00 00       	push   0x96
c0010d9c:	6a 00                	push   0x0
c0010d9e:	50                   	push   eax
c0010d9f:	e8 ac f9 fe ff       	call   c0000750 <memset>
c0010da4:	83 c4 10             	add    esp,0x10
c0010da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dab:	05 98 01 00 00       	add    eax,0x198
c0010db0:	83 ec 04             	sub    esp,0x4
c0010db3:	68 2c 01 00 00       	push   0x12c
c0010db8:	6a 00                	push   0x0
c0010dba:	50                   	push   eax
c0010dbb:	e8 90 f9 fe ff       	call   c0000750 <memset>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	90                   	nop
c0010dc4:	5b                   	pop    ebx
c0010dc5:	5e                   	pop    esi
c0010dc6:	5f                   	pop    edi
c0010dc7:	c3                   	ret    

c0010dc8 <VgaText::receiveKey(unsigned char)>:
c0010dc8:	55                   	push   ebp
c0010dc9:	57                   	push   edi
c0010dca:	56                   	push   esi
c0010dcb:	53                   	push   ebx
c0010dcc:	83 ec 1c             	sub    esp,0x1c
c0010dcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010dd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dd7:	84 db                	test   bl,bl
c0010dd9:	0f 84 c9 00 00 00    	je     c0010ea8 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ddf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010de5:	80 fb 08             	cmp    bl,0x8
c0010de8:	75 2c                	jne    c0010e16 <VgaText::receiveKey(unsigned char)+0x4e>
c0010dea:	83 ec 0c             	sub    esp,0xc
c0010ded:	57                   	push   edi
c0010dee:	e8 79 f9 fe ff       	call   c000076c <strlen>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	85 c0                	test   eax,eax
c0010df8:	74 41                	je     c0010e3b <VgaText::receiveKey(unsigned char)+0x73>
c0010dfa:	50                   	push   eax
c0010dfb:	50                   	push   eax
c0010dfc:	6a 08                	push   0x8
c0010dfe:	56                   	push   esi
c0010dff:	e8 ee fc ff ff       	call   c0010af2 <VgaText::putchar(char)>
c0010e04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e07:	e8 60 f9 fe ff       	call   c000076c <strlen>
c0010e0c:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010e14:	eb 22                	jmp    c0010e38 <VgaText::receiveKey(unsigned char)+0x70>
c0010e16:	0f be c3             	movsx  eax,bl
c0010e19:	52                   	push   edx
c0010e1a:	52                   	push   edx
c0010e1b:	50                   	push   eax
c0010e1c:	56                   	push   esi
c0010e1d:	e8 d0 fc ff ff       	call   c0010af2 <VgaText::putchar(char)>
c0010e22:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e2b:	59                   	pop    ecx
c0010e2c:	5d                   	pop    ebp
c0010e2d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e31:	50                   	push   eax
c0010e32:	57                   	push   edi
c0010e33:	e8 14 fb fe ff       	call   c000094c <strcat>
c0010e38:	83 c4 10             	add    esp,0x10
c0010e3b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010e42:	75 05                	jne    c0010e49 <VgaText::receiveKey(unsigned char)+0x81>
c0010e44:	80 fb 0a             	cmp    bl,0xa
c0010e47:	75 53                	jne    c0010e9c <VgaText::receiveKey(unsigned char)+0xd4>
c0010e49:	83 ec 0c             	sub    esp,0xc
c0010e4c:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010e52:	53                   	push   ebx
c0010e53:	e8 14 f9 fe ff       	call   c000076c <strlen>
c0010e58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e5b:	89 c5                	mov    ebp,eax
c0010e5d:	e8 0a f9 fe ff       	call   c000076c <strlen>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010e69:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010e6e:	76 10                	jbe    c0010e80 <VgaText::receiveKey(unsigned char)+0xb8>
c0010e70:	83 ec 0c             	sub    esp,0xc
c0010e73:	68 83 a9 02 c0       	push   0xc002a983
c0010e78:	e8 d6 94 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	50                   	push   eax
c0010e81:	50                   	push   eax
c0010e82:	57                   	push   edi
c0010e83:	53                   	push   ebx
c0010e84:	e8 c3 fa fe ff       	call   c000094c <strcat>
c0010e89:	83 c4 0c             	add    esp,0xc
c0010e8c:	68 96 00 00 00       	push   0x96
c0010e91:	6a 00                	push   0x0
c0010e93:	57                   	push   edi
c0010e94:	e8 b7 f8 fe ff       	call   c0000750 <memset>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	56                   	push   esi
c0010ea0:	e8 6d fa ff ff       	call   c0010912 <VgaText::doUpdate()>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	83 c4 1c             	add    esp,0x1c
c0010eab:	5b                   	pop    ebx
c0010eac:	5e                   	pop    esi
c0010ead:	5f                   	pop    edi
c0010eae:	5d                   	pop    ebp
c0010eaf:	c3                   	ret    

c0010eb0 <VgaText::write(unsigned long long, void*, int*)>:
c0010eb0:	55                   	push   ebp
c0010eb1:	57                   	push   edi
c0010eb2:	56                   	push   esi
c0010eb3:	53                   	push   ebx
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ebb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ebf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ec3:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010eca:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ecd:	39 eb                	cmp    ebx,ebp
c0010ecf:	74 13                	je     c0010ee4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ed1:	43                   	inc    ebx
c0010ed2:	50                   	push   eax
c0010ed3:	50                   	push   eax
c0010ed4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ed8:	50                   	push   eax
c0010ed9:	56                   	push   esi
c0010eda:	e8 13 fc ff ff       	call   c0010af2 <VgaText::putchar(char)>
c0010edf:	83 c4 10             	add    esp,0x10
c0010ee2:	eb e9                	jmp    c0010ecd <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010eee:	56                   	push   esi
c0010eef:	e8 1e fa ff ff       	call   c0010912 <VgaText::doUpdate()>
c0010ef4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ef8:	89 38                	mov    DWORD PTR [eax],edi
c0010efa:	83 c4 1c             	add    esp,0x1c
c0010efd:	31 c0                	xor    eax,eax
c0010eff:	5b                   	pop    ebx
c0010f00:	5e                   	pop    esi
c0010f01:	5f                   	pop    edi
c0010f02:	5d                   	pop    ebp
c0010f03:	c3                   	ret    

c0010f04 <newTerminal(char*)>:
c0010f04:	83 ec 28             	sub    esp,0x28
c0010f07:	68 c4 02 00 00       	push   0x2c4
c0010f0c:	e8 4c ea ff ff       	call   c000f95d <malloc>
c0010f11:	5a                   	pop    edx
c0010f12:	59                   	pop    ecx
c0010f13:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f17:	50                   	push   eax
c0010f18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f1c:	e8 29 fd ff ff       	call   c0010c4a <VgaText::VgaText(char const*)>
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	83 c4 2c             	add    esp,0x2c
c0010f28:	c3                   	ret    
c0010f29:	90                   	nop

c0010f2a <TSS::TSS()>:
c0010f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f35:	90                   	nop
c0010f36:	c3                   	ret    
c0010f37:	90                   	nop

c0010f38 <TSS::setESP(unsigned long)>:
c0010f38:	55                   	push   ebp
c0010f39:	89 e5                	mov    ebp,esp
c0010f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f47:	90                   	nop
c0010f48:	5d                   	pop    ebp
c0010f49:	c3                   	ret    

c0010f4a <TSS::flush()>:
c0010f4a:	55                   	push   ebp
c0010f4b:	89 e5                	mov    ebp,esp
c0010f4d:	83 ec 10             	sub    esp,0x10
c0010f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f55:	83 c8 03             	or     eax,0x3
c0010f58:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010f5c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010f60:	66 89 d0             	mov    ax,dx
c0010f63:	0f 00 d8             	ltr    ax
c0010f66:	90                   	nop
c0010f67:	c9                   	leave  
c0010f68:	c3                   	ret    
c0010f69:	90                   	nop

c0010f6a <TSS::setup(unsigned long, unsigned long)>:
c0010f6a:	55                   	push   ebp
c0010f6b:	89 e5                	mov    ebp,esp
c0010f6d:	83 ec 18             	sub    esp,0x18
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	6a 68                	push   0x68
c0010f75:	e8 e3 e9 ff ff       	call   c000f95d <malloc>
c0010f7a:	83 c4 10             	add    esp,0x10
c0010f7d:	89 c2                	mov    edx,eax
c0010f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f82:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8b:	83 ec 04             	sub    esp,0x4
c0010f8e:	6a 68                	push   0x68
c0010f90:	6a 00                	push   0x0
c0010f92:	50                   	push   eax
c0010f93:	e8 b8 f7 fe ff       	call   c0000750 <memset>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fa1:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fad:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc5:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdd:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe9:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff5:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011001:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011010:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011019:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001101c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001101f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011025:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001102c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011032:	0f 20 da             	mov    edx,cr3
c0011035:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011038:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001103b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001103e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011044:	83 ec 08             	sub    esp,0x8
c0011047:	50                   	push   eax
c0011048:	8d 45 ec             	lea    eax,[ebp-0x14]
c001104b:	50                   	push   eax
c001104c:	e8 01 e0 ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	83 ec 08             	sub    esp,0x8
c0011057:	6a 68                	push   0x68
c0011059:	8d 45 ec             	lea    eax,[ebp-0x14]
c001105c:	50                   	push   eax
c001105d:	e8 0c e0 ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c0011062:	83 c4 10             	add    esp,0x10
c0011065:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011069:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001106c:	83 e0 0f             	and    eax,0xf
c001106f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011072:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011075:	83 c8 40             	or     eax,0x40
c0011078:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001107b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011086:	05 78 01 00 00       	add    eax,0x178
c001108b:	83 ec 04             	sub    esp,0x4
c001108e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011091:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011094:	50                   	push   eax
c0011095:	e8 08 e0 ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c001109a:	83 c4 10             	add    esp,0x10
c001109d:	89 c2                	mov    edx,eax
c001109f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a2:	89 10                	mov    DWORD PTR [eax],edx
c00110a4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00110a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110af:	05 78 01 00 00       	add    eax,0x178
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	50                   	push   eax
c00110b8:	e8 0f e0 ff ff       	call   c000f0cc <GDT::flush()>
c00110bd:	83 c4 10             	add    esp,0x10
c00110c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c5:	c9                   	leave  
c00110c6:	c3                   	ret    
c00110c7:	90                   	nop

c00110c8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00110c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00110d8:	75 08                	jne    c00110e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00110da:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00110e0:	eb 38                	jmp    c001111a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00110e2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110e7:	75 17                	jne    c0011100 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00110e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00110f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110fd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011100:	89 c1                	mov    ecx,eax
c0011102:	83 e1 fd             	and    ecx,0xfffffffd
c0011105:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001110b:	74 cd                	je     c00110da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001110d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011112:	83 e0 ef             	and    eax,0xffffffef
c0011115:	83 f8 08             	cmp    eax,0x8
c0011118:	76 c0                	jbe    c00110da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001111a:	31 c0                	xor    eax,eax
c001111c:	c3                   	ret    
c001111d:	90                   	nop

c001111e <ReservedFilename::isAtty()>:
c001111e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011122:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011125:	31 c0                	xor    eax,eax
c0011127:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001112d:	74 09                	je     c0011138 <ReservedFilename::isAtty()+0x1a>
c001112f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011135:	0f 94 c0             	sete   al
c0011138:	c3                   	ret    
c0011139:	90                   	nop

c001113a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001113a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001113e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011145:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011149:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001114e:	75 08                	jne    c0011158 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011150:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011156:	eb 3d                	jmp    c0011195 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011158:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001115d:	75 17                	jne    c0011176 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001115f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011164:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011167:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001116d:	8b 10                	mov    edx,DWORD PTR [eax]
c001116f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011173:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011176:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001117b:	75 04                	jne    c0011181 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001117d:	89 0a                	mov    DWORD PTR [edx],ecx
c001117f:	eb 14                	jmp    c0011195 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011181:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011186:	74 c8                	je     c0011150 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011188:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001118d:	83 e0 ef             	and    eax,0xffffffef
c0011190:	83 f8 08             	cmp    eax,0x8
c0011193:	76 bb                	jbe    c0011150 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011195:	31 c0                	xor    eax,eax
c0011197:	c3                   	ret    

c0011198 <UnixFile::getFileDescriptor()>:
c0011198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001119c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119f:	c3                   	ret    

c00111a0 <UnixFile::UnixFile(int)>:
c00111a0:	53                   	push   ebx
c00111a1:	83 ec 28             	sub    esp,0x28
c00111a4:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c00111a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111ad:	89 10                	mov    DWORD PTR [eax],edx
c00111af:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00111b7:	0f 8f 8c 01 00 00    	jg     c0011349 <UnixFile::UnixFile(int)+0x1a9>
c00111bd:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c00111c2:	8d 50 01             	lea    edx,[eax+0x1]
c00111c5:	89 15 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edx
c00111cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00111cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00111d2:	83 ec 08             	sub    esp,0x8
c00111d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00111d9:	68 18 e7 02 c0       	push   0xc002e718
c00111de:	e8 13 79 01 00       	call   c0028af6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00111e3:	83 c4 10             	add    esp,0x10
c00111e6:	a0 14 e7 02 c0       	mov    al,ds:0xc002e714
c00111eb:	83 f0 01             	xor    eax,0x1
c00111ee:	84 c0                	test   al,al
c00111f0:	0f 84 54 01 00 00    	je     c001134a <UnixFile::UnixFile(int)+0x1aa>
c00111f6:	c6 05 14 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e714,0x1
c00111fd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011205:	83 ec 0c             	sub    esp,0xc
c0011208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001120c:	e8 4c e7 ff ff       	call   c000f95d <malloc>
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	89 c3                	mov    ebx,eax
c0011216:	83 ec 08             	sub    esp,0x8
c0011219:	68 03 ff ff 0f       	push   0xfffff03
c001121e:	53                   	push   ebx
c001121f:	e8 2c 01 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c0011224:	83 c4 10             	add    esp,0x10
c0011227:	89 1d 0c e7 02 c0    	mov    DWORD PTR ds:0xc002e70c,ebx
c001122d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011235:	83 ec 0c             	sub    esp,0xc
c0011238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001123c:	e8 1c e7 ff ff       	call   c000f95d <malloc>
c0011241:	83 c4 10             	add    esp,0x10
c0011244:	89 c3                	mov    ebx,eax
c0011246:	83 ec 08             	sub    esp,0x8
c0011249:	68 01 ff ff 0f       	push   0xfffff01
c001124e:	53                   	push   ebx
c001124f:	e8 fc 00 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c0011254:	83 c4 10             	add    esp,0x10
c0011257:	89 1d 10 e7 02 c0    	mov    DWORD PTR ds:0xc002e710,ebx
c001125d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011265:	83 ec 0c             	sub    esp,0xc
c0011268:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001126c:	e8 ec e6 ff ff       	call   c000f95d <malloc>
c0011271:	83 c4 10             	add    esp,0x10
c0011274:	89 c3                	mov    ebx,eax
c0011276:	83 ec 08             	sub    esp,0x8
c0011279:	68 00 ff ff 0f       	push   0xfffff00
c001127e:	53                   	push   ebx
c001127f:	e8 cc 00 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	89 1d 04 e7 02 c0    	mov    DWORD PTR ds:0xc002e704,ebx
c001128d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001129c:	e8 bc e6 ff ff       	call   c000f95d <malloc>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	89 c3                	mov    ebx,eax
c00112a6:	83 ec 08             	sub    esp,0x8
c00112a9:	68 02 ff ff 0f       	push   0xfffff02
c00112ae:	53                   	push   ebx
c00112af:	e8 9c 00 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	89 1d 08 e7 02 c0    	mov    DWORD PTR ds:0xc002e708,ebx
c00112bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00112c5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00112ca:	7f 7e                	jg     c001134a <UnixFile::UnixFile(int)+0x1aa>
c00112cc:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112db:	e8 7d e6 ff ff       	call   c000f95d <malloc>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	89 c3                	mov    ebx,eax
c00112e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112e9:	05 10 ff ff 0f       	add    eax,0xfffff10
c00112ee:	83 ec 08             	sub    esp,0x8
c00112f1:	50                   	push   eax
c00112f2:	53                   	push   ebx
c00112f3:	e8 58 00 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112ff:	89 1c 85 e0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1920],ebx
c0011306:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001130e:	83 ec 0c             	sub    esp,0xc
c0011311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011315:	e8 43 e6 ff ff       	call   c000f95d <malloc>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	89 c3                	mov    ebx,eax
c001131f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011323:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011328:	83 ec 08             	sub    esp,0x8
c001132b:	50                   	push   eax
c001132c:	53                   	push   ebx
c001132d:	e8 1e 00 00 00       	call   c0011350 <ReservedFilename::ReservedFilename(int)>
c0011332:	83 c4 10             	add    esp,0x10
c0011335:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011339:	89 1c 85 a0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1960],ebx
c0011340:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011344:	e9 7c ff ff ff       	jmp    c00112c5 <UnixFile::UnixFile(int)+0x125>
c0011349:	90                   	nop
c001134a:	83 c4 28             	add    esp,0x28
c001134d:	5b                   	pop    ebx
c001134e:	c3                   	ret    
c001134f:	90                   	nop

c0011350 <ReservedFilename::ReservedFilename(int)>:
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011357:	83 ec 08             	sub    esp,0x8
c001135a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135e:	50                   	push   eax
c001135f:	e8 3c fe ff ff       	call   c00111a0 <UnixFile::UnixFile(int)>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c001136c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011370:	89 10                	mov    DWORD PTR [eax],edx
c0011372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011376:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001137a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137d:	90                   	nop
c001137e:	83 c4 0c             	add    esp,0xc
c0011381:	c3                   	ret    

c0011382 <UnixFile::~UnixFile()>:
c0011382:	83 ec 1c             	sub    esp,0x1c
c0011385:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c001138a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001138e:	89 10                	mov    DWORD PTR [eax],edx
c0011390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011397:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001139c:	7f 73                	jg     c0011411 <UnixFile::~UnixFile()+0x8f>
c001139e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	68 18 e7 02 c0       	push   0xc002e718
c00113ae:	e8 17 78 01 00       	call   c0028bca <LinkedList<UnixFile>::getFirstElement()>
c00113b3:	83 c4 10             	add    esp,0x10
c00113b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	68 18 e7 02 c0       	push   0xc002e718
c00113c2:	e8 0b 78 01 00       	call   c0028bd2 <LinkedList<UnixFile>::removeFirst()>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00113ce:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00113d2:	74 40                	je     c0011414 <UnixFile::~UnixFile()+0x92>
c00113d4:	83 ec 08             	sub    esp,0x8
c00113d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113db:	68 18 e7 02 c0       	push   0xc002e718
c00113e0:	e8 11 77 01 00       	call   c0028af6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00113e5:	83 c4 10             	add    esp,0x10
c00113e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113ec:	8d 50 01             	lea    edx,[eax+0x1]
c00113ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00113f3:	3d 88 13 00 00       	cmp    eax,0x1388
c00113f8:	0f 94 c0             	sete   al
c00113fb:	84 c0                	test   al,al
c00113fd:	74 a7                	je     c00113a6 <UnixFile::~UnixFile()+0x24>
c00113ff:	83 ec 0c             	sub    esp,0xc
c0011402:	68 78 aa 02 c0       	push   0xc002aa78
c0011407:	e8 47 8f 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001140c:	83 c4 10             	add    esp,0x10
c001140f:	eb 95                	jmp    c00113a6 <UnixFile::~UnixFile()+0x24>
c0011411:	90                   	nop
c0011412:	eb 01                	jmp    c0011415 <UnixFile::~UnixFile()+0x93>
c0011414:	90                   	nop
c0011415:	90                   	nop
c0011416:	83 c4 1c             	add    esp,0x1c
c0011419:	c3                   	ret    

c001141a <UnixFile::~UnixFile()>:
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	83 ec 0c             	sub    esp,0xc
c0011420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011424:	e8 59 ff ff ff       	call   c0011382 <UnixFile::~UnixFile()>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	83 ec 08             	sub    esp,0x8
c001142f:	6a 0c                	push   0xc
c0011431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011435:	e8 a3 14 00 00       	call   c00128dd <operator delete(void*, unsigned long)>
c001143a:	83 c4 10             	add    esp,0x10
c001143d:	83 c4 0c             	add    esp,0xc
c0011440:	c3                   	ret    
c0011441:	90                   	nop

c0011442 <ReservedFilename::~ReservedFilename()>:
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c001144a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001144e:	89 10                	mov    DWORD PTR [eax],edx
c0011450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	50                   	push   eax
c0011458:	e8 25 ff ff ff       	call   c0011382 <UnixFile::~UnixFile()>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	90                   	nop
c0011461:	83 c4 0c             	add    esp,0xc
c0011464:	c3                   	ret    
c0011465:	90                   	nop

c0011466 <ReservedFilename::~ReservedFilename()>:
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	83 ec 0c             	sub    esp,0xc
c001146c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011470:	e8 cd ff ff ff       	call   c0011442 <ReservedFilename::~ReservedFilename()>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	83 ec 08             	sub    esp,0x8
c001147b:	6a 0c                	push   0xc
c001147d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011481:	e8 57 14 00 00       	call   c00128dd <operator delete(void*, unsigned long)>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	83 c4 0c             	add    esp,0xc
c001148c:	c3                   	ret    

c001148d <getFromFileDescriptor(int)>:
c001148d:	53                   	push   ebx
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011495:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001149b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00114a1:	7f 2c                	jg     c00114cf <getFromFileDescriptor(int)+0x42>
c00114a3:	83 ec 0c             	sub    esp,0xc
c00114a6:	68 18 e7 02 c0       	push   0xc002e718
c00114ab:	e8 1a 77 01 00       	call   c0028bca <LinkedList<UnixFile>::getFirstElement()>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	85 c0                	test   eax,eax
c00114b5:	75 04                	jne    c00114bb <getFromFileDescriptor(int)+0x2e>
c00114b7:	31 c0                	xor    eax,eax
c00114b9:	eb 6e                	jmp    c0011529 <getFromFileDescriptor(int)+0x9c>
c00114bb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00114be:	74 69                	je     c0011529 <getFromFileDescriptor(int)+0x9c>
c00114c0:	52                   	push   edx
c00114c1:	52                   	push   edx
c00114c2:	50                   	push   eax
c00114c3:	68 18 e7 02 c0       	push   0xc002e718
c00114c8:	e8 a7 77 01 00       	call   c0028c74 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00114cd:	eb e1                	jmp    c00114b0 <getFromFileDescriptor(int)+0x23>
c00114cf:	a1 0c e7 02 c0       	mov    eax,ds:0xc002e70c
c00114d4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00114da:	74 4d                	je     c0011529 <getFromFileDescriptor(int)+0x9c>
c00114dc:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c00114e1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00114e7:	74 40                	je     c0011529 <getFromFileDescriptor(int)+0x9c>
c00114e9:	a1 08 e7 02 c0       	mov    eax,ds:0xc002e708
c00114ee:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00114f4:	74 33                	je     c0011529 <getFromFileDescriptor(int)+0x9c>
c00114f6:	a1 04 e7 02 c0       	mov    eax,ds:0xc002e704
c00114fb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011501:	74 26                	je     c0011529 <getFromFileDescriptor(int)+0x9c>
c0011503:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011509:	83 f8 08             	cmp    eax,0x8
c001150c:	77 09                	ja     c0011517 <getFromFileDescriptor(int)+0x8a>
c001150e:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0011515:	eb 12                	jmp    c0011529 <getFromFileDescriptor(int)+0x9c>
c0011517:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001151d:	83 fb 08             	cmp    ebx,0x8
c0011520:	77 95                	ja     c00114b7 <getFromFileDescriptor(int)+0x2a>
c0011522:	8b 04 9d a0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1960]
c0011529:	83 c4 08             	add    esp,0x8
c001152c:	5b                   	pop    ebx
c001152d:	c3                   	ret    

c001152e <__static_initialization_and_destruction_0(int, int)>:
c001152e:	83 ec 0c             	sub    esp,0xc
c0011531:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011536:	75 34                	jne    c001156c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011538:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011540:	75 2a                	jne    c001156c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011542:	83 ec 0c             	sub    esp,0xc
c0011545:	68 18 e7 02 c0       	push   0xc002e718
c001154a:	e8 65 75 01 00       	call   c0028ab4 <LinkedList<UnixFile>::LinkedList()>
c001154f:	83 c4 10             	add    esp,0x10
c0011552:	83 ec 04             	sub    esp,0x4
c0011555:	68 84 d3 02 c0       	push   0xc002d384
c001155a:	68 18 e7 02 c0       	push   0xc002e718
c001155f:	68 b2 8a 02 c0       	push   0xc0028ab2
c0011564:	e8 ee 12 00 00       	call   c0012857 <__cxa_atexit>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	90                   	nop
c001156d:	83 c4 0c             	add    esp,0xc
c0011570:	c3                   	ret    

c0011571 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011571:	83 ec 0c             	sub    esp,0xc
c0011574:	83 ec 08             	sub    esp,0x8
c0011577:	68 ff ff 00 00       	push   0xffff
c001157c:	6a 01                	push   0x1
c001157e:	e8 ab ff ff ff       	call   c001152e <__static_initialization_and_destruction_0(int, int)>
c0011583:	83 c4 10             	add    esp,0x10
c0011586:	83 c4 0c             	add    esp,0xc
c0011589:	c3                   	ret    

c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001158a:	53                   	push   ebx
c001158b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001158f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011593:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011599:	89 c8                	mov    eax,ecx
c001159b:	d1 e8                	shr    eax,1
c001159d:	03 05 68 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d568
c00115a3:	83 e1 01             	and    ecx,0x1
c00115a6:	8a 10                	mov    dl,BYTE PTR [eax]
c00115a8:	75 09                	jne    c00115b3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00115aa:	83 e2 f0             	and    edx,0xfffffff0
c00115ad:	09 da                	or     edx,ebx
c00115af:	88 10                	mov    BYTE PTR [eax],dl
c00115b1:	5b                   	pop    ebx
c00115b2:	c3                   	ret    
c00115b3:	c1 e3 04             	shl    ebx,0x4
c00115b6:	83 e2 0f             	and    edx,0xf
c00115b9:	09 da                	or     edx,ebx
c00115bb:	88 10                	mov    BYTE PTR [eax],dl
c00115bd:	5b                   	pop    ebx
c00115be:	c3                   	ret    

c00115bf <Virt::getPageState(unsigned long)>:
c00115bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c3:	8b 0d 68 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d568
c00115c9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00115cf:	89 d0                	mov    eax,edx
c00115d1:	d1 e8                	shr    eax,1
c00115d3:	83 e2 01             	and    edx,0x1
c00115d6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00115d9:	75 04                	jne    c00115df <Virt::getPageState(unsigned long)+0x20>
c00115db:	83 e0 0f             	and    eax,0xf
c00115de:	c3                   	ret    
c00115df:	c0 e8 04             	shr    al,0x4
c00115e2:	c3                   	ret    

c00115e3 <Virt::allocateKernelVirtualPages(int)>:
c00115e3:	55                   	push   ebp
c00115e4:	31 ed                	xor    ebp,ebp
c00115e6:	57                   	push   edi
c00115e7:	56                   	push   esi
c00115e8:	53                   	push   ebx
c00115e9:	31 db                	xor    ebx,ebx
c00115eb:	83 ec 1c             	sub    esp,0x1c
c00115ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115f2:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c00115f8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00115fd:	57                   	push   edi
c00115fe:	e8 bc ff ff ff       	call   c00115bf <Virt::getPageState(unsigned long)>
c0011603:	5a                   	pop    edx
c0011604:	84 c0                	test   al,al
c0011606:	75 3a                	jne    c0011642 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011608:	85 db                	test   ebx,ebx
c001160a:	75 02                	jne    c001160e <Virt::allocateKernelVirtualPages(int)+0x2b>
c001160c:	89 fd                	mov    ebp,edi
c001160e:	43                   	inc    ebx
c001160f:	39 f3                	cmp    ebx,esi
c0011611:	74 5a                	je     c001166d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011613:	47                   	inc    edi
c0011614:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001161a:	76 31                	jbe    c001164d <Virt::allocateKernelVirtualPages(int)+0x6a>
c001161c:	c7 05 64 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d564,0xc8000
c0011626:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001162b:	75 28                	jne    c0011655 <Virt::allocateKernelVirtualPages(int)+0x72>
c001162d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011632:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011637:	57                   	push   edi
c0011638:	e8 82 ff ff ff       	call   c00115bf <Virt::getPageState(unsigned long)>
c001163d:	5a                   	pop    edx
c001163e:	84 c0                	test   al,al
c0011640:	74 c6                	je     c0011608 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011642:	31 db                	xor    ebx,ebx
c0011644:	47                   	inc    edi
c0011645:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001164b:	77 cf                	ja     c001161c <Virt::allocateKernelVirtualPages(int)+0x39>
c001164d:	89 3d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edi
c0011653:	eb a8                	jmp    c00115fd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011655:	83 ec 0c             	sub    esp,0xc
c0011658:	68 d0 aa 02 c0       	push   0xc002aad0
c001165d:	e8 f1 8c 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0011662:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	eb 90                	jmp    c00115fd <Virt::allocateKernelVirtualPages(int)+0x1a>
c001166d:	89 2d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,ebp
c0011673:	4b                   	dec    ebx
c0011674:	74 5f                	je     c00116d5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011676:	85 f6                	test   esi,esi
c0011678:	74 3d                	je     c00116b7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001167a:	89 e8                	mov    eax,ebp
c001167c:	31 db                	xor    ebx,ebx
c001167e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011681:	eb 14                	jmp    c0011697 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011683:	6a 01                	push   0x1
c0011685:	43                   	inc    ebx
c0011686:	50                   	push   eax
c0011687:	e8 fe fe ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001168c:	58                   	pop    eax
c001168d:	39 f3                	cmp    ebx,esi
c001168f:	5a                   	pop    edx
c0011690:	74 25                	je     c00116b7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011692:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0011697:	8d 50 01             	lea    edx,[eax+0x1]
c001169a:	85 db                	test   ebx,ebx
c001169c:	89 15 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edx
c00116a2:	74 20                	je     c00116c4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00116a4:	39 df                	cmp    edi,ebx
c00116a6:	75 db                	jne    c0011683 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00116a8:	6a 03                	push   0x3
c00116aa:	43                   	inc    ebx
c00116ab:	50                   	push   eax
c00116ac:	e8 d9 fe ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116b1:	59                   	pop    ecx
c00116b2:	39 f3                	cmp    ebx,esi
c00116b4:	58                   	pop    eax
c00116b5:	75 db                	jne    c0011692 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116b7:	83 c4 1c             	add    esp,0x1c
c00116ba:	89 e8                	mov    eax,ebp
c00116bc:	5b                   	pop    ebx
c00116bd:	c1 e0 0c             	shl    eax,0xc
c00116c0:	5e                   	pop    esi
c00116c1:	5f                   	pop    edi
c00116c2:	5d                   	pop    ebp
c00116c3:	c3                   	ret    
c00116c4:	6a 02                	push   0x2
c00116c6:	bb 01 00 00 00       	mov    ebx,0x1
c00116cb:	50                   	push   eax
c00116cc:	e8 b9 fe ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d1:	58                   	pop    eax
c00116d2:	5a                   	pop    edx
c00116d3:	eb bd                	jmp    c0011692 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116d5:	6a 04                	push   0x4
c00116d7:	8d 45 01             	lea    eax,[ebp+0x1]
c00116da:	55                   	push   ebp
c00116db:	a3 64 d5 02 c0       	mov    ds:0xc002d564,eax
c00116e0:	e8 a5 fe ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e5:	59                   	pop    ecx
c00116e6:	89 e8                	mov    eax,ebp
c00116e8:	5b                   	pop    ebx
c00116e9:	c1 e0 0c             	shl    eax,0xc
c00116ec:	83 c4 1c             	add    esp,0x1c
c00116ef:	5b                   	pop    ebx
c00116f0:	5e                   	pop    esi
c00116f1:	5f                   	pop    edi
c00116f2:	5d                   	pop    ebp
c00116f3:	c3                   	ret    

c00116f4 <Virt::freeSwapfilePage(unsigned long)>:
c00116f4:	53                   	push   ebx
c00116f5:	8b 15 2c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e72c
c00116fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ff:	b8 01 00 00 00       	mov    eax,0x1
c0011704:	89 cb                	mov    ebx,ecx
c0011706:	d3 e0                	shl    eax,cl
c0011708:	c1 eb 05             	shr    ebx,0x5
c001170b:	f7 d0                	not    eax
c001170d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011710:	5b                   	pop    ebx
c0011711:	c3                   	ret    

c0011712 <Virt::swapIDToSector(unsigned long)>:
c0011712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011716:	0f af 05 6c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d56c
c001171d:	03 05 74 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d574
c0011723:	c3                   	ret    

c0011724 <Virt::allocateSwapfilePage()>:
c0011724:	55                   	push   ebp
c0011725:	31 d2                	xor    edx,edx
c0011727:	57                   	push   edi
c0011728:	56                   	push   esi
c0011729:	53                   	push   ebx
c001172a:	83 ec 0c             	sub    esp,0xc
c001172d:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c0011733:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011738:	f7 f1                	div    ecx
c001173a:	39 0d 70 d5 02 c0    	cmp    DWORD PTR ds:0xc002d570,ecx
c0011740:	72 2d                	jb     c001176f <Virt::allocateSwapfilePage()+0x4b>
c0011742:	8b 35 2c e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e72c
c0011748:	8b 16                	mov    edx,DWORD PTR [esi]
c001174a:	f6 c2 01             	test   dl,0x1
c001174d:	74 3c                	je     c001178b <Virt::allocateSwapfilePage()+0x67>
c001174f:	31 c9                	xor    ecx,ecx
c0011751:	bf 01 00 00 00       	mov    edi,0x1
c0011756:	eb 12                	jmp    c001176a <Virt::allocateSwapfilePage()+0x46>
c0011758:	89 fd                	mov    ebp,edi
c001175a:	89 ca                	mov    edx,ecx
c001175c:	d3 e5                	shl    ebp,cl
c001175e:	c1 ea 05             	shr    edx,0x5
c0011761:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011764:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011766:	85 ea                	test   edx,ebp
c0011768:	74 2a                	je     c0011794 <Virt::allocateSwapfilePage()+0x70>
c001176a:	41                   	inc    ecx
c001176b:	39 c8                	cmp    eax,ecx
c001176d:	77 e9                	ja     c0011758 <Virt::allocateSwapfilePage()+0x34>
c001176f:	83 ec 0c             	sub    esp,0xc
c0011772:	68 b0 ac 02 c0       	push   0xc002acb0
c0011777:	e8 d7 8b 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	31 c9                	xor    ecx,ecx
c0011781:	83 c4 0c             	add    esp,0xc
c0011784:	89 c8                	mov    eax,ecx
c0011786:	5b                   	pop    ebx
c0011787:	5e                   	pop    esi
c0011788:	5f                   	pop    edi
c0011789:	5d                   	pop    ebp
c001178a:	c3                   	ret    
c001178b:	89 f3                	mov    ebx,esi
c001178d:	bd 01 00 00 00       	mov    ebp,0x1
c0011792:	31 c9                	xor    ecx,ecx
c0011794:	09 ea                	or     edx,ebp
c0011796:	89 c8                	mov    eax,ecx
c0011798:	89 13                	mov    DWORD PTR [ebx],edx
c001179a:	83 c4 0c             	add    esp,0xc
c001179d:	5b                   	pop    ebx
c001179e:	5e                   	pop    esi
c001179f:	5f                   	pop    edi
c00117a0:	5d                   	pop    ebp
c00117a1:	c3                   	ret    

c00117a2 <Virt::virtualMemorySetup()>:
c00117a2:	53                   	push   ebx
c00117a3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117a8:	6a 0f                	push   0xf
c00117aa:	53                   	push   ebx
c00117ab:	43                   	inc    ebx
c00117ac:	e8 d9 fd ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b1:	58                   	pop    eax
c00117b2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117b8:	5a                   	pop    edx
c00117b9:	75 ed                	jne    c00117a8 <Virt::virtualMemorySetup()+0x6>
c00117bb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117c0:	6a 00                	push   0x0
c00117c2:	53                   	push   ebx
c00117c3:	43                   	inc    ebx
c00117c4:	e8 c1 fd ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117c9:	59                   	pop    ecx
c00117ca:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117d0:	58                   	pop    eax
c00117d1:	75 ed                	jne    c00117c0 <Virt::virtualMemorySetup()+0x1e>
c00117d3:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117d8:	6a 0f                	push   0xf
c00117da:	53                   	push   ebx
c00117db:	43                   	inc    ebx
c00117dc:	e8 a9 fd ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e1:	58                   	pop    eax
c00117e2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117e8:	5a                   	pop    edx
c00117e9:	75 ed                	jne    c00117d8 <Virt::virtualMemorySetup()+0x36>
c00117eb:	5b                   	pop    ebx
c00117ec:	c3                   	ret    

c00117ed <Virt::setupPageSwapping(int)>:
c00117ed:	53                   	push   ebx
c00117ee:	83 ec 0c             	sub    esp,0xc
c00117f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00117f5:	a1 c8 eb 02 c0       	mov    eax,ds:0xc002ebc8
c00117fa:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011800:	8b 10                	mov    edx,DWORD PTR [eax]
c0011802:	53                   	push   ebx
c0011803:	c1 e3 0b             	shl    ebx,0xb
c0011806:	68 c7 ac 02 c0       	push   0xc002acc7
c001180b:	50                   	push   eax
c001180c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001180f:	89 1d 70 d5 02 c0    	mov    DWORD PTR ds:0xc002d570,ebx
c0011815:	c6 05 78 d5 02 c0 43 	mov    BYTE PTR ds:0xc002d578,0x43
c001181c:	c1 eb 08             	shr    ebx,0x8
c001181f:	a3 74 d5 02 c0       	mov    ds:0xc002d574,eax
c0011824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011827:	c7 05 6c d5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d56c,0x8
c0011831:	e8 27 e1 ff ff       	call   c000f95d <malloc>
c0011836:	83 c4 0c             	add    esp,0xc
c0011839:	89 c1                	mov    ecx,eax
c001183b:	a3 2c e7 02 c0       	mov    ds:0xc002e72c,eax
c0011840:	31 d2                	xor    edx,edx
c0011842:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011847:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c001184d:	c1 e8 05             	shr    eax,0x5
c0011850:	50                   	push   eax
c0011851:	6a 00                	push   0x0
c0011853:	51                   	push   ecx
c0011854:	e8 f7 ee fe ff       	call   c0000750 <memset>
c0011859:	83 c4 18             	add    esp,0x18
c001185c:	5b                   	pop    ebx
c001185d:	c3                   	ret    

c001185e <VAS::VAS()>:
c001185e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011862:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001186d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011878:	a3 30 e7 02 c0       	mov    ds:0xc002e730,eax
c001187d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011881:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011889:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001188c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011890:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011897:	90                   	nop
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <VAS::VAS(VAS*)>:
c001189a:	83 ec 0c             	sub    esp,0xc
c001189d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118b3:	83 ec 0c             	sub    esp,0xc
c00118b6:	68 f0 aa 02 c0       	push   0xc002aaf0
c00118bb:	e8 93 8a 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	90                   	nop
c00118c4:	83 c4 0c             	add    esp,0xc
c00118c7:	c3                   	ret    

c00118c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00118c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cc:	89 c2                	mov    edx,eax
c00118ce:	c1 e8 0a             	shr    eax,0xa
c00118d1:	c1 ea 16             	shr    edx,0x16
c00118d4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118d9:	19 c9                	sbb    ecx,ecx
c00118db:	c1 e2 0c             	shl    edx,0xc
c00118de:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00118e4:	25 fc 0f 00 00       	and    eax,0xffc
c00118e9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00118f0:	01 d0                	add    eax,edx
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <VAS::getPageTableEntry(unsigned long)>:
c00118f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00118f8:	89 ca                	mov    edx,ecx
c00118fa:	c1 e9 0a             	shr    ecx,0xa
c00118fd:	c1 ea 16             	shr    edx,0x16
c0011900:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011906:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001190c:	c1 e0 0c             	shl    eax,0xc
c001190f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011912:	c3                   	ret    

c0011913 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011913:	57                   	push   edi
c0011914:	56                   	push   esi
c0011915:	be 01 00 00 00       	mov    esi,0x1
c001191a:	53                   	push   ebx
c001191b:	83 ec 10             	sub    esp,0x10
c001191e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011922:	c1 eb 0c             	shr    ebx,0xc
c0011925:	eb 3f                	jmp    c0011966 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011927:	83 ec 08             	sub    esp,0x8
c001192a:	57                   	push   edi
c001192b:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c0011931:	e8 be ff ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	8b 00                	mov    eax,DWORD PTR [eax]
c001193b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001193f:	f6 c4 04             	test   ah,0x4
c0011942:	75 5f                	jne    c00119a3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011944:	80 fa 04             	cmp    dl,0x4
c0011947:	74 78                	je     c00119c1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011949:	80 fa 02             	cmp    dl,0x2
c001194c:	0f 84 88 00 00 00    	je     c00119da <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011952:	80 fa 03             	cmp    dl,0x3
c0011955:	0f 84 ad 00 00 00    	je     c0011a08 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001195b:	fe ca                	dec    dl
c001195d:	0f 84 92 00 00 00    	je     c00119f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011963:	43                   	inc    ebx
c0011964:	31 f6                	xor    esi,esi
c0011966:	53                   	push   ebx
c0011967:	89 df                	mov    edi,ebx
c0011969:	e8 51 fc ff ff       	call   c00115bf <Virt::getPageState(unsigned long)>
c001196e:	c1 e7 0c             	shl    edi,0xc
c0011971:	59                   	pop    ecx
c0011972:	84 c0                	test   al,al
c0011974:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011978:	75 ad                	jne    c0011927 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	68 de ac 02 c0       	push   0xc002acde
c0011982:	e8 cc 89 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0011987:	58                   	pop    eax
c0011988:	5a                   	pop    edx
c0011989:	57                   	push   edi
c001198a:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c0011990:	e8 5f ff ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0011995:	83 c4 10             	add    esp,0x10
c0011998:	8b 00                	mov    eax,DWORD PTR [eax]
c001199a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001199e:	f6 c4 04             	test   ah,0x4
c00119a1:	74 c0                	je     c0011963 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119a3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00119a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	50                   	push   eax
c00119b0:	e8 33 e3 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119bc:	80 fa 04             	cmp    dl,0x4
c00119bf:	75 88                	jne    c0011949 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00119c1:	89 f0                	mov    eax,esi
c00119c3:	84 c0                	test   al,al
c00119c5:	75 47                	jne    c0011a0e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00119c7:	c7 44 24 20 14 ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ab14
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	5b                   	pop    ebx
c00119d3:	5e                   	pop    esi
c00119d4:	5f                   	pop    edi
c00119d5:	e9 79 89 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c00119da:	89 f0                	mov    eax,esi
c00119dc:	84 c0                	test   al,al
c00119de:	75 15                	jne    c00119f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119e0:	83 ec 0c             	sub    esp,0xc
c00119e3:	68 fa ac 02 c0       	push   0xc002acfa
c00119e8:	e8 66 89 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	e9 6e ff ff ff       	jmp    c0011963 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119f5:	83 ec 08             	sub    esp,0x8
c00119f8:	6a 00                	push   0x0
c00119fa:	53                   	push   ebx
c00119fb:	e8 8a fb ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a00:	83 c4 10             	add    esp,0x10
c0011a03:	e9 5b ff ff ff       	jmp    c0011963 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a08:	89 f0                	mov    eax,esi
c0011a0a:	84 c0                	test   al,al
c0011a0c:	75 15                	jne    c0011a23 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a0e:	83 ec 08             	sub    esp,0x8
c0011a11:	6a 00                	push   0x0
c0011a13:	53                   	push   ebx
c0011a14:	e8 71 fb ff ff       	call   c001158a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	5b                   	pop    ebx
c0011a20:	5e                   	pop    esi
c0011a21:	5f                   	pop    edi
c0011a22:	c3                   	ret    
c0011a23:	c7 44 24 20 16 ad 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ad16
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	5b                   	pop    ebx
c0011a2f:	5e                   	pop    esi
c0011a30:	5f                   	pop    edi
c0011a31:	e9 1d 89 00 00       	jmp    c001a353 <Krnl::panic(char const*)>

c0011a36 <VAS::freeAllocatedPages(unsigned long)>:
c0011a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a3e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011a42:	74 09                	je     c0011a4d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a48:	e9 c6 fe ff ff       	jmp    c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a4d:	c7 44 24 04 38 ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab38
c0011a55:	e9 5b 0f 00 00       	jmp    c00129b5 <Dbg::kprintf(char const*, ...)>

c0011a5a <VAS::virtualToPhysical(unsigned long)>:
c0011a5a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a5e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a62:	e8 8d fe ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0011a67:	5a                   	pop    edx
c0011a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a6a:	59                   	pop    ecx
c0011a6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a70:	c3                   	ret    
c0011a71:	90                   	nop

c0011a72 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011a72:	55                   	push   ebp
c0011a73:	57                   	push   edi
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011a7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011a7e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011a82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a86:	85 db                	test   ebx,ebx
c0011a88:	7e 22                	jle    c0011aac <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011a8a:	c1 e3 0c             	shl    ebx,0xc
c0011a8d:	01 f3                	add    ebx,esi
c0011a8f:	56                   	push   esi
c0011a90:	81 c6 00 10 00 00    	add    esi,0x1000
c0011a96:	55                   	push   ebp
c0011a97:	e8 58 fe ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0011a9c:	5a                   	pop    edx
c0011a9d:	59                   	pop    ecx
c0011a9e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011aa0:	21 f9                	and    ecx,edi
c0011aa2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011aa6:	39 f3                	cmp    ebx,esi
c0011aa8:	89 08                	mov    DWORD PTR [eax],ecx
c0011aaa:	75 e3                	jne    c0011a8f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011aac:	5b                   	pop    ebx
c0011aad:	5e                   	pop    esi
c0011aae:	5f                   	pop    edi
c0011aaf:	5d                   	pop    ebp
c0011ab0:	c3                   	ret    
c0011ab1:	90                   	nop

c0011ab2 <VAS::setToWriteCombining(unsigned long, int)>:
c0011ab2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011ab7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011abd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ac4:	75 01                	jne    c0011ac7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ac6:	c3                   	ret    
c0011ac7:	68 80 00 00 00       	push   0x80
c0011acc:	6a ff                	push   0xffffffff
c0011ace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ad2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ada:	e8 93 ff ff ff       	call   c0011a72 <VAS::reflagRange(unsigned long, int, int, int)>
c0011adf:	83 c4 14             	add    esp,0x14
c0011ae2:	c3                   	ret    
c0011ae3:	90                   	nop

c0011ae4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011ae4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011af7:	19 c0                	sbb    eax,eax
c0011af9:	83 ca 03             	or     edx,0x3
c0011afc:	83 e0 fc             	and    eax,0xfffffffc
c0011aff:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b06:	0f 20 d8             	mov    eax,cr3
c0011b09:	0f 22 d8             	mov    cr3,eax
c0011b0c:	c3                   	ret    
c0011b0d:	90                   	nop

c0011b0e <VAS::~VAS()>:
c0011b0e:	83 ec 2c             	sub    esp,0x2c
c0011b11:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b19:	fa                   	cli    
c0011b1a:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0011b1f:	40                   	inc    eax
c0011b20:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0011b25:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b2f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011b39:	6a 01                	push   0x1
c0011b3b:	50                   	push   eax
c0011b3c:	e8 a3 ff ff ff       	call   c0011ae4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b41:	83 c4 0c             	add    esp,0xc
c0011b44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011b4c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011b54:	0f 8f d4 00 00 00    	jg     c0011c2e <VAS::~VAS()+0x120>
c0011b5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011b65:	c1 e2 02             	shl    edx,0x2
c0011b68:	01 d0                	add    eax,edx
c0011b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b74:	83 e0 01             	and    eax,0x1
c0011b77:	0f 84 a8 00 00 00    	je     c0011c25 <VAS::~VAS()+0x117>
c0011b7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011b85:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011b8d:	7f 72                	jg     c0011c01 <VAS::~VAS()+0xf3>
c0011b8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b93:	c1 e0 0a             	shl    eax,0xa
c0011b96:	89 c2                	mov    edx,eax
c0011b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b9c:	01 d0                	add    eax,edx
c0011b9e:	c1 e0 0c             	shl    eax,0xc
c0011ba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011baf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011bb9:	6a 01                	push   0x1
c0011bbb:	50                   	push   eax
c0011bbc:	e8 07 fd ff ff       	call   c00118c8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011bc1:	83 c4 0c             	add    esp,0xc
c0011bc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd6:	25 01 04 00 00       	and    eax,0x401
c0011bdb:	3d 01 04 00 00       	cmp    eax,0x401
c0011be0:	75 19                	jne    c0011bfb <VAS::~VAS()+0xed>
c0011be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011beb:	83 ec 0c             	sub    esp,0xc
c0011bee:	50                   	push   eax
c0011bef:	e8 f4 e0 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c0011bf4:	83 c4 10             	add    esp,0x10
c0011bf7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011bfb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011bff:	eb 84                	jmp    c0011b85 <VAS::~VAS()+0x77>
c0011c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c05:	25 00 04 00 00       	and    eax,0x400
c0011c0a:	74 19                	je     c0011c25 <VAS::~VAS()+0x117>
c0011c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	50                   	push   eax
c0011c19:	e8 ca e0 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c25:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c29:	e9 1e ff ff ff       	jmp    c0011b4c <VAS::~VAS()+0x3e>
c0011c2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	50                   	push   eax
c0011c39:	e8 d5 fc ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c45:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	50                   	push   eax
c0011c4c:	e8 97 e0 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c5c:	c1 e0 02             	shl    eax,0x2
c0011c5f:	83 ec 08             	sub    esp,0x8
c0011c62:	50                   	push   eax
c0011c63:	68 5c ab 02 c0       	push   0xc002ab5c
c0011c68:	e8 48 0d 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0011c6d:	83 c4 10             	add    esp,0x10
c0011c70:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0011c75:	48                   	dec    eax
c0011c76:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0011c7b:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0011c80:	85 c0                	test   eax,eax
c0011c82:	75 01                	jne    c0011c85 <VAS::~VAS()+0x177>
c0011c84:	fb                   	sti    
c0011c85:	90                   	nop
c0011c86:	83 c4 2c             	add    esp,0x2c
c0011c89:	c3                   	ret    

c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011c8a:	55                   	push   ebp
c0011c8b:	57                   	push   edi
c0011c8c:	56                   	push   esi
c0011c8d:	53                   	push   ebx
c0011c8e:	83 ec 1c             	sub    esp,0x1c
c0011c91:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011c95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c99:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011c9f:	77 08                	ja     c0011ca9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011ca1:	0f 20 d8             	mov    eax,cr3
c0011ca4:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011ca7:	75 47                	jne    c0011cf0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011ca9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cad:	09 d8                	or     eax,ebx
c0011caf:	a9 ff 0f 00 00       	test   eax,0xfff
c0011cb4:	75 57                	jne    c0011d0d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011cb6:	89 de                	mov    esi,ebx
c0011cb8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011cbb:	c1 ee 16             	shr    esi,0x16
c0011cbe:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011cc5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011cc9:	74 54                	je     c0011d1f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ccb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ccf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011cd5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011cd9:	c1 e6 0c             	shl    esi,0xc
c0011cdc:	c1 eb 0a             	shr    ebx,0xa
c0011cdf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ce5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ce8:	83 c4 1c             	add    esp,0x1c
c0011ceb:	5b                   	pop    ebx
c0011cec:	5e                   	pop    esi
c0011ced:	5f                   	pop    edi
c0011cee:	5d                   	pop    ebp
c0011cef:	c3                   	ret    
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	68 7c ab 02 c0       	push   0xc002ab7c
c0011cf8:	e8 b8 0c 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d04:	09 d8                	or     eax,ebx
c0011d06:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d0b:	74 a9                	je     c0011cb6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	68 e4 ab 02 c0       	push   0xc002abe4
c0011d15:	e8 39 86 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0011d1a:	83 c4 10             	add    esp,0x10
c0011d1d:	eb 97                	jmp    c0011cb6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d23:	e8 31 e0 ff ff       	call   c000fd59 <Phys::allocatePage()>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	89 c5                	mov    ebp,eax
c0011d2d:	8b 0d 30 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e730
c0011d33:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d37:	6a 01                	push   0x1
c0011d39:	e8 a5 f8 ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c0011d3e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d45:	6a 01                	push   0x1
c0011d47:	50                   	push   eax
c0011d48:	55                   	push   ebp
c0011d49:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d4f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d53:	51                   	push   ecx
c0011d54:	e8 27 02 00 00       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d59:	83 c4 1c             	add    esp,0x1c
c0011d5c:	68 00 10 00 00       	push   0x1000
c0011d61:	6a 00                	push   0x0
c0011d63:	50                   	push   eax
c0011d64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d68:	e8 e3 e9 fe ff       	call   c0000750 <memset>
c0011d6d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011d71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011d74:	e8 9a fb ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011d86:	e9 40 ff ff ff       	jmp    c0011ccb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011d8b:	90                   	nop

c0011d8c <VAS::allocatePages(int, int)>:
c0011d8c:	55                   	push   ebp
c0011d8d:	57                   	push   edi
c0011d8e:	56                   	push   esi
c0011d8f:	53                   	push   ebx
c0011d90:	83 ec 1c             	sub    esp,0x1c
c0011d93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d97:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011d9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011da2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011da8:	83 e0 01             	and    eax,0x1
c0011dab:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011daf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011db3:	0f 85 cc 00 00 00    	jne    c0011e85 <VAS::allocatePages(int, int)+0xf9>
c0011db9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dc0:	85 c0                	test   eax,eax
c0011dc2:	0f 84 a1 00 00 00    	je     c0011e69 <VAS::allocatePages(int, int)+0xdd>
c0011dc8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd0:	c1 e6 0c             	shl    esi,0xc
c0011dd3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011dd7:	85 c0                	test   eax,eax
c0011dd9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ddc:	7e 33                	jle    c0011e11 <VAS::allocatePages(int, int)+0x85>
c0011dde:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011de2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011de6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011dec:	e8 68 df ff ff       	call   c000fd59 <Phys::allocatePage()>
c0011df1:	55                   	push   ebp
c0011df2:	53                   	push   ebx
c0011df3:	50                   	push   eax
c0011df4:	57                   	push   edi
c0011df5:	e8 90 fe ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e02:	74 03                	je     c0011e07 <VAS::allocatePages(int, int)+0x7b>
c0011e04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e07:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e0d:	39 de                	cmp    esi,ebx
c0011e0f:	75 db                	jne    c0011dec <VAS::allocatePages(int, int)+0x60>
c0011e11:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e16:	75 12                	jne    c0011e2a <VAS::allocatePages(int, int)+0x9e>
c0011e18:	0f 20 d8             	mov    eax,cr3
c0011e1b:	0f 22 d8             	mov    cr3,eax
c0011e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	5b                   	pop    ebx
c0011e26:	5e                   	pop    esi
c0011e27:	5f                   	pop    edi
c0011e28:	5d                   	pop    ebp
c0011e29:	c3                   	ret    
c0011e2a:	c1 ee 0a             	shr    esi,0xa
c0011e2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e31:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011e37:	c1 eb 0a             	shr    ebx,0xa
c0011e3a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011e40:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e46:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e4c:	39 c3                	cmp    ebx,eax
c0011e4e:	77 ce                	ja     c0011e1e <VAS::allocatePages(int, int)+0x92>
c0011e50:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e53:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e59:	39 d8                	cmp    eax,ebx
c0011e5b:	73 f3                	jae    c0011e50 <VAS::allocatePages(int, int)+0xc4>
c0011e5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e61:	83 c4 1c             	add    esp,0x1c
c0011e64:	5b                   	pop    ebx
c0011e65:	5e                   	pop    esi
c0011e66:	5f                   	pop    edi
c0011e67:	5d                   	pop    ebp
c0011e68:	c3                   	ret    
c0011e69:	83 ec 0c             	sub    esp,0xc
c0011e6c:	68 08 ac 02 c0       	push   0xc002ac08
c0011e71:	e8 dd 84 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0011e76:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	e9 43 ff ff ff       	jmp    c0011dc8 <VAS::allocatePages(int, int)+0x3c>
c0011e85:	83 ec 0c             	sub    esp,0xc
c0011e88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e8c:	e8 52 f7 ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c0011e91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011e9d:	0f 87 9b 00 00 00    	ja     c0011f3e <VAS::allocatePages(int, int)+0x1b2>
c0011ea3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ea7:	85 d2                	test   edx,edx
c0011ea9:	7e 3c                	jle    c0011ee7 <VAS::allocatePages(int, int)+0x15b>
c0011eab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011eaf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011eb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eb7:	c1 e5 0c             	shl    ebp,0xc
c0011eba:	81 ce 00 04 00 00    	or     esi,0x400
c0011ec0:	01 dd                	add    ebp,ebx
c0011ec2:	e8 92 de ff ff       	call   c000fd59 <Phys::allocatePage()>
c0011ec7:	56                   	push   esi
c0011ec8:	53                   	push   ebx
c0011ec9:	50                   	push   eax
c0011eca:	57                   	push   edi
c0011ecb:	e8 ba fd ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ed8:	74 03                	je     c0011edd <VAS::allocatePages(int, int)+0x151>
c0011eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee3:	39 dd                	cmp    ebp,ebx
c0011ee5:	75 db                	jne    c0011ec2 <VAS::allocatePages(int, int)+0x136>
c0011ee7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eec:	0f 84 26 ff ff ff    	je     c0011e18 <VAS::allocatePages(int, int)+0x8c>
c0011ef2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ef6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011efa:	89 d3                	mov    ebx,edx
c0011efc:	c1 e0 0c             	shl    eax,0xc
c0011eff:	c1 eb 0a             	shr    ebx,0xa
c0011f02:	01 d0                	add    eax,edx
c0011f04:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f0a:	c1 e8 0a             	shr    eax,0xa
c0011f0d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f13:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f18:	2d 00 00 40 00       	sub    eax,0x400000
c0011f1d:	39 c3                	cmp    ebx,eax
c0011f1f:	0f 87 f9 fe ff ff    	ja     c0011e1e <VAS::allocatePages(int, int)+0x92>
c0011f25:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f28:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f2e:	39 d8                	cmp    eax,ebx
c0011f30:	73 f3                	jae    c0011f25 <VAS::allocatePages(int, int)+0x199>
c0011f32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f36:	83 c4 1c             	add    esp,0x1c
c0011f39:	5b                   	pop    ebx
c0011f3a:	5e                   	pop    esi
c0011f3b:	5f                   	pop    edi
c0011f3c:	5d                   	pop    ebp
c0011f3d:	c3                   	ret    
c0011f3e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011f43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f49:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011f50:	0f 84 4d ff ff ff    	je     c0011ea3 <VAS::allocatePages(int, int)+0x117>
c0011f56:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011f5e:	e9 40 ff ff ff       	jmp    c0011ea3 <VAS::allocatePages(int, int)+0x117>
c0011f63:	90                   	nop

c0011f64 <VAS::setCPUSpecific(unsigned long)>:
c0011f64:	83 ec 0c             	sub    esp,0xc
c0011f67:	6a 05                	push   0x5
c0011f69:	68 00 00 40 c2       	push   0xc2400000
c0011f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f76:	e8 0f fd ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f7b:	83 c4 1c             	add    esp,0x1c
c0011f7e:	c3                   	ret    
c0011f7f:	90                   	nop

c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011f80:	55                   	push   ebp
c0011f81:	57                   	push   edi
c0011f82:	56                   	push   esi
c0011f83:	53                   	push   ebx
c0011f84:	83 ec 1c             	sub    esp,0x1c
c0011f87:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011f8c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f96:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f9a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fa0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011fa4:	83 e0 01             	and    eax,0x1
c0011fa7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011fab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011faf:	85 c0                	test   eax,eax
c0011fb1:	7e 39                	jle    c0011fec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011fb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fb7:	89 f3                	mov    ebx,esi
c0011fb9:	c1 e0 0c             	shl    eax,0xc
c0011fbc:	01 f0                	add    eax,esi
c0011fbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fc2:	55                   	push   ebp
c0011fc3:	53                   	push   ebx
c0011fc4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fc8:	29 f0                	sub    eax,esi
c0011fca:	01 d8                	add    eax,ebx
c0011fcc:	50                   	push   eax
c0011fcd:	57                   	push   edi
c0011fce:	e8 b7 fc ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fdb:	74 03                	je     c0011fe0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011fdd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fe0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fe6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011fea:	75 d6                	jne    c0011fc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011fec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ff1:	75 10                	jne    c0012003 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ff3:	0f 20 d8             	mov    eax,cr3
c0011ff6:	0f 22 d8             	mov    cr3,eax
c0011ff9:	83 c4 1c             	add    esp,0x1c
c0011ffc:	89 f0                	mov    eax,esi
c0011ffe:	5b                   	pop    ebx
c0011fff:	5e                   	pop    esi
c0012000:	5f                   	pop    edi
c0012001:	5d                   	pop    ebp
c0012002:	c3                   	ret    
c0012003:	89 f3                	mov    ebx,esi
c0012005:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012009:	c1 eb 0a             	shr    ebx,0xa
c001200c:	c1 e0 0c             	shl    eax,0xc
c001200f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012015:	01 f0                	add    eax,esi
c0012017:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001201d:	c1 e8 0a             	shr    eax,0xa
c0012020:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012025:	2d 00 00 40 00       	sub    eax,0x400000
c001202a:	39 c3                	cmp    ebx,eax
c001202c:	77 cb                	ja     c0011ff9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001202e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012031:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012037:	39 d8                	cmp    eax,ebx
c0012039:	73 f3                	jae    c001202e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001203b:	83 c4 1c             	add    esp,0x1c
c001203e:	89 f0                	mov    eax,esi
c0012040:	5b                   	pop    ebx
c0012041:	5e                   	pop    esi
c0012042:	5f                   	pop    edi
c0012043:	5d                   	pop    ebp
c0012044:	c3                   	ret    
c0012045:	90                   	nop

c0012046 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012046:	55                   	push   ebp
c0012047:	57                   	push   edi
c0012048:	56                   	push   esi
c0012049:	53                   	push   ebx
c001204a:	83 ec 1c             	sub    esp,0x1c
c001204d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012051:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012055:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012059:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001205d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012062:	75 4a                	jne    c00120ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012064:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012068:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001206b:	c1 eb 16             	shr    ebx,0x16
c001206e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012075:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012079:	74 4d                	je     c00120c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001207b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001207f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012083:	c1 e8 0a             	shr    eax,0xa
c0012086:	80 fa 01             	cmp    dl,0x1
c0012089:	19 d2                	sbb    edx,edx
c001208b:	c1 e3 0c             	shl    ebx,0xc
c001208e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012092:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012098:	25 fc 0f 00 00       	and    eax,0xffc
c001209d:	01 d8                	add    eax,ebx
c001209f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120a6:	83 c4 1c             	add    esp,0x1c
c00120a9:	5b                   	pop    ebx
c00120aa:	5e                   	pop    esi
c00120ab:	5f                   	pop    edi
c00120ac:	5d                   	pop    ebp
c00120ad:	c3                   	ret    
c00120ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120b2:	83 ec 0c             	sub    esp,0xc
c00120b5:	68 34 ac 02 c0       	push   0xc002ac34
c00120ba:	e8 94 82 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120c6:	eb 9c                	jmp    c0012064 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00120c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120cc:	e8 88 dc ff ff       	call   c000fd59 <Phys::allocatePage()>
c00120d1:	83 ec 0c             	sub    esp,0xc
c00120d4:	89 c5                	mov    ebp,eax
c00120d6:	8b 0d 30 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e730
c00120dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00120e0:	6a 01                	push   0x1
c00120e2:	e8 fc f4 ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c00120e7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120ee:	6a 01                	push   0x1
c00120f0:	50                   	push   eax
c00120f1:	55                   	push   ebp
c00120f2:	81 cd 07 04 00 00    	or     ebp,0x407
c00120f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00120fc:	51                   	push   ecx
c00120fd:	e8 7e fe ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012102:	83 c4 1c             	add    esp,0x1c
c0012105:	68 00 10 00 00       	push   0x1000
c001210a:	6a 00                	push   0x0
c001210c:	50                   	push   eax
c001210d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012111:	e8 3a e6 fe ff       	call   c0000750 <memset>
c0012116:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001211a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001211d:	e8 f1 f7 ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c0012122:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001212b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001212f:	e9 47 ff ff ff       	jmp    c001207b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012134 <VAS::VAS(bool)>:
c0012134:	53                   	push   ebx
c0012135:	83 ec 28             	sub    esp,0x28
c0012138:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001213c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012144:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001215e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012161:	e8 f3 db ff ff       	call   c000fd59 <Phys::allocatePage()>
c0012166:	89 c2                	mov    edx,eax
c0012168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001216c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001216f:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c0012175:	83 ec 0c             	sub    esp,0xc
c0012178:	6a 01                	push   0x1
c001217a:	e8 64 f4 ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c001217f:	83 c4 10             	add    esp,0x10
c0012182:	89 c2                	mov    edx,eax
c0012184:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012188:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001218b:	83 ec 0c             	sub    esp,0xc
c001218e:	6a 03                	push   0x3
c0012190:	6a 01                	push   0x1
c0012192:	52                   	push   edx
c0012193:	50                   	push   eax
c0012194:	53                   	push   ebx
c0012195:	e8 e6 fd ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001219a:	83 c4 20             	add    esp,0x20
c001219d:	89 c2                	mov    edx,eax
c001219f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121a6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121ae:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00121b6:	7f 1c                	jg     c00121d4 <VAS::VAS(bool)+0xa0>
c00121b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00121c3:	c1 e2 02             	shl    edx,0x2
c00121c6:	01 d0                	add    eax,edx
c00121c8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121d2:	eb da                	jmp    c00121ae <VAS::VAS(bool)+0x7a>
c00121d4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121dc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00121e4:	7f 7a                	jg     c0012260 <VAS::VAS(bool)+0x12c>
c00121e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121ea:	2d 00 02 00 00       	sub    eax,0x200
c00121ef:	c1 e0 0c             	shl    eax,0xc
c00121f2:	83 c8 03             	or     eax,0x3
c00121f5:	89 c2                	mov    edx,eax
c00121f7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00121fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012202:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012208:	83 e0 10             	and    eax,0x10
c001220b:	84 c0                	test   al,al
c001220d:	74 07                	je     c0012216 <VAS::VAS(bool)+0xe2>
c001220f:	b8 00 01 00 00       	mov    eax,0x100
c0012214:	eb 05                	jmp    c001221b <VAS::VAS(bool)+0xe7>
c0012216:	b8 00 00 00 00       	mov    eax,0x0
c001221b:	09 d0                	or     eax,edx
c001221d:	89 c1                	mov    ecx,eax
c001221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012223:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012226:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001222a:	c1 e2 02             	shl    edx,0x2
c001222d:	01 d0                	add    eax,edx
c001222f:	89 ca                	mov    edx,ecx
c0012231:	89 10                	mov    DWORD PTR [eax],edx
c0012233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012237:	2d 40 03 00 00       	sub    eax,0x340
c001223c:	83 f8 7f             	cmp    eax,0x7f
c001223f:	77 16                	ja     c0012257 <VAS::VAS(bool)+0x123>
c0012241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012245:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012248:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001224c:	c1 e2 02             	shl    edx,0x2
c001224f:	01 d0                	add    eax,edx
c0012251:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012257:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001225b:	e9 7c ff ff ff       	jmp    c00121dc <VAS::VAS(bool)+0xa8>
c0012260:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001226b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012271:	83 e0 10             	and    eax,0x10
c0012274:	84 c0                	test   al,al
c0012276:	74 07                	je     c001227f <VAS::VAS(bool)+0x14b>
c0012278:	b8 03 41 00 00       	mov    eax,0x4103
c001227d:	eb 05                	jmp    c0012284 <VAS::VAS(bool)+0x150>
c001227f:	b8 03 40 00 00       	mov    eax,0x4003
c0012284:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012288:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001228b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012291:	89 02                	mov    DWORD PTR [edx],eax
c0012293:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012298:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001229e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00122a4:	83 ec 08             	sub    esp,0x8
c00122a7:	50                   	push   eax
c00122a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122ac:	e8 b3 fc ff ff       	call   c0011f64 <VAS::setCPUSpecific(unsigned long)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00122bb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00122c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122c6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122cc:	83 e0 10             	and    eax,0x10
c00122cf:	84 c0                	test   al,al
c00122d1:	74 07                	je     c00122da <VAS::VAS(bool)+0x1a6>
c00122d3:	b8 00 01 00 00       	mov    eax,0x100
c00122d8:	eb 05                	jmp    c00122df <VAS::VAS(bool)+0x1ab>
c00122da:	b8 00 00 00 00       	mov    eax,0x0
c00122df:	09 c2                	or     edx,eax
c00122e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122e8:	05 fc 0f 00 00       	add    eax,0xffc
c00122ed:	83 ca 03             	or     edx,0x3
c00122f0:	89 10                	mov    DWORD PTR [eax],edx
c00122f2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00122f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 e8 1d 00 00       	call   c00140ee <Device::getName()>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	83 ec 08             	sub    esp,0x8
c001230c:	68 30 ad 02 c0       	push   0xc002ad30
c0012311:	50                   	push   eax
c0012312:	e8 81 e5 fe ff       	call   c0000898 <strcmp>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	85 c0                	test   eax,eax
c001231c:	0f 94 c0             	sete   al
c001231f:	84 c0                	test   al,al
c0012321:	0f 84 87 00 00 00    	je     c00123ae <VAS::VAS(bool)+0x27a>
c0012327:	fa                   	cli    
c0012328:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001232d:	40                   	inc    eax
c001232e:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0012333:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233e:	05 7c 09 00 00       	add    eax,0x97c
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 92 cf ff ff       	call   c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012354:	89 c3                	mov    ebx,eax
c0012356:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001235b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012361:	05 7c 09 00 00       	add    eax,0x97c
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	50                   	push   eax
c001236a:	e8 6f cf ff ff       	call   c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	83 ec 08             	sub    esp,0x8
c0012375:	50                   	push   eax
c0012376:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237a:	e8 75 f5 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c001237f:	83 c4 10             	add    esp,0x10
c0012382:	8b 00                	mov    eax,DWORD PTR [eax]
c0012384:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012389:	6a 11                	push   0x11
c001238b:	53                   	push   ebx
c001238c:	50                   	push   eax
c001238d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012391:	e8 f4 f8 ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001239e:	48                   	dec    eax
c001239f:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c00123a4:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00123a9:	85 c0                	test   eax,eax
c00123ab:	75 01                	jne    c00123ae <VAS::VAS(bool)+0x27a>
c00123ad:	fb                   	sti    
c00123ae:	90                   	nop
c00123af:	83 c4 28             	add    esp,0x28
c00123b2:	5b                   	pop    ebx
c00123b3:	c3                   	ret    

c00123b4 <VAS::evict(unsigned long)>:
c00123b4:	55                   	push   ebp
c00123b5:	57                   	push   edi
c00123b6:	56                   	push   esi
c00123b7:	53                   	push   ebx
c00123b8:	83 ec 28             	sub    esp,0x28
c00123bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00123c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123c7:	68 3e ad 02 c0       	push   0xc002ad3e
c00123cc:	e8 e4 05 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00123d1:	e8 4e f3 ff ff       	call   c0011724 <Virt::allocateSwapfilePage()>
c00123d6:	5a                   	pop    edx
c00123d7:	89 c7                	mov    edi,eax
c00123d9:	59                   	pop    ecx
c00123da:	50                   	push   eax
c00123db:	68 5b ad 02 c0       	push   0xc002ad5b
c00123e0:	e8 d0 05 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	8b 1d 6c d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d56c
c00123ee:	85 db                	test   ebx,ebx
c00123f0:	7e 3d                	jle    c001242f <VAS::evict(unsigned long)+0x7b>
c00123f2:	89 ee                	mov    esi,ebp
c00123f4:	31 db                	xor    ebx,ebx
c00123f6:	83 ec 0c             	sub    esp,0xc
c00123f9:	57                   	push   edi
c00123fa:	e8 13 f3 ff ff       	call   c0011712 <Virt::swapIDToSector(unsigned long)>
c00123ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0012402:	01 d8                	add    eax,ebx
c0012404:	6a 01                	push   0x1
c0012406:	31 d2                	xor    edx,edx
c0012408:	43                   	inc    ebx
c0012409:	52                   	push   edx
c001240a:	81 c6 00 02 00 00    	add    esi,0x200
c0012410:	50                   	push   eax
c0012411:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012418:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c001241f:	e8 58 3f 00 00       	call   c001637c <LogicalDisk::write(unsigned long long, int, void*)>
c0012424:	83 c4 20             	add    esp,0x20
c0012427:	39 1d 6c d5 02 c0    	cmp    DWORD PTR ds:0xc002d56c,ebx
c001242d:	7f c7                	jg     c00123f6 <VAS::evict(unsigned long)+0x42>
c001242f:	83 ec 08             	sub    esp,0x8
c0012432:	c1 e7 0b             	shl    edi,0xb
c0012435:	55                   	push   ebp
c0012436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001243a:	e8 b5 f4 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c001243f:	5a                   	pop    edx
c0012440:	89 c6                	mov    esi,eax
c0012442:	59                   	pop    ecx
c0012443:	ff 30                	push   DWORD PTR [eax]
c0012445:	68 6b ad 02 c0       	push   0xc002ad6b
c001244a:	e8 66 05 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001244f:	8b 16                	mov    edx,DWORD PTR [esi]
c0012451:	89 d3                	mov    ebx,edx
c0012453:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012459:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001245f:	09 d7                	or     edi,edx
c0012461:	89 3e                	mov    DWORD PTR [esi],edi
c0012463:	5e                   	pop    esi
c0012464:	58                   	pop    eax
c0012465:	57                   	push   edi
c0012466:	68 84 ad 02 c0       	push   0xc002ad84
c001246b:	e8 45 05 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012470:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012473:	ff 05 28 e7 02 c0    	inc    DWORD PTR ds:0xc002e728
c0012479:	e8 6a d8 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c001247e:	0f 20 d8             	mov    eax,cr3
c0012481:	0f 22 d8             	mov    cr3,eax
c0012484:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c001248a:	55                   	push   ebp
c001248b:	53                   	push   ebx
c001248c:	68 58 ac 02 c0       	push   0xc002ac58
c0012491:	e8 1f 05 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012496:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c001249b:	c7 44 24 50 9d ad 02 c0 	mov    DWORD PTR [esp+0x50],0xc002ad9d
c00124a3:	8d 50 01             	lea    edx,[eax+0x1]
c00124a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00124aa:	89 15 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,edx
c00124b0:	83 c4 3c             	add    esp,0x3c
c00124b3:	5b                   	pop    ebx
c00124b4:	5e                   	pop    esi
c00124b5:	5f                   	pop    edi
c00124b6:	5d                   	pop    ebp
c00124b7:	e9 f9 04 00 00       	jmp    c00129b5 <Dbg::kprintf(char const*, ...)>

c00124bc <VAS::tryLoadBackOffDisk(unsigned long)>:
c00124bc:	55                   	push   ebp
c00124bd:	57                   	push   edi
c00124be:	56                   	push   esi
c00124bf:	53                   	push   ebx
c00124c0:	83 ec 24             	sub    esp,0x24
c00124c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00124c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124cb:	68 ae ad 02 c0       	push   0xc002adae
c00124d0:	e8 e0 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00124d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00124d9:	58                   	pop    eax
c00124da:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00124e0:	5a                   	pop    edx
c00124e1:	57                   	push   edi
c00124e2:	53                   	push   ebx
c00124e3:	e8 0c f4 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c00124e8:	59                   	pop    ecx
c00124e9:	5e                   	pop    esi
c00124ea:	89 c6                	mov    esi,eax
c00124ec:	ff 30                	push   DWORD PTR [eax]
c00124ee:	68 c1 ad 02 c0       	push   0xc002adc1
c00124f3:	e8 bd 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	85 ff                	test   edi,edi
c00124fd:	74 0a                	je     c0012509 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00124ff:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012501:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012507:	74 0a                	je     c0012513 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012509:	83 c4 1c             	add    esp,0x1c
c001250c:	31 c0                	xor    eax,eax
c001250e:	5b                   	pop    ebx
c001250f:	5e                   	pop    esi
c0012510:	5f                   	pop    edi
c0012511:	5d                   	pop    ebp
c0012512:	c3                   	ret    
c0012513:	83 ec 08             	sub    esp,0x8
c0012516:	c1 ed 0b             	shr    ebp,0xb
c0012519:	55                   	push   ebp
c001251a:	68 cf ad 02 c0       	push   0xc002adcf
c001251f:	e8 91 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012524:	e8 30 d8 ff ff       	call   c000fd59 <Phys::allocatePage()>
c0012529:	59                   	pop    ecx
c001252a:	5a                   	pop    edx
c001252b:	50                   	push   eax
c001252c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012530:	68 da ad 02 c0       	push   0xc002adda
c0012535:	e8 7b 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001253a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001253e:	8b 16                	mov    edx,DWORD PTR [esi]
c0012540:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012546:	09 d0                	or     eax,edx
c0012548:	0d 01 08 00 00       	or     eax,0x801
c001254d:	89 06                	mov    DWORD PTR [esi],eax
c001254f:	59                   	pop    ecx
c0012550:	5e                   	pop    esi
c0012551:	50                   	push   eax
c0012552:	68 ef ad 02 c0       	push   0xc002adef
c0012557:	e8 59 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001255c:	0f 20 d8             	mov    eax,cr3
c001255f:	83 c4 0c             	add    esp,0xc
c0012562:	53                   	push   ebx
c0012563:	50                   	push   eax
c0012564:	68 07 ae 02 c0       	push   0xc002ae07
c0012569:	e8 47 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001256e:	c7 04 24 1f ae 02 c0 	mov    DWORD PTR [esp],0xc002ae1f
c0012575:	e8 3b 04 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c0012582:	85 c0                	test   eax,eax
c0012584:	7e 3d                	jle    c00125c3 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012586:	89 fe                	mov    esi,edi
c0012588:	31 db                	xor    ebx,ebx
c001258a:	83 ec 0c             	sub    esp,0xc
c001258d:	55                   	push   ebp
c001258e:	e8 7f f1 ff ff       	call   c0011712 <Virt::swapIDToSector(unsigned long)>
c0012593:	89 34 24             	mov    DWORD PTR [esp],esi
c0012596:	01 d8                	add    eax,ebx
c0012598:	6a 01                	push   0x1
c001259a:	31 d2                	xor    edx,edx
c001259c:	43                   	inc    ebx
c001259d:	52                   	push   edx
c001259e:	81 c6 00 02 00 00    	add    esi,0x200
c00125a4:	50                   	push   eax
c00125a5:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c00125ac:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c00125b3:	e8 58 3d 00 00       	call   c0016310 <LogicalDisk::read(unsigned long long, int, void*)>
c00125b8:	83 c4 20             	add    esp,0x20
c00125bb:	39 1d 6c d5 02 c0    	cmp    DWORD PTR ds:0xc002d56c,ebx
c00125c1:	7f c7                	jg     c001258a <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00125c3:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00125c8:	48                   	dec    eax
c00125c9:	52                   	push   edx
c00125ca:	a3 28 e7 02 c0       	mov    ds:0xc002e728,eax
c00125cf:	50                   	push   eax
c00125d0:	57                   	push   edi
c00125d1:	68 2f ae 02 c0       	push   0xc002ae2f
c00125d6:	e8 da 03 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00125db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125de:	e8 11 f1 ff ff       	call   c00116f4 <Virt::freeSwapfilePage(unsigned long)>
c00125e3:	c7 04 24 44 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae44
c00125ea:	e8 c6 03 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00125ef:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	48                   	dec    eax
c00125f8:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c00125fd:	85 c0                	test   eax,eax
c00125ff:	75 01                	jne    c0012602 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012601:	fb                   	sti    
c0012602:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012606:	25 ff 0f 00 00       	and    eax,0xfff
c001260b:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012610:	77 20                	ja     c0012632 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c0012612:	0f 20 d8             	mov    eax,cr3
c0012615:	0f 22 d8             	mov    cr3,eax
c0012618:	83 ec 0c             	sub    esp,0xc
c001261b:	68 6a ae 02 c0       	push   0xc002ae6a
c0012620:	e8 90 03 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012625:	83 c4 10             	add    esp,0x10
c0012628:	b0 01                	mov    al,0x1
c001262a:	83 c4 1c             	add    esp,0x1c
c001262d:	5b                   	pop    ebx
c001262e:	5e                   	pop    esi
c001262f:	5f                   	pop    edi
c0012630:	5d                   	pop    ebp
c0012631:	c3                   	ret    
c0012632:	83 ec 0c             	sub    esp,0xc
c0012635:	68 5a ae 02 c0       	push   0xc002ae5a
c001263a:	e8 76 03 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001263f:	83 c4 10             	add    esp,0x10
c0012642:	eb ce                	jmp    c0012612 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012644 <VAS::scanForEviction()>:
c0012644:	55                   	push   ebp
c0012645:	31 ed                	xor    ebp,ebp
c0012647:	57                   	push   edi
c0012648:	56                   	push   esi
c0012649:	53                   	push   ebx
c001264a:	83 ec 0c             	sub    esp,0xc
c001264d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012651:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012654:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001265a:	75 0e                	jne    c001266a <VAS::scanForEviction()+0x26>
c001265c:	89 da                	mov    edx,ebx
c001265e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012661:	c1 ea 16             	shr    edx,0x16
c0012664:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012668:	74 4e                	je     c00126b8 <VAS::scanForEviction()+0x74>
c001266a:	53                   	push   ebx
c001266b:	56                   	push   esi
c001266c:	e8 83 f2 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0012671:	5f                   	pop    edi
c0012672:	8b 38                	mov    edi,DWORD PTR [eax]
c0012674:	5a                   	pop    edx
c0012675:	89 fa                	mov    edx,edi
c0012677:	81 e2 01 08 00 00    	and    edx,0x801
c001267d:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012683:	74 3e                	je     c00126c3 <VAS::scanForEviction()+0x7f>
c0012685:	81 c3 00 10 00 00    	add    ebx,0x1000
c001268b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012691:	76 2b                	jbe    c00126be <VAS::scanForEviction()+0x7a>
c0012693:	45                   	inc    ebp
c0012694:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001269b:	83 fd 04             	cmp    ebp,0x4
c001269e:	74 35                	je     c00126d5 <VAS::scanForEviction()+0x91>
c00126a0:	31 db                	xor    ebx,ebx
c00126a2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126a8:	75 c0                	jne    c001266a <VAS::scanForEviction()+0x26>
c00126aa:	89 da                	mov    edx,ebx
c00126ac:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126af:	c1 ea 16             	shr    edx,0x16
c00126b2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126b6:	75 b2                	jne    c001266a <VAS::scanForEviction()+0x26>
c00126b8:	81 c3 00 00 40 00    	add    ebx,0x400000
c00126be:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00126c1:	eb 91                	jmp    c0012654 <VAS::scanForEviction()+0x10>
c00126c3:	f7 c7 20 00 00 00    	test   edi,0x20
c00126c9:	74 22                	je     c00126ed <VAS::scanForEviction()+0xa9>
c00126cb:	83 e7 df             	and    edi,0xffffffdf
c00126ce:	89 38                	mov    DWORD PTR [eax],edi
c00126d0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126d3:	eb b0                	jmp    c0012685 <VAS::scanForEviction()+0x41>
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	68 88 ac 02 c0       	push   0xc002ac88
c00126dd:	e8 71 7c 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00126e2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	e9 67 ff ff ff       	jmp    c0012654 <VAS::scanForEviction()+0x10>
c00126ed:	83 ec 08             	sub    esp,0x8
c00126f0:	53                   	push   ebx
c00126f1:	68 78 ae 02 c0       	push   0xc002ae78
c00126f6:	e8 ba 02 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00126fb:	58                   	pop    eax
c00126fc:	5a                   	pop    edx
c00126fd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012700:	56                   	push   esi
c0012701:	e8 ae fc ff ff       	call   c00123b4 <VAS::evict(unsigned long)>
c0012706:	59                   	pop    ecx
c0012707:	5b                   	pop    ebx
c0012708:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001270b:	68 8c ae 02 c0       	push   0xc002ae8c
c0012710:	e8 a0 02 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012715:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001271c:	89 f8                	mov    eax,edi
c001271e:	83 c4 1c             	add    esp,0x1c
c0012721:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012726:	5b                   	pop    ebx
c0012727:	5e                   	pop    esi
c0012728:	5f                   	pop    edi
c0012729:	5d                   	pop    ebp
c001272a:	c3                   	ret    

c001272b <mapVASFirstTime>:
c001272b:	55                   	push   ebp
c001272c:	57                   	push   edi
c001272d:	56                   	push   esi
c001272e:	53                   	push   ebx
c001272f:	83 ec 0c             	sub    esp,0xc
c0012732:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012737:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001273a:	4a                   	dec    edx
c001273b:	0f 84 fe 00 00 00    	je     c001283f <mapVASFirstTime+0x114>
c0012741:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012744:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012747:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001274c:	c1 e5 15             	shl    ebp,0x15
c001274f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012754:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c001275a:	29 eb                	sub    ebx,ebp
c001275c:	29 ef                	sub    edi,ebp
c001275e:	83 ec 08             	sub    esp,0x8
c0012761:	53                   	push   ebx
c0012762:	68 b8 ae 02 c0       	push   0xc002aeb8
c0012767:	e8 49 02 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001276c:	e8 e8 d5 ff ff       	call   c000fd59 <Phys::allocatePage()>
c0012771:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012778:	6a 01                	push   0x1
c001277a:	53                   	push   ebx
c001277b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012781:	50                   	push   eax
c0012782:	56                   	push   esi
c0012783:	e8 f8 f7 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012788:	83 c4 20             	add    esp,0x20
c001278b:	39 fb                	cmp    ebx,edi
c001278d:	75 cf                	jne    c001275e <mapVASFirstTime+0x33>
c001278f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012794:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012799:	29 eb                	sub    ebx,ebp
c001279b:	29 ef                	sub    edi,ebp
c001279d:	83 ec 08             	sub    esp,0x8
c00127a0:	53                   	push   ebx
c00127a1:	68 d4 ae 02 c0       	push   0xc002aed4
c00127a6:	e8 0a 02 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00127ab:	58                   	pop    eax
c00127ac:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00127b0:	5a                   	pop    edx
c00127b1:	19 c0                	sbb    eax,eax
c00127b3:	83 e0 04             	and    eax,0x4
c00127b6:	05 03 04 00 00       	add    eax,0x403
c00127bb:	50                   	push   eax
c00127bc:	68 f9 ad 02 c0       	push   0xc002adf9
c00127c1:	e8 ef 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00127c6:	e8 8e d5 ff ff       	call   c000fd59 <Phys::allocatePage()>
c00127cb:	59                   	pop    ecx
c00127cc:	89 c5                	mov    ebp,eax
c00127ce:	58                   	pop    eax
c00127cf:	55                   	push   ebp
c00127d0:	68 e8 ae 02 c0       	push   0xc002aee8
c00127d5:	e8 db 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00127da:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00127de:	19 d2                	sbb    edx,edx
c00127e0:	83 e2 04             	and    edx,0x4
c00127e3:	81 c2 03 04 00 00    	add    edx,0x403
c00127e9:	89 14 24             	mov    DWORD PTR [esp],edx
c00127ec:	6a 01                	push   0x1
c00127ee:	53                   	push   ebx
c00127ef:	55                   	push   ebp
c00127f0:	56                   	push   esi
c00127f1:	e8 8a f7 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127f6:	83 c4 18             	add    esp,0x18
c00127f9:	53                   	push   ebx
c00127fa:	56                   	push   esi
c00127fb:	e8 f4 f0 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c0012800:	5a                   	pop    edx
c0012801:	59                   	pop    ecx
c0012802:	ff 30                	push   DWORD PTR [eax]
c0012804:	68 04 af 02 c0       	push   0xc002af04
c0012809:	e8 a7 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001280e:	0f 20 d8             	mov    eax,cr3
c0012811:	83 c4 0c             	add    esp,0xc
c0012814:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001281a:	56                   	push   esi
c001281b:	50                   	push   eax
c001281c:	68 07 ae 02 c0       	push   0xc002ae07
c0012821:	e8 8f 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	39 df                	cmp    edi,ebx
c001282b:	0f 85 6c ff ff ff    	jne    c001279d <mapVASFirstTime+0x72>
c0012831:	0f 20 d8             	mov    eax,cr3
c0012834:	0f 22 d8             	mov    cr3,eax
c0012837:	83 c4 0c             	add    esp,0xc
c001283a:	5b                   	pop    ebx
c001283b:	5e                   	pop    esi
c001283c:	5f                   	pop    edi
c001283d:	5d                   	pop    ebp
c001283e:	c3                   	ret    
c001283f:	83 ec 0c             	sub    esp,0xc
c0012842:	68 9f ae 02 c0       	push   0xc002ae9f
c0012847:	e8 69 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001284c:	83 c4 10             	add    esp,0x10
c001284f:	83 c4 0c             	add    esp,0xc
c0012852:	5b                   	pop    ebx
c0012853:	5e                   	pop    esi
c0012854:	5f                   	pop    edi
c0012855:	5d                   	pop    ebp
c0012856:	c3                   	ret    

c0012857 <__cxa_atexit>:
c0012857:	31 c0                	xor    eax,eax
c0012859:	c3                   	ret    

c001285a <__cxa_finalize>:
c001285a:	c3                   	ret    

c001285b <__stack_chk_fail>:
c001285b:	55                   	push   ebp
c001285c:	89 e5                	mov    ebp,esp
c001285e:	83 ec 14             	sub    esp,0x14
c0012861:	68 0f af 02 c0       	push   0xc002af0f
c0012866:	e8 4a 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001286b:	58                   	pop    eax
c001286c:	5a                   	pop    edx
c001286d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012870:	68 5f af 02 c0       	push   0xc002af5f
c0012875:	e8 3b 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001287a:	59                   	pop    ecx
c001287b:	58                   	pop    eax
c001287c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001287f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012882:	68 5f af 02 c0       	push   0xc002af5f
c0012887:	e8 29 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001288c:	5a                   	pop    edx
c001288d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012890:	59                   	pop    ecx
c0012891:	8b 00                	mov    eax,DWORD PTR [eax]
c0012893:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012896:	68 5f af 02 c0       	push   0xc002af5f
c001289b:	e8 15 01 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00128a0:	5a                   	pop    edx
c00128a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128a4:	59                   	pop    ecx
c00128a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128ac:	68 5f af 02 c0       	push   0xc002af5f
c00128b1:	e8 ff 00 00 00       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00128b6:	c7 04 24 67 af 02 c0 	mov    DWORD PTR [esp],0xc002af67
c00128bd:	e8 91 7a 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00128c2:	83 c4 10             	add    esp,0x10
c00128c5:	c9                   	leave  
c00128c6:	c3                   	ret    

c00128c7 <__cxa_pure_virtual>:
c00128c7:	83 ec 18             	sub    esp,0x18
c00128ca:	68 7f af 02 c0       	push   0xc002af7f
c00128cf:	e8 7f 7a 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00128d4:	83 c4 1c             	add    esp,0x1c
c00128d7:	c3                   	ret    

c00128d8 <operator new[](unsigned long)>:
c00128d8:	e9 80 d0 ff ff       	jmp    c000f95d <malloc>

c00128dd <operator delete(void*, unsigned long)>:
c00128dd:	e9 9b d0 ff ff       	jmp    c000f97d <rfree>

c00128e2 <operator delete[](void*)>:
c00128e2:	e9 96 d0 ff ff       	jmp    c000f97d <rfree>

c00128e7 <operator delete[](void*, unsigned long)>:
c00128e7:	e9 91 d0 ff ff       	jmp    c000f97d <rfree>

c00128ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00128ec:	55                   	push   ebp
c00128ed:	b9 11 00 00 00       	mov    ecx,0x11
c00128f2:	57                   	push   edi
c00128f3:	56                   	push   esi
c00128f4:	be 72 a9 02 c0       	mov    esi,0xc002a972
c00128f9:	53                   	push   ebx
c00128fa:	83 ec 20             	sub    esp,0x20
c00128fd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012901:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012905:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012909:	fc                   	cld    
c001290a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001290c:	89 ee                	mov    esi,ebp
c001290e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012912:	eb 02                	jmp    c0012916 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012914:	89 c6                	mov    esi,eax
c0012916:	31 d2                	xor    edx,edx
c0012918:	41                   	inc    ecx
c0012919:	89 f0                	mov    eax,esi
c001291b:	f7 f3                	div    ebx
c001291d:	39 de                	cmp    esi,ebx
c001291f:	73 f3                	jae    c0012914 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012921:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012924:	eb 02                	jmp    c0012928 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012926:	89 c5                	mov    ebp,eax
c0012928:	31 d2                	xor    edx,edx
c001292a:	49                   	dec    ecx
c001292b:	89 e8                	mov    eax,ebp
c001292d:	f7 f3                	div    ebx
c001292f:	39 dd                	cmp    ebp,ebx
c0012931:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012935:	88 11                	mov    BYTE PTR [ecx],dl
c0012937:	73 ed                	jae    c0012926 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012939:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001293d:	83 c4 20             	add    esp,0x20
c0012940:	5b                   	pop    ebx
c0012941:	5e                   	pop    esi
c0012942:	5f                   	pop    edi
c0012943:	5d                   	pop    ebp
c0012944:	c3                   	ret    

c0012945 <Dbg::logc(char)>:
c0012945:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012949:	ba fd 03 00 00       	mov    edx,0x3fd
c001294e:	ec                   	in     al,dx
c001294f:	a8 20                	test   al,0x20
c0012951:	74 fb                	je     c001294e <Dbg::logc(char)+0x9>
c0012953:	ba f8 03 00 00       	mov    edx,0x3f8
c0012958:	88 c8                	mov    al,cl
c001295a:	ee                   	out    dx,al
c001295b:	c3                   	ret    

c001295c <Dbg::logs(char*)>:
c001295c:	53                   	push   ebx
c001295d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012961:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012964:	84 c0                	test   al,al
c0012966:	74 0f                	je     c0012977 <Dbg::logs(char*)+0x1b>
c0012968:	50                   	push   eax
c0012969:	43                   	inc    ebx
c001296a:	e8 d6 ff ff ff       	call   c0012945 <Dbg::logc(char)>
c001296f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012972:	5a                   	pop    edx
c0012973:	84 c0                	test   al,al
c0012975:	75 f1                	jne    c0012968 <Dbg::logs(char*)+0xc>
c0012977:	5b                   	pop    ebx
c0012978:	c3                   	ret    

c0012979 <Dbg::logWriteInt(unsigned int)>:
c0012979:	83 ec 10             	sub    esp,0x10
c001297c:	6a 0a                	push   0xa
c001297e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012982:	50                   	push   eax
c0012983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012987:	e8 60 ff ff ff       	call   c00128ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001298c:	50                   	push   eax
c001298d:	e8 ca ff ff ff       	call   c001295c <Dbg::logs(char*)>
c0012992:	83 c4 20             	add    esp,0x20
c0012995:	c3                   	ret    

c0012996 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012996:	83 ec 10             	sub    esp,0x10
c0012999:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001299d:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129a1:	50                   	push   eax
c00129a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a6:	e8 41 ff ff ff       	call   c00128ec <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129ab:	50                   	push   eax
c00129ac:	e8 ab ff ff ff       	call   c001295c <Dbg::logs(char*)>
c00129b1:	83 c4 20             	add    esp,0x20
c00129b4:	c3                   	ret    

c00129b5 <Dbg::kprintf(char const*, ...)>:
c00129b5:	55                   	push   ebp
c00129b6:	57                   	push   edi
c00129b7:	56                   	push   esi
c00129b8:	53                   	push   ebx
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00129c0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00129c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129c8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129cb:	84 c0                	test   al,al
c00129cd:	74 4a                	je     c0012a19 <Dbg::kprintf(char const*, ...)+0x64>
c00129cf:	31 db                	xor    ebx,ebx
c00129d1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00129d4:	3c 25                	cmp    al,0x25
c00129d6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00129d9:	0f 85 e4 00 00 00    	jne    c0012ac3 <Dbg::kprintf(char const*, ...)+0x10e>
c00129df:	83 c3 02             	add    ebx,0x2
c00129e2:	8a 07                	mov    al,BYTE PTR [edi]
c00129e4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00129e7:	83 e8 25             	sub    eax,0x25
c00129ea:	3c 53                	cmp    al,0x53
c00129ec:	0f 87 ba 00 00 00    	ja     c0012aac <Dbg::kprintf(char const*, ...)+0xf7>
c00129f2:	0f b6 c0             	movzx  eax,al
c00129f5:	ff 24 85 94 af 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd506c]
c00129fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a00:	89 c8                	mov    eax,ecx
c0012a02:	83 c1 04             	add    ecx,0x4
c0012a05:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a09:	ff 30                	push   DWORD PTR [eax]
c0012a0b:	e8 69 ff ff ff       	call   c0012979 <Dbg::logWriteInt(unsigned int)>
c0012a10:	5f                   	pop    edi
c0012a11:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a15:	84 c0                	test   al,al
c0012a17:	75 b8                	jne    c00129d1 <Dbg::kprintf(char const*, ...)+0x1c>
c0012a19:	83 c4 0c             	add    esp,0xc
c0012a1c:	5b                   	pop    ebx
c0012a1d:	5e                   	pop    esi
c0012a1e:	5f                   	pop    edi
c0012a1f:	5d                   	pop    ebp
c0012a20:	c3                   	ret    
c0012a21:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a25:	89 c8                	mov    eax,ecx
c0012a27:	83 c1 04             	add    ecx,0x4
c0012a2a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a2e:	ff 30                	push   DWORD PTR [eax]
c0012a30:	e8 27 ff ff ff       	call   c001295c <Dbg::logs(char*)>
c0012a35:	58                   	pop    eax
c0012a36:	eb d9                	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a3c:	89 d0                	mov    eax,edx
c0012a3e:	83 c2 04             	add    edx,0x4
c0012a41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a45:	ff 30                	push   DWORD PTR [eax]
c0012a47:	e8 2d ff ff ff       	call   c0012979 <Dbg::logWriteInt(unsigned int)>
c0012a4c:	58                   	pop    eax
c0012a4d:	eb c2                	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a53:	89 d0                	mov    eax,edx
c0012a55:	83 c2 04             	add    edx,0x4
c0012a58:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012a5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a5f:	50                   	push   eax
c0012a60:	e8 e0 fe ff ff       	call   c0012945 <Dbg::logc(char)>
c0012a65:	58                   	pop    eax
c0012a66:	eb a9                	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a68:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a6c:	89 c8                	mov    eax,ecx
c0012a6e:	83 c1 04             	add    ecx,0x4
c0012a71:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a75:	6a 10                	push   0x10
c0012a77:	ff 30                	push   DWORD PTR [eax]
c0012a79:	e8 18 ff ff ff       	call   c0012996 <Dbg::logWriteIntBase(unsigned int, int)>
c0012a7e:	59                   	pop    ecx
c0012a7f:	5f                   	pop    edi
c0012a80:	eb 8f                	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a86:	89 d0                	mov    eax,edx
c0012a88:	83 c2 08             	add    edx,0x8
c0012a8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a8f:	6a 10                	push   0x10
c0012a91:	ff 30                	push   DWORD PTR [eax]
c0012a93:	e8 fe fe ff ff       	call   c0012996 <Dbg::logWriteIntBase(unsigned int, int)>
c0012a98:	58                   	pop    eax
c0012a99:	5a                   	pop    edx
c0012a9a:	e9 72 ff ff ff       	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a9f:	6a 25                	push   0x25
c0012aa1:	e8 9f fe ff ff       	call   c0012945 <Dbg::logc(char)>
c0012aa6:	58                   	pop    eax
c0012aa7:	e9 65 ff ff ff       	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012aac:	6a 25                	push   0x25
c0012aae:	e8 92 fe ff ff       	call   c0012945 <Dbg::logc(char)>
c0012ab3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ab6:	50                   	push   eax
c0012ab7:	e8 89 fe ff ff       	call   c0012945 <Dbg::logc(char)>
c0012abc:	5a                   	pop    edx
c0012abd:	59                   	pop    ecx
c0012abe:	e9 4e ff ff ff       	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ac3:	50                   	push   eax
c0012ac4:	89 eb                	mov    ebx,ebp
c0012ac6:	e8 7a fe ff ff       	call   c0012945 <Dbg::logc(char)>
c0012acb:	89 fd                	mov    ebp,edi
c0012acd:	58                   	pop    eax
c0012ace:	e9 3e ff ff ff       	jmp    c0012a11 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ad3:	90                   	nop

c0012ad4 <File::read(unsigned long long, void*, int*)>:
c0012ad4:	53                   	push   ebx
c0012ad5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ad9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012add:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ae4:	3c 19                	cmp    al,0x19
c0012ae6:	77 35                	ja     c0012b1d <File::read(unsigned long long, void*, int*)+0x49>
c0012ae8:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0012aef:	85 c0                	test   eax,eax
c0012af1:	74 2a                	je     c0012b1d <File::read(unsigned long long, void*, int*)+0x49>
c0012af3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012af9:	85 c0                	test   eax,eax
c0012afb:	74 20                	je     c0012b1d <File::read(unsigned long long, void*, int*)+0x49>
c0012afd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b01:	74 21                	je     c0012b24 <File::read(unsigned long long, void*, int*)+0x50>
c0012b03:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b09:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b17:	5b                   	pop    ebx
c0012b18:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012b1b:	ff e0                	jmp    eax
c0012b1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b22:	eb 05                	jmp    c0012b29 <File::read(unsigned long long, void*, int*)+0x55>
c0012b24:	b8 05 00 00 00       	mov    eax,0x5
c0012b29:	5b                   	pop    ebx
c0012b2a:	c3                   	ret    
c0012b2b:	90                   	nop

c0012b2c <File::write(unsigned long long, void*, int*)>:
c0012b2c:	53                   	push   ebx
c0012b2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b35:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b3c:	3c 19                	cmp    al,0x19
c0012b3e:	77 35                	ja     c0012b75 <File::write(unsigned long long, void*, int*)+0x49>
c0012b40:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0012b47:	85 c0                	test   eax,eax
c0012b49:	74 2a                	je     c0012b75 <File::write(unsigned long long, void*, int*)+0x49>
c0012b4b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b51:	85 c0                	test   eax,eax
c0012b53:	74 20                	je     c0012b75 <File::write(unsigned long long, void*, int*)+0x49>
c0012b55:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b59:	74 21                	je     c0012b7c <File::write(unsigned long long, void*, int*)+0x50>
c0012b5b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b5d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b61:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b6f:	5b                   	pop    ebx
c0012b70:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012b73:	ff e0                	jmp    eax
c0012b75:	b8 0b 00 00 00       	mov    eax,0xb
c0012b7a:	eb 05                	jmp    c0012b81 <File::write(unsigned long long, void*, int*)+0x55>
c0012b7c:	b8 05 00 00 00       	mov    eax,0x5
c0012b81:	5b                   	pop    ebx
c0012b82:	c3                   	ret    
c0012b83:	90                   	nop

c0012b84 <Directory::read(unsigned long long, void*, int*)>:
c0012b84:	53                   	push   ebx
c0012b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b94:	3c 19                	cmp    al,0x19
c0012b96:	77 35                	ja     c0012bcd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b98:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0012b9f:	85 c0                	test   eax,eax
c0012ba1:	74 2a                	je     c0012bcd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ba3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ba9:	85 c0                	test   eax,eax
c0012bab:	74 20                	je     c0012bcd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bb1:	74 21                	je     c0012bd4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012bb3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bb5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012bb9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bc7:	5b                   	pop    ebx
c0012bc8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012bcb:	ff e0                	jmp    eax
c0012bcd:	b8 0b 00 00 00       	mov    eax,0xb
c0012bd2:	eb 05                	jmp    c0012bd9 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012bd4:	b8 05 00 00 00       	mov    eax,0x5
c0012bd9:	5b                   	pop    ebx
c0012bda:	c3                   	ret    
c0012bdb:	90                   	nop

c0012bdc <Directory::write(unsigned long long, void*, int*)>:
c0012bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012be7:	b8 0b 00 00 00       	mov    eax,0xb
c0012bec:	80 fa 19             	cmp    dl,0x19
c0012bef:	77 18                	ja     c0012c09 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012bf1:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0012bf8:	85 d2                	test   edx,edx
c0012bfa:	74 0d                	je     c0012c09 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012bfc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c03:	19 c0                	sbb    eax,eax
c0012c05:	83 e0 0a             	and    eax,0xa
c0012c08:	40                   	inc    eax
c0012c09:	c3                   	ret    

c0012c0a <File::isAtty()>:
c0012c0a:	31 c0                	xor    eax,eax
c0012c0c:	c3                   	ret    
c0012c0d:	90                   	nop

c0012c0e <Directory::isAtty()>:
c0012c0e:	31 c0                	xor    eax,eax
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop

c0012c12 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c12:	b8 0a 00 00 00       	mov    eax,0xa
c0012c17:	c3                   	ret    

c0012c18 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c18:	b8 0a 00 00 00       	mov    eax,0xa
c0012c1d:	c3                   	ret    

c0012c1e <Filesystem::allocateSwapfile(char const*, int)>:
c0012c1e:	31 c0                	xor    eax,eax
c0012c20:	31 d2                	xor    edx,edx
c0012c22:	c3                   	ret    
c0012c23:	90                   	nop

c0012c24 <File::~File()>:
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c0012c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c30:	89 10                	mov    DWORD PTR [eax],edx
c0012c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	50                   	push   eax
c0012c3a:	e8 43 e7 ff ff       	call   c0011382 <UnixFile::~UnixFile()>
c0012c3f:	83 c4 10             	add    esp,0x10
c0012c42:	90                   	nop
c0012c43:	83 c4 0c             	add    esp,0xc
c0012c46:	c3                   	ret    
c0012c47:	90                   	nop

c0012c48 <File::~File()>:
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	83 ec 0c             	sub    esp,0xc
c0012c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c52:	e8 cd ff ff ff       	call   c0012c24 <File::~File()>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	83 ec 08             	sub    esp,0x8
c0012c5d:	68 14 01 00 00       	push   0x114
c0012c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c66:	e8 72 fc ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	83 c4 0c             	add    esp,0xc
c0012c71:	c3                   	ret    

c0012c72 <Directory::~Directory()>:
c0012c72:	83 ec 0c             	sub    esp,0xc
c0012c75:	ba 70 b1 02 c0       	mov    edx,0xc002b170
c0012c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7e:	89 10                	mov    DWORD PTR [eax],edx
c0012c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	50                   	push   eax
c0012c88:	e8 f5 e6 ff ff       	call   c0011382 <UnixFile::~UnixFile()>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	90                   	nop
c0012c91:	83 c4 0c             	add    esp,0xc
c0012c94:	c3                   	ret    
c0012c95:	90                   	nop

c0012c96 <Directory::~Directory()>:
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	83 ec 0c             	sub    esp,0xc
c0012c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca0:	e8 cd ff ff ff       	call   c0012c72 <Directory::~Directory()>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	83 ec 08             	sub    esp,0x8
c0012cab:	68 14 01 00 00       	push   0x114
c0012cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb4:	e8 24 fc ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0012cb9:	83 c4 10             	add    esp,0x10
c0012cbc:	83 c4 0c             	add    esp,0xc
c0012cbf:	c3                   	ret    

c0012cc0 <Filesystem::Filesystem()>:
c0012cc0:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0012cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cc9:	89 10                	mov    DWORD PTR [eax],edx
c0012ccb:	8b 15 34 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e734
c0012cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cdc:	a3 34 e7 02 c0       	mov    ds:0xc002e734,eax
c0012ce1:	90                   	nop
c0012ce2:	c3                   	ret    
c0012ce3:	90                   	nop

c0012ce4 <Filesystem::~Filesystem()>:
c0012ce4:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0012ce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ced:	89 10                	mov    DWORD PTR [eax],edx
c0012cef:	90                   	nop
c0012cf0:	c3                   	ret    
c0012cf1:	90                   	nop

c0012cf2 <Filesystem::~Filesystem()>:
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012cf9:	e8 e6 ff ff ff       	call   c0012ce4 <Filesystem::~Filesystem()>
c0012cfe:	83 c4 04             	add    esp,0x4
c0012d01:	83 ec 08             	sub    esp,0x8
c0012d04:	6a 08                	push   0x8
c0012d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0a:	e8 ce fb ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	83 c4 0c             	add    esp,0xc
c0012d15:	c3                   	ret    

c0012d16 <Fs::getcwd(Process*, char*, int)>:
c0012d16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d1a:	31 c0                	xor    eax,eax
c0012d1c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d1f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d23:	7d 15                	jge    c0012d3a <Fs::getcwd(Process*, char*, int)+0x24>
c0012d25:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d29:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012d30:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012d33:	84 c9                	test   cl,cl
c0012d35:	74 06                	je     c0012d3d <Fs::getcwd(Process*, char*, int)+0x27>
c0012d37:	40                   	inc    eax
c0012d38:	eb e2                	jmp    c0012d1c <Fs::getcwd(Process*, char*, int)+0x6>
c0012d3a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012d3d:	31 c0                	xor    eax,eax
c0012d3f:	c3                   	ret    

c0012d40 <Fs::initVFS()>:
c0012d40:	83 ec 18             	sub    esp,0x18
c0012d43:	6a 08                	push   0x8
c0012d45:	e8 13 cc ff ff       	call   c000f95d <malloc>
c0012d4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d4d:	e8 dc e1 00 00       	call   c0020f2e <FAT::FAT()>
c0012d52:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012d59:	e8 ff cb ff ff       	call   c000f95d <malloc>
c0012d5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d61:	e8 d4 f3 00 00       	call   c002213a <ISO9660::ISO9660()>
c0012d66:	83 c4 1c             	add    esp,0x1c
c0012d69:	c3                   	ret    

c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012d6a:	55                   	push   ebp
c0012d6b:	57                   	push   edi
c0012d6c:	56                   	push   esi
c0012d6d:	53                   	push   ebx
c0012d6e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012d74:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012d7b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012d82:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012d89:	68 00 04 00 00       	push   0x400
c0012d8e:	6a 00                	push   0x0
c0012d90:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d94:	56                   	push   esi
c0012d95:	e8 b6 d9 fe ff       	call   c0000750 <memset>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012da1:	75 0b                	jne    c0012dae <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012da3:	50                   	push   eax
c0012da4:	50                   	push   eax
c0012da5:	57                   	push   edi
c0012da6:	56                   	push   esi
c0012da7:	e8 60 da fe ff       	call   c000080c <strcpy>
c0012dac:	eb 41                	jmp    c0012def <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012dae:	8a 07                	mov    al,BYTE PTR [edi]
c0012db0:	3c 5c                	cmp    al,0x5c
c0012db2:	74 04                	je     c0012db8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012db4:	3c 2f                	cmp    al,0x2f
c0012db6:	75 18                	jne    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012db8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012dbb:	3c 60                	cmp    al,0x60
c0012dbd:	7e 03                	jle    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012dbf:	83 e8 20             	sub    eax,0x20
c0012dc2:	88 04 24             	mov    BYTE PTR [esp],al
c0012dc5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012dcc:	50                   	push   eax
c0012dcd:	50                   	push   eax
c0012dce:	eb 18                	jmp    c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012dd0:	50                   	push   eax
c0012dd1:	50                   	push   eax
c0012dd2:	55                   	push   ebp
c0012dd3:	56                   	push   esi
c0012dd4:	e8 33 da fe ff       	call   c000080c <strcpy>
c0012dd9:	5a                   	pop    edx
c0012dda:	59                   	pop    ecx
c0012ddb:	68 6a c7 02 c0       	push   0xc002c76a
c0012de0:	56                   	push   esi
c0012de1:	e8 66 db fe ff       	call   c000094c <strcat>
c0012de6:	5d                   	pop    ebp
c0012de7:	58                   	pop    eax
c0012de8:	57                   	push   edi
c0012de9:	56                   	push   esi
c0012dea:	e8 5d db fe ff       	call   c000094c <strcat>
c0012def:	83 c4 10             	add    esp,0x10
c0012df2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012df5:	3c 60                	cmp    al,0x60
c0012df7:	7e 03                	jle    c0012dfc <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012df9:	83 e8 20             	sub    eax,0x20
c0012dfc:	88 04 24             	mov    BYTE PTR [esp],al
c0012dff:	88 03                	mov    BYTE PTR [ebx],al
c0012e01:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e08:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e0e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e12:	bf 03 00 00 00       	mov    edi,0x3
c0012e17:	b8 03 00 00 00       	mov    eax,0x3
c0012e1c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012e1f:	84 d2                	test   dl,dl
c0012e21:	0f 84 91 00 00 00    	je     c0012eb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012e27:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012e2a:	80 fa 5c             	cmp    dl,0x5c
c0012e2d:	74 05                	je     c0012e34 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012e2f:	80 fa 2f             	cmp    dl,0x2f
c0012e32:	75 12                	jne    c0012e46 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e34:	89 c5                	mov    ebp,eax
c0012e36:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3b:	74 09                	je     c0012e46 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e3d:	40                   	inc    eax
c0012e3e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012e42:	89 cf                	mov    edi,ecx
c0012e44:	eb d6                	jmp    c0012e1c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012e46:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012e4b:	75 5b                	jne    c0012ea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e4d:	80 fa 2e             	cmp    dl,0x2e
c0012e50:	75 56                	jne    c0012ea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e52:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012e56:	74 19                	je     c0012e71 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012e58:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e5d:	74 53                	je     c0012eb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e5f:	89 f9                	mov    ecx,edi
c0012e61:	41                   	inc    ecx
c0012e62:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e65:	80 fa 2f             	cmp    dl,0x2f
c0012e68:	74 f7                	je     c0012e61 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e6a:	80 fa 5c             	cmp    dl,0x5c
c0012e6d:	74 f2                	je     c0012e61 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e6f:	eb d1                	jmp    c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e71:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e76:	74 3a                	je     c0012eb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e78:	83 f8 03             	cmp    eax,0x3
c0012e7b:	74 c5                	je     c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e7d:	41                   	inc    ecx
c0012e7e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e81:	80 fa 2f             	cmp    dl,0x2f
c0012e84:	74 f7                	je     c0012e7d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e86:	80 fa 5c             	cmp    dl,0x5c
c0012e89:	74 f2                	je     c0012e7d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e8b:	48                   	dec    eax
c0012e8c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e90:	75 06                	jne    c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e96:	eb f3                	jmp    c0012e8b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012e98:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e9c:	74 07                	je     c0012ea5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012e9e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ea2:	48                   	dec    eax
c0012ea3:	eb f3                	jmp    c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ea5:	40                   	inc    eax
c0012ea6:	eb 9a                	jmp    c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ea8:	80 fa 2f             	cmp    dl,0x2f
c0012eab:	74 95                	je     c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ead:	80 fa 5c             	cmp    dl,0x5c
c0012eb0:	74 90                	je     c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012eb2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012eb5:	40                   	inc    eax
c0012eb6:	eb 8a                	jmp    c0012e42 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012eb8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	53                   	push   ebx
c0012ec0:	e8 a7 d8 fe ff       	call   c000076c <strlen>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ecd:	75 26                	jne    c0012ef5 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012ecf:	83 ec 0c             	sub    esp,0xc
c0012ed2:	53                   	push   ebx
c0012ed3:	e8 94 d8 fe ff       	call   c000076c <strlen>
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012ee0:	74 26                	je     c0012f08 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012ee2:	83 ec 0c             	sub    esp,0xc
c0012ee5:	53                   	push   ebx
c0012ee6:	e8 81 d8 fe ff       	call   c000076c <strlen>
c0012eeb:	83 c4 10             	add    esp,0x10
c0012eee:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ef3:	eb c7                	jmp    c0012ebc <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012ef5:	83 ec 0c             	sub    esp,0xc
c0012ef8:	53                   	push   ebx
c0012ef9:	e8 6e d8 fe ff       	call   c000076c <strlen>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f06:	74 c7                	je     c0012ecf <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f08:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f0e:	5b                   	pop    ebx
c0012f0f:	5e                   	pop    esi
c0012f10:	5f                   	pop    edi
c0012f11:	5d                   	pop    ebp
c0012f12:	c3                   	ret    
c0012f13:	90                   	nop

c0012f14 <File::File(char const*, Process*)>:
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1b:	83 ec 08             	sub    esp,0x8
c0012f1e:	6a 00                	push   0x0
c0012f20:	50                   	push   eax
c0012f21:	e8 7a e2 ff ff       	call   c00111a0 <UnixFile::UnixFile(int)>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c0012f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f32:	89 10                	mov    DWORD PTR [eax],edx
c0012f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f38:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f42:	83 c0 0d             	add    eax,0xd
c0012f45:	83 ec 04             	sub    esp,0x4
c0012f48:	52                   	push   edx
c0012f49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4d:	50                   	push   eax
c0012f4e:	e8 17 fe ff ff       	call   c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f53:	83 c4 10             	add    esp,0x10
c0012f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f5d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f64:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f72:	90                   	nop
c0012f73:	83 c4 0c             	add    esp,0xc
c0012f76:	c3                   	ret    
c0012f77:	90                   	nop

c0012f78 <File::open(FileOpenMode)>:
c0012f78:	53                   	push   ebx
c0012f79:	b8 0b 00 00 00       	mov    eax,0xb
c0012f7e:	83 ec 08             	sub    esp,0x8
c0012f81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f85:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012f8c:	80 fa 19             	cmp    dl,0x19
c0012f8f:	77 40                	ja     c0012fd1 <File::open(FileOpenMode)+0x59>
c0012f91:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0012f98:	85 d2                	test   edx,edx
c0012f9a:	74 35                	je     c0012fd1 <File::open(FileOpenMode)+0x59>
c0012f9c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fa2:	85 d2                	test   edx,edx
c0012fa4:	74 2b                	je     c0012fd1 <File::open(FileOpenMode)+0x59>
c0012fa6:	b8 06 00 00 00       	mov    eax,0x6
c0012fab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012faf:	75 20                	jne    c0012fd1 <File::open(FileOpenMode)+0x59>
c0012fb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fb3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fbd:	51                   	push   ecx
c0012fbe:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fc1:	51                   	push   ecx
c0012fc2:	52                   	push   edx
c0012fc3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	75 04                	jne    c0012fd1 <File::open(FileOpenMode)+0x59>
c0012fcd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012fd1:	83 c4 08             	add    esp,0x8
c0012fd4:	5b                   	pop    ebx
c0012fd5:	c3                   	ret    

c0012fd6 <File::close()>:
c0012fd6:	53                   	push   ebx
c0012fd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fe3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fea:	80 fa 19             	cmp    dl,0x19
c0012fed:	77 41                	ja     c0013030 <File::close()+0x5a>
c0012fef:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c0012ff6:	85 db                	test   ebx,ebx
c0012ff8:	74 36                	je     c0013030 <File::close()+0x5a>
c0012ffa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013001:	74 2d                	je     c0013030 <File::close()+0x5a>
c0013003:	b8 05 00 00 00       	mov    eax,0x5
c0013008:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001300c:	74 22                	je     c0013030 <File::close()+0x5a>
c001300e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013012:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c0013019:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001301f:	53                   	push   ebx
c0013020:	53                   	push   ebx
c0013021:	8b 10                	mov    edx,DWORD PTR [eax]
c0013023:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013029:	50                   	push   eax
c001302a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	83 c4 08             	add    esp,0x8
c0013033:	5b                   	pop    ebx
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <File::seek(unsigned long long)>:
c0013036:	56                   	push   esi
c0013037:	53                   	push   ebx
c0013038:	b8 0b 00 00 00       	mov    eax,0xb
c001303d:	51                   	push   ecx
c001303e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013042:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013046:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001304d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013051:	80 fa 19             	cmp    dl,0x19
c0013054:	77 31                	ja     c0013087 <File::seek(unsigned long long)+0x51>
c0013056:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c001305d:	85 d2                	test   edx,edx
c001305f:	74 26                	je     c0013087 <File::seek(unsigned long long)+0x51>
c0013061:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013067:	85 d2                	test   edx,edx
c0013069:	74 1c                	je     c0013087 <File::seek(unsigned long long)+0x51>
c001306b:	b8 05 00 00 00       	mov    eax,0x5
c0013070:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013074:	74 11                	je     c0013087 <File::seek(unsigned long long)+0x51>
c0013076:	8b 02                	mov    eax,DWORD PTR [edx]
c0013078:	53                   	push   ebx
c0013079:	51                   	push   ecx
c001307a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013080:	52                   	push   edx
c0013081:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	5a                   	pop    edx
c0013088:	5b                   	pop    ebx
c0013089:	5e                   	pop    esi
c001308a:	c3                   	ret    
c001308b:	90                   	nop

c001308c <File::tell(unsigned long long*)>:
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	b8 0b 00 00 00       	mov    eax,0xb
c0013094:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013098:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001309f:	80 fa 19             	cmp    dl,0x19
c00130a2:	77 34                	ja     c00130d8 <File::tell(unsigned long long*)+0x4c>
c00130a4:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00130ab:	85 d2                	test   edx,edx
c00130ad:	74 29                	je     c00130d8 <File::tell(unsigned long long*)+0x4c>
c00130af:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130b5:	85 d2                	test   edx,edx
c00130b7:	74 1f                	je     c00130d8 <File::tell(unsigned long long*)+0x4c>
c00130b9:	b8 05 00 00 00       	mov    eax,0x5
c00130be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130c2:	74 14                	je     c00130d8 <File::tell(unsigned long long*)+0x4c>
c00130c4:	50                   	push   eax
c00130c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00130c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130cb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130d1:	52                   	push   edx
c00130d2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00130d5:	83 c4 10             	add    esp,0x10
c00130d8:	83 c4 0c             	add    esp,0xc
c00130db:	c3                   	ret    

c00130dc <File::rewind()>:
c00130dc:	83 ec 10             	sub    esp,0x10
c00130df:	6a 00                	push   0x0
c00130e1:	6a 00                	push   0x0
c00130e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e7:	e8 4a ff ff ff       	call   c0013036 <File::seek(unsigned long long)>
c00130ec:	83 c4 1c             	add    esp,0x1c
c00130ef:	c3                   	ret    

c00130f0 <File::unlink()>:
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	b8 0b 00 00 00       	mov    eax,0xb
c00130f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013103:	80 f9 19             	cmp    cl,0x19
c0013106:	77 2f                	ja     c0013137 <File::unlink()+0x47>
c0013108:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001310f:	85 c9                	test   ecx,ecx
c0013111:	74 24                	je     c0013137 <File::unlink()+0x47>
c0013113:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013119:	85 c9                	test   ecx,ecx
c001311b:	74 1a                	je     c0013137 <File::unlink()+0x47>
c001311d:	b8 06 00 00 00       	mov    eax,0x6
c0013122:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013126:	75 0f                	jne    c0013137 <File::unlink()+0x47>
c0013128:	83 c2 0d             	add    edx,0xd
c001312b:	50                   	push   eax
c001312c:	50                   	push   eax
c001312d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312f:	52                   	push   edx
c0013130:	51                   	push   ecx
c0013131:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013134:	83 c4 10             	add    esp,0x10
c0013137:	83 c4 0c             	add    esp,0xc
c001313a:	c3                   	ret    
c001313b:	90                   	nop

c001313c <File::rename(char const*)>:
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	b8 0b 00 00 00       	mov    eax,0xb
c0013144:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013148:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001314f:	80 f9 19             	cmp    cl,0x19
c0013152:	77 32                	ja     c0013186 <File::rename(char const*)+0x4a>
c0013154:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001315b:	85 c9                	test   ecx,ecx
c001315d:	74 27                	je     c0013186 <File::rename(char const*)+0x4a>
c001315f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013165:	85 c9                	test   ecx,ecx
c0013167:	74 1d                	je     c0013186 <File::rename(char const*)+0x4a>
c0013169:	b8 06 00 00 00       	mov    eax,0x6
c001316e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013172:	75 12                	jne    c0013186 <File::rename(char const*)+0x4a>
c0013174:	83 c2 0d             	add    edx,0xd
c0013177:	50                   	push   eax
c0013178:	8b 01                	mov    eax,DWORD PTR [ecx]
c001317a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001317e:	52                   	push   edx
c001317f:	51                   	push   ecx
c0013180:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	83 c4 0c             	add    esp,0xc
c0013189:	c3                   	ret    

c001318a <File::chfatattr(unsigned char, unsigned char)>:
c001318a:	57                   	push   edi
c001318b:	b8 0b 00 00 00       	mov    eax,0xb
c0013190:	56                   	push   esi
c0013191:	53                   	push   ebx
c0013192:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013196:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001319a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00131a5:	80 f9 19             	cmp    cl,0x19
c00131a8:	77 37                	ja     c00131e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131aa:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00131b1:	85 c9                	test   ecx,ecx
c00131b3:	74 2c                	je     c00131e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131bb:	85 c9                	test   ecx,ecx
c00131bd:	74 22                	je     c00131e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131bf:	b8 06 00 00 00       	mov    eax,0x6
c00131c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131c8:	75 17                	jne    c00131e1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131ca:	8b 39                	mov    edi,DWORD PTR [ecx]
c00131cc:	89 f0                	mov    eax,esi
c00131ce:	83 c2 0d             	add    edx,0xd
c00131d1:	0f b6 f0             	movzx  esi,al
c00131d4:	0f b6 db             	movzx  ebx,bl
c00131d7:	56                   	push   esi
c00131d8:	53                   	push   ebx
c00131d9:	52                   	push   edx
c00131da:	51                   	push   ecx
c00131db:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	5b                   	pop    ebx
c00131e2:	5e                   	pop    esi
c00131e3:	5f                   	pop    edi
c00131e4:	c3                   	ret    
c00131e5:	90                   	nop

c00131e6 <File::exists()>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	31 c0                	xor    eax,eax
c00131eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131f6:	80 f9 19             	cmp    cl,0x19
c00131f9:	77 24                	ja     c001321f <File::exists()+0x39>
c00131fb:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013202:	85 c9                	test   ecx,ecx
c0013204:	74 19                	je     c001321f <File::exists()+0x39>
c0013206:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001320c:	85 c9                	test   ecx,ecx
c001320e:	74 0f                	je     c001321f <File::exists()+0x39>
c0013210:	83 c2 0d             	add    edx,0xd
c0013213:	50                   	push   eax
c0013214:	50                   	push   eax
c0013215:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013217:	52                   	push   edx
c0013218:	51                   	push   ecx
c0013219:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	83 c4 0c             	add    esp,0xc
c0013222:	c3                   	ret    
c0013223:	90                   	nop

c0013224 <File::stat(unsigned long long*, bool*)>:
c0013224:	56                   	push   esi
c0013225:	53                   	push   ebx
c0013226:	50                   	push   eax
c0013227:	b8 0b 00 00 00       	mov    eax,0xb
c001322c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013230:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001323b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001323f:	80 f9 19             	cmp    cl,0x19
c0013242:	77 3d                	ja     c0013281 <File::stat(unsigned long long*, bool*)+0x5d>
c0013244:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001324b:	85 c9                	test   ecx,ecx
c001324d:	74 32                	je     c0013281 <File::stat(unsigned long long*, bool*)+0x5d>
c001324f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013255:	85 c9                	test   ecx,ecx
c0013257:	74 28                	je     c0013281 <File::stat(unsigned long long*, bool*)+0x5d>
c0013259:	8b 01                	mov    eax,DWORD PTR [ecx]
c001325b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001325f:	74 13                	je     c0013274 <File::stat(unsigned long long*, bool*)+0x50>
c0013261:	83 ec 04             	sub    esp,0x4
c0013264:	56                   	push   esi
c0013265:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001326b:	51                   	push   ecx
c001326c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001326f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013272:	eb 0a                	jmp    c001327e <File::stat(unsigned long long*, bool*)+0x5a>
c0013274:	53                   	push   ebx
c0013275:	83 c2 0d             	add    edx,0xd
c0013278:	56                   	push   esi
c0013279:	52                   	push   edx
c001327a:	51                   	push   ecx
c001327b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001327e:	83 c4 10             	add    esp,0x10
c0013281:	5a                   	pop    edx
c0013282:	5b                   	pop    ebx
c0013283:	5e                   	pop    esi
c0013284:	c3                   	ret    

c0013285 <Fs::setcwd(Process*, char*)>:
c0013285:	55                   	push   ebp
c0013286:	57                   	push   edi
c0013287:	56                   	push   esi
c0013288:	53                   	push   ebx
c0013289:	81 ec 20 02 00 00    	sub    esp,0x220
c001328f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013296:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001329c:	57                   	push   edi
c001329d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00132a4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00132a8:	56                   	push   esi
c00132a9:	e8 bc fa ff ff       	call   c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>
c00132ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00132b1:	e8 b6 d4 fe ff       	call   c000076c <strlen>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	83 f8 02             	cmp    eax,0x2
c00132bc:	77 17                	ja     c00132d5 <Fs::setcwd(Process*, char*)+0x50>
c00132be:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00132c3:	83 e8 41             	sub    eax,0x41
c00132c6:	83 f8 19             	cmp    eax,0x19
c00132c9:	76 24                	jbe    c00132ef <Fs::setcwd(Process*, char*)+0x6a>
c00132cb:	b8 03 00 00 00       	mov    eax,0x3
c00132d0:	e9 e0 00 00 00       	jmp    c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c00132d5:	83 ec 0c             	sub    esp,0xc
c00132d8:	56                   	push   esi
c00132d9:	e8 8e d4 fe ff       	call   c000076c <strlen>
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	83 f8 03             	cmp    eax,0x3
c00132e4:	75 34                	jne    c001331a <Fs::setcwd(Process*, char*)+0x95>
c00132e6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00132eb:	75 2d                	jne    c001331a <Fs::setcwd(Process*, char*)+0x95>
c00132ed:	eb cf                	jmp    c00132be <Fs::setcwd(Process*, char*)+0x39>
c00132ef:	8b 14 85 c0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1440]
c00132f6:	b8 05 00 00 00       	mov    eax,0x5
c00132fb:	85 d2                	test   edx,edx
c00132fd:	0f 84 b2 00 00 00    	je     c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c0013303:	b8 06 00 00 00       	mov    eax,0x6
c0013308:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001330f:	0f 85 92 00 00 00    	jne    c00133a7 <Fs::setcwd(Process*, char*)+0x122>
c0013315:	e9 9b 00 00 00       	jmp    c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c001331a:	83 ec 0c             	sub    esp,0xc
c001331d:	68 14 01 00 00       	push   0x114
c0013322:	e8 36 c6 ff ff       	call   c000f95d <malloc>
c0013327:	83 c4 0c             	add    esp,0xc
c001332a:	89 c3                	mov    ebx,eax
c001332c:	55                   	push   ebp
c001332d:	56                   	push   esi
c001332e:	50                   	push   eax
c001332f:	e8 e0 fb ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0013334:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013339:	83 c4 0c             	add    esp,0xc
c001333c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013340:	50                   	push   eax
c0013341:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013345:	50                   	push   eax
c0013346:	53                   	push   ebx
c0013347:	e8 d8 fe ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	83 f8 02             	cmp    eax,0x2
c0013352:	74 04                	je     c0013358 <Fs::setcwd(Process*, char*)+0xd3>
c0013354:	85 c0                	test   eax,eax
c0013356:	74 1c                	je     c0013374 <Fs::setcwd(Process*, char*)+0xef>
c0013358:	b8 01 00 00 00       	mov    eax,0x1
c001335d:	85 db                	test   ebx,ebx
c001335f:	74 54                	je     c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c0013361:	83 ec 0c             	sub    esp,0xc
c0013364:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013366:	53                   	push   ebx
c0013367:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	b8 01 00 00 00       	mov    eax,0x1
c0013372:	eb 41                	jmp    c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c0013374:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013379:	75 1c                	jne    c0013397 <Fs::setcwd(Process*, char*)+0x112>
c001337b:	b8 02 00 00 00       	mov    eax,0x2
c0013380:	85 db                	test   ebx,ebx
c0013382:	74 31                	je     c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013389:	53                   	push   ebx
c001338a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	b8 02 00 00 00       	mov    eax,0x2
c0013395:	eb 1e                	jmp    c00133b5 <Fs::setcwd(Process*, char*)+0x130>
c0013397:	85 db                	test   ebx,ebx
c0013399:	74 0c                	je     c00133a7 <Fs::setcwd(Process*, char*)+0x122>
c001339b:	83 ec 0c             	sub    esp,0xc
c001339e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133a0:	53                   	push   ebx
c00133a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133a4:	83 c4 10             	add    esp,0x10
c00133a7:	50                   	push   eax
c00133a8:	50                   	push   eax
c00133a9:	56                   	push   esi
c00133aa:	57                   	push   edi
c00133ab:	e8 5c d4 fe ff       	call   c000080c <strcpy>
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	31 c0                	xor    eax,eax
c00133b5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00133bb:	5b                   	pop    ebx
c00133bc:	5e                   	pop    esi
c00133bd:	5f                   	pop    edi
c00133be:	5d                   	pop    ebp
c00133bf:	c3                   	ret    

c00133c0 <Directory::Directory(char const*, Process*)>:
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c7:	83 ec 08             	sub    esp,0x8
c00133ca:	6a 00                	push   0x0
c00133cc:	50                   	push   eax
c00133cd:	e8 ce dd ff ff       	call   c00111a0 <UnixFile::UnixFile(int)>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	ba 70 b1 02 c0       	mov    edx,0xc002b170
c00133da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133de:	89 10                	mov    DWORD PTR [eax],edx
c00133e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133e4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ee:	83 c0 0d             	add    eax,0xd
c00133f1:	83 ec 04             	sub    esp,0x4
c00133f4:	52                   	push   edx
c00133f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133f9:	50                   	push   eax
c00133fa:	e8 6b f9 ff ff       	call   c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013409:	8d 50 bf             	lea    edx,[eax-0x41]
c001340c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013410:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001341e:	90                   	nop
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <Directory::open()>:
c0013424:	53                   	push   ebx
c0013425:	b8 0b 00 00 00       	mov    eax,0xb
c001342a:	83 ec 08             	sub    esp,0x8
c001342d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013431:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013438:	80 fa 19             	cmp    dl,0x19
c001343b:	77 3d                	ja     c001347a <Directory::open()+0x56>
c001343d:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013444:	85 d2                	test   edx,edx
c0013446:	74 32                	je     c001347a <Directory::open()+0x56>
c0013448:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001344e:	85 d2                	test   edx,edx
c0013450:	74 28                	je     c001347a <Directory::open()+0x56>
c0013452:	b8 06 00 00 00       	mov    eax,0x6
c0013457:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001345b:	75 1d                	jne    c001347a <Directory::open()+0x56>
c001345d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013463:	50                   	push   eax
c0013464:	8b 02                	mov    eax,DWORD PTR [edx]
c0013466:	51                   	push   ecx
c0013467:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001346a:	51                   	push   ecx
c001346b:	52                   	push   edx
c001346c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	85 c0                	test   eax,eax
c0013474:	75 04                	jne    c001347a <Directory::open()+0x56>
c0013476:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001347a:	83 c4 08             	add    esp,0x8
c001347d:	5b                   	pop    ebx
c001347e:	c3                   	ret    
c001347f:	90                   	nop

c0013480 <Directory::close()>:
c0013480:	53                   	push   ebx
c0013481:	b8 0b 00 00 00       	mov    eax,0xb
c0013486:	83 ec 08             	sub    esp,0x8
c0013489:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001348d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013494:	80 fa 19             	cmp    dl,0x19
c0013497:	77 41                	ja     c00134da <Directory::close()+0x5a>
c0013499:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c00134a0:	85 db                	test   ebx,ebx
c00134a2:	74 36                	je     c00134da <Directory::close()+0x5a>
c00134a4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134ab:	74 2d                	je     c00134da <Directory::close()+0x5a>
c00134ad:	b8 05 00 00 00       	mov    eax,0x5
c00134b2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134b6:	74 22                	je     c00134da <Directory::close()+0x5a>
c00134b8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134bc:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c00134c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134c9:	53                   	push   ebx
c00134ca:	53                   	push   ebx
c00134cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00134cd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134d3:	50                   	push   eax
c00134d4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00134d7:	83 c4 10             	add    esp,0x10
c00134da:	83 c4 08             	add    esp,0x8
c00134dd:	5b                   	pop    ebx
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Directory::unlink()>:
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	b8 0b 00 00 00       	mov    eax,0xb
c00134e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134f3:	80 f9 19             	cmp    cl,0x19
c00134f6:	77 2f                	ja     c0013527 <Directory::unlink()+0x47>
c00134f8:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00134ff:	85 c9                	test   ecx,ecx
c0013501:	74 24                	je     c0013527 <Directory::unlink()+0x47>
c0013503:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013509:	85 c9                	test   ecx,ecx
c001350b:	74 1a                	je     c0013527 <Directory::unlink()+0x47>
c001350d:	b8 06 00 00 00       	mov    eax,0x6
c0013512:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013516:	75 0f                	jne    c0013527 <Directory::unlink()+0x47>
c0013518:	83 c2 0d             	add    edx,0xd
c001351b:	50                   	push   eax
c001351c:	50                   	push   eax
c001351d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001351f:	52                   	push   edx
c0013520:	51                   	push   ecx
c0013521:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	83 c4 0c             	add    esp,0xc
c001352a:	c3                   	ret    
c001352b:	90                   	nop

c001352c <Directory::rename(char const*)>:
c001352c:	83 ec 0c             	sub    esp,0xc
c001352f:	b8 0b 00 00 00       	mov    eax,0xb
c0013534:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013538:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001353f:	80 f9 19             	cmp    cl,0x19
c0013542:	77 32                	ja     c0013576 <Directory::rename(char const*)+0x4a>
c0013544:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001354b:	85 c9                	test   ecx,ecx
c001354d:	74 27                	je     c0013576 <Directory::rename(char const*)+0x4a>
c001354f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013555:	85 c9                	test   ecx,ecx
c0013557:	74 1d                	je     c0013576 <Directory::rename(char const*)+0x4a>
c0013559:	b8 06 00 00 00       	mov    eax,0x6
c001355e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013562:	75 12                	jne    c0013576 <Directory::rename(char const*)+0x4a>
c0013564:	83 c2 0d             	add    edx,0xd
c0013567:	50                   	push   eax
c0013568:	8b 01                	mov    eax,DWORD PTR [ecx]
c001356a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001356e:	52                   	push   edx
c001356f:	51                   	push   ecx
c0013570:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	83 c4 0c             	add    esp,0xc
c0013579:	c3                   	ret    

c001357a <Directory::exists()>:
c001357a:	83 ec 0c             	sub    esp,0xc
c001357d:	31 c0                	xor    eax,eax
c001357f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013583:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001358a:	80 f9 19             	cmp    cl,0x19
c001358d:	77 24                	ja     c00135b3 <Directory::exists()+0x39>
c001358f:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013596:	85 c9                	test   ecx,ecx
c0013598:	74 19                	je     c00135b3 <Directory::exists()+0x39>
c001359a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135a0:	85 c9                	test   ecx,ecx
c00135a2:	74 0f                	je     c00135b3 <Directory::exists()+0x39>
c00135a4:	83 c2 0d             	add    edx,0xd
c00135a7:	50                   	push   eax
c00135a8:	50                   	push   eax
c00135a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ab:	52                   	push   edx
c00135ac:	51                   	push   ecx
c00135ad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	83 c4 0c             	add    esp,0xc
c00135b6:	c3                   	ret    
c00135b7:	90                   	nop

c00135b8 <Directory::read(dirent*)>:
c00135b8:	83 ec 1c             	sub    esp,0x1c
c00135bb:	b8 0b 00 00 00       	mov    eax,0xb
c00135c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00135c4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135cb:	80 fa 19             	cmp    dl,0x19
c00135ce:	77 30                	ja     c0013600 <Directory::read(dirent*)+0x48>
c00135d0:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00135d7:	85 d2                	test   edx,edx
c00135d9:	74 25                	je     c0013600 <Directory::read(dirent*)+0x48>
c00135db:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00135e2:	74 1c                	je     c0013600 <Directory::read(dirent*)+0x48>
c00135e4:	83 ec 0c             	sub    esp,0xc
c00135e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135ed:	52                   	push   edx
c00135ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135f2:	6a 00                	push   0x0
c00135f4:	68 10 01 00 00       	push   0x110
c00135f9:	51                   	push   ecx
c00135fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135fd:	83 c4 20             	add    esp,0x20
c0013600:	83 c4 1c             	add    esp,0x1c
c0013603:	c3                   	ret    

c0013604 <Directory::create()>:
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	b8 0b 00 00 00       	mov    eax,0xb
c001360c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013610:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013617:	80 f9 19             	cmp    cl,0x19
c001361a:	77 2f                	ja     c001364b <Directory::create()+0x47>
c001361c:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013623:	85 c9                	test   ecx,ecx
c0013625:	74 24                	je     c001364b <Directory::create()+0x47>
c0013627:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001362d:	85 c9                	test   ecx,ecx
c001362f:	74 1a                	je     c001364b <Directory::create()+0x47>
c0013631:	b8 06 00 00 00       	mov    eax,0x6
c0013636:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363a:	75 0f                	jne    c001364b <Directory::create()+0x47>
c001363c:	83 c2 0d             	add    edx,0xd
c001363f:	50                   	push   eax
c0013640:	50                   	push   eax
c0013641:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013643:	52                   	push   edx
c0013644:	51                   	push   ecx
c0013645:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013648:	83 c4 10             	add    esp,0x10
c001364b:	83 c4 0c             	add    esp,0xc
c001364e:	c3                   	ret    
c001364f:	90                   	nop

c0013650 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013650:	b8 0a 00 00 00       	mov    eax,0xa
c0013655:	c3                   	ret    

c0013656 <Bus::Bus(char const*)>:
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365d:	83 ec 08             	sub    esp,0x8
c0013660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013664:	50                   	push   eax
c0013665:	e8 88 09 00 00       	call   c0013ff2 <Device::Device(char const*)>
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c0013672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013676:	89 10                	mov    DWORD PTR [eax],edx
c0013678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001367c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013686:	90                   	nop
c0013687:	83 c4 0c             	add    esp,0xc
c001368a:	c3                   	ret    
c001368b:	90                   	nop

c001368c <Bus::~Bus()>:
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c0013694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013698:	89 10                	mov    DWORD PTR [eax],edx
c001369a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001369e:	83 ec 0c             	sub    esp,0xc
c00136a1:	50                   	push   eax
c00136a2:	e8 15 06 00 00       	call   c0013cbc <Device::~Device()>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	90                   	nop
c00136ab:	83 c4 0c             	add    esp,0xc
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <Bus::~Bus()>:
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	83 ec 0c             	sub    esp,0xc
c00136b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ba:	e8 cd ff ff ff       	call   c001368c <Bus::~Bus()>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	83 ec 08             	sub    esp,0x8
c00136c5:	68 58 01 00 00       	push   0x158
c00136ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ce:	e8 0a f2 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	83 c4 0c             	add    esp,0xc
c00136d9:	c3                   	ret    

c00136da <Buzzer::Buzzer(char const*)>:
c00136da:	83 ec 0c             	sub    esp,0xc
c00136dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e1:	83 ec 08             	sub    esp,0x8
c00136e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136e8:	50                   	push   eax
c00136e9:	e8 04 09 00 00       	call   c0013ff2 <Device::Device(char const*)>
c00136ee:	83 c4 10             	add    esp,0x10
c00136f1:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00136f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fa:	89 10                	mov    DWORD PTR [eax],edx
c00136fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013700:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001370a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013718:	90                   	nop
c0013719:	83 c4 0c             	add    esp,0xc
c001371c:	c3                   	ret    
c001371d:	90                   	nop

c001371e <Buzzer::~Buzzer()>:
c001371e:	83 ec 0c             	sub    esp,0xc
c0013721:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c0013726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372a:	89 10                	mov    DWORD PTR [eax],edx
c001372c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013730:	83 ec 0c             	sub    esp,0xc
c0013733:	50                   	push   eax
c0013734:	e8 83 05 00 00       	call   c0013cbc <Device::~Device()>
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	90                   	nop
c001373d:	83 c4 0c             	add    esp,0xc
c0013740:	c3                   	ret    
c0013741:	90                   	nop

c0013742 <Buzzer::~Buzzer()>:
c0013742:	83 ec 0c             	sub    esp,0xc
c0013745:	83 ec 0c             	sub    esp,0xc
c0013748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001374c:	e8 cd ff ff ff       	call   c001371e <Buzzer::~Buzzer()>
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	83 ec 08             	sub    esp,0x8
c0013757:	68 5c 01 00 00       	push   0x15c
c001375c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013760:	e8 78 f1 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	83 c4 0c             	add    esp,0xc
c001376b:	c3                   	ret    

c001376c <Buzzer::stop()>:
c001376c:	83 ec 14             	sub    esp,0x14
c001376f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013773:	8b 10                	mov    edx,DWORD PTR [eax]
c0013775:	6a 00                	push   0x0
c0013777:	50                   	push   eax
c0013778:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001377b:	83 c4 1c             	add    esp,0x1c
c001377e:	c3                   	ret    

c001377f <beepThread(void*)>:
c001377f:	53                   	push   ebx
c0013780:	83 ec 08             	sub    esp,0x8
c0013783:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0013788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001378c:	48                   	dec    eax
c001378d:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0013792:	75 01                	jne    c0013795 <beepThread(void*)+0x16>
c0013794:	fb                   	sti    
c0013795:	50                   	push   eax
c0013796:	50                   	push   eax
c0013797:	b8 40 42 0f 00       	mov    eax,0xf4240
c001379c:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00137a2:	52                   	push   edx
c00137a3:	50                   	push   eax
c00137a4:	e8 16 aa 00 00       	call   c001e1bf <nanoSleep(unsigned long long)>
c00137a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137ac:	e8 bb ff ff ff       	call   c001376c <Buzzer::stop()>
c00137b1:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00137b9:	83 c4 18             	add    esp,0x18
c00137bc:	5b                   	pop    ebx
c00137bd:	e9 f9 a8 00 00       	jmp    c001e0bb <blockTask(TaskState)>

c00137c2 <Buzzer::beep(int, int, bool)>:
c00137c2:	57                   	push   edi
c00137c3:	56                   	push   esi
c00137c4:	53                   	push   ebx
c00137c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137d1:	52                   	push   edx
c00137d2:	52                   	push   edx
c00137d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00137d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d9:	56                   	push   esi
c00137da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00137dd:	83 c4 10             	add    esp,0x10
c00137e0:	89 f8                	mov    eax,edi
c00137e2:	84 c0                	test   al,al
c00137e4:	74 1f                	je     c0013805 <Buzzer::beep(int, int, bool)+0x43>
c00137e6:	50                   	push   eax
c00137e7:	50                   	push   eax
c00137e8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00137ee:	99                   	cdq    
c00137ef:	52                   	push   edx
c00137f0:	50                   	push   eax
c00137f1:	e8 c9 a9 00 00       	call   c001e1bf <nanoSleep(unsigned long long)>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137fd:	5b                   	pop    ebx
c00137fe:	5e                   	pop    esi
c00137ff:	5f                   	pop    edi
c0013800:	e9 67 ff ff ff       	jmp    c001376c <Buzzer::stop()>
c0013805:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001380b:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0013810:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013818:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001381c:	c7 44 24 14 7f 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc001377f
c0013824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013828:	5b                   	pop    ebx
c0013829:	5e                   	pop    esi
c001382a:	5f                   	pop    edi
c001382b:	e9 90 a4 00 00       	jmp    c001dcc0 <Process::createThread(void (*)(void*), void*, int)>

c0013830 <User::loadClockSettings(int)>:
c0013830:	53                   	push   ebx
c0013831:	83 ec 14             	sub    esp,0x14
c0013834:	68 14 01 00 00       	push   0x114
c0013839:	e8 1f c1 ff ff       	call   c000f95d <malloc>
c001383e:	83 c4 0c             	add    esp,0xc
c0013841:	89 c3                	mov    ebx,eax
c0013843:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c0013849:	68 e0 b1 02 c0       	push   0xc002b1e0
c001384e:	50                   	push   eax
c001384f:	e8 c0 f6 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0013854:	58                   	pop    eax
c0013855:	5a                   	pop    edx
c0013856:	6a 01                	push   0x1
c0013858:	53                   	push   ebx
c0013859:	e8 1a f7 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001385e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013861:	e8 70 f7 ff ff       	call   c0012fd6 <File::close()>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	85 db                	test   ebx,ebx
c001386b:	74 0f                	je     c001387c <User::loadClockSettings(int)+0x4c>
c001386d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013873:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013876:	83 c4 08             	add    esp,0x8
c0013879:	5b                   	pop    ebx
c001387a:	ff e0                	jmp    eax
c001387c:	83 c4 08             	add    esp,0x8
c001387f:	5b                   	pop    ebx
c0013880:	c3                   	ret    
c0013881:	90                   	nop

c0013882 <Clock::Clock(char const*)>:
c0013882:	83 ec 0c             	sub    esp,0xc
c0013885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013889:	83 ec 08             	sub    esp,0x8
c001388c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013890:	50                   	push   eax
c0013891:	e8 5c 07 00 00       	call   c0013ff2 <Device::Device(char const*)>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	ba 08 b2 02 c0       	mov    edx,0xc002b208
c001389e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a2:	89 10                	mov    DWORD PTR [eax],edx
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00138b2:	90                   	nop
c00138b3:	83 c4 0c             	add    esp,0xc
c00138b6:	c3                   	ret    
c00138b7:	90                   	nop

c00138b8 <Clock::~Clock()>:
c00138b8:	83 ec 0c             	sub    esp,0xc
c00138bb:	ba 08 b2 02 c0       	mov    edx,0xc002b208
c00138c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c4:	89 10                	mov    DWORD PTR [eax],edx
c00138c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ca:	83 ec 0c             	sub    esp,0xc
c00138cd:	50                   	push   eax
c00138ce:	e8 e9 03 00 00       	call   c0013cbc <Device::~Device()>
c00138d3:	83 c4 10             	add    esp,0x10
c00138d6:	90                   	nop
c00138d7:	83 c4 0c             	add    esp,0xc
c00138da:	c3                   	ret    
c00138db:	90                   	nop

c00138dc <Clock::~Clock()>:
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	83 ec 0c             	sub    esp,0xc
c00138e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e6:	e8 cd ff ff ff       	call   c00138b8 <Clock::~Clock()>
c00138eb:	83 c4 10             	add    esp,0x10
c00138ee:	83 ec 08             	sub    esp,0x8
c00138f1:	68 58 01 00 00       	push   0x158
c00138f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138fa:	e8 de ef ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00138ff:	83 c4 10             	add    esp,0x10
c0013902:	83 c4 0c             	add    esp,0xc
c0013905:	c3                   	ret    

c0013906 <Clock::timeInSecondsLocal()>:
c0013906:	53                   	push   ebx
c0013907:	83 ec 14             	sub    esp,0x14
c001390a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001390e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013910:	50                   	push   eax
c0013911:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013914:	0f b6 0d 3c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e73c
c001391b:	03 0d 40 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e740
c0013921:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013927:	89 cb                	mov    ebx,ecx
c0013929:	c1 fb 1f             	sar    ebx,0x1f
c001392c:	01 c8                	add    eax,ecx
c001392e:	11 da                	adc    edx,ebx
c0013930:	83 c4 10             	add    esp,0x10
c0013933:	31 c9                	xor    ecx,ecx
c0013935:	80 3d 3d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e73d,0x0
c001393c:	74 05                	je     c0013943 <Clock::timeInSecondsLocal()+0x3d>
c001393e:	b9 08 07 00 00       	mov    ecx,0x708
c0013943:	31 db                	xor    ebx,ebx
c0013945:	01 c8                	add    eax,ecx
c0013947:	11 da                	adc    edx,ebx
c0013949:	83 c4 08             	add    esp,0x8
c001394c:	5b                   	pop    ebx
c001394d:	c3                   	ret    

c001394e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001394e:	57                   	push   edi
c001394f:	56                   	push   esi
c0013950:	53                   	push   ebx
c0013951:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013959:	8b 01                	mov    eax,DWORD PTR [ecx]
c001395b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001395f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013962:	0f b6 05 3c e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e73c
c0013969:	03 05 40 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e740
c001396f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013975:	99                   	cdq    
c0013976:	29 c6                	sub    esi,eax
c0013978:	19 d7                	sbb    edi,edx
c001397a:	89 f0                	mov    eax,esi
c001397c:	89 fa                	mov    edx,edi
c001397e:	31 f6                	xor    esi,esi
c0013980:	80 3d 3d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e73d,0x0
c0013987:	74 05                	je     c001398e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013989:	be 08 07 00 00       	mov    esi,0x708
c001398e:	31 ff                	xor    edi,edi
c0013990:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013994:	29 f0                	sub    eax,esi
c0013996:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001399a:	19 fa                	sbb    edx,edi
c001399c:	89 d8                	mov    eax,ebx
c001399e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139a2:	5b                   	pop    ebx
c00139a3:	5e                   	pop    esi
c00139a4:	5f                   	pop    edi
c00139a5:	ff e0                	jmp    eax

c00139a7 <datetimeToSeconds(datetime_t)>:
c00139a7:	55                   	push   ebp
c00139a8:	57                   	push   edi
c00139a9:	56                   	push   esi
c00139aa:	53                   	push   ebx
c00139ab:	83 ec 14             	sub    esp,0x14
c00139ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00139b2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00139b6:	89 d3                	mov    ebx,edx
c00139b8:	0f b6 c6             	movzx  eax,dh
c00139bb:	c1 eb 10             	shr    ebx,0x10
c00139be:	48                   	dec    eax
c00139bf:	66 81 eb 6c 07       	sub    bx,0x76c
c00139c4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00139c8:	0f b6 f5             	movzx  esi,ch
c00139cb:	89 cf                	mov    edi,ecx
c00139cd:	6b f6 3c             	imul   esi,esi,0x3c
c00139d0:	c1 ef 10             	shr    edi,0x10
c00139d3:	0f b6 c9             	movzx  ecx,cl
c00139d6:	89 f8                	mov    eax,edi
c00139d8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139de:	0f b6 f8             	movzx  edi,al
c00139e1:	0f b6 d2             	movzx  edx,dl
c00139e4:	01 fe                	add    esi,edi
c00139e6:	01 f1                	add    ecx,esi
c00139e8:	0f b7 f3             	movzx  esi,bx
c00139eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00139ef:	c1 f9 1f             	sar    ecx,0x1f
c00139f2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00139f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00139fb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a00:	8b 0c 8d 40 b2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4dc0]
c0013a07:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a0b:	76 29                	jbe    c0013a36 <datetimeToSeconds(datetime_t)+0x8f>
c0013a0d:	f6 c3 03             	test   bl,0x3
c0013a10:	75 24                	jne    c0013a36 <datetimeToSeconds(datetime_t)+0x8f>
c0013a12:	31 d2                	xor    edx,edx
c0013a14:	bf 64 00 00 00       	mov    edi,0x64
c0013a19:	89 d8                	mov    eax,ebx
c0013a1b:	66 f7 f7             	div    di
c0013a1e:	66 85 d2             	test   dx,dx
c0013a21:	75 12                	jne    c0013a35 <datetimeToSeconds(datetime_t)+0x8e>
c0013a23:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013a29:	bf 90 01 00 00       	mov    edi,0x190
c0013a2e:	99                   	cdq    
c0013a2f:	f7 ff                	idiv   edi
c0013a31:	85 d2                	test   edx,edx
c0013a33:	75 01                	jne    c0013a36 <datetimeToSeconds(datetime_t)+0x8f>
c0013a35:	41                   	inc    ecx
c0013a36:	66 83 fb 46          	cmp    bx,0x46
c0013a3a:	76 45                	jbe    c0013a81 <datetimeToSeconds(datetime_t)+0xda>
c0013a3c:	bb 46 00 00 00       	mov    ebx,0x46
c0013a41:	bf 64 00 00 00       	mov    edi,0x64
c0013a46:	bd 90 01 00 00       	mov    ebp,0x190
c0013a4b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a50:	f6 c3 03             	test   bl,0x3
c0013a53:	75 23                	jne    c0013a78 <datetimeToSeconds(datetime_t)+0xd1>
c0013a55:	89 d8                	mov    eax,ebx
c0013a57:	99                   	cdq    
c0013a58:	f7 ff                	idiv   edi
c0013a5a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013a5f:	85 d2                	test   edx,edx
c0013a61:	75 15                	jne    c0013a78 <datetimeToSeconds(datetime_t)+0xd1>
c0013a63:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013a69:	99                   	cdq    
c0013a6a:	f7 fd                	idiv   ebp
c0013a6c:	83 fa 01             	cmp    edx,0x1
c0013a6f:	19 c0                	sbb    eax,eax
c0013a71:	f7 d0                	not    eax
c0013a73:	05 6e 01 00 00       	add    eax,0x16e
c0013a78:	01 c1                	add    ecx,eax
c0013a7a:	43                   	inc    ebx
c0013a7b:	39 f3                	cmp    ebx,esi
c0013a7d:	7c cc                	jl     c0013a4b <datetimeToSeconds(datetime_t)+0xa4>
c0013a7f:	eb 35                	jmp    c0013ab6 <datetimeToSeconds(datetime_t)+0x10f>
c0013a81:	74 33                	je     c0013ab6 <datetimeToSeconds(datetime_t)+0x10f>
c0013a83:	b8 45 00 00 00       	mov    eax,0x45
c0013a88:	89 c2                	mov    edx,eax
c0013a8a:	83 e2 03             	and    edx,0x3
c0013a8d:	39 f0                	cmp    eax,esi
c0013a8f:	7e 0f                	jle    c0013aa0 <datetimeToSeconds(datetime_t)+0xf9>
c0013a91:	83 fa 01             	cmp    edx,0x1
c0013a94:	19 d2                	sbb    edx,edx
c0013a96:	48                   	dec    eax
c0013a97:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013a9e:	eb e8                	jmp    c0013a88 <datetimeToSeconds(datetime_t)+0xe1>
c0013aa0:	b8 6d 01 00 00       	mov    eax,0x16d
c0013aa5:	85 d2                	test   edx,edx
c0013aa7:	75 0b                	jne    c0013ab4 <datetimeToSeconds(datetime_t)+0x10d>
c0013aa9:	66 83 fb 01          	cmp    bx,0x1
c0013aad:	19 c0                	sbb    eax,eax
c0013aaf:	05 6e 01 00 00       	add    eax,0x16e
c0013ab4:	29 c1                	sub    ecx,eax
c0013ab6:	b8 80 51 01 00       	mov    eax,0x15180
c0013abb:	f7 e9                	imul   ecx
c0013abd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ac1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ac5:	83 c4 14             	add    esp,0x14
c0013ac8:	5b                   	pop    ebx
c0013ac9:	5e                   	pop    esi
c0013aca:	5f                   	pop    edi
c0013acb:	5d                   	pop    ebp
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ace:	57                   	push   edi
c0013acf:	56                   	push   esi
c0013ad0:	53                   	push   ebx
c0013ad1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ad5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ad7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ade:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae2:	e8 c0 fe ff ff       	call   c00139a7 <datetimeToSeconds(datetime_t)>
c0013ae7:	59                   	pop    ecx
c0013ae8:	0f b6 0d 3c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e73c
c0013aef:	5b                   	pop    ebx
c0013af0:	03 0d 40 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e740
c0013af6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013afc:	89 cb                	mov    ebx,ecx
c0013afe:	c1 fb 1f             	sar    ebx,0x1f
c0013b01:	29 c8                	sub    eax,ecx
c0013b03:	19 da                	sbb    edx,ebx
c0013b05:	31 c9                	xor    ecx,ecx
c0013b07:	80 3d 3d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e73d,0x0
c0013b0e:	74 05                	je     c0013b15 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b10:	b9 08 07 00 00       	mov    ecx,0x708
c0013b15:	31 db                	xor    ebx,ebx
c0013b17:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013b1b:	29 c8                	sub    eax,ecx
c0013b1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b21:	19 da                	sbb    edx,ebx
c0013b23:	89 f8                	mov    eax,edi
c0013b25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b29:	5b                   	pop    ebx
c0013b2a:	5e                   	pop    esi
c0013b2b:	5f                   	pop    edi
c0013b2c:	ff e0                	jmp    eax

c0013b2e <secondsToDatetime(unsigned long long)>:
c0013b2e:	55                   	push   ebp
c0013b2f:	57                   	push   edi
c0013b30:	56                   	push   esi
c0013b31:	53                   	push   ebx
c0013b32:	83 ec 1c             	sub    esp,0x1c
c0013b35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013b3d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013b41:	6a 00                	push   0x0
c0013b43:	68 80 51 01 00       	push   0x15180
c0013b48:	55                   	push   ebp
c0013b49:	57                   	push   edi
c0013b4a:	e8 35 32 01 00       	call   c0026d84 <__udivdi3>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013b58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b5c:	6a 00                	push   0x0
c0013b5e:	68 80 51 01 00       	push   0x15180
c0013b63:	55                   	push   ebp
c0013b64:	57                   	push   edi
c0013b65:	bf 10 0e 00 00       	mov    edi,0xe10
c0013b6a:	e8 15 33 01 00       	call   c0026e84 <__umoddi3>
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	99                   	cdq    
c0013b73:	f7 ff                	idiv   edi
c0013b75:	bf 3c 00 00 00       	mov    edi,0x3c
c0013b7a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013b7d:	89 d0                	mov    eax,edx
c0013b7f:	99                   	cdq    
c0013b80:	f7 ff                	idiv   edi
c0013b82:	85 db                	test   ebx,ebx
c0013b84:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013b87:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013b8a:	79 11                	jns    c0013b9d <secondsToDatetime(unsigned long long)+0x6f>
c0013b8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b90:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013b96:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013b9b:	eb 07                	jmp    c0013ba4 <secondsToDatetime(unsigned long long)+0x76>
c0013b9d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ba2:	89 d8                	mov    eax,ebx
c0013ba4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ba9:	99                   	cdq    
c0013baa:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013baf:	f7 f9                	idiv   ecx
c0013bb1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013bb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013bba:	31 d2                	xor    edx,edx
c0013bbc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013bc4:	01 c3                	add    ebx,eax
c0013bc6:	89 d8                	mov    eax,ebx
c0013bc8:	f7 f1                	div    ecx
c0013bca:	31 d2                	xor    edx,edx
c0013bcc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013bcf:	89 d8                	mov    eax,ebx
c0013bd1:	f7 f7                	div    edi
c0013bd3:	31 d2                	xor    edx,edx
c0013bd5:	29 c1                	sub    ecx,eax
c0013bd7:	89 d8                	mov    eax,ebx
c0013bd9:	f7 f5                	div    ebp
c0013bdb:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013be0:	29 c1                	sub    ecx,eax
c0013be2:	31 d2                	xor    edx,edx
c0013be4:	89 c8                	mov    eax,ecx
c0013be6:	f7 f5                	div    ebp
c0013be8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013bed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bf1:	31 d2                	xor    edx,edx
c0013bf3:	89 c8                	mov    eax,ecx
c0013bf5:	f7 f5                	div    ebp
c0013bf7:	31 d2                	xor    edx,edx
c0013bf9:	01 c3                	add    ebx,eax
c0013bfb:	89 c8                	mov    eax,ecx
c0013bfd:	f7 f7                	div    edi
c0013bff:	bf 99 00 00 00       	mov    edi,0x99
c0013c04:	29 c3                	sub    ebx,eax
c0013c06:	31 d2                	xor    edx,edx
c0013c08:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c10:	29 c3                	sub    ebx,eax
c0013c12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c15:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c18:	bb 05 00 00 00       	mov    ebx,0x5
c0013c1d:	83 c1 02             	add    ecx,0x2
c0013c20:	89 c8                	mov    eax,ecx
c0013c22:	f7 f7                	div    edi
c0013c24:	31 d2                	xor    edx,edx
c0013c26:	89 c7                	mov    edi,eax
c0013c28:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013c2e:	83 c0 02             	add    eax,0x2
c0013c31:	f7 f3                	div    ebx
c0013c33:	89 eb                	mov    ebx,ebp
c0013c35:	29 c3                	sub    ebx,eax
c0013c37:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013c3d:	88 1e                	mov    BYTE PTR [esi],bl
c0013c3f:	19 c0                	sbb    eax,eax
c0013c41:	31 d2                	xor    edx,edx
c0013c43:	83 e0 0c             	and    eax,0xc
c0013c46:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013c4a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013c52:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013c56:	83 f9 01             	cmp    ecx,0x1
c0013c59:	0f 96 c2             	setbe  dl
c0013c5c:	41                   	inc    ecx
c0013c5d:	01 d0                	add    eax,edx
c0013c5f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013c62:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013c66:	83 c4 1c             	add    esp,0x1c
c0013c69:	89 f0                	mov    eax,esi
c0013c6b:	5b                   	pop    ebx
c0013c6c:	5e                   	pop    esi
c0013c6d:	5f                   	pop    edi
c0013c6e:	5d                   	pop    ebp
c0013c6f:	c2 04 00             	ret    0x4

c0013c72 <Clock::timeInDatetimeLocal()>:
c0013c72:	53                   	push   ebx
c0013c73:	83 ec 14             	sub    esp,0x14
c0013c76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c7e:	e8 83 fc ff ff       	call   c0013906 <Clock::timeInSecondsLocal()>
c0013c83:	83 c4 0c             	add    esp,0xc
c0013c86:	52                   	push   edx
c0013c87:	50                   	push   eax
c0013c88:	53                   	push   ebx
c0013c89:	e8 a0 fe ff ff       	call   c0013b2e <secondsToDatetime(unsigned long long)>
c0013c8e:	89 d8                	mov    eax,ebx
c0013c90:	83 c4 14             	add    esp,0x14
c0013c93:	5b                   	pop    ebx
c0013c94:	c2 04 00             	ret    0x4
c0013c97:	90                   	nop

c0013c98 <Device::hibernate()>:
c0013c98:	c3                   	ret    
c0013c99:	90                   	nop

c0013c9a <Device::wake()>:
c0013c9a:	c3                   	ret    
c0013c9b:	90                   	nop

c0013c9c <Device::detect()>:
c0013c9c:	c3                   	ret    
c0013c9d:	90                   	nop

c0013c9e <Device::disableLegacy()>:
c0013c9e:	c3                   	ret    
c0013c9f:	90                   	nop

c0013ca0 <Device::powerSaving(PowerSavingLevel)>:
c0013ca0:	c3                   	ret    
c0013ca1:	90                   	nop

c0013ca2 <DriverlessDevice::close(int, int, void*)>:
c0013ca2:	31 c0                	xor    eax,eax
c0013ca4:	c3                   	ret    
c0013ca5:	90                   	nop

c0013ca6 <DriverlessDevice::detect()>:
c0013ca6:	c3                   	ret    
c0013ca7:	90                   	nop

c0013ca8 <DriverlessDevice::open(int, int, void*)>:
c0013ca8:	83 ec 18             	sub    esp,0x18
c0013cab:	68 70 b2 02 c0       	push   0xc002b270
c0013cb0:	e8 9e 66 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0013cb5:	83 c8 ff             	or     eax,0xffffffff
c0013cb8:	83 c4 1c             	add    esp,0x1c
c0013cbb:	c3                   	ret    

c0013cbc <Device::~Device()>:
c0013cbc:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c0013cc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc5:	89 10                	mov    DWORD PTR [eax],edx
c0013cc7:	90                   	nop
c0013cc8:	c3                   	ret    
c0013cc9:	90                   	nop

c0013cca <Device::~Device()>:
c0013cca:	83 ec 0c             	sub    esp,0xc
c0013ccd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cd1:	e8 e6 ff ff ff       	call   c0013cbc <Device::~Device()>
c0013cd6:	83 c4 04             	add    esp,0x4
c0013cd9:	83 ec 08             	sub    esp,0x8
c0013cdc:	68 58 01 00 00       	push   0x158
c0013ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce5:	e8 f3 eb ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	83 c4 0c             	add    esp,0xc
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <Device::findAndLoadDriver()>:
c0013cf2:	c7 44 24 04 8e b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b28e
c0013cfa:	e9 b6 ec ff ff       	jmp    c00129b5 <Dbg::kprintf(char const*, ...)>
c0013cff:	90                   	nop

c0013d00 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d00:	57                   	push   edi
c0013d01:	b9 09 00 00 00       	mov    ecx,0x9
c0013d06:	56                   	push   esi
c0013d07:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d0b:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d0f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d19:	81 c7 18 01 00 00    	add    edi,0x118
c0013d1f:	fc                   	cld    
c0013d20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d22:	5e                   	pop    esi
c0013d23:	5f                   	pop    edi
c0013d24:	c3                   	ret    
c0013d25:	90                   	nop

c0013d26 <Device::preOpenACPI(void*, char*, char*)>:
c0013d26:	57                   	push   edi
c0013d27:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013d2c:	56                   	push   esi
c0013d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d35:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013d3f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013d45:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013d4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d51:	b9 0e 00 00 00       	mov    ecx,0xe
c0013d56:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013d5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d62:	5e                   	pop    esi
c0013d63:	5f                   	pop    edi
c0013d64:	c3                   	ret    
c0013d65:	90                   	nop

c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d6f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d76:	75 0b                	jne    c0013d83 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d7e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013d81:	eb 1e                	jmp    c0013da1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013d83:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0013d88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d8e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d9e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013da1:	ff e0                	jmp    eax
c0013da3:	90                   	nop

c0013da4 <Device::getParent()>:
c0013da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013da8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013dae:	c3                   	ret    
c0013daf:	90                   	nop

c0013db0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013db9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013dc0:	75 0b                	jne    c0013dcd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dc4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dc8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013dcb:	eb 1e                	jmp    c0013deb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013dcd:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0013dd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013dd8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013dde:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013de0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013de4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013de8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013deb:	ff e0                	jmp    eax
c0013ded:	90                   	nop

c0013dee <Device::addChild(Device*)>:
c0013dee:	53                   	push   ebx
c0013def:	83 ec 08             	sub    esp,0x8
c0013df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013df6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dfa:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e00:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e08:	85 d2                	test   edx,edx
c0013e0a:	74 04                	je     c0013e10 <Device::addChild(Device*)+0x22>
c0013e0c:	89 d3                	mov    ebx,edx
c0013e0e:	eb f6                	jmp    c0013e06 <Device::addChild(Device*)+0x18>
c0013e10:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e13:	83 ec 0c             	sub    esp,0xc
c0013e16:	6a 08                	push   0x8
c0013e18:	e8 40 bb ff ff       	call   c000f95d <malloc>
c0013e1d:	89 03                	mov    DWORD PTR [ebx],eax
c0013e1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e2c:	83 c4 18             	add    esp,0x18
c0013e2f:	5b                   	pop    ebx
c0013e30:	c3                   	ret    
c0013e31:	90                   	nop

c0013e32 <Device::removeAllChildren()>:
c0013e32:	56                   	push   esi
c0013e33:	53                   	push   ebx
c0013e34:	52                   	push   edx
c0013e35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e39:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013e3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e42:	74 17                	je     c0013e5b <Device::removeAllChildren()+0x29>
c0013e44:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013e47:	85 c0                	test   eax,eax
c0013e49:	74 0c                	je     c0013e57 <Device::removeAllChildren()+0x25>
c0013e4b:	83 ec 0c             	sub    esp,0xc
c0013e4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e50:	50                   	push   eax
c0013e51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013e54:	83 c4 10             	add    esp,0x10
c0013e57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e59:	eb e4                	jmp    c0013e3f <Device::removeAllChildren()+0xd>
c0013e5b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e67:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e74:	58                   	pop    eax
c0013e75:	5b                   	pop    ebx
c0013e76:	5e                   	pop    esi
c0013e77:	c3                   	ret    

c0013e78 <Device::hibernateAll()>:
c0013e78:	53                   	push   ebx
c0013e79:	83 ec 14             	sub    esp,0x14
c0013e7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e82:	53                   	push   ebx
c0013e83:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013e86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e92:	74 0f                	je     c0013ea3 <Device::hibernateAll()+0x2b>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9a:	e8 d9 ff ff ff       	call   c0013e78 <Device::hibernateAll()>
c0013e9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea1:	eb e9                	jmp    c0013e8c <Device::hibernateAll()+0x14>
c0013ea3:	83 c4 08             	add    esp,0x8
c0013ea6:	5b                   	pop    ebx
c0013ea7:	c3                   	ret    

c0013ea8 <Device::wakeAll()>:
c0013ea8:	53                   	push   ebx
c0013ea9:	83 ec 14             	sub    esp,0x14
c0013eac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb2:	53                   	push   ebx
c0013eb3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013eb6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec2:	74 0f                	je     c0013ed3 <Device::wakeAll()+0x2b>
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eca:	e8 d9 ff ff ff       	call   c0013ea8 <Device::wakeAll()>
c0013ecf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed1:	eb e9                	jmp    c0013ebc <Device::wakeAll()+0x14>
c0013ed3:	83 c4 08             	add    esp,0x8
c0013ed6:	5b                   	pop    ebx
c0013ed7:	c3                   	ret    

c0013ed8 <Device::detectAll()>:
c0013ed8:	53                   	push   ebx
c0013ed9:	83 ec 14             	sub    esp,0x14
c0013edc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee2:	53                   	push   ebx
c0013ee3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013ee6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ef2:	74 0f                	je     c0013f03 <Device::detectAll()+0x2b>
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013efa:	e8 d9 ff ff ff       	call   c0013ed8 <Device::detectAll()>
c0013eff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f01:	eb e9                	jmp    c0013eec <Device::detectAll()+0x14>
c0013f03:	83 c4 08             	add    esp,0x8
c0013f06:	5b                   	pop    ebx
c0013f07:	c3                   	ret    

c0013f08 <Device::disableLegacyAll()>:
c0013f08:	53                   	push   ebx
c0013f09:	83 ec 14             	sub    esp,0x14
c0013f0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f12:	53                   	push   ebx
c0013f13:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f22:	74 0f                	je     c0013f33 <Device::disableLegacyAll()+0x2b>
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f2a:	e8 d9 ff ff ff       	call   c0013f08 <Device::disableLegacyAll()>
c0013f2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f31:	eb e9                	jmp    c0013f1c <Device::disableLegacyAll()+0x14>
c0013f33:	83 c4 08             	add    esp,0x8
c0013f36:	5b                   	pop    ebx
c0013f37:	c3                   	ret    

c0013f38 <Device::loadDriversForAll()>:
c0013f38:	53                   	push   ebx
c0013f39:	83 ec 08             	sub    esp,0x8
c0013f3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f40:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013f47:	75 0c                	jne    c0013f55 <Device::loadDriversForAll()+0x1d>
c0013f49:	83 ec 0c             	sub    esp,0xc
c0013f4c:	53                   	push   ebx
c0013f4d:	e8 a0 fd ff ff       	call   c0013cf2 <Device::findAndLoadDriver()>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f5e:	74 12                	je     c0013f72 <Device::loadDriversForAll()+0x3a>
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f66:	e8 cd ff ff ff       	call   c0013f38 <Device::loadDriversForAll()>
c0013f6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	eb e9                	jmp    c0013f5b <Device::loadDriversForAll()+0x23>
c0013f72:	83 c4 08             	add    esp,0x8
c0013f75:	5b                   	pop    ebx
c0013f76:	c3                   	ret    
c0013f77:	90                   	nop

c0013f78 <Device::closeAll()>:
c0013f78:	53                   	push   ebx
c0013f79:	83 ec 08             	sub    esp,0x8
c0013f7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f82:	6a 00                	push   0x0
c0013f84:	6a 00                	push   0x0
c0013f86:	6a 00                	push   0x0
c0013f88:	53                   	push   ebx
c0013f89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f8c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f92:	83 c4 10             	add    esp,0x10
c0013f95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f98:	74 0f                	je     c0013fa9 <Device::closeAll()+0x31>
c0013f9a:	83 ec 0c             	sub    esp,0xc
c0013f9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fa0:	e8 d3 ff ff ff       	call   c0013f78 <Device::closeAll()>
c0013fa5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fa7:	eb e9                	jmp    c0013f92 <Device::closeAll()+0x1a>
c0013fa9:	83 c4 08             	add    esp,0x8
c0013fac:	5b                   	pop    ebx
c0013fad:	c3                   	ret    

c0013fae <Device::powerSavingAll(PowerSavingLevel)>:
c0013fae:	56                   	push   esi
c0013faf:	53                   	push   ebx
c0013fb0:	83 ec 0c             	sub    esp,0xc
c0013fb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fb7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013fbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fbd:	56                   	push   esi
c0013fbe:	53                   	push   ebx
c0013fbf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013fc2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fc8:	83 c4 10             	add    esp,0x10
c0013fcb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fce:	74 0f                	je     c0013fdf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013fd0:	52                   	push   edx
c0013fd1:	52                   	push   edx
c0013fd2:	56                   	push   esi
c0013fd3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fd6:	e8 d3 ff ff ff       	call   c0013fae <Device::powerSavingAll(PowerSavingLevel)>
c0013fdb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fdd:	eb e9                	jmp    c0013fc8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013fdf:	58                   	pop    eax
c0013fe0:	5b                   	pop    ebx
c0013fe1:	5e                   	pop    esi
c0013fe2:	c3                   	ret    
c0013fe3:	90                   	nop

c0013fe4 <Device::setName(char const*)>:
c0013fe4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013fec:	e9 1b c8 fe ff       	jmp    c000080c <strcpy>
c0013ff1:	90                   	nop

c0013ff2 <Device::Device(char const*)>:
c0013ff2:	83 ec 1c             	sub    esp,0x1c
c0013ff5:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c0013ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffe:	89 10                	mov    DWORD PTR [eax],edx
c0014000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014004:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001400e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014012:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001401c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014020:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001402a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014038:	83 ec 08             	sub    esp,0x8
c001403b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001403f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014043:	e8 9c ff ff ff       	call   c0013fe4 <Device::setName(char const*)>
c0014048:	83 c4 10             	add    esp,0x10
c001404b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014053:	83 ec 0c             	sub    esp,0xc
c0014056:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001405a:	e8 fe b8 ff ff       	call   c000f95d <malloc>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014068:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001406f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014073:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001407d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014083:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001408d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014093:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001409a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001409e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00140a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00140b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00140be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00140cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00140da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140de:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00140e8:	90                   	nop
c00140e9:	83 c4 1c             	add    esp,0x1c
c00140ec:	c3                   	ret    
c00140ed:	90                   	nop

c00140ee <Device::getName()>:
c00140ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f2:	05 d0 00 00 00       	add    eax,0xd0
c00140f7:	c3                   	ret    

c00140f8 <DriverlessDevice::DriverlessDevice(char const*)>:
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ff:	83 ec 08             	sub    esp,0x8
c0014102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014106:	50                   	push   eax
c0014107:	e8 e6 fe ff ff       	call   c0013ff2 <Device::Device(char const*)>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	ba fc b2 02 c0       	mov    edx,0xc002b2fc
c0014114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014118:	89 10                	mov    DWORD PTR [eax],edx
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014128:	90                   	nop
c0014129:	83 c4 0c             	add    esp,0xc
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001412e:	57                   	push   edi
c001412f:	56                   	push   esi
c0014130:	53                   	push   ebx
c0014131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014135:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014139:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001413d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014143:	75 0c                	jne    c0014151 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014145:	52                   	push   edx
c0014146:	52                   	push   edx
c0014147:	53                   	push   ebx
c0014148:	56                   	push   esi
c0014149:	e8 72 4b 01 00       	call   c0028cc0 <LinkedList<Device>::addElement(Device*)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014157:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001415a:	74 12                	je     c001416e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001415c:	50                   	push   eax
c001415d:	57                   	push   edi
c001415e:	56                   	push   esi
c001415f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014162:	e8 c7 ff ff ff       	call   c001412e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014167:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014169:	83 c4 10             	add    esp,0x10
c001416c:	eb e9                	jmp    c0014157 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001416e:	5b                   	pop    ebx
c001416f:	5e                   	pop    esi
c0014170:	5f                   	pop    edi
c0014171:	c3                   	ret    

c0014172 <getDevicesOfType(DeviceType)>:
c0014172:	53                   	push   ebx
c0014173:	83 ec 14             	sub    esp,0x14
c0014176:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001417a:	53                   	push   ebx
c001417b:	e8 1c 4c 01 00       	call   c0028d9c <LinkedList<Device>::LinkedList()>
c0014180:	83 c4 0c             	add    esp,0xc
c0014183:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014187:	53                   	push   ebx
c0014188:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c001418e:	e8 9b ff ff ff       	call   c001412e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014193:	89 d8                	mov    eax,ebx
c0014195:	83 c4 18             	add    esp,0x18
c0014198:	5b                   	pop    ebx
c0014199:	c2 04 00             	ret    0x4

c001419c <HardDiskController::HardDiskController(char const*)>:
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a3:	83 ec 08             	sub    esp,0x8
c00141a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141aa:	50                   	push   eax
c00141ab:	e8 42 fe ff ff       	call   c0013ff2 <Device::Device(char const*)>
c00141b0:	83 c4 10             	add    esp,0x10
c00141b3:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c00141b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bc:	89 10                	mov    DWORD PTR [eax],edx
c00141be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00141cc:	90                   	nop
c00141cd:	83 c4 0c             	add    esp,0xc
c00141d0:	c3                   	ret    
c00141d1:	90                   	nop

c00141d2 <HardDiskController::~HardDiskController()>:
c00141d2:	83 ec 0c             	sub    esp,0xc
c00141d5:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c00141da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141de:	89 10                	mov    DWORD PTR [eax],edx
c00141e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e4:	83 ec 0c             	sub    esp,0xc
c00141e7:	50                   	push   eax
c00141e8:	e8 cf fa ff ff       	call   c0013cbc <Device::~Device()>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	90                   	nop
c00141f1:	83 c4 0c             	add    esp,0xc
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <HardDiskController::~HardDiskController()>:
c00141f6:	83 ec 0c             	sub    esp,0xc
c00141f9:	83 ec 0c             	sub    esp,0xc
c00141fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014200:	e8 cd ff ff ff       	call   c00141d2 <HardDiskController::~HardDiskController()>
c0014205:	83 c4 10             	add    esp,0x10
c0014208:	83 ec 08             	sub    esp,0x8
c001420b:	68 58 01 00 00       	push   0x158
c0014210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014214:	e8 c4 e6 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0014219:	83 c4 10             	add    esp,0x10
c001421c:	83 c4 0c             	add    esp,0xc
c001421f:	c3                   	ret    

c0014220 <PhysicalDisk::eject()>:
c0014220:	83 c8 ff             	or     eax,0xffffffff
c0014223:	c3                   	ret    

c0014224 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422b:	83 ec 08             	sub    esp,0x8
c001422e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014232:	50                   	push   eax
c0014233:	e8 ba fd ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c0014240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014244:	89 10                	mov    DWORD PTR [eax],edx
c0014246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014255:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001425c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014260:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001426a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014272:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001427c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014286:	90                   	nop
c0014287:	83 c4 0c             	add    esp,0xc
c001428a:	c3                   	ret    
c001428b:	90                   	nop

c001428c <PhysicalDisk::startCache()>:
c001428c:	56                   	push   esi
c001428d:	53                   	push   ebx
c001428e:	83 ec 10             	sub    esp,0x10
c0014291:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014295:	6a 44                	push   0x44
c0014297:	e8 c1 b6 ff ff       	call   c000f95d <malloc>
c001429c:	89 c6                	mov    esi,eax
c001429e:	58                   	pop    eax
c001429f:	5a                   	pop    edx
c00142a0:	53                   	push   ebx
c00142a1:	56                   	push   esi
c00142a2:	e8 77 28 00 00       	call   c0016b1e <VCache::VCache(PhysicalDisk*)>
c00142a7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00142ad:	83 c4 14             	add    esp,0x14
c00142b0:	5b                   	pop    ebx
c00142b1:	5e                   	pop    esi
c00142b2:	c3                   	ret    
c00142b3:	90                   	nop

c00142b4 <PhysicalDisk::~PhysicalDisk()>:
c00142b4:	83 ec 0c             	sub    esp,0xc
c00142b7:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c00142bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c0:	89 10                	mov    DWORD PTR [eax],edx
c00142c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c6:	83 ec 0c             	sub    esp,0xc
c00142c9:	50                   	push   eax
c00142ca:	e8 ed f9 ff ff       	call   c0013cbc <Device::~Device()>
c00142cf:	83 c4 10             	add    esp,0x10
c00142d2:	90                   	nop
c00142d3:	83 c4 0c             	add    esp,0xc
c00142d6:	c3                   	ret    
c00142d7:	90                   	nop

c00142d8 <PhysicalDisk::~PhysicalDisk()>:
c00142d8:	83 ec 0c             	sub    esp,0xc
c00142db:	83 ec 0c             	sub    esp,0xc
c00142de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e2:	e8 cd ff ff ff       	call   c00142b4 <PhysicalDisk::~PhysicalDisk()>
c00142e7:	83 c4 10             	add    esp,0x10
c00142ea:	83 ec 08             	sub    esp,0x8
c00142ed:	68 6c 01 00 00       	push   0x16c
c00142f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f6:	e8 e2 e5 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	83 c4 0c             	add    esp,0xc
c0014301:	c3                   	ret    

c0014302 <FPU::FPU(char const*)>:
c0014302:	83 ec 0c             	sub    esp,0xc
c0014305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014309:	83 ec 08             	sub    esp,0x8
c001430c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014310:	50                   	push   eax
c0014311:	e8 dc fc ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0014316:	83 c4 10             	add    esp,0x10
c0014319:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c001431e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014322:	89 10                	mov    DWORD PTR [eax],edx
c0014324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014328:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014332:	90                   	nop
c0014333:	83 c4 0c             	add    esp,0xc
c0014336:	c3                   	ret    
c0014337:	90                   	nop

c0014338 <FPU::~FPU()>:
c0014338:	83 ec 0c             	sub    esp,0xc
c001433b:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c0014340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014344:	89 10                	mov    DWORD PTR [eax],edx
c0014346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	50                   	push   eax
c001434e:	e8 69 f9 ff ff       	call   c0013cbc <Device::~Device()>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	90                   	nop
c0014357:	83 c4 0c             	add    esp,0xc
c001435a:	c3                   	ret    
c001435b:	90                   	nop

c001435c <FPU::~FPU()>:
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	83 ec 0c             	sub    esp,0xc
c0014362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014366:	e8 cd ff ff ff       	call   c0014338 <FPU::~FPU()>
c001436b:	83 c4 10             	add    esp,0x10
c001436e:	83 ec 08             	sub    esp,0x8
c0014371:	68 58 01 00 00       	push   0x158
c0014376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001437a:	e8 5e e5 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c001437f:	83 c4 10             	add    esp,0x10
c0014382:	83 c4 0c             	add    esp,0xc
c0014385:	c3                   	ret    

c0014386 <setupFPU()>:
c0014386:	53                   	push   ebx
c0014387:	83 ec 08             	sub    esp,0x8
c001438a:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0014390:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014397:	74 19                	je     c00143b2 <setupFPU()+0x2c>
c0014399:	83 ec 0c             	sub    esp,0xc
c001439c:	68 58 01 00 00       	push   0x158
c00143a1:	e8 b7 b5 ff ff       	call   c000f95d <malloc>
c00143a6:	89 c3                	mov    ebx,eax
c00143a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143ab:	e8 5a 15 01 00       	call   c002590a <AVX::AVX()>
c00143b0:	eb 5b                	jmp    c001440d <setupFPU()+0x87>
c00143b2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00143b8:	84 c0                	test   al,al
c00143ba:	79 19                	jns    c00143d5 <setupFPU()+0x4f>
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	68 58 01 00 00       	push   0x158
c00143c4:	e8 94 b5 ff ff       	call   c000f95d <malloc>
c00143c9:	89 c3                	mov    ebx,eax
c00143cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00143ce:	e8 5d 16 01 00       	call   c0025a30 <SSE::SSE()>
c00143d3:	eb 38                	jmp    c001440d <setupFPU()+0x87>
c00143d5:	a8 20                	test   al,0x20
c00143d7:	74 19                	je     c00143f2 <setupFPU()+0x6c>
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	68 58 01 00 00       	push   0x158
c00143e1:	e8 77 b5 ff ff       	call   c000f95d <malloc>
c00143e6:	89 c3                	mov    ebx,eax
c00143e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143eb:	e8 aa 15 01 00       	call   c002599a <MMX::MMX()>
c00143f0:	eb 1b                	jmp    c001440d <setupFPU()+0x87>
c00143f2:	a8 10                	test   al,0x10
c00143f4:	74 1c                	je     c0014412 <setupFPU()+0x8c>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	68 58 01 00 00       	push   0x158
c00143fe:	e8 5a b5 ff ff       	call   c000f95d <malloc>
c0014403:	89 c3                	mov    ebx,eax
c0014405:	89 04 24             	mov    DWORD PTR [esp],eax
c0014408:	e8 b1 16 01 00       	call   c0025abe <x87::x87()>
c001440d:	83 c4 10             	add    esp,0x10
c0014410:	eb 24                	jmp    c0014436 <setupFPU()+0xb0>
c0014412:	83 e0 ef             	and    eax,0xffffffef
c0014415:	83 ec 0c             	sub    esp,0xc
c0014418:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001441e:	68 84 b3 02 c0       	push   0xc002b384
c0014423:	e8 8d e5 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014428:	0f 20 c0             	mov    eax,cr0
c001442b:	83 c8 04             	or     eax,0x4
c001442e:	0f 22 c0             	mov    cr0,eax
c0014431:	31 db                	xor    ebx,ebx
c0014433:	83 c4 10             	add    esp,0x10
c0014436:	89 d8                	mov    eax,ebx
c0014438:	83 c4 08             	add    esp,0x8
c001443b:	5b                   	pop    ebx
c001443c:	c3                   	ret    
c001443d:	90                   	nop

c001443e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001443e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014446:	c1 e0 04             	shl    eax,0x4
c0014449:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001444d:	8d 50 10             	lea    edx,[eax+0x10]
c0014450:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014456:	74 08                	je     c0014460 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014458:	83 c0 04             	add    eax,0x4
c001445b:	39 d0                	cmp    eax,edx
c001445d:	75 f1                	jne    c0014450 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001445f:	c3                   	ret    
c0014460:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001446a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014474:	eb e2                	jmp    c0014458 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014476 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014476:	57                   	push   edi
c0014477:	31 c0                	xor    eax,eax
c0014479:	56                   	push   esi
c001447a:	53                   	push   ebx
c001447b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001447f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014483:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014487:	89 da                	mov    edx,ebx
c0014489:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001448d:	c1 e2 04             	shl    edx,0x4
c0014490:	01 ca                	add    edx,ecx
c0014492:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001449a:	74 16                	je     c00144b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001449c:	40                   	inc    eax
c001449d:	83 f8 04             	cmp    eax,0x4
c00144a0:	75 f0                	jne    c0014492 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00144a2:	c7 44 24 10 c8 b3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b3c8
c00144aa:	5b                   	pop    ebx
c00144ab:	5e                   	pop    esi
c00144ac:	5f                   	pop    edi
c00144ad:	e9 a1 5e 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c00144b2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00144b5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00144b8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00144be:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00144c4:	5b                   	pop    ebx
c00144c5:	5e                   	pop    esi
c00144c6:	5f                   	pop    edi
c00144c7:	c3                   	ret    

c00144c8 <doubleFault(regs*, void*)>:
c00144c8:	55                   	push   ebp
c00144c9:	89 e5                	mov    ebp,esp
c00144cb:	83 ec 08             	sub    esp,0x8
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	68 d5 b3 02 c0       	push   0xc002b3d5
c00144d6:	e8 78 5e 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00144db:	83 c4 10             	add    esp,0x10
c00144de:	90                   	nop
c00144df:	c9                   	leave  
c00144e0:	c3                   	ret    
c00144e1:	90                   	nop

c00144e2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00144e2:	56                   	push   esi
c00144e3:	53                   	push   ebx
c00144e4:	50                   	push   eax
c00144e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144ed:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144f2:	75 35                	jne    c0014529 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00144f4:	8d 43 20             	lea    eax,[ebx+0x20]
c00144f7:	31 d2                	xor    edx,edx
c00144f9:	89 c1                	mov    ecx,eax
c00144fb:	c1 e1 04             	shl    ecx,0x4
c00144fe:	01 f1                	add    ecx,esi
c0014500:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014508:	74 3e                	je     c0014548 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001450a:	42                   	inc    edx
c001450b:	83 fa 04             	cmp    edx,0x4
c001450e:	75 f0                	jne    c0014500 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014510:	83 ec 0c             	sub    esp,0xc
c0014513:	68 ef b3 02 c0       	push   0xc002b3ef
c0014518:	e8 36 5e 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001451d:	83 c4 10             	add    esp,0x10
c0014520:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014525:	5a                   	pop    edx
c0014526:	5b                   	pop    ebx
c0014527:	5e                   	pop    esi
c0014528:	c3                   	ret    
c0014529:	83 ec 0c             	sub    esp,0xc
c001452c:	56                   	push   esi
c001452d:	e8 bc fb ff ff       	call   c00140ee <Device::getName()>
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014538:	75 ba                	jne    c00144f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001453a:	83 fb 0f             	cmp    ebx,0xf
c001453d:	7f 29                	jg     c0014568 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001453f:	0f b6 9b 20 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27e0]
c0014546:	eb ac                	jmp    c00144f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014548:	8d 04 82             	lea    eax,[edx+eax*4]
c001454b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001454f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014552:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014558:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001455c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014562:	89 d8                	mov    eax,ebx
c0014564:	5a                   	pop    edx
c0014565:	5b                   	pop    ebx
c0014566:	5e                   	pop    esi
c0014567:	c3                   	ret    
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	68 e2 b3 02 c0       	push   0xc002b3e2
c0014570:	e8 de 5d 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	e9 77 ff ff ff       	jmp    c00144f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001457d:	90                   	nop

c001457e <InterruptController::clearAllHandlers(int, bool)>:
c001457e:	56                   	push   esi
c001457f:	53                   	push   ebx
c0014580:	52                   	push   edx
c0014581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014585:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014589:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001458e:	75 61                	jne    c00145f1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014590:	8d 46 20             	lea    eax,[esi+0x20]
c0014593:	c1 e6 04             	shl    esi,0x4
c0014596:	c1 e0 04             	shl    eax,0x4
c0014599:	01 de                	add    esi,ebx
c001459b:	01 d8                	add    eax,ebx
c001459d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00145a7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00145b1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00145bb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00145c5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00145cf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00145d9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00145e3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00145ed:	58                   	pop    eax
c00145ee:	5b                   	pop    ebx
c00145ef:	5e                   	pop    esi
c00145f0:	c3                   	ret    
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	53                   	push   ebx
c00145f5:	e8 f4 fa ff ff       	call   c00140ee <Device::getName()>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014600:	75 8e                	jne    c0014590 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014602:	83 fe 0f             	cmp    esi,0xf
c0014605:	7f 09                	jg     c0014610 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014607:	0f b6 b6 20 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27e0]
c001460e:	eb 80                	jmp    c0014590 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014610:	83 ec 0c             	sub    esp,0xc
c0014613:	68 fc b3 02 c0       	push   0xc002b3fc
c0014618:	e8 36 5d 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	e9 6b ff ff ff       	jmp    c0014590 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014625:	90                   	nop

c0014626 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014626:	56                   	push   esi
c0014627:	53                   	push   ebx
c0014628:	52                   	push   edx
c0014629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001462d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014631:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014636:	75 3a                	jne    c0014672 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014638:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001463c:	8d 50 20             	lea    edx,[eax+0x20]
c001463f:	c1 e2 04             	shl    edx,0x4
c0014642:	8d 04 16             	lea    eax,[esi+edx*1]
c0014645:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014649:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001464f:	74 0b                	je     c001465c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014651:	83 c0 04             	add    eax,0x4
c0014654:	39 d0                	cmp    eax,edx
c0014656:	75 f1                	jne    c0014649 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014658:	58                   	pop    eax
c0014659:	5b                   	pop    ebx
c001465a:	5e                   	pop    esi
c001465b:	c3                   	ret    
c001465c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014666:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014670:	eb df                	jmp    c0014651 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014672:	83 ec 0c             	sub    esp,0xc
c0014675:	56                   	push   esi
c0014676:	e8 73 fa ff ff       	call   c00140ee <Device::getName()>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014681:	75 b5                	jne    c0014638 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014683:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014688:	7f 11                	jg     c001469b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001468a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001468e:	0f b6 80 20 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27e0]
c0014695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014699:	eb 9d                	jmp    c0014638 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001469b:	83 ec 0c             	sub    esp,0xc
c001469e:	68 09 b4 02 c0       	push   0xc002b409
c00146a3:	e8 ab 5c 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	eb 8b                	jmp    c0014638 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00146ad <nmiHandler(regs*, void*)>:
c00146ad:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00146b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146b6:	e9 05 a9 ff ff       	jmp    c000efc0 <Computer::handleNMI()>

c00146bb <int_handler>:
c00146bb:	55                   	push   ebp
c00146bc:	57                   	push   edi
c00146bd:	56                   	push   esi
c00146be:	53                   	push   ebx
c00146bf:	83 ec 0c             	sub    esp,0xc
c00146c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00146c6:	80 3d e4 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0e4,0x0
c00146cd:	74 0b                	je     c00146da <int_handler+0x1f>
c00146cf:	fa                   	cli    
c00146d0:	f4                   	hlt    
c00146d1:	80 3d e4 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0e4,0x0
c00146d8:	75 f5                	jne    c00146cf <int_handler+0x14>
c00146da:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00146df:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00146e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00146e8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00146ee:	8d 43 e0             	lea    eax,[ebx-0x20]
c00146f1:	83 f8 17             	cmp    eax,0x17
c00146f4:	77 13                	ja     c0014709 <int_handler+0x4e>
c00146f6:	83 ec 08             	sub    esp,0x8
c00146f9:	8b 17                	mov    edx,DWORD PTR [edi]
c00146fb:	8d 43 e0             	lea    eax,[ebx-0x20]
c00146fe:	0f b6 c0             	movzx  eax,al
c0014701:	50                   	push   eax
c0014702:	57                   	push   edi
c0014703:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014706:	83 c4 10             	add    esp,0x10
c0014709:	83 c3 15             	add    ebx,0x15
c001470c:	c1 e3 04             	shl    ebx,0x4
c001470f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014713:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001471a:	31 db                	xor    ebx,ebx
c001471c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014720:	85 c0                	test   eax,eax
c0014722:	74 13                	je     c0014737 <int_handler+0x7c>
c0014724:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014727:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001472b:	74 1c                	je     c0014749 <int_handler+0x8e>
c001472d:	83 ec 08             	sub    esp,0x8
c0014730:	52                   	push   edx
c0014731:	56                   	push   esi
c0014732:	ff d0                	call   eax
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	43                   	inc    ebx
c0014738:	83 fb 04             	cmp    ebx,0x4
c001473b:	75 df                	jne    c001471c <int_handler+0x61>
c001473d:	83 c4 0c             	add    esp,0xc
c0014740:	31 c0                	xor    eax,eax
c0014742:	5b                   	pop    ebx
c0014743:	31 d2                	xor    edx,edx
c0014745:	5e                   	pop    esi
c0014746:	5f                   	pop    edi
c0014747:	5d                   	pop    ebp
c0014748:	c3                   	ret    
c0014749:	83 ec 08             	sub    esp,0x8
c001474c:	52                   	push   edx
c001474d:	56                   	push   esi
c001474e:	ff d0                	call   eax
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	83 c4 0c             	add    esp,0xc
c0014756:	5b                   	pop    ebx
c0014757:	5e                   	pop    esi
c0014758:	5f                   	pop    edi
c0014759:	5d                   	pop    ebp
c001475a:	c3                   	ret    
c001475b:	90                   	nop

c001475c <InterruptController::InterruptController(char const*)>:
c001475c:	83 ec 1c             	sub    esp,0x1c
c001475f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014763:	83 ec 08             	sub    esp,0x8
c0014766:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001476a:	50                   	push   eax
c001476b:	e8 82 f8 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	ba d0 b6 02 c0       	mov    edx,0xc002b6d0
c0014778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001477c:	89 10                	mov    DWORD PTR [eax],edx
c001477e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014782:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001478c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014794:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001479c:	7f 5e                	jg     c00147fc <InterruptController::InterruptController(char const*)+0xa0>
c001479e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147a6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00147ab:	7f 49                	jg     c00147f6 <InterruptController::InterruptController(char const*)+0x9a>
c00147ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147b5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147c0:	01 ca                	add    edx,ecx
c00147c2:	83 c2 54             	add    edx,0x54
c00147c5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00147cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147e0:	01 ca                	add    edx,ecx
c00147e2:	81 c2 54 04 00 00    	add    edx,0x454
c00147e8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00147f0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147f4:	eb b0                	jmp    c00147a6 <InterruptController::InterruptController(char const*)+0x4a>
c00147f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147fa:	eb 98                	jmp    c0014794 <InterruptController::InterruptController(char const*)+0x38>
c00147fc:	90                   	nop
c00147fd:	83 c4 1c             	add    esp,0x1c
c0014800:	c3                   	ret    
c0014801:	90                   	nop

c0014802 <InterruptController::~InterruptController()>:
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	ba d0 b6 02 c0       	mov    edx,0xc002b6d0
c001480a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480e:	89 10                	mov    DWORD PTR [eax],edx
c0014810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	50                   	push   eax
c0014818:	e8 9f f4 ff ff       	call   c0013cbc <Device::~Device()>
c001481d:	83 c4 10             	add    esp,0x10
c0014820:	90                   	nop
c0014821:	83 c4 0c             	add    esp,0xc
c0014824:	c3                   	ret    
c0014825:	90                   	nop

c0014826 <InterruptController::~InterruptController()>:
c0014826:	83 ec 0c             	sub    esp,0xc
c0014829:	83 ec 0c             	sub    esp,0xc
c001482c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014830:	e8 cd ff ff ff       	call   c0014802 <InterruptController::~InterruptController()>
c0014835:	83 c4 10             	add    esp,0x10
c0014838:	83 ec 08             	sub    esp,0x8
c001483b:	68 58 21 00 00       	push   0x2158
c0014840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014844:	e8 94 e0 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0014849:	83 c4 10             	add    esp,0x10
c001484c:	83 c4 0c             	add    esp,0xc
c001484f:	c3                   	ret    

c0014850 <displayDebugInfo(regs*)>:
c0014850:	55                   	push   ebp
c0014851:	57                   	push   edi
c0014852:	56                   	push   esi
c0014853:	53                   	push   ebx
c0014854:	83 ec 24             	sub    esp,0x24
c0014857:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001485b:	0f 20 c2             	mov    edx,cr0
c001485e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014862:	0f 20 d7             	mov    edi,cr2
c0014865:	0f 20 de             	mov    esi,cr3
c0014868:	0f 20 e5             	mov    ebp,cr4
c001486b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001486e:	68 16 b4 02 c0       	push   0xc002b416
c0014873:	e8 3d e1 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014878:	59                   	pop    ecx
c0014879:	58                   	pop    eax
c001487a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001487d:	68 21 b4 02 c0       	push   0xc002b421
c0014882:	e8 2e e1 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014887:	58                   	pop    eax
c0014888:	5a                   	pop    edx
c0014889:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001488c:	68 2c b4 02 c0       	push   0xc002b42c
c0014891:	e8 1f e1 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014896:	59                   	pop    ecx
c0014897:	58                   	pop    eax
c0014898:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001489b:	68 37 b4 02 c0       	push   0xc002b437
c00148a0:	e8 10 e1 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148a5:	58                   	pop    eax
c00148a6:	5a                   	pop    edx
c00148a7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00148aa:	68 42 b4 02 c0       	push   0xc002b442
c00148af:	e8 01 e1 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148b4:	59                   	pop    ecx
c00148b5:	58                   	pop    eax
c00148b6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00148b9:	68 4d b4 02 c0       	push   0xc002b44d
c00148be:	e8 f2 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148c3:	58                   	pop    eax
c00148c4:	5a                   	pop    edx
c00148c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148c8:	68 58 b4 02 c0       	push   0xc002b458
c00148cd:	e8 e3 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148d2:	59                   	pop    ecx
c00148d3:	58                   	pop    eax
c00148d4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00148d7:	68 63 b4 02 c0       	push   0xc002b463
c00148dc:	e8 d4 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148e1:	58                   	pop    eax
c00148e2:	5a                   	pop    edx
c00148e3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148e6:	68 6e b4 02 c0       	push   0xc002b46e
c00148eb:	e8 c5 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148f0:	59                   	pop    ecx
c00148f1:	58                   	pop    eax
c00148f2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148f5:	68 7d b4 02 c0       	push   0xc002b47d
c00148fa:	e8 b6 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00148ff:	58                   	pop    eax
c0014900:	5a                   	pop    edx
c0014901:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014904:	68 88 b4 02 c0       	push   0xc002b488
c0014909:	e8 a7 e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001490e:	59                   	pop    ecx
c001490f:	58                   	pop    eax
c0014910:	57                   	push   edi
c0014911:	68 93 b4 02 c0       	push   0xc002b493
c0014916:	e8 9a e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001491b:	58                   	pop    eax
c001491c:	5a                   	pop    edx
c001491d:	56                   	push   esi
c001491e:	68 9e b4 02 c0       	push   0xc002b49e
c0014923:	e8 8d e0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014928:	59                   	pop    ecx
c0014929:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001492e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014934:	e8 de bd ff ff       	call   c0010717 <setActiveTerminal(VgaText*)>
c0014939:	58                   	pop    eax
c001493a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001493d:	5a                   	pop    edx
c001493e:	c1 e0 05             	shl    eax,0x5
c0014941:	05 80 d5 02 c0       	add    eax,0xc002d580
c0014946:	50                   	push   eax
c0014947:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001494c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014952:	e8 cd c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014957:	59                   	pop    ecx
c0014958:	58                   	pop    eax
c0014959:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001495e:	68 a9 b4 02 c0       	push   0xc002b4a9
c0014963:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014969:	e8 b6 c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001496e:	58                   	pop    eax
c001496f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014974:	5a                   	pop    edx
c0014975:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014978:	83 c0 0c             	add    eax,0xc
c001497b:	50                   	push   eax
c001497c:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014987:	e8 98 c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001498c:	59                   	pop    ecx
c001498d:	58                   	pop    eax
c001498e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014993:	68 b2 b4 02 c0       	push   0xc002b4b2
c0014998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499e:	e8 81 c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c00149a3:	58                   	pop    eax
c00149a4:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c00149a9:	5a                   	pop    edx
c00149aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 26 c2 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c00149b8:	59                   	pop    ecx
c00149b9:	58                   	pop    eax
c00149ba:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c00149bf:	68 ba b4 02 c0       	push   0xc002b4ba
c00149c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ca:	e8 55 c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c00149cf:	58                   	pop    eax
c00149d0:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c00149d5:	5a                   	pop    edx
c00149d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149df:	e8 fa c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c00149e4:	59                   	pop    ecx
c00149e5:	58                   	pop    eax
c00149e6:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c00149eb:	68 c2 b4 02 c0       	push   0xc002b4c2
c00149f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f6:	e8 29 c2 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c00149fb:	58                   	pop    eax
c00149fc:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a01:	5a                   	pop    edx
c0014a02:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0b:	e8 ce c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014a10:	59                   	pop    ecx
c0014a11:	58                   	pop    eax
c0014a12:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a17:	68 ca b4 02 c0       	push   0xc002b4ca
c0014a1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a22:	e8 fd c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014a27:	58                   	pop    eax
c0014a28:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a2d:	5a                   	pop    edx
c0014a2e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014a31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a37:	e8 a2 c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014a3c:	59                   	pop    ecx
c0014a3d:	58                   	pop    eax
c0014a3e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a43:	68 d2 b4 02 c0       	push   0xc002b4d2
c0014a48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4e:	e8 d1 c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014a53:	58                   	pop    eax
c0014a54:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a59:	5a                   	pop    edx
c0014a5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a63:	e8 76 c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014a68:	59                   	pop    ecx
c0014a69:	58                   	pop    eax
c0014a6a:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a6f:	68 da b4 02 c0       	push   0xc002b4da
c0014a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7a:	e8 a5 c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014a7f:	58                   	pop    eax
c0014a80:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a85:	5a                   	pop    edx
c0014a86:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014a89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8f:	e8 4a c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014a94:	59                   	pop    ecx
c0014a95:	58                   	pop    eax
c0014a96:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014a9b:	68 e2 b4 02 c0       	push   0xc002b4e2
c0014aa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa6:	e8 79 c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014aab:	58                   	pop    eax
c0014aac:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014ab1:	5a                   	pop    edx
c0014ab2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ab6:	52                   	push   edx
c0014ab7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abd:	e8 1c c1 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014ac2:	59                   	pop    ecx
c0014ac3:	58                   	pop    eax
c0014ac4:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014ac9:	68 eb b4 02 c0       	push   0xc002b4eb
c0014ace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad4:	e8 4b c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014ad9:	58                   	pop    eax
c0014ada:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014adf:	5a                   	pop    edx
c0014ae0:	57                   	push   edi
c0014ae1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae7:	e8 f2 c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014aec:	59                   	pop    ecx
c0014aed:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014af2:	5f                   	pop    edi
c0014af3:	68 f3 b4 02 c0       	push   0xc002b4f3
c0014af8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afe:	e8 21 c1 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014b03:	58                   	pop    eax
c0014b04:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b09:	5a                   	pop    edx
c0014b0a:	56                   	push   esi
c0014b0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b11:	e8 c8 c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014b16:	59                   	pop    ecx
c0014b17:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b1c:	5e                   	pop    esi
c0014b1d:	68 fb b4 02 c0       	push   0xc002b4fb
c0014b22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b28:	e8 f7 c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014b2d:	5f                   	pop    edi
c0014b2e:	58                   	pop    eax
c0014b2f:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b34:	55                   	push   ebp
c0014b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3b:	e8 9e c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014b40:	58                   	pop    eax
c0014b41:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b46:	5a                   	pop    edx
c0014b47:	68 03 b5 02 c0       	push   0xc002b503
c0014b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b52:	e8 cd c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014b57:	0f 21 c0             	mov    eax,db0
c0014b5a:	59                   	pop    ecx
c0014b5b:	5e                   	pop    esi
c0014b5c:	50                   	push   eax
c0014b5d:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b68:	e8 71 c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014b6d:	5f                   	pop    edi
c0014b6e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b73:	5d                   	pop    ebp
c0014b74:	68 0c b5 02 c0       	push   0xc002b50c
c0014b79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7f:	e8 a0 c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014b84:	0f 21 c8             	mov    eax,db1
c0014b87:	5a                   	pop    edx
c0014b88:	59                   	pop    ecx
c0014b89:	50                   	push   eax
c0014b8a:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014b8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b95:	e8 44 c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014b9a:	5e                   	pop    esi
c0014b9b:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014ba0:	5f                   	pop    edi
c0014ba1:	68 14 b5 02 c0       	push   0xc002b514
c0014ba6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bac:	e8 73 c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014bb1:	0f 21 d0             	mov    eax,db2
c0014bb4:	5d                   	pop    ebp
c0014bb5:	5a                   	pop    edx
c0014bb6:	50                   	push   eax
c0014bb7:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014bbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc2:	e8 17 c0 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014bc7:	59                   	pop    ecx
c0014bc8:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014bcd:	5e                   	pop    esi
c0014bce:	68 1c b5 02 c0       	push   0xc002b51c
c0014bd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd9:	e8 46 c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014bde:	0f 21 d8             	mov    eax,db3
c0014be1:	5f                   	pop    edi
c0014be2:	5d                   	pop    ebp
c0014be3:	50                   	push   eax
c0014be4:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014be9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bef:	e8 ea bf ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014bf4:	58                   	pop    eax
c0014bf5:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014bfa:	5a                   	pop    edx
c0014bfb:	68 24 b5 02 c0       	push   0xc002b524
c0014c00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c06:	e8 19 c0 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014c0b:	0f 21 f0             	mov    eax,db6
c0014c0e:	59                   	pop    ecx
c0014c0f:	5e                   	pop    esi
c0014c10:	50                   	push   eax
c0014c11:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c1c:	e8 bd bf ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014c21:	5f                   	pop    edi
c0014c22:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c27:	5d                   	pop    ebp
c0014c28:	68 2c b5 02 c0       	push   0xc002b52c
c0014c2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c33:	e8 ec bf ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014c38:	0f 21 f8             	mov    eax,db7
c0014c3b:	5a                   	pop    edx
c0014c3c:	59                   	pop    ecx
c0014c3d:	50                   	push   eax
c0014c3e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c49:	e8 90 bf ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014c4e:	5e                   	pop    esi
c0014c4f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c52:	e8 78 88 00 00       	call   c001d4cf <Thr::getDriverNameFromAddress(unsigned long)>
c0014c57:	83 c4 10             	add    esp,0x10
c0014c5a:	85 c0                	test   eax,eax
c0014c5c:	74 7d                	je     c0014cdb <displayDebugInfo(regs*)+0x48b>
c0014c5e:	89 c6                	mov    esi,eax
c0014c60:	50                   	push   eax
c0014c61:	50                   	push   eax
c0014c62:	56                   	push   esi
c0014c63:	68 34 b5 02 c0       	push   0xc002b534
c0014c68:	e8 48 dd ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014c6d:	5a                   	pop    edx
c0014c6e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c73:	59                   	pop    ecx
c0014c74:	68 42 b5 02 c0       	push   0xc002b542
c0014c79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7f:	e8 a0 bf ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014c84:	5f                   	pop    edi
c0014c85:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c8a:	5d                   	pop    ebp
c0014c8b:	56                   	push   esi
c0014c8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c92:	e8 8d bf ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014c97:	58                   	pop    eax
c0014c98:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014c9d:	5a                   	pop    edx
c0014c9e:	68 4e b5 02 c0       	push   0xc002b54e
c0014ca3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca9:	e8 76 bf ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c0014cae:	59                   	pop    ecx
c0014caf:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0014cb4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014cba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cbd:	e8 44 88 00 00       	call   c001d506 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014cc2:	5b                   	pop    ebx
c0014cc3:	5d                   	pop    ebp
c0014cc4:	50                   	push   eax
c0014cc5:	57                   	push   edi
c0014cc6:	e8 13 bf ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c0014ccb:	58                   	pop    eax
c0014ccc:	5a                   	pop    edx
c0014ccd:	56                   	push   esi
c0014cce:	68 5a b5 02 c0       	push   0xc002b55a
c0014cd3:	e8 dd dc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	fa                   	cli    
c0014cdc:	f4                   	hlt    
c0014cdd:	eb fe                	jmp    c0014cdd <displayDebugInfo(regs*)+0x48d>

c0014cdf <x87EmulHandler(regs*, void*)>:
c0014cdf:	83 ec 0c             	sub    esp,0xc
c0014ce2:	0f 20 c2             	mov    edx,cr0
c0014ce5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cea:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014cee:	75 4b                	jne    c0014d3b <x87EmulHandler(regs*, void*)+0x5c>
c0014cf0:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014cf5:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014cfb:	85 c0                	test   eax,eax
c0014cfd:	74 05                	je     c0014d04 <x87EmulHandler(regs*, void*)+0x25>
c0014cff:	83 e2 08             	and    edx,0x8
c0014d02:	75 17                	jne    c0014d1b <x87EmulHandler(regs*, void*)+0x3c>
c0014d04:	83 ec 0c             	sub    esp,0xc
c0014d07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d0b:	e8 a5 ab 00 00       	call   c001f8b5 <Vm::x87Handler(regs*)>
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	84 c0                	test   al,al
c0014d15:	74 24                	je     c0014d3b <x87EmulHandler(regs*, void*)+0x5c>
c0014d17:	83 c4 0c             	add    esp,0xc
c0014d1a:	c3                   	ret    
c0014d1b:	83 ec 0c             	sub    esp,0xc
c0014d1e:	68 80 b5 02 c0       	push   0xc002b580
c0014d23:	e8 8d dc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014d28:	0f 06                	clts   
c0014d2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d2f:	83 c4 10             	add    esp,0x10
c0014d32:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c0014d37:	83 c4 0c             	add    esp,0xc
c0014d3a:	c3                   	ret    
c0014d3b:	83 ec 0c             	sub    esp,0xc
c0014d3e:	68 6a b5 02 c0       	push   0xc002b56a
c0014d43:	e8 6d dc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014d48:	5a                   	pop    edx
c0014d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d4d:	e8 fe fa ff ff       	call   c0014850 <displayDebugInfo(regs*)>

c0014d52 <gpFault(regs*, void*)>:
c0014d52:	53                   	push   ebx
c0014d53:	83 ec 14             	sub    esp,0x14
c0014d56:	c7 05 44 e7 02 c0 8e ed 01 c0 	mov    DWORD PTR ds:0xc002e744,0xc001ed8e
c0014d60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014d64:	53                   	push   ebx
c0014d65:	e8 24 a0 00 00       	call   c001ed8e <Vm::faultHandler(regs*)>
c0014d6a:	83 c4 10             	add    esp,0x10
c0014d6d:	84 c0                	test   al,al
c0014d6f:	74 05                	je     c0014d76 <gpFault(regs*, void*)+0x24>
c0014d71:	83 c4 08             	add    esp,0x8
c0014d74:	5b                   	pop    ebx
c0014d75:	c3                   	ret    
c0014d76:	83 ec 0c             	sub    esp,0xc
c0014d79:	68 8d b5 02 c0       	push   0xc002b58d
c0014d7e:	e8 32 dc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014d83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d86:	e8 c5 fa ff ff       	call   c0014850 <displayDebugInfo(regs*)>

c0014d8b <pgFault(regs*, void*)>:
c0014d8b:	53                   	push   ebx
c0014d8c:	83 ec 10             	sub    esp,0x10
c0014d8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d93:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d96:	68 a8 b5 02 c0       	push   0xc002b5a8
c0014d9b:	e8 15 dc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014da0:	0f 20 d0             	mov    eax,cr2
c0014da3:	5a                   	pop    edx
c0014da4:	59                   	pop    ecx
c0014da5:	50                   	push   eax
c0014da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014db4:	e8 03 d7 ff ff       	call   c00124bc <VAS::tryLoadBackOffDisk(unsigned long)>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	84 c0                	test   al,al
c0014dbe:	74 05                	je     c0014dc5 <pgFault(regs*, void*)+0x3a>
c0014dc0:	83 c4 08             	add    esp,0x8
c0014dc3:	5b                   	pop    ebx
c0014dc4:	c3                   	ret    
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	68 bd b5 02 c0       	push   0xc002b5bd
c0014dcd:	e8 e3 db ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014dd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dd5:	e8 76 fa ff ff       	call   c0014850 <displayDebugInfo(regs*)>

c0014dda <otherISRHandler(regs*, void*)>:
c0014dda:	53                   	push   ebx
c0014ddb:	83 ec 0c             	sub    esp,0xc
c0014dde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014de2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014de5:	50                   	push   eax
c0014de6:	50                   	push   eax
c0014de7:	68 ca b5 02 c0       	push   0xc002b5ca
c0014dec:	e8 c4 db ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014df1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014df4:	e8 57 fa ff ff       	call   c0014850 <displayDebugInfo(regs*)>

c0014df9 <opcodeFault(regs*, void*)>:
c0014df9:	55                   	push   ebp
c0014dfa:	89 e5                	mov    ebp,esp
c0014dfc:	56                   	push   esi
c0014dfd:	53                   	push   ebx
c0014dfe:	83 ec 40             	sub    esp,0x40
c0014e01:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014e06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e0c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e12:	84 c0                	test   al,al
c0014e14:	74 24                	je     c0014e3a <opcodeFault(regs*, void*)+0x41>
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	68 e8 b5 02 c0       	push   0xc002b5e8
c0014e1e:	e8 92 db ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e2c:	8d 50 19             	lea    edx,[eax+0x19]
c0014e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e32:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e35:	e9 d5 05 00 00       	jmp    c001540f <opcodeFault(regs*, void*)+0x616>
c0014e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e40:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014e43:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014e47:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e51:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014e54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e57:	8a 00                	mov    al,BYTE PTR [eax]
c0014e59:	3c f0                	cmp    al,0xf0
c0014e5b:	75 17                	jne    c0014e74 <opcodeFault(regs*, void*)+0x7b>
c0014e5d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e66:	8d 50 01             	lea    edx,[eax+0x1]
c0014e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e6f:	e9 da 00 00 00       	jmp    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014e74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e77:	8a 00                	mov    al,BYTE PTR [eax]
c0014e79:	3c f2                	cmp    al,0xf2
c0014e7b:	74 09                	je     c0014e86 <opcodeFault(regs*, void*)+0x8d>
c0014e7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e80:	8a 00                	mov    al,BYTE PTR [eax]
c0014e82:	3c f3                	cmp    al,0xf3
c0014e84:	75 1b                	jne    c0014ea1 <opcodeFault(regs*, void*)+0xa8>
c0014e86:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e8a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e93:	8d 50 01             	lea    edx,[eax+0x1]
c0014e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e9c:	e9 ad 00 00 00       	jmp    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014ea1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea6:	3c 66                	cmp    al,0x66
c0014ea8:	75 1f                	jne    c0014ec9 <opcodeFault(regs*, void*)+0xd0>
c0014eaa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014eae:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014eb2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ebb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ec4:	e9 85 00 00 00       	jmp    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014ec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ece:	3c 67                	cmp    al,0x67
c0014ed0:	75 18                	jne    c0014eea <opcodeFault(regs*, void*)+0xf1>
c0014ed2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ed6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014edf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ee8:	eb 64                	jmp    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014eea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eed:	8a 00                	mov    al,BYTE PTR [eax]
c0014eef:	3c 2e                	cmp    al,0x2e
c0014ef1:	74 09                	je     c0014efc <opcodeFault(regs*, void*)+0x103>
c0014ef3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef8:	3c 3e                	cmp    al,0x3e
c0014efa:	75 18                	jne    c0014f14 <opcodeFault(regs*, void*)+0x11b>
c0014efc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f00:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f09:	8d 50 01             	lea    edx,[eax+0x1]
c0014f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f12:	eb 3a                	jmp    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f17:	8a 00                	mov    al,BYTE PTR [eax]
c0014f19:	3c 36                	cmp    al,0x36
c0014f1b:	74 1b                	je     c0014f38 <opcodeFault(regs*, void*)+0x13f>
c0014f1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f20:	8a 00                	mov    al,BYTE PTR [eax]
c0014f22:	3c 26                	cmp    al,0x26
c0014f24:	74 12                	je     c0014f38 <opcodeFault(regs*, void*)+0x13f>
c0014f26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f29:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2b:	3c 64                	cmp    al,0x64
c0014f2d:	74 09                	je     c0014f38 <opcodeFault(regs*, void*)+0x13f>
c0014f2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f32:	8a 00                	mov    al,BYTE PTR [eax]
c0014f34:	3c 65                	cmp    al,0x65
c0014f36:	75 16                	jne    c0014f4e <opcodeFault(regs*, void*)+0x155>
c0014f38:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f3c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f42:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f45:	8d 50 01             	lea    edx,[eax+0x1]
c0014f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f51:	8a 00                	mov    al,BYTE PTR [eax]
c0014f53:	3c 0f                	cmp    al,0xf
c0014f55:	0f 85 ad 00 00 00    	jne    c0015008 <opcodeFault(regs*, void*)+0x20f>
c0014f5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f5e:	40                   	inc    eax
c0014f5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f61:	3c c2                	cmp    al,0xc2
c0014f63:	74 0e                	je     c0014f73 <opcodeFault(regs*, void*)+0x17a>
c0014f65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f68:	40                   	inc    eax
c0014f69:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6b:	3c c3                	cmp    al,0xc3
c0014f6d:	0f 85 95 00 00 00    	jne    c0015008 <opcodeFault(regs*, void*)+0x20f>
c0014f73:	83 ec 0c             	sub    esp,0xc
c0014f76:	68 0b b6 02 c0       	push   0xc002b60b
c0014f7b:	e8 35 da ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f89:	8d 50 01             	lea    edx,[eax+0x1]
c0014f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f98:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9a:	8d 50 fe             	lea    edx,[eax-0x2]
c0014f9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa0:	88 10                	mov    BYTE PTR [eax],dl
c0014fa2:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014fa5:	50                   	push   eax
c0014fa6:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014fa9:	50                   	push   eax
c0014faa:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014fad:	50                   	push   eax
c0014fae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fb1:	e8 b6 4a 00 00       	call   c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbf:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fc2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014fc5:	01 d0                	add    eax,edx
c0014fc7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fd3:	48                   	dec    eax
c0014fd4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fda:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014fdd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe3:	83 ec 04             	sub    esp,0x4
c0014fe6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014fe9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fec:	50                   	push   eax
c0014fed:	e8 c2 b1 fe ff       	call   c00001b4 <voodooXADD>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ff8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ffb:	01 c2                	add    edx,eax
c0014ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015000:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015003:	e9 07 04 00 00       	jmp    c001540f <opcodeFault(regs*, void*)+0x616>
c0015008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500b:	8a 00                	mov    al,BYTE PTR [eax]
c001500d:	3c 0f                	cmp    al,0xf
c001500f:	0f 85 8b 01 00 00    	jne    c00151a0 <opcodeFault(regs*, void*)+0x3a7>
c0015015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015018:	40                   	inc    eax
c0015019:	8a 00                	mov    al,BYTE PTR [eax]
c001501b:	3c c7                	cmp    al,0xc7
c001501d:	0f 86 7d 01 00 00    	jbe    c00151a0 <opcodeFault(regs*, void*)+0x3a7>
c0015023:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015026:	40                   	inc    eax
c0015027:	8a 00                	mov    al,BYTE PTR [eax]
c0015029:	3c cf                	cmp    al,0xcf
c001502b:	0f 87 6f 01 00 00    	ja     c00151a0 <opcodeFault(regs*, void*)+0x3a7>
c0015031:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015034:	40                   	inc    eax
c0015035:	8a 00                	mov    al,BYTE PTR [eax]
c0015037:	83 c0 38             	add    eax,0x38
c001503a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001503d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015041:	75 0b                	jne    c001504e <opcodeFault(regs*, void*)+0x255>
c0015043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015046:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015049:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001504c:	eb 75                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c001504e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015052:	75 0b                	jne    c001505f <opcodeFault(regs*, void*)+0x266>
c0015054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015057:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001505a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001505d:	eb 64                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c001505f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015063:	75 0b                	jne    c0015070 <opcodeFault(regs*, void*)+0x277>
c0015065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015068:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001506b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001506e:	eb 53                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c0015070:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015074:	75 0b                	jne    c0015081 <opcodeFault(regs*, void*)+0x288>
c0015076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015079:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001507c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001507f:	eb 42                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c0015081:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015085:	75 0b                	jne    c0015092 <opcodeFault(regs*, void*)+0x299>
c0015087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001508d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015090:	eb 31                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c0015092:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015096:	75 0b                	jne    c00150a3 <opcodeFault(regs*, void*)+0x2aa>
c0015098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001509e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150a1:	eb 20                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c00150a3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150a7:	75 0b                	jne    c00150b4 <opcodeFault(regs*, void*)+0x2bb>
c00150a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150b2:	eb 0f                	jmp    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c00150b4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00150b8:	75 09                	jne    c00150c3 <opcodeFault(regs*, void*)+0x2ca>
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150c3:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00150c7:	74 10                	je     c00150d9 <opcodeFault(regs*, void*)+0x2e0>
c00150c9:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00150d0:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00150d7:	eb 2d                	jmp    c0015106 <opcodeFault(regs*, void*)+0x30d>
c00150d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150dc:	c1 e0 18             	shl    eax,0x18
c00150df:	89 c2                	mov    edx,eax
c00150e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150e4:	c1 e0 08             	shl    eax,0x8
c00150e7:	25 00 00 ff 00       	and    eax,0xff0000
c00150ec:	09 c2                	or     edx,eax
c00150ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150f1:	c1 e8 08             	shr    eax,0x8
c00150f4:	25 00 ff 00 00       	and    eax,0xff00
c00150f9:	09 c2                	or     edx,eax
c00150fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150fe:	c1 e8 18             	shr    eax,0x18
c0015101:	09 d0                	or     eax,edx
c0015103:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015106:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001510a:	75 0b                	jne    c0015117 <opcodeFault(regs*, void*)+0x31e>
c001510c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015112:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015115:	eb 75                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c0015117:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001511b:	75 0b                	jne    c0015128 <opcodeFault(regs*, void*)+0x32f>
c001511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015120:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015123:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015126:	eb 64                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c0015128:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001512c:	75 0b                	jne    c0015139 <opcodeFault(regs*, void*)+0x340>
c001512e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015131:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015134:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015137:	eb 53                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c0015139:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001513d:	75 0b                	jne    c001514a <opcodeFault(regs*, void*)+0x351>
c001513f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015142:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015145:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015148:	eb 42                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c001514a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001514e:	75 0b                	jne    c001515b <opcodeFault(regs*, void*)+0x362>
c0015150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015153:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015156:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015159:	eb 31                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c001515b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001515f:	75 0b                	jne    c001516c <opcodeFault(regs*, void*)+0x373>
c0015161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015164:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015167:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001516a:	eb 20                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c001516c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015170:	75 0b                	jne    c001517d <opcodeFault(regs*, void*)+0x384>
c0015172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015175:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015178:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001517b:	eb 0f                	jmp    c001518c <opcodeFault(regs*, void*)+0x393>
c001517d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015181:	75 09                	jne    c001518c <opcodeFault(regs*, void*)+0x393>
c0015183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015186:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015189:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001518c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015192:	8d 50 02             	lea    edx,[eax+0x2]
c0015195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015198:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001519b:	e9 6f 02 00 00       	jmp    c001540f <opcodeFault(regs*, void*)+0x616>
c00151a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a3:	8a 00                	mov    al,BYTE PTR [eax]
c00151a5:	3c 0f                	cmp    al,0xf
c00151a7:	0f 85 8d 01 00 00    	jne    c001533a <opcodeFault(regs*, void*)+0x541>
c00151ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b0:	40                   	inc    eax
c00151b1:	8a 00                	mov    al,BYTE PTR [eax]
c00151b3:	3c c7                	cmp    al,0xc7
c00151b5:	0f 85 7f 01 00 00    	jne    c001533a <opcodeFault(regs*, void*)+0x541>
c00151bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151c4:	8d 50 01             	lea    edx,[eax+0x1]
c00151c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151cd:	8d 45 ba             	lea    eax,[ebp-0x46]
c00151d0:	50                   	push   eax
c00151d1:	8d 45 bb             	lea    eax,[ebp-0x45]
c00151d4:	50                   	push   eax
c00151d5:	8d 45 bc             	lea    eax,[ebp-0x44]
c00151d8:	50                   	push   eax
c00151d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151dc:	e8 8b 48 00 00       	call   c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00151e7:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00151ea:	83 f0 01             	xor    eax,0x1
c00151ed:	84 c0                	test   al,al
c00151ef:	0f 84 45 01 00 00    	je     c001533a <opcodeFault(regs*, void*)+0x541>
c00151f5:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00151f8:	3c 01                	cmp    al,0x1
c00151fa:	0f 85 3a 01 00 00    	jne    c001533a <opcodeFault(regs*, void*)+0x541>
c0015200:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015203:	83 f0 01             	xor    eax,0x1
c0015206:	84 c0                	test   al,al
c0015208:	0f 84 2c 01 00 00    	je     c001533a <opcodeFault(regs*, void*)+0x541>
c001520e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015211:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015214:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015217:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001521e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015221:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015224:	89 c2                	mov    edx,eax
c0015226:	b8 00 00 00 00       	mov    eax,0x0
c001522b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001522e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015234:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015237:	ba 00 00 00 00       	mov    edx,0x0
c001523c:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001523f:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015245:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015248:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001524b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015252:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015255:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015258:	89 c2                	mov    edx,eax
c001525a:	b8 00 00 00 00       	mov    eax,0x0
c001525f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015262:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015268:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001526b:	ba 00 00 00 00       	mov    edx,0x0
c0015270:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015273:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015276:	fa                   	cli    
c0015277:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001527c:	40                   	inc    eax
c001527d:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0015282:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015285:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015288:	8b 00                	mov    eax,DWORD PTR [eax]
c001528a:	89 c1                	mov    ecx,eax
c001528c:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001528f:	89 cb                	mov    ebx,ecx
c0015291:	89 d0                	mov    eax,edx
c0015293:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015296:	89 c6                	mov    esi,eax
c0015298:	89 f0                	mov    eax,esi
c001529a:	09 d8                	or     eax,ebx
c001529c:	85 c0                	test   eax,eax
c001529e:	75 21                	jne    c00152c1 <opcodeFault(regs*, void*)+0x4c8>
c00152a0:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00152a3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152a6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152a9:	89 01                	mov    DWORD PTR [ecx],eax
c00152ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b4:	83 c8 40             	or     eax,0x40
c00152b7:	89 c2                	mov    edx,eax
c00152b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00152bf:	eb 3e                	jmp    c00152ff <opcodeFault(regs*, void*)+0x506>
c00152c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00152c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152cf:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00152d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00152d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152db:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152de:	89 d0                	mov    eax,edx
c00152e0:	31 d2                	xor    edx,edx
c00152e2:	89 c3                	mov    ebx,eax
c00152e4:	89 d6                	mov    esi,edx
c00152e6:	89 da                	mov    edx,ebx
c00152e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152eb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00152ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152f4:	83 e0 bf             	and    eax,0xffffffbf
c00152f7:	89 c2                	mov    edx,eax
c00152f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00152ff:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015304:	48                   	dec    eax
c0015305:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001530a:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001530f:	85 c0                	test   eax,eax
c0015311:	75 01                	jne    c0015314 <opcodeFault(regs*, void*)+0x51b>
c0015313:	fb                   	sti    
c0015314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015317:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001531d:	01 c2                	add    edx,eax
c001531f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015322:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015325:	83 ec 0c             	sub    esp,0xc
c0015328:	68 1a b6 02 c0       	push   0xc002b61a
c001532d:	e8 83 d6 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	e9 d5 00 00 00       	jmp    c001540f <opcodeFault(regs*, void*)+0x616>
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	68 2d b6 02 c0       	push   0xc002b62d
c0015342:	e8 6e d6 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015353:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015356:	c1 e0 04             	shl    eax,0x4
c0015359:	01 d0                	add    eax,edx
c001535b:	83 c0 03             	add    eax,0x3
c001535e:	8a 00                	mov    al,BYTE PTR [eax]
c0015360:	0f b6 d8             	movzx  ebx,al
c0015363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015366:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001536f:	c1 e0 04             	shl    eax,0x4
c0015372:	01 d0                	add    eax,edx
c0015374:	83 c0 02             	add    eax,0x2
c0015377:	8a 00                	mov    al,BYTE PTR [eax]
c0015379:	0f b6 c8             	movzx  ecx,al
c001537c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015385:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015388:	c1 e0 04             	shl    eax,0x4
c001538b:	01 d0                	add    eax,edx
c001538d:	40                   	inc    eax
c001538e:	8a 00                	mov    al,BYTE PTR [eax]
c0015390:	0f b6 d0             	movzx  edx,al
c0015393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015396:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001539f:	c1 e0 04             	shl    eax,0x4
c00153a2:	01 f0                	add    eax,esi
c00153a4:	8a 00                	mov    al,BYTE PTR [eax]
c00153a6:	0f b6 c0             	movzx  eax,al
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	53                   	push   ebx
c00153ad:	51                   	push   ecx
c00153ae:	52                   	push   edx
c00153af:	50                   	push   eax
c00153b0:	68 40 b6 02 c0       	push   0xc002b640
c00153b5:	e8 fb d5 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00153ba:	83 c4 20             	add    esp,0x20
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c3:	83 c0 03             	add    eax,0x3
c00153c6:	8a 00                	mov    al,BYTE PTR [eax]
c00153c8:	0f b6 d8             	movzx  ebx,al
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d1:	83 c0 02             	add    eax,0x2
c00153d4:	8a 00                	mov    al,BYTE PTR [eax]
c00153d6:	0f b6 c8             	movzx  ecx,al
c00153d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153df:	40                   	inc    eax
c00153e0:	8a 00                	mov    al,BYTE PTR [eax]
c00153e2:	0f b6 d0             	movzx  edx,al
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153eb:	8a 00                	mov    al,BYTE PTR [eax]
c00153ed:	0f b6 c0             	movzx  eax,al
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	53                   	push   ebx
c00153f4:	51                   	push   ecx
c00153f5:	52                   	push   edx
c00153f6:	50                   	push   eax
c00153f7:	68 68 b6 02 c0       	push   0xc002b668
c00153fc:	e8 b4 d5 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0015401:	83 c4 20             	add    esp,0x20
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001540a:	e8 41 f4 ff ff       	call   c0014850 <displayDebugInfo(regs*)>
c001540f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015412:	5b                   	pop    ebx
c0015413:	5e                   	pop    esi
c0015414:	5d                   	pop    ebp
c0015415:	c3                   	ret    

c0015416 <displayProgramFault(char const*)>:
c0015416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001541b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001541e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015424:	85 c0                	test   eax,eax
c0015426:	74 15                	je     c001543d <displayProgramFault(char const*)+0x27>
c0015428:	83 ec 0c             	sub    esp,0xc
c001542b:	6a 04                	push   0x4
c001542d:	6a 0f                	push   0xf
c001542f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015433:	50                   	push   eax
c0015434:	e8 e7 b4 ff ff       	call   c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015439:	83 c4 1c             	add    esp,0x1c
c001543c:	c3                   	ret    
c001543d:	c3                   	ret    

c001543e <setupInterruptController()>:
c001543e:	55                   	push   ebp
c001543f:	89 e5                	mov    ebp,esp
c0015441:	53                   	push   ebx
c0015442:	83 ec 24             	sub    esp,0x24
c0015445:	b8 00 00 00 00       	mov    eax,0x0
c001544a:	85 c0                	test   eax,eax
c001544c:	0f 95 c0             	setne  al
c001544f:	84 c0                	test   al,al
c0015451:	74 5b                	je     c00154ae <setupInterruptController()+0x70>
c0015453:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001545a:	83 ec 0c             	sub    esp,0xc
c001545d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015460:	e8 f8 a4 ff ff       	call   c000f95d <malloc>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	89 c3                	mov    ebx,eax
c001546a:	83 ec 0c             	sub    esp,0xc
c001546d:	53                   	push   ebx
c001546e:	e8 89 08 01 00       	call   c0025cfc <APIC::APIC()>
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015479:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001547c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001547f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015481:	83 c0 08             	add    eax,0x8
c0015484:	8b 00                	mov    eax,DWORD PTR [eax]
c0015486:	6a 00                	push   0x0
c0015488:	6a 00                	push   0x0
c001548a:	6a 00                	push   0x0
c001548c:	52                   	push   edx
c001548d:	ff d0                	call   eax
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015497:	83 ec 08             	sub    esp,0x8
c001549a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001549d:	50                   	push   eax
c001549e:	e8 4b e9 ff ff       	call   c0013dee <Device::addChild(Device*)>
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154a9:	e9 79 03 00 00       	jmp    c0015827 <setupInterruptController()+0x3e9>
c00154ae:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c00154b3:	84 c0                	test   al,al
c00154b5:	75 14                	jne    c00154cb <setupInterruptController()+0x8d>
c00154b7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00154bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00154c2:	83 e2 fe             	and    edx,0xfffffffe
c00154c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00154cb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00154d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00154d6:	83 e0 01             	and    eax,0x1
c00154d9:	84 c0                	test   al,al
c00154db:	0f 95 c0             	setne  al
c00154de:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00154e1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154ee:	e8 6a a4 ff ff       	call   c000f95d <malloc>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	89 c3                	mov    ebx,eax
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	53                   	push   ebx
c00154fc:	e8 53 0d 01 00       	call   c0026254 <PIC::PIC()>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015507:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	83 c0 08             	add    eax,0x8
c0015512:	8b 00                	mov    eax,DWORD PTR [eax]
c0015514:	6a 00                	push   0x0
c0015516:	6a 00                	push   0x0
c0015518:	6a 00                	push   0x0
c001551a:	52                   	push   edx
c001551b:	ff d0                	call   eax
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015524:	74 73                	je     c0015599 <setupInterruptController()+0x15b>
c0015526:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552c:	8b 00                	mov    eax,DWORD PTR [eax]
c001552e:	83 c0 0c             	add    eax,0xc
c0015531:	8b 00                	mov    eax,DWORD PTR [eax]
c0015533:	6a 00                	push   0x0
c0015535:	6a 00                	push   0x0
c0015537:	6a 00                	push   0x0
c0015539:	52                   	push   edx
c001553a:	ff d0                	call   eax
c001553c:	83 c4 10             	add    esp,0x10
c001553f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015543:	74 15                	je     c001555a <setupInterruptController()+0x11c>
c0015545:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015548:	8b 00                	mov    eax,DWORD PTR [eax]
c001554a:	83 c0 04             	add    eax,0x4
c001554d:	8b 00                	mov    eax,DWORD PTR [eax]
c001554f:	83 ec 0c             	sub    esp,0xc
c0015552:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015555:	ff d0                	call   eax
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015561:	83 ec 0c             	sub    esp,0xc
c0015564:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015567:	e8 f1 a3 ff ff       	call   c000f95d <malloc>
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	89 c3                	mov    ebx,eax
c0015571:	83 ec 0c             	sub    esp,0xc
c0015574:	53                   	push   ebx
c0015575:	e8 82 07 01 00       	call   c0025cfc <APIC::APIC()>
c001557a:	83 c4 10             	add    esp,0x10
c001557d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015580:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015583:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015586:	8b 00                	mov    eax,DWORD PTR [eax]
c0015588:	83 c0 08             	add    eax,0x8
c001558b:	8b 00                	mov    eax,DWORD PTR [eax]
c001558d:	6a 00                	push   0x0
c001558f:	6a 00                	push   0x0
c0015591:	6a 00                	push   0x0
c0015593:	52                   	push   edx
c0015594:	ff d0                	call   eax
c0015596:	83 c4 10             	add    esp,0x10
c0015599:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001559e:	83 ec 08             	sub    esp,0x8
c00155a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a4:	50                   	push   eax
c00155a5:	e8 44 e8 ff ff       	call   c0013dee <Device::addChild(Device*)>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	c7 05 48 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e748,0x0
c00155b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bc:	83 c0 24             	add    eax,0x24
c00155bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c1:	6a 00                	push   0x0
c00155c3:	68 da 4d 01 c0       	push   0xc0014dda
c00155c8:	6a 00                	push   0x0
c00155ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155cd:	ff d0                	call   eax
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d7:	83 c0 24             	add    eax,0x24
c00155da:	8b 00                	mov    eax,DWORD PTR [eax]
c00155dc:	6a 00                	push   0x0
c00155de:	68 da 4d 01 c0       	push   0xc0014dda
c00155e3:	6a 01                	push   0x1
c00155e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e8:	ff d0                	call   eax
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f2:	83 c0 24             	add    eax,0x24
c00155f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f7:	6a 00                	push   0x0
c00155f9:	68 ad 46 01 c0       	push   0xc00146ad
c00155fe:	6a 02                	push   0x2
c0015600:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015603:	ff d0                	call   eax
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560b:	8b 00                	mov    eax,DWORD PTR [eax]
c001560d:	83 c0 24             	add    eax,0x24
c0015610:	8b 00                	mov    eax,DWORD PTR [eax]
c0015612:	6a 00                	push   0x0
c0015614:	68 da 4d 01 c0       	push   0xc0014dda
c0015619:	6a 03                	push   0x3
c001561b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001561e:	ff d0                	call   eax
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015626:	8b 00                	mov    eax,DWORD PTR [eax]
c0015628:	83 c0 24             	add    eax,0x24
c001562b:	8b 00                	mov    eax,DWORD PTR [eax]
c001562d:	6a 00                	push   0x0
c001562f:	68 da 4d 01 c0       	push   0xc0014dda
c0015634:	6a 04                	push   0x4
c0015636:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015639:	ff d0                	call   eax
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015641:	8b 00                	mov    eax,DWORD PTR [eax]
c0015643:	83 c0 24             	add    eax,0x24
c0015646:	8b 00                	mov    eax,DWORD PTR [eax]
c0015648:	6a 00                	push   0x0
c001564a:	68 da 4d 01 c0       	push   0xc0014dda
c001564f:	6a 05                	push   0x5
c0015651:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015654:	ff d0                	call   eax
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565c:	8b 00                	mov    eax,DWORD PTR [eax]
c001565e:	83 c0 24             	add    eax,0x24
c0015661:	8b 00                	mov    eax,DWORD PTR [eax]
c0015663:	6a 00                	push   0x0
c0015665:	68 f9 4d 01 c0       	push   0xc0014df9
c001566a:	6a 06                	push   0x6
c001566c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566f:	ff d0                	call   eax
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	83 c0 24             	add    eax,0x24
c001567c:	8b 00                	mov    eax,DWORD PTR [eax]
c001567e:	6a 00                	push   0x0
c0015680:	68 df 4c 01 c0       	push   0xc0014cdf
c0015685:	6a 07                	push   0x7
c0015687:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568a:	ff d0                	call   eax
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	83 c0 24             	add    eax,0x24
c0015697:	8b 00                	mov    eax,DWORD PTR [eax]
c0015699:	6a 00                	push   0x0
c001569b:	68 c8 44 01 c0       	push   0xc00144c8
c00156a0:	6a 08                	push   0x8
c00156a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a5:	ff d0                	call   eax
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	83 c0 24             	add    eax,0x24
c00156b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b4:	6a 00                	push   0x0
c00156b6:	68 da 4d 01 c0       	push   0xc0014dda
c00156bb:	6a 09                	push   0x9
c00156bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c0:	ff d0                	call   eax
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ca:	83 c0 24             	add    eax,0x24
c00156cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cf:	6a 00                	push   0x0
c00156d1:	68 da 4d 01 c0       	push   0xc0014dda
c00156d6:	6a 0a                	push   0xa
c00156d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156db:	ff d0                	call   eax
c00156dd:	83 c4 10             	add    esp,0x10
c00156e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e5:	83 c0 24             	add    eax,0x24
c00156e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ea:	6a 00                	push   0x0
c00156ec:	68 da 4d 01 c0       	push   0xc0014dda
c00156f1:	6a 0b                	push   0xb
c00156f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f6:	ff d0                	call   eax
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015700:	83 c0 24             	add    eax,0x24
c0015703:	8b 00                	mov    eax,DWORD PTR [eax]
c0015705:	6a 00                	push   0x0
c0015707:	68 da 4d 01 c0       	push   0xc0014dda
c001570c:	6a 0c                	push   0xc
c001570e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015711:	ff d0                	call   eax
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015719:	8b 00                	mov    eax,DWORD PTR [eax]
c001571b:	83 c0 24             	add    eax,0x24
c001571e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015720:	6a 00                	push   0x0
c0015722:	68 52 4d 01 c0       	push   0xc0014d52
c0015727:	6a 0d                	push   0xd
c0015729:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001572c:	ff d0                	call   eax
c001572e:	83 c4 10             	add    esp,0x10
c0015731:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015734:	8b 00                	mov    eax,DWORD PTR [eax]
c0015736:	83 c0 24             	add    eax,0x24
c0015739:	8b 00                	mov    eax,DWORD PTR [eax]
c001573b:	6a 00                	push   0x0
c001573d:	68 8b 4d 01 c0       	push   0xc0014d8b
c0015742:	6a 0e                	push   0xe
c0015744:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015747:	ff d0                	call   eax
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015751:	83 c0 24             	add    eax,0x24
c0015754:	8b 00                	mov    eax,DWORD PTR [eax]
c0015756:	6a 00                	push   0x0
c0015758:	68 da 4d 01 c0       	push   0xc0014dda
c001575d:	6a 0f                	push   0xf
c001575f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015762:	ff d0                	call   eax
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001576a:	8b 00                	mov    eax,DWORD PTR [eax]
c001576c:	83 c0 24             	add    eax,0x24
c001576f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015771:	6a 00                	push   0x0
c0015773:	68 da 4d 01 c0       	push   0xc0014dda
c0015778:	6a 10                	push   0x10
c001577a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001577d:	ff d0                	call   eax
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015785:	8b 00                	mov    eax,DWORD PTR [eax]
c0015787:	83 c0 24             	add    eax,0x24
c001578a:	8b 00                	mov    eax,DWORD PTR [eax]
c001578c:	6a 00                	push   0x0
c001578e:	68 da 4d 01 c0       	push   0xc0014dda
c0015793:	6a 11                	push   0x11
c0015795:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015798:	ff d0                	call   eax
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a2:	83 c0 24             	add    eax,0x24
c00157a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a7:	6a 00                	push   0x0
c00157a9:	68 da 4d 01 c0       	push   0xc0014dda
c00157ae:	6a 12                	push   0x12
c00157b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b3:	ff d0                	call   eax
c00157b5:	83 c4 10             	add    esp,0x10
c00157b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bd:	83 c0 24             	add    eax,0x24
c00157c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c2:	6a 00                	push   0x0
c00157c4:	68 da 4d 01 c0       	push   0xc0014dda
c00157c9:	6a 13                	push   0x13
c00157cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ce:	ff d0                	call   eax
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d8:	83 c0 24             	add    eax,0x24
c00157db:	8b 00                	mov    eax,DWORD PTR [eax]
c00157dd:	6a 00                	push   0x0
c00157df:	68 da 4d 01 c0       	push   0xc0014dda
c00157e4:	6a 14                	push   0x14
c00157e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e9:	ff d0                	call   eax
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f3:	83 c0 24             	add    eax,0x24
c00157f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f8:	6a 00                	push   0x0
c00157fa:	68 da 4d 01 c0       	push   0xc0014dda
c00157ff:	6a 1e                	push   0x1e
c0015801:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015804:	ff d0                	call   eax
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001580c:	8b 00                	mov    eax,DWORD PTR [eax]
c001580e:	83 c0 24             	add    eax,0x24
c0015811:	8b 00                	mov    eax,DWORD PTR [eax]
c0015813:	6a 00                	push   0x0
c0015815:	68 45 c5 01 c0       	push   0xc001c545
c001581a:	6a 60                	push   0x60
c001581c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581f:	ff d0                	call   eax
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015827:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001582a:	c9                   	leave  
c001582b:	c3                   	ret    

c001582c <InterruptController::convertLegacyIRQNumber(int)>:
c001582c:	55                   	push   ebp
c001582d:	89 e5                	mov    ebp,esp
c001582f:	83 ec 08             	sub    esp,0x8
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	83 ec 0c             	sub    esp,0xc
c0015838:	50                   	push   eax
c0015839:	e8 b0 e8 ff ff       	call   c00140ee <Device::getName()>
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	8a 00                	mov    al,BYTE PTR [eax]
c0015843:	3c 41                	cmp    al,0x41
c0015845:	0f 94 c0             	sete   al
c0015848:	84 c0                	test   al,al
c001584a:	74 28                	je     c0015874 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001584c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015850:	7f 12                	jg     c0015864 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015855:	05 20 d8 02 c0       	add    eax,0xc002d820
c001585a:	8a 00                	mov    al,BYTE PTR [eax]
c001585c:	0f b6 c0             	movzx  eax,al
c001585f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015862:	eb 10                	jmp    c0015874 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	68 90 b6 02 c0       	push   0xc002b690
c001586c:	e8 e2 4a 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015877:	c9                   	leave  
c0015878:	c3                   	ret    
c0015879:	90                   	nop

c001587a <startGUI(void*)>:
c001587a:	55                   	push   ebp
c001587b:	89 e5                	mov    ebp,esp
c001587d:	53                   	push   ebx
c001587e:	83 ec 04             	sub    esp,0x4
c0015881:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015886:	48                   	dec    eax
c0015887:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001588c:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015891:	85 c0                	test   eax,eax
c0015893:	75 01                	jne    c0015896 <startGUI(void*)+0x1c>
c0015895:	fb                   	sti    
c0015896:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c001589c:	83 ec 08             	sub    esp,0x8
c001589f:	6a 01                	push   0x1
c00158a1:	68 10 b7 02 c0       	push   0xc002b710
c00158a6:	e8 75 7c 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c00158ab:	83 c4 10             	add    esp,0x10
c00158ae:	83 ec 08             	sub    esp,0x8
c00158b1:	53                   	push   ebx
c00158b2:	50                   	push   eax
c00158b3:	e8 99 7e 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c00158b8:	83 c4 10             	add    esp,0x10
c00158bb:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c00158c1:	83 ec 08             	sub    esp,0x8
c00158c4:	6a 01                	push   0x1
c00158c6:	68 2a b7 02 c0       	push   0xc002b72a
c00158cb:	e8 50 7c 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	83 ec 08             	sub    esp,0x8
c00158d6:	53                   	push   ebx
c00158d7:	50                   	push   eax
c00158d8:	e8 74 7e 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	90                   	nop
c00158e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158e4:	c9                   	leave  
c00158e5:	c3                   	ret    

c00158e6 <startGUIVESA(void*)>:
c00158e6:	55                   	push   ebp
c00158e7:	89 e5                	mov    ebp,esp
c00158e9:	53                   	push   ebx
c00158ea:	83 ec 04             	sub    esp,0x4
c00158ed:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00158f2:	48                   	dec    eax
c00158f3:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c00158f8:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00158fd:	85 c0                	test   eax,eax
c00158ff:	75 01                	jne    c0015902 <startGUIVESA(void*)+0x1c>
c0015901:	fb                   	sti    
c0015902:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015908:	83 ec 08             	sub    esp,0x8
c001590b:	6a 01                	push   0x1
c001590d:	68 44 b7 02 c0       	push   0xc002b744
c0015912:	e8 09 7c 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	83 ec 08             	sub    esp,0x8
c001591d:	53                   	push   ebx
c001591e:	50                   	push   eax
c001591f:	e8 2d 7e 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c001592d:	83 ec 08             	sub    esp,0x8
c0015930:	6a 01                	push   0x1
c0015932:	68 2a b7 02 c0       	push   0xc002b72a
c0015937:	e8 e4 7b 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	83 ec 08             	sub    esp,0x8
c0015942:	53                   	push   ebx
c0015943:	50                   	push   eax
c0015944:	e8 08 7e 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	90                   	nop
c001594d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015950:	c9                   	leave  
c0015951:	c3                   	ret    

c0015952 <sendKeyToTerminal(unsigned char)>:
c0015952:	55                   	push   ebp
c0015953:	89 e5                	mov    ebp,esp
c0015955:	83 ec 28             	sub    esp,0x28
c0015958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001595e:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015963:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015967:	83 ec 08             	sub    esp,0x8
c001596a:	52                   	push   edx
c001596b:	50                   	push   eax
c001596c:	e8 57 b4 ff ff       	call   c0010dc8 <VgaText::receiveKey(unsigned char)>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015978:	0f 85 8f 00 00 00    	jne    c0015a0d <sendKeyToTerminal(unsigned char)+0xbb>
c001597e:	fa                   	cli    
c001597f:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015984:	40                   	inc    eax
c0015985:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001598a:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001598f:	40                   	inc    eax
c0015990:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c0015995:	a1 60 e7 02 c0       	mov    eax,ds:0xc002e760
c001599a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001599d:	c7 05 60 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e760,0x0
c00159a7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159ab:	74 1f                	je     c00159cc <sendKeyToTerminal(unsigned char)+0x7a>
c00159ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159c2:	e8 b0 89 00 00       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	eb db                	jmp    c00159a7 <sendKeyToTerminal(unsigned char)+0x55>
c00159cc:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c00159d1:	48                   	dec    eax
c00159d2:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c00159d7:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c00159dc:	85 c0                	test   eax,eax
c00159de:	75 18                	jne    c00159f8 <sendKeyToTerminal(unsigned char)+0xa6>
c00159e0:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c00159e5:	85 c0                	test   eax,eax
c00159e7:	74 0f                	je     c00159f8 <sendKeyToTerminal(unsigned char)+0xa6>
c00159e9:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c00159f3:	e8 ed 84 00 00       	call   c001dee5 <schedule()>
c00159f8:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00159fd:	48                   	dec    eax
c00159fe:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0015a03:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015a08:	85 c0                	test   eax,eax
c0015a0a:	75 01                	jne    c0015a0d <sendKeyToTerminal(unsigned char)+0xbb>
c0015a0c:	fb                   	sti    
c0015a0d:	90                   	nop
c0015a0e:	c9                   	leave  
c0015a0f:	c3                   	ret    

c0015a10 <sendKeyboardToken(KeyboardToken)>:
c0015a10:	55                   	push   ebp
c0015a11:	89 e5                	mov    ebp,esp
c0015a13:	83 ec 18             	sub    esp,0x18
c0015a16:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1c:	0f b7 c0             	movzx  eax,ax
c0015a1f:	83 f2 01             	xor    edx,0x1
c0015a22:	88 90 80 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1880],dl
c0015a28:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015a2d:	85 c0                	test   eax,eax
c0015a2f:	74 24                	je     c0015a55 <sendKeyboardToken(KeyboardToken)+0x45>
c0015a31:	8b 0d 68 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e768
c0015a37:	83 ec 04             	sub    esp,0x4
c0015a3a:	68 80 e7 02 c0       	push   0xc002e780
c0015a3f:	83 ec 08             	sub    esp,0x8
c0015a42:	89 e2                	mov    edx,esp
c0015a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a47:	89 02                	mov    DWORD PTR [edx],eax
c0015a49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a4c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a50:	ff d1                	call   ecx
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a58:	66 3d 03 02          	cmp    ax,0x203
c0015a5c:	75 07                	jne    c0015a65 <sendKeyboardToken(KeyboardToken)+0x55>
c0015a5e:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015a63:	84 c0                	test   al,al
c0015a65:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a69:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a6c:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015a71:	38 c2                	cmp    dl,al
c0015a73:	74 1c                	je     c0015a91 <sendKeyboardToken(KeyboardToken)+0x81>
c0015a75:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a78:	a2 88 eb 02 c0       	mov    ds:0xc002eb88,al
c0015a7d:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015a82:	0f b6 c0             	movzx  eax,al
c0015a85:	83 ec 0c             	sub    esp,0xc
c0015a88:	50                   	push   eax
c0015a89:	e8 7a a9 ff ff       	call   c0010408 <setTerminalScrollLock(bool)>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a94:	84 c0                	test   al,al
c0015a96:	0f 84 ae 00 00 00    	je     c0015b4a <sendKeyboardToken(KeyboardToken)+0x13a>
c0015a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9f:	66 3d 10 03          	cmp    ax,0x310
c0015aa3:	75 06                	jne    c0015aab <sendKeyboardToken(KeyboardToken)+0x9b>
c0015aa5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aae:	66 3d 11 03          	cmp    ax,0x311
c0015ab2:	75 06                	jne    c0015aba <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ab4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abd:	66 3d 12 03          	cmp    ax,0x312
c0015ac1:	75 06                	jne    c0015ac9 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ac3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acc:	66 3d 13 03          	cmp    ax,0x313
c0015ad0:	75 06                	jne    c0015ad8 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ad2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adb:	66 3d 14 03          	cmp    ax,0x314
c0015adf:	75 06                	jne    c0015ae7 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ae1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aea:	66 3d 15 03          	cmp    ax,0x315
c0015aee:	75 06                	jne    c0015af6 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015af0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af9:	66 3d 16 03          	cmp    ax,0x316
c0015afd:	75 06                	jne    c0015b05 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015aff:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b08:	66 3d 17 03          	cmp    ax,0x317
c0015b0c:	75 06                	jne    c0015b14 <sendKeyboardToken(KeyboardToken)+0x104>
c0015b0e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b17:	66 3d 18 03          	cmp    ax,0x318
c0015b1b:	75 06                	jne    c0015b23 <sendKeyboardToken(KeyboardToken)+0x113>
c0015b1d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b26:	66 3d 19 03          	cmp    ax,0x319
c0015b2a:	75 06                	jne    c0015b32 <sendKeyboardToken(KeyboardToken)+0x122>
c0015b2c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b35:	66 3d 1a 03          	cmp    ax,0x31a
c0015b39:	0f 85 c9 00 00 00    	jne    c0015c08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b3f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b45:	e9 be 00 00 00       	jmp    c0015c08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4d:	66 3d 10 03          	cmp    ax,0x310
c0015b51:	75 0a                	jne    c0015b5d <sendKeyboardToken(KeyboardToken)+0x14d>
c0015b53:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b59:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b60:	66 3d 11 03          	cmp    ax,0x311
c0015b64:	75 0a                	jne    c0015b70 <sendKeyboardToken(KeyboardToken)+0x160>
c0015b66:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b6c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b73:	66 3d 12 03          	cmp    ax,0x312
c0015b77:	75 0a                	jne    c0015b83 <sendKeyboardToken(KeyboardToken)+0x173>
c0015b79:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b7f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b86:	66 3d 13 03          	cmp    ax,0x313
c0015b8a:	75 0a                	jne    c0015b96 <sendKeyboardToken(KeyboardToken)+0x186>
c0015b8c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b92:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b99:	66 3d 14 03          	cmp    ax,0x314
c0015b9d:	75 0a                	jne    c0015ba9 <sendKeyboardToken(KeyboardToken)+0x199>
c0015b9f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ba5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bac:	66 3d 15 03          	cmp    ax,0x315
c0015bb0:	75 0a                	jne    c0015bbc <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015bb2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bb8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbf:	66 3d 16 03          	cmp    ax,0x316
c0015bc3:	75 0a                	jne    c0015bcf <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015bc5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015bcb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd2:	66 3d 17 03          	cmp    ax,0x317
c0015bd6:	75 0a                	jne    c0015be2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015bd8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bde:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be5:	66 3d 18 03          	cmp    ax,0x318
c0015be9:	75 0a                	jne    c0015bf5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015beb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bf1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf8:	66 3d 19 03          	cmp    ax,0x319
c0015bfc:	75 0a                	jne    c0015c08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bfe:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0b:	66 3d 00 02          	cmp    ax,0x200
c0015c0f:	75 2c                	jne    c0015c3d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c11:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0015c16:	83 f0 01             	xor    eax,0x1
c0015c19:	84 c0                	test   al,al
c0015c1b:	74 20                	je     c0015c3d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c1d:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0015c22:	6a 01                	push   0x1
c0015c24:	6a 00                	push   0x0
c0015c26:	68 7a 58 01 c0       	push   0xc001587a
c0015c2b:	50                   	push   eax
c0015c2c:	e8 8f 80 00 00       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c0015c3b:	eb 33                	jmp    c0015c70 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c40:	66 3d 01 02          	cmp    ax,0x201
c0015c44:	75 2a                	jne    c0015c70 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c46:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0015c4b:	83 f0 01             	xor    eax,0x1
c0015c4e:	84 c0                	test   al,al
c0015c50:	74 1e                	je     c0015c70 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c52:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0015c57:	6a 01                	push   0x1
c0015c59:	6a 00                	push   0x0
c0015c5b:	68 e6 58 01 c0       	push   0xc00158e6
c0015c60:	50                   	push   eax
c0015c61:	e8 5a 80 00 00       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c0015c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c73:	66 3d 1d 03          	cmp    ax,0x31d
c0015c77:	75 06                	jne    c0015c7f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c79:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c82:	66 3d 1c 03          	cmp    ax,0x31c
c0015c86:	75 06                	jne    c0015c8e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c88:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c91:	66 3d 1b 03          	cmp    ax,0x31b
c0015c95:	75 06                	jne    c0015c9d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015c97:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca0:	66 3d 1e 03          	cmp    ax,0x31e
c0015ca4:	75 06                	jne    c0015cac <sendKeyboardToken(KeyboardToken)+0x29c>
c0015ca6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015caf:	66 3d 1f 03          	cmp    ax,0x31f
c0015cb3:	75 06                	jne    c0015cbb <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015cb5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbe:	66 3d 1a 03          	cmp    ax,0x31a
c0015cc2:	75 06                	jne    c0015cca <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015cc4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015cca:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cd1:	83 f0 01             	xor    eax,0x1
c0015cd4:	84 c0                	test   al,al
c0015cd6:	74 77                	je     c0015d4f <sendKeyboardToken(KeyboardToken)+0x33f>
c0015cd8:	a0 81 e8 02 c0       	mov    al,ds:0xc002e881
c0015cdd:	84 c0                	test   al,al
c0015cdf:	74 41                	je     c0015d22 <sendKeyboardToken(KeyboardToken)+0x312>
c0015ce1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ce5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ce9:	74 2b                	je     c0015d16 <sendKeyboardToken(KeyboardToken)+0x306>
c0015ceb:	8b 15 84 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb84
c0015cf1:	89 d0                	mov    eax,edx
c0015cf3:	c1 e0 02             	shl    eax,0x2
c0015cf6:	01 d0                	add    eax,edx
c0015cf8:	01 c0                	add    eax,eax
c0015cfa:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c0015cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d02:	0f b7 c0             	movzx  eax,ax
c0015d05:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d08:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0015d0d:	01 d0                	add    eax,edx
c0015d0f:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c0015d14:	eb 6d                	jmp    c0015d83 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d16:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c0015d20:	eb 61                	jmp    c0015d83 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d22:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0015d27:	85 c0                	test   eax,eax
c0015d29:	74 18                	je     c0015d43 <sendKeyboardToken(KeyboardToken)+0x333>
c0015d2b:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0015d30:	0f b6 c0             	movzx  eax,al
c0015d33:	83 ec 0c             	sub    esp,0xc
c0015d36:	50                   	push   eax
c0015d37:	e8 16 fc ff ff       	call   c0015952 <sendKeyToTerminal(unsigned char)>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d43:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c0015d4d:	eb 34                	jmp    c0015d83 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d52:	66 3d 01 01          	cmp    ax,0x101
c0015d56:	75 2b                	jne    c0015d83 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d58:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0015d5d:	85 c0                	test   eax,eax
c0015d5f:	74 18                	je     c0015d79 <sendKeyboardToken(KeyboardToken)+0x369>
c0015d61:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0015d66:	0f b6 c0             	movzx  eax,al
c0015d69:	83 ec 0c             	sub    esp,0xc
c0015d6c:	50                   	push   eax
c0015d6d:	e8 e0 fb ff ff       	call   c0015952 <sendKeyToTerminal(unsigned char)>
c0015d72:	83 c4 10             	add    esp,0x10
c0015d75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d79:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c0015d83:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d86:	83 f0 01             	xor    eax,0x1
c0015d89:	84 c0                	test   al,al
c0015d8b:	74 4c                	je     c0015dd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d90:	83 f0 01             	xor    eax,0x1
c0015d93:	84 c0                	test   al,al
c0015d95:	74 42                	je     c0015dd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d97:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015d9c:	83 f0 01             	xor    eax,0x1
c0015d9f:	84 c0                	test   al,al
c0015da1:	74 36                	je     c0015dd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da6:	66 83 f8 1f          	cmp    ax,0x1f
c0015daa:	76 09                	jbe    c0015db5 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015daf:	66 83 f8 7e          	cmp    ax,0x7e
c0015db3:	76 12                	jbe    c0015dc7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db8:	66 83 f8 0a          	cmp    ax,0xa
c0015dbc:	74 09                	je     c0015dc7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc1:	66 83 f8 08          	cmp    ax,0x8
c0015dc5:	75 12                	jne    c0015dd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dca:	0f b6 c0             	movzx  eax,al
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	50                   	push   eax
c0015dd1:	e8 7c fb ff ff       	call   c0015952 <sendKeyToTerminal(unsigned char)>
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ddc:	83 f0 01             	xor    eax,0x1
c0015ddf:	84 c0                	test   al,al
c0015de1:	74 4f                	je     c0015e32 <sendKeyboardToken(KeyboardToken)+0x422>
c0015de3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015de6:	83 f0 01             	xor    eax,0x1
c0015de9:	84 c0                	test   al,al
c0015deb:	74 45                	je     c0015e32 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ded:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015df2:	84 c0                	test   al,al
c0015df4:	74 3c                	je     c0015e32 <sendKeyboardToken(KeyboardToken)+0x422>
c0015df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df9:	66 83 f8 3f          	cmp    ax,0x3f
c0015dfd:	76 33                	jbe    c0015e32 <sendKeyboardToken(KeyboardToken)+0x422>
c0015dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e02:	66 83 f8 7f          	cmp    ax,0x7f
c0015e06:	77 2a                	ja     c0015e32 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0b:	88 c2                	mov    dl,al
c0015e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e10:	66 83 f8 5f          	cmp    ax,0x5f
c0015e14:	76 04                	jbe    c0015e1a <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e16:	b0 20                	mov    al,0x20
c0015e18:	eb 02                	jmp    c0015e1c <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e1a:	b0 00                	mov    al,0x0
c0015e1c:	29 c2                	sub    edx,eax
c0015e1e:	88 d0                	mov    al,dl
c0015e20:	83 e8 40             	sub    eax,0x40
c0015e23:	0f b6 c0             	movzx  eax,al
c0015e26:	83 ec 0c             	sub    esp,0xc
c0015e29:	50                   	push   eax
c0015e2a:	e8 23 fb ff ff       	call   c0015952 <sendKeyToTerminal(unsigned char)>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e35:	66 3d 00 03          	cmp    ax,0x300
c0015e39:	75 0f                	jne    c0015e4a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e3e:	83 f0 01             	xor    eax,0x1
c0015e41:	84 c0                	test   al,al
c0015e43:	74 05                	je     c0015e4a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e45:	e8 2f a9 ff ff       	call   c0010779 <doTerminalCycle()>
c0015e4a:	90                   	nop
c0015e4b:	c9                   	leave  
c0015e4c:	c3                   	ret    

c0015e4d <clearInternalKeybuffer(VgaText*)>:
c0015e4d:	55                   	push   ebp
c0015e4e:	89 e5                	mov    ebp,esp
c0015e50:	83 ec 08             	sub    esp,0x8
c0015e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e56:	05 98 01 00 00       	add    eax,0x198
c0015e5b:	83 ec 0c             	sub    esp,0xc
c0015e5e:	50                   	push   eax
c0015e5f:	e8 08 a9 fe ff       	call   c000076c <strlen>
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e6a:	81 c2 98 01 00 00    	add    edx,0x198
c0015e70:	83 ec 04             	sub    esp,0x4
c0015e73:	50                   	push   eax
c0015e74:	6a 00                	push   0x0
c0015e76:	52                   	push   edx
c0015e77:	e8 d4 a8 fe ff       	call   c0000750 <memset>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	90                   	nop
c0015e80:	c9                   	leave  
c0015e81:	c3                   	ret    

c0015e82 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e82:	55                   	push   ebp
c0015e83:	89 e5                	mov    ebp,esp
c0015e85:	83 ec 18             	sub    esp,0x18
c0015e88:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015e8d:	85 c0                	test   eax,eax
c0015e8f:	74 2a                	je     c0015ebb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015e91:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015e97:	8b 0d 68 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e768
c0015e9d:	83 ec 04             	sub    esp,0x4
c0015ea0:	68 80 e7 02 c0       	push   0xc002e780
c0015ea5:	83 ec 08             	sub    esp,0x8
c0015ea8:	89 e2                	mov    edx,esp
c0015eaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ead:	89 02                	mov    DWORD PTR [edx],eax
c0015eaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015eb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eb6:	ff d1                	call   ecx
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	fb                   	sti    
c0015ebc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ec3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ec7:	0f 84 a1 00 00 00    	je     c0015f6e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ed6:	84 c0                	test   al,al
c0015ed8:	75 28                	jne    c0015f02 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015eda:	fa                   	cli    
c0015edb:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015ee0:	40                   	inc    eax
c0015ee1:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0015ee6:	e8 fa 7f 00 00       	call   c001dee5 <schedule()>
c0015eeb:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015ef0:	48                   	dec    eax
c0015ef1:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0015ef6:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0015efb:	85 c0                	test   eax,eax
c0015efd:	75 ce                	jne    c0015ecd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015eff:	fb                   	sti    
c0015f00:	eb cb                	jmp    c0015ecd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f05:	8d 50 01             	lea    edx,[eax+0x1]
c0015f08:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f0e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f14:	88 10                	mov    BYTE PTR [eax],dl
c0015f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f19:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f1f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f25:	05 98 01 00 00       	add    eax,0x198
c0015f2a:	83 ec 0c             	sub    esp,0xc
c0015f2d:	50                   	push   eax
c0015f2e:	e8 39 a8 fe ff       	call   c000076c <strlen>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f39:	81 c2 98 01 00 00    	add    edx,0x198
c0015f3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f45:	81 c2 98 01 00 00    	add    edx,0x198
c0015f4b:	83 ec 04             	sub    esp,0x4
c0015f4e:	50                   	push   eax
c0015f4f:	51                   	push   ecx
c0015f50:	52                   	push   edx
c0015f51:	e8 32 a7 fe ff       	call   c0000688 <memmove>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f5f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f63:	0f 85 5a ff ff ff    	jne    c0015ec3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015f69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f6c:	eb 03                	jmp    c0015f71 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015f6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f71:	c9                   	leave  
c0015f72:	c3                   	ret    
c0015f73:	90                   	nop

c0015f74 <Keyboard::Keyboard(char const*)>:
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f7b:	83 ec 08             	sub    esp,0x8
c0015f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f82:	50                   	push   eax
c0015f83:	e8 6a e0 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0015f88:	83 c4 10             	add    esp,0x10
c0015f8b:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c0015f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f94:	89 10                	mov    DWORD PTR [eax],edx
c0015f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015fa4:	c6 05 64 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e764,0x1
c0015fab:	90                   	nop
c0015fac:	83 c4 0c             	add    esp,0xc
c0015faf:	c3                   	ret    

c0015fb0 <Keyboard::~Keyboard()>:
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c0015fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fbc:	89 10                	mov    DWORD PTR [eax],edx
c0015fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	50                   	push   eax
c0015fc6:	e8 f1 dc ff ff       	call   c0013cbc <Device::~Device()>
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	90                   	nop
c0015fcf:	83 c4 0c             	add    esp,0xc
c0015fd2:	c3                   	ret    
c0015fd3:	90                   	nop

c0015fd4 <Keyboard::~Keyboard()>:
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	83 ec 0c             	sub    esp,0xc
c0015fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fde:	e8 cd ff ff ff       	call   c0015fb0 <Keyboard::~Keyboard()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	83 ec 08             	sub    esp,0x8
c0015fe9:	68 5c 01 00 00       	push   0x15c
c0015fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff2:	e8 e6 c8 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0015ff7:	83 c4 10             	add    esp,0x10
c0015ffa:	83 c4 0c             	add    esp,0xc
c0015ffd:	c3                   	ret    

c0015ffe <LogicalDisk::close(int, int, void*)>:
c0015ffe:	83 c8 ff             	or     eax,0xffffffff
c0016001:	c3                   	ret    

c0016002 <LogicalDisk::~LogicalDisk()>:
c0016002:	83 ec 0c             	sub    esp,0xc
c0016005:	ba e0 b7 02 c0       	mov    edx,0xc002b7e0
c001600a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600e:	89 10                	mov    DWORD PTR [eax],edx
c0016010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016014:	83 ec 0c             	sub    esp,0xc
c0016017:	50                   	push   eax
c0016018:	e8 9f dc ff ff       	call   c0013cbc <Device::~Device()>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	90                   	nop
c0016021:	83 c4 0c             	add    esp,0xc
c0016024:	c3                   	ret    
c0016025:	90                   	nop

c0016026 <LogicalDisk::~LogicalDisk()>:
c0016026:	83 ec 0c             	sub    esp,0xc
c0016029:	83 ec 0c             	sub    esp,0xc
c001602c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016030:	e8 cd ff ff ff       	call   c0016002 <LogicalDisk::~LogicalDisk()>
c0016035:	83 c4 10             	add    esp,0x10
c0016038:	83 ec 08             	sub    esp,0x8
c001603b:	68 74 01 00 00       	push   0x174
c0016040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016044:	e8 94 c8 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0016049:	83 c4 10             	add    esp,0x10
c001604c:	83 c4 0c             	add    esp,0xc
c001604f:	c3                   	ret    

c0016050 <LogicalDisk::open(int, int, void*)>:
c0016050:	83 ec 18             	sub    esp,0x18
c0016053:	68 94 b7 02 c0       	push   0xc002b794
c0016058:	e8 f6 42 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001605d:	83 c8 ff             	or     eax,0xffffffff
c0016060:	83 c4 1c             	add    esp,0x1c
c0016063:	c3                   	ret    

c0016064 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016064:	53                   	push   ebx
c0016065:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016069:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001606d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016071:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016077:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001607d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016083:	77 10                	ja     c0016095 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016085:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001608b:	89 d3                	mov    ebx,edx
c001608d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016093:	72 05                	jb     c001609a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016095:	83 c8 ff             	or     eax,0xffffffff
c0016098:	89 c2                	mov    edx,eax
c001609a:	5b                   	pop    ebx
c001609b:	c3                   	ret    

c001609c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001609c:	56                   	push   esi
c001609d:	83 c8 ff             	or     eax,0xffffffff
c00160a0:	53                   	push   ebx
c00160a1:	89 c2                	mov    edx,eax
c00160a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160a7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00160ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160b5:	77 27                	ja     c00160de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160b7:	89 d8                	mov    eax,ebx
c00160b9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00160bf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00160c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160ca:	89 c2                	mov    edx,eax
c00160cc:	73 10                	jae    c00160de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160ce:	89 c8                	mov    eax,ecx
c00160d0:	89 da                	mov    edx,ebx
c00160d2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00160d8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00160de:	5b                   	pop    ebx
c00160df:	5e                   	pop    esi
c00160e0:	c3                   	ret    
c00160e1:	90                   	nop

c00160e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160e2:	83 ec 1c             	sub    esp,0x1c
c00160e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00160fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016100:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016108:	83 ec 08             	sub    esp,0x8
c001610b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001610f:	50                   	push   eax
c0016110:	e8 dd de ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0016115:	83 c4 10             	add    esp,0x10
c0016118:	ba e0 b7 02 c0       	mov    edx,0xc002b7e0
c001611d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016121:	89 10                	mov    DWORD PTR [eax],edx
c0016123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016127:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001612e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016132:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001613d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016147:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001614b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001614f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016153:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016159:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001615f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016163:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016166:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001616a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016170:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001617a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001617e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016188:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016192:	90                   	nop
c0016193:	83 c4 1c             	add    esp,0x1c
c0016196:	c3                   	ret    
c0016197:	90                   	nop

c0016198 <LogicalDisk::assignDriveLetter()>:
c0016198:	55                   	push   ebp
c0016199:	57                   	push   edi
c001619a:	56                   	push   esi
c001619b:	53                   	push   ebx
c001619c:	83 ec 14             	sub    esp,0x14
c001619f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161a3:	8b 3d a0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba0
c00161a9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00161af:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00161b3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00161b9:	8b 3d a4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba4
c00161bf:	3c 01                	cmp    al,0x1
c00161c1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00161c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00161c9:	19 c0                	sbb    eax,eax
c00161cb:	83 e0 02             	and    eax,0x2
c00161ce:	83 c0 41             	add    eax,0x41
c00161d1:	0f be e8             	movsx  ebp,al
c00161d4:	3c 43                	cmp    al,0x43
c00161d6:	75 10                	jne    c00161e8 <LogicalDisk::assignDriveLetter()+0x50>
c00161d8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00161df:	75 5d                	jne    c001623e <LogicalDisk::assignDriveLetter()+0xa6>
c00161e1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00161e6:	75 56                	jne    c001623e <LogicalDisk::assignDriveLetter()+0xa6>
c00161e8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00161eb:	ba 01 00 00 00       	mov    edx,0x1
c00161f0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00161f4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00161f8:	d3 e2                	shl    edx,cl
c00161fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161fe:	89 d7                	mov    edi,edx
c0016200:	89 d6                	mov    esi,edx
c0016202:	c1 ff 1f             	sar    edi,0x1f
c0016205:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016209:	21 f9                	and    ecx,edi
c001620b:	09 d1                	or     ecx,edx
c001620d:	75 2f                	jne    c001623e <LogicalDisk::assignDriveLetter()+0xa6>
c001620f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016213:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016217:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001621d:	09 f2                	or     edx,esi
c001621f:	89 15 a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,edx
c0016225:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016229:	09 fa                	or     edx,edi
c001622b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001622f:	89 15 a4 eb 02 c0    	mov    DWORD PTR ds:0xc002eba4,edx
c0016235:	89 1c bd c0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1440],ebx
c001623c:	eb 08                	jmp    c0016246 <LogicalDisk::assignDriveLetter()+0xae>
c001623e:	45                   	inc    ebp
c001623f:	40                   	inc    eax
c0016240:	3c 5b                	cmp    al,0x5b
c0016242:	75 90                	jne    c00161d4 <LogicalDisk::assignDriveLetter()+0x3c>
c0016244:	31 c0                	xor    eax,eax
c0016246:	83 c4 14             	add    esp,0x14
c0016249:	5b                   	pop    ebx
c001624a:	5e                   	pop    esi
c001624b:	5f                   	pop    edi
c001624c:	5d                   	pop    ebp
c001624d:	c3                   	ret    

c001624e <LogicalDisk::mount()>:
c001624e:	56                   	push   esi
c001624f:	53                   	push   ebx
c0016250:	53                   	push   ebx
c0016251:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016255:	8b 1d 34 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e734
c001625b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016265:	85 db                	test   ebx,ebx
c0016267:	74 27                	je     c0016290 <LogicalDisk::mount()+0x42>
c0016269:	51                   	push   ecx
c001626a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016271:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016273:	83 e8 41             	sub    eax,0x41
c0016276:	50                   	push   eax
c0016277:	56                   	push   esi
c0016278:	53                   	push   ebx
c0016279:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	84 c0                	test   al,al
c0016281:	74 08                	je     c001628b <LogicalDisk::mount()+0x3d>
c0016283:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016289:	eb 07                	jmp    c0016292 <LogicalDisk::mount()+0x44>
c001628b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001628e:	eb d5                	jmp    c0016265 <LogicalDisk::mount()+0x17>
c0016290:	31 c0                	xor    eax,eax
c0016292:	5a                   	pop    edx
c0016293:	5b                   	pop    ebx
c0016294:	5e                   	pop    esi
c0016295:	c3                   	ret    

c0016296 <LogicalDisk::unmount()>:
c0016296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001629a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162a4:	c3                   	ret    
c00162a5:	90                   	nop

c00162a6 <LogicalDisk::eject()>:
c00162a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00162b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00162b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00162b9:	90                   	nop

c00162ba <LogicalDisk::unassignDriveLetter()>:
c00162ba:	57                   	push   edi
c00162bb:	56                   	push   esi
c00162bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00162c7:	84 c9                	test   cl,cl
c00162c9:	75 0f                	jne    c00162da <LogicalDisk::unassignDriveLetter()+0x20>
c00162cb:	c7 44 24 0c b8 b7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b7b8
c00162d3:	5e                   	pop    esi
c00162d4:	5f                   	pop    edi
c00162d5:	e9 79 40 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c00162da:	83 e9 41             	sub    ecx,0x41
c00162dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162e4:	b8 01 00 00 00       	mov    eax,0x1
c00162e9:	c7 04 8d c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1440],0x0
c00162f4:	d3 e0                	shl    eax,cl
c00162f6:	89 c7                	mov    edi,eax
c00162f8:	f7 d0                	not    eax
c00162fa:	c1 ff 1f             	sar    edi,0x1f
c00162fd:	21 05 a0 eb 02 c0    	and    DWORD PTR ds:0xc002eba0,eax
c0016303:	89 fe                	mov    esi,edi
c0016305:	f7 d6                	not    esi
c0016307:	21 35 a4 eb 02 c0    	and    DWORD PTR ds:0xc002eba4,esi
c001630d:	5e                   	pop    esi
c001630e:	5f                   	pop    edi
c001630f:	c3                   	ret    

c0016310 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016310:	57                   	push   edi
c0016311:	56                   	push   esi
c0016312:	53                   	push   ebx
c0016313:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016317:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001631b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001631f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016323:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016329:	77 41                	ja     c001636c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001632b:	99                   	cdq    
c001632c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016332:	01 c8                	add    eax,ecx
c0016334:	11 da                	adc    edx,ebx
c0016336:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001633c:	19 d7                	sbb    edi,edx
c001633e:	72 33                	jb     c0016373 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016340:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016346:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001634c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016350:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016354:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001635a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016360:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016364:	5b                   	pop    ebx
c0016365:	5e                   	pop    esi
c0016366:	5f                   	pop    edi
c0016367:	e9 1c 0b 00 00       	jmp    c0016e88 <VCache::read(unsigned long long, int, void*)>
c001636c:	b8 05 00 00 00       	mov    eax,0x5
c0016371:	eb 05                	jmp    c0016378 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016373:	b8 07 00 00 00       	mov    eax,0x7
c0016378:	5b                   	pop    ebx
c0016379:	5e                   	pop    esi
c001637a:	5f                   	pop    edi
c001637b:	c3                   	ret    

c001637c <LogicalDisk::write(unsigned long long, int, void*)>:
c001637c:	57                   	push   edi
c001637d:	56                   	push   esi
c001637e:	53                   	push   ebx
c001637f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016383:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016387:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001638b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001638f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016395:	77 41                	ja     c00163d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016397:	99                   	cdq    
c0016398:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001639e:	01 c8                	add    eax,ecx
c00163a0:	11 da                	adc    edx,ebx
c00163a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163a8:	19 d7                	sbb    edi,edx
c00163aa:	72 33                	jb     c00163df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00163ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163d0:	5b                   	pop    ebx
c00163d1:	5e                   	pop    esi
c00163d2:	5f                   	pop    edi
c00163d3:	e9 86 09 00 00       	jmp    c0016d5e <VCache::write(unsigned long long, int, void*)>
c00163d8:	b8 05 00 00 00       	mov    eax,0x5
c00163dd:	eb 05                	jmp    c00163e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163df:	b8 07 00 00 00       	mov    eax,0x7
c00163e4:	5b                   	pop    ebx
c00163e5:	5e                   	pop    esi
c00163e6:	5f                   	pop    edi
c00163e7:	c3                   	ret    

c00163e8 <Mouse::Mouse(char const*)>:
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ef:	83 ec 08             	sub    esp,0x8
c00163f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f6:	50                   	push   eax
c00163f7:	e8 f6 db ff ff       	call   c0013ff2 <Device::Device(char const*)>
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	ba 0c b8 02 c0       	mov    edx,0xc002b80c
c0016404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016408:	89 10                	mov    DWORD PTR [eax],edx
c001640a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016418:	90                   	nop
c0016419:	83 c4 0c             	add    esp,0xc
c001641c:	c3                   	ret    
c001641d:	90                   	nop

c001641e <Mouse::~Mouse()>:
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	ba 0c b8 02 c0       	mov    edx,0xc002b80c
c0016426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642a:	89 10                	mov    DWORD PTR [eax],edx
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	50                   	push   eax
c0016434:	e8 83 d8 ff ff       	call   c0013cbc <Device::~Device()>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	90                   	nop
c001643d:	83 c4 0c             	add    esp,0xc
c0016440:	c3                   	ret    
c0016441:	90                   	nop

c0016442 <Mouse::~Mouse()>:
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	83 ec 0c             	sub    esp,0xc
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 cd ff ff ff       	call   c001641e <Mouse::~Mouse()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 ec 08             	sub    esp,0x8
c0016457:	68 58 01 00 00       	push   0x158
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 78 c4 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	c3                   	ret    

c001646c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001646c:	55                   	push   ebp
c001646d:	57                   	push   edi
c001646e:	56                   	push   esi
c001646f:	53                   	push   ebx
c0016470:	81 ec 28 01 00 00    	sub    esp,0x128
c0016476:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001647d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016484:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001648b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016492:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016496:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001649a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164a1:	e8 48 dc ff ff       	call   c00140ee <Device::getName()>
c00164a6:	5a                   	pop    edx
c00164a7:	59                   	pop    ecx
c00164a8:	50                   	push   eax
c00164a9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00164ad:	55                   	push   ebp
c00164ae:	e8 59 a3 fe ff       	call   c000080c <strcpy>
c00164b3:	5b                   	pop    ebx
c00164b4:	58                   	pop    eax
c00164b5:	68 30 b8 02 c0       	push   0xc002b830
c00164ba:	55                   	push   ebp
c00164bb:	e8 8c a4 fe ff       	call   c000094c <strcat>
c00164c0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00164c7:	e8 91 94 ff ff       	call   c000f95d <malloc>
c00164cc:	83 c4 0c             	add    esp,0xc
c00164cf:	89 c3                	mov    ebx,eax
c00164d1:	57                   	push   edi
c00164d2:	56                   	push   esi
c00164d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164db:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164e2:	55                   	push   ebp
c00164e3:	50                   	push   eax
c00164e4:	e8 f9 fb ff ff       	call   c00160e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164e9:	83 c4 14             	add    esp,0x14
c00164ec:	53                   	push   ebx
c00164ed:	e8 a6 fc ff ff       	call   c0016198 <LogicalDisk::assignDriveLetter()>
c00164f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164f5:	e8 54 fd ff ff       	call   c001624e <LogicalDisk::mount()>
c00164fa:	58                   	pop    eax
c00164fb:	5a                   	pop    edx
c00164fc:	53                   	push   ebx
c00164fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016504:	e8 e5 d8 ff ff       	call   c0013dee <Device::addChild(Device*)>
c0016509:	81 c4 2c 01 00 00    	add    esp,0x12c
c001650f:	5b                   	pop    ebx
c0016510:	5e                   	pop    esi
c0016511:	5f                   	pop    edi
c0016512:	5d                   	pop    ebp
c0016513:	c3                   	ret    

c0016514 <createPartitionsForDisk(PhysicalDisk*)>:
c0016514:	55                   	push   ebp
c0016515:	57                   	push   edi
c0016516:	56                   	push   esi
c0016517:	53                   	push   ebx
c0016518:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001651e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016525:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001652b:	3d 00 02 00 00       	cmp    eax,0x200
c0016530:	74 27                	je     c0016559 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016532:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016538:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001653e:	83 ec 10             	sub    esp,0x10
c0016541:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016545:	99                   	cdq    
c0016546:	c1 e6 0a             	shl    esi,0xa
c0016549:	52                   	push   edx
c001654a:	89 fd                	mov    ebp,edi
c001654c:	50                   	push   eax
c001654d:	55                   	push   ebp
c001654e:	56                   	push   esi
c001654f:	e8 30 08 01 00       	call   c0026d84 <__udivdi3>
c0016554:	e9 b1 00 00 00       	jmp    c001660a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001655e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016562:	56                   	push   esi
c0016563:	6a 01                	push   0x1
c0016565:	6a 00                	push   0x0
c0016567:	6a 00                	push   0x0
c0016569:	53                   	push   ebx
c001656a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001656d:	83 c4 20             	add    esp,0x20
c0016570:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016578:	75 0a                	jne    c0016584 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001657a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016582:	74 2c                	je     c00165b0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016584:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001658a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016590:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016596:	83 ec 10             	sub    esp,0x10
c0016599:	0f a4 c2 0a          	shld   edx,eax,0xa
c001659d:	89 f7                	mov    edi,esi
c001659f:	c1 e0 0a             	shl    eax,0xa
c00165a2:	c1 ff 1f             	sar    edi,0x1f
c00165a5:	57                   	push   edi
c00165a6:	56                   	push   esi
c00165a7:	52                   	push   edx
c00165a8:	50                   	push   eax
c00165a9:	e8 d6 07 01 00       	call   c0026d84 <__udivdi3>
c00165ae:	eb 5a                	jmp    c001660a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165b0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00165b7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00165be:	83 e1 7f             	and    ecx,0x7f
c00165c1:	83 e0 7f             	and    eax,0x7f
c00165c4:	01 c1                	add    ecx,eax
c00165c6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165cd:	83 e0 7f             	and    eax,0x7f
c00165d0:	01 c1                	add    ecx,eax
c00165d2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165d9:	83 e0 7f             	and    eax,0x7f
c00165dc:	00 c1                	add    cl,al
c00165de:	74 41                	je     c0016621 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165e0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165e6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165f2:	83 ec 10             	sub    esp,0x10
c00165f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165f9:	89 f7                	mov    edi,esi
c00165fb:	c1 e0 0a             	shl    eax,0xa
c00165fe:	c1 ff 1f             	sar    edi,0x1f
c0016601:	57                   	push   edi
c0016602:	56                   	push   esi
c0016603:	52                   	push   edx
c0016604:	50                   	push   eax
c0016605:	e8 7a 07 01 00       	call   c0026d84 <__udivdi3>
c001660a:	83 c4 14             	add    esp,0x14
c001660d:	52                   	push   edx
c001660e:	50                   	push   eax
c001660f:	6a 00                	push   0x0
c0016611:	6a 00                	push   0x0
c0016613:	53                   	push   ebx
c0016614:	e8 53 fe ff ff       	call   c001646c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016619:	83 c4 20             	add    esp,0x20
c001661c:	e9 79 01 00 00       	jmp    c001679a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016621:	89 f0                	mov    eax,esi
c0016623:	31 f6                	xor    esi,esi
c0016625:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001662c:	75 02                	jne    c0016630 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001662e:	89 f1                	mov    ecx,esi
c0016630:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016637:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001663e:	c1 e2 08             	shl    edx,0x8
c0016641:	c1 e7 10             	shl    edi,0x10
c0016644:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001664c:	09 fa                	or     edx,edi
c001664e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016656:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001665d:	83 c0 10             	add    eax,0x10
c0016660:	09 fa                	or     edx,edi
c0016662:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016669:	c1 e7 18             	shl    edi,0x18
c001666c:	09 fa                	or     edx,edi
c001666e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016675:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016679:	c1 e7 10             	shl    edi,0x10
c001667c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016683:	c1 e2 08             	shl    edx,0x8
c0016686:	09 fa                	or     edx,edi
c0016688:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001668f:	09 fa                	or     edx,edi
c0016691:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016698:	c1 e7 18             	shl    edi,0x18
c001669b:	09 fa                	or     edx,edi
c001669d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00166a1:	46                   	inc    esi
c00166a2:	83 fe 04             	cmp    esi,0x4
c00166a5:	0f 85 7a ff ff ff    	jne    c0016625 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00166ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166af:	83 f0 01             	xor    eax,0x1
c00166b2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00166b6:	75 57                	jne    c001670f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166bc:	83 f0 01             	xor    eax,0x1
c00166bf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00166c3:	75 4a                	jne    c001670f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166c5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00166c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166df:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166e5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166ef:	89 f7                	mov    edi,esi
c00166f1:	c1 e0 0a             	shl    eax,0xa
c00166f4:	c1 ff 1f             	sar    edi,0x1f
c00166f7:	57                   	push   edi
c00166f8:	56                   	push   esi
c00166f9:	52                   	push   edx
c00166fa:	50                   	push   eax
c00166fb:	e8 84 06 01 00       	call   c0026d84 <__udivdi3>
c0016700:	83 c4 10             	add    esp,0x10
c0016703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016707:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001670b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001670f:	84 c9                	test   cl,cl
c0016711:	74 53                	je     c0016766 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016713:	0f b6 c9             	movzx  ecx,cl
c0016716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001671e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016722:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001672a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001672e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016732:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001673a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016742:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016746:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001674a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001674e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016752:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016756:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001675a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001675e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016762:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016766:	31 ed                	xor    ebp,ebp
c0016768:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001676c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016770:	89 f8                	mov    eax,edi
c0016772:	09 f0                	or     eax,esi
c0016774:	74 1e                	je     c0016794 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016776:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001677a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001677e:	89 d1                	mov    ecx,edx
c0016780:	09 c1                	or     ecx,eax
c0016782:	74 10                	je     c0016794 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	57                   	push   edi
c0016788:	56                   	push   esi
c0016789:	52                   	push   edx
c001678a:	50                   	push   eax
c001678b:	53                   	push   ebx
c001678c:	e8 db fc ff ff       	call   c001646c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016791:	83 c4 20             	add    esp,0x20
c0016794:	45                   	inc    ebp
c0016795:	83 fd 04             	cmp    ebp,0x4
c0016798:	75 ce                	jne    c0016768 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001679a:	81 c4 5c 02 00 00    	add    esp,0x25c
c00167a0:	5b                   	pop    ebx
c00167a1:	5e                   	pop    esi
c00167a2:	5f                   	pop    edi
c00167a3:	5d                   	pop    ebp
c00167a4:	c3                   	ret    
c00167a5:	90                   	nop

c00167a6 <Serial::Serial(char const*)>:
c00167a6:	83 ec 0c             	sub    esp,0xc
c00167a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ad:	83 ec 08             	sub    esp,0x8
c00167b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b4:	50                   	push   eax
c00167b5:	e8 38 d8 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c00167ba:	83 c4 10             	add    esp,0x10
c00167bd:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c00167c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c6:	89 10                	mov    DWORD PTR [eax],edx
c00167c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167cc:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167d6:	90                   	nop
c00167d7:	83 c4 0c             	add    esp,0xc
c00167da:	c3                   	ret    
c00167db:	90                   	nop

c00167dc <Serial::~Serial()>:
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c00167e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e8:	89 10                	mov    DWORD PTR [eax],edx
c00167ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	50                   	push   eax
c00167f2:	e8 c5 d4 ff ff       	call   c0013cbc <Device::~Device()>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	90                   	nop
c00167fb:	83 c4 0c             	add    esp,0xc
c00167fe:	c3                   	ret    
c00167ff:	90                   	nop

c0016800 <Serial::~Serial()>:
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	83 ec 0c             	sub    esp,0xc
c0016806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001680a:	e8 cd ff ff ff       	call   c00167dc <Serial::~Serial()>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	83 ec 08             	sub    esp,0x8
c0016815:	68 58 01 00 00       	push   0x158
c001681a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001681e:	e8 ba c0 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	83 c4 0c             	add    esp,0xc
c0016829:	c3                   	ret    

c001682a <Timer::Timer(char const*)>:
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016831:	83 ec 08             	sub    esp,0x8
c0016834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016838:	50                   	push   eax
c0016839:	e8 b4 d7 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c0016846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684a:	89 10                	mov    DWORD PTR [eax],edx
c001684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016850:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001685a:	90                   	nop
c001685b:	83 c4 0c             	add    esp,0xc
c001685e:	c3                   	ret    
c001685f:	90                   	nop

c0016860 <Timer::~Timer()>:
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c0016868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686c:	89 10                	mov    DWORD PTR [eax],edx
c001686e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	50                   	push   eax
c0016876:	e8 41 d4 ff ff       	call   c0013cbc <Device::~Device()>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	90                   	nop
c001687f:	83 c4 0c             	add    esp,0xc
c0016882:	c3                   	ret    
c0016883:	90                   	nop

c0016884 <Timer::~Timer()>:
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001688e:	e8 cd ff ff ff       	call   c0016860 <Timer::~Timer()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	83 ec 08             	sub    esp,0x8
c0016899:	68 5c 01 00 00       	push   0x15c
c001689e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a2:	e8 36 c0 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	83 c4 0c             	add    esp,0xc
c00168ad:	c3                   	ret    

c00168ae <Timer::read()>:
c00168ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168b8:	c3                   	ret    

c00168b9 <timerHandler(unsigned long long)>:
c00168b9:	55                   	push   ebp
c00168ba:	57                   	push   edi
c00168bb:	56                   	push   esi
c00168bc:	53                   	push   ebx
c00168bd:	83 ec 0c             	sub    esp,0xc
c00168c0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168c4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00168c8:	01 35 30 ec 02 c0    	add    DWORD PTR ds:0xc002ec30,esi
c00168ce:	11 3d 34 ec 02 c0    	adc    DWORD PTR ds:0xc002ec34,edi
c00168d4:	80 3d cd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cd,0x0
c00168db:	0f 84 42 01 00 00    	je     c0016a23 <timerHandler(unsigned long long)+0x16a>
c00168e1:	fa                   	cli    
c00168e2:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	ff 05 c4 fa 02 c0    	inc    DWORD PTR ds:0xc002fac4
c00168f1:	68 d8 fa 02 c0       	push   0xc002fad8
c00168f6:	e8 e3 24 01 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168fb:	83 c4 10             	add    esp,0x10
c00168fe:	84 c0                	test   al,al
c0016900:	0f 85 a2 00 00 00    	jne    c00169a8 <timerHandler(unsigned long long)+0xef>
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	68 d8 fa 02 c0       	push   0xc002fad8
c001690e:	e8 e7 24 01 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	89 c3                	mov    ebx,eax
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	68 d8 fa 02 c0       	push   0xc002fad8
c0016920:	e8 d5 24 01 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016925:	c7 04 24 d8 fa 02 c0 	mov    DWORD PTR [esp],0xc002fad8
c001692c:	89 c5                	mov    ebp,eax
c001692e:	e8 cf 24 01 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016933:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001693c:	39 15 30 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec30,edx
c0016942:	a1 34 ec 02 c0       	mov    eax,ds:0xc002ec34
c0016947:	19 c8                	sbb    eax,ecx
c0016949:	72 21                	jb     c001696c <timerHandler(unsigned long long)+0xb3>
c001694b:	83 ec 0c             	sub    esp,0xc
c001694e:	55                   	push   ebp
c001694f:	e8 23 7a 00 00       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c0016954:	83 c4 10             	add    esp,0x10
c0016957:	39 eb                	cmp    ebx,ebp
c0016959:	75 21                	jne    c001697c <timerHandler(unsigned long long)+0xc3>
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	68 d8 fa 02 c0       	push   0xc002fad8
c0016963:	e8 92 24 01 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016968:	89 c3                	mov    ebx,eax
c001696a:	eb 0d                	jmp    c0016979 <timerHandler(unsigned long long)+0xc0>
c001696c:	50                   	push   eax
c001696d:	50                   	push   eax
c001696e:	55                   	push   ebp
c001696f:	68 d8 fa 02 c0       	push   0xc002fad8
c0016974:	e8 37 25 01 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016979:	83 c4 10             	add    esp,0x10
c001697c:	83 ec 0c             	sub    esp,0xc
c001697f:	68 d8 fa 02 c0       	push   0xc002fad8
c0016984:	e8 55 24 01 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	84 c0                	test   al,al
c001698e:	75 18                	jne    c00169a8 <timerHandler(unsigned long long)+0xef>
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	68 d8 fa 02 c0       	push   0xc002fad8
c0016998:	e8 5d 24 01 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699d:	83 c4 10             	add    esp,0x10
c00169a0:	39 d8                	cmp    eax,ebx
c00169a2:	0f 85 70 ff ff ff    	jne    c0016918 <timerHandler(unsigned long long)+0x5f>
c00169a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ad:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00169b1:	74 3d                	je     c00169f0 <timerHandler(unsigned long long)+0x137>
c00169b3:	80 3d cc e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cc,0x0
c00169ba:	74 34                	je     c00169f0 <timerHandler(unsigned long long)+0x137>
c00169bc:	fa                   	cli    
c00169bd:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c00169c3:	31 d2                	xor    edx,edx
c00169c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ca:	89 f9                	mov    ecx,edi
c00169cc:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00169d7:	39 c6                	cmp    esi,eax
c00169d9:	19 d1                	sbb    ecx,edx
c00169db:	72 05                	jb     c00169e2 <timerHandler(unsigned long long)+0x129>
c00169dd:	e8 03 75 00 00       	call   c001dee5 <schedule()>
c00169e2:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c00169e7:	48                   	dec    eax
c00169e8:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c00169ed:	75 01                	jne    c00169f0 <timerHandler(unsigned long long)+0x137>
c00169ef:	fb                   	sti    
c00169f0:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c00169f5:	48                   	dec    eax
c00169f6:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c00169fb:	75 18                	jne    c0016a15 <timerHandler(unsigned long long)+0x15c>
c00169fd:	83 3d c0 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fac0,0x0
c0016a04:	74 0f                	je     c0016a15 <timerHandler(unsigned long long)+0x15c>
c0016a06:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c0016a10:	e8 d0 74 00 00       	call   c001dee5 <schedule()>
c0016a15:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0016a1a:	48                   	dec    eax
c0016a1b:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0016a20:	75 01                	jne    c0016a23 <timerHandler(unsigned long long)+0x16a>
c0016a22:	fb                   	sti    
c0016a23:	83 c4 0c             	add    esp,0xc
c0016a26:	5b                   	pop    ebx
c0016a27:	5e                   	pop    esi
c0016a28:	5f                   	pop    edi
c0016a29:	5d                   	pop    ebp
c0016a2a:	c3                   	ret    

c0016a2b <setupTimer(int)>:
c0016a2b:	57                   	push   edi
c0016a2c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016a31:	56                   	push   esi
c0016a32:	53                   	push   ebx
c0016a33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a3d:	83 ec 0c             	sub    esp,0xc
c0016a40:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a46:	e8 a3 d6 ff ff       	call   c00140ee <Device::getName()>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a51:	0f 85 8d 00 00 00    	jne    c0016ae4 <setupTimer(int)+0xb9>
c0016a57:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016a5c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016a63:	74 7f                	je     c0016ae4 <setupTimer(int)+0xb9>
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	68 5c 01 00 00       	push   0x15c
c0016a6d:	e8 eb 8e ff ff       	call   c000f95d <malloc>
c0016a72:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a75:	89 c3                	mov    ebx,eax
c0016a77:	e8 e2 fe 00 00       	call   c002695e <PIT::PIT()>
c0016a7c:	59                   	pop    ecx
c0016a7d:	5f                   	pop    edi
c0016a7e:	53                   	push   ebx
c0016a7f:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016a85:	e8 64 d3 ff ff       	call   c0013dee <Device::addChild(Device*)>
c0016a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a8c:	6a 00                	push   0x0
c0016a8e:	6a 00                	push   0x0
c0016a90:	56                   	push   esi
c0016a91:	53                   	push   ebx
c0016a92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a95:	83 c4 14             	add    esp,0x14
c0016a98:	68 60 01 00 00       	push   0x160
c0016a9d:	e8 bb 8e ff ff       	call   c000f95d <malloc>
c0016aa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aa5:	89 c7                	mov    edi,eax
c0016aa7:	e8 62 fd 00 00       	call   c002680e <APICTimer::APICTimer()>
c0016aac:	6a 00                	push   0x0
c0016aae:	6a 00                	push   0x0
c0016ab0:	56                   	push   esi
c0016ab1:	57                   	push   edi
c0016ab2:	e8 59 fc 00 00       	call   c0026710 <APICTimer::open(int, int, void*)>
c0016ab7:	83 c4 20             	add    esp,0x20
c0016aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016abc:	6a 00                	push   0x0
c0016abe:	6a 00                	push   0x0
c0016ac0:	6a 00                	push   0x0
c0016ac2:	53                   	push   ebx
c0016ac3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ac6:	58                   	pop    eax
c0016ac7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016acc:	5a                   	pop    edx
c0016acd:	57                   	push   edi
c0016ace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ad4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ada:	e8 0f d3 ff ff       	call   c0013dee <Device::addChild(Device*)>
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	eb 33                	jmp    c0016b17 <setupTimer(int)+0xec>
c0016ae4:	83 ec 0c             	sub    esp,0xc
c0016ae7:	68 5c 01 00 00       	push   0x15c
c0016aec:	e8 6c 8e ff ff       	call   c000f95d <malloc>
c0016af1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016af4:	89 c3                	mov    ebx,eax
c0016af6:	e8 63 fe 00 00       	call   c002695e <PIT::PIT()>
c0016afb:	58                   	pop    eax
c0016afc:	5a                   	pop    edx
c0016afd:	53                   	push   ebx
c0016afe:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016b04:	e8 e5 d2 ff ff       	call   c0013dee <Device::addChild(Device*)>
c0016b09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b0b:	6a 00                	push   0x0
c0016b0d:	6a 00                	push   0x0
c0016b0f:	56                   	push   esi
c0016b10:	53                   	push   ebx
c0016b11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b14:	83 c4 20             	add    esp,0x20
c0016b17:	89 d8                	mov    eax,ebx
c0016b19:	5b                   	pop    ebx
c0016b1a:	5e                   	pop    esi
c0016b1b:	5f                   	pop    edi
c0016b1c:	c3                   	ret    
c0016b1d:	90                   	nop

c0016b1e <VCache::VCache(PhysicalDisk*)>:
c0016b1e:	53                   	push   ebx
c0016b1f:	83 ec 18             	sub    esp,0x18
c0016b22:	ba d8 b9 02 c0       	mov    edx,0xc002b9d8
c0016b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2b:	89 10                	mov    DWORD PTR [eax],edx
c0016b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b31:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b47:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b4e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b59:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016b60:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b76:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b85:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b90:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b98:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba8:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016baf:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016bb7:	83 ec 0c             	sub    esp,0xc
c0016bba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bbe:	e8 9a 8d ff ff       	call   c000f95d <malloc>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	89 c3                	mov    ebx,eax
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	53                   	push   ebx
c0016bcc:	e8 dd 70 00 00       	call   c001dcae <Mutex::Mutex()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016be3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bea:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016bf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bf5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c06:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c16:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c19:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c20:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c2e:	05 00 01 00 00       	add    eax,0x100
c0016c33:	c1 e0 04             	shl    eax,0x4
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	50                   	push   eax
c0016c3a:	e8 1e 8d ff ff       	call   c000f95d <malloc>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	89 c2                	mov    edx,eax
c0016c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c48:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c68:	c1 e0 07             	shl    eax,0x7
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	50                   	push   eax
c0016c6f:	e8 e9 8c ff ff       	call   c000f95d <malloc>
c0016c74:	83 c4 10             	add    esp,0x10
c0016c77:	89 c2                	mov    edx,eax
c0016c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c7d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c80:	90                   	nop
c0016c81:	83 c4 18             	add    esp,0x18
c0016c84:	5b                   	pop    ebx
c0016c85:	c3                   	ret    

c0016c86 <VCache::invalidateReadBuffer()>:
c0016c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c8a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c90:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c94:	c3                   	ret    
c0016c95:	90                   	nop

c0016c96 <VCache::writeWriteBuffer()>:
c0016c96:	53                   	push   ebx
c0016c97:	83 ec 0c             	sub    esp,0xc
c0016c9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016c9e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016ca1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ca4:	68 b0 b8 02 c0       	push   0xc002b8b0
c0016ca9:	e8 07 bd ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016cae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cb1:	5a                   	pop    edx
c0016cb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cb4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016cb7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016cba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016cbd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016cc0:	50                   	push   eax
c0016cc1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cc4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016ccb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016cd2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016cd6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016cdd:	83 c4 28             	add    esp,0x28
c0016ce0:	5b                   	pop    ebx
c0016ce1:	c3                   	ret    

c0016ce2 <VCache::~VCache()>:
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	ba d8 b9 02 c0       	mov    edx,0xc002b9d8
c0016cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cee:	89 10                	mov    DWORD PTR [eax],edx
c0016cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016cf7:	84 c0                	test   al,al
c0016cf9:	74 0f                	je     c0016d0a <VCache::~VCache()+0x28>
c0016cfb:	83 ec 0c             	sub    esp,0xc
c0016cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d02:	e8 8f ff ff ff       	call   c0016c96 <VCache::writeWriteBuffer()>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d11:	83 ec 0c             	sub    esp,0xc
c0016d14:	50                   	push   eax
c0016d15:	e8 53 8c ff ff       	call   c000f96d <free>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d21:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d24:	83 ec 0c             	sub    esp,0xc
c0016d27:	50                   	push   eax
c0016d28:	e8 40 8c ff ff       	call   c000f96d <free>
c0016d2d:	83 c4 10             	add    esp,0x10
c0016d30:	90                   	nop
c0016d31:	83 c4 0c             	add    esp,0xc
c0016d34:	c3                   	ret    
c0016d35:	90                   	nop

c0016d36 <VCache::~VCache()>:
c0016d36:	83 ec 0c             	sub    esp,0xc
c0016d39:	83 ec 0c             	sub    esp,0xc
c0016d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d40:	e8 9d ff ff ff       	call   c0016ce2 <VCache::~VCache()>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	83 ec 08             	sub    esp,0x8
c0016d4b:	6a 44                	push   0x44
c0016d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d51:	e8 87 bb ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0016d56:	83 c4 10             	add    esp,0x10
c0016d59:	83 c4 0c             	add    esp,0xc
c0016d5c:	c3                   	ret    
c0016d5d:	90                   	nop

c0016d5e <VCache::write(unsigned long long, int, void*)>:
c0016d5e:	55                   	push   ebp
c0016d5f:	57                   	push   edi
c0016d60:	56                   	push   esi
c0016d61:	53                   	push   ebx
c0016d62:	83 ec 18             	sub    esp,0x18
c0016d65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016d69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d6d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016d71:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016d75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d78:	e8 77 74 00 00       	call   c001e1f4 <Semaphore::acquire()>
c0016d7d:	c7 04 24 d4 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8d4
c0016d84:	e8 2c bc ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d90:	74 0c                	je     c0016d9e <VCache::write(unsigned long long, int, void*)+0x40>
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	53                   	push   ebx
c0016d96:	e8 eb fe ff ff       	call   c0016c86 <VCache::invalidateReadBuffer()>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016da2:	74 66                	je     c0016e0a <VCache::write(unsigned long long, int, void*)+0xac>
c0016da4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016da7:	99                   	cdq    
c0016da8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016dab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016dae:	31 f0                	xor    eax,esi
c0016db0:	89 d1                	mov    ecx,edx
c0016db2:	89 ca                	mov    edx,ecx
c0016db4:	31 fa                	xor    edx,edi
c0016db6:	09 d0                	or     eax,edx
c0016db8:	75 44                	jne    c0016dfe <VCache::write(unsigned long long, int, void*)+0xa0>
c0016dba:	83 fd 01             	cmp    ebp,0x1
c0016dbd:	75 3f                	jne    c0016dfe <VCache::write(unsigned long long, int, void*)+0xa0>
c0016dbf:	83 ec 0c             	sub    esp,0xc
c0016dc2:	68 fb b8 02 c0       	push   0xc002b8fb
c0016dc7:	e8 e9 bb ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016dcc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dcf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016dd2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016dd8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ddc:	0f af f9             	imul   edi,ecx
c0016ddf:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016de2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016de4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	40                   	inc    eax
c0016deb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016dee:	83 c0 80             	add    eax,0xffffff80
c0016df1:	75 75                	jne    c0016e68 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	53                   	push   ebx
c0016df7:	e8 9a fe ff ff       	call   c0016c96 <VCache::writeWriteBuffer()>
c0016dfc:	eb 41                	jmp    c0016e3f <VCache::write(unsigned long long, int, void*)+0xe1>
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	53                   	push   ebx
c0016e02:	e8 8f fe ff ff       	call   c0016c96 <VCache::writeWriteBuffer()>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	83 fd 7f             	cmp    ebp,0x7f
c0016e0d:	7f 35                	jg     c0016e44 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016e0f:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e12:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e15:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e18:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e1c:	56                   	push   esi
c0016e1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e21:	6a 01                	push   0x1
c0016e23:	68 11 b9 02 c0       	push   0xc002b911
c0016e28:	e8 88 bb ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016e2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e30:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016e33:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3f:	83 c4 10             	add    esp,0x10
c0016e42:	eb 24                	jmp    c0016e68 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e44:	52                   	push   edx
c0016e45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e49:	55                   	push   ebp
c0016e4a:	68 32 b9 02 c0       	push   0xc002b932
c0016e4f:	e8 61 bb ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016e54:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e57:	59                   	pop    ecx
c0016e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e5e:	55                   	push   ebp
c0016e5f:	57                   	push   edi
c0016e60:	56                   	push   esi
c0016e61:	50                   	push   eax
c0016e62:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e65:	83 c4 20             	add    esp,0x20
c0016e68:	83 ec 0c             	sub    esp,0xc
c0016e6b:	68 4f b9 02 c0       	push   0xc002b94f
c0016e70:	e8 40 bb ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016e75:	58                   	pop    eax
c0016e76:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e79:	e8 e2 79 00 00       	call   c001e860 <Semaphore::release()>
c0016e7e:	83 c4 1c             	add    esp,0x1c
c0016e81:	31 c0                	xor    eax,eax
c0016e83:	5b                   	pop    ebx
c0016e84:	5e                   	pop    esi
c0016e85:	5f                   	pop    edi
c0016e86:	5d                   	pop    ebp
c0016e87:	c3                   	ret    

c0016e88 <VCache::read(unsigned long long, int, void*)>:
c0016e88:	55                   	push   ebp
c0016e89:	57                   	push   edi
c0016e8a:	56                   	push   esi
c0016e8b:	53                   	push   ebx
c0016e8c:	83 ec 28             	sub    esp,0x28
c0016e8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e93:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016e97:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e9f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ea3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016ea7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016eab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016eae:	e8 41 73 00 00       	call   c001e1f4 <Semaphore::acquire()>
c0016eb3:	c7 04 24 6f b9 02 c0 	mov    DWORD PTR [esp],0xc002b96f
c0016eba:	e8 f6 ba ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ec6:	74 0c                	je     c0016ed4 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	53                   	push   ebx
c0016ecc:	e8 c5 fd ff ff       	call   c0016c96 <VCache::writeWriteBuffer()>
c0016ed1:	83 c4 10             	add    esp,0x10
c0016ed4:	83 fe 01             	cmp    esi,0x1
c0016ed7:	75 79                	jne    c0016f52 <VCache::read(unsigned long long, int, void*)+0xca>
c0016ed9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016edc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ee3:	75 6d                	jne    c0016f52 <VCache::read(unsigned long long, int, void*)+0xca>
c0016ee5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016ee8:	89 d1                	mov    ecx,edx
c0016eea:	f7 d9                	neg    ecx
c0016eec:	89 cf                	mov    edi,ecx
c0016eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ef2:	c1 ff 1f             	sar    edi,0x1f
c0016ef5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016ef8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016efc:	89 ce                	mov    esi,ecx
c0016efe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f02:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f06:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f0a:	89 cf                	mov    edi,ecx
c0016f0c:	74 0a                	je     c0016f18 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f0e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f11:	75 05                	jne    c0016f18 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f13:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f16:	74 1c                	je     c0016f34 <VCache::read(unsigned long long, int, void*)+0xac>
c0016f18:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f1c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f1f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f22:	83 ec 0c             	sub    esp,0xc
c0016f25:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f27:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f2a:	52                   	push   edx
c0016f2b:	57                   	push   edi
c0016f2c:	56                   	push   esi
c0016f2d:	50                   	push   eax
c0016f2e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f31:	83 c4 20             	add    esp,0x20
c0016f34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f37:	89 ef                	mov    edi,ebp
c0016f39:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f42:	8d 70 ff             	lea    esi,[eax-0x1]
c0016f45:	23 34 24             	and    esi,DWORD PTR [esp]
c0016f48:	0f af f1             	imul   esi,ecx
c0016f4b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016f4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f50:	eb 30                	jmp    c0016f82 <VCache::read(unsigned long long, int, void*)+0xfa>
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	53                   	push   ebx
c0016f56:	e8 2b fd ff ff       	call   c0016c86 <VCache::invalidateReadBuffer()>
c0016f5b:	83 c4 0c             	add    esp,0xc
c0016f5e:	55                   	push   ebp
c0016f5f:	56                   	push   esi
c0016f60:	68 95 b9 02 c0       	push   0xc002b995
c0016f65:	e8 4b ba ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016f6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f72:	56                   	push   esi
c0016f73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f7b:	50                   	push   eax
c0016f7c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f7f:	83 c4 20             	add    esp,0x20
c0016f82:	83 ec 0c             	sub    esp,0xc
c0016f85:	68 b1 b9 02 c0       	push   0xc002b9b1
c0016f8a:	e8 26 ba ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0016f8f:	58                   	pop    eax
c0016f90:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f93:	e8 c8 78 00 00       	call   c001e860 <Semaphore::release()>
c0016f98:	83 c4 2c             	add    esp,0x2c
c0016f9b:	31 c0                	xor    eax,eax
c0016f9d:	5b                   	pop    ebx
c0016f9e:	5e                   	pop    esi
c0016f9f:	5f                   	pop    edi
c0016fa0:	5d                   	pop    ebp
c0016fa1:	c3                   	ret    

c0016fa2 <Video::putrect(int, int, int, int, unsigned int)>:
c0016fa2:	55                   	push   ebp
c0016fa3:	57                   	push   edi
c0016fa4:	56                   	push   esi
c0016fa5:	53                   	push   ebx
c0016fa6:	83 ec 1c             	sub    esp,0x1c
c0016fa9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fb5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc1:	01 df                	add    edi,ebx
c0016fc3:	39 fb                	cmp    ebx,edi
c0016fc5:	7d 1f                	jge    c0016fe6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016fc7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fcb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016fcf:	7d 12                	jge    c0016fe3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016fd1:	8b 16                	mov    edx,DWORD PTR [esi]
c0016fd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016fd7:	53                   	push   ebx
c0016fd8:	55                   	push   ebp
c0016fd9:	45                   	inc    ebp
c0016fda:	56                   	push   esi
c0016fdb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fde:	83 c4 10             	add    esp,0x10
c0016fe1:	eb e8                	jmp    c0016fcb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016fe3:	43                   	inc    ebx
c0016fe4:	eb dd                	jmp    c0016fc3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016fe6:	83 c4 1c             	add    esp,0x1c
c0016fe9:	5b                   	pop    ebx
c0016fea:	5e                   	pop    esi
c0016feb:	5f                   	pop    edi
c0016fec:	5d                   	pop    ebp
c0016fed:	c3                   	ret    

c0016fee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016fee:	55                   	push   ebp
c0016fef:	57                   	push   edi
c0016ff0:	31 ff                	xor    edi,edi
c0016ff2:	56                   	push   esi
c0016ff3:	53                   	push   ebx
c0016ff4:	83 ec 1c             	sub    esp,0x1c
c0016ff7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ffb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017006:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001700b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001700f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017013:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017017:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001701a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001701e:	01 f9                	add    ecx,edi
c0017020:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017024:	7d 2f                	jge    c0017055 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017026:	31 f6                	xor    esi,esi
c0017028:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001702c:	01 f2                	add    edx,esi
c001702e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017032:	7d 1a                	jge    c001704e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017034:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017037:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001703a:	46                   	inc    esi
c001703b:	51                   	push   ecx
c001703c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017040:	52                   	push   edx
c0017041:	55                   	push   ebp
c0017042:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017045:	83 c4 10             	add    esp,0x10
c0017048:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001704c:	eb da                	jmp    c0017028 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001704e:	47                   	inc    edi
c001704f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017053:	eb c5                	jmp    c001701a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017055:	83 c4 1c             	add    esp,0x1c
c0017058:	5b                   	pop    ebx
c0017059:	5e                   	pop    esi
c001705a:	5f                   	pop    edi
c001705b:	5d                   	pop    ebp
c001705c:	c3                   	ret    
c001705d:	90                   	nop

c001705e <Video::blit(unsigned int*, int, int, int, int)>:
c001705e:	55                   	push   ebp
c001705f:	57                   	push   edi
c0017060:	56                   	push   esi
c0017061:	53                   	push   ebx
c0017062:	83 ec 1c             	sub    esp,0x1c
c0017065:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017069:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001706d:	85 c0                	test   eax,eax
c001706f:	79 02                	jns    c0017073 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017071:	31 c0                	xor    eax,eax
c0017073:	c1 e0 02             	shl    eax,0x2
c0017076:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001707e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017082:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017086:	39 d8                	cmp    eax,ebx
c0017088:	7e 49                	jle    c00170d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001708a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017090:	7c 41                	jl     c00170d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017092:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017096:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001709a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001709e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170a2:	39 f9                	cmp    ecx,edi
c00170a4:	7e 22                	jle    c00170c8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170a6:	83 c5 04             	add    ebp,0x4
c00170a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170af:	7c 14                	jl     c00170c5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170b3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00170b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170be:	56                   	push   esi
c00170bf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00170c2:	83 c4 10             	add    esp,0x10
c00170c5:	47                   	inc    edi
c00170c6:	eb d2                	jmp    c001709a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00170c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170cc:	43                   	inc    ebx
c00170cd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00170d1:	eb ab                	jmp    c001707e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00170d3:	83 c4 1c             	add    esp,0x1c
c00170d6:	5b                   	pop    ebx
c00170d7:	5e                   	pop    esi
c00170d8:	5f                   	pop    edi
c00170d9:	5d                   	pop    ebp
c00170da:	c3                   	ret    
c00170db:	90                   	nop

c00170dc <Video::clearScreen(unsigned int)>:
c00170dc:	57                   	push   edi
c00170dd:	56                   	push   esi
c00170de:	53                   	push   ebx
c00170df:	31 db                	xor    ebx,ebx
c00170e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170e5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170eb:	7e 1f                	jle    c001710c <Video::clearScreen(unsigned int)+0x30>
c00170ed:	31 ff                	xor    edi,edi
c00170ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170f5:	7e 12                	jle    c0017109 <Video::clearScreen(unsigned int)+0x2d>
c00170f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00170f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170fd:	53                   	push   ebx
c00170fe:	57                   	push   edi
c00170ff:	47                   	inc    edi
c0017100:	56                   	push   esi
c0017101:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	eb e6                	jmp    c00170ef <Video::clearScreen(unsigned int)+0x13>
c0017109:	43                   	inc    ebx
c001710a:	eb d9                	jmp    c00170e5 <Video::clearScreen(unsigned int)+0x9>
c001710c:	5b                   	pop    ebx
c001710d:	5e                   	pop    esi
c001710e:	5f                   	pop    edi
c001710f:	c3                   	ret    

c0017110 <Video::putpixel(int, int, unsigned int)>:
c0017110:	c7 44 24 04 e0 b9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b9e0
c0017118:	e9 36 32 00 00       	jmp    c001a353 <Krnl::panic(char const*)>
c001711d:	90                   	nop

c001711e <Video::Video(char const*)>:
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017125:	83 ec 08             	sub    esp,0x8
c0017128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001712c:	50                   	push   eax
c001712d:	e8 c0 ce ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	ba 50 ba 02 c0       	mov    edx,0xc002ba50
c001713a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713e:	89 10                	mov    DWORD PTR [eax],edx
c0017140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017144:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001714e:	90                   	nop
c001714f:	83 c4 0c             	add    esp,0xc
c0017152:	c3                   	ret    
c0017153:	90                   	nop

c0017154 <Video::~Video()>:
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	ba 50 ba 02 c0       	mov    edx,0xc002ba50
c001715c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017160:	89 10                	mov    DWORD PTR [eax],edx
c0017162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017166:	83 ec 0c             	sub    esp,0xc
c0017169:	50                   	push   eax
c001716a:	e8 4d cb ff ff       	call   c0013cbc <Device::~Device()>
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	90                   	nop
c0017173:	83 c4 0c             	add    esp,0xc
c0017176:	c3                   	ret    
c0017177:	90                   	nop

c0017178 <Video::~Video()>:
c0017178:	83 ec 0c             	sub    esp,0xc
c001717b:	83 ec 0c             	sub    esp,0xc
c001717e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017182:	e8 cd ff ff ff       	call   c0017154 <Video::~Video()>
c0017187:	83 c4 10             	add    esp,0x10
c001718a:	83 ec 08             	sub    esp,0x8
c001718d:	68 64 01 00 00       	push   0x164
c0017192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017196:	e8 42 b7 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	83 c4 0c             	add    esp,0xc
c00171a1:	c3                   	ret    

c00171a2 <Video::isMonochrome()>:
c00171a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171ac:	c3                   	ret    
c00171ad:	90                   	nop

c00171ae <Video::getWidth()>:
c00171ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00171b8:	c3                   	ret    
c00171b9:	90                   	nop

c00171ba <Video::getHeight()>:
c00171ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171c4:	c3                   	ret    
c00171c5:	90                   	nop

c00171c6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00171c6:	55                   	push   ebp
c00171c7:	57                   	push   edi
c00171c8:	56                   	push   esi
c00171c9:	53                   	push   ebx
c00171ca:	83 ec 2c             	sub    esp,0x2c
c00171cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171d5:	83 f8 01             	cmp    eax,0x1
c00171d8:	19 c9                	sbb    ecx,ecx
c00171da:	31 db                	xor    ebx,ebx
c00171dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171e0:	89 cd                	mov    ebp,ecx
c00171e2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171ea:	f7 d5                	not    ebp
c00171ec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00171f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171f6:	01 d8                	add    eax,ebx
c00171f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171fc:	56                   	push   esi
c00171fd:	e8 b8 ff ff ff       	call   c00171ba <Video::getHeight()>
c0017202:	59                   	pop    ecx
c0017203:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017207:	7e 70                	jle    c0017279 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001720d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017211:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001721c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017223:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017227:	89 f8                	mov    eax,edi
c0017229:	83 c0 20             	add    eax,0x20
c001722c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017230:	56                   	push   esi
c0017231:	e8 78 ff ff ff       	call   c00171ae <Video::getWidth()>
c0017236:	5a                   	pop    edx
c0017237:	39 c7                	cmp    edi,eax
c0017239:	7d 34                	jge    c001726f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001723b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017240:	74 05                	je     c0017247 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017242:	8b 06                	mov    eax,DWORD PTR [esi]
c0017244:	55                   	push   ebp
c0017245:	eb 0d                	jmp    c0017254 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017247:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001724c:	74 12                	je     c0017260 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001724e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017258:	57                   	push   edi
c0017259:	56                   	push   esi
c001725a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017264:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017268:	47                   	inc    edi
c0017269:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001726d:	75 c1                	jne    c0017230 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001726f:	43                   	inc    ebx
c0017270:	83 fb 20             	cmp    ebx,0x20
c0017273:	0f 85 79 ff ff ff    	jne    c00171f2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017279:	83 c4 2c             	add    esp,0x2c
c001727c:	5b                   	pop    ebx
c001727d:	5e                   	pop    esi
c001727e:	5f                   	pop    edi
c001727f:	5d                   	pop    ebp
c0017280:	c3                   	ret    
c0017281:	90                   	nop

c0017282 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017282:	55                   	push   ebp
c0017283:	57                   	push   edi
c0017284:	56                   	push   esi
c0017285:	53                   	push   ebx
c0017286:	83 ec 28             	sub    esp,0x28
c0017289:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001728d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017291:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017295:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017299:	c1 e6 08             	shl    esi,0x8
c001729c:	01 c6                	add    esi,eax
c001729e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172a2:	c1 e0 08             	shl    eax,0x8
c00172a5:	01 d0                	add    eax,edx
c00172a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172af:	0f af c6             	imul   eax,esi
c00172b2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00172b9:	50                   	push   eax
c00172ba:	e8 9e 86 ff ff       	call   c000f95d <malloc>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	89 c7                	mov    edi,eax
c00172c4:	85 c0                	test   eax,eax
c00172c6:	75 10                	jne    c00172d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00172c8:	83 ec 0c             	sub    esp,0xc
c00172cb:	68 01 ba 02 c0       	push   0xc002ba01
c00172d0:	e8 7e 30 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00172d5:	83 c4 10             	add    esp,0x10
c00172d8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00172db:	ba 12 00 00 00       	mov    edx,0x12
c00172e0:	84 c0                	test   al,al
c00172e2:	74 11                	je     c00172f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00172e4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00172e8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00172ec:	c1 fa 03             	sar    edx,0x3
c00172ef:	0f af d1             	imul   edx,ecx
c00172f2:	83 c2 12             	add    edx,0x12
c00172f5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00172f9:	74 04                	je     c00172ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00172fb:	85 f6                	test   esi,esi
c00172fd:	75 12                	jne    c0017311 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00172ff:	83 ec 0c             	sub    esp,0xc
c0017302:	68 11 ba 02 c0       	push   0xc002ba11
c0017307:	e8 a9 b6 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001730c:	e9 b8 00 00 00       	jmp    c00173c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0017311:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017315:	80 f9 02             	cmp    cl,0x2
c0017318:	0f 85 96 00 00 00    	jne    c00173b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001731e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017323:	75 0e                	jne    c0017333 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017325:	84 c0                	test   al,al
c0017327:	75 0a                	jne    c0017333 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017329:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001732c:	83 e8 18             	sub    eax,0x18
c001732f:	a8 f7                	test   al,0xf7
c0017331:	74 0a                	je     c001733d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017333:	83 ec 0c             	sub    esp,0xc
c0017336:	68 26 ba 02 c0       	push   0xc002ba26
c001733b:	eb 7f                	jmp    c00173bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001733d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017345:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001734d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017359:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001735d:	75 0c                	jne    c001736b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001735f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017364:	c1 e0 18             	shl    eax,0x18
c0017367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001736b:	45                   	inc    ebp
c001736c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017371:	c1 e1 10             	shl    ecx,0x10
c0017374:	89 c8                	mov    eax,ecx
c0017376:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001737b:	c1 e1 08             	shl    ecx,0x8
c001737e:	09 c1                	or     ecx,eax
c0017380:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017384:	09 c1                	or     ecx,eax
c0017386:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001738a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001738e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017392:	c1 f8 03             	sar    eax,0x3
c0017395:	01 c2                	add    edx,eax
c0017397:	89 e8                	mov    eax,ebp
c0017399:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001739d:	39 c6                	cmp    esi,eax
c001739f:	7f b0                	jg     c0017351 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00173a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173a9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00173ac:	7e 22                	jle    c00173d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00173ae:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00173b2:	eb 99                	jmp    c001734d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00173b4:	50                   	push   eax
c00173b5:	50                   	push   eax
c00173b6:	51                   	push   ecx
c00173b7:	68 34 ba 02 c0       	push   0xc002ba34
c00173bc:	e8 f4 b5 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00173c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173c4:	e8 a4 85 ff ff       	call   c000f96d <free>
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	31 ff                	xor    edi,edi
c00173ce:	eb 0f                	jmp    c00173df <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00173d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173d4:	89 30                	mov    DWORD PTR [eax],esi
c00173d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00173dd:	89 30                	mov    DWORD PTR [eax],esi
c00173df:	83 c4 1c             	add    esp,0x1c
c00173e2:	89 f8                	mov    eax,edi
c00173e4:	5b                   	pop    ebx
c00173e5:	5e                   	pop    esi
c00173e6:	5f                   	pop    edi
c00173e7:	5d                   	pop    ebp
c00173e8:	c3                   	ret    
c00173e9:	90                   	nop

c00173ea <Video::putTGA(int, int, unsigned char*, int)>:
c00173ea:	55                   	push   ebp
c00173eb:	57                   	push   edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 28             	sub    esp,0x28
c00173f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00173f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173f9:	50                   	push   eax
c00173fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173fe:	50                   	push   eax
c00173ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017403:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017407:	56                   	push   esi
c0017408:	e8 75 fe ff ff       	call   c0017282 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001740d:	83 c4 20             	add    esp,0x20
c0017410:	85 c0                	test   eax,eax
c0017412:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017416:	74 35                	je     c001744d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017418:	89 c7                	mov    edi,eax
c001741a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001741e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017422:	39 d8                	cmp    eax,ebx
c0017424:	7e 27                	jle    c001744d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017426:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001742a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001742e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017432:	39 e8                	cmp    eax,ebp
c0017434:	7e 14                	jle    c001744a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017436:	8b 06                	mov    eax,DWORD PTR [esi]
c0017438:	83 c7 04             	add    edi,0x4
c001743b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001743e:	53                   	push   ebx
c001743f:	55                   	push   ebp
c0017440:	45                   	inc    ebp
c0017441:	56                   	push   esi
c0017442:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	eb e0                	jmp    c001742a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001744a:	43                   	inc    ebx
c001744b:	eb cd                	jmp    c001741a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001744d:	83 c4 1c             	add    esp,0x1c
c0017450:	5b                   	pop    ebx
c0017451:	5e                   	pop    esi
c0017452:	5f                   	pop    edi
c0017453:	5d                   	pop    ebp
c0017454:	c3                   	ret    
c0017455:	90                   	nop

c0017456 <ACPI::close(int, int, void*)>:
c0017456:	83 ec 1c             	sub    esp,0x1c
c0017459:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017461:	74 0a                	je     c001746d <ACPI::close(int, int, void*)+0x17>
c0017463:	b8 00 00 00 00       	mov    eax,0x0
c0017468:	e9 8a 00 00 00       	jmp    c00174f7 <ACPI::close(int, int, void*)+0xa1>
c001746d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017472:	75 27                	jne    c001749b <ACPI::close(int, int, void*)+0x45>
c0017474:	a1 48 ec 02 c0       	mov    eax,ds:0xc002ec48
c0017479:	85 c0                	test   eax,eax
c001747b:	74 07                	je     c0017484 <ACPI::close(int, int, void*)+0x2e>
c001747d:	a1 48 ec 02 c0       	mov    eax,ds:0xc002ec48
c0017482:	ff d0                	call   eax
c0017484:	83 ec 0c             	sub    esp,0xc
c0017487:	68 90 ba 02 c0       	push   0xc002ba90
c001748c:	e8 c2 2e 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017499:	eb 5c                	jmp    c00174f7 <ACPI::close(int, int, void*)+0xa1>
c001749b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174a0:	75 50                	jne    c00174f2 <ACPI::close(int, int, void*)+0x9c>
c00174a2:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c00174a7:	85 c0                	test   eax,eax
c00174a9:	74 07                	je     c00174b2 <ACPI::close(int, int, void*)+0x5c>
c00174ab:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c00174b0:	ff d0                	call   eax
c00174b2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174b7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174bc:	83 e0 02             	and    eax,0x2
c00174bf:	74 1c                	je     c00174dd <ACPI::close(int, int, void*)+0x87>
c00174c1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00174c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174cc:	89 c2                	mov    edx,eax
c00174ce:	ec                   	in     al,dx
c00174cf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00174d3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00174d7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174db:	eb da                	jmp    c00174b7 <ACPI::close(int, int, void*)+0x61>
c00174dd:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00174e4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00174e9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00174ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174f1:	ee                   	out    dx,al
c00174f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174f7:	83 c4 1c             	add    esp,0x1c
c00174fa:	c3                   	ret    

c00174fb <findRSDP()>:
c00174fb:	83 ec 1c             	sub    esp,0x1c
c00174fe:	83 ec 0c             	sub    esp,0xc
c0017501:	68 6b bb 02 c0       	push   0xc002bb6b
c0017506:	e8 ac 84 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017513:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017519:	83 e0 04             	and    eax,0x4
c001751c:	84 c0                	test   al,al
c001751e:	75 0a                	jne    c001752a <findRSDP()+0x2f>
c0017520:	b8 00 00 00 00       	mov    eax,0x0
c0017525:	e9 9a 00 00 00       	jmp    c00175c4 <findRSDP()+0xc9>
c001752a:	a1 14 e6 02 c0       	mov    eax,ds:0xc002e614
c001752f:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017534:	7f 1b                	jg     c0017551 <findRSDP()+0x56>
c0017536:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001753b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017541:	83 e2 fb             	and    edx,0xfffffffb
c0017544:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001754a:	b8 00 00 00 00       	mov    eax,0x0
c001754f:	eb 73                	jmp    c00175c4 <findRSDP()+0xc9>
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	68 7b bb 02 c0       	push   0xc002bb7b
c0017559:	e8 59 84 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017569:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017571:	77 3c                	ja     c00175af <findRSDP()+0xb4>
c0017573:	83 ec 04             	sub    esp,0x4
c0017576:	6a 08                	push   0x8
c0017578:	68 94 bb 02 c0       	push   0xc002bb94
c001757d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017581:	e8 c6 90 fe ff       	call   c000064c <memcmp>
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	85 c0                	test   eax,eax
c001758b:	0f 94 c0             	sete   al
c001758e:	84 c0                	test   al,al
c0017590:	74 16                	je     c00175a8 <findRSDP()+0xad>
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	68 9d bb 02 c0       	push   0xc002bb9d
c001759a:	e8 18 84 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175a6:	eb 1c                	jmp    c00175c4 <findRSDP()+0xc9>
c00175a8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175ad:	eb ba                	jmp    c0017569 <findRSDP()+0x6e>
c00175af:	83 ec 0c             	sub    esp,0xc
c00175b2:	68 ab bb 02 c0       	push   0xc002bbab
c00175b7:	e8 fb 83 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00175bc:	83 c4 10             	add    esp,0x10
c00175bf:	b8 00 00 00 00       	mov    eax,0x0
c00175c4:	83 c4 1c             	add    esp,0x1c
c00175c7:	c3                   	ret    

c00175c8 <loadACPITables(unsigned char*)>:
c00175c8:	57                   	push   edi
c00175c9:	56                   	push   esi
c00175ca:	53                   	push   ebx
c00175cb:	83 ec 60             	sub    esp,0x60
c00175ce:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00175d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175d9:	83 e0 04             	and    eax,0x4
c00175dc:	84 c0                	test   al,al
c00175de:	0f 84 33 02 00 00    	je     c0017817 <loadACPITables(unsigned char*)+0x24f>
c00175e4:	a0 60 ee 02 c0       	mov    al,ds:0xc002ee60
c00175e9:	84 c0                	test   al,al
c00175eb:	74 75                	je     c0017662 <loadACPITables(unsigned char*)+0x9a>
c00175ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00175f1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00175f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175fc:	83 e8 24             	sub    eax,0x24
c00175ff:	c1 e8 03             	shr    eax,0x3
c0017602:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017606:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001760e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017612:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017616:	0f 8d b2 00 00 00    	jge    c00176ce <loadACPITables(unsigned char*)+0x106>
c001761c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017620:	83 c0 24             	add    eax,0x24
c0017623:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017627:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001762b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001762f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017633:	c1 e0 03             	shl    eax,0x3
c0017636:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001763a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001763e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017641:	8b 00                	mov    eax,DWORD PTR [eax]
c0017643:	89 c1                	mov    ecx,eax
c0017645:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c001764a:	8d 50 01             	lea    edx,[eax+0x1]
c001764d:	89 15 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edx
c0017653:	89 ca                	mov    edx,ecx
c0017655:	89 14 c5 64 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd139c],edx
c001765c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017660:	eb ac                	jmp    c001760e <loadACPITables(unsigned char*)+0x46>
c0017662:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017666:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001766a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001766e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017671:	83 e8 24             	sub    eax,0x24
c0017674:	c1 e8 02             	shr    eax,0x2
c0017677:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001767b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017683:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017687:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001768b:	7d 41                	jge    c00176ce <loadACPITables(unsigned char*)+0x106>
c001768d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017691:	83 c0 24             	add    eax,0x24
c0017694:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017698:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001769c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176a4:	c1 e0 02             	shl    eax,0x2
c00176a7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00176ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176b1:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c00176b6:	8d 50 01             	lea    edx,[eax+0x1]
c00176b9:	89 15 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edx
c00176bf:	89 ca                	mov    edx,ecx
c00176c1:	89 14 c5 64 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd139c],edx
c00176c8:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00176cc:	eb b5                	jmp    c0017683 <loadACPITables(unsigned char*)+0xbb>
c00176ce:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00176d6:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c00176db:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00176df:	0f 8d 33 01 00 00    	jge    c0017818 <loadACPITables(unsigned char*)+0x250>
c00176e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176e9:	8b 04 c5 64 ec 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd139c]
c00176f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00176fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017700:	25 ff 0f 00 00       	and    eax,0xfff
c0017705:	89 c6                	mov    esi,eax
c0017707:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c001770d:	83 ec 0c             	sub    esp,0xc
c0017710:	6a 01                	push   0x1
c0017712:	e8 cc 9e ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001771e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	6a 01                	push   0x1
c0017729:	6a 01                	push   0x1
c001772b:	50                   	push   eax
c001772c:	52                   	push   edx
c001772d:	53                   	push   ebx
c001772e:	e8 4d a8 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017733:	83 c4 20             	add    esp,0x20
c0017736:	09 f0                	or     eax,esi
c0017738:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001773c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017740:	c1 e0 03             	shl    eax,0x3
c0017743:	05 60 ec 02 c0       	add    eax,0xc002ec60
c0017748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001774c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017750:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017754:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001775c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017760:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017768:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001776c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017770:	89 c6                	mov    esi,eax
c0017772:	89 d7                	mov    edi,edx
c0017774:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017776:	89 c8                	mov    eax,ecx
c0017778:	89 fa                	mov    edx,edi
c001777a:	89 f3                	mov    ebx,esi
c001777c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017780:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001778c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001778f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017797:	05 00 10 00 00       	add    eax,0x1000
c001779c:	c1 e8 0c             	shr    eax,0xc
c001779f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177af:	25 ff 0f 00 00       	and    eax,0xfff
c00177b4:	89 c6                	mov    esi,eax
c00177b6:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c00177bc:	83 ec 0c             	sub    esp,0xc
c00177bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177c3:	e8 1b 9e ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d5:	83 ec 0c             	sub    esp,0xc
c00177d8:	6a 01                	push   0x1
c00177da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00177de:	50                   	push   eax
c00177df:	52                   	push   edx
c00177e0:	53                   	push   ebx
c00177e1:	e8 9a a7 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177e6:	83 c4 20             	add    esp,0x20
c00177e9:	09 f0                	or     eax,esi
c00177eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	50                   	push   eax
c00177f7:	e8 17 a1 ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c00177fc:	83 c4 10             	add    esp,0x10
c00177ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017803:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017807:	89 14 c5 64 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd139c],edx
c001780e:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017812:	e9 bf fe ff ff       	jmp    c00176d6 <loadACPITables(unsigned char*)+0x10e>
c0017817:	90                   	nop
c0017818:	83 c4 60             	add    esp,0x60
c001781b:	5b                   	pop    ebx
c001781c:	5e                   	pop    esi
c001781d:	5f                   	pop    edi
c001781e:	c3                   	ret    

c001781f <findRSDT(unsigned char*)>:
c001781f:	57                   	push   edi
c0017820:	56                   	push   esi
c0017821:	53                   	push   ebx
c0017822:	83 ec 50             	sub    esp,0x50
c0017825:	83 ec 0c             	sub    esp,0xc
c0017828:	68 bf bb 02 c0       	push   0xc002bbbf
c001782d:	e8 85 81 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001783a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017840:	83 e0 04             	and    eax,0x4
c0017843:	84 c0                	test   al,al
c0017845:	75 0a                	jne    c0017851 <findRSDT(unsigned char*)+0x32>
c0017847:	b8 00 00 00 00       	mov    eax,0x0
c001784c:	e9 81 01 00 00       	jmp    c00179d2 <findRSDT(unsigned char*)+0x1b3>
c0017851:	83 ec 0c             	sub    esp,0xc
c0017854:	68 d1 bb 02 c0       	push   0xc002bbd1
c0017859:	e8 59 81 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	89 e0                	mov    eax,esp
c0017863:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017867:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001786b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001786f:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017877:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001787b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001787f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017883:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017887:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001788b:	89 c6                	mov    esi,eax
c001788d:	89 d7                	mov    edi,edx
c001788f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017891:	89 c8                	mov    eax,ecx
c0017893:	89 fa                	mov    edx,edi
c0017895:	89 f3                	mov    ebx,esi
c0017897:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001789b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001789f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178a3:	83 ec 0c             	sub    esp,0xc
c00178a6:	68 e3 bb 02 c0       	push   0xc002bbe3
c00178ab:	e8 07 81 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00178b0:	83 c4 10             	add    esp,0x10
c00178b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00178b7:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00178bb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00178c3:	83 ec 0c             	sub    esp,0xc
c00178c6:	68 f5 bb 02 c0       	push   0xc002bbf5
c00178cb:	e8 e7 80 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178db:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00178e7:	83 ec 04             	sub    esp,0x4
c00178ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178f2:	68 b4 ba 02 c0       	push   0xc002bab4
c00178f7:	e8 b9 b0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017903:	25 ff 0f 00 00       	and    eax,0xfff
c0017908:	89 c6                	mov    esi,eax
c001790a:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c0017910:	83 ec 0c             	sub    esp,0xc
c0017913:	6a 02                	push   0x2
c0017915:	e8 c9 9c ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017921:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	6a 01                	push   0x1
c001792c:	6a 02                	push   0x2
c001792e:	50                   	push   eax
c001792f:	52                   	push   edx
c0017930:	53                   	push   ebx
c0017931:	e8 4a a6 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017936:	83 c4 20             	add    esp,0x20
c0017939:	09 f0                	or     eax,esi
c001793b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001793f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017943:	25 ff 0f 00 00       	and    eax,0xfff
c0017948:	89 c6                	mov    esi,eax
c001794a:	8b 1d 30 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e730
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	6a 02                	push   0x2
c0017955:	e8 89 9c ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017961:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017967:	83 ec 0c             	sub    esp,0xc
c001796a:	6a 01                	push   0x1
c001796c:	6a 02                	push   0x2
c001796e:	50                   	push   eax
c001796f:	52                   	push   edx
c0017970:	53                   	push   ebx
c0017971:	e8 0a a6 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017976:	83 c4 20             	add    esp,0x20
c0017979:	09 f0                	or     eax,esi
c001797b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001797f:	83 ec 04             	sub    esp,0x4
c0017982:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017986:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001798a:	68 d4 ba 02 c0       	push   0xc002bad4
c001798f:	e8 21 b0 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0017994:	83 c4 10             	add    esp,0x10
c0017997:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001799c:	75 11                	jne    c00179af <findRSDT(unsigned char*)+0x190>
c001799e:	c6 05 60 ee 02 c0 00 	mov    BYTE PTR ds:0xc002ee60,0x0
c00179a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179ad:	eb 1f                	jmp    c00179ce <findRSDT(unsigned char*)+0x1af>
c00179af:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00179b4:	75 11                	jne    c00179c7 <findRSDT(unsigned char*)+0x1a8>
c00179b6:	c6 05 60 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee60,0x1
c00179bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00179c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179c5:	eb 07                	jmp    c00179ce <findRSDT(unsigned char*)+0x1af>
c00179c7:	b8 00 00 00 00       	mov    eax,0x0
c00179cc:	eb 04                	jmp    c00179d2 <findRSDT(unsigned char*)+0x1b3>
c00179ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00179d2:	83 c4 50             	add    esp,0x50
c00179d5:	5b                   	pop    ebx
c00179d6:	5e                   	pop    esi
c00179d7:	5f                   	pop    edi
c00179d8:	c3                   	ret    

c00179d9 <findDataTable(unsigned char*, char*)>:
c00179d9:	83 ec 1c             	sub    esp,0x1c
c00179dc:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00179e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179e7:	83 e0 04             	and    eax,0x4
c00179ea:	84 c0                	test   al,al
c00179ec:	75 07                	jne    c00179f5 <findDataTable(unsigned char*, char*)+0x1c>
c00179ee:	b8 00 00 00 00       	mov    eax,0x0
c00179f3:	eb 52                	jmp    c0017a47 <findDataTable(unsigned char*, char*)+0x6e>
c00179f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00179fd:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c0017a02:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a06:	7d 3a                	jge    c0017a42 <findDataTable(unsigned char*, char*)+0x69>
c0017a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a0c:	c1 e0 03             	shl    eax,0x3
c0017a0f:	05 60 ec 02 c0       	add    eax,0xc002ec60
c0017a14:	83 ec 04             	sub    esp,0x4
c0017a17:	6a 04                	push   0x4
c0017a19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a1d:	50                   	push   eax
c0017a1e:	e8 29 8c fe ff       	call   c000064c <memcmp>
c0017a23:	83 c4 10             	add    esp,0x10
c0017a26:	85 c0                	test   eax,eax
c0017a28:	0f 94 c0             	sete   al
c0017a2b:	84 c0                	test   al,al
c0017a2d:	74 0d                	je     c0017a3c <findDataTable(unsigned char*, char*)+0x63>
c0017a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a33:	8b 04 c5 64 ec 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd139c]
c0017a3a:	eb 0b                	jmp    c0017a47 <findDataTable(unsigned char*, char*)+0x6e>
c0017a3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a40:	eb bb                	jmp    c00179fd <findDataTable(unsigned char*, char*)+0x24>
c0017a42:	b8 00 00 00 00       	mov    eax,0x0
c0017a47:	83 c4 1c             	add    esp,0x1c
c0017a4a:	c3                   	ret    

c0017a4b <scanMADT()>:
c0017a4b:	53                   	push   ebx
c0017a4c:	83 ec 38             	sub    esp,0x38
c0017a4f:	83 ec 0c             	sub    esp,0xc
c0017a52:	68 07 bc 02 c0       	push   0xc002bc07
c0017a57:	e8 5b 7f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0017a64:	25 00 04 00 00       	and    eax,0x400
c0017a69:	74 14                	je     c0017a7f <scanMADT()+0x34>
c0017a6b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017a70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a76:	83 e2 fb             	and    edx,0xfffffffb
c0017a79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a7f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017a84:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a8a:	83 e0 04             	and    eax,0x4
c0017a8d:	84 c0                	test   al,al
c0017a8f:	0f 84 7a 04 00 00    	je     c0017f0f <scanMADT()+0x4c4>
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	68 14 bc 02 c0       	push   0xc002bc14
c0017a9d:	e8 15 7f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	e8 51 fa ff ff       	call   c00174fb <findRSDP()>
c0017aaa:	a3 6c ee 02 c0       	mov    ds:0xc002ee6c,eax
c0017aaf:	a1 6c ee 02 c0       	mov    eax,ds:0xc002ee6c
c0017ab4:	85 c0                	test   eax,eax
c0017ab6:	75 19                	jne    c0017ad1 <scanMADT()+0x86>
c0017ab8:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017abd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ac3:	83 e2 fb             	and    edx,0xfffffffb
c0017ac6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017acc:	e9 42 04 00 00       	jmp    c0017f13 <scanMADT()+0x4c8>
c0017ad1:	83 ec 0c             	sub    esp,0xc
c0017ad4:	68 26 bc 02 c0       	push   0xc002bc26
c0017ad9:	e8 d9 7e ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017ade:	83 c4 10             	add    esp,0x10
c0017ae1:	a1 6c ee 02 c0       	mov    eax,ds:0xc002ee6c
c0017ae6:	83 ec 0c             	sub    esp,0xc
c0017ae9:	50                   	push   eax
c0017aea:	e8 30 fd ff ff       	call   c001781f <findRSDT(unsigned char*)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	a3 68 ee 02 c0       	mov    ds:0xc002ee68,eax
c0017af7:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017afc:	85 c0                	test   eax,eax
c0017afe:	75 19                	jne    c0017b19 <scanMADT()+0xce>
c0017b00:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017b05:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b0b:	83 e2 fb             	and    edx,0xfffffffb
c0017b0e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b14:	e9 fa 03 00 00       	jmp    c0017f13 <scanMADT()+0x4c8>
c0017b19:	83 ec 0c             	sub    esp,0xc
c0017b1c:	68 36 bc 02 c0       	push   0xc002bc36
c0017b21:	e8 91 7e ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017b26:	83 c4 10             	add    esp,0x10
c0017b29:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017b2e:	83 ec 0c             	sub    esp,0xc
c0017b31:	50                   	push   eax
c0017b32:	e8 91 fa ff ff       	call   c00175c8 <loadACPITables(unsigned char*)>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017b3f:	83 ec 08             	sub    esp,0x8
c0017b42:	68 4e bc 02 c0       	push   0xc002bc4e
c0017b47:	50                   	push   eax
c0017b48:	e8 8c fe ff ff       	call   c00179d9 <findDataTable(unsigned char*, char*)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b54:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017b59:	75 19                	jne    c0017b74 <scanMADT()+0x129>
c0017b5b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017b60:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b66:	83 e2 fe             	and    edx,0xfffffffe
c0017b69:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b6f:	e9 9f 03 00 00       	jmp    c0017f13 <scanMADT()+0x4c8>
c0017b74:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017b7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b83:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017b87:	0f 87 86 03 00 00    	ja     c0017f13 <scanMADT()+0x4c8>
c0017b8d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017b95:	0f 87 78 03 00 00    	ja     c0017f13 <scanMADT()+0x4c8>
c0017b9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ba3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0017baa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bb6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017bba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0017bc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bcd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017bd1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017bd6:	0f 86 36 03 00 00    	jbe    c0017f12 <scanMADT()+0x4c7>
c0017bdc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017be1:	75 57                	jne    c0017c3a <scanMADT()+0x1ef>
c0017be3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be7:	8d 50 01             	lea    edx,[eax+0x1]
c0017bea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bee:	8a 15 60 f0 02 c0    	mov    dl,BYTE PTR ds:0xc002f060
c0017bf4:	0f b6 d2             	movzx  edx,dl
c0017bf7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017bfb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017bff:	88 82 a0 f0 02 c0    	mov    BYTE PTR [edx-0x3ffd0f60],al
c0017c05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c09:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c10:	8a 15 60 f0 02 c0    	mov    dl,BYTE PTR ds:0xc002f060
c0017c16:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c19:	88 0d 60 f0 02 c0    	mov    BYTE PTR ds:0xc002f060,cl
c0017c1f:	0f b6 d2             	movzx  edx,dl
c0017c22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c26:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c2a:	88 82 80 f0 02 c0    	mov    BYTE PTR [edx-0x3ffd0f80],al
c0017c30:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c35:	e9 c1 02 00 00       	jmp    c0017efb <scanMADT()+0x4b0>
c0017c3a:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017c3f:	0f 85 14 01 00 00    	jne    c0017d59 <scanMADT()+0x30e>
c0017c45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c49:	8d 50 01             	lea    edx,[eax+0x1]
c0017c4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c50:	8a 15 20 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002ef20
c0017c56:	0f b6 d2             	movzx  edx,dl
c0017c59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c5d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c61:	88 82 40 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd10c0],al
c0017c67:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017c6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c73:	01 d0                	add    eax,edx
c0017c75:	83 c0 2c             	add    eax,0x2c
c0017c78:	8a 00                	mov    al,BYTE PTR [eax]
c0017c7a:	0f b6 d0             	movzx  edx,al
c0017c7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c81:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c88:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c8c:	0f b6 c0             	movzx  eax,al
c0017c8f:	c1 e0 08             	shl    eax,0x8
c0017c92:	89 d1                	mov    ecx,edx
c0017c94:	09 c1                	or     ecx,eax
c0017c96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9a:	8d 50 02             	lea    edx,[eax+0x2]
c0017c9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ca5:	0f b6 c0             	movzx  eax,al
c0017ca8:	c1 e0 10             	shl    eax,0x10
c0017cab:	09 c1                	or     ecx,eax
c0017cad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb1:	8d 50 03             	lea    edx,[eax+0x3]
c0017cb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cbc:	0f b6 c0             	movzx  eax,al
c0017cbf:	c1 e0 18             	shl    eax,0x18
c0017cc2:	09 c1                	or     ecx,eax
c0017cc4:	89 ca                	mov    edx,ecx
c0017cc6:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c0017ccb:	0f b6 c0             	movzx  eax,al
c0017cce:	89 14 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],edx
c0017cd5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce2:	01 d0                	add    eax,edx
c0017ce4:	83 c0 2c             	add    eax,0x2c
c0017ce7:	8a 00                	mov    al,BYTE PTR [eax]
c0017ce9:	0f b6 d0             	movzx  edx,al
c0017cec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf0:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cfb:	0f b6 c0             	movzx  eax,al
c0017cfe:	c1 e0 08             	shl    eax,0x8
c0017d01:	89 d1                	mov    ecx,edx
c0017d03:	09 c1                	or     ecx,eax
c0017d05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d09:	8d 50 02             	lea    edx,[eax+0x2]
c0017d0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d10:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d14:	0f b6 c0             	movzx  eax,al
c0017d17:	c1 e0 10             	shl    eax,0x10
c0017d1a:	09 c1                	or     ecx,eax
c0017d1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d20:	8d 50 03             	lea    edx,[eax+0x3]
c0017d23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d2b:	0f b6 c0             	movzx  eax,al
c0017d2e:	c1 e0 18             	shl    eax,0x18
c0017d31:	09 c1                	or     ecx,eax
c0017d33:	89 ca                	mov    edx,ecx
c0017d35:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c0017d3a:	0f b6 c0             	movzx  eax,al
c0017d3d:	89 14 85 e0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1020],edx
c0017d44:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d49:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c0017d4e:	40                   	inc    eax
c0017d4f:	a2 20 ef 02 c0       	mov    ds:0xc002ef20,al
c0017d54:	e9 a2 01 00 00       	jmp    c0017efb <scanMADT()+0x4b0>
c0017d59:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017d5e:	0f 85 e9 00 00 00    	jne    c0017e4d <scanMADT()+0x402>
c0017d64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d68:	8d 50 01             	lea    edx,[eax+0x1]
c0017d6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d73:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d77:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017d7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0017d82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d8e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017d92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9a:	01 d0                	add    eax,edx
c0017d9c:	83 c0 2c             	add    eax,0x2c
c0017d9f:	8a 00                	mov    al,BYTE PTR [eax]
c0017da1:	0f b6 d0             	movzx  edx,al
c0017da4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017daf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017db3:	0f b6 c0             	movzx  eax,al
c0017db6:	c1 e0 08             	shl    eax,0x8
c0017db9:	89 d1                	mov    ecx,edx
c0017dbb:	09 c1                	or     ecx,eax
c0017dbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc1:	8d 50 02             	lea    edx,[eax+0x2]
c0017dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dcc:	0f b6 c0             	movzx  eax,al
c0017dcf:	c1 e0 10             	shl    eax,0x10
c0017dd2:	09 c1                	or     ecx,eax
c0017dd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd8:	8d 50 03             	lea    edx,[eax+0x3]
c0017ddb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ddf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017de3:	0f b6 c0             	movzx  eax,al
c0017de6:	c1 e0 18             	shl    eax,0x18
c0017de9:	09 c8                	or     eax,ecx
c0017deb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017def:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017df4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dfc:	01 d0                	add    eax,edx
c0017dfe:	83 c0 2c             	add    eax,0x2c
c0017e01:	8a 00                	mov    al,BYTE PTR [eax]
c0017e03:	0f b6 c0             	movzx  eax,al
c0017e06:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e0a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e11:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e15:	0f b6 d2             	movzx  edx,dl
c0017e18:	c1 e2 08             	shl    edx,0x8
c0017e1b:	09 d0                	or     eax,edx
c0017e1d:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e22:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e27:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e30:	88 90 20 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27e0],dl
c0017e36:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017e3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017e40:	66 89 84 12 00 ef 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1100],ax
c0017e48:	e9 ae 00 00 00       	jmp    c0017efb <scanMADT()+0x4b0>
c0017e4d:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017e52:	0f 85 97 00 00 00    	jne    c0017eef <scanMADT()+0x4a4>
c0017e58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e5f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e67:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6b:	0f b6 c0             	movzx  eax,al
c0017e6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7a:	01 d0                	add    eax,edx
c0017e7c:	83 c0 2c             	add    eax,0x2c
c0017e7f:	8a 00                	mov    al,BYTE PTR [eax]
c0017e81:	0f b6 d0             	movzx  edx,al
c0017e84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e88:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e8f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e93:	0f b6 c0             	movzx  eax,al
c0017e96:	c1 e0 08             	shl    eax,0x8
c0017e99:	09 d0                	or     eax,edx
c0017e9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e9f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ea4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea8:	8d 50 01             	lea    edx,[eax+0x1]
c0017eab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eb7:	0f b6 c0             	movzx  eax,al
c0017eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ec2:	c1 e0 08             	shl    eax,0x8
c0017ec5:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ec9:	89 c1                	mov    ecx,eax
c0017ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ecf:	c1 e0 18             	shl    eax,0x18
c0017ed2:	89 c3                	mov    ebx,eax
c0017ed4:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c0017ed9:	8d 50 01             	lea    edx,[eax+0x1]
c0017edc:	89 15 70 ee 02 c0    	mov    DWORD PTR ds:0xc002ee70,edx
c0017ee2:	09 d9                	or     ecx,ebx
c0017ee4:	89 ca                	mov    edx,ecx
c0017ee6:	89 14 85 80 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1180],edx
c0017eed:	eb 0c                	jmp    c0017efb <scanMADT()+0x4b0>
c0017eef:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017ef4:	75 05                	jne    c0017efb <scanMADT()+0x4b0>
c0017ef6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017efb:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f04:	01 d0                	add    eax,edx
c0017f06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f0a:	e9 6d fc ff ff       	jmp    c0017b7c <scanMADT()+0x131>
c0017f0f:	90                   	nop
c0017f10:	eb 01                	jmp    c0017f13 <scanMADT()+0x4c8>
c0017f12:	90                   	nop
c0017f13:	83 c4 38             	add    esp,0x38
c0017f16:	5b                   	pop    ebx
c0017f17:	c3                   	ret    

c0017f18 <ACPI::ACPI()>:
c0017f18:	83 ec 0c             	sub    esp,0xc
c0017f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f1f:	83 ec 08             	sub    esp,0x8
c0017f22:	68 53 bc 02 c0       	push   0xc002bc53
c0017f27:	50                   	push   eax
c0017f28:	e8 c5 c0 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	ba bc bd 02 c0       	mov    edx,0xc002bdbc
c0017f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f39:	89 10                	mov    DWORD PTR [eax],edx
c0017f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f4a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f58:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 58 bc 02 c0       	push   0xc002bc58
c0017f6a:	e8 48 7a ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0017f6f:	83 c4 10             	add    esp,0x10
c0017f72:	e8 d4 fa ff ff       	call   c0017a4b <scanMADT()>
c0017f77:	90                   	nop
c0017f78:	83 c4 0c             	add    esp,0xc
c0017f7b:	c3                   	ret    

c0017f7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017f7c:	83 ec 2c             	sub    esp,0x2c
c0017f7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017f83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f8b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017f8f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017f94:	88 d0                	mov    al,dl
c0017f96:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f9f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017fa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fb1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017fb5:	0f 8d 97 00 00 00    	jge    c0018052 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017fbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fc3:	83 c2 2a             	add    edx,0x2a
c0017fc6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017fca:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017fcf:	75 78                	jne    c0018049 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017fd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fd9:	83 c2 2a             	add    edx,0x2a
c0017fdc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017fe0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017fe4:	75 63                	jne    c0018049 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017fe6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017feb:	74 3a                	je     c0018027 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ff1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ff5:	83 c2 2a             	add    edx,0x2a
c0017ff8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018003:	39 c2                	cmp    edx,eax
c0018005:	74 10                	je     c0018017 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018007:	83 ec 0c             	sub    esp,0xc
c001800a:	68 f4 ba 02 c0       	push   0xc002baf4
c001800f:	e8 3f 23 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0018014:	83 c4 10             	add    esp,0x10
c0018017:	83 ec 0c             	sub    esp,0xc
c001801a:	68 66 bc 02 c0       	push   0xc002bc66
c001801f:	e8 2f 23 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001802b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001802f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018033:	83 c2 2a             	add    edx,0x2a
c0018036:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001803a:	8b 02                	mov    eax,DWORD PTR [edx]
c001803c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001803f:	89 01                	mov    DWORD PTR [ecx],eax
c0018041:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018044:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018049:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001804d:	e9 55 ff ff ff       	jmp    c0017fa7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018052:	90                   	nop
c0018053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018057:	83 c4 2c             	add    esp,0x2c
c001805a:	c2 04 00             	ret    0x4
c001805d:	90                   	nop

c001805e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001805e:	83 ec 1c             	sub    esp,0x1c
c0018061:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018065:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018069:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001806d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018072:	88 c8                	mov    al,cl
c0018074:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018078:	88 d0                	mov    al,dl
c001807a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001807e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018082:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001808c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001808f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018093:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001809b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180a5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00180a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ac:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00180b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180bb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00180bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00180c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c6:	83 c2 2a             	add    edx,0x2a
c00180c9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00180cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180db:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00180de:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180e2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00180e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ea:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180f0:	8d 50 01             	lea    edx,[eax+0x1]
c00180f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180f7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00180fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018101:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018107:	3d 00 02 00 00       	cmp    eax,0x200
c001810c:	75 10                	jne    c001811e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001810e:	83 ec 0c             	sub    esp,0xc
c0018111:	68 75 bc 02 c0       	push   0xc002bc75
c0018116:	e8 38 22 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	90                   	nop
c001811f:	83 c4 1c             	add    esp,0x1c
c0018122:	c3                   	ret    
c0018123:	90                   	nop

c0018124 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018124:	b8 00 00 00 00       	mov    eax,0x0
c0018129:	c3                   	ret    

c001812a <ACPI::detectPCI()>:
c001812a:	53                   	push   ebx
c001812b:	83 ec 28             	sub    esp,0x28
c001812e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018133:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018138:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001813d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018143:	83 e0 04             	and    eax,0x4
c0018146:	84 c0                	test   al,al
c0018148:	74 2b                	je     c0018175 <ACPI::detectPCI()+0x4b>
c001814a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001814f:	83 ec 08             	sub    esp,0x8
c0018152:	68 92 bc 02 c0       	push   0xc002bc92
c0018157:	50                   	push   eax
c0018158:	e8 7c f8 ff ff       	call   c00179d9 <findDataTable(unsigned char*, char*)>
c001815d:	83 c4 10             	add    esp,0x10
c0018160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018164:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018169:	74 0a                	je     c0018175 <ACPI::detectPCI()+0x4b>
c001816b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018170:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018175:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001817d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018181:	8a 00                	mov    al,BYTE PTR [eax]
c0018183:	3c 01                	cmp    al,0x1
c0018185:	75 0c                	jne    c0018193 <ACPI::detectPCI()+0x69>
c0018187:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001818c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018191:	eb 26                	jmp    c00181b9 <ACPI::detectPCI()+0x8f>
c0018193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018197:	8a 00                	mov    al,BYTE PTR [eax]
c0018199:	3c 02                	cmp    al,0x2
c001819b:	75 1c                	jne    c00181b9 <ACPI::detectPCI()+0x8f>
c001819d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181a2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181a7:	74 10                	je     c00181b9 <ACPI::detectPCI()+0x8f>
c00181a9:	83 ec 0c             	sub    esp,0xc
c00181ac:	68 24 bb 02 c0       	push   0xc002bb24
c00181b1:	e8 9d 21 00 00       	call   c001a353 <Krnl::panic(char const*)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00181bd:	83 f0 01             	xor    eax,0x1
c00181c0:	84 c0                	test   al,al
c00181c2:	74 3f                	je     c0018203 <ACPI::detectPCI()+0xd9>
c00181c4:	e8 87 7f fe ff       	call   c0000150 <manualPCIProbe>
c00181c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00181d2:	75 0c                	jne    c00181e0 <ACPI::detectPCI()+0xb6>
c00181d4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181d9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181de:	eb 23                	jmp    c0018203 <ACPI::detectPCI()+0xd9>
c00181e0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00181e5:	75 1c                	jne    c0018203 <ACPI::detectPCI()+0xd9>
c00181e7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181ec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181f1:	74 10                	je     c0018203 <ACPI::detectPCI()+0xd9>
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	68 24 bb 02 c0       	push   0xc002bb24
c00181fb:	e8 53 21 00 00       	call   c001a353 <Krnl::panic(char const*)>
c0018200:	83 c4 10             	add    esp,0x10
c0018203:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018208:	74 7e                	je     c0018288 <ACPI::detectPCI()+0x15e>
c001820a:	83 ec 0c             	sub    esp,0xc
c001820d:	68 97 bc 02 c0       	push   0xc002bc97
c0018212:	e8 a0 77 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018229:	e8 2f 77 ff ff       	call   c000f95d <malloc>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	89 c3                	mov    ebx,eax
c0018233:	83 ec 0c             	sub    esp,0xc
c0018236:	53                   	push   ebx
c0018237:	e8 18 a7 00 00       	call   c0022954 <PCI::PCI()>
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018247:	83 ec 08             	sub    esp,0x8
c001824a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001824e:	50                   	push   eax
c001824f:	e8 9a bb ff ff       	call   c0013dee <Device::addChild(Device*)>
c0018254:	83 c4 10             	add    esp,0x10
c0018257:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825b:	8b 00                	mov    eax,DWORD PTR [eax]
c001825d:	83 c0 08             	add    eax,0x8
c0018260:	8b 00                	mov    eax,DWORD PTR [eax]
c0018262:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018267:	74 07                	je     c0018270 <ACPI::detectPCI()+0x146>
c0018269:	ba 01 00 00 00       	mov    edx,0x1
c001826e:	eb 05                	jmp    c0018275 <ACPI::detectPCI()+0x14b>
c0018270:	ba 02 00 00 00       	mov    edx,0x2
c0018275:	6a 00                	push   0x0
c0018277:	6a 00                	push   0x0
c0018279:	52                   	push   edx
c001827a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001827e:	ff d0                	call   eax
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	e9 9e 00 00 00       	jmp    c0018326 <ACPI::detectPCI()+0x1fc>
c0018288:	83 ec 0c             	sub    esp,0xc
c001828b:	68 af bc 02 c0       	push   0xc002bcaf
c0018290:	e8 20 a7 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0018295:	83 c4 10             	add    esp,0x10
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	68 ba bc 02 c0       	push   0xc002bcba
c00182a0:	e8 12 77 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00182af:	83 ec 0c             	sub    esp,0xc
c00182b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182b6:	e8 a2 76 ff ff       	call   c000f95d <malloc>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	89 c3                	mov    ebx,eax
c00182c0:	83 ec 0c             	sub    esp,0xc
c00182c3:	53                   	push   ebx
c00182c4:	e8 f5 b1 00 00       	call   c00234be <IDE::IDE()>
c00182c9:	83 c4 10             	add    esp,0x10
c00182cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00182d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d4:	83 ec 08             	sub    esp,0x8
c00182d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182db:	50                   	push   eax
c00182dc:	e8 0d bb ff ff       	call   c0013dee <Device::addChild(Device*)>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182e8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00182f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182f6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00182ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018303:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001830c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018310:	8b 00                	mov    eax,DWORD PTR [eax]
c0018312:	83 c0 08             	add    eax,0x8
c0018315:	8b 00                	mov    eax,DWORD PTR [eax]
c0018317:	6a 00                	push   0x0
c0018319:	6a 00                	push   0x0
c001831b:	6a 00                	push   0x0
c001831d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018321:	ff d0                	call   eax
c0018323:	83 c4 10             	add    esp,0x10
c0018326:	90                   	nop
c0018327:	83 c4 28             	add    esp,0x28
c001832a:	5b                   	pop    ebx
c001832b:	c3                   	ret    

c001832c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001832c:	83 ec 1c             	sub    esp,0x1c
c001832f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018333:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018336:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001833a:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001833f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018344:	83 ec 08             	sub    esp,0x8
c0018347:	52                   	push   edx
c0018348:	50                   	push   eax
c0018349:	e8 a4 6a ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018355:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001835a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001835f:	83 ec 04             	sub    esp,0x4
c0018362:	6a 01                	push   0x1
c0018364:	52                   	push   edx
c0018365:	50                   	push   eax
c0018366:	e8 37 6c ff ff       	call   c000efa2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	90                   	nop
c001836f:	83 c4 1c             	add    esp,0x1c
c0018372:	c3                   	ret    
c0018373:	90                   	nop

c0018374 <ACPI::sleep()>:
c0018374:	83 ec 0c             	sub    esp,0xc
c0018377:	a1 40 ec 02 c0       	mov    eax,ds:0xc002ec40
c001837c:	85 c0                	test   eax,eax
c001837e:	74 07                	je     c0018387 <ACPI::sleep()+0x13>
c0018380:	a1 40 ec 02 c0       	mov    eax,ds:0xc002ec40
c0018385:	ff d0                	call   eax
c0018387:	90                   	nop
c0018388:	83 c4 0c             	add    esp,0xc
c001838b:	c3                   	ret    

c001838c <ACPI::open(int, int, void*)>:
c001838c:	57                   	push   edi
c001838d:	56                   	push   esi
c001838e:	53                   	push   ebx
c001838f:	81 ec 60 01 00 00    	sub    esp,0x160
c0018395:	83 ec 0c             	sub    esp,0xc
c0018398:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001839f:	e8 86 fd ff ff       	call   c001812a <ACPI::detectPCI()>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	83 ec 0c             	sub    esp,0xc
c00183aa:	68 4c bb 02 c0       	push   0xc002bb4c
c00183af:	e8 03 76 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	68 cf bc 02 c0       	push   0xc002bccf
c00183bf:	e8 e5 46 00 00       	call   c001caa9 <Thr::loadKernelSymbolTable(char const*)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	83 ec 0c             	sub    esp,0xc
c00183ca:	68 ed bc 02 c0       	push   0xc002bced
c00183cf:	e8 e3 75 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	83 ec 04             	sub    esp,0x4
c00183da:	6a 0c                	push   0xc
c00183dc:	68 08 bd 02 c0       	push   0xc002bd08
c00183e1:	68 19 bd 02 c0       	push   0xc002bd19
c00183e6:	e8 24 2d 00 00       	call   c001b10f <Reg::readIntWithDefault(char*, char*, int)>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00183f5:	83 ec 0c             	sub    esp,0xc
c00183f8:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00183ff:	e8 e9 93 ff ff       	call   c00117ed <Virt::setupPageSwapping(int)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 8c a4 02 c0       	push   0xc002a48c
c001840f:	e8 a3 75 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c001841d:	83 ec 08             	sub    esp,0x8
c0018420:	6a 01                	push   0x1
c0018422:	68 20 bd 02 c0       	push   0xc002bd20
c0018427:	e8 f4 50 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	83 ec 08             	sub    esp,0x8
c0018432:	53                   	push   ebx
c0018433:	50                   	push   eax
c0018434:	e8 18 53 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018443:	83 ec 08             	sub    esp,0x8
c0018446:	6a 12                	push   0x12
c0018448:	50                   	push   eax
c0018449:	e8 24 bd ff ff       	call   c0014172 <getDevicesOfType(DeviceType)>
c001844e:	83 c4 0c             	add    esp,0xc
c0018451:	83 ec 0c             	sub    esp,0xc
c0018454:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001845b:	50                   	push   eax
c001845c:	e8 73 0b 01 00       	call   c0028fd4 <LinkedList<Device>::isEmpty()>
c0018461:	83 c4 10             	add    esp,0x10
c0018464:	83 f0 01             	xor    eax,0x1
c0018467:	84 c0                	test   al,al
c0018469:	0f 84 43 01 00 00    	je     c00185b2 <ACPI::open(int, int, void*)+0x226>
c001846f:	83 ec 0c             	sub    esp,0xc
c0018472:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018479:	50                   	push   eax
c001847a:	e8 71 0b 01 00       	call   c0028ff0 <LinkedList<Device>::getFirstElement()>
c001847f:	83 c4 10             	add    esp,0x10
c0018482:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018489:	83 ec 0c             	sub    esp,0xc
c001848c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018493:	50                   	push   eax
c0018494:	e8 5f 0b 01 00       	call   c0028ff8 <LinkedList<Device>::removeFirst()>
c0018499:	83 c4 10             	add    esp,0x10
c001849c:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00184a3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00184aa:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00184b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184b5:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00184bb:	ba 09 00 00 00       	mov    edx,0x9
c00184c0:	fc                   	cld    
c00184c1:	89 c7                	mov    edi,eax
c00184c3:	89 de                	mov    esi,ebx
c00184c5:	89 d1                	mov    ecx,edx
c00184c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00184c9:	83 ec 08             	sub    esp,0x8
c00184cc:	8d 44 24 38          	lea    eax,[esp+0x38]
c00184d0:	50                   	push   eax
c00184d1:	83 ec 24             	sub    esp,0x24
c00184d4:	89 e0                	mov    eax,esp
c00184d6:	89 c3                	mov    ebx,eax
c00184d8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00184dc:	ba 09 00 00 00       	mov    edx,0x9
c00184e1:	89 df                	mov    edi,ebx
c00184e3:	89 c6                	mov    esi,eax
c00184e5:	89 d1                	mov    ecx,edx
c00184e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00184e9:	e8 44 a9 00 00       	call   c0022e32 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00184ee:	83 c4 30             	add    esp,0x30
c00184f1:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00184f8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018500:	0f 84 4b ff ff ff    	je     c0018451 <ACPI::open(int, int, void*)+0xc5>
c0018506:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018511:	83 ec 0c             	sub    esp,0xc
c0018514:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001851b:	e8 3d 74 ff ff       	call   c000f95d <malloc>
c0018520:	83 c4 10             	add    esp,0x10
c0018523:	89 c3                	mov    ebx,eax
c0018525:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001852a:	83 ec 04             	sub    esp,0x4
c001852d:	50                   	push   eax
c001852e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018535:	53                   	push   ebx
c0018536:	e8 d9 a9 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018545:	83 ec 0c             	sub    esp,0xc
c0018548:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001854f:	e8 92 ac ff ff       	call   c00131e6 <File::exists()>
c0018554:	83 c4 10             	add    esp,0x10
c0018557:	84 c0                	test   al,al
c0018559:	74 27                	je     c0018582 <ACPI::open(int, int, void*)+0x1f6>
c001855b:	83 ec 08             	sub    esp,0x8
c001855e:	6a 01                	push   0x1
c0018560:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018567:	e8 b4 4f 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	83 ec 08             	sub    esp,0x8
c0018572:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018579:	50                   	push   eax
c001857a:	e8 d2 51 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c001857f:	83 c4 10             	add    esp,0x10
c0018582:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001858a:	0f 84 c1 fe ff ff    	je     c0018451 <ACPI::open(int, int, void*)+0xc5>
c0018590:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018597:	8b 00                	mov    eax,DWORD PTR [eax]
c0018599:	83 c0 08             	add    eax,0x8
c001859c:	8b 00                	mov    eax,DWORD PTR [eax]
c001859e:	83 ec 0c             	sub    esp,0xc
c00185a1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185a8:	ff d0                	call   eax
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	e9 9f fe ff ff       	jmp    c0018451 <ACPI::open(int, int, void*)+0xc5>
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00185bc:	50                   	push   eax
c00185bd:	e8 10 0a 01 00       	call   c0028fd2 <LinkedList<Device>::~LinkedList()>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c00185cb:	83 ec 08             	sub    esp,0x8
c00185ce:	6a 01                	push   0x1
c00185d0:	68 3b bd 02 c0       	push   0xc002bd3b
c00185d5:	e8 46 4f 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	83 ec 08             	sub    esp,0x8
c00185e0:	53                   	push   ebx
c00185e1:	50                   	push   eax
c00185e2:	e8 6a 51 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c00185f0:	83 ec 08             	sub    esp,0x8
c00185f3:	6a 01                	push   0x1
c00185f5:	68 58 bd 02 c0       	push   0xc002bd58
c00185fa:	e8 21 4f 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	83 ec 08             	sub    esp,0x8
c0018605:	53                   	push   ebx
c0018606:	50                   	push   eax
c0018607:	e8 45 51 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018614:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001861a:	83 e0 04             	and    eax,0x4
c001861d:	84 c0                	test   al,al
c001861f:	0f 84 0d 01 00 00    	je     c0018732 <ACPI::open(int, int, void*)+0x3a6>
c0018625:	83 ec 0c             	sub    esp,0xc
c0018628:	68 75 bd 02 c0       	push   0xc002bd75
c001862d:	e8 85 73 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018640:	83 ec 0c             	sub    esp,0xc
c0018643:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001864a:	e8 0e 73 ff ff       	call   c000f95d <malloc>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	89 c3                	mov    ebx,eax
c0018654:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0018659:	83 ec 04             	sub    esp,0x4
c001865c:	50                   	push   eax
c001865d:	68 92 bd 02 c0       	push   0xc002bd92
c0018662:	53                   	push   ebx
c0018663:	e8 ac a8 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018672:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001867a:	74 1a                	je     c0018696 <ACPI::open(int, int, void*)+0x30a>
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018686:	e8 5b ab ff ff       	call   c00131e6 <File::exists()>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	84 c0                	test   al,al
c0018690:	74 04                	je     c0018696 <ACPI::open(int, int, void*)+0x30a>
c0018692:	b0 01                	mov    al,0x1
c0018694:	eb 02                	jmp    c0018698 <ACPI::open(int, int, void*)+0x30c>
c0018696:	b0 00                	mov    al,0x0
c0018698:	84 c0                	test   al,al
c001869a:	74 25                	je     c00186c1 <ACPI::open(int, int, void*)+0x335>
c001869c:	83 ec 08             	sub    esp,0x8
c001869f:	6a 01                	push   0x1
c00186a1:	68 92 bd 02 c0       	push   0xc002bd92
c00186a6:	e8 75 4e 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	83 ec 08             	sub    esp,0x8
c00186b1:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00186b8:	50                   	push   eax
c00186b9:	e8 93 50 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186c9:	74 27                	je     c00186f2 <ACPI::open(int, int, void*)+0x366>
c00186cb:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186d3:	74 1d                	je     c00186f2 <ACPI::open(int, int, void*)+0x366>
c00186d5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00186dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00186de:	83 c0 08             	add    eax,0x8
c00186e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186e3:	83 ec 0c             	sub    esp,0xc
c00186e6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00186ed:	ff d0                	call   eax
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00186f7:	83 ec 08             	sub    esp,0x8
c00186fa:	68 af bd 02 c0       	push   0xc002bdaf
c00186ff:	50                   	push   eax
c0018700:	e8 d4 f2 ff ff       	call   c00179d9 <findDataTable(unsigned char*, char*)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001870f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018717:	74 19                	je     c0018732 <ACPI::open(int, int, void*)+0x3a6>
c0018719:	83 ec 08             	sub    esp,0x8
c001871c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018723:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001872a:	e8 fd fb ff ff       	call   c001832c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	b8 00 00 00 00       	mov    eax,0x0
c0018737:	81 c4 60 01 00 00    	add    esp,0x160
c001873d:	5b                   	pop    ebx
c001873e:	5e                   	pop    esi
c001873f:	5f                   	pop    edi
c0018740:	c3                   	ret    
c0018741:	90                   	nop

c0018742 <CPU::close(int, int, void*)>:
c0018742:	31 c0                	xor    eax,eax
c0018744:	c3                   	ret    
c0018745:	90                   	nop

c0018746 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018746:	55                   	push   ebp
c0018747:	57                   	push   edi
c0018748:	56                   	push   esi
c0018749:	53                   	push   ebx
c001874a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001874e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018752:	89 ce                	mov    esi,ecx
c0018754:	89 d5                	mov    ebp,edx
c0018756:	80 f9 04             	cmp    cl,0x4
c0018759:	75 28                	jne    c0018783 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001875b:	8d 42 f9             	lea    eax,[edx-0x7]
c001875e:	3c 03                	cmp    al,0x3
c0018760:	0f 86 63 01 00 00    	jbe    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018766:	80 fa 03             	cmp    dl,0x3
c0018769:	0f 84 5a 01 00 00    	je     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001876f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018772:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018777:	89 fb                	mov    ebx,edi
c0018779:	80 fb 01             	cmp    bl,0x1
c001877c:	77 4e                	ja     c00187cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001877e:	e9 52 01 00 00       	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018783:	80 f9 05             	cmp    cl,0x5
c0018786:	75 4d                	jne    c00187d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018788:	b8 00 da 02 c0       	mov    eax,0xc002da00
c001878d:	80 fa 03             	cmp    dl,0x3
c0018790:	0f 86 3f 01 00 00    	jbe    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018796:	8d 7a fa             	lea    edi,[edx-0x6]
c0018799:	b8 10 da 02 c0       	mov    eax,0xc002da10
c001879e:	89 fb                	mov    ebx,edi
c00187a0:	80 fb 01             	cmp    bl,0x1
c00187a3:	0f 86 2c 01 00 00    	jbe    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a9:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00187ae:	80 fa 08             	cmp    dl,0x8
c00187b1:	0f 84 1e 01 00 00    	je     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b7:	89 d7                	mov    edi,edx
c00187b9:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00187be:	83 e7 fb             	and    edi,0xfffffffb
c00187c1:	89 fb                	mov    ebx,edi
c00187c3:	80 fb 09             	cmp    bl,0x9
c00187c6:	0f 84 09 01 00 00    	je     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cc:	31 c0                	xor    eax,eax
c00187ce:	89 eb                	mov    ebx,ebp
c00187d0:	0f b6 fb             	movzx  edi,bl
c00187d3:	eb 30                	jmp    c0018805 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187d5:	31 c0                	xor    eax,eax
c00187d7:	80 f9 06             	cmp    cl,0x6
c00187da:	75 f2                	jne    c00187ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187dc:	80 fa 0a             	cmp    dl,0xa
c00187df:	77 ed                	ja     c00187ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187e1:	bf de 05 00 00       	mov    edi,0x5de
c00187e6:	0f a3 d7             	bt     edi,edx
c00187e9:	73 e3                	jae    c00187ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187eb:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00187f0:	e9 e0 00 00 00       	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f5:	39 c7                	cmp    edi,eax
c00187f7:	0f 84 d3 00 00 00    	je     c00188d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187fd:	40                   	inc    eax
c00187fe:	3d d0 00 00 00       	cmp    eax,0xd0
c0018803:	74 09                	je     c001880e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018805:	89 f3                	mov    ebx,esi
c0018807:	80 fb 0f             	cmp    bl,0xf
c001880a:	75 f1                	jne    c00187fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001880c:	eb e7                	jmp    c00187f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001880e:	80 f9 10             	cmp    cl,0x10
c0018811:	75 14                	jne    c0018827 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018813:	8d 42 fc             	lea    eax,[edx-0x4]
c0018816:	83 e0 fb             	and    eax,0xfffffffb
c0018819:	3c 02                	cmp    al,0x2
c001881b:	76 34                	jbe    c0018851 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001881d:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018822:	80 fa 02             	cmp    dl,0x2
c0018825:	eb 24                	jmp    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018827:	80 f9 11             	cmp    cl,0x11
c001882a:	75 13                	jne    c001883f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001882c:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018831:	80 fa 03             	cmp    dl,0x3
c0018834:	0f 85 9b 00 00 00    	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883a:	e9 91 00 00 00       	jmp    c00188d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001883f:	80 f9 12             	cmp    cl,0x12
c0018842:	75 14                	jne    c0018858 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018844:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018849:	fe ca                	dec    dl
c001884b:	0f 85 84 00 00 00    	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018851:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018856:	eb 7d                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018858:	80 f9 14             	cmp    cl,0x14
c001885b:	75 12                	jne    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001885d:	4a                   	dec    edx
c001885e:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018863:	80 fa 01             	cmp    dl,0x1
c0018866:	77 6d                	ja     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018868:	b8 70 da 02 c0       	mov    eax,0xc002da70
c001886d:	eb 66                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886f:	80 f9 15             	cmp    cl,0x15
c0018872:	75 31                	jne    c00188a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018874:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018879:	80 fa 01             	cmp    dl,0x1
c001887c:	74 57                	je     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887e:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018883:	80 fa 13             	cmp    dl,0x13
c0018886:	76 0c                	jbe    c0018894 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018888:	80 fa 30             	cmp    dl,0x30
c001888b:	75 48                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888d:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018892:	eb 41                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018894:	b9 04 00 09 00       	mov    ecx,0x90004
c0018899:	0f a3 d1             	bt     ecx,edx
c001889c:	73 37                	jae    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889e:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188a3:	eb 30                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a5:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c00188aa:	80 f9 16             	cmp    cl,0x16
c00188ad:	75 26                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188af:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00188b4:	84 d2                	test   dl,dl
c00188b6:	74 1d                	je     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b8:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c00188bd:	80 fa 30             	cmp    dl,0x30
c00188c0:	75 13                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c2:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c00188c7:	eb 0c                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c9:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00188ce:	eb 05                	jmp    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d0:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00188d5:	5b                   	pop    ebx
c00188d6:	5e                   	pop    esi
c00188d7:	5f                   	pop    edi
c00188d8:	5d                   	pop    ebp
c00188d9:	c3                   	ret    

c00188da <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188e2:	80 f9 04             	cmp    cl,0x4
c00188e5:	75 6b                	jne    c0018952 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188e7:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c00188ec:	80 fa 01             	cmp    dl,0x1
c00188ef:	0f 86 92 02 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f5:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00188fa:	80 fa 02             	cmp    dl,0x2
c00188fd:	0f 84 84 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018903:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018908:	80 fa 03             	cmp    dl,0x3
c001890b:	0f 84 76 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018911:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018916:	80 fa 04             	cmp    dl,0x4
c0018919:	0f 84 68 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891f:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018924:	80 fa 05             	cmp    dl,0x5
c0018927:	0f 84 5a 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892d:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018932:	80 fa 07             	cmp    dl,0x7
c0018935:	0f 84 4c 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893b:	83 ea 08             	sub    edx,0x8
c001893e:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018943:	80 fa 01             	cmp    dl,0x1
c0018946:	0f 87 3b 02 00 00    	ja     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018951:	c3                   	ret    
c0018952:	80 f9 05             	cmp    cl,0x5
c0018955:	75 45                	jne    c001899c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018957:	8d 4a ff             	lea    ecx,[edx-0x1]
c001895a:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001895f:	80 f9 02             	cmp    cl,0x2
c0018962:	0f 86 1f 02 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018968:	80 fa 04             	cmp    dl,0x4
c001896b:	0f 84 f3 01 00 00    	je     c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018971:	80 fa 07             	cmp    dl,0x7
c0018974:	0f 84 0d 02 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897a:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001897f:	80 fa 08             	cmp    dl,0x8
c0018982:	0f 84 ff 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018988:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c001898d:	80 fa 09             	cmp    dl,0x9
c0018990:	0f 85 f1 01 00 00    	jne    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018996:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001899b:	c3                   	ret    
c001899c:	80 f9 06             	cmp    cl,0x6
c001899f:	0f 85 85 01 00 00    	jne    c0018b2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189a5:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189aa:	80 fa 01             	cmp    dl,0x1
c00189ad:	0f 84 d4 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b3:	8d 42 fb             	lea    eax,[edx-0x5]
c00189b6:	3c 01                	cmp    al,0x1
c00189b8:	0f 86 ac 01 00 00    	jbe    c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189be:	80 fa 03             	cmp    dl,0x3
c00189c1:	0f 84 a3 01 00 00    	je     c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189c7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189ca:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00189cf:	80 f9 01             	cmp    cl,0x1
c00189d2:	0f 86 af 01 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d8:	80 fa 09             	cmp    dl,0x9
c00189db:	0f 84 8f 01 00 00    	je     c0018b70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189e1:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189e4:	80 f9 01             	cmp    cl,0x1
c00189e7:	0f 86 9a 01 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ed:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189f2:	80 fa 0d             	cmp    dl,0xd
c00189f5:	0f 84 8c 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fb:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a00:	80 fa 0e             	cmp    dl,0xe
c0018a03:	0f 84 7e 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a0e:	80 fa 0f             	cmp    dl,0xf
c0018a11:	0f 84 70 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a17:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a1c:	80 fa 15             	cmp    dl,0x15
c0018a1f:	0f 84 62 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a28:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a2d:	80 f9 01             	cmp    cl,0x1
c0018a30:	0f 86 51 01 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a36:	80 fa 1a             	cmp    dl,0x1a
c0018a39:	0f 84 37 01 00 00    	je     c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a3f:	80 fa 1c             	cmp    dl,0x1c
c0018a42:	0f 84 34 01 00 00    	je     c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a48:	80 fa 1d             	cmp    dl,0x1d
c0018a4b:	0f 84 36 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a51:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a56:	80 fa 25             	cmp    dl,0x25
c0018a59:	0f 84 28 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a62:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a67:	80 f9 01             	cmp    cl,0x1
c0018a6a:	0f 86 17 01 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a75:	80 fa 2a             	cmp    dl,0x2a
c0018a78:	0f 84 09 01 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7e:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a83:	80 fa 2c             	cmp    dl,0x2c
c0018a86:	0f 84 fb 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8c:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a91:	80 fa 2d             	cmp    dl,0x2d
c0018a94:	0f 84 ed 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9a:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a9f:	80 fa 2e             	cmp    dl,0x2e
c0018aa2:	0f 84 df 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa8:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018aad:	80 fa 2f             	cmp    dl,0x2f
c0018ab0:	0f 84 d1 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ab9:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018abe:	80 f9 01             	cmp    cl,0x1
c0018ac1:	0f 86 c0 00 00 00    	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac7:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018acc:	80 fa 37             	cmp    dl,0x37
c0018acf:	0f 84 b2 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad5:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018ada:	80 fa 3a             	cmp    dl,0x3a
c0018add:	0f 84 a4 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae3:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018ae8:	80 fa 3c             	cmp    dl,0x3c
c0018aeb:	0f 84 96 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af1:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018af6:	80 fa 3d             	cmp    dl,0x3d
c0018af9:	0f 84 88 00 00 00    	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aff:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b04:	80 fa 3e             	cmp    dl,0x3e
c0018b07:	74 7e                	je     c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b09:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b0c:	3c 01                	cmp    al,0x1
c0018b0e:	76 72                	jbe    c0018b82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b10:	80 fa 3f             	cmp    dl,0x3f
c0018b13:	74 6d                	je     c0018b82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b15:	80 fa 4a             	cmp    dl,0x4a
c0018b18:	74 0a                	je     c0018b24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b1a:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018b1f:	80 fa 4d             	cmp    dl,0x4d
c0018b22:	75 63                	jne    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b24:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b29:	c3                   	ret    
c0018b2a:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018b2f:	80 f9 0b             	cmp    cl,0xb
c0018b32:	75 0a                	jne    c0018b3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b34:	fe ca                	dec    dl
c0018b36:	75 4f                	jne    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b38:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b3d:	c3                   	ret    
c0018b3e:	80 f9 0f             	cmp    cl,0xf
c0018b41:	75 44                	jne    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b43:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b48:	80 fa 02             	cmp    dl,0x2
c0018b4b:	76 3a                	jbe    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b50:	3c 01                	cmp    al,0x1
c0018b52:	76 0a                	jbe    c0018b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b54:	b8 35 bf 02 c0       	mov    eax,0xc002bf35
c0018b59:	80 fa 06             	cmp    dl,0x6
c0018b5c:	75 29                	jne    c0018b87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5e:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b63:	c3                   	ret    
c0018b64:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b69:	c3                   	ret    
c0018b6a:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018b6f:	c3                   	ret    
c0018b70:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018b75:	c3                   	ret    
c0018b76:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018b7b:	c3                   	ret    
c0018b7c:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b81:	c3                   	ret    
c0018b82:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b87:	c3                   	ret    

c0018b88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b88:	60                   	pusha  
c0018b89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b95:	9c                   	pushf  
c0018b96:	fa                   	cli    
c0018b97:	0f 09                	wbinvd 
c0018b99:	0f 30                	wrmsr  
c0018b9b:	9d                   	popf   
c0018b9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ba0:	89 02                	mov    DWORD PTR [edx],eax
c0018ba2:	61                   	popa   
c0018ba3:	c3                   	ret    

c0018ba4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ba4:	60                   	pusha  
c0018ba5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ba9:	9c                   	pushf  
c0018baa:	fa                   	cli    
c0018bab:	0f 09                	wbinvd 
c0018bad:	31 c0                	xor    eax,eax
c0018baf:	31 d2                	xor    edx,edx
c0018bb1:	0f 32                	rdmsr  
c0018bb3:	9d                   	popf   
c0018bb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bb8:	89 02                	mov    DWORD PTR [edx],eax
c0018bba:	61                   	popa   
c0018bbb:	c3                   	ret    

c0018bbc <CPU::AMD_K6_writeback(int, int, int)>:
c0018bbc:	56                   	push   esi
c0018bbd:	53                   	push   ebx
c0018bbe:	83 ec 10             	sub    esp,0x10
c0018bc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bc5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bca:	75 5d                	jne    c0018c29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bcc:	83 f8 08             	cmp    eax,0x8
c0018bcf:	75 09                	jne    c0018bda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bd1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bd6:	7e 13                	jle    c0018beb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bd8:	eb 30                	jmp    c0018c0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bda:	83 f8 06             	cmp    eax,0x6
c0018bdd:	7c 4a                	jl     c0018c29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bdf:	83 f8 07             	cmp    eax,0x7
c0018be2:	7e 07                	jle    c0018beb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018be4:	83 f8 09             	cmp    eax,0x9
c0018be7:	74 21                	je     c0018c0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018be9:	eb 3e                	jmp    c0018c29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018beb:	89 e6                	mov    esi,esp
c0018bed:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0018bf3:	56                   	push   esi
c0018bf4:	c1 eb 15             	shr    ebx,0x15
c0018bf7:	68 82 00 00 c0       	push   0xc0000082
c0018bfc:	83 e3 7e             	and    ebx,0x7e
c0018bff:	e8 a0 ff ff ff       	call   c0018ba4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c04:	56                   	push   esi
c0018c05:	6a 00                	push   0x0
c0018c07:	53                   	push   ebx
c0018c08:	eb 12                	jmp    c0018c1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c0a:	89 e3                	mov    ebx,esp
c0018c0c:	53                   	push   ebx
c0018c0d:	68 82 00 00 c0       	push   0xc0000082
c0018c12:	e8 8d ff ff ff       	call   c0018ba4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c17:	53                   	push   ebx
c0018c18:	6a 00                	push   0x0
c0018c1a:	6a 00                	push   0x0
c0018c1c:	68 82 00 00 c0       	push   0xc0000082
c0018c21:	e8 62 ff ff ff       	call   c0018b88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c26:	83 c4 18             	add    esp,0x18
c0018c29:	83 c4 10             	add    esp,0x10
c0018c2c:	5b                   	pop    ebx
c0018c2d:	5e                   	pop    esi
c0018c2e:	c3                   	ret    
c0018c2f:	90                   	nop

c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c30:	55                   	push   ebp
c0018c31:	57                   	push   edi
c0018c32:	56                   	push   esi
c0018c33:	53                   	push   ebx
c0018c34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c44:	39 05 e0 da 02 c0    	cmp    DWORD PTR ds:0xc002dae0,eax
c0018c4a:	75 23                	jne    c0018c6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c4c:	a1 cc f0 02 c0       	mov    eax,ds:0xc002f0cc
c0018c51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c55:	89 06                	mov    DWORD PTR [esi],eax
c0018c57:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0018c5c:	89 07                	mov    DWORD PTR [edi],eax
c0018c5e:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0018c63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c66:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c0018c6b:	89 02                	mov    DWORD PTR [edx],eax
c0018c6d:	eb 3f                	jmp    c0018cae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c6f:	31 c9                	xor    ecx,ecx
c0018c71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c75:	0f a2                	cpuid  
c0018c77:	89 06                	mov    DWORD PTR [esi],eax
c0018c79:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c82:	89 10                	mov    DWORD PTR [eax],edx
c0018c84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c88:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0018c8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c8f:	a3 cc f0 02 c0       	mov    ds:0xc002f0cc,eax
c0018c94:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c96:	a3 c8 f0 02 c0       	mov    ds:0xc002f0c8,eax
c0018c9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c9e:	a3 c4 f0 02 c0       	mov    ds:0xc002f0c4,eax
c0018ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ca9:	a3 c0 f0 02 c0       	mov    ds:0xc002f0c0,eax
c0018cae:	5b                   	pop    ebx
c0018caf:	5e                   	pop    esi
c0018cb0:	5f                   	pop    edi
c0018cb1:	5d                   	pop    ebp
c0018cb2:	c3                   	ret    
c0018cb3:	90                   	nop

c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>:
c0018cb4:	83 ec 10             	sub    esp,0x10
c0018cb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbb:	50                   	push   eax
c0018cbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc0:	50                   	push   eax
c0018cc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc5:	50                   	push   eax
c0018cc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cca:	50                   	push   eax
c0018ccb:	6a 01                	push   0x1
c0018ccd:	e8 5e ff ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cda:	0f 95 c0             	setne  al
c0018cdd:	83 c4 24             	add    esp,0x24
c0018ce0:	c3                   	ret    
c0018ce1:	90                   	nop

c0018ce2 <CPU::cpuidCheckECX(unsigned int)>:
c0018ce2:	83 ec 10             	sub    esp,0x10
c0018ce5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce9:	50                   	push   eax
c0018cea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cee:	50                   	push   eax
c0018cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf3:	50                   	push   eax
c0018cf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf8:	50                   	push   eax
c0018cf9:	6a 01                	push   0x1
c0018cfb:	e8 30 ff ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d04:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d08:	0f 95 c0             	setne  al
c0018d0b:	83 c4 24             	add    esp,0x24
c0018d0e:	c3                   	ret    
c0018d0f:	90                   	nop

c0018d10 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d10:	83 ec 10             	sub    esp,0x10
c0018d13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d17:	50                   	push   eax
c0018d18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1c:	50                   	push   eax
c0018d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d21:	50                   	push   eax
c0018d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d26:	50                   	push   eax
c0018d27:	6a 07                	push   0x7
c0018d29:	e8 02 ff ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d32:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d36:	0f 95 c0             	setne  al
c0018d39:	83 c4 24             	add    esp,0x24
c0018d3c:	c3                   	ret    
c0018d3d:	90                   	nop

c0018d3e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d3e:	83 ec 10             	sub    esp,0x10
c0018d41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d45:	50                   	push   eax
c0018d46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4a:	50                   	push   eax
c0018d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4f:	50                   	push   eax
c0018d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d54:	50                   	push   eax
c0018d55:	6a 07                	push   0x7
c0018d57:	e8 d4 fe ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d60:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d64:	0f 95 c0             	setne  al
c0018d67:	83 c4 24             	add    esp,0x24
c0018d6a:	c3                   	ret    
c0018d6b:	90                   	nop

c0018d6c <CPU::CPU()>:
c0018d6c:	83 ec 0c             	sub    esp,0xc
c0018d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d73:	83 ec 08             	sub    esp,0x8
c0018d76:	68 35 bf 02 c0       	push   0xc002bf35
c0018d7b:	50                   	push   eax
c0018d7c:	e8 71 b2 ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	ba 58 c1 02 c0       	mov    edx,0xc002c158
c0018d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d8d:	89 10                	mov    DWORD PTR [eax],edx
c0018d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d93:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da1:	05 78 01 00 00       	add    eax,0x178
c0018da6:	83 ec 0c             	sub    esp,0xc
c0018da9:	50                   	push   eax
c0018daa:	e8 dd 62 ff ff       	call   c000f08c <GDT::GDT()>
c0018daf:	83 c4 10             	add    esp,0x10
c0018db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db6:	05 7c 09 00 00       	add    eax,0x97c
c0018dbb:	83 ec 0c             	sub    esp,0xc
c0018dbe:	50                   	push   eax
c0018dbf:	e8 18 65 ff ff       	call   c000f2dc <IDT::IDT()>
c0018dc4:	83 c4 10             	add    esp,0x10
c0018dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcb:	05 7c 11 00 00       	add    eax,0x117c
c0018dd0:	83 ec 0c             	sub    esp,0xc
c0018dd3:	50                   	push   eax
c0018dd4:	e8 51 81 ff ff       	call   c0010f2a <TSS::TSS()>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018deb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018df5:	90                   	nop
c0018df6:	83 c4 0c             	add    esp,0xc
c0018df9:	c3                   	ret    

c0018dfa <CPU::displayFeatures()>:
c0018dfa:	c3                   	ret    
c0018dfb:	90                   	nop

c0018dfc <CPU::detectFeatures()>:
c0018dfc:	55                   	push   ebp
c0018dfd:	57                   	push   edi
c0018dfe:	56                   	push   esi
c0018dff:	53                   	push   ebx
c0018e00:	83 ec 50             	sub    esp,0x50
c0018e03:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e07:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e11:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e18:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e1e:	6a 0d                	push   0xd
c0018e20:	6a 00                	push   0x0
c0018e22:	55                   	push   ebp
c0018e23:	e8 28 79 fe ff       	call   c0000750 <memset>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018e30:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e37:	0f 84 22 09 00 00    	je     c001975f <CPU::detectFeatures()+0x963>
c0018e3d:	83 ec 0c             	sub    esp,0xc
c0018e40:	89 ef                	mov    edi,ebp
c0018e42:	6a 10                	push   0x10
c0018e44:	e8 6b fe ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e49:	83 e0 01             	and    eax,0x1
c0018e4c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e4f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e55:	83 e0 fd             	and    eax,0xfffffffd
c0018e58:	09 d0                	or     eax,edx
c0018e5a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e60:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e67:	e8 48 fe ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e6c:	83 e0 01             	and    eax,0x1
c0018e6f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e76:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e7c:	83 e0 fb             	and    eax,0xfffffffb
c0018e7f:	09 d0                	or     eax,edx
c0018e81:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e87:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e8e:	e8 21 fe ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e93:	83 e0 01             	and    eax,0x1
c0018e96:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ea3:	83 e0 f7             	and    eax,0xfffffff7
c0018ea6:	09 d0                	or     eax,edx
c0018ea8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018eb5:	e8 fa fd ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018eba:	83 e0 01             	and    eax,0x1
c0018ebd:	c1 e0 04             	shl    eax,0x4
c0018ec0:	88 c2                	mov    dl,al
c0018ec2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ec8:	83 e0 ef             	and    eax,0xffffffef
c0018ecb:	09 d0                	or     eax,edx
c0018ecd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ed3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018eda:	e8 d5 fd ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018edf:	83 e0 01             	and    eax,0x1
c0018ee2:	c1 e0 05             	shl    eax,0x5
c0018ee5:	88 c2                	mov    dl,al
c0018ee7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eed:	83 e0 df             	and    eax,0xffffffdf
c0018ef0:	09 d0                	or     eax,edx
c0018ef2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018eff:	e8 b0 fd ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f04:	83 e0 01             	and    eax,0x1
c0018f07:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f0a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f10:	83 e0 fd             	and    eax,0xfffffffd
c0018f13:	09 d0                	or     eax,edx
c0018f15:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f1b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f22:	e8 8d fd ff ff       	call   c0018cb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f27:	83 e0 01             	and    eax,0x1
c0018f2a:	c1 e0 06             	shl    eax,0x6
c0018f2d:	88 c2                	mov    dl,al
c0018f2f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f35:	83 e0 bf             	and    eax,0xffffffbf
c0018f38:	09 d0                	or     eax,edx
c0018f3a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f40:	58                   	pop    eax
c0018f41:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f45:	50                   	push   eax
c0018f46:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f4a:	50                   	push   eax
c0018f4b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f4f:	56                   	push   esi
c0018f50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f54:	50                   	push   eax
c0018f55:	6a 00                	push   0x0
c0018f57:	e8 d4 fc ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f5c:	b8 04 00 00 00       	mov    eax,0x4
c0018f61:	89 c1                	mov    ecx,eax
c0018f63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f65:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f6b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f6f:	89 c1                	mov    ecx,eax
c0018f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f73:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f79:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f7d:	89 c1                	mov    ecx,eax
c0018f7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f81:	83 c4 18             	add    esp,0x18
c0018f84:	68 e0 bd 02 c0       	push   0xc002bde0
c0018f89:	55                   	push   ebp
c0018f8a:	e8 09 79 fe ff       	call   c0000898 <strcmp>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	85 c0                	test   eax,eax
c0018f94:	75 0f                	jne    c0018fa5 <CPU::detectFeatures()+0x1a9>
c0018f96:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018fa0:	e9 22 02 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0018fa5:	50                   	push   eax
c0018fa6:	50                   	push   eax
c0018fa7:	68 ed bd 02 c0       	push   0xc002bded
c0018fac:	55                   	push   ebp
c0018fad:	e8 e6 78 fe ff       	call   c0000898 <strcmp>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	85 c0                	test   eax,eax
c0018fb7:	74 dd                	je     c0018f96 <CPU::detectFeatures()+0x19a>
c0018fb9:	50                   	push   eax
c0018fba:	50                   	push   eax
c0018fbb:	68 fa bd 02 c0       	push   0xc002bdfa
c0018fc0:	55                   	push   ebp
c0018fc1:	e8 d2 78 fe ff       	call   c0000898 <strcmp>
c0018fc6:	83 c4 10             	add    esp,0x10
c0018fc9:	85 c0                	test   eax,eax
c0018fcb:	74 2a                	je     c0018ff7 <CPU::detectFeatures()+0x1fb>
c0018fcd:	50                   	push   eax
c0018fce:	50                   	push   eax
c0018fcf:	68 07 be 02 c0       	push   0xc002be07
c0018fd4:	55                   	push   ebp
c0018fd5:	e8 be 78 fe ff       	call   c0000898 <strcmp>
c0018fda:	83 c4 10             	add    esp,0x10
c0018fdd:	85 c0                	test   eax,eax
c0018fdf:	74 16                	je     c0018ff7 <CPU::detectFeatures()+0x1fb>
c0018fe1:	50                   	push   eax
c0018fe2:	50                   	push   eax
c0018fe3:	68 14 be 02 c0       	push   0xc002be14
c0018fe8:	55                   	push   ebp
c0018fe9:	e8 aa 78 fe ff       	call   c0000898 <strcmp>
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	85 c0                	test   eax,eax
c0018ff3:	74 48                	je     c001903d <CPU::detectFeatures()+0x241>
c0018ff5:	eb 0f                	jmp    c0019006 <CPU::detectFeatures()+0x20a>
c0018ff7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019001:	e9 c1 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0019006:	50                   	push   eax
c0019007:	50                   	push   eax
c0019008:	68 21 be 02 c0       	push   0xc002be21
c001900d:	55                   	push   ebp
c001900e:	e8 85 78 fe ff       	call   c0000898 <strcmp>
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	85 c0                	test   eax,eax
c0019018:	74 23                	je     c001903d <CPU::detectFeatures()+0x241>
c001901a:	57                   	push   edi
c001901b:	57                   	push   edi
c001901c:	68 2e be 02 c0       	push   0xc002be2e
c0019021:	55                   	push   ebp
c0019022:	e8 71 78 fe ff       	call   c0000898 <strcmp>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	85 c0                	test   eax,eax
c001902c:	75 1e                	jne    c001904c <CPU::detectFeatures()+0x250>
c001902e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019038:	e9 8a 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c001903d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019047:	e9 7b 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c001904c:	56                   	push   esi
c001904d:	56                   	push   esi
c001904e:	68 3b be 02 c0       	push   0xc002be3b
c0019053:	55                   	push   ebp
c0019054:	e8 3f 78 fe ff       	call   c0000898 <strcmp>
c0019059:	83 c4 10             	add    esp,0x10
c001905c:	85 c0                	test   eax,eax
c001905e:	75 0f                	jne    c001906f <CPU::detectFeatures()+0x273>
c0019060:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001906a:	e9 58 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c001906f:	51                   	push   ecx
c0019070:	51                   	push   ecx
c0019071:	68 fa bd 02 c0       	push   0xc002bdfa
c0019076:	55                   	push   ebp
c0019077:	e8 1c 78 fe ff       	call   c0000898 <strcmp>
c001907c:	83 c4 10             	add    esp,0x10
c001907f:	85 c0                	test   eax,eax
c0019081:	75 0f                	jne    c0019092 <CPU::detectFeatures()+0x296>
c0019083:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001908d:	e9 35 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0019092:	52                   	push   edx
c0019093:	52                   	push   edx
c0019094:	68 48 be 02 c0       	push   0xc002be48
c0019099:	55                   	push   ebp
c001909a:	e8 f9 77 fe ff       	call   c0000898 <strcmp>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	85 c0                	test   eax,eax
c00190a4:	75 0f                	jne    c00190b5 <CPU::detectFeatures()+0x2b9>
c00190a6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190b0:	e9 12 01 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c00190b5:	50                   	push   eax
c00190b6:	50                   	push   eax
c00190b7:	68 55 be 02 c0       	push   0xc002be55
c00190bc:	55                   	push   ebp
c00190bd:	e8 d6 77 fe ff       	call   c0000898 <strcmp>
c00190c2:	83 c4 10             	add    esp,0x10
c00190c5:	85 c0                	test   eax,eax
c00190c7:	75 0f                	jne    c00190d8 <CPU::detectFeatures()+0x2dc>
c00190c9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190d3:	e9 ef 00 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c00190d8:	50                   	push   eax
c00190d9:	50                   	push   eax
c00190da:	68 62 be 02 c0       	push   0xc002be62
c00190df:	55                   	push   ebp
c00190e0:	e8 b3 77 fe ff       	call   c0000898 <strcmp>
c00190e5:	83 c4 10             	add    esp,0x10
c00190e8:	85 c0                	test   eax,eax
c00190ea:	75 0f                	jne    c00190fb <CPU::detectFeatures()+0x2ff>
c00190ec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00190f6:	e9 cc 00 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c00190fb:	50                   	push   eax
c00190fc:	50                   	push   eax
c00190fd:	68 6f be 02 c0       	push   0xc002be6f
c0019102:	55                   	push   ebp
c0019103:	e8 90 77 fe ff       	call   c0000898 <strcmp>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	85 c0                	test   eax,eax
c001910d:	75 0f                	jne    c001911e <CPU::detectFeatures()+0x322>
c001910f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019119:	e9 a9 00 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c001911e:	50                   	push   eax
c001911f:	50                   	push   eax
c0019120:	68 7c be 02 c0       	push   0xc002be7c
c0019125:	55                   	push   ebp
c0019126:	e8 6d 77 fe ff       	call   c0000898 <strcmp>
c001912b:	83 c4 10             	add    esp,0x10
c001912e:	85 c0                	test   eax,eax
c0019130:	75 0f                	jne    c0019141 <CPU::detectFeatures()+0x345>
c0019132:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001913c:	e9 86 00 00 00       	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0019141:	50                   	push   eax
c0019142:	50                   	push   eax
c0019143:	68 89 be 02 c0       	push   0xc002be89
c0019148:	55                   	push   ebp
c0019149:	e8 4a 77 fe ff       	call   c0000898 <strcmp>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	85 c0                	test   eax,eax
c0019153:	75 0c                	jne    c0019161 <CPU::detectFeatures()+0x365>
c0019155:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001915f:	eb 66                	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0019161:	50                   	push   eax
c0019162:	50                   	push   eax
c0019163:	68 96 be 02 c0       	push   0xc002be96
c0019168:	55                   	push   ebp
c0019169:	e8 2a 77 fe ff       	call   c0000898 <strcmp>
c001916e:	83 c4 10             	add    esp,0x10
c0019171:	85 c0                	test   eax,eax
c0019173:	75 0c                	jne    c0019181 <CPU::detectFeatures()+0x385>
c0019175:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001917f:	eb 46                	jmp    c00191c7 <CPU::detectFeatures()+0x3cb>
c0019181:	57                   	push   edi
c0019182:	57                   	push   edi
c0019183:	68 a3 be 02 c0       	push   0xc002bea3
c0019188:	55                   	push   ebp
c0019189:	e8 0a 77 fe ff       	call   c0000898 <strcmp>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	85 c0                	test   eax,eax
c0019193:	74 e0                	je     c0019175 <CPU::detectFeatures()+0x379>
c0019195:	56                   	push   esi
c0019196:	56                   	push   esi
c0019197:	68 b0 be 02 c0       	push   0xc002beb0
c001919c:	55                   	push   ebp
c001919d:	e8 f6 76 fe ff       	call   c0000898 <strcmp>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	85 c0                	test   eax,eax
c00191a7:	74 cc                	je     c0019175 <CPU::detectFeatures()+0x379>
c00191a9:	51                   	push   ecx
c00191aa:	51                   	push   ecx
c00191ab:	68 bd be 02 c0       	push   0xc002bebd
c00191b0:	55                   	push   ebp
c00191b1:	e8 e2 76 fe ff       	call   c0000898 <strcmp>
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	85 c0                	test   eax,eax
c00191bb:	74 b8                	je     c0019175 <CPU::detectFeatures()+0x379>
c00191bd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191c7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191cc:	0f 86 be 00 00 00    	jbe    c0019290 <CPU::detectFeatures()+0x494>
c00191d2:	83 ec 0c             	sub    esp,0xc
c00191d5:	68 80 00 00 00       	push   0x80
c00191da:	e8 31 fb ff ff       	call   c0018d10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191df:	83 e0 01             	and    eax,0x1
c00191e2:	c1 e0 06             	shl    eax,0x6
c00191e5:	88 c2                	mov    dl,al
c00191e7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ed:	83 e0 bf             	and    eax,0xffffffbf
c00191f0:	09 d0                	or     eax,edx
c00191f2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191f8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00191ff:	e8 0c fb ff ff       	call   c0018d10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019204:	83 e0 01             	and    eax,0x1
c0019207:	c1 e0 04             	shl    eax,0x4
c001920a:	88 c2                	mov    dl,al
c001920c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019212:	83 e0 ef             	and    eax,0xffffffef
c0019215:	09 d0                	or     eax,edx
c0019217:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001921d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019224:	e8 e7 fa ff ff       	call   c0018d10 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019229:	c1 e0 07             	shl    eax,0x7
c001922c:	88 c2                	mov    dl,al
c001922e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019234:	83 e0 7f             	and    eax,0x7f
c0019237:	09 d0                	or     eax,edx
c0019239:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001923f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019246:	e8 f3 fa ff ff       	call   c0018d3e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001924b:	83 e0 01             	and    eax,0x1
c001924e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019255:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001925b:	83 e0 f7             	and    eax,0xfffffff7
c001925e:	09 d0                	or     eax,edx
c0019260:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019266:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001926d:	e8 cc fa ff ff       	call   c0018d3e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	83 e0 01             	and    eax,0x1
c0019278:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001927f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019285:	83 e0 fb             	and    eax,0xfffffffb
c0019288:	09 d0                	or     eax,edx
c001928a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019290:	83 ec 0c             	sub    esp,0xc
c0019293:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019297:	50                   	push   eax
c0019298:	8d 44 24 28          	lea    eax,[esp+0x28]
c001929c:	50                   	push   eax
c001929d:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192a1:	56                   	push   esi
c00192a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a6:	50                   	push   eax
c00192a7:	6a 01                	push   0x1
c00192a9:	e8 82 f9 ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192b8:	88 ca                	mov    dl,cl
c00192ba:	83 e0 f0             	and    eax,0xfffffff0
c00192bd:	83 e2 0f             	and    edx,0xf
c00192c0:	09 d0                	or     eax,edx
c00192c2:	88 ca                	mov    dl,cl
c00192c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192ca:	c0 ea 04             	shr    dl,0x4
c00192cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192d1:	0f b6 c2             	movzx  eax,dl
c00192d4:	83 c4 20             	add    esp,0x20
c00192d7:	c1 e0 06             	shl    eax,0x6
c00192da:	89 c7                	mov    edi,eax
c00192dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192e2:	66 25 3f c0          	and    ax,0xc03f
c00192e6:	09 f8                	or     eax,edi
c00192e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192ef:	89 c8                	mov    eax,ecx
c00192f1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00192f8:	c1 e8 08             	shr    eax,0x8
c00192fb:	83 e5 3f             	and    ebp,0x3f
c00192fe:	83 e0 0f             	and    eax,0xf
c0019301:	89 c7                	mov    edi,eax
c0019303:	c1 e7 06             	shl    edi,0x6
c0019306:	09 ef                	or     edi,ebp
c0019308:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001930f:	89 fa                	mov    edx,edi
c0019311:	83 e5 c0             	and    ebp,0xffffffc0
c0019314:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001931a:	88 c2                	mov    dl,al
c001931c:	c0 ea 02             	shr    dl,0x2
c001931f:	89 d7                	mov    edi,edx
c0019321:	09 ef                	or     edi,ebp
c0019323:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019329:	89 fa                	mov    edx,edi
c001932b:	83 e5 cf             	and    ebp,0xffffffcf
c001932e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019334:	89 cf                	mov    edi,ecx
c0019336:	c1 ef 0c             	shr    edi,0xc
c0019339:	83 e7 03             	and    edi,0x3
c001933c:	c1 e7 04             	shl    edi,0x4
c001933f:	09 ef                	or     edi,ebp
c0019341:	3c 06                	cmp    al,0x6
c0019343:	89 fa                	mov    edx,edi
c0019345:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001934b:	74 04                	je     c0019351 <CPU::detectFeatures()+0x555>
c001934d:	3c 0f                	cmp    al,0xf
c001934f:	75 5c                	jne    c00193ad <CPU::detectFeatures()+0x5b1>
c0019351:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019355:	89 cf                	mov    edi,ecx
c0019357:	c1 ef 10             	shr    edi,0x10
c001935a:	c1 e7 04             	shl    edi,0x4
c001935d:	09 fa                	or     edx,edi
c001935f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019365:	0f b6 d2             	movzx  edx,dl
c0019368:	66 81 e7 3f c0       	and    di,0xc03f
c001936d:	c1 e2 06             	shl    edx,0x6
c0019370:	09 fa                	or     edx,edi
c0019372:	3c 0f                	cmp    al,0xf
c0019374:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001937b:	75 30                	jne    c00193ad <CPU::detectFeatures()+0x5b1>
c001937d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019383:	c1 e9 14             	shr    ecx,0x14
c0019386:	83 e0 3f             	and    eax,0x3f
c0019389:	83 c1 0f             	add    ecx,0xf
c001938c:	88 ca                	mov    dl,cl
c001938e:	c0 e9 02             	shr    cl,0x2
c0019391:	c1 e2 06             	shl    edx,0x6
c0019394:	09 d0                	or     eax,edx
c0019396:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001939c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193a2:	83 e0 c0             	and    eax,0xffffffc0
c00193a5:	09 c1                	or     ecx,eax
c00193a7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193bb:	50                   	push   eax
c00193bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193c0:	55                   	push   ebp
c00193c1:	56                   	push   esi
c00193c2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193c6:	57                   	push   edi
c00193c7:	68 00 00 00 80       	push   0x80000000
c00193cc:	e8 5f f8 ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193d1:	83 c4 20             	add    esp,0x20
c00193d4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193dc:	76 22                	jbe    c0019400 <CPU::detectFeatures()+0x604>
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193e5:	50                   	push   eax
c00193e6:	55                   	push   ebp
c00193e7:	56                   	push   esi
c00193e8:	57                   	push   edi
c00193e9:	68 01 00 00 80       	push   0x80000001
c00193ee:	e8 3d f8 ff ff       	call   c0018c30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193f3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00193fd:	83 c4 20             	add    esp,0x20
c0019400:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019406:	83 f8 01             	cmp    eax,0x1
c0019409:	75 6f                	jne    c001947a <CPU::detectFeatures()+0x67e>
c001940b:	51                   	push   ecx
c001940c:	51                   	push   ecx
c001940d:	68 c9 be 02 c0       	push   0xc002bec9
c0019412:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019416:	56                   	push   esi
c0019417:	e8 f0 73 fe ff       	call   c000080c <strcpy>
c001941c:	5f                   	pop    edi
c001941d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019423:	5d                   	pop    ebp
c0019424:	66 c1 e8 06          	shr    ax,0x6
c0019428:	0f b6 c0             	movzx  eax,al
c001942b:	50                   	push   eax
c001942c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019432:	c1 e8 0e             	shr    eax,0xe
c0019435:	0f b6 c0             	movzx  eax,al
c0019438:	50                   	push   eax
c0019439:	e8 9c f4 ff ff       	call   c00188da <CPU::lookupIntelName(unsigned char, unsigned char)>
c001943e:	5a                   	pop    edx
c001943f:	59                   	pop    ecx
c0019440:	50                   	push   eax
c0019441:	56                   	push   esi
c0019442:	e8 05 75 fe ff       	call   c000094c <strcat>
c0019447:	5f                   	pop    edi
c0019448:	5d                   	pop    ebp
c0019449:	56                   	push   esi
c001944a:	53                   	push   ebx
c001944b:	e8 94 ab ff ff       	call   c0013fe4 <Device::setName(char const*)>
c0019450:	58                   	pop    eax
c0019451:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019457:	5a                   	pop    edx
c0019458:	68 d0 be 02 c0       	push   0xc002bed0
c001945d:	50                   	push   eax
c001945e:	e8 35 74 fe ff       	call   c0000898 <strcmp>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	85 c0                	test   eax,eax
c0019468:	0f 85 71 03 00 00    	jne    c00197df <CPU::detectFeatures()+0x9e3>
c001946e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019475:	e9 65 03 00 00       	jmp    c00197df <CPU::detectFeatures()+0x9e3>
c001947a:	83 f8 02             	cmp    eax,0x2
c001947d:	0f 85 b5 00 00 00    	jne    c0019538 <CPU::detectFeatures()+0x73c>
c0019483:	57                   	push   edi
c0019484:	57                   	push   edi
c0019485:	68 e2 be 02 c0       	push   0xc002bee2
c001948a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001948e:	56                   	push   esi
c001948f:	e8 78 73 fe ff       	call   c000080c <strcpy>
c0019494:	5d                   	pop    ebp
c0019495:	58                   	pop    eax
c0019496:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001949c:	66 c1 e8 06          	shr    ax,0x6
c00194a0:	0f b6 c0             	movzx  eax,al
c00194a3:	50                   	push   eax
c00194a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194aa:	c1 e8 0e             	shr    eax,0xe
c00194ad:	0f b6 c0             	movzx  eax,al
c00194b0:	50                   	push   eax
c00194b1:	e8 90 f2 ff ff       	call   c0018746 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194b6:	5a                   	pop    edx
c00194b7:	59                   	pop    ecx
c00194b8:	50                   	push   eax
c00194b9:	56                   	push   esi
c00194ba:	e8 8d 74 fe ff       	call   c000094c <strcat>
c00194bf:	5f                   	pop    edi
c00194c0:	5d                   	pop    ebp
c00194c1:	56                   	push   esi
c00194c2:	53                   	push   ebx
c00194c3:	e8 1c ab ff ff       	call   c0013fe4 <Device::setName(char const*)>
c00194c8:	58                   	pop    eax
c00194c9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194cf:	5a                   	pop    edx
c00194d0:	68 e7 be 02 c0       	push   0xc002bee7
c00194d5:	50                   	push   eax
c00194d6:	e8 bd 73 fe ff       	call   c0000898 <strcmp>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	85 c0                	test   eax,eax
c00194e0:	75 20                	jne    c0019502 <CPU::detectFeatures()+0x706>
c00194e2:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00194e8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194ee:	a8 01                	test   al,0x1
c00194f0:	74 10                	je     c0019502 <CPU::detectFeatures()+0x706>
c00194f2:	83 e0 fe             	and    eax,0xfffffffe
c00194f5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00194fb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019502:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019508:	c1 e8 0e             	shr    eax,0xe
c001950b:	3c 05                	cmp    al,0x5
c001950d:	0f 85 cc 02 00 00    	jne    c00197df <CPU::detectFeatures()+0x9e3>
c0019513:	56                   	push   esi
c0019514:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001951a:	83 e0 0f             	and    eax,0xf
c001951d:	50                   	push   eax
c001951e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019524:	66 c1 e8 06          	shr    ax,0x6
c0019528:	0f b6 c0             	movzx  eax,al
c001952b:	50                   	push   eax
c001952c:	6a 05                	push   0x5
c001952e:	e8 89 f6 ff ff       	call   c0018bbc <CPU::AMD_K6_writeback(int, int, int)>
c0019533:	e9 1f 02 00 00       	jmp    c0019757 <CPU::detectFeatures()+0x95b>
c0019538:	8d 50 fd             	lea    edx,[eax-0x3]
c001953b:	83 fa 01             	cmp    edx,0x1
c001953e:	76 09                	jbe    c0019549 <CPU::detectFeatures()+0x74d>
c0019540:	83 f8 06             	cmp    eax,0x6
c0019543:	0f 85 91 01 00 00    	jne    c00196da <CPU::detectFeatures()+0x8de>
c0019549:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001954f:	c1 ea 0e             	shr    edx,0xe
c0019552:	80 fa 05             	cmp    dl,0x5
c0019555:	75 7b                	jne    c00195d2 <CPU::detectFeatures()+0x7d6>
c0019557:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001955d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019562:	66 81 fa 00 01       	cmp    dx,0x100
c0019567:	75 0c                	jne    c0019575 <CPU::detectFeatures()+0x779>
c0019569:	51                   	push   ecx
c001956a:	51                   	push   ecx
c001956b:	68 ee be 02 c0       	push   0xc002beee
c0019570:	e9 dc 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019575:	66 81 fa 00 02       	cmp    dx,0x200
c001957a:	75 0c                	jne    c0019588 <CPU::detectFeatures()+0x78c>
c001957c:	52                   	push   edx
c001957d:	52                   	push   edx
c001957e:	68 01 bf 02 c0       	push   0xc002bf01
c0019583:	e9 c9 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019588:	66 81 fa 40 02       	cmp    dx,0x240
c001958d:	75 0c                	jne    c001959b <CPU::detectFeatures()+0x79f>
c001958f:	50                   	push   eax
c0019590:	50                   	push   eax
c0019591:	68 13 bf 02 c0       	push   0xc002bf13
c0019596:	e9 b6 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c001959b:	83 f8 06             	cmp    eax,0x6
c001959e:	75 0c                	jne    c00195ac <CPU::detectFeatures()+0x7b0>
c00195a0:	50                   	push   eax
c00195a1:	50                   	push   eax
c00195a2:	68 25 bf 02 c0       	push   0xc002bf25
c00195a7:	e9 a5 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00195ac:	83 f8 04             	cmp    eax,0x4
c00195af:	75 0c                	jne    c00195bd <CPU::detectFeatures()+0x7c1>
c00195b1:	50                   	push   eax
c00195b2:	50                   	push   eax
c00195b3:	68 31 bf 02 c0       	push   0xc002bf31
c00195b8:	e9 94 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00195bd:	83 f8 03             	cmp    eax,0x3
c00195c0:	0f 85 19 02 00 00    	jne    c00197df <CPU::detectFeatures()+0x9e3>
c00195c6:	50                   	push   eax
c00195c7:	50                   	push   eax
c00195c8:	68 39 bf 02 c0       	push   0xc002bf39
c00195cd:	e9 7f 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00195d2:	80 fa 06             	cmp    dl,0x6
c00195d5:	0f 85 db 00 00 00    	jne    c00196b6 <CPU::detectFeatures()+0x8ba>
c00195db:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195e1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195e6:	66 81 fa 80 01       	cmp    dx,0x180
c00195eb:	75 0c                	jne    c00195f9 <CPU::detectFeatures()+0x7fd>
c00195ed:	50                   	push   eax
c00195ee:	50                   	push   eax
c00195ef:	68 44 bf 02 c0       	push   0xc002bf44
c00195f4:	e9 58 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00195f9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00195ff:	66 f7 c1 80 ff       	test   cx,0xff80
c0019604:	75 0c                	jne    c0019612 <CPU::detectFeatures()+0x816>
c0019606:	50                   	push   eax
c0019607:	50                   	push   eax
c0019608:	68 54 bf 02 c0       	push   0xc002bf54
c001960d:	e9 3f 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019612:	66 81 fa 40 02       	cmp    dx,0x240
c0019617:	75 0c                	jne    c0019625 <CPU::detectFeatures()+0x829>
c0019619:	55                   	push   ebp
c001961a:	55                   	push   ebp
c001961b:	68 5b bf 02 c0       	push   0xc002bf5b
c0019620:	e9 2c 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019625:	66 81 fa 80 02       	cmp    dx,0x280
c001962a:	75 0c                	jne    c0019638 <CPU::detectFeatures()+0x83c>
c001962c:	57                   	push   edi
c001962d:	57                   	push   edi
c001962e:	68 64 bf 02 c0       	push   0xc002bf64
c0019633:	e9 19 01 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019638:	66 81 fa 40 03       	cmp    dx,0x340
c001963d:	74 ed                	je     c001962c <CPU::detectFeatures()+0x830>
c001963f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019644:	75 0c                	jne    c0019652 <CPU::detectFeatures()+0x856>
c0019646:	56                   	push   esi
c0019647:	56                   	push   esi
c0019648:	68 6b bf 02 c0       	push   0xc002bf6b
c001964d:	e9 ff 00 00 00       	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019652:	83 f8 06             	cmp    eax,0x6
c0019655:	0f 84 45 ff ff ff    	je     c00195a0 <CPU::detectFeatures()+0x7a4>
c001965b:	83 f8 04             	cmp    eax,0x4
c001965e:	0f 84 4d ff ff ff    	je     c00195b1 <CPU::detectFeatures()+0x7b5>
c0019664:	83 f8 03             	cmp    eax,0x3
c0019667:	0f 85 72 01 00 00    	jne    c00197df <CPU::detectFeatures()+0x9e3>
c001966d:	51                   	push   ecx
c001966e:	51                   	push   ecx
c001966f:	68 74 bf 02 c0       	push   0xc002bf74
c0019674:	53                   	push   ebx
c0019675:	e8 6a a9 ff ff       	call   c0013fe4 <Device::setName(char const*)>
c001967a:	b1 c1                	mov    cl,0xc1
c001967c:	88 c8                	mov    al,cl
c001967e:	e6 22                	out    0x22,al
c0019680:	e4 23                	in     al,0x23
c0019682:	88 c2                	mov    dl,al
c0019684:	88 c8                	mov    al,cl
c0019686:	e6 22                	out    0x22,al
c0019688:	88 d0                	mov    al,dl
c001968a:	83 c8 10             	or     eax,0x10
c001968d:	e6 23                	out    0x23,al
c001968f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019696:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019699:	89 d0                	mov    eax,edx
c001969b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196a1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196a5:	40                   	inc    eax
c00196a6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00196ac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196b1:	e9 a1 00 00 00       	jmp    c0019757 <CPU::detectFeatures()+0x95b>
c00196b6:	83 f8 06             	cmp    eax,0x6
c00196b9:	0f 84 e1 fe ff ff    	je     c00195a0 <CPU::detectFeatures()+0x7a4>
c00196bf:	83 f8 04             	cmp    eax,0x4
c00196c2:	0f 84 e9 fe ff ff    	je     c00195b1 <CPU::detectFeatures()+0x7b5>
c00196c8:	83 f8 03             	cmp    eax,0x3
c00196cb:	0f 85 0e 01 00 00    	jne    c00197df <CPU::detectFeatures()+0x9e3>
c00196d1:	52                   	push   edx
c00196d2:	52                   	push   edx
c00196d3:	68 7f bf 02 c0       	push   0xc002bf7f
c00196d8:	eb 77                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00196da:	83 f8 07             	cmp    eax,0x7
c00196dd:	75 09                	jne    c00196e8 <CPU::detectFeatures()+0x8ec>
c00196df:	50                   	push   eax
c00196e0:	50                   	push   eax
c00196e1:	68 89 bf 02 c0       	push   0xc002bf89
c00196e6:	eb 69                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00196e8:	83 f8 0a             	cmp    eax,0xa
c00196eb:	75 09                	jne    c00196f6 <CPU::detectFeatures()+0x8fa>
c00196ed:	50                   	push   eax
c00196ee:	50                   	push   eax
c00196ef:	68 94 bf 02 c0       	push   0xc002bf94
c00196f4:	eb 5b                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c00196f6:	83 f8 0b             	cmp    eax,0xb
c00196f9:	75 09                	jne    c0019704 <CPU::detectFeatures()+0x908>
c00196fb:	50                   	push   eax
c00196fc:	50                   	push   eax
c00196fd:	68 9c bf 02 c0       	push   0xc002bf9c
c0019702:	eb 4d                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019704:	83 f8 08             	cmp    eax,0x8
c0019707:	75 09                	jne    c0019712 <CPU::detectFeatures()+0x916>
c0019709:	50                   	push   eax
c001970a:	50                   	push   eax
c001970b:	68 a5 bf 02 c0       	push   0xc002bfa5
c0019710:	eb 3f                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019712:	83 f8 09             	cmp    eax,0x9
c0019715:	75 09                	jne    c0019720 <CPU::detectFeatures()+0x924>
c0019717:	50                   	push   eax
c0019718:	50                   	push   eax
c0019719:	68 ad bf 02 c0       	push   0xc002bfad
c001971e:	eb 31                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c0019720:	83 f8 05             	cmp    eax,0x5
c0019723:	75 09                	jne    c001972e <CPU::detectFeatures()+0x932>
c0019725:	50                   	push   eax
c0019726:	50                   	push   eax
c0019727:	68 b5 bf 02 c0       	push   0xc002bfb5
c001972c:	eb 23                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c001972e:	83 f8 0c             	cmp    eax,0xc
c0019731:	75 09                	jne    c001973c <CPU::detectFeatures()+0x940>
c0019733:	55                   	push   ebp
c0019734:	55                   	push   ebp
c0019735:	68 c3 bf 02 c0       	push   0xc002bfc3
c001973a:	eb 15                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c001973c:	83 f8 0d             	cmp    eax,0xd
c001973f:	75 09                	jne    c001974a <CPU::detectFeatures()+0x94e>
c0019741:	57                   	push   edi
c0019742:	57                   	push   edi
c0019743:	68 ce bf 02 c0       	push   0xc002bfce
c0019748:	eb 07                	jmp    c0019751 <CPU::detectFeatures()+0x955>
c001974a:	56                   	push   esi
c001974b:	56                   	push   esi
c001974c:	68 e2 bf 02 c0       	push   0xc002bfe2
c0019751:	53                   	push   ebx
c0019752:	e8 8d a8 ff ff       	call   c0013fe4 <Device::setName(char const*)>
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	e9 80 00 00 00       	jmp    c00197df <CPU::detectFeatures()+0x9e3>
c001975f:	51                   	push   ecx
c0019760:	51                   	push   ecx
c0019761:	68 2e be 02 c0       	push   0xc002be2e
c0019766:	55                   	push   ebp
c0019767:	e8 a0 70 fe ff       	call   c000080c <strcpy>
c001976c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019776:	e8 33 6b fe ff       	call   c00002ae <is486>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	85 c0                	test   eax,eax
c0019780:	74 2b                	je     c00197ad <CPU::detectFeatures()+0x9b1>
c0019782:	52                   	push   edx
c0019783:	52                   	push   edx
c0019784:	68 ee bf 02 c0       	push   0xc002bfee
c0019789:	53                   	push   ebx
c001978a:	e8 55 a8 ff ff       	call   c0013fe4 <Device::setName(char const*)>
c001978f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019796:	0f 20 c0             	mov    eax,cr0
c0019799:	83 e0 14             	and    eax,0x14
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	83 f8 04             	cmp    eax,0x4
c00197a2:	75 1f                	jne    c00197c3 <CPU::detectFeatures()+0x9c7>
c00197a4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00197ab:	eb 32                	jmp    c00197df <CPU::detectFeatures()+0x9e3>
c00197ad:	50                   	push   eax
c00197ae:	50                   	push   eax
c00197af:	68 f9 bf 02 c0       	push   0xc002bff9
c00197b4:	53                   	push   ebx
c00197b5:	e8 2a a8 ff ff       	call   c0013fe4 <Device::setName(char const*)>
c00197ba:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197c1:	eb d3                	jmp    c0019796 <CPU::detectFeatures()+0x99a>
c00197c3:	e8 c1 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197c8:	83 e0 01             	and    eax,0x1
c00197cb:	8d 14 00             	lea    edx,[eax+eax*1]
c00197ce:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197d4:	83 e0 fd             	and    eax,0xfffffffd
c00197d7:	09 d0                	or     eax,edx
c00197d9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197df:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197e6:	83 c4 4c             	add    esp,0x4c
c00197e9:	5b                   	pop    ebx
c00197ea:	5e                   	pop    esi
c00197eb:	5f                   	pop    edi
c00197ec:	5d                   	pop    ebp
c00197ed:	c3                   	ret    

c00197ee <CPU::setupSMEP()>:
c00197ee:	0f 20 e0             	mov    eax,cr4
c00197f1:	0d 00 00 10 00       	or     eax,0x100000
c00197f6:	0f 22 e0             	mov    cr4,eax
c00197f9:	c3                   	ret    

c00197fa <CPU::setupUMIP()>:
c00197fa:	0f 20 e0             	mov    eax,cr4
c00197fd:	80 cc 08             	or     ah,0x8
c0019800:	0f 22 e0             	mov    cr4,eax
c0019803:	c3                   	ret    

c0019804 <CPU::setupTSC()>:
c0019804:	0f 20 e0             	mov    eax,cr4
c0019807:	83 c8 04             	or     eax,0x4
c001980a:	0f 22 e0             	mov    cr4,eax
c001980d:	c3                   	ret    

c001980e <CPU::setupLargePages()>:
c001980e:	0f 20 e0             	mov    eax,cr4
c0019811:	83 c8 10             	or     eax,0x10
c0019814:	0f 22 e0             	mov    cr4,eax
c0019817:	c3                   	ret    

c0019818 <CPU::setupPAT()>:
c0019818:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001981d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019824:	74 2c                	je     c0019852 <CPU::setupPAT()+0x3a>
c0019826:	53                   	push   ebx
c0019827:	83 ec 10             	sub    esp,0x10
c001982a:	68 77 02 00 00       	push   0x277
c001982f:	50                   	push   eax
c0019830:	e8 4d 55 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019835:	83 e2 f8             	and    edx,0xfffffff8
c0019838:	83 ca 01             	or     edx,0x1
c001983b:	52                   	push   edx
c001983c:	50                   	push   eax
c001983d:	68 77 02 00 00       	push   0x277
c0019842:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019848:	e8 61 55 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c001984d:	83 c4 28             	add    esp,0x28
c0019850:	5b                   	pop    ebx
c0019851:	c3                   	ret    
c0019852:	c3                   	ret    
c0019853:	90                   	nop

c0019854 <CPU::setupMTRR()>:
c0019854:	c3                   	ret    
c0019855:	90                   	nop

c0019856 <CPU::setupGlobalPages()>:
c0019856:	0f 20 e0             	mov    eax,cr4
c0019859:	0c 80                	or     al,0x80
c001985b:	0f 22 e0             	mov    cr4,eax
c001985e:	c3                   	ret    
c001985f:	90                   	nop

c0019860 <CPU::allowUsermodeDataAccess()>:
c0019860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019864:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001986b:	74 03                	je     c0019870 <CPU::allowUsermodeDataAccess()+0x10>
c001986d:	0f 01 cb             	stac   
c0019870:	c3                   	ret    
c0019871:	90                   	nop

c0019872 <CPU::prohibitUsermodeDataAccess()>:
c0019872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019876:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001987d:	74 03                	je     c0019882 <CPU::prohibitUsermodeDataAccess()+0x10>
c001987f:	0f 01 ca             	clac   
c0019882:	c3                   	ret    
c0019883:	90                   	nop

c0019884 <CPU::setupSMAP()>:
c0019884:	0f 20 e0             	mov    eax,cr4
c0019887:	0d 00 00 20 00       	or     eax,0x200000
c001988c:	0f 22 e0             	mov    cr4,eax
c001988f:	eb e1                	jmp    c0019872 <CPU::prohibitUsermodeDataAccess()>
c0019891:	90                   	nop

c0019892 <CPU::setupFeatures()>:
c0019892:	83 ec 0c             	sub    esp,0xc
c0019895:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019899:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198a0:	74 07                	je     c00198a9 <CPU::setupFeatures()+0x17>
c00198a2:	52                   	push   edx
c00198a3:	e8 46 ff ff ff       	call   c00197ee <CPU::setupSMEP()>
c00198a8:	58                   	pop    eax
c00198a9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198b0:	74 07                	je     c00198b9 <CPU::setupFeatures()+0x27>
c00198b2:	52                   	push   edx
c00198b3:	e8 cc ff ff ff       	call   c0019884 <CPU::setupSMAP()>
c00198b8:	58                   	pop    eax
c00198b9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198c0:	74 07                	je     c00198c9 <CPU::setupFeatures()+0x37>
c00198c2:	52                   	push   edx
c00198c3:	e8 32 ff ff ff       	call   c00197fa <CPU::setupUMIP()>
c00198c8:	58                   	pop    eax
c00198c9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198d0:	74 07                	je     c00198d9 <CPU::setupFeatures()+0x47>
c00198d2:	52                   	push   edx
c00198d3:	e8 2c ff ff ff       	call   c0019804 <CPU::setupTSC()>
c00198d8:	58                   	pop    eax
c00198d9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198e0:	74 07                	je     c00198e9 <CPU::setupFeatures()+0x57>
c00198e2:	52                   	push   edx
c00198e3:	e8 26 ff ff ff       	call   c001980e <CPU::setupLargePages()>
c00198e8:	59                   	pop    ecx
c00198e9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198f0:	74 07                	je     c00198f9 <CPU::setupFeatures()+0x67>
c00198f2:	52                   	push   edx
c00198f3:	e8 5e ff ff ff       	call   c0019856 <CPU::setupGlobalPages()>
c00198f8:	58                   	pop    eax
c00198f9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019900:	74 0c                	je     c001990e <CPU::setupFeatures()+0x7c>
c0019902:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019906:	83 c4 0c             	add    esp,0xc
c0019909:	e9 0a ff ff ff       	jmp    c0019818 <CPU::setupPAT()>
c001990e:	83 c4 0c             	add    esp,0xc
c0019911:	c3                   	ret    

c0019912 <CPU::open(int, int, void*)>:
c0019912:	57                   	push   edi
c0019913:	56                   	push   esi
c0019914:	53                   	push   ebx
c0019915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019919:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001991d:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019923:	83 ec 0c             	sub    esp,0xc
c0019926:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001992c:	68 04 c0 02 c0       	push   0xc002c004
c0019931:	e8 81 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019936:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001993c:	89 04 24             	mov    DWORD PTR [esp],eax
c001993f:	e8 aa 57 ff ff       	call   c000f0ee <GDT::setup()>
c0019944:	c7 04 24 16 c0 02 c0 	mov    DWORD PTR [esp],0xc002c016
c001994b:	e8 67 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019950:	83 c4 0c             	add    esp,0xc
c0019953:	6a 00                	push   0x0
c0019955:	68 ef be ad de       	push   0xdeadbeef
c001995a:	57                   	push   edi
c001995b:	e8 0a 76 ff ff       	call   c0010f6a <TSS::setup(unsigned long, unsigned long)>
c0019960:	c7 04 24 28 c0 02 c0 	mov    DWORD PTR [esp],0xc002c028
c0019967:	e8 4b 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001996c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001996f:	e8 d6 75 ff ff       	call   c0010f4a <TSS::flush()>
c0019974:	c7 04 24 3c c0 02 c0 	mov    DWORD PTR [esp],0xc002c03c
c001997b:	e8 37 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019980:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019986:	89 04 24             	mov    DWORD PTR [esp],eax
c0019989:	e8 c4 59 ff ff       	call   c000f352 <IDT::setup()>
c001998e:	c7 04 24 4e c0 02 c0 	mov    DWORD PTR [esp],0xc002c04e
c0019995:	e8 1d 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001999a:	b8 00 04 00 00       	mov    eax,0x400
c001999f:	0f 23 f8             	mov    db7,eax
c00199a2:	c7 04 24 6c c0 02 c0 	mov    DWORD PTR [esp],0xc002c06c
c00199a9:	e8 09 60 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00199ae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00199b8:	e8 9c 63 ff ff       	call   c000fd59 <Phys::allocatePage()>
c00199bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00199c3:	89 30                	mov    DWORD PTR [eax],esi
c00199c5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00199cb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00199ce:	c7 04 24 8e c0 02 c0 	mov    DWORD PTR [esp],0xc002c08e
c00199d5:	e8 dd 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00199da:	58                   	pop    eax
c00199db:	5a                   	pop    edx
c00199dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00199e6:	e8 79 85 ff ff       	call   c0011f64 <VAS::setCPUSpecific(unsigned long)>
c00199eb:	c7 04 24 b6 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0b6
c00199f2:	e8 c0 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c00199f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199fa:	e8 fd f3 ff ff       	call   c0018dfc <CPU::detectFeatures()>
c00199ff:	c7 04 24 d9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0d9
c0019a06:	e8 ac 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019a0b:	e8 2e ba ff ff       	call   c001543e <setupInterruptController()>
c0019a10:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a16:	c7 04 24 fd c0 02 c0 	mov    DWORD PTR [esp],0xc002c0fd
c0019a1d:	e8 95 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019a22:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0019a27:	83 e0 10             	and    eax,0x10
c0019a2a:	83 f8 01             	cmp    eax,0x1
c0019a2d:	19 c0                	sbb    eax,eax
c0019a2f:	83 e0 46             	and    eax,0x46
c0019a32:	83 c0 1e             	add    eax,0x1e
c0019a35:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a38:	e8 ee cf ff ff       	call   c0016a2b <setupTimer(int)>
c0019a3d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a43:	c7 04 24 18 c1 02 c0 	mov    DWORD PTR [esp],0xc002c118
c0019a4a:	e8 68 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019a4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a52:	e8 3b fe ff ff       	call   c0019892 <CPU::setupFeatures()>
c0019a57:	c7 04 24 33 c1 02 c0 	mov    DWORD PTR [esp],0xc002c133
c0019a5e:	e8 54 5f ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c0019a63:	83 c4 10             	add    esp,0x10
c0019a66:	31 c0                	xor    eax,eax
c0019a68:	5b                   	pop    ebx
c0019a69:	5e                   	pop    esi
c0019a6a:	5f                   	pop    edi
c0019a6b:	c3                   	ret    

c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019a6c:	57                   	push   edi
c0019a6d:	56                   	push   esi
c0019a6e:	53                   	push   ebx
c0019a6f:	51                   	push   ecx
c0019a70:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a74:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019a77:	0f 02 c0             	lar    eax,ax
c0019a7a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019a7d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a81:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a84:	88 ca                	mov    dl,cl
c0019a86:	c0 ea 06             	shr    dl,0x6
c0019a89:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a8d:	89 ca                	mov    edx,ecx
c0019a8f:	66 c1 ea 03          	shr    dx,0x3
c0019a93:	83 e2 07             	and    edx,0x7
c0019a96:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a9b:	88 17                	mov    BYTE PTR [edi],dl
c0019a9d:	0f 84 a6 01 00 00    	je     c0019c49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019aa3:	83 e1 07             	and    ecx,0x7
c0019aa6:	80 f9 04             	cmp    cl,0x4
c0019aa9:	0f 84 98 00 00 00    	je     c0019b47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019aaf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ab4:	0f 95 c0             	setne  al
c0019ab7:	80 f9 05             	cmp    cl,0x5
c0019aba:	0f 95 c2             	setne  dl
c0019abd:	08 c2                	or     dl,al
c0019abf:	74 79                	je     c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ac1:	84 c9                	test   cl,cl
c0019ac3:	75 05                	jne    c0019aca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ac5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ac8:	eb 3c                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019aca:	80 f9 01             	cmp    cl,0x1
c0019acd:	75 05                	jne    c0019ad4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019acf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ad2:	eb 32                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ad4:	80 f9 02             	cmp    cl,0x2
c0019ad7:	75 05                	jne    c0019ade <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ad9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019adc:	eb 28                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ade:	31 c0                	xor    eax,eax
c0019ae0:	80 f9 03             	cmp    cl,0x3
c0019ae3:	75 05                	jne    c0019aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ae5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ae8:	eb 1c                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019aea:	80 f9 05             	cmp    cl,0x5
c0019aed:	75 05                	jne    c0019af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019aef:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019af2:	eb 12                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019af4:	80 f9 06             	cmp    cl,0x6
c0019af7:	75 05                	jne    c0019afe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019af9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019afc:	eb 08                	jmp    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019afe:	80 f9 07             	cmp    cl,0x7
c0019b01:	75 03                	jne    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b03:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b06:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b0b:	75 10                	jne    c0019b1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b0d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b11:	b9 03 00 00 00       	mov    ecx,0x3
c0019b16:	01 d0                	add    eax,edx
c0019b18:	e9 37 01 00 00       	jmp    c0019c54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0019b22:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b27:	0f 85 27 01 00 00    	jne    c0019c54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b2d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b30:	b9 06 00 00 00       	mov    ecx,0x6
c0019b35:	e9 1a 01 00 00       	jmp    c0019c54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b3a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b3d:	b9 06 00 00 00       	mov    ecx,0x6
c0019b42:	e9 0f 01 00 00       	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b47:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019b4a:	88 ca                	mov    dl,cl
c0019b4c:	c0 ea 06             	shr    dl,0x6
c0019b4f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019b53:	89 ca                	mov    edx,ecx
c0019b55:	66 c1 ea 03          	shr    dx,0x3
c0019b59:	83 e2 07             	and    edx,0x7
c0019b5c:	80 e1 07             	and    cl,0x7
c0019b5f:	75 05                	jne    c0019b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019b61:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019b64:	eb 4c                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b66:	80 f9 01             	cmp    cl,0x1
c0019b69:	75 05                	jne    c0019b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019b6b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019b6e:	eb 42                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b70:	80 f9 02             	cmp    cl,0x2
c0019b73:	75 05                	jne    c0019b7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019b75:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019b78:	eb 38                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b7a:	80 f9 03             	cmp    cl,0x3
c0019b7d:	75 05                	jne    c0019b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b7f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b82:	eb 2e                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b84:	80 f9 04             	cmp    cl,0x4
c0019b87:	75 12                	jne    c0019b9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b89:	f6 c4 60             	test   ah,0x60
c0019b8c:	75 08                	jne    c0019b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b8e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019b91:	8d 78 14             	lea    edi,[eax+0x14]
c0019b94:	eb 1c                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b96:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019b99:	eb 17                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b9b:	80 f9 05             	cmp    cl,0x5
c0019b9e:	75 05                	jne    c0019ba5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ba0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ba3:	eb 0d                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ba5:	80 f9 06             	cmp    cl,0x6
c0019ba8:	75 05                	jne    c0019baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019baa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019bad:	eb 03                	jmp    c0019bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019baf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019bb2:	84 d2                	test   dl,dl
c0019bb4:	75 05                	jne    c0019bbb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019bb6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bb9:	eb 3c                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bbb:	80 fa 01             	cmp    dl,0x1
c0019bbe:	75 05                	jne    c0019bc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019bc0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bc3:	eb 32                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bc5:	80 fa 02             	cmp    dl,0x2
c0019bc8:	75 05                	jne    c0019bcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019bca:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bcd:	eb 28                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bcf:	80 fa 03             	cmp    dl,0x3
c0019bd2:	75 05                	jne    c0019bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019bd4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bd7:	eb 1e                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bd9:	31 c0                	xor    eax,eax
c0019bdb:	80 fa 04             	cmp    dl,0x4
c0019bde:	74 17                	je     c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019be0:	80 fa 05             	cmp    dl,0x5
c0019be3:	75 05                	jne    c0019bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019be5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019be8:	eb 0d                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bea:	80 fa 06             	cmp    dl,0x6
c0019bed:	75 05                	jne    c0019bf4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019bef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bf2:	eb 03                	jmp    c0019bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bf4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bf7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bfc:	0f 94 c2             	sete   dl
c0019bff:	80 f9 05             	cmp    cl,0x5
c0019c02:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c06:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c0b:	d3 e0                	shl    eax,cl
c0019c0d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c11:	74 0a                	je     c0019c1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c13:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c16:	b9 07 00 00 00       	mov    ecx,0x7
c0019c1b:	eb 37                	jmp    c0019c54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c1d:	01 f8                	add    eax,edi
c0019c1f:	b9 03 00 00 00       	mov    ecx,0x3
c0019c24:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c29:	74 2b                	je     c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c2b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c30:	75 0d                	jne    c0019c3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c32:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c36:	01 c8                	add    eax,ecx
c0019c38:	b9 04 00 00 00       	mov    ecx,0x4
c0019c3d:	eb 17                	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c3f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c42:	b9 07 00 00 00       	mov    ecx,0x7
c0019c47:	eb 0d                	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c49:	b9 02 00 00 00       	mov    ecx,0x2
c0019c4e:	b2 01                	mov    dl,0x1
c0019c50:	31 c0                	xor    eax,eax
c0019c52:	eb 02                	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c54:	31 d2                	xor    edx,edx
c0019c56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019c5a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019c5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c60:	88 11                	mov    BYTE PTR [ecx],dl
c0019c62:	5a                   	pop    edx
c0019c63:	5b                   	pop    ebx
c0019c64:	5e                   	pop    esi
c0019c65:	5f                   	pop    edi
c0019c66:	c3                   	ret    

c0019c67 <Krnl::smpEntry()>:
c0019c67:	eb fe                	jmp    c0019c67 <Krnl::smpEntry()>

c0019c69 <Krnl::startCPU(int)>:
c0019c69:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019c6e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019c75:	0f 84 36 01 00 00    	je     c0019db1 <Krnl::startCPU(int)+0x148>
c0019c7b:	53                   	push   ebx
c0019c7c:	83 ec 10             	sub    esp,0x10
c0019c7f:	fa                   	cli    
c0019c80:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c0019c86:	6a 1b                	push   0x1b
c0019c88:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019c8e:	e8 ef 50 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019c93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c98:	89 c3                	mov    ebx,eax
c0019c9a:	58                   	pop    eax
c0019c9b:	5a                   	pop    edx
c0019c9c:	53                   	push   ebx
c0019c9d:	68 7c c1 02 c0       	push   0xc002c17c
c0019ca2:	e8 0e 8d ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0019ca7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cb5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cbf:	c1 e0 18             	shl    eax,0x18
c0019cc2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019cc8:	83 c4 10             	add    esp,0x10
c0019ccb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019cd1:	09 c2                	or     edx,eax
c0019cd3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019cd9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019cdf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ce5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ceb:	80 cd c5             	or     ch,0xc5
c0019cee:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cf4:	f3 90                	pause  
c0019cf6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cf8:	0f ba e1 0c          	bt     ecx,0xc
c0019cfc:	72 f6                	jb     c0019cf4 <Krnl::startCPU(int)+0x8b>
c0019cfe:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d04:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d0a:	09 c1                	or     ecx,eax
c0019d0c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d12:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d18:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d1e:	80 cd 85             	or     ch,0x85
c0019d21:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d27:	f3 90                	pause  
c0019d29:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d2b:	0f ba e1 0c          	bt     ecx,0xc
c0019d2f:	72 f6                	jb     c0019d27 <Krnl::startCPU(int)+0xbe>
c0019d31:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d3b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d41:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d47:	09 c1                	or     ecx,eax
c0019d49:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d4f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d55:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019d5b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019d61:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d67:	f3 90                	pause  
c0019d69:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d6b:	0f ba e1 0c          	bt     ecx,0xc
c0019d6f:	72 f6                	jb     c0019d67 <Krnl::startCPU(int)+0xfe>
c0019d71:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d7b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d81:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d87:	09 c8                	or     eax,ecx
c0019d89:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d8f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019d95:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d9a:	0d 02 06 00 00       	or     eax,0x602
c0019d9f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019da5:	f3 90                	pause  
c0019da7:	8b 02                	mov    eax,DWORD PTR [edx]
c0019da9:	0f ba e0 0c          	bt     eax,0xc
c0019dad:	72 f6                	jb     c0019da5 <Krnl::startCPU(int)+0x13c>
c0019daf:	eb fe                	jmp    c0019daf <Krnl::startCPU(int)+0x146>
c0019db1:	c3                   	ret    

c0019db2 <Krnl::startCPUs()>:
c0019db2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019db7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019dbd:	88 c2                	mov    dl,al
c0019dbf:	83 e2 0a             	and    edx,0xa
c0019dc2:	80 fa 0a             	cmp    dl,0xa
c0019dc5:	75 09                	jne    c0019dd0 <Krnl::startCPUs()+0x1e>
c0019dc7:	a8 01                	test   al,0x1
c0019dc9:	74 05                	je     c0019dd0 <Krnl::startCPUs()+0x1e>
c0019dcb:	e9 cb 63 fe ff       	jmp    c000019b <prepareTramp>
c0019dd0:	c3                   	ret    
c0019dd1:	90                   	nop

c0019dd2 <EnvVarContainer::getEnv(char const*)>:
c0019dd2:	57                   	push   edi
c0019dd3:	56                   	push   esi
c0019dd4:	53                   	push   ebx
c0019dd5:	31 db                	xor    ebx,ebx
c0019dd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ddb:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ddd:	7e 2b                	jle    c0019e0a <EnvVarContainer::getEnv(char const*)+0x38>
c0019ddf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019de6:	50                   	push   eax
c0019de7:	50                   	push   eax
c0019de8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019deb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019dee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019df2:	e8 a1 6a fe ff       	call   c0000898 <strcmp>
c0019df7:	83 c4 10             	add    esp,0x10
c0019dfa:	85 c0                	test   eax,eax
c0019dfc:	75 09                	jne    c0019e07 <EnvVarContainer::getEnv(char const*)+0x35>
c0019dfe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e01:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e05:	eb 05                	jmp    c0019e0c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e07:	43                   	inc    ebx
c0019e08:	eb d1                	jmp    c0019ddb <EnvVarContainer::getEnv(char const*)+0x9>
c0019e0a:	31 c0                	xor    eax,eax
c0019e0c:	5b                   	pop    ebx
c0019e0d:	5e                   	pop    esi
c0019e0e:	5f                   	pop    edi
c0019e0f:	c3                   	ret    

c0019e10 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e10:	55                   	push   ebp
c0019e11:	57                   	push   edi
c0019e12:	56                   	push   esi
c0019e13:	53                   	push   ebx
c0019e14:	83 ec 28             	sub    esp,0x28
c0019e17:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e1b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e1f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e23:	56                   	push   esi
c0019e24:	e8 43 69 fe ff       	call   c000076c <strlen>
c0019e29:	40                   	inc    eax
c0019e2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e2d:	e8 2b 5b ff ff       	call   c000f95d <malloc>
c0019e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e39:	e8 2e 69 fe ff       	call   c000076c <strlen>
c0019e3e:	40                   	inc    eax
c0019e3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e42:	e8 16 5b ff ff       	call   c000f95d <malloc>
c0019e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e4e:	e8 19 69 fe ff       	call   c000076c <strlen>
c0019e53:	83 c4 0c             	add    esp,0xc
c0019e56:	40                   	inc    eax
c0019e57:	50                   	push   eax
c0019e58:	6a 00                	push   0x0
c0019e5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019e5e:	e8 ed 68 fe ff       	call   c0000750 <memset>
c0019e63:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e66:	e8 01 69 fe ff       	call   c000076c <strlen>
c0019e6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e77:	89 de                	mov    esi,ebx
c0019e79:	e8 ee 68 fe ff       	call   c000076c <strlen>
c0019e7e:	83 c4 0c             	add    esp,0xc
c0019e81:	40                   	inc    eax
c0019e82:	50                   	push   eax
c0019e83:	6a 00                	push   0x0
c0019e85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e89:	e8 c2 68 fe ff       	call   c0000750 <memset>
c0019e8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e91:	e8 d6 68 fe ff       	call   c000076c <strlen>
c0019e96:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ea2:	40                   	inc    eax
c0019ea3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019ea6:	c1 e0 03             	shl    eax,0x3
c0019ea9:	5a                   	pop    edx
c0019eaa:	59                   	pop    ecx
c0019eab:	50                   	push   eax
c0019eac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019eaf:	e8 95 5a ff ff       	call   c000f949 <realloc>
c0019eb4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019eb8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ebb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ebe:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ec2:	b9 08 00 00 00       	mov    ecx,0x8
c0019ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ec9:	83 c4 2c             	add    esp,0x2c
c0019ecc:	5b                   	pop    ebx
c0019ecd:	5e                   	pop    esi
c0019ece:	5f                   	pop    edi
c0019ecf:	5d                   	pop    ebp
c0019ed0:	c3                   	ret    
c0019ed1:	90                   	nop

c0019ed2 <EnvVarContainer::deleteEnv(char const*)>:
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019ed4:	55                   	push   ebp
c0019ed5:	57                   	push   edi
c0019ed6:	56                   	push   esi
c0019ed7:	53                   	push   ebx
c0019ed8:	81 ec 38 01 00 00    	sub    esp,0x138
c0019ede:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019ee5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019eec:	68 14 01 00 00       	push   0x114
c0019ef1:	e8 67 5a ff ff       	call   c000f95d <malloc>
c0019ef6:	83 c4 0c             	add    esp,0xc
c0019ef9:	89 c3                	mov    ebx,eax
c0019efb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019efe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f05:	50                   	push   eax
c0019f06:	e8 09 90 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0019f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f0e:	e8 d3 92 ff ff       	call   c00131e6 <File::exists()>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	84 c0                	test   al,al
c0019f18:	75 31                	jne    c0019f4b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019f1a:	50                   	push   eax
c0019f1b:	50                   	push   eax
c0019f1c:	6a 12                	push   0x12
c0019f1e:	53                   	push   ebx
c0019f1f:	e8 54 90 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c0019f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f26:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f29:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f2c:	e8 3b 68 fe ff       	call   c000076c <strlen>
c0019f31:	5a                   	pop    edx
c0019f32:	31 d2                	xor    edx,edx
c0019f34:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f38:	51                   	push   ecx
c0019f39:	56                   	push   esi
c0019f3a:	52                   	push   edx
c0019f3b:	50                   	push   eax
c0019f3c:	53                   	push   ebx
c0019f3d:	ff d7                	call   edi
c0019f3f:	83 c4 14             	add    esp,0x14
c0019f42:	53                   	push   ebx
c0019f43:	e8 8e 90 ff ff       	call   c0012fd6 <File::close()>
c0019f48:	83 c4 10             	add    esp,0x10
c0019f4b:	56                   	push   esi
c0019f4c:	31 f6                	xor    esi,esi
c0019f4e:	68 00 01 00 00       	push   0x100
c0019f53:	6a 00                	push   0x0
c0019f55:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f59:	50                   	push   eax
c0019f5a:	e8 f1 67 fe ff       	call   c0000750 <memset>
c0019f5f:	5f                   	pop    edi
c0019f60:	58                   	pop    eax
c0019f61:	6a 01                	push   0x1
c0019f63:	53                   	push   ebx
c0019f64:	e8 0f 90 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f74:	83 ec 0c             	sub    esp,0xc
c0019f77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f79:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f7d:	51                   	push   ecx
c0019f7e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f82:	52                   	push   edx
c0019f83:	6a 00                	push   0x0
c0019f85:	6a 01                	push   0x1
c0019f87:	53                   	push   ebx
c0019f88:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f8b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f8f:	83 c4 20             	add    esp,0x20
c0019f92:	3c 0d                	cmp    al,0xd
c0019f94:	0f 84 09 01 00 00    	je     c001a0a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f9a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f9f:	0f 84 ef 00 00 00    	je     c001a094 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019fa5:	3c 0a                	cmp    al,0xa
c0019fa7:	74 13                	je     c0019fbc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019fa9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019fae:	74 0c                	je     c0019fbc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019fb0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019fb6:	0f 8e d8 00 00 00    	jle    c001a094 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fc0:	83 ec 0c             	sub    esp,0xc
c0019fc3:	8d 78 01             	lea    edi,[eax+0x1]
c0019fc6:	57                   	push   edi
c0019fc7:	e8 91 59 ff ff       	call   c000f95d <malloc>
c0019fcc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019fd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fd4:	8d 56 04             	lea    edx,[esi+0x4]
c0019fd7:	89 14 24             	mov    DWORD PTR [esp],edx
c0019fda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fde:	e8 7a 59 ff ff       	call   c000f95d <malloc>
c0019fe3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019fe7:	83 c4 0c             	add    esp,0xc
c0019fea:	57                   	push   edi
c0019feb:	6a 00                	push   0x0
c0019fed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ff1:	e8 5a 67 fe ff       	call   c0000750 <memset>
c0019ff6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ffa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ffe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a004:	83 c4 0c             	add    esp,0xc
c001a007:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a00b:	52                   	push   edx
c001a00c:	6a 00                	push   0x0
c001a00e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a012:	e8 39 67 fe ff       	call   c0000750 <memset>
c001a017:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a01b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a01f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a022:	e8 45 67 fe ff       	call   c000076c <strlen>
c001a027:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a02b:	89 c1                	mov    ecx,eax
c001a02d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a02f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a032:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a035:	40                   	inc    eax
c001a036:	83 c4 10             	add    esp,0x10
c001a039:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a03c:	85 d2                	test   edx,edx
c001a03e:	75 0c                	jne    c001a04c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001a040:	83 ec 0c             	sub    esp,0xc
c001a043:	6a 08                	push   0x8
c001a045:	e8 13 59 ff ff       	call   c000f95d <malloc>
c001a04a:	eb 0c                	jmp    c001a058 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001a04c:	c1 e0 03             	shl    eax,0x3
c001a04f:	51                   	push   ecx
c001a050:	51                   	push   ecx
c001a051:	50                   	push   eax
c001a052:	52                   	push   edx
c001a053:	e8 f1 58 ff ff       	call   c000f949 <realloc>
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a05e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a061:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001a064:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a068:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a06c:	b9 08 00 00 00       	mov    ecx,0x8
c001a071:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a073:	31 f6                	xor    esi,esi
c001a075:	50                   	push   eax
c001a076:	68 00 01 00 00       	push   0x100
c001a07b:	6a 00                	push   0x0
c001a07d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a081:	50                   	push   eax
c001a082:	e8 c9 66 fe ff       	call   c0000750 <memset>
c001a087:	83 c4 10             	add    esp,0x10
c001a08a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a092:	eb 0f                	jmp    c001a0a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a094:	3c 3d                	cmp    al,0x3d
c001a096:	74 07                	je     c001a09f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001a098:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a09c:	46                   	inc    esi
c001a09d:	eb 04                	jmp    c001a0a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a09f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0a8:	0f 85 c6 fe ff ff    	jne    c0019f74 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001a0ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0b4:	5b                   	pop    ebx
c001a0b5:	5e                   	pop    esi
c001a0b6:	5f                   	pop    edi
c001a0b7:	5d                   	pop    ebp
c001a0b8:	c3                   	ret    
c001a0b9:	90                   	nop

c001a0ba <EnvVarContainer::__loadSystem()>:
c001a0ba:	83 ec 10             	sub    esp,0x10
c001a0bd:	68 00 db 02 c0       	push   0xc002db00
c001a0c2:	68 8d c1 02 c0       	push   0xc002c18d
c001a0c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0cb:	e8 04 fe ff ff       	call   c0019ed4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a0d0:	83 c4 1c             	add    esp,0x1c
c001a0d3:	c3                   	ret    

c001a0d4 <EnvVarContainer::__loadUser()>:
c001a0d4:	c3                   	ret    
c001a0d5:	90                   	nop

c001a0d6 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a0eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a0f6:	90                   	nop
c001a0f7:	c3                   	ret    

c001a0f8 <EnvVarContainer::~EnvVarContainer()>:
c001a0f8:	83 ec 0c             	sub    esp,0xc
c001a0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a102:	85 c0                	test   eax,eax
c001a104:	74 1d                	je     c001a123 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a10a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a10c:	85 c0                	test   eax,eax
c001a10e:	74 13                	je     c001a123 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a117:	83 ec 0c             	sub    esp,0xc
c001a11a:	50                   	push   eax
c001a11b:	e8 4d 58 ff ff       	call   c000f96d <free>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	90                   	nop
c001a124:	83 c4 0c             	add    esp,0xc
c001a127:	c3                   	ret    

c001a128 <Krnl::getEnv(Process*, char const*)>:
c001a128:	53                   	push   ebx
c001a129:	83 ec 08             	sub    esp,0x8
c001a12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a130:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a134:	39 05 f0 fa 02 c0    	cmp    DWORD PTR ds:0xc002faf0,eax
c001a13a:	74 04                	je     c001a140 <Krnl::getEnv(Process*, char const*)+0x18>
c001a13c:	85 c0                	test   eax,eax
c001a13e:	75 0b                	jne    c001a14b <Krnl::getEnv(Process*, char const*)+0x23>
c001a140:	a1 d4 f0 02 c0       	mov    eax,ds:0xc002f0d4
c001a145:	85 c0                	test   eax,eax
c001a147:	75 19                	jne    c001a162 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a149:	eb 27                	jmp    c001a172 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a14b:	52                   	push   edx
c001a14c:	52                   	push   edx
c001a14d:	53                   	push   ebx
c001a14e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a154:	e8 79 fc ff ff       	call   c0019dd2 <EnvVarContainer::getEnv(char const*)>
c001a159:	83 c4 10             	add    esp,0x10
c001a15c:	85 c0                	test   eax,eax
c001a15e:	75 28                	jne    c001a188 <Krnl::getEnv(Process*, char const*)+0x60>
c001a160:	eb de                	jmp    c001a140 <Krnl::getEnv(Process*, char const*)+0x18>
c001a162:	52                   	push   edx
c001a163:	52                   	push   edx
c001a164:	53                   	push   ebx
c001a165:	50                   	push   eax
c001a166:	e8 67 fc ff ff       	call   c0019dd2 <EnvVarContainer::getEnv(char const*)>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	85 c0                	test   eax,eax
c001a170:	75 16                	jne    c001a188 <Krnl::getEnv(Process*, char const*)+0x60>
c001a172:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a176:	a1 d8 f0 02 c0       	mov    eax,ds:0xc002f0d8
c001a17b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a17f:	83 c4 08             	add    esp,0x8
c001a182:	5b                   	pop    ebx
c001a183:	e9 4a fc ff ff       	jmp    c0019dd2 <EnvVarContainer::getEnv(char const*)>
c001a188:	83 c4 08             	add    esp,0x8
c001a18b:	5b                   	pop    ebx
c001a18c:	c3                   	ret    

c001a18d <Krnl::setEnvSystem(char const*, char const*)>:
c001a18d:	83 ec 10             	sub    esp,0x10
c001a190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a198:	ff 35 d8 f0 02 c0    	push   DWORD PTR ds:0xc002f0d8
c001a19e:	e8 6d fc ff ff       	call   c0019e10 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1a3:	83 c4 1c             	add    esp,0x1c
c001a1a6:	c3                   	ret    

c001a1a7 <Krnl::setEnvUser(char const*, char const*)>:
c001a1a7:	a1 d4 f0 02 c0       	mov    eax,ds:0xc002f0d4
c001a1ac:	85 c0                	test   eax,eax
c001a1ae:	74 15                	je     c001a1c5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a1b0:	83 ec 10             	sub    esp,0x10
c001a1b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1bb:	50                   	push   eax
c001a1bc:	e8 4f fc ff ff       	call   c0019e10 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1c1:	83 c4 1c             	add    esp,0x1c
c001a1c4:	c3                   	ret    
c001a1c5:	c3                   	ret    

c001a1c6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a1c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ca:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a1d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1d4:	e9 37 fc ff ff       	jmp    c0019e10 <EnvVarContainer::setEnv(char const*, char const*)>

c001a1d9 <Krnl::deleteEnvSystem(char const*)>:
c001a1d9:	c3                   	ret    

c001a1da <Krnl::deleteEnvUser(char const*)>:
c001a1da:	c3                   	ret    

c001a1db <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a1db:	c3                   	ret    

c001a1dc <Krnl::newProcessEnv(Process*)>:
c001a1dc:	83 ec 28             	sub    esp,0x28
c001a1df:	6a 0c                	push   0xc
c001a1e1:	e8 77 57 ff ff       	call   c000f95d <malloc>
c001a1e6:	5a                   	pop    edx
c001a1e7:	59                   	pop    ecx
c001a1e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1ec:	50                   	push   eax
c001a1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1f1:	e8 e0 fe ff ff       	call   c001a0d6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1fa:	83 c4 2c             	add    esp,0x2c
c001a1fd:	c3                   	ret    

c001a1fe <Krnl::copyProcessEnv(Process*, Process*)>:
c001a1fe:	57                   	push   edi
c001a1ff:	56                   	push   esi
c001a200:	53                   	push   ebx
c001a201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a205:	83 ec 0c             	sub    esp,0xc
c001a208:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a20e:	6a 0c                	push   0xc
c001a210:	e8 48 57 ff ff       	call   c000f95d <malloc>
c001a215:	89 c3                	mov    ebx,eax
c001a217:	58                   	pop    eax
c001a218:	5a                   	pop    edx
c001a219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a21d:	53                   	push   ebx
c001a21e:	e8 b3 fe ff ff       	call   c001a0d6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a223:	8b 07                	mov    eax,DWORD PTR [edi]
c001a225:	89 03                	mov    DWORD PTR [ebx],eax
c001a227:	c1 e0 03             	shl    eax,0x3
c001a22a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a22d:	e8 2b 57 ff ff       	call   c000f95d <malloc>
c001a232:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a235:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a237:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a23a:	c1 e1 03             	shl    ecx,0x3
c001a23d:	89 c7                	mov    edi,eax
c001a23f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	89 d8                	mov    eax,ebx
c001a246:	5b                   	pop    ebx
c001a247:	5e                   	pop    esi
c001a248:	5f                   	pop    edi
c001a249:	c3                   	ret    

c001a24a <Krnl::loadSystemEnv()>:
c001a24a:	53                   	push   ebx
c001a24b:	83 ec 14             	sub    esp,0x14
c001a24e:	6a 0c                	push   0xc
c001a250:	e8 08 57 ff ff       	call   c000f95d <malloc>
c001a255:	89 c3                	mov    ebx,eax
c001a257:	58                   	pop    eax
c001a258:	5a                   	pop    edx
c001a259:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001a25f:	53                   	push   ebx
c001a260:	e8 71 fe ff ff       	call   c001a0d6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a268:	89 1d d8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0d8,ebx
c001a26e:	e8 47 fe ff ff       	call   c001a0ba <EnvVarContainer::__loadSystem()>
c001a273:	83 c4 18             	add    esp,0x18
c001a276:	5b                   	pop    ebx
c001a277:	c3                   	ret    

c001a278 <Krnl::loadUserEnv()>:
c001a278:	53                   	push   ebx
c001a279:	83 ec 14             	sub    esp,0x14
c001a27c:	6a 0c                	push   0xc
c001a27e:	e8 da 56 ff ff       	call   c000f95d <malloc>
c001a283:	89 c3                	mov    ebx,eax
c001a285:	58                   	pop    eax
c001a286:	5a                   	pop    edx
c001a287:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001a28d:	53                   	push   ebx
c001a28e:	e8 43 fe ff ff       	call   c001a0d6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a293:	89 1d d4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0d4,ebx
c001a299:	83 c4 18             	add    esp,0x18
c001a29c:	5b                   	pop    ebx
c001a29d:	c3                   	ret    

c001a29e <Krnl::flushEnv()>:
c001a29e:	c3                   	ret    

c001a29f <Krnl::getProcessTotalEnvCount(Process*)>:
c001a29f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a3:	8b 15 d4 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0d4
c001a2a9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2af:	a1 d8 f0 02 c0       	mov    eax,ds:0xc002f0d8
c001a2b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2b6:	03 01                	add    eax,DWORD PTR [ecx]
c001a2b8:	85 d2                	test   edx,edx
c001a2ba:	74 02                	je     c001a2be <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a2bc:	03 02                	add    eax,DWORD PTR [edx]
c001a2be:	c3                   	ret    

c001a2bf <Krnl::getProcessEnvPair(Process*, int)>:
c001a2bf:	57                   	push   edi
c001a2c0:	56                   	push   esi
c001a2c1:	8b 35 d4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0d4
c001a2c7:	53                   	push   ebx
c001a2c8:	85 f6                	test   esi,esi
c001a2ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2d2:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a2de:	75 16                	jne    c001a2f6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a2e0:	39 c2                	cmp    edx,eax
c001a2e2:	7c 16                	jl     c001a2fa <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a2e4:	8b 0d d8 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0d8
c001a2ea:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a2ec:	01 c6                	add    esi,eax
c001a2ee:	39 d6                	cmp    esi,edx
c001a2f0:	7e 3c                	jle    c001a32e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a2f2:	29 c2                	sub    edx,eax
c001a2f4:	eb 04                	jmp    c001a2fa <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a2f6:	39 c2                	cmp    edx,eax
c001a2f8:	7d 05                	jge    c001a2ff <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a2fa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2fd:	eb 20                	jmp    c001a31f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a2ff:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a301:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a304:	39 d1                	cmp    ecx,edx
c001a306:	7e 04                	jle    c001a30c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a308:	29 c2                	sub    edx,eax
c001a30a:	eb 10                	jmp    c001a31c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a30c:	8b 35 d8 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0d8
c001a312:	03 0e                	add    ecx,DWORD PTR [esi]
c001a314:	39 d1                	cmp    ecx,edx
c001a316:	7e 16                	jle    c001a32e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a318:	29 c2                	sub    edx,eax
c001a31a:	29 fa                	sub    edx,edi
c001a31c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a31f:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a322:	8b 02                	mov    eax,DWORD PTR [edx]
c001a324:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a327:	89 03                	mov    DWORD PTR [ebx],eax
c001a329:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a32c:	eb 1d                	jmp    c001a34b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	68 af c1 02 c0       	push   0xc002c1af
c001a336:	e8 18 00 00 00       	call   c001a353 <Krnl::panic(char const*)>
c001a33b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a341:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	89 d8                	mov    eax,ebx
c001a34d:	5b                   	pop    ebx
c001a34e:	5e                   	pop    esi
c001a34f:	5f                   	pop    edi
c001a350:	c2 04 00             	ret    0x4

c001a353 <Krnl::panic(char const*)>:
c001a353:	55                   	push   ebp
c001a354:	89 e5                	mov    ebp,esp
c001a356:	53                   	push   ebx
c001a357:	83 ec 10             	sub    esp,0x10
c001a35a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a35d:	fa                   	cli    
c001a35e:	c6 05 e4 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0e4,0x1
c001a365:	53                   	push   ebx
c001a366:	e8 4c 56 ff ff       	call   c000f9b7 <Krnl::setBootMessage(char const*)>
c001a36b:	58                   	pop    eax
c001a36c:	c6 05 00 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d500,0x0
c001a373:	5a                   	pop    edx
c001a374:	53                   	push   ebx
c001a375:	68 c9 c1 02 c0       	push   0xc002c1c9
c001a37a:	e8 36 86 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001a37f:	59                   	pop    ecx
c001a380:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a385:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a38b:	e8 87 63 ff ff       	call   c0010717 <setActiveTerminal(VgaText*)>
c001a390:	83 c4 0c             	add    esp,0xc
c001a393:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a398:	6a 01                	push   0x1
c001a39a:	6a 0f                	push   0xf
c001a39c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a2:	e8 cf 61 ff ff       	call   c0010576 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3a7:	58                   	pop    eax
c001a3a8:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a3ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b3:	e8 e0 66 ff ff       	call   c0010a98 <VgaText::clearScreen()>
c001a3b8:	58                   	pop    eax
c001a3b9:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a3be:	5a                   	pop    edx
c001a3bf:	68 e2 c1 02 c0       	push   0xc002c1e2
c001a3c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ca:	e8 55 68 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a3cf:	59                   	pop    ecx
c001a3d0:	58                   	pop    eax
c001a3d1:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a3d6:	68 88 c2 02 c0       	push   0xc002c288
c001a3db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e1:	e8 3e 68 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a3e6:	58                   	pop    eax
c001a3e7:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a3ec:	5a                   	pop    edx
c001a3ed:	68 fe c1 02 c0       	push   0xc002c1fe
c001a3f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3f8:	e8 27 68 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a3fd:	59                   	pop    ecx
c001a3fe:	58                   	pop    eax
c001a3ff:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a404:	53                   	push   ebx
c001a405:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a40b:	e8 14 68 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a410:	58                   	pop    eax
c001a411:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a416:	5a                   	pop    edx
c001a417:	68 1e c2 02 c0       	push   0xc002c21e
c001a41c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a422:	e8 fd 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a427:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c001a42c:	83 c4 10             	add    esp,0x10
c001a42f:	85 c0                	test   eax,eax
c001a431:	74 02                	je     c001a435 <Krnl::panic(char const*)+0xe2>
c001a433:	ff d0                	call   eax
c001a435:	83 ec 0c             	sub    esp,0xc
c001a438:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a43b:	e8 8f 30 00 00       	call   c001d4cf <Thr::getDriverNameFromAddress(unsigned long)>
c001a440:	83 c4 10             	add    esp,0x10
c001a443:	89 c3                	mov    ebx,eax
c001a445:	85 c0                	test   eax,eax
c001a447:	0f 84 4e 02 00 00    	je     c001a69b <Krnl::panic(char const*)+0x348>
c001a44d:	83 ec 08             	sub    esp,0x8
c001a450:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a455:	68 c4 c2 02 c0       	push   0xc002c2c4
c001a45a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a460:	e8 bf 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a465:	58                   	pop    eax
c001a466:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a46b:	5a                   	pop    edx
c001a46c:	68 fe c1 02 c0       	push   0xc002c1fe
c001a471:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a477:	e8 a8 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a47c:	59                   	pop    ecx
c001a47d:	58                   	pop    eax
c001a47e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a483:	53                   	push   ebx
c001a484:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a48a:	e8 95 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a48f:	83 c4 10             	add    esp,0x10
c001a492:	83 ec 08             	sub    esp,0x8
c001a495:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a49a:	68 1d c2 02 c0       	push   0xc002c21d
c001a49f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a5:	e8 7a 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a4aa:	58                   	pop    eax
c001a4ab:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a4b0:	5a                   	pop    edx
c001a4b1:	68 1c c3 02 c0       	push   0xc002c31c
c001a4b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4bc:	e8 63 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a4c1:	59                   	pop    ecx
c001a4c2:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a4c7:	5b                   	pop    ebx
c001a4c8:	68 5c c3 02 c0       	push   0xc002c35c
c001a4cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d3:	e8 4c 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a4d8:	58                   	pop    eax
c001a4d9:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a4de:	5a                   	pop    edx
c001a4df:	68 09 c2 02 c0       	push   0xc002c209
c001a4e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ea:	e8 35 67 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a4ef:	59                   	pop    ecx
c001a4f0:	5b                   	pop    ebx
c001a4f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4f4:	68 21 c2 02 c0       	push   0xc002c221
c001a4f9:	e8 b7 84 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001a4fe:	58                   	pop    eax
c001a4ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a502:	5a                   	pop    edx
c001a503:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a506:	68 2a c2 02 c0       	push   0xc002c22a
c001a50b:	e8 a5 84 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001a510:	59                   	pop    ecx
c001a511:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a514:	5b                   	pop    ebx
c001a515:	8b 00                	mov    eax,DWORD PTR [eax]
c001a517:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a51a:	68 33 c2 02 c0       	push   0xc002c233
c001a51f:	e8 91 84 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001a524:	58                   	pop    eax
c001a525:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a52a:	5a                   	pop    edx
c001a52b:	68 a0 c3 02 c0       	push   0xc002c3a0
c001a530:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a536:	e8 e9 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a53b:	59                   	pop    ecx
c001a53c:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a541:	5b                   	pop    ebx
c001a542:	68 3c c2 02 c0       	push   0xc002c23c
c001a547:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a54d:	e8 d2 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a552:	0f 20 c0             	mov    eax,cr0
c001a555:	5a                   	pop    edx
c001a556:	59                   	pop    ecx
c001a557:	50                   	push   eax
c001a558:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a55d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a563:	e8 76 66 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a568:	5b                   	pop    ebx
c001a569:	58                   	pop    eax
c001a56a:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a56f:	68 46 c2 02 c0       	push   0xc002c246
c001a574:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57a:	e8 a5 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a57f:	0f 20 d0             	mov    eax,cr2
c001a582:	5a                   	pop    edx
c001a583:	59                   	pop    ecx
c001a584:	50                   	push   eax
c001a585:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a58a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a590:	e8 49 66 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a595:	5b                   	pop    ebx
c001a596:	58                   	pop    eax
c001a597:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a59c:	68 50 c2 02 c0       	push   0xc002c250
c001a5a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a7:	e8 78 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a5ac:	0f 20 d8             	mov    eax,cr3
c001a5af:	5a                   	pop    edx
c001a5b0:	59                   	pop    ecx
c001a5b1:	50                   	push   eax
c001a5b2:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a5b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5bd:	e8 1c 66 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a5c2:	5b                   	pop    ebx
c001a5c3:	58                   	pop    eax
c001a5c4:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a5c9:	68 63 c2 02 c0       	push   0xc002c263
c001a5ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d4:	e8 4b 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a5d9:	0f 20 e0             	mov    eax,cr4
c001a5dc:	5a                   	pop    edx
c001a5dd:	59                   	pop    ecx
c001a5de:	50                   	push   eax
c001a5df:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a5e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ea:	e8 ef 65 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a5ef:	5b                   	pop    ebx
c001a5f0:	58                   	pop    eax
c001a5f1:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a5f6:	68 6d c2 02 c0       	push   0xc002c26d
c001a5fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a601:	e8 1e 66 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a606:	5a                   	pop    edx
c001a607:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a60c:	59                   	pop    ecx
c001a60d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a613:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a616:	50                   	push   eax
c001a617:	e8 c2 65 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a61c:	5b                   	pop    ebx
c001a61d:	58                   	pop    eax
c001a61e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a623:	68 84 c2 02 c0       	push   0xc002c284
c001a628:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62e:	e8 f1 65 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a633:	5a                   	pop    edx
c001a634:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a639:	59                   	pop    ecx
c001a63a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a640:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a643:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a646:	50                   	push   eax
c001a647:	e8 92 65 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a64c:	5b                   	pop    ebx
c001a64d:	58                   	pop    eax
c001a64e:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a653:	68 84 c2 02 c0       	push   0xc002c284
c001a658:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65e:	e8 c1 65 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a663:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a668:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a66b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a671:	8b 12                	mov    edx,DWORD PTR [edx]
c001a673:	59                   	pop    ecx
c001a674:	5b                   	pop    ebx
c001a675:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a678:	50                   	push   eax
c001a679:	e8 60 65 ff ff       	call   c0010bde <VgaText::putx(unsigned int)>
c001a67e:	83 c4 10             	add    esp,0x10
c001a681:	b2 fe                	mov    dl,0xfe
c001a683:	e4 60                	in     al,0x60
c001a685:	3c 1c                	cmp    al,0x1c
c001a687:	74 04                	je     c001a68d <Krnl::panic(char const*)+0x33a>
c001a689:	3c 5a                	cmp    al,0x5a
c001a68b:	75 f6                	jne    c001a683 <Krnl::panic(char const*)+0x330>
c001a68d:	e4 64                	in     al,0x64
c001a68f:	a8 02                	test   al,0x2
c001a691:	75 fa                	jne    c001a68d <Krnl::panic(char const*)+0x33a>
c001a693:	88 d0                	mov    al,dl
c001a695:	e6 64                	out    0x64,al
c001a697:	fa                   	cli    
c001a698:	f4                   	hlt    
c001a699:	eb e8                	jmp    c001a683 <Krnl::panic(char const*)+0x330>
c001a69b:	50                   	push   eax
c001a69c:	50                   	push   eax
c001a69d:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a6a2:	68 f0 c2 02 c0       	push   0xc002c2f0
c001a6a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ad:	e8 72 65 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a6b2:	58                   	pop    eax
c001a6b3:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a6b8:	5a                   	pop    edx
c001a6b9:	68 fe c1 02 c0       	push   0xc002c1fe
c001a6be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c4:	e8 5b 65 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a6c9:	59                   	pop    ecx
c001a6ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6cf:	5b                   	pop    ebx
c001a6d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6d3:	83 c0 0c             	add    eax,0xc
c001a6d6:	50                   	push   eax
c001a6d7:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001a6dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e2:	e8 3d 65 ff ff       	call   c0010c24 <VgaText::puts(char const*)>
c001a6e7:	83 c4 10             	add    esp,0x10
c001a6ea:	e9 a3 fd ff ff       	jmp    c001a492 <Krnl::panic(char const*)+0x13f>

c001a6ef <Net::switchEndian16(unsigned short)>:
c001a6ef:	83 ec 04             	sub    esp,0x4
c001a6f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6f6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6fa:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6fe:	c1 f8 08             	sar    eax,0x8
c001a701:	89 c2                	mov    edx,eax
c001a703:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a707:	c1 e0 08             	shl    eax,0x8
c001a70a:	09 d0                	or     eax,edx
c001a70c:	83 c4 04             	add    esp,0x4
c001a70f:	c3                   	ret    

c001a710 <Net::switchEndian32(unsigned int)>:
c001a710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a714:	c1 e8 18             	shr    eax,0x18
c001a717:	89 c2                	mov    edx,eax
c001a719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a71d:	c1 e0 08             	shl    eax,0x8
c001a720:	25 00 00 ff 00       	and    eax,0xff0000
c001a725:	09 c2                	or     edx,eax
c001a727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a72b:	c1 e8 08             	shr    eax,0x8
c001a72e:	25 00 ff 00 00       	and    eax,0xff00
c001a733:	09 c2                	or     edx,eax
c001a735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a739:	c1 e0 18             	shl    eax,0x18
c001a73c:	09 d0                	or     eax,edx
c001a73e:	c3                   	ret    

c001a73f <Net::crc32Calc(unsigned char*, int)>:
c001a73f:	83 ec 10             	sub    esp,0x10
c001a742:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a747:	75 07                	jne    c001a750 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a749:	b8 00 00 00 00       	mov    eax,0x0
c001a74e:	eb 7c                	jmp    c001a7cc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a750:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a755:	7f 07                	jg     c001a75e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a757:	b8 00 00 00 00       	mov    eax,0x0
c001a75c:	eb 6e                	jmp    c001a7cc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a75e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a766:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a76e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a772:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a776:	7d 4e                	jge    c001a7c6 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a77c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a780:	01 d0                	add    eax,edx
c001a782:	8a 00                	mov    al,BYTE PTR [eax]
c001a784:	0f b6 c0             	movzx  eax,al
c001a787:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a78b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a793:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a798:	7f 26                	jg     c001a7c0 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79e:	83 e0 01             	and    eax,0x1
c001a7a1:	74 0d                	je     c001a7b0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a7:	d1 e8                	shr    eax,1
c001a7a9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a7ae:	eb 06                	jmp    c001a7b6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b4:	d1 e8                	shr    eax,1
c001a7b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a7be:	eb d3                	jmp    c001a793 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a7c0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a7c4:	eb a8                	jmp    c001a76e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ca:	f7 d0                	not    eax
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	c3                   	ret    

c001a7d0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a7d0:	57                   	push   edi
c001a7d1:	56                   	push   esi
c001a7d2:	53                   	push   ebx
c001a7d3:	83 ec 60             	sub    esp,0x60
c001a7d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7dd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7e1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a7e9:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a7ee:	7f 1a                	jg     c001a80a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a7f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7f7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7fa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a801:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a804:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a808:	eb df                	jmp    c001a7e9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a80a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a811:	8d 50 01             	lea    edx,[eax+0x1]
c001a814:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a81b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a81e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a825:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a829:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a82d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a831:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a83d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a841:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a849:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a84d:	89 c6                	mov    esi,eax
c001a84f:	89 d7                	mov    edi,edx
c001a851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a853:	89 c8                	mov    eax,ecx
c001a855:	89 fa                	mov    edx,edi
c001a857:	89 f3                	mov    ebx,esi
c001a859:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a85d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a861:	89 04 24             	mov    DWORD PTR [esp],eax
c001a864:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a86c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a873:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a877:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a87b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a87f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a88b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a88f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a893:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a897:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a89b:	89 c6                	mov    esi,eax
c001a89d:	89 d7                	mov    edi,edx
c001a89f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8a1:	89 c8                	mov    eax,ecx
c001a8a3:	89 fa                	mov    edx,edi
c001a8a5:	89 f3                	mov    ebx,esi
c001a8a7:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a8ab:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a8af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8b3:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8bb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8c2:	0f b7 c0             	movzx  eax,ax
c001a8c5:	c1 f8 08             	sar    eax,0x8
c001a8c8:	89 c1                	mov    ecx,eax
c001a8ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8d1:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8db:	88 ca                	mov    dl,cl
c001a8dd:	88 10                	mov    BYTE PTR [eax],dl
c001a8df:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a8e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8ed:	8d 48 01             	lea    ecx,[eax+0x1]
c001a8f0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a8f7:	88 10                	mov    BYTE PTR [eax],dl
c001a8f9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8fd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a901:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a908:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a90c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a910:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a914:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a918:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a91c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a920:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a924:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a928:	89 c6                	mov    esi,eax
c001a92a:	89 d7                	mov    edi,edx
c001a92c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a92e:	89 c8                	mov    eax,ecx
c001a930:	89 fa                	mov    edx,edi
c001a932:	89 f3                	mov    ebx,esi
c001a934:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a938:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a93c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a940:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a944:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a94b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a952:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a956:	50                   	push   eax
c001a957:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a95b:	e8 df fd ff ff       	call   c001a73f <Net::crc32Calc(unsigned char*, int)>
c001a960:	83 c4 08             	add    esp,0x8
c001a963:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a967:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a96b:	c1 e8 18             	shr    eax,0x18
c001a96e:	89 c1                	mov    ecx,eax
c001a970:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a977:	8d 50 01             	lea    edx,[eax+0x1]
c001a97a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a981:	88 ca                	mov    dl,cl
c001a983:	88 10                	mov    BYTE PTR [eax],dl
c001a985:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a989:	c1 e8 10             	shr    eax,0x10
c001a98c:	89 c1                	mov    ecx,eax
c001a98e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a995:	8d 50 01             	lea    edx,[eax+0x1]
c001a998:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a99f:	88 ca                	mov    dl,cl
c001a9a1:	88 10                	mov    BYTE PTR [eax],dl
c001a9a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9a7:	c1 e8 08             	shr    eax,0x8
c001a9aa:	89 c1                	mov    ecx,eax
c001a9ac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9b3:	8d 50 01             	lea    edx,[eax+0x1]
c001a9b6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9bd:	88 ca                	mov    dl,cl
c001a9bf:	88 10                	mov    BYTE PTR [eax],dl
c001a9c1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9c8:	8d 50 01             	lea    edx,[eax+0x1]
c001a9cb:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9d2:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a9d6:	88 10                	mov    BYTE PTR [eax],dl
c001a9d8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9dc:	83 c4 60             	add    esp,0x60
c001a9df:	5b                   	pop    ebx
c001a9e0:	5e                   	pop    esi
c001a9e1:	5f                   	pop    edi
c001a9e2:	c3                   	ret    

c001a9e3 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a9e3:	57                   	push   edi
c001a9e4:	56                   	push   esi
c001a9e5:	53                   	push   ebx
c001a9e6:	83 ec 70             	sub    esp,0x70
c001a9e9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9f0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a9f4:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9fc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa03:	83 c0 0e             	add    eax,0xe
c001aa06:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa15:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa29:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa2d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa31:	89 c6                	mov    esi,eax
c001aa33:	89 d7                	mov    edi,edx
c001aa35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa37:	89 c8                	mov    eax,ecx
c001aa39:	89 fa                	mov    edx,edi
c001aa3b:	89 f3                	mov    ebx,esi
c001aa3d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa49:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa51:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa58:	83 c0 08             	add    eax,0x8
c001aa5b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa5f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa6a:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa7a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa7e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa82:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa86:	89 c6                	mov    esi,eax
c001aa88:	89 d7                	mov    edi,edx
c001aa8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa8c:	89 c8                	mov    eax,ecx
c001aa8e:	89 fa                	mov    edx,edi
c001aa90:	89 f3                	mov    ebx,esi
c001aa92:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa9e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aaa6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaad:	8d 50 01             	lea    edx,[eax+0x1]
c001aab0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aab7:	8a 00                	mov    al,BYTE PTR [eax]
c001aab9:	0f b6 c0             	movzx  eax,al
c001aabc:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aac1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aac8:	8d 50 01             	lea    edx,[eax+0x1]
c001aacb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aad2:	8a 00                	mov    al,BYTE PTR [eax]
c001aad4:	0f b6 c0             	movzx  eax,al
c001aad7:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aadc:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aae1:	c1 e0 08             	shl    eax,0x8
c001aae4:	89 c2                	mov    edx,eax
c001aae6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aaea:	09 d0                	or     eax,edx
c001aaec:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aaf3:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aaf7:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aaff:	75 46                	jne    c001ab47 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab0b:	66 3d dc 05          	cmp    ax,0x5dc
c001ab0f:	77 16                	ja     c001ab27 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab11:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab1b:	0f b7 c0             	movzx  eax,ax
c001ab1e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab25:	eb 20                	jmp    c001ab47 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab27:	83 ec 0c             	sub    esp,0xc
c001ab2a:	68 c8 c3 02 c0       	push   0xc002c3c8
c001ab2f:	e8 81 7e ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001ab34:	83 c4 10             	add    esp,0x10
c001ab37:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab3e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab42:	e9 17 01 00 00       	jmp    c001ac5e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab47:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab4e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab55:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab57:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab5b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab7e:	89 c6                	mov    esi,eax
c001ab80:	89 d7                	mov    edi,edx
c001ab82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab84:	89 c8                	mov    eax,ecx
c001ab86:	89 fa                	mov    edx,edi
c001ab88:	89 f3                	mov    ebx,esi
c001ab8a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab92:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab95:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab9c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aba3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abaa:	8d 50 01             	lea    edx,[eax+0x1]
c001abad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abb4:	8a 00                	mov    al,BYTE PTR [eax]
c001abb6:	0f b6 c0             	movzx  eax,al
c001abb9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001abbd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abc4:	8d 50 01             	lea    edx,[eax+0x1]
c001abc7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abce:	8a 00                	mov    al,BYTE PTR [eax]
c001abd0:	0f b6 c0             	movzx  eax,al
c001abd3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001abd7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abde:	8d 50 01             	lea    edx,[eax+0x1]
c001abe1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abe8:	8a 00                	mov    al,BYTE PTR [eax]
c001abea:	0f b6 c0             	movzx  eax,al
c001abed:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001abf1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abf8:	8d 50 01             	lea    edx,[eax+0x1]
c001abfb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac02:	8a 00                	mov    al,BYTE PTR [eax]
c001ac04:	0f b6 c0             	movzx  eax,al
c001ac07:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac0b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac0f:	c1 e0 18             	shl    eax,0x18
c001ac12:	89 c2                	mov    edx,eax
c001ac14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac18:	c1 e0 10             	shl    eax,0x10
c001ac1b:	09 c2                	or     edx,eax
c001ac1d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac21:	c1 e0 08             	shl    eax,0x8
c001ac24:	09 d0                	or     eax,edx
c001ac26:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac2e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac35:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac39:	83 e8 04             	sub    eax,0x4
c001ac3c:	83 ec 08             	sub    esp,0x8
c001ac3f:	50                   	push   eax
c001ac40:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac44:	e8 f6 fa ff ff       	call   c001a73f <Net::crc32Calc(unsigned char*, int)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac50:	0f 94 c2             	sete   dl
c001ac53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac5a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac5d:	90                   	nop
c001ac5e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac65:	83 c4 70             	add    esp,0x70
c001ac68:	5b                   	pop    ebx
c001ac69:	5e                   	pop    esi
c001ac6a:	5f                   	pop    edi
c001ac6b:	c2 04 00             	ret    0x4

c001ac6e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac6e:	55                   	push   ebp
c001ac6f:	57                   	push   edi
c001ac70:	56                   	push   esi
c001ac71:	53                   	push   ebx
c001ac72:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac78:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac7f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac81:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac84:	80 fb 40             	cmp    bl,0x40
c001ac87:	75 1b                	jne    c001aca4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac89:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac8b:	84 d2                	test   dl,dl
c001ac8d:	0f 84 f1 00 00 00    	je     c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac93:	8d 46 01             	lea    eax,[esi+0x1]
c001ac96:	80 fa 3a             	cmp    dl,0x3a
c001ac99:	74 04                	je     c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac9b:	89 c6                	mov    esi,eax
c001ac9d:	eb ea                	jmp    c001ac89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac9f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aca2:	89 c6                	mov    esi,eax
c001aca4:	50                   	push   eax
c001aca5:	6a 40                	push   0x40
c001aca7:	6a 00                	push   0x0
c001aca9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acad:	50                   	push   eax
c001acae:	e8 9d 5a fe ff       	call   c0000750 <memset>
c001acb3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001acba:	31 c0                	xor    eax,eax
c001acbc:	83 c4 10             	add    esp,0x10
c001acbf:	8a 0f                	mov    cl,BYTE PTR [edi]
c001acc1:	84 c9                	test   cl,cl
c001acc3:	0f 84 bb 00 00 00    	je     c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acc9:	3d c7 00 00 00       	cmp    eax,0xc7
c001acce:	0f 8f b0 00 00 00    	jg     c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acd4:	80 f9 0a             	cmp    cl,0xa
c001acd7:	0f 85 98 00 00 00    	jne    c001ad75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001acdd:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ace2:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ace6:	a8 df                	test   al,0xdf
c001ace8:	0f 94 c1             	sete   cl
c001aceb:	3c 23                	cmp    al,0x23
c001aced:	0f 94 c2             	sete   dl
c001acf0:	08 d1                	or     cl,dl
c001acf2:	75 4a                	jne    c001ad3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acf4:	8d 50 f7             	lea    edx,[eax-0x9]
c001acf7:	80 fa 01             	cmp    dl,0x1
c001acfa:	76 42                	jbe    c001ad3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acfc:	3c 5b                	cmp    al,0x5b
c001acfe:	75 42                	jne    c001ad42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad00:	80 fb 40             	cmp    bl,0x40
c001ad03:	75 39                	jne    c001ad3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad05:	83 ec 0c             	sub    esp,0xc
c001ad08:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad0c:	52                   	push   edx
c001ad0d:	e8 5a 5a fe ff       	call   c000076c <strlen>
c001ad12:	83 c4 10             	add    esp,0x10
c001ad15:	83 f8 3f             	cmp    eax,0x3f
c001ad18:	77 6a                	ja     c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1a:	50                   	push   eax
c001ad1b:	50                   	push   eax
c001ad1c:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad20:	52                   	push   edx
c001ad21:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad25:	52                   	push   edx
c001ad26:	e8 e1 5a fe ff       	call   c000080c <strcpy>
c001ad2b:	58                   	pop    eax
c001ad2c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad30:	52                   	push   edx
c001ad31:	e8 36 5a fe ff       	call   c000076c <strlen>
c001ad36:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	31 d2                	xor    edx,edx
c001ad40:	eb 3a                	jmp    c001ad7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad42:	80 fb 40             	cmp    bl,0x40
c001ad45:	74 06                	je     c001ad4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad47:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad4b:	eb 20                	jmp    c001ad6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad4d:	50                   	push   eax
c001ad4e:	50                   	push   eax
c001ad4f:	55                   	push   ebp
c001ad50:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad54:	50                   	push   eax
c001ad55:	e8 3e 5b fe ff       	call   c0000898 <strcmp>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	85 c0                	test   eax,eax
c001ad5f:	75 dd                	jne    c001ad3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad61:	eb e4                	jmp    c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad63:	8d 50 01             	lea    edx,[eax+0x1]
c001ad66:	80 f9 3d             	cmp    cl,0x3d
c001ad69:	74 1d                	je     c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad6b:	89 d0                	mov    eax,edx
c001ad6d:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad6f:	84 c9                	test   cl,cl
c001ad71:	75 f0                	jne    c001ad63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad73:	eb 0f                	jmp    c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad75:	8d 50 01             	lea    edx,[eax+0x1]
c001ad78:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad7c:	47                   	inc    edi
c001ad7d:	89 d0                	mov    eax,edx
c001ad7f:	e9 3b ff ff ff       	jmp    c001acbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad84:	31 c0                	xor    eax,eax
c001ad86:	eb 33                	jmp    c001adbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad8f:	50                   	push   eax
c001ad90:	50                   	push   eax
c001ad91:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad95:	50                   	push   eax
c001ad96:	56                   	push   esi
c001ad97:	e8 fc 5a fe ff       	call   c0000898 <strcmp>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	85 c0                	test   eax,eax
c001ada1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ada5:	75 97                	jne    c001ad3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada7:	51                   	push   ecx
c001ada8:	51                   	push   ecx
c001ada9:	52                   	push   edx
c001adaa:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adb1:	e8 56 5a fe ff       	call   c000080c <strcpy>
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	b0 01                	mov    al,0x1
c001adbb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001adc1:	5b                   	pop    ebx
c001adc2:	5e                   	pop    esi
c001adc3:	5f                   	pop    edi
c001adc4:	5d                   	pop    ebp
c001adc5:	c3                   	ret    

c001adc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001adc6:	57                   	push   edi
c001adc7:	56                   	push   esi
c001adc8:	53                   	push   ebx
c001adc9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adcf:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001add6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001addd:	53                   	push   ebx
c001adde:	e8 89 59 fe ff       	call   c000076c <strlen>
c001ade3:	89 34 24             	mov    DWORD PTR [esp],esi
c001ade6:	89 c7                	mov    edi,eax
c001ade8:	e8 7f 59 fe ff       	call   c000076c <strlen>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001adf4:	3d ff 00 00 00       	cmp    eax,0xff
c001adf9:	0f 87 d3 00 00 00    	ja     c001aed2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adff:	57                   	push   edi
c001ae00:	57                   	push   edi
c001ae01:	56                   	push   esi
c001ae02:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae06:	56                   	push   esi
c001ae07:	e8 00 5a fe ff       	call   c000080c <strcpy>
c001ae0c:	58                   	pop    eax
c001ae0d:	5a                   	pop    edx
c001ae0e:	68 6a c7 02 c0       	push   0xc002c76a
c001ae13:	56                   	push   esi
c001ae14:	e8 33 5b fe ff       	call   c000094c <strcat>
c001ae19:	59                   	pop    ecx
c001ae1a:	5f                   	pop    edi
c001ae1b:	53                   	push   ebx
c001ae1c:	56                   	push   esi
c001ae1d:	e8 2a 5b fe ff       	call   c000094c <strcat>
c001ae22:	58                   	pop    eax
c001ae23:	5a                   	pop    edx
c001ae24:	68 14 c4 02 c0       	push   0xc002c414
c001ae29:	56                   	push   esi
c001ae2a:	e8 1d 5b fe ff       	call   c000094c <strcat>
c001ae2f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae36:	e8 22 4b ff ff       	call   c000f95d <malloc>
c001ae3b:	83 c4 0c             	add    esp,0xc
c001ae3e:	89 c3                	mov    ebx,eax
c001ae40:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001ae46:	56                   	push   esi
c001ae47:	50                   	push   eax
c001ae48:	e8 c7 80 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	85 db                	test   ebx,ebx
c001ae52:	74 7e                	je     c001aed2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae54:	51                   	push   ecx
c001ae55:	51                   	push   ecx
c001ae56:	6a 01                	push   0x1
c001ae58:	53                   	push   ebx
c001ae59:	e8 1a 81 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001ae5e:	83 c4 10             	add    esp,0x10
c001ae61:	85 c0                	test   eax,eax
c001ae63:	74 08                	je     c001ae6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae65:	83 ec 0c             	sub    esp,0xc
c001ae68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae6a:	53                   	push   ebx
c001ae6b:	eb 5f                	jmp    c001aecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae6d:	52                   	push   edx
c001ae6e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae72:	50                   	push   eax
c001ae73:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae77:	50                   	push   eax
c001ae78:	53                   	push   ebx
c001ae79:	e8 a6 83 ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001ae7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae82:	83 c4 10             	add    esp,0x10
c001ae85:	89 c1                	mov    ecx,eax
c001ae87:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae8b:	74 31                	je     c001aebe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae8d:	83 ec 0c             	sub    esp,0xc
c001ae90:	50                   	push   eax
c001ae91:	e8 c7 4a ff ff       	call   c000f95d <malloc>
c001ae96:	89 c6                	mov    esi,eax
c001ae98:	58                   	pop    eax
c001ae99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae9b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae9f:	52                   	push   edx
c001aea0:	56                   	push   esi
c001aea1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea9:	53                   	push   ebx
c001aeaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aead:	83 c4 20             	add    esp,0x20
c001aeb0:	85 c0                	test   eax,eax
c001aeb2:	75 0a                	jne    c001aebe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aeb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aebc:	74 18                	je     c001aed6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aebe:	83 ec 0c             	sub    esp,0xc
c001aec1:	53                   	push   ebx
c001aec2:	e8 0f 81 ff ff       	call   c0012fd6 <File::close()>
c001aec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aecc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	31 c0                	xor    eax,eax
c001aed4:	eb 3b                	jmp    c001af11 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	53                   	push   ebx
c001aeda:	e8 f7 80 ff ff       	call   c0012fd6 <File::close()>
c001aedf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aee4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aee7:	83 c4 0c             	add    esp,0xc
c001aeea:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aef1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aef8:	56                   	push   esi
c001aef9:	e8 70 fd ff ff       	call   c001ac6e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aefe:	89 34 24             	mov    DWORD PTR [esp],esi
c001af01:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af05:	e8 63 4a ff ff       	call   c000f96d <free>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af11:	81 c4 20 01 00 00    	add    esp,0x120
c001af17:	5b                   	pop    ebx
c001af18:	5e                   	pop    esi
c001af19:	5f                   	pop    edi
c001af1a:	c3                   	ret    

c001af1b <Reg::getLine(char*, char*, char*)>:
c001af1b:	57                   	push   edi
c001af1c:	56                   	push   esi
c001af1d:	53                   	push   ebx
c001af1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af22:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af26:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af2a:	57                   	push   edi
c001af2b:	56                   	push   esi
c001af2c:	53                   	push   ebx
c001af2d:	68 19 c4 02 c0       	push   0xc002c419
c001af32:	e8 8f fe ff ff       	call   c001adc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	84 c0                	test   al,al
c001af3c:	75 10                	jne    c001af4e <Reg::getLine(char*, char*, char*)+0x33>
c001af3e:	57                   	push   edi
c001af3f:	56                   	push   esi
c001af40:	53                   	push   ebx
c001af41:	68 3e c4 02 c0       	push   0xc002c43e
c001af46:	e8 7b fe ff ff       	call   c001adc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af4b:	83 c4 10             	add    esp,0x10
c001af4e:	5b                   	pop    ebx
c001af4f:	5e                   	pop    esi
c001af50:	5f                   	pop    edi
c001af51:	c3                   	ret    

c001af52 <Reg::readInt(char*, char*, int*)>:
c001af52:	55                   	push   ebp
c001af53:	57                   	push   edi
c001af54:	56                   	push   esi
c001af55:	53                   	push   ebx
c001af56:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af5c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af60:	57                   	push   edi
c001af61:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af68:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af6f:	e8 a7 ff ff ff       	call   c001af1b <Reg::getLine(char*, char*, char*)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	84 c0                	test   al,al
c001af79:	0f 84 b3 00 00 00    	je     c001b032 <Reg::readInt(char*, char*, int*)+0xe0>
c001af7f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af83:	80 fa 2b             	cmp    dl,0x2b
c001af86:	74 0c                	je     c001af94 <Reg::readInt(char*, char*, int*)+0x42>
c001af88:	80 fa 2d             	cmp    dl,0x2d
c001af8b:	75 0e                	jne    c001af9b <Reg::readInt(char*, char*, int*)+0x49>
c001af8d:	ba 01 00 00 00       	mov    edx,0x1
c001af92:	eb 0b                	jmp    c001af9f <Reg::readInt(char*, char*, int*)+0x4d>
c001af94:	ba 01 00 00 00       	mov    edx,0x1
c001af99:	eb 02                	jmp    c001af9d <Reg::readInt(char*, char*, int*)+0x4b>
c001af9b:	31 d2                	xor    edx,edx
c001af9d:	31 c0                	xor    eax,eax
c001af9f:	be 0a 00 00 00       	mov    esi,0xa
c001afa4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001afa9:	75 20                	jne    c001afcb <Reg::readInt(char*, char*, int*)+0x79>
c001afab:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001afaf:	80 f9 78             	cmp    cl,0x78
c001afb2:	75 0a                	jne    c001afbe <Reg::readInt(char*, char*, int*)+0x6c>
c001afb4:	83 c2 02             	add    edx,0x2
c001afb7:	be 10 00 00 00       	mov    esi,0x10
c001afbc:	eb 0d                	jmp    c001afcb <Reg::readInt(char*, char*, int*)+0x79>
c001afbe:	80 f9 62             	cmp    cl,0x62
c001afc1:	75 08                	jne    c001afcb <Reg::readInt(char*, char*, int*)+0x79>
c001afc3:	83 c2 02             	add    edx,0x2
c001afc6:	be 02 00 00 00       	mov    esi,0x2
c001afcb:	01 d7                	add    edi,edx
c001afcd:	31 d2                	xor    edx,edx
c001afcf:	8a 1f                	mov    bl,BYTE PTR [edi]
c001afd1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001afd5:	80 fb 0d             	cmp    bl,0xd
c001afd8:	0f 94 c3             	sete   bl
c001afdb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afe0:	0f 94 c1             	sete   cl
c001afe3:	08 cb                	or     bl,cl
c001afe5:	75 3a                	jne    c001b021 <Reg::readInt(char*, char*, int*)+0xcf>
c001afe7:	0f af d6             	imul   edx,esi
c001afea:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001afef:	83 fe 10             	cmp    esi,0x10
c001aff2:	75 26                	jne    c001b01a <Reg::readInt(char*, char*, int*)+0xc8>
c001aff4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aff8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001affb:	89 e9                	mov    ecx,ebp
c001affd:	80 f9 05             	cmp    cl,0x5
c001b000:	77 06                	ja     c001b008 <Reg::readInt(char*, char*, int*)+0xb6>
c001b002:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b006:	eb 16                	jmp    c001b01e <Reg::readInt(char*, char*, int*)+0xcc>
c001b008:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b00c:	83 e9 61             	sub    ecx,0x61
c001b00f:	80 f9 05             	cmp    cl,0x5
c001b012:	77 06                	ja     c001b01a <Reg::readInt(char*, char*, int*)+0xc8>
c001b014:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b018:	eb 04                	jmp    c001b01e <Reg::readInt(char*, char*, int*)+0xcc>
c001b01a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b01e:	47                   	inc    edi
c001b01f:	eb ae                	jmp    c001afcf <Reg::readInt(char*, char*, int*)+0x7d>
c001b021:	84 c0                	test   al,al
c001b023:	74 02                	je     c001b027 <Reg::readInt(char*, char*, int*)+0xd5>
c001b025:	f7 da                	neg    edx
c001b027:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b02e:	89 10                	mov    DWORD PTR [eax],edx
c001b030:	88 d8                	mov    al,bl
c001b032:	81 c4 ec 00 00 00    	add    esp,0xec
c001b038:	5b                   	pop    ebx
c001b039:	5e                   	pop    esi
c001b03a:	5f                   	pop    edi
c001b03b:	5d                   	pop    ebp
c001b03c:	c3                   	ret    

c001b03d <Reg::readString(char*, char*, char*, int)>:
c001b03d:	57                   	push   edi
c001b03e:	56                   	push   esi
c001b03f:	53                   	push   ebx
c001b040:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b046:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b04d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b051:	57                   	push   edi
c001b052:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b059:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b060:	e8 b6 fe ff ff       	call   c001af1b <Reg::getLine(char*, char*, char*)>
c001b065:	83 c4 10             	add    esp,0x10
c001b068:	89 c6                	mov    esi,eax
c001b06a:	84 c0                	test   al,al
c001b06c:	74 44                	je     c001b0b2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b06e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b075:	31 c0                	xor    eax,eax
c001b077:	4a                   	dec    edx
c001b078:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b07b:	84 c9                	test   cl,cl
c001b07d:	74 0f                	je     c001b08e <Reg::readString(char*, char*, char*, int)+0x51>
c001b07f:	39 c2                	cmp    edx,eax
c001b081:	7e 0b                	jle    c001b08e <Reg::readString(char*, char*, char*, int)+0x51>
c001b083:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b086:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b08b:	40                   	inc    eax
c001b08c:	eb ea                	jmp    c001b078 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b08e:	83 ec 0c             	sub    esp,0xc
c001b091:	53                   	push   ebx
c001b092:	e8 d5 56 fe ff       	call   c000076c <strlen>
c001b097:	83 c4 10             	add    esp,0x10
c001b09a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b09f:	75 11                	jne    c001b0b2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0a1:	83 ec 0c             	sub    esp,0xc
c001b0a4:	53                   	push   ebx
c001b0a5:	e8 c2 56 fe ff       	call   c000076c <strlen>
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0b2:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b0b8:	89 f0                	mov    eax,esi
c001b0ba:	5b                   	pop    ebx
c001b0bb:	5e                   	pop    esi
c001b0bc:	5f                   	pop    edi
c001b0bd:	c3                   	ret    

c001b0be <Reg::readBool(char*, char*, bool*)>:
c001b0be:	83 ec 20             	sub    esp,0x20
c001b0c1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0c5:	50                   	push   eax
c001b0c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ce:	e8 7f fe ff ff       	call   c001af52 <Reg::readInt(char*, char*, int*)>
c001b0d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0d8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0dc:	0f 95 02             	setne  BYTE PTR [edx]
c001b0df:	83 c4 2c             	add    esp,0x2c
c001b0e2:	c3                   	ret    

c001b0e3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0e3:	53                   	push   ebx
c001b0e4:	83 ec 1c             	sub    esp,0x1c
c001b0e7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0eb:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0ef:	50                   	push   eax
c001b0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f8:	e8 c1 ff ff ff       	call   c001b0be <Reg::readBool(char*, char*, bool*)>
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	84 c0                	test   al,al
c001b102:	74 04                	je     c001b108 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b104:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b108:	88 d8                	mov    al,bl
c001b10a:	83 c4 18             	add    esp,0x18
c001b10d:	5b                   	pop    ebx
c001b10e:	c3                   	ret    

c001b10f <Reg::readIntWithDefault(char*, char*, int)>:
c001b10f:	53                   	push   ebx
c001b110:	83 ec 1c             	sub    esp,0x1c
c001b113:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b117:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b11b:	50                   	push   eax
c001b11c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b124:	e8 29 fe ff ff       	call   c001af52 <Reg::readInt(char*, char*, int*)>
c001b129:	83 c4 10             	add    esp,0x10
c001b12c:	84 c0                	test   al,al
c001b12e:	74 04                	je     c001b134 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b130:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b134:	89 d8                	mov    eax,ebx
c001b136:	83 c4 18             	add    esp,0x18
c001b139:	5b                   	pop    ebx
c001b13a:	c3                   	ret    

c001b13b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b13b:	57                   	push   edi
c001b13c:	56                   	push   esi
c001b13d:	56                   	push   esi
c001b13e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b142:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b146:	56                   	push   esi
c001b147:	57                   	push   edi
c001b148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b150:	e8 e8 fe ff ff       	call   c001b03d <Reg::readString(char*, char*, char*, int)>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	84 c0                	test   al,al
c001b15a:	75 1a                	jne    c001b176 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b15c:	51                   	push   ecx
c001b15d:	56                   	push   esi
c001b15e:	6a 00                	push   0x0
c001b160:	57                   	push   edi
c001b161:	e8 ea 55 fe ff       	call   c0000750 <memset>
c001b166:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b169:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b16d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b16f:	83 c4 10             	add    esp,0x10
c001b172:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b176:	89 f8                	mov    eax,edi
c001b178:	5a                   	pop    edx
c001b179:	5e                   	pop    esi
c001b17a:	5f                   	pop    edi
c001b17b:	c3                   	ret    

c001b17c <Sys::eject(regs*)>:
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	83 ca ff             	or     edx,0xffffffff
c001b182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b186:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b189:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b18e:	83 e9 41             	sub    ecx,0x41
c001b191:	83 f9 19             	cmp    ecx,0x19
c001b194:	77 18                	ja     c001b1ae <Sys::eject(regs*)+0x32>
c001b196:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001b19d:	85 c9                	test   ecx,ecx
c001b19f:	74 0d                	je     c001b1ae <Sys::eject(regs*)+0x32>
c001b1a1:	83 ec 0c             	sub    esp,0xc
c001b1a4:	51                   	push   ecx
c001b1a5:	e8 fc b0 ff ff       	call   c00162a6 <LogicalDisk::eject()>
c001b1aa:	83 c4 10             	add    esp,0x10
c001b1ad:	99                   	cdq    
c001b1ae:	83 c4 0c             	add    esp,0xc
c001b1b1:	c3                   	ret    

c001b1b2 <Sys::exit(regs*)>:
c001b1b2:	83 ec 18             	sub    esp,0x18
c001b1b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1b9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1bc:	e8 d3 35 00 00       	call   c001e794 <terminateTask(int)>
c001b1c1:	83 c8 ff             	or     eax,0xffffffff
c001b1c4:	83 c4 1c             	add    esp,0x1c
c001b1c7:	89 c2                	mov    edx,eax
c001b1c9:	c3                   	ret    

c001b1ca <Sys::getCwd(regs*)>:
c001b1ca:	83 ec 10             	sub    esp,0x10
c001b1cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1d1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b1d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1dc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1df:	e8 32 7b ff ff       	call   c0012d16 <Fs::getcwd(Process*, char*, int)>
c001b1e4:	83 c4 1c             	add    esp,0x1c
c001b1e7:	99                   	cdq    
c001b1e8:	c3                   	ret    

c001b1e9 <Sys::getPID(regs*)>:
c001b1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1f3:	99                   	cdq    
c001b1f4:	c3                   	ret    

c001b1f5 <Sys::getRAMData(regs*)>:
c001b1f5:	8b 0d 14 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e614
c001b1fb:	69 05 10 e6 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e610,0xc8
c001b205:	99                   	cdq    
c001b206:	f7 f9                	idiv   ecx
c001b208:	c1 e0 18             	shl    eax,0x18
c001b20b:	09 c8                	or     eax,ecx
c001b20d:	99                   	cdq    
c001b20e:	c3                   	ret    

c001b20f <Sys::getVGAPtr(regs*)>:
c001b20f:	55                   	push   ebp
c001b210:	57                   	push   edi
c001b211:	56                   	push   esi
c001b212:	53                   	push   ebx
c001b213:	83 ec 18             	sub    esp,0x18
c001b216:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b21a:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b21d:	e8 be 30 00 00       	call   c001e2e0 <Thr::processFromPID(int)>
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	89 c1                	mov    ecx,eax
c001b227:	b8 01 00 00 00       	mov    eax,0x1
c001b22c:	85 c9                	test   ecx,ecx
c001b22e:	74 59                	je     c001b289 <Sys::getVGAPtr(regs*)+0x7a>
c001b230:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b236:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b23a:	74 0c                	je     c001b248 <Sys::getVGAPtr(regs*)+0x39>
c001b23c:	83 ec 0c             	sub    esp,0xc
c001b23f:	53                   	push   ebx
c001b240:	e8 d2 54 ff ff       	call   c0010717 <setActiveTerminal(VgaText*)>
c001b245:	83 c4 10             	add    esp,0x10
c001b248:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b24b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b24e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b253:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b255:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b258:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b25b:	81 c3 82 00 00 00    	add    ebx,0x82
c001b261:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b267:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b26a:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b26d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b273:	50                   	push   eax
c001b274:	50                   	push   eax
c001b275:	53                   	push   ebx
c001b276:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b279:	05 a8 0f 00 00       	add    eax,0xfa8
c001b27e:	50                   	push   eax
c001b27f:	e8 88 55 fe ff       	call   c000080c <strcpy>
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	31 c0                	xor    eax,eax
c001b289:	83 c4 0c             	add    esp,0xc
c001b28c:	31 d2                	xor    edx,edx
c001b28e:	5b                   	pop    ebx
c001b28f:	5e                   	pop    esi
c001b290:	5f                   	pop    edi
c001b291:	5d                   	pop    ebp
c001b292:	c3                   	ret    

c001b293 <Sys::loadDLL(regs*)>:
c001b293:	56                   	push   esi
c001b294:	53                   	push   ebx
c001b295:	31 d2                	xor    edx,edx
c001b297:	51                   	push   ecx
c001b298:	b8 01 00 00 00       	mov    eax,0x1
c001b29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2a1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2a5:	0f 84 8c 00 00 00    	je     c001b337 <Sys::loadDLL(regs*)+0xa4>
c001b2ab:	83 ec 0c             	sub    esp,0xc
c001b2ae:	68 14 01 00 00       	push   0x114
c001b2b3:	e8 a5 46 ff ff       	call   c000f95d <malloc>
c001b2b8:	83 c4 0c             	add    esp,0xc
c001b2bb:	89 c3                	mov    ebx,eax
c001b2bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2c5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2c8:	53                   	push   ebx
c001b2c9:	e8 46 7c ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	31 d2                	xor    edx,edx
c001b2d3:	b8 02 00 00 00       	mov    eax,0x2
c001b2d8:	85 db                	test   ebx,ebx
c001b2da:	74 5b                	je     c001b337 <Sys::loadDLL(regs*)+0xa4>
c001b2dc:	83 ec 0c             	sub    esp,0xc
c001b2df:	53                   	push   ebx
c001b2e0:	e8 01 7f ff ff       	call   c00131e6 <File::exists()>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	84 c0                	test   al,al
c001b2ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2ec:	75 11                	jne    c001b2ff <Sys::loadDLL(regs*)+0x6c>
c001b2ee:	83 ec 0c             	sub    esp,0xc
c001b2f1:	53                   	push   ebx
c001b2f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	b8 03 00 00 00       	mov    eax,0x3
c001b2fd:	eb 36                	jmp    c001b335 <Sys::loadDLL(regs*)+0xa2>
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	53                   	push   ebx
c001b303:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b306:	58                   	pop    eax
c001b307:	5a                   	pop    edx
c001b308:	6a 00                	push   0x0
c001b30a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b30d:	e8 0e 22 00 00       	call   c001d520 <Thr::loadDLL(char const*, bool)>
c001b312:	83 c4 10             	add    esp,0x10
c001b315:	89 c1                	mov    ecx,eax
c001b317:	31 d2                	xor    edx,edx
c001b319:	b8 04 00 00 00       	mov    eax,0x4
c001b31e:	85 c9                	test   ecx,ecx
c001b320:	74 15                	je     c001b337 <Sys::loadDLL(regs*)+0xa4>
c001b322:	53                   	push   ebx
c001b323:	53                   	push   ebx
c001b324:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c001b32a:	51                   	push   ecx
c001b32b:	e8 21 24 00 00       	call   c001d751 <Thr::executeDLL(unsigned long, void*)>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	31 c0                	xor    eax,eax
c001b335:	31 d2                	xor    edx,edx
c001b337:	59                   	pop    ecx
c001b338:	5b                   	pop    ebx
c001b339:	5e                   	pop    esi
c001b33a:	c3                   	ret    

c001b33b <Sys::read(regs*)>:
c001b33b:	57                   	push   edi
c001b33c:	56                   	push   esi
c001b33d:	53                   	push   ebx
c001b33e:	83 ec 10             	sub    esp,0x10
c001b341:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b345:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b348:	83 f8 02             	cmp    eax,0x2
c001b34b:	77 10                	ja     c001b35d <Sys::read(regs*)+0x22>
c001b34d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b352:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b355:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b35b:	eb 0e                	jmp    c001b36b <Sys::read(regs*)+0x30>
c001b35d:	83 ec 0c             	sub    esp,0xc
c001b360:	50                   	push   eax
c001b361:	e8 27 61 ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b366:	83 c4 10             	add    esp,0x10
c001b369:	89 c1                	mov    ecx,eax
c001b36b:	83 c8 ff             	or     eax,0xffffffff
c001b36e:	85 c9                	test   ecx,ecx
c001b370:	89 c2                	mov    edx,eax
c001b372:	74 28                	je     c001b39c <Sys::read(regs*)+0x61>
c001b374:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b37c:	31 ff                	xor    edi,edi
c001b37e:	83 ec 0c             	sub    esp,0xc
c001b381:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b383:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b387:	52                   	push   edx
c001b388:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b38b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b38e:	57                   	push   edi
c001b38f:	56                   	push   esi
c001b390:	51                   	push   ecx
c001b391:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b398:	83 c4 20             	add    esp,0x20
c001b39b:	99                   	cdq    
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	5b                   	pop    ebx
c001b3a0:	5e                   	pop    esi
c001b3a1:	5f                   	pop    edi
c001b3a2:	c3                   	ret    

c001b3a3 <Sys::sbrk(regs*)>:
c001b3a3:	56                   	push   esi
c001b3a4:	53                   	push   ebx
c001b3a5:	50                   	push   eax
c001b3a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3b5:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b3bb:	85 db                	test   ebx,ebx
c001b3bd:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b3c0:	74 02                	je     c001b3c4 <Sys::sbrk(regs*)+0x21>
c001b3c2:	79 06                	jns    c001b3ca <Sys::sbrk(regs*)+0x27>
c001b3c4:	89 f0                	mov    eax,esi
c001b3c6:	31 d2                	xor    edx,edx
c001b3c8:	eb 2a                	jmp    c001b3f4 <Sys::sbrk(regs*)+0x51>
c001b3ca:	83 c8 ff             	or     eax,0xffffffff
c001b3cd:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3d3:	89 c2                	mov    edx,eax
c001b3d5:	77 1d                	ja     c001b3f4 <Sys::sbrk(regs*)+0x51>
c001b3d7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3dd:	50                   	push   eax
c001b3de:	c1 ea 0c             	shr    edx,0xc
c001b3e1:	68 07 0c 00 00       	push   0xc07
c001b3e6:	52                   	push   edx
c001b3e7:	51                   	push   ecx
c001b3e8:	e8 9f 69 ff ff       	call   c0011d8c <VAS::allocatePages(int, int)>
c001b3ed:	89 f0                	mov    eax,esi
c001b3ef:	31 d2                	xor    edx,edx
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	59                   	pop    ecx
c001b3f5:	5b                   	pop    ebx
c001b3f6:	5e                   	pop    esi
c001b3f7:	c3                   	ret    

c001b3f8 <Sys::setCwd(regs*)>:
c001b3f8:	83 ec 14             	sub    esp,0x14
c001b3fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3ff:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b407:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b40a:	e8 76 7e ff ff       	call   c0013285 <Fs::setcwd(Process*, char*)>
c001b40f:	83 c4 1c             	add    esp,0x1c
c001b412:	99                   	cdq    
c001b413:	c3                   	ret    

c001b414 <Sys::setTime(regs*)>:
c001b414:	55                   	push   ebp
c001b415:	31 c9                	xor    ecx,ecx
c001b417:	57                   	push   edi
c001b418:	bd 0c 00 00 00       	mov    ebp,0xc
c001b41d:	56                   	push   esi
c001b41e:	53                   	push   ebx
c001b41f:	31 db                	xor    ebx,ebx
c001b421:	83 ec 10             	sub    esp,0x10
c001b424:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b428:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b42b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b42e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b431:	89 c2                	mov    edx,eax
c001b433:	66 81 ef 6c 07       	sub    di,0x76c
c001b438:	83 e2 1f             	and    edx,0x1f
c001b43b:	c1 e7 10             	shl    edi,0x10
c001b43e:	42                   	inc    edx
c001b43f:	c1 e8 05             	shr    eax,0x5
c001b442:	88 d1                	mov    cl,dl
c001b444:	31 d2                	xor    edx,edx
c001b446:	f7 f5                	div    ebp
c001b448:	89 dd                	mov    ebp,ebx
c001b44a:	88 d5                	mov    ch,dl
c001b44c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b452:	0f b7 c1             	movzx  eax,cx
c001b455:	31 d2                	xor    edx,edx
c001b457:	09 f8                	or     eax,edi
c001b459:	bf 3c 00 00 00       	mov    edi,0x3c
c001b45e:	89 c1                	mov    ecx,eax
c001b460:	89 f0                	mov    eax,esi
c001b462:	f7 f7                	div    edi
c001b464:	c1 e2 10             	shl    edx,0x10
c001b467:	09 d5                	or     ebp,edx
c001b469:	31 d2                	xor    edx,edx
c001b46b:	89 eb                	mov    ebx,ebp
c001b46d:	f7 f7                	div    edi
c001b46f:	bf 10 0e 00 00       	mov    edi,0xe10
c001b474:	88 d7                	mov    bh,dl
c001b476:	89 f0                	mov    eax,esi
c001b478:	31 d2                	xor    edx,edx
c001b47a:	f7 f7                	div    edi
c001b47c:	bf 18 00 00 00       	mov    edi,0x18
c001b481:	31 d2                	xor    edx,edx
c001b483:	f7 f7                	div    edi
c001b485:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b48a:	88 d3                	mov    bl,dl
c001b48c:	53                   	push   ebx
c001b48d:	51                   	push   ecx
c001b48e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b494:	e8 35 86 ff ff       	call   c0013ace <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b499:	83 c4 1c             	add    esp,0x1c
c001b49c:	83 f0 01             	xor    eax,0x1
c001b49f:	5b                   	pop    ebx
c001b4a0:	0f b6 c0             	movzx  eax,al
c001b4a3:	5e                   	pop    esi
c001b4a4:	31 d2                	xor    edx,edx
c001b4a6:	5f                   	pop    edi
c001b4a7:	5d                   	pop    ebp
c001b4a8:	c3                   	ret    

c001b4a9 <Sys::timezone(regs*)>:
c001b4a9:	53                   	push   ebx
c001b4aa:	83 ec 08             	sub    esp,0x8
c001b4ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4b1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4b5:	75 17                	jne    c001b4ce <Sys::timezone(regs*)+0x25>
c001b4b7:	83 ec 0c             	sub    esp,0xc
c001b4ba:	68 59 c4 02 c0       	push   0xc002c459
c001b4bf:	e8 f1 74 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001b4c4:	83 c8 ff             	or     eax,0xffffffff
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	89 c2                	mov    edx,eax
c001b4cc:	eb 20                	jmp    c001b4ee <Sys::timezone(regs*)+0x45>
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	68 6e c4 02 c0       	push   0xc002c46e
c001b4d6:	e8 da 74 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001b4db:	58                   	pop    eax
c001b4dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4df:	e8 4c 83 ff ff       	call   c0013830 <User::loadClockSettings(int)>
c001b4e4:	83 c4 10             	add    esp,0x10
c001b4e7:	b8 01 00 00 00       	mov    eax,0x1
c001b4ec:	31 d2                	xor    edx,edx
c001b4ee:	83 c4 08             	add    esp,0x8
c001b4f1:	5b                   	pop    ebx
c001b4f2:	c3                   	ret    

c001b4f3 <Sys::write(regs*)>:
c001b4f3:	57                   	push   edi
c001b4f4:	56                   	push   esi
c001b4f5:	53                   	push   ebx
c001b4f6:	83 ec 10             	sub    esp,0x10
c001b4f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b500:	83 f8 02             	cmp    eax,0x2
c001b503:	77 10                	ja     c001b515 <Sys::write(regs*)+0x22>
c001b505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b50a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b50d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b513:	eb 0e                	jmp    c001b523 <Sys::write(regs*)+0x30>
c001b515:	83 ec 0c             	sub    esp,0xc
c001b518:	50                   	push   eax
c001b519:	e8 6f 5f ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b51e:	83 c4 10             	add    esp,0x10
c001b521:	89 c1                	mov    ecx,eax
c001b523:	83 c8 ff             	or     eax,0xffffffff
c001b526:	85 c9                	test   ecx,ecx
c001b528:	89 c2                	mov    edx,eax
c001b52a:	74 28                	je     c001b554 <Sys::write(regs*)+0x61>
c001b52c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b534:	31 ff                	xor    edi,edi
c001b536:	83 ec 0c             	sub    esp,0xc
c001b539:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b53b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b53f:	52                   	push   edx
c001b540:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b543:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b546:	57                   	push   edi
c001b547:	56                   	push   esi
c001b548:	51                   	push   ecx
c001b549:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b54c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b550:	83 c4 20             	add    esp,0x20
c001b553:	99                   	cdq    
c001b554:	83 c4 10             	add    esp,0x10
c001b557:	5b                   	pop    ebx
c001b558:	5e                   	pop    esi
c001b559:	5f                   	pop    edi
c001b55a:	c3                   	ret    

c001b55b <Sys::wsbe(regs*)>:
c001b55b:	57                   	push   edi
c001b55c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b561:	56                   	push   esi
c001b562:	be ad c4 02 c0       	mov    esi,0xc002c4ad
c001b567:	53                   	push   ebx
c001b568:	83 ec 30             	sub    esp,0x30
c001b56b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b56f:	fc                   	cld    
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b575:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b57e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b581:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b587:	8b 06                	mov    eax,DWORD PTR [esi]
c001b589:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b58c:	57                   	push   edi
c001b58d:	e8 da 51 fe ff       	call   c000076c <strlen>
c001b592:	5a                   	pop    edx
c001b593:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b597:	52                   	push   edx
c001b598:	31 d2                	xor    edx,edx
c001b59a:	57                   	push   edi
c001b59b:	52                   	push   edx
c001b59c:	50                   	push   eax
c001b59d:	56                   	push   esi
c001b59e:	ff d3                	call   ebx
c001b5a0:	83 c4 14             	add    esp,0x14
c001b5a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5aa:	e8 e5 31 00 00       	call   c001e794 <terminateTask(int)>
c001b5af:	83 c4 40             	add    esp,0x40
c001b5b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5b7:	5b                   	pop    ebx
c001b5b8:	31 d2                	xor    edx,edx
c001b5ba:	5e                   	pop    esi
c001b5bb:	5f                   	pop    edi
c001b5bc:	c3                   	ret    

c001b5bd <Sys::yield(regs*)>:
c001b5bd:	57                   	push   edi
c001b5be:	56                   	push   esi
c001b5bf:	53                   	push   ebx
c001b5c0:	fa                   	cli    
c001b5c1:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001b5c7:	e8 19 29 00 00       	call   c001dee5 <schedule()>
c001b5cc:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001b5d1:	48                   	dec    eax
c001b5d2:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001b5d7:	75 01                	jne    c001b5da <Sys::yield(regs*)+0x1d>
c001b5d9:	fb                   	sti    
c001b5da:	8b 35 30 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec30
c001b5e0:	8b 3d 34 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec34
c001b5e6:	89 f0                	mov    eax,esi
c001b5e8:	89 fb                	mov    ebx,edi
c001b5ea:	89 f1                	mov    ecx,esi
c001b5ec:	c1 e0 07             	shl    eax,0x7
c001b5ef:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5f3:	25 80 30 0f 00       	and    eax,0xf3080
c001b5f8:	c1 eb 17             	shr    ebx,0x17
c001b5fb:	31 c8                	xor    eax,ecx
c001b5fd:	89 da                	mov    edx,ebx
c001b5ff:	5b                   	pop    ebx
c001b600:	5e                   	pop    esi
c001b601:	5f                   	pop    edi
c001b602:	c3                   	ret    

c001b603 <sysCallSeekDir(regs*)>:
c001b603:	31 c0                	xor    eax,eax
c001b605:	31 d2                	xor    edx,edx
c001b607:	c3                   	ret    

c001b608 <sysCallTellDir(regs*)>:
c001b608:	31 c0                	xor    eax,eax
c001b60a:	31 d2                	xor    edx,edx
c001b60c:	c3                   	ret    

c001b60d <sysCallVerify(regs*)>:
c001b60d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b611:	31 d2                	xor    edx,edx
c001b613:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b616:	c3                   	ret    

c001b617 <sysCallGetArgc(regs*)>:
c001b617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b61c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b61f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b625:	99                   	cdq    
c001b626:	c3                   	ret    

c001b627 <sysFormatDisk(regs*)>:
c001b627:	56                   	push   esi
c001b628:	53                   	push   ebx
c001b629:	53                   	push   ebx
c001b62a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b62e:	8b 1d 34 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e734
c001b634:	eb 25                	jmp    c001b65b <sysFormatDisk(regs*)+0x34>
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b63c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b63e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b641:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b644:	50                   	push   eax
c001b645:	ff 34 85 c0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1440]
c001b64c:	53                   	push   ebx
c001b64d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b650:	83 c4 20             	add    esp,0x20
c001b653:	83 f8 08             	cmp    eax,0x8
c001b656:	75 12                	jne    c001b66a <sysFormatDisk(regs*)+0x43>
c001b658:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b65b:	85 db                	test   ebx,ebx
c001b65d:	75 d7                	jne    c001b636 <sysFormatDisk(regs*)+0xf>
c001b65f:	59                   	pop    ecx
c001b660:	b8 03 00 00 00       	mov    eax,0x3
c001b665:	31 d2                	xor    edx,edx
c001b667:	5b                   	pop    ebx
c001b668:	5e                   	pop    esi
c001b669:	c3                   	ret    
c001b66a:	85 c0                	test   eax,eax
c001b66c:	74 1b                	je     c001b689 <sysFormatDisk(regs*)+0x62>
c001b66e:	83 f8 09             	cmp    eax,0x9
c001b671:	74 0b                	je     c001b67e <sysFormatDisk(regs*)+0x57>
c001b673:	59                   	pop    ecx
c001b674:	b8 02 00 00 00       	mov    eax,0x2
c001b679:	31 d2                	xor    edx,edx
c001b67b:	5b                   	pop    ebx
c001b67c:	5e                   	pop    esi
c001b67d:	c3                   	ret    
c001b67e:	59                   	pop    ecx
c001b67f:	b8 01 00 00 00       	mov    eax,0x1
c001b684:	31 d2                	xor    edx,edx
c001b686:	5b                   	pop    ebx
c001b687:	5e                   	pop    esi
c001b688:	c3                   	ret    
c001b689:	59                   	pop    ecx
c001b68a:	31 c0                	xor    eax,eax
c001b68c:	31 d2                	xor    edx,edx
c001b68e:	5b                   	pop    ebx
c001b68f:	5e                   	pop    esi
c001b690:	c3                   	ret    

c001b691 <sysSetDiskVolumeLabel(regs*)>:
c001b691:	56                   	push   esi
c001b692:	53                   	push   ebx
c001b693:	53                   	push   ebx
c001b694:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b698:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b69b:	83 f8 19             	cmp    eax,0x19
c001b69e:	77 29                	ja     c001b6c9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6a0:	8b 0c 85 c0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1440]
c001b6a7:	85 c9                	test   ecx,ecx
c001b6a9:	74 1e                	je     c001b6c9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ab:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ae:	85 d2                	test   edx,edx
c001b6b0:	74 17                	je     c001b6c9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6b2:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6b8:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6ba:	52                   	push   edx
c001b6bb:	50                   	push   eax
c001b6bc:	51                   	push   ecx
c001b6bd:	53                   	push   ebx
c001b6be:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	99                   	cdq    
c001b6c5:	59                   	pop    ecx
c001b6c6:	5b                   	pop    ebx
c001b6c7:	5e                   	pop    esi
c001b6c8:	c3                   	ret    
c001b6c9:	59                   	pop    ecx
c001b6ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6d4:	5b                   	pop    ebx
c001b6d5:	5e                   	pop    esi
c001b6d6:	c3                   	ret    

c001b6d7 <sysGetDiskVolumeLabel(regs*)>:
c001b6d7:	57                   	push   edi
c001b6d8:	56                   	push   esi
c001b6d9:	53                   	push   ebx
c001b6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b6e1:	83 fa 19             	cmp    edx,0x19
c001b6e4:	77 34                	ja     c001b71a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6e6:	8b 0c 95 c0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1440]
c001b6ed:	85 c9                	test   ecx,ecx
c001b6ef:	74 29                	je     c001b71a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6f1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6f4:	85 db                	test   ebx,ebx
c001b6f6:	74 22                	je     c001b71a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6fb:	85 c0                	test   eax,eax
c001b6fd:	74 1b                	je     c001b71a <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6ff:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b705:	83 ec 0c             	sub    esp,0xc
c001b708:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b70a:	50                   	push   eax
c001b70b:	53                   	push   ebx
c001b70c:	52                   	push   edx
c001b70d:	51                   	push   ecx
c001b70e:	56                   	push   esi
c001b70f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b712:	83 c4 20             	add    esp,0x20
c001b715:	99                   	cdq    
c001b716:	5b                   	pop    ebx
c001b717:	5e                   	pop    esi
c001b718:	5f                   	pop    edi
c001b719:	c3                   	ret    
c001b71a:	5b                   	pop    ebx
c001b71b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b720:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b725:	5e                   	pop    esi
c001b726:	5f                   	pop    edi
c001b727:	c3                   	ret    

c001b728 <sysShutdown(regs*)>:
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b732:	85 c0                	test   eax,eax
c001b734:	74 18                	je     c001b74e <sysShutdown(regs*)+0x26>
c001b736:	83 f8 01             	cmp    eax,0x1
c001b739:	74 38                	je     c001b773 <sysShutdown(regs*)+0x4b>
c001b73b:	83 f8 02             	cmp    eax,0x2
c001b73e:	74 24                	je     c001b764 <sysShutdown(regs*)+0x3c>
c001b740:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b745:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74a:	83 c4 0c             	add    esp,0xc
c001b74d:	c3                   	ret    
c001b74e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b753:	8b 10                	mov    edx,DWORD PTR [eax]
c001b755:	6a 00                	push   0x0
c001b757:	6a 00                	push   0x0
c001b759:	6a 00                	push   0x0
c001b75b:	50                   	push   eax
c001b75c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b75f:	83 c4 10             	add    esp,0x10
c001b762:	eb dc                	jmp    c001b740 <sysShutdown(regs*)+0x18>
c001b764:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b769:	8b 10                	mov    edx,DWORD PTR [eax]
c001b76b:	6a 00                	push   0x0
c001b76d:	6a 00                	push   0x0
c001b76f:	6a 01                	push   0x1
c001b771:	eb e8                	jmp    c001b75b <sysShutdown(regs*)+0x33>
c001b773:	a1 40 ec 02 c0       	mov    eax,ds:0xc002ec40
c001b778:	85 c0                	test   eax,eax
c001b77a:	74 02                	je     c001b77e <sysShutdown(regs*)+0x56>
c001b77c:	ff d0                	call   eax
c001b77e:	31 c0                	xor    eax,eax
c001b780:	31 d2                	xor    edx,edx
c001b782:	83 c4 0c             	add    esp,0xc
c001b785:	c3                   	ret    

c001b786 <sysCallRealpath(regs*)>:
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b790:	85 d2                	test   edx,edx
c001b792:	74 07                	je     c001b79b <sysCallRealpath(regs*)+0x15>
c001b794:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b797:	85 c0                	test   eax,eax
c001b799:	75 0b                	jne    c001b7a6 <sysCallRealpath(regs*)+0x20>
c001b79b:	b8 01 00 00 00       	mov    eax,0x1
c001b7a0:	31 d2                	xor    edx,edx
c001b7a2:	83 c4 0c             	add    esp,0xc
c001b7a5:	c3                   	ret    
c001b7a6:	51                   	push   ecx
c001b7a7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7ad:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7b0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7b6:	51                   	push   ecx
c001b7b7:	52                   	push   edx
c001b7b8:	50                   	push   eax
c001b7b9:	e8 ac 75 ff ff       	call   c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7be:	83 c4 10             	add    esp,0x10
c001b7c1:	31 c0                	xor    eax,eax
c001b7c3:	31 d2                	xor    edx,edx
c001b7c5:	83 c4 0c             	add    esp,0xc
c001b7c8:	c3                   	ret    

c001b7c9 <sysCallReadDir(regs*)>:
c001b7c9:	53                   	push   ebx
c001b7ca:	83 ec 18             	sub    esp,0x18
c001b7cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7d4:	83 f8 02             	cmp    eax,0x2
c001b7d7:	76 60                	jbe    c001b839 <sysCallReadDir(regs*)+0x70>
c001b7d9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b7e0:	77 48                	ja     c001b82a <sysCallReadDir(regs*)+0x61>
c001b7e2:	83 ec 0c             	sub    esp,0xc
c001b7e5:	50                   	push   eax
c001b7e6:	e8 a2 5c ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	85 c0                	test   eax,eax
c001b7f0:	74 38                	je     c001b82a <sysCallReadDir(regs*)+0x61>
c001b7f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7ff:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b803:	51                   	push   ecx
c001b804:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b807:	6a 00                	push   0x0
c001b809:	68 10 01 00 00       	push   0x110
c001b80e:	50                   	push   eax
c001b80f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b812:	83 c4 20             	add    esp,0x20
c001b815:	85 c0                	test   eax,eax
c001b817:	74 29                	je     c001b842 <sysCallReadDir(regs*)+0x79>
c001b819:	83 f8 07             	cmp    eax,0x7
c001b81c:	74 1b                	je     c001b839 <sysCallReadDir(regs*)+0x70>
c001b81e:	b8 02 00 00 00       	mov    eax,0x2
c001b823:	31 d2                	xor    edx,edx
c001b825:	83 c4 18             	add    esp,0x18
c001b828:	5b                   	pop    ebx
c001b829:	c3                   	ret    
c001b82a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b82f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b834:	83 c4 18             	add    esp,0x18
c001b837:	5b                   	pop    ebx
c001b838:	c3                   	ret    
c001b839:	b8 01 00 00 00       	mov    eax,0x1
c001b83e:	31 d2                	xor    edx,edx
c001b840:	eb e3                	jmp    c001b825 <sysCallReadDir(regs*)+0x5c>
c001b842:	31 c0                	xor    eax,eax
c001b844:	31 d2                	xor    edx,edx
c001b846:	eb dd                	jmp    c001b825 <sysCallReadDir(regs*)+0x5c>

c001b848 <sysCallIsATTY(regs*)>:
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b852:	83 f8 02             	cmp    eax,0x2
c001b855:	76 07                	jbe    c001b85e <sysCallIsATTY(regs*)+0x16>
c001b857:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b85c:	75 26                	jne    c001b884 <sysCallIsATTY(regs*)+0x3c>
c001b85e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b866:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b86c:	85 c0                	test   eax,eax
c001b86e:	74 24                	je     c001b894 <sysCallIsATTY(regs*)+0x4c>
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	8b 10                	mov    edx,DWORD PTR [eax]
c001b875:	50                   	push   eax
c001b876:	ff 12                	call   DWORD PTR [edx]
c001b878:	31 d2                	xor    edx,edx
c001b87a:	0f b6 c0             	movzx  eax,al
c001b87d:	83 c4 10             	add    esp,0x10
c001b880:	83 c4 0c             	add    esp,0xc
c001b883:	c3                   	ret    
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	50                   	push   eax
c001b888:	e8 00 5c ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	85 c0                	test   eax,eax
c001b892:	75 dc                	jne    c001b870 <sysCallIsATTY(regs*)+0x28>
c001b894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b899:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b89e:	83 c4 0c             	add    esp,0xc
c001b8a1:	c3                   	ret    

c001b8a2 <sysCallSeek(regs*)>:
c001b8a2:	53                   	push   ebx
c001b8a3:	83 ec 08             	sub    esp,0x8
c001b8a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8ad:	8d 50 fd             	lea    edx,[eax-0x3]
c001b8b0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b8b6:	77 32                	ja     c001b8ea <sysCallSeek(regs*)+0x48>
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	50                   	push   eax
c001b8bc:	e8 cc 5b ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b8c1:	83 c4 0c             	add    esp,0xc
c001b8c4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8c7:	31 db                	xor    ebx,ebx
c001b8c9:	53                   	push   ebx
c001b8ca:	51                   	push   ecx
c001b8cb:	50                   	push   eax
c001b8cc:	e8 65 77 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	85 c0                	test   eax,eax
c001b8d6:	0f 95 c0             	setne  al
c001b8d9:	31 d2                	xor    edx,edx
c001b8db:	0f b6 c0             	movzx  eax,al
c001b8de:	f7 d8                	neg    eax
c001b8e0:	83 d2 00             	adc    edx,0x0
c001b8e3:	83 c4 08             	add    esp,0x8
c001b8e6:	f7 da                	neg    edx
c001b8e8:	5b                   	pop    ebx
c001b8e9:	c3                   	ret    
c001b8ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8f4:	83 c4 08             	add    esp,0x8
c001b8f7:	5b                   	pop    ebx
c001b8f8:	c3                   	ret    

c001b8f9 <sysCallTell(regs*)>:
c001b8f9:	53                   	push   ebx
c001b8fa:	83 ec 08             	sub    esp,0x8
c001b8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b901:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b904:	83 f8 02             	cmp    eax,0x2
c001b907:	76 4d                	jbe    c001b956 <sysCallTell(regs*)+0x5d>
c001b909:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b90e:	76 19                	jbe    c001b929 <sysCallTell(regs*)+0x30>
c001b910:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b913:	31 d2                	xor    edx,edx
c001b915:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b91b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b922:	31 c0                	xor    eax,eax
c001b924:	83 c4 08             	add    esp,0x8
c001b927:	5b                   	pop    ebx
c001b928:	c3                   	ret    
c001b929:	83 ec 0c             	sub    esp,0xc
c001b92c:	50                   	push   eax
c001b92d:	e8 5b 5b ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b932:	5a                   	pop    edx
c001b933:	59                   	pop    ecx
c001b934:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b937:	50                   	push   eax
c001b938:	e8 4f 77 ff ff       	call   c001308c <File::tell(unsigned long long*)>
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	85 c0                	test   eax,eax
c001b942:	0f 95 c0             	setne  al
c001b945:	31 d2                	xor    edx,edx
c001b947:	0f b6 c0             	movzx  eax,al
c001b94a:	f7 d8                	neg    eax
c001b94c:	83 d2 00             	adc    edx,0x0
c001b94f:	83 c4 08             	add    esp,0x8
c001b952:	f7 da                	neg    edx
c001b954:	5b                   	pop    ebx
c001b955:	c3                   	ret    
c001b956:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b95b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b960:	83 c4 08             	add    esp,0x8
c001b963:	5b                   	pop    ebx
c001b964:	c3                   	ret    

c001b965 <sysCallSize(regs*)>:
c001b965:	53                   	push   ebx
c001b966:	83 ec 18             	sub    esp,0x18
c001b969:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b96d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b970:	83 f8 02             	cmp    eax,0x2
c001b973:	76 53                	jbe    c001b9c8 <sysCallSize(regs*)+0x63>
c001b975:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b97a:	76 19                	jbe    c001b995 <sysCallSize(regs*)+0x30>
c001b97c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b97f:	31 d2                	xor    edx,edx
c001b981:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b98e:	31 c0                	xor    eax,eax
c001b990:	83 c4 18             	add    esp,0x18
c001b993:	5b                   	pop    ebx
c001b994:	c3                   	ret    
c001b995:	83 ec 0c             	sub    esp,0xc
c001b998:	50                   	push   eax
c001b999:	e8 ef 5a ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001b99e:	83 c4 0c             	add    esp,0xc
c001b9a1:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9a5:	52                   	push   edx
c001b9a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9a9:	50                   	push   eax
c001b9aa:	e8 75 78 ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	85 c0                	test   eax,eax
c001b9b4:	0f 95 c0             	setne  al
c001b9b7:	31 d2                	xor    edx,edx
c001b9b9:	0f b6 c0             	movzx  eax,al
c001b9bc:	f7 d8                	neg    eax
c001b9be:	83 d2 00             	adc    edx,0x0
c001b9c1:	83 c4 18             	add    esp,0x18
c001b9c4:	f7 da                	neg    edx
c001b9c6:	5b                   	pop    ebx
c001b9c7:	c3                   	ret    
c001b9c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9d2:	83 c4 18             	add    esp,0x18
c001b9d5:	5b                   	pop    ebx
c001b9d6:	c3                   	ret    

c001b9d7 <sysCallSizeFromFilename(regs*)>:
c001b9d7:	57                   	push   edi
c001b9d8:	56                   	push   esi
c001b9d9:	53                   	push   ebx
c001b9da:	83 ec 20             	sub    esp,0x20
c001b9dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9e1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b9e4:	83 fb 02             	cmp    ebx,0x2
c001b9e7:	0f 86 88 00 00 00    	jbe    c001ba75 <sysCallSizeFromFilename(regs*)+0x9e>
c001b9ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9f3:	76 1b                	jbe    c001ba10 <sysCallSizeFromFilename(regs*)+0x39>
c001b9f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9f8:	31 d2                	xor    edx,edx
c001b9fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba07:	83 c4 20             	add    esp,0x20
c001ba0a:	31 c0                	xor    eax,eax
c001ba0c:	5b                   	pop    ebx
c001ba0d:	5e                   	pop    esi
c001ba0e:	5f                   	pop    edi
c001ba0f:	c3                   	ret    
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	68 14 01 00 00       	push   0x114
c001ba18:	e8 40 3f ff ff       	call   c000f95d <malloc>
c001ba1d:	83 c4 0c             	add    esp,0xc
c001ba20:	89 c7                	mov    edi,eax
c001ba22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba27:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba2a:	53                   	push   ebx
c001ba2b:	57                   	push   edi
c001ba2c:	e8 e3 74 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001ba31:	83 c4 0c             	add    esp,0xc
c001ba34:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba38:	50                   	push   eax
c001ba39:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba3c:	57                   	push   edi
c001ba3d:	e8 e2 77 ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	85 ff                	test   edi,edi
c001ba47:	74 14                	je     c001ba5d <sysCallSizeFromFilename(regs*)+0x86>
c001ba49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba4d:	8b 17                	mov    edx,DWORD PTR [edi]
c001ba4f:	83 ec 0c             	sub    esp,0xc
c001ba52:	57                   	push   edi
c001ba53:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba5d:	85 c0                	test   eax,eax
c001ba5f:	0f 95 c0             	setne  al
c001ba62:	31 d2                	xor    edx,edx
c001ba64:	0f b6 c0             	movzx  eax,al
c001ba67:	f7 d8                	neg    eax
c001ba69:	83 d2 00             	adc    edx,0x0
c001ba6c:	83 c4 20             	add    esp,0x20
c001ba6f:	f7 da                	neg    edx
c001ba71:	5b                   	pop    ebx
c001ba72:	5e                   	pop    esi
c001ba73:	5f                   	pop    edi
c001ba74:	c3                   	ret    
c001ba75:	83 c4 20             	add    esp,0x20
c001ba78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7d:	5b                   	pop    ebx
c001ba7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba83:	5e                   	pop    esi
c001ba84:	5f                   	pop    edi
c001ba85:	c3                   	ret    

c001ba86 <sysCallClose(regs*)>:
c001ba86:	53                   	push   ebx
c001ba87:	83 ec 08             	sub    esp,0x8
c001ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba91:	83 f8 02             	cmp    eax,0x2
c001ba94:	76 41                	jbe    c001bad7 <sysCallClose(regs*)+0x51>
c001ba96:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001ba9c:	83 fa 01             	cmp    edx,0x1
c001ba9f:	76 2d                	jbe    c001bace <sysCallClose(regs*)+0x48>
c001baa1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa6:	77 2f                	ja     c001bad7 <sysCallClose(regs*)+0x51>
c001baa8:	83 ec 0c             	sub    esp,0xc
c001baab:	50                   	push   eax
c001baac:	e8 dc 59 ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001bab1:	89 c3                	mov    ebx,eax
c001bab3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab6:	e8 1b 75 ff ff       	call   c0012fd6 <File::close()>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	85 db                	test   ebx,ebx
c001bac0:	74 0c                	je     c001bace <sysCallClose(regs*)+0x48>
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bac7:	53                   	push   ebx
c001bac8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bacb:	83 c4 10             	add    esp,0x10
c001bace:	31 c0                	xor    eax,eax
c001bad0:	31 d2                	xor    edx,edx
c001bad2:	83 c4 08             	add    esp,0x8
c001bad5:	5b                   	pop    ebx
c001bad6:	c3                   	ret    
c001bad7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001badc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae1:	83 c4 08             	add    esp,0x8
c001bae4:	5b                   	pop    ebx
c001bae5:	c3                   	ret    

c001bae6 <sysCallOpenDir(regs*)>:
c001bae6:	56                   	push   esi
c001bae7:	53                   	push   ebx
c001bae8:	53                   	push   ebx
c001bae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001baf0:	85 f6                	test   esi,esi
c001baf2:	74 59                	je     c001bb4d <sysCallOpenDir(regs*)+0x67>
c001baf4:	83 ec 0c             	sub    esp,0xc
c001baf7:	68 14 01 00 00       	push   0x114
c001bafc:	e8 5c 3e ff ff       	call   c000f95d <malloc>
c001bb01:	83 c4 0c             	add    esp,0xc
c001bb04:	89 c6                	mov    esi,eax
c001bb06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb11:	56                   	push   esi
c001bb12:	e8 a9 78 ff ff       	call   c00133c0 <Directory::Directory(char const*, Process*)>
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	85 f6                	test   esi,esi
c001bb1c:	74 2f                	je     c001bb4d <sysCallOpenDir(regs*)+0x67>
c001bb1e:	83 ec 0c             	sub    esp,0xc
c001bb21:	56                   	push   esi
c001bb22:	e8 fd 78 ff ff       	call   c0013424 <Directory::open()>
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	85 c0                	test   eax,eax
c001bb2c:	75 1f                	jne    c001bb4d <sysCallOpenDir(regs*)+0x67>
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	56                   	push   esi
c001bb32:	e8 61 56 ff ff       	call   c0011198 <UnixFile::getFileDescriptor()>
c001bb37:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	89 02                	mov    DWORD PTR [edx],eax
c001bb3f:	c1 f8 1f             	sar    eax,0x1f
c001bb42:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb45:	31 c0                	xor    eax,eax
c001bb47:	59                   	pop    ecx
c001bb48:	31 d2                	xor    edx,edx
c001bb4a:	5b                   	pop    ebx
c001bb4b:	5e                   	pop    esi
c001bb4c:	c3                   	ret    
c001bb4d:	59                   	pop    ecx
c001bb4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb58:	5b                   	pop    ebx
c001bb59:	5e                   	pop    esi
c001bb5a:	c3                   	ret    

c001bb5b <sysCallCloseDir(regs*)>:
c001bb5b:	53                   	push   ebx
c001bb5c:	83 ec 08             	sub    esp,0x8
c001bb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb66:	8d 50 fd             	lea    edx,[eax-0x3]
c001bb69:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001bb6f:	77 2f                	ja     c001bba0 <sysCallCloseDir(regs*)+0x45>
c001bb71:	83 ec 0c             	sub    esp,0xc
c001bb74:	50                   	push   eax
c001bb75:	e8 13 59 ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001bb7a:	89 c3                	mov    ebx,eax
c001bb7c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb7f:	e8 fc 78 ff ff       	call   c0013480 <Directory::close()>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	85 db                	test   ebx,ebx
c001bb89:	74 0c                	je     c001bb97 <sysCallCloseDir(regs*)+0x3c>
c001bb8b:	83 ec 0c             	sub    esp,0xc
c001bb8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb90:	53                   	push   ebx
c001bb91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb94:	83 c4 10             	add    esp,0x10
c001bb97:	31 c0                	xor    eax,eax
c001bb99:	31 d2                	xor    edx,edx
c001bb9b:	83 c4 08             	add    esp,0x8
c001bb9e:	5b                   	pop    ebx
c001bb9f:	c3                   	ret    
c001bba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbaa:	83 c4 08             	add    esp,0x8
c001bbad:	5b                   	pop    ebx
c001bbae:	c3                   	ret    

c001bbaf <sysCallMakeDir(regs*)>:
c001bbaf:	56                   	push   esi
c001bbb0:	53                   	push   ebx
c001bbb1:	83 ec 10             	sub    esp,0x10
c001bbb4:	68 14 01 00 00       	push   0x114
c001bbb9:	e8 9f 3d ff ff       	call   c000f95d <malloc>
c001bbbe:	83 c4 0c             	add    esp,0xc
c001bbc1:	89 c3                	mov    ebx,eax
c001bbc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbc8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbcf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbd2:	53                   	push   ebx
c001bbd3:	e8 e8 77 ff ff       	call   c00133c0 <Directory::Directory(char const*, Process*)>
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	85 db                	test   ebx,ebx
c001bbdd:	74 32                	je     c001bc11 <sysCallMakeDir(regs*)+0x62>
c001bbdf:	83 ec 0c             	sub    esp,0xc
c001bbe2:	53                   	push   ebx
c001bbe3:	e8 1c 7a ff ff       	call   c0013604 <Directory::create()>
c001bbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbeb:	89 c6                	mov    esi,eax
c001bbed:	e8 8e 78 ff ff       	call   c0013480 <Directory::close()>
c001bbf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	31 c0                	xor    eax,eax
c001bbff:	59                   	pop    ecx
c001bc00:	85 f6                	test   esi,esi
c001bc02:	5b                   	pop    ebx
c001bc03:	0f 95 c0             	setne  al
c001bc06:	5e                   	pop    esi
c001bc07:	31 d2                	xor    edx,edx
c001bc09:	f7 d8                	neg    eax
c001bc0b:	83 d2 00             	adc    edx,0x0
c001bc0e:	f7 da                	neg    edx
c001bc10:	c3                   	ret    
c001bc11:	59                   	pop    ecx
c001bc12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc17:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1c:	5b                   	pop    ebx
c001bc1d:	5e                   	pop    esi
c001bc1e:	c3                   	ret    

c001bc1f <sysCallWait(regs*)>:
c001bc1f:	83 ec 10             	sub    esp,0x10
c001bc22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc26:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc29:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc2c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc2f:	e8 b4 24 00 00       	call   c001e0e8 <waitTask(int, int*, int)>
c001bc34:	83 c4 1c             	add    esp,0x1c
c001bc37:	99                   	cdq    
c001bc38:	c3                   	ret    

c001bc39 <sysCallNotImpl(regs*)>:
c001bc39:	83 ec 18             	sub    esp,0x18
c001bc3c:	68 d9 c4 02 c0       	push   0xc002c4d9
c001bc41:	e8 0d e7 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001bc46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc50:	83 c4 1c             	add    esp,0x1c
c001bc53:	c3                   	ret    

c001bc54 <sysPanic(regs*)>:
c001bc54:	83 ec 18             	sub    esp,0x18
c001bc57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc5b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc5e:	e8 f0 e6 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001bc63:	b8 01 00 00 00       	mov    eax,0x1
c001bc68:	31 d2                	xor    edx,edx
c001bc6a:	83 c4 1c             	add    esp,0x1c
c001bc6d:	c3                   	ret    

c001bc6e <sysCallRmdir(regs*)>:
c001bc6e:	56                   	push   esi
c001bc6f:	53                   	push   ebx
c001bc70:	83 ec 20             	sub    esp,0x20
c001bc73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc77:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc7a:	68 14 01 00 00       	push   0x114
c001bc7f:	e8 d9 3c ff ff       	call   c000f95d <malloc>
c001bc84:	83 c4 0c             	add    esp,0xc
c001bc87:	89 c3                	mov    ebx,eax
c001bc89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc8e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc91:	56                   	push   esi
c001bc92:	53                   	push   ebx
c001bc93:	e8 7c 72 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001bc98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc9b:	e8 50 74 ff ff       	call   c00130f0 <File::unlink()>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	85 db                	test   ebx,ebx
c001bca5:	74 14                	je     c001bcbb <sysCallRmdir(regs*)+0x4d>
c001bca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcad:	83 ec 0c             	sub    esp,0xc
c001bcb0:	53                   	push   ebx
c001bcb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcb4:	83 c4 10             	add    esp,0x10
c001bcb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcbb:	85 c0                	test   eax,eax
c001bcbd:	0f 95 c0             	setne  al
c001bcc0:	31 d2                	xor    edx,edx
c001bcc2:	0f b6 c0             	movzx  eax,al
c001bcc5:	f7 d8                	neg    eax
c001bcc7:	83 d2 00             	adc    edx,0x0
c001bcca:	83 c4 14             	add    esp,0x14
c001bccd:	f7 da                	neg    edx
c001bccf:	5b                   	pop    ebx
c001bcd0:	5e                   	pop    esi
c001bcd1:	c3                   	ret    

c001bcd2 <sysCallUnlink(regs*)>:
c001bcd2:	56                   	push   esi
c001bcd3:	53                   	push   ebx
c001bcd4:	83 ec 20             	sub    esp,0x20
c001bcd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcdb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcde:	68 14 01 00 00       	push   0x114
c001bce3:	e8 75 3c ff ff       	call   c000f95d <malloc>
c001bce8:	83 c4 0c             	add    esp,0xc
c001bceb:	89 c3                	mov    ebx,eax
c001bced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcf2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcf5:	56                   	push   esi
c001bcf6:	53                   	push   ebx
c001bcf7:	e8 18 72 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001bcfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcff:	e8 ec 73 ff ff       	call   c00130f0 <File::unlink()>
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	85 db                	test   ebx,ebx
c001bd09:	74 14                	je     c001bd1f <sysCallUnlink(regs*)+0x4d>
c001bd0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd11:	83 ec 0c             	sub    esp,0xc
c001bd14:	53                   	push   ebx
c001bd15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd1f:	85 c0                	test   eax,eax
c001bd21:	0f 95 c0             	setne  al
c001bd24:	31 d2                	xor    edx,edx
c001bd26:	0f b6 c0             	movzx  eax,al
c001bd29:	f7 d8                	neg    eax
c001bd2b:	83 d2 00             	adc    edx,0x0
c001bd2e:	83 c4 14             	add    esp,0x14
c001bd31:	f7 da                	neg    edx
c001bd33:	5b                   	pop    ebx
c001bd34:	5e                   	pop    esi
c001bd35:	c3                   	ret    

c001bd36 <sysCallGetArgv(regs*)>:
c001bd36:	83 ec 0c             	sub    esp,0xc
c001bd39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd3d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd40:	85 c0                	test   eax,eax
c001bd42:	78 2b                	js     c001bd6f <sysCallGetArgv(regs*)+0x39>
c001bd44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd4a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd4d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bd53:	7d 1a                	jge    c001bd6f <sysCallGetArgv(regs*)+0x39>
c001bd55:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bd5c:	85 c0                	test   eax,eax
c001bd5e:	74 17                	je     c001bd77 <sysCallGetArgv(regs*)+0x41>
c001bd60:	83 ec 08             	sub    esp,0x8
c001bd63:	50                   	push   eax
c001bd64:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd67:	e8 a0 4a fe ff       	call   c000080c <strcpy>
c001bd6c:	83 c4 10             	add    esp,0x10
c001bd6f:	31 c0                	xor    eax,eax
c001bd71:	31 d2                	xor    edx,edx
c001bd73:	83 c4 0c             	add    esp,0xc
c001bd76:	c3                   	ret    
c001bd77:	b8 01 00 00 00       	mov    eax,0x1
c001bd7c:	31 d2                	xor    edx,edx
c001bd7e:	83 c4 0c             	add    esp,0xc
c001bd81:	c3                   	ret    

c001bd82 <sysCallTTYName(regs*)>:
c001bd82:	56                   	push   esi
c001bd83:	53                   	push   ebx
c001bd84:	53                   	push   ebx
c001bd85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd89:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd8c:	85 c0                	test   eax,eax
c001bd8e:	74 5f                	je     c001bdef <sysCallTTYName(regs*)+0x6d>
c001bd90:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bd93:	83 f8 02             	cmp    eax,0x2
c001bd96:	77 3e                	ja     c001bdd6 <sysCallTTYName(regs*)+0x54>
c001bd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bda0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bda6:	85 db                	test   ebx,ebx
c001bda8:	74 45                	je     c001bdef <sysCallTTYName(regs*)+0x6d>
c001bdaa:	83 ec 0c             	sub    esp,0xc
c001bdad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdaf:	53                   	push   ebx
c001bdb0:	ff 10                	call   DWORD PTR [eax]
c001bdb2:	83 c4 10             	add    esp,0x10
c001bdb5:	84 c0                	test   al,al
c001bdb7:	74 41                	je     c001bdfa <sysCallTTYName(regs*)+0x78>
c001bdb9:	83 ec 08             	sub    esp,0x8
c001bdbc:	81 c3 82 00 00 00    	add    ebx,0x82
c001bdc2:	53                   	push   ebx
c001bdc3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bdc6:	e8 41 4a fe ff       	call   c000080c <strcpy>
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	31 c0                	xor    eax,eax
c001bdd0:	59                   	pop    ecx
c001bdd1:	31 d2                	xor    edx,edx
c001bdd3:	5b                   	pop    ebx
c001bdd4:	5e                   	pop    esi
c001bdd5:	c3                   	ret    
c001bdd6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bddb:	74 bb                	je     c001bd98 <sysCallTTYName(regs*)+0x16>
c001bddd:	83 ec 0c             	sub    esp,0xc
c001bde0:	50                   	push   eax
c001bde1:	e8 a7 56 ff ff       	call   c001148d <getFromFileDescriptor(int)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	89 c3                	mov    ebx,eax
c001bdeb:	85 db                	test   ebx,ebx
c001bded:	75 bb                	jne    c001bdaa <sysCallTTYName(regs*)+0x28>
c001bdef:	59                   	pop    ecx
c001bdf0:	b8 01 00 00 00       	mov    eax,0x1
c001bdf5:	31 d2                	xor    edx,edx
c001bdf7:	5b                   	pop    ebx
c001bdf8:	5e                   	pop    esi
c001bdf9:	c3                   	ret    
c001bdfa:	59                   	pop    ecx
c001bdfb:	b8 02 00 00 00       	mov    eax,0x2
c001be00:	31 d2                	xor    edx,edx
c001be02:	5b                   	pop    ebx
c001be03:	5e                   	pop    esi
c001be04:	c3                   	ret    

c001be05 <sysCallUSleep(regs*)>:
c001be05:	83 ec 14             	sub    esp,0x14
c001be08:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be11:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be18:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be1b:	01 ca                	add    edx,ecx
c001be1d:	52                   	push   edx
c001be1e:	50                   	push   eax
c001be1f:	e8 9b 23 00 00       	call   c001e1bf <nanoSleep(unsigned long long)>
c001be24:	31 c0                	xor    eax,eax
c001be26:	31 d2                	xor    edx,edx
c001be28:	83 c4 1c             	add    esp,0x1c
c001be2b:	c3                   	ret    

c001be2c <sysCallSpawn(regs*)>:
c001be2c:	56                   	push   esi
c001be2d:	53                   	push   ebx
c001be2e:	50                   	push   eax
c001be2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be33:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be36:	85 c0                	test   eax,eax
c001be38:	75 08                	jne    c001be42 <sysCallSpawn(regs*)+0x16>
c001be3a:	59                   	pop    ecx
c001be3b:	31 c0                	xor    eax,eax
c001be3d:	31 d2                	xor    edx,edx
c001be3f:	5b                   	pop    ebx
c001be40:	5e                   	pop    esi
c001be41:	c3                   	ret    
c001be42:	83 ec 0c             	sub    esp,0xc
c001be45:	68 3f 07 00 00       	push   0x73f
c001be4a:	e8 0e 3b ff ff       	call   c000f95d <malloc>
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	89 c6                	mov    esi,eax
c001be54:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be5a:	85 c0                	test   eax,eax
c001be5c:	75 32                	jne    c001be90 <sysCallSpawn(regs*)+0x64>
c001be5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be66:	52                   	push   edx
c001be67:	50                   	push   eax
c001be68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be6b:	56                   	push   esi
c001be6c:	e8 73 1a 00 00       	call   c001d8e4 <Process::Process(char const*, Process*, char**)>
c001be71:	83 c4 10             	add    esp,0x10
c001be74:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001be7b:	75 bd                	jne    c001be3a <sysCallSpawn(regs*)+0xe>
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	56                   	push   esi
c001be81:	e8 40 1f 00 00       	call   c001ddc6 <Process::createUserThread()>
c001be86:	8b 06                	mov    eax,DWORD PTR [esi]
c001be88:	83 c4 10             	add    esp,0x10
c001be8b:	99                   	cdq    
c001be8c:	59                   	pop    ecx
c001be8d:	5b                   	pop    ebx
c001be8e:	5e                   	pop    esi
c001be8f:	c3                   	ret    
c001be90:	31 c0                	xor    eax,eax
c001be92:	eb d2                	jmp    c001be66 <sysCallSpawn(regs*)+0x3a>

c001be94 <sysCallGetEnv(regs*)>:
c001be94:	57                   	push   edi
c001be95:	56                   	push   esi
c001be96:	53                   	push   ebx
c001be97:	83 ec 1c             	sub    esp,0x1c
c001be9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bea6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bea9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beac:	e8 ee e3 ff ff       	call   c001a29f <Krnl::getProcessTotalEnvCount(Process*)>
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	39 c7                	cmp    edi,eax
c001beb6:	7c 14                	jl     c001becc <sysCallGetEnv(regs*)+0x38>
c001beb8:	85 f6                	test   esi,esi
c001beba:	75 0b                	jne    c001bec7 <sysCallGetEnv(regs*)+0x33>
c001bebc:	83 c4 10             	add    esp,0x10
c001bebf:	31 c0                	xor    eax,eax
c001bec1:	5b                   	pop    ebx
c001bec2:	31 d2                	xor    edx,edx
c001bec4:	5e                   	pop    esi
c001bec5:	5f                   	pop    edi
c001bec6:	c3                   	ret    
c001bec7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001beca:	eb f0                	jmp    c001bebc <sysCallGetEnv(regs*)+0x28>
c001becc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bed0:	52                   	push   edx
c001bed1:	57                   	push   edi
c001bed2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bed8:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bedb:	50                   	push   eax
c001bedc:	e8 de e3 ff ff       	call   c001a2bf <Krnl::getProcessEnvPair(Process*, int)>
c001bee1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bee8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001beec:	83 c4 0c             	add    esp,0xc
c001beef:	85 c9                	test   ecx,ecx
c001bef1:	75 23                	jne    c001bf16 <sysCallGetEnv(regs*)+0x82>
c001bef3:	83 ec 0c             	sub    esp,0xc
c001bef6:	50                   	push   eax
c001bef7:	e8 70 48 fe ff       	call   c000076c <strlen>
c001befc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001beff:	89 c3                	mov    ebx,eax
c001bf01:	e8 66 48 fe ff       	call   c000076c <strlen>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	31 d2                	xor    edx,edx
c001bf12:	5b                   	pop    ebx
c001bf13:	5e                   	pop    esi
c001bf14:	5f                   	pop    edi
c001bf15:	c3                   	ret    
c001bf16:	83 ec 08             	sub    esp,0x8
c001bf19:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf1c:	50                   	push   eax
c001bf1d:	56                   	push   esi
c001bf1e:	e8 e9 48 fe ff       	call   c000080c <strcpy>
c001bf23:	58                   	pop    eax
c001bf24:	5a                   	pop    edx
c001bf25:	68 f3 c4 02 c0       	push   0xc002c4f3
c001bf2a:	56                   	push   esi
c001bf2b:	e8 1c 4a fe ff       	call   c000094c <strcat>
c001bf30:	59                   	pop    ecx
c001bf31:	5b                   	pop    ebx
c001bf32:	57                   	push   edi
c001bf33:	56                   	push   esi
c001bf34:	e8 13 4a fe ff       	call   c000094c <strcat>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	e9 7b ff ff ff       	jmp    c001bebc <sysCallGetEnv(regs*)+0x28>

c001bf41 <sysAppSettings(regs*)>:
c001bf41:	57                   	push   edi
c001bf42:	56                   	push   esi
c001bf43:	56                   	push   esi
c001bf44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf48:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf4b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bf51:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bf56:	66 3d c0 09          	cmp    ax,0x9c0
c001bf5a:	75 2e                	jne    c001bf8a <sysAppSettings(regs*)+0x49>
c001bf5c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bf62:	83 e0 1f             	and    eax,0x1f
c001bf65:	3c 01                	cmp    al,0x1
c001bf67:	74 2c                	je     c001bf95 <sysAppSettings(regs*)+0x54>
c001bf69:	3c 07                	cmp    al,0x7
c001bf6b:	0f 84 b3 00 00 00    	je     c001c024 <sysAppSettings(regs*)+0xe3>
c001bf71:	84 c0                	test   al,al
c001bf73:	0f 84 d2 00 00 00    	je     c001c04b <sysAppSettings(regs*)+0x10a>
c001bf79:	3c 08                	cmp    al,0x8
c001bf7b:	74 63                	je     c001bfe0 <sysAppSettings(regs*)+0x9f>
c001bf7d:	59                   	pop    ecx
c001bf7e:	0f b6 c0             	movzx  eax,al
c001bf81:	5e                   	pop    esi
c001bf82:	05 e8 03 00 00       	add    eax,0x3e8
c001bf87:	5f                   	pop    edi
c001bf88:	99                   	cdq    
c001bf89:	c3                   	ret    
c001bf8a:	b8 01 00 00 00       	mov    eax,0x1
c001bf8f:	59                   	pop    ecx
c001bf90:	31 d2                	xor    edx,edx
c001bf92:	5e                   	pop    esi
c001bf93:	5f                   	pop    edi
c001bf94:	c3                   	ret    
c001bf95:	50                   	push   eax
c001bf96:	68 00 01 00 00       	push   0x100
c001bf9b:	6a 00                	push   0x0
c001bf9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfa5:	83 c0 0c             	add    eax,0xc
c001bfa8:	50                   	push   eax
c001bfa9:	e8 a2 47 fe ff       	call   c0000750 <memset>
c001bfae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb3:	b9 ff 00 00 00       	mov    ecx,0xff
c001bfb8:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bfbb:	83 c7 0c             	add    edi,0xc
c001bfbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc5:	5a                   	pop    edx
c001bfc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfc9:	59                   	pop    ecx
c001bfca:	8d 50 0c             	lea    edx,[eax+0xc]
c001bfcd:	52                   	push   edx
c001bfce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bfd4:	e8 dd 45 ff ff       	call   c00105b6 <VgaText::setTitle(char*)>
c001bfd9:	83 c4 10             	add    esp,0x10
c001bfdc:	31 c0                	xor    eax,eax
c001bfde:	eb af                	jmp    c001bf8f <sysAppSettings(regs*)+0x4e>
c001bfe0:	83 ec 08             	sub    esp,0x8
c001bfe3:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bfe9:	83 e0 0f             	and    eax,0xf
c001bfec:	50                   	push   eax
c001bfed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bffb:	e8 a6 45 ff ff       	call   c00105a6 <VgaText::setTitleColour(VgaColour)>
c001c000:	5f                   	pop    edi
c001c001:	58                   	pop    eax
c001c002:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c008:	c1 e8 04             	shr    eax,0x4
c001c00b:	83 e0 0f             	and    eax,0xf
c001c00e:	50                   	push   eax
c001c00f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c014:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c01d:	e8 74 45 ff ff       	call   c0010596 <VgaText::setTitleTextColour(VgaColour)>
c001c022:	eb b5                	jmp    c001bfd9 <sysAppSettings(regs*)+0x98>
c001c024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c029:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c02c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c032:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c038:	c0 e8 06             	shr    al,0x6
c001c03b:	83 e0 01             	and    eax,0x1
c001c03e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c044:	31 c0                	xor    eax,eax
c001c046:	e9 44 ff ff ff       	jmp    c001bf8f <sysAppSettings(regs*)+0x4e>
c001c04b:	b8 02 00 00 00       	mov    eax,0x2
c001c050:	e9 3a ff ff ff       	jmp    c001bf8f <sysAppSettings(regs*)+0x4e>

c001c055 <sysSetFatAttrib(regs*)>:
c001c055:	57                   	push   edi
c001c056:	56                   	push   esi
c001c057:	53                   	push   ebx
c001c058:	83 ec 1c             	sub    esp,0x1c
c001c05b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c05f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c062:	68 14 01 00 00       	push   0x114
c001c067:	e8 f1 38 ff ff       	call   c000f95d <malloc>
c001c06c:	83 c4 0c             	add    esp,0xc
c001c06f:	89 c3                	mov    ebx,eax
c001c071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c076:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c079:	57                   	push   edi
c001c07a:	53                   	push   ebx
c001c07b:	e8 94 6e ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001c080:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c083:	83 c4 0c             	add    esp,0xc
c001c086:	0f b6 d4             	movzx  edx,ah
c001c089:	0f b6 c0             	movzx  eax,al
c001c08c:	52                   	push   edx
c001c08d:	50                   	push   eax
c001c08e:	53                   	push   ebx
c001c08f:	e8 f6 70 ff ff       	call   c001318a <File::chfatattr(unsigned char, unsigned char)>
c001c094:	83 c4 10             	add    esp,0x10
c001c097:	85 db                	test   ebx,ebx
c001c099:	74 14                	je     c001c0af <sysSetFatAttrib(regs*)+0x5a>
c001c09b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c09f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c0a1:	83 ec 0c             	sub    esp,0xc
c001c0a4:	53                   	push   ebx
c001c0a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0a8:	83 c4 10             	add    esp,0x10
c001c0ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0af:	85 c0                	test   eax,eax
c001c0b1:	0f 95 c0             	setne  al
c001c0b4:	31 d2                	xor    edx,edx
c001c0b6:	0f b6 c0             	movzx  eax,al
c001c0b9:	f7 d8                	neg    eax
c001c0bb:	83 d2 00             	adc    edx,0x0
c001c0be:	83 c4 10             	add    esp,0x10
c001c0c1:	f7 da                	neg    edx
c001c0c3:	5b                   	pop    ebx
c001c0c4:	5e                   	pop    esi
c001c0c5:	5f                   	pop    edi
c001c0c6:	c3                   	ret    

c001c0c7 <sysPipe(regs*)>:
c001c0c7:	57                   	push   edi
c001c0c8:	56                   	push   esi
c001c0c9:	53                   	push   ebx
c001c0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ce:	83 ec 0c             	sub    esp,0xc
c001c0d1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c0d4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c0d7:	6a 20                	push   0x20
c001c0d9:	e8 7f 38 ff ff       	call   c000f95d <malloc>
c001c0de:	89 c3                	mov    ebx,eax
c001c0e0:	58                   	pop    eax
c001c0e1:	5a                   	pop    edx
c001c0e2:	68 00 50 00 00       	push   0x5000
c001c0e7:	53                   	push   ebx
c001c0e8:	e8 41 42 ff ff       	call   c001032e <Pipe::Pipe(int)>
c001c0ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0f0:	e8 a3 50 ff ff       	call   c0011198 <UnixFile::getFileDescriptor()>
c001c0f5:	89 07                	mov    DWORD PTR [edi],eax
c001c0f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0fa:	e8 99 50 ff ff       	call   c0011198 <UnixFile::getFileDescriptor()>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	89 06                	mov    DWORD PTR [esi],eax
c001c104:	31 d2                	xor    edx,edx
c001c106:	5b                   	pop    ebx
c001c107:	31 c0                	xor    eax,eax
c001c109:	5e                   	pop    esi
c001c10a:	5f                   	pop    edi
c001c10b:	c3                   	ret    

c001c10c <sysGetUnixTime(regs*)>:
c001c10c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001c111:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c11b:	e9 e6 77 ff ff       	jmp    c0013906 <Clock::timeInSecondsLocal()>

c001c120 <string_ends_with(char const*, char const*)>:
c001c120:	57                   	push   edi
c001c121:	56                   	push   esi
c001c122:	53                   	push   ebx
c001c123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c127:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c12b:	83 ec 0c             	sub    esp,0xc
c001c12e:	53                   	push   ebx
c001c12f:	e8 38 46 fe ff       	call   c000076c <strlen>
c001c134:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c137:	89 c6                	mov    esi,eax
c001c139:	e8 2e 46 fe ff       	call   c000076c <strlen>
c001c13e:	83 c4 10             	add    esp,0x10
c001c141:	39 c6                	cmp    esi,eax
c001c143:	7d 06                	jge    c001c14b <string_ends_with(char const*, char const*)+0x2b>
c001c145:	5b                   	pop    ebx
c001c146:	31 c0                	xor    eax,eax
c001c148:	5e                   	pop    esi
c001c149:	5f                   	pop    edi
c001c14a:	c3                   	ret    
c001c14b:	83 ec 08             	sub    esp,0x8
c001c14e:	29 c6                	sub    esi,eax
c001c150:	57                   	push   edi
c001c151:	01 f3                	add    ebx,esi
c001c153:	53                   	push   ebx
c001c154:	e8 3f 47 fe ff       	call   c0000898 <strcmp>
c001c159:	83 c4 10             	add    esp,0x10
c001c15c:	85 c0                	test   eax,eax
c001c15e:	5b                   	pop    ebx
c001c15f:	0f 94 c0             	sete   al
c001c162:	5e                   	pop    esi
c001c163:	0f b6 c0             	movzx  eax,al
c001c166:	5f                   	pop    edi
c001c167:	c3                   	ret    

c001c168 <sysCallOpen(regs*)>:
c001c168:	56                   	push   esi
c001c169:	53                   	push   ebx
c001c16a:	81 ec 04 01 00 00    	sub    esp,0x104
c001c170:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c177:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c17a:	85 c9                	test   ecx,ecx
c001c17c:	0f 84 ad 01 00 00    	je     c001c32f <sysCallOpen(regs*)+0x1c7>
c001c182:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c185:	85 c0                	test   eax,eax
c001c187:	0f 84 a2 01 00 00    	je     c001c32f <sysCallOpen(regs*)+0x1c7>
c001c18d:	52                   	push   edx
c001c18e:	68 f5 c4 02 c0       	push   0xc002c4f5
c001c193:	50                   	push   eax
c001c194:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c198:	56                   	push   esi
c001c199:	e8 cc 6b ff ff       	call   c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)>
c001c19e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1a1:	e8 c6 45 fe ff       	call   c000076c <strlen>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	48                   	dec    eax
c001c1aa:	74 1d                	je     c001c1c9 <sysCallOpen(regs*)+0x61>
c001c1ac:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c1af:	eb 0f                	jmp    c001c1c0 <sysCallOpen(regs*)+0x58>
c001c1b1:	80 fa 3a             	cmp    dl,0x3a
c001c1b4:	74 0f                	je     c001c1c5 <sysCallOpen(regs*)+0x5d>
c001c1b6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c1ba:	48                   	dec    eax
c001c1bb:	74 0c                	je     c001c1c9 <sysCallOpen(regs*)+0x61>
c001c1bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c1c0:	80 fa 2e             	cmp    dl,0x2e
c001c1c3:	75 ec                	jne    c001c1b1 <sysCallOpen(regs*)+0x49>
c001c1c5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c1c9:	83 ec 08             	sub    esp,0x8
c001c1cc:	68 f9 c4 02 c0       	push   0xc002c4f9
c001c1d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1d4:	e8 47 ff ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c1d9:	83 c4 10             	add    esp,0x10
c001c1dc:	85 c0                	test   eax,eax
c001c1de:	74 1d                	je     c001c1fd <sysCallOpen(regs*)+0x95>
c001c1e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1e3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c1e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1f0:	81 c4 04 01 00 00    	add    esp,0x104
c001c1f6:	31 c0                	xor    eax,eax
c001c1f8:	31 d2                	xor    edx,edx
c001c1fa:	5b                   	pop    ebx
c001c1fb:	5e                   	pop    esi
c001c1fc:	c3                   	ret    
c001c1fd:	83 ec 08             	sub    esp,0x8
c001c200:	68 fe c4 02 c0       	push   0xc002c4fe
c001c205:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c208:	e8 13 ff ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c20d:	83 c4 10             	add    esp,0x10
c001c210:	85 c0                	test   eax,eax
c001c212:	75 cc                	jne    c001c1e0 <sysCallOpen(regs*)+0x78>
c001c214:	83 ec 08             	sub    esp,0x8
c001c217:	68 fa c4 02 c0       	push   0xc002c4fa
c001c21c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c21f:	e8 74 46 fe ff       	call   c0000898 <strcmp>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	85 c0                	test   eax,eax
c001c229:	74 b5                	je     c001c1e0 <sysCallOpen(regs*)+0x78>
c001c22b:	83 ec 08             	sub    esp,0x8
c001c22e:	68 f9 c4 02 c0       	push   0xc002c4f9
c001c233:	56                   	push   esi
c001c234:	e8 e7 fe ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c239:	83 c4 10             	add    esp,0x10
c001c23c:	85 c0                	test   eax,eax
c001c23e:	75 a0                	jne    c001c1e0 <sysCallOpen(regs*)+0x78>
c001c240:	83 ec 08             	sub    esp,0x8
c001c243:	68 03 c5 02 c0       	push   0xc002c503
c001c248:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c24b:	e8 d0 fe ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c250:	83 c4 10             	add    esp,0x10
c001c253:	85 c0                	test   eax,eax
c001c255:	0f 85 e7 00 00 00    	jne    c001c342 <sysCallOpen(regs*)+0x1da>
c001c25b:	83 ec 08             	sub    esp,0x8
c001c25e:	68 08 c5 02 c0       	push   0xc002c508
c001c263:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c266:	e8 b5 fe ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c26b:	83 c4 10             	add    esp,0x10
c001c26e:	85 c0                	test   eax,eax
c001c270:	0f 85 cc 00 00 00    	jne    c001c342 <sysCallOpen(regs*)+0x1da>
c001c276:	83 ec 08             	sub    esp,0x8
c001c279:	68 04 c5 02 c0       	push   0xc002c504
c001c27e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c281:	e8 12 46 fe ff       	call   c0000898 <strcmp>
c001c286:	83 c4 10             	add    esp,0x10
c001c289:	85 c0                	test   eax,eax
c001c28b:	0f 84 b1 00 00 00    	je     c001c342 <sysCallOpen(regs*)+0x1da>
c001c291:	83 ec 08             	sub    esp,0x8
c001c294:	68 03 c5 02 c0       	push   0xc002c503
c001c299:	56                   	push   esi
c001c29a:	e8 81 fe ff ff       	call   c001c120 <string_ends_with(char const*, char const*)>
c001c29f:	83 c4 10             	add    esp,0x10
c001c2a2:	85 c0                	test   eax,eax
c001c2a4:	0f 85 98 00 00 00    	jne    c001c342 <sysCallOpen(regs*)+0x1da>
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	68 14 01 00 00       	push   0x114
c001c2b2:	e8 a6 36 ff ff       	call   c000f95d <malloc>
c001c2b7:	83 c4 0c             	add    esp,0xc
c001c2ba:	89 c6                	mov    esi,eax
c001c2bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2c7:	56                   	push   esi
c001c2c8:	e8 47 6c ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001c2cd:	83 c4 10             	add    esp,0x10
c001c2d0:	85 f6                	test   esi,esi
c001c2d2:	74 5b                	je     c001c32f <sysCallOpen(regs*)+0x1c7>
c001c2d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c2d7:	0f b6 c2             	movzx  eax,dl
c001c2da:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c2dd:	89 d0                	mov    eax,edx
c001c2df:	83 e0 01             	and    eax,0x1
c001c2e2:	f6 c2 02             	test   dl,0x2
c001c2e5:	74 03                	je     c001c2ea <sysCallOpen(regs*)+0x182>
c001c2e7:	83 c8 02             	or     eax,0x2
c001c2ea:	f6 c2 04             	test   dl,0x4
c001c2ed:	74 03                	je     c001c2f2 <sysCallOpen(regs*)+0x18a>
c001c2ef:	83 c8 04             	or     eax,0x4
c001c2f2:	f6 c2 08             	test   dl,0x8
c001c2f5:	74 03                	je     c001c2fa <sysCallOpen(regs*)+0x192>
c001c2f7:	83 c8 0a             	or     eax,0xa
c001c2fa:	83 e2 10             	and    edx,0x10
c001c2fd:	74 03                	je     c001c302 <sysCallOpen(regs*)+0x19a>
c001c2ff:	83 c8 12             	or     eax,0x12
c001c302:	83 ec 08             	sub    esp,0x8
c001c305:	50                   	push   eax
c001c306:	56                   	push   esi
c001c307:	e8 6c 6c ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	85 c0                	test   eax,eax
c001c311:	75 1c                	jne    c001c32f <sysCallOpen(regs*)+0x1c7>
c001c313:	83 ec 0c             	sub    esp,0xc
c001c316:	56                   	push   esi
c001c317:	e8 7c 4e ff ff       	call   c0011198 <UnixFile::getFileDescriptor()>
c001c31c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	89 02                	mov    DWORD PTR [edx],eax
c001c324:	c1 f8 1f             	sar    eax,0x1f
c001c327:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c32a:	e9 c1 fe ff ff       	jmp    c001c1f0 <sysCallOpen(regs*)+0x88>
c001c32f:	81 c4 04 01 00 00    	add    esp,0x104
c001c335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c33a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c33f:	5b                   	pop    ebx
c001c340:	5e                   	pop    esi
c001c341:	c3                   	ret    
c001c342:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c345:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c34b:	e9 99 fe ff ff       	jmp    c001c1e9 <sysCallOpen(regs*)+0x81>

c001c350 <Sys::loadSyscalls()>:
c001c350:	c7 05 00 f1 02 c0 bd b5 01 c0 	mov    DWORD PTR ds:0xc002f100,0xc001b5bd
c001c35a:	c7 05 04 f1 02 c0 b2 b1 01 c0 	mov    DWORD PTR ds:0xc002f104,0xc001b1b2
c001c364:	c7 05 08 f1 02 c0 a3 b3 01 c0 	mov    DWORD PTR ds:0xc002f108,0xc001b3a3
c001c36e:	c7 05 0c f1 02 c0 f3 b4 01 c0 	mov    DWORD PTR ds:0xc002f10c,0xc001b4f3
c001c378:	c7 05 10 f1 02 c0 3b b3 01 c0 	mov    DWORD PTR ds:0xc002f110,0xc001b33b
c001c382:	c7 05 14 f1 02 c0 e9 b1 01 c0 	mov    DWORD PTR ds:0xc002f114,0xc001b1e9
c001c38c:	c7 05 18 f1 02 c0 ca b1 01 c0 	mov    DWORD PTR ds:0xc002f118,0xc001b1ca
c001c396:	c7 05 1c f1 02 c0 f8 b3 01 c0 	mov    DWORD PTR ds:0xc002f11c,0xc001b3f8
c001c3a0:	c7 05 24 f1 02 c0 86 ba 01 c0 	mov    DWORD PTR ds:0xc002f124,0xc001ba86
c001c3aa:	c7 05 20 f1 02 c0 68 c1 01 c0 	mov    DWORD PTR ds:0xc002f120,0xc001c168
c001c3b4:	c7 05 28 f1 02 c0 e6 ba 01 c0 	mov    DWORD PTR ds:0xc002f128,0xc001bae6
c001c3be:	c7 05 2c f1 02 c0 c9 b7 01 c0 	mov    DWORD PTR ds:0xc002f12c,0xc001b7c9
c001c3c8:	c7 05 30 f1 02 c0 03 b6 01 c0 	mov    DWORD PTR ds:0xc002f130,0xc001b603
c001c3d2:	c7 05 34 f1 02 c0 08 b6 01 c0 	mov    DWORD PTR ds:0xc002f134,0xc001b608
c001c3dc:	c7 05 38 f1 02 c0 af bb 01 c0 	mov    DWORD PTR ds:0xc002f138,0xc001bbaf
c001c3e6:	c7 05 3c f1 02 c0 5b bb 01 c0 	mov    DWORD PTR ds:0xc002f13c,0xc001bb5b
c001c3f0:	c7 05 40 f1 02 c0 a2 b8 01 c0 	mov    DWORD PTR ds:0xc002f140,0xc001b8a2
c001c3fa:	c7 05 44 f1 02 c0 f9 b8 01 c0 	mov    DWORD PTR ds:0xc002f144,0xc001b8f9
c001c404:	c7 05 48 f1 02 c0 65 b9 01 c0 	mov    DWORD PTR ds:0xc002f148,0xc001b965
c001c40e:	c7 05 4c f1 02 c0 0d b6 01 c0 	mov    DWORD PTR ds:0xc002f14c,0xc001b60d
c001c418:	c7 05 50 f1 02 c0 1f bc 01 c0 	mov    DWORD PTR ds:0xc002f150,0xc001bc1f
c001c422:	c7 05 54 f1 02 c0 39 bc 01 c0 	mov    DWORD PTR ds:0xc002f154,0xc001bc39
c001c42c:	c7 05 58 f1 02 c0 39 bc 01 c0 	mov    DWORD PTR ds:0xc002f158,0xc001bc39
c001c436:	c7 05 5c f1 02 c0 6e bc 01 c0 	mov    DWORD PTR ds:0xc002f15c,0xc001bc6e
c001c440:	c7 05 60 f1 02 c0 d2 bc 01 c0 	mov    DWORD PTR ds:0xc002f160,0xc001bcd2
c001c44a:	c7 05 64 f1 02 c0 17 b6 01 c0 	mov    DWORD PTR ds:0xc002f164,0xc001b617
c001c454:	c7 05 68 f1 02 c0 36 bd 01 c0 	mov    DWORD PTR ds:0xc002f168,0xc001bd36
c001c45e:	c7 05 6c f1 02 c0 86 b7 01 c0 	mov    DWORD PTR ds:0xc002f16c,0xc001b786
c001c468:	c7 05 70 f1 02 c0 82 bd 01 c0 	mov    DWORD PTR ds:0xc002f170,0xc001bd82
c001c472:	c7 05 74 f1 02 c0 48 b8 01 c0 	mov    DWORD PTR ds:0xc002f174,0xc001b848
c001c47c:	c7 05 78 f1 02 c0 05 be 01 c0 	mov    DWORD PTR ds:0xc002f178,0xc001be05
c001c486:	c7 05 7c f1 02 c0 d7 b9 01 c0 	mov    DWORD PTR ds:0xc002f17c,0xc001b9d7
c001c490:	c7 05 80 f1 02 c0 2c be 01 c0 	mov    DWORD PTR ds:0xc002f180,0xc001be2c
c001c49a:	c7 05 84 f1 02 c0 94 be 01 c0 	mov    DWORD PTR ds:0xc002f184,0xc001be94
c001c4a4:	c7 05 88 f1 02 c0 41 bf 01 c0 	mov    DWORD PTR ds:0xc002f188,0xc001bf41
c001c4ae:	c7 05 8c f1 02 c0 27 b6 01 c0 	mov    DWORD PTR ds:0xc002f18c,0xc001b627
c001c4b8:	c7 05 90 f1 02 c0 91 b6 01 c0 	mov    DWORD PTR ds:0xc002f190,0xc001b691
c001c4c2:	c7 05 94 f1 02 c0 d7 b6 01 c0 	mov    DWORD PTR ds:0xc002f194,0xc001b6d7
c001c4cc:	c7 05 98 f1 02 c0 55 c0 01 c0 	mov    DWORD PTR ds:0xc002f198,0xc001c055
c001c4d6:	c7 05 9c f1 02 c0 54 bc 01 c0 	mov    DWORD PTR ds:0xc002f19c,0xc001bc54
c001c4e0:	c7 05 a0 f1 02 c0 28 b7 01 c0 	mov    DWORD PTR ds:0xc002f1a0,0xc001b728
c001c4ea:	c7 05 a4 f1 02 c0 c7 c0 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001c0c7
c001c4f4:	c7 05 a8 f1 02 c0 0c c1 01 c0 	mov    DWORD PTR ds:0xc002f1a8,0xc001c10c
c001c4fe:	c7 05 ac f1 02 c0 93 b2 01 c0 	mov    DWORD PTR ds:0xc002f1ac,0xc001b293
c001c508:	c7 05 b0 f1 02 c0 14 b4 01 c0 	mov    DWORD PTR ds:0xc002f1b0,0xc001b414
c001c512:	c7 05 b4 f1 02 c0 a9 b4 01 c0 	mov    DWORD PTR ds:0xc002f1b4,0xc001b4a9
c001c51c:	c7 05 b8 f1 02 c0 7c b1 01 c0 	mov    DWORD PTR ds:0xc002f1b8,0xc001b17c
c001c526:	c7 05 bc f1 02 c0 5b b5 01 c0 	mov    DWORD PTR ds:0xc002f1bc,0xc001b55b
c001c530:	c7 05 c0 f1 02 c0 f5 b1 01 c0 	mov    DWORD PTR ds:0xc002f1c0,0xc001b1f5
c001c53a:	c7 05 c4 f1 02 c0 0f b2 01 c0 	mov    DWORD PTR ds:0xc002f1c4,0xc001b20f
c001c544:	c3                   	ret    

c001c545 <Sys::systemCall(regs*, void*)>:
c001c545:	53                   	push   ebx
c001c546:	83 ec 08             	sub    esp,0x8
c001c549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c54d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c550:	83 f8 7f             	cmp    eax,0x7f
c001c553:	77 16                	ja     c001c56b <Sys::systemCall(regs*, void*)+0x26>
c001c555:	8b 14 85 00 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f00]
c001c55c:	85 d2                	test   edx,edx
c001c55e:	74 0b                	je     c001c56b <Sys::systemCall(regs*, void*)+0x26>
c001c560:	83 ec 0c             	sub    esp,0xc
c001c563:	53                   	push   ebx
c001c564:	ff d2                	call   edx
c001c566:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c569:	eb 0d                	jmp    c001c578 <Sys::systemCall(regs*, void*)+0x33>
c001c56b:	52                   	push   edx
c001c56c:	52                   	push   edx
c001c56d:	50                   	push   eax
c001c56e:	68 0d c5 02 c0       	push   0xc002c50d
c001c573:	e8 3d 64 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001c578:	83 c4 10             	add    esp,0x10
c001c57b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c580:	31 d2                	xor    edx,edx
c001c582:	83 c4 08             	add    esp,0x8
c001c585:	5b                   	pop    ebx
c001c586:	c3                   	ret    

c001c587 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c587:	55                   	push   ebp
c001c588:	57                   	push   edi
c001c589:	56                   	push   esi
c001c58a:	53                   	push   ebx
c001c58b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c591:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c598:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c59f:	85 c0                	test   eax,eax
c001c5a1:	0f 95 c1             	setne  cl
c001c5a4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c5ac:	0f 94 c2             	sete   dl
c001c5af:	84 d1                	test   cl,dl
c001c5b1:	74 23                	je     c001c5d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c5b3:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c5b9:	74 1b                	je     c001c5d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c5bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c5c1:	89 da                	mov    edx,ebx
c001c5c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c5c9:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c5cf:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c5d6:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c5dd:	05 ff 0f 00 00       	add    eax,0xfff
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5e9:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c5ef:	c1 e8 0c             	shr    eax,0xc
c001c5f2:	89 fe                	mov    esi,edi
c001c5f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5f8:	c1 ee 0c             	shr    esi,0xc
c001c5fb:	6a 01                	push   0x1
c001c5fd:	e8 e1 4f ff ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c001c602:	89 c5                	mov    ebp,eax
c001c604:	58                   	pop    eax
c001c605:	5a                   	pop    edx
c001c606:	56                   	push   esi
c001c607:	68 21 c5 02 c0       	push   0xc002c521
c001c60c:	e8 a4 63 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001c611:	59                   	pop    ecx
c001c612:	58                   	pop    eax
c001c613:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c617:	68 33 c5 02 c0       	push   0xc002c533
c001c61c:	e8 94 63 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001c621:	83 c4 10             	add    esp,0x10
c001c624:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c62a:	0f 86 31 01 00 00    	jbe    c001c761 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c630:	c1 e6 0c             	shl    esi,0xc
c001c633:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c636:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c63d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c644:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c647:	01 df                	add    edi,ebx
c001c649:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c64c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c650:	0f 84 08 01 00 00    	je     c001c75e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c656:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c65c:	76 05                	jbe    c001c663 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c65e:	bf 00 10 00 00       	mov    edi,0x1000
c001c663:	83 ec 0c             	sub    esp,0xc
c001c666:	31 d2                	xor    edx,edx
c001c668:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c66f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c671:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c675:	50                   	push   eax
c001c676:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c67a:	56                   	push   esi
c001c67b:	52                   	push   edx
c001c67c:	57                   	push   edi
c001c67d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c684:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c687:	83 c4 20             	add    esp,0x20
c001c68a:	85 c0                	test   eax,eax
c001c68c:	74 0a                	je     c001c698 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c68e:	53                   	push   ebx
c001c68f:	53                   	push   ebx
c001c690:	50                   	push   eax
c001c691:	68 45 c5 02 c0       	push   0xc002c545
c001c696:	eb 0f                	jmp    c001c6a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c698:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c69c:	74 20                	je     c001c6be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c69e:	51                   	push   ecx
c001c69f:	51                   	push   ecx
c001c6a0:	6a 00                	push   0x0
c001c6a2:	68 70 c5 02 c0       	push   0xc002c570
c001c6a7:	e8 09 63 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001c6ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6af:	e8 5f 52 ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c001c6b4:	83 c4 10             	add    esp,0x10
c001c6b7:	31 c0                	xor    eax,eax
c001c6b9:	e9 68 01 00 00       	jmp    c001c826 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c6be:	fa                   	cli    
c001c6bf:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001c6c5:	e8 8f 36 ff ff       	call   c000fd59 <Phys::allocatePage()>
c001c6ca:	6a 07                	push   0x7
c001c6cc:	89 c7                	mov    edi,eax
c001c6ce:	55                   	push   ebp
c001c6cf:	50                   	push   eax
c001c6d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6d8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6de:	e8 a7 55 ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c6e3:	83 c4 0c             	add    esp,0xc
c001c6e6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c6ed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6f3:	6a 00                	push   0x0
c001c6f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c703:	e8 dc 53 ff ff       	call   c0011ae4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c708:	58                   	pop    eax
c001c709:	5a                   	pop    edx
c001c70a:	68 07 0c 00 00       	push   0xc07
c001c70f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c713:	57                   	push   edi
c001c714:	89 ef                	mov    edi,ebp
c001c716:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c71d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c723:	6a 00                	push   0x0
c001c725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c72a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c72d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c733:	e8 0e 59 ff ff       	call   c0012046 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c738:	b9 00 10 00 00       	mov    ecx,0x1000
c001c73d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c73f:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001c744:	83 c4 20             	add    esp,0x20
c001c747:	48                   	dec    eax
c001c748:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001c74d:	85 c0                	test   eax,eax
c001c74f:	75 01                	jne    c001c752 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c751:	fb                   	sti    
c001c752:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c759:	e9 df fe ff ff       	jmp    c001c63d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c75e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c761:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c769:	0f 86 a9 00 00 00    	jbe    c001c818 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c76f:	fa                   	cli    
c001c770:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001c776:	51                   	push   ecx
c001c777:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c77e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c784:	6a 00                	push   0x0
c001c786:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c78b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c78e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c794:	e8 4b 53 ff ff       	call   c0011ae4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c799:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c79d:	c1 e6 0c             	shl    esi,0xc
c001c7a0:	01 de                	add    esi,ebx
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	39 de                	cmp    esi,ebx
c001c7a7:	74 61                	je     c001c80a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c7a9:	e8 ab 35 ff ff       	call   c000fd59 <Phys::allocatePage()>
c001c7ae:	6a 07                	push   0x7
c001c7b0:	89 c7                	mov    edi,eax
c001c7b2:	55                   	push   ebp
c001c7b3:	50                   	push   eax
c001c7b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7c2:	e8 c3 54 ff ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c7c7:	58                   	pop    eax
c001c7c8:	5a                   	pop    edx
c001c7c9:	68 07 0c 00 00       	push   0xc07
c001c7ce:	53                   	push   ebx
c001c7cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7d5:	57                   	push   edi
c001c7d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7e3:	6a 00                	push   0x0
c001c7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7ed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7f3:	e8 4e 58 ff ff       	call   c0012046 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7f8:	83 c4 1c             	add    esp,0x1c
c001c7fb:	68 00 10 00 00       	push   0x1000
c001c800:	6a 00                	push   0x0
c001c802:	55                   	push   ebp
c001c803:	e8 48 3f fe ff       	call   c0000750 <memset>
c001c808:	eb 98                	jmp    c001c7a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c80a:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001c80f:	48                   	dec    eax
c001c810:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001c815:	75 01                	jne    c001c818 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c817:	fb                   	sti    
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	55                   	push   ebp
c001c81c:	e8 f2 50 ff ff       	call   c0011913 <Virt::freeKernelVirtualPages(unsigned long)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	b0 01                	mov    al,0x1
c001c826:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c82c:	5b                   	pop    ebx
c001c82d:	5e                   	pop    esi
c001c82e:	5f                   	pop    edi
c001c82f:	5d                   	pop    ebp
c001c830:	c3                   	ret    

c001c831 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c831:	55                   	push   ebp
c001c832:	57                   	push   edi
c001c833:	56                   	push   esi
c001c834:	53                   	push   ebx
c001c835:	83 ec 48             	sub    esp,0x48
c001c838:	68 14 01 00 00       	push   0x114
c001c83d:	e8 1b 31 ff ff       	call   c000f95d <malloc>
c001c842:	83 c4 0c             	add    esp,0xc
c001c845:	89 c6                	mov    esi,eax
c001c847:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c84b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c84f:	50                   	push   eax
c001c850:	e8 bf 66 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001c855:	58                   	pop    eax
c001c856:	5a                   	pop    edx
c001c857:	6a 01                	push   0x1
c001c859:	56                   	push   esi
c001c85a:	e8 19 67 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	85 c0                	test   eax,eax
c001c864:	0f 85 47 01 00 00    	jne    c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c86a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c872:	83 ec 0c             	sub    esp,0xc
c001c875:	6a 34                	push   0x34
c001c877:	e8 e1 30 ff ff       	call   c000f95d <malloc>
c001c87c:	89 c3                	mov    ebx,eax
c001c87e:	58                   	pop    eax
c001c87f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c881:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c885:	57                   	push   edi
c001c886:	53                   	push   ebx
c001c887:	6a 00                	push   0x0
c001c889:	6a 34                	push   0x34
c001c88b:	56                   	push   esi
c001c88c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c88f:	83 c4 20             	add    esp,0x20
c001c892:	85 c0                	test   eax,eax
c001c894:	0f 85 17 01 00 00    	jne    c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c89a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c8a0:	0f 85 0b 01 00 00    	jne    c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8a9:	85 c0                	test   eax,eax
c001c8ab:	0f 84 00 01 00 00    	je     c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8b1:	31 d2                	xor    edx,edx
c001c8b3:	55                   	push   ebp
c001c8b4:	52                   	push   edx
c001c8b5:	50                   	push   eax
c001c8b6:	56                   	push   esi
c001c8b7:	e8 7a 67 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	85 c0                	test   eax,eax
c001c8c1:	0f 85 ea 00 00 00    	jne    c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8c7:	83 ec 0c             	sub    esp,0xc
c001c8ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c8cd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c8d5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c8d9:	0f af c2             	imul   eax,edx
c001c8dc:	50                   	push   eax
c001c8dd:	e8 7b 30 ff ff       	call   c000f95d <malloc>
c001c8e2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c8e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c8e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8ef:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c8f3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c8f7:	0f af c2             	imul   eax,edx
c001c8fa:	99                   	cdq    
c001c8fb:	52                   	push   edx
c001c8fc:	50                   	push   eax
c001c8fd:	56                   	push   esi
c001c8fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c901:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c904:	83 c4 20             	add    esp,0x20
c001c907:	85 c0                	test   eax,eax
c001c909:	0f 84 a2 00 00 00    	je     c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c90f:	31 d2                	xor    edx,edx
c001c911:	51                   	push   ecx
c001c912:	52                   	push   edx
c001c913:	50                   	push   eax
c001c914:	56                   	push   esi
c001c915:	e8 1c 67 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	85 c0                	test   eax,eax
c001c91f:	0f 85 8c 00 00 00    	jne    c001c9b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c925:	83 ec 0c             	sub    esp,0xc
c001c928:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c92c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c930:	31 ed                	xor    ebp,ebp
c001c932:	0f af c2             	imul   eax,edx
c001c935:	50                   	push   eax
c001c936:	e8 22 30 ff ff       	call   c000f95d <malloc>
c001c93b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c93d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c941:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c948:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c94c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c950:	0f af c2             	imul   eax,edx
c001c953:	99                   	cdq    
c001c954:	52                   	push   edx
c001c955:	50                   	push   eax
c001c956:	56                   	push   esi
c001c957:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c95a:	83 c4 20             	add    esp,0x20
c001c95d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c965:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c969:	0f 86 80 00 00 00    	jbe    c001c9ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c96f:	0f b7 fd             	movzx  edi,bp
c001c972:	c1 e7 05             	shl    edi,0x5
c001c975:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c979:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c97c:	75 6b                	jne    c001c9e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c97e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c981:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c985:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c98c:	52                   	push   edx
c001c98d:	31 d2                	xor    edx,edx
c001c98f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c992:	52                   	push   edx
c001c993:	50                   	push   eax
c001c994:	56                   	push   esi
c001c995:	e8 9c 66 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	85 c0                	test   eax,eax
c001c99f:	74 17                	je     c001c9b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c9a1:	83 ec 0c             	sub    esp,0xc
c001c9a4:	68 9c c5 02 c0       	push   0xc002c59c
c001c9a9:	e8 07 60 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001c9ae:	83 c4 10             	add    esp,0x10
c001c9b1:	31 c0                	xor    eax,eax
c001c9b3:	e9 87 00 00 00       	jmp    c001ca3f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c9be:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c9c1:	50                   	push   eax
c001c9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c9c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9ca:	56                   	push   esi
c001c9cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c9cf:	e8 b3 fb ff ff       	call   c001c587 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c9d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c9d8:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c9dc:	83 c4 20             	add    esp,0x20
c001c9df:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c9e3:	73 04                	jae    c001c9e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9e9:	45                   	inc    ebp
c001c9ea:	e9 76 ff ff ff       	jmp    c001c965 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c9ef:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c9f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9fb:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ca01:	83 ec 0c             	sub    esp,0xc
c001ca04:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ca0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca0f:	05 00 10 00 00       	add    eax,0x1000
c001ca14:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca1b:	e8 4d 2f ff ff       	call   c000f96d <free>
c001ca20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca23:	e8 45 2f ff ff       	call   c000f96d <free>
c001ca28:	58                   	pop    eax
c001ca29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca2d:	e8 3b 2f ff ff       	call   c000f96d <free>
c001ca32:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca35:	e8 9c 65 ff ff       	call   c0012fd6 <File::close()>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	b0 01                	mov    al,0x1
c001ca3f:	83 c4 3c             	add    esp,0x3c
c001ca42:	5b                   	pop    ebx
c001ca43:	5e                   	pop    esi
c001ca44:	5f                   	pop    edi
c001ca45:	5d                   	pop    ebp
c001ca46:	c3                   	ret    

c001ca47 <Thr::runtimeReferenceHelper()>:
c001ca47:	83 ec 18             	sub    esp,0x18
c001ca4a:	68 a4 c5 02 c0       	push   0xc002c5a4
c001ca4f:	e8 61 5f ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001ca54:	fa                   	cli    
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	eb fe                	jmp    c001ca58 <Thr::runtimeReferenceHelper()+0x11>

c001ca5a <Thr::getAddressOfKernelSymbol(char const*)>:
c001ca5a:	57                   	push   edi
c001ca5b:	56                   	push   esi
c001ca5c:	53                   	push   ebx
c001ca5d:	31 db                	xor    ebx,ebx
c001ca5f:	39 1d a0 fa 02 c0    	cmp    DWORD PTR ds:0xc002faa0,ebx
c001ca65:	7e 3c                	jle    c001caa3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ca67:	8b 34 9d 20 fa 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd05e0]
c001ca6e:	31 ff                	xor    edi,edi
c001ca70:	39 3c 9d 20 f9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd06e0],edi
c001ca77:	7e 27                	jle    c001caa0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ca79:	50                   	push   eax
c001ca7a:	50                   	push   eax
c001ca7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca7f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca81:	03 04 9d a0 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0660]
c001ca88:	50                   	push   eax
c001ca89:	e8 0a 3e fe ff       	call   c0000898 <strcmp>
c001ca8e:	83 c4 10             	add    esp,0x10
c001ca91:	85 c0                	test   eax,eax
c001ca93:	75 05                	jne    c001ca9a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ca95:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ca98:	eb 0b                	jmp    c001caa5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ca9a:	83 c6 10             	add    esi,0x10
c001ca9d:	47                   	inc    edi
c001ca9e:	eb d0                	jmp    c001ca70 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001caa0:	43                   	inc    ebx
c001caa1:	eb bc                	jmp    c001ca5f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001caa3:	31 c0                	xor    eax,eax
c001caa5:	5b                   	pop    ebx
c001caa6:	5e                   	pop    esi
c001caa7:	5f                   	pop    edi
c001caa8:	c3                   	ret    

c001caa9 <Thr::loadKernelSymbolTable(char const*)>:
c001caa9:	55                   	push   ebp
c001caaa:	57                   	push   edi
c001caab:	56                   	push   esi
c001caac:	53                   	push   ebx
c001caad:	83 ec 68             	sub    esp,0x68
c001cab0:	8b 35 f0 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002faf0
c001cab6:	68 14 01 00 00       	push   0x114
c001cabb:	e8 9d 2e ff ff       	call   c000f95d <malloc>
c001cac0:	83 c4 0c             	add    esp,0xc
c001cac3:	89 c3                	mov    ebx,eax
c001cac5:	56                   	push   esi
c001cac6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001caca:	50                   	push   eax
c001cacb:	e8 44 64 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001cad0:	5e                   	pop    esi
c001cad1:	5f                   	pop    edi
c001cad2:	6a 01                	push   0x1
c001cad4:	53                   	push   ebx
c001cad5:	e8 9e 64 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	85 c0                	test   eax,eax
c001cadf:	74 0a                	je     c001caeb <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cae1:	83 ec 0c             	sub    esp,0xc
c001cae4:	68 c6 c5 02 c0       	push   0xc002c5c6
c001cae9:	eb 34                	jmp    c001cb1f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001caeb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001caf3:	83 ec 0c             	sub    esp,0xc
c001caf6:	6a 34                	push   0x34
c001caf8:	e8 60 2e ff ff       	call   c000f95d <malloc>
c001cafd:	59                   	pop    ecx
c001cafe:	89 c7                	mov    edi,eax
c001cb00:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb04:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb06:	56                   	push   esi
c001cb07:	57                   	push   edi
c001cb08:	6a 00                	push   0x0
c001cb0a:	6a 34                	push   0x34
c001cb0c:	53                   	push   ebx
c001cb0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb10:	83 c4 20             	add    esp,0x20
c001cb13:	85 c0                	test   eax,eax
c001cb15:	74 17                	je     c001cb2e <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb17:	83 ec 0c             	sub    esp,0xc
c001cb1a:	68 dd c5 02 c0       	push   0xc002c5dd
c001cb1f:	e8 2f d8 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	31 c0                	xor    eax,eax
c001cb29:	e9 31 02 00 00       	jmp    c001cd5f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cb2e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cb34:	75 e1                	jne    c001cb17 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb36:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cb39:	85 c0                	test   eax,eax
c001cb3b:	74 da                	je     c001cb17 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb3d:	52                   	push   edx
c001cb3e:	31 d2                	xor    edx,edx
c001cb40:	52                   	push   edx
c001cb41:	50                   	push   eax
c001cb42:	53                   	push   ebx
c001cb43:	e8 ee 64 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	85 c0                	test   eax,eax
c001cb4d:	75 c8                	jne    c001cb17 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cb56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb5a:	31 ed                	xor    ebp,ebp
c001cb5c:	0f af c2             	imul   eax,edx
c001cb5f:	50                   	push   eax
c001cb60:	e8 f8 2d ff ff       	call   c000f95d <malloc>
c001cb65:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb6b:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb72:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cb76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb7a:	0f af c2             	imul   eax,edx
c001cb7d:	99                   	cdq    
c001cb7e:	52                   	push   edx
c001cb7f:	50                   	push   eax
c001cb80:	53                   	push   ebx
c001cb81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb84:	83 c4 20             	add    esp,0x20
c001cb87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb8f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cb97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cb9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cba7:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cbab:	0f 86 aa 00 00 00    	jbe    c001cc5b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cbb1:	0f b7 f5             	movzx  esi,bp
c001cbb4:	6b f6 28             	imul   esi,esi,0x28
c001cbb7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cbbb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbc2:	50                   	push   eax
c001cbc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbc7:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cbcb:	8b 16                	mov    edx,DWORD PTR [esi]
c001cbcd:	6b c0 28             	imul   eax,eax,0x28
c001cbd0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cbd4:	89 d0                	mov    eax,edx
c001cbd6:	31 d2                	xor    edx,edx
c001cbd8:	52                   	push   edx
c001cbd9:	50                   	push   eax
c001cbda:	53                   	push   ebx
c001cbdb:	e8 56 64 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cbe0:	83 c4 0c             	add    esp,0xc
c001cbe3:	6a 20                	push   0x20
c001cbe5:	6a 00                	push   0x0
c001cbe7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cbeb:	52                   	push   edx
c001cbec:	e8 5f 3b fe ff       	call   c0000750 <memset>
c001cbf1:	58                   	pop    eax
c001cbf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbf4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cbf8:	51                   	push   ecx
c001cbf9:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cbfd:	52                   	push   edx
c001cbfe:	6a 00                	push   0x0
c001cc00:	6a 1f                	push   0x1f
c001cc02:	53                   	push   ebx
c001cc03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc06:	83 c4 18             	add    esp,0x18
c001cc09:	68 f4 c5 02 c0       	push   0xc002c5f4
c001cc0e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc12:	52                   	push   edx
c001cc13:	e8 80 3c fe ff       	call   c0000898 <strcmp>
c001cc18:	83 c4 10             	add    esp,0x10
c001cc1b:	85 c0                	test   eax,eax
c001cc1d:	75 0f                	jne    c001cc2e <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc2e:	50                   	push   eax
c001cc2f:	50                   	push   eax
c001cc30:	68 fc c5 02 c0       	push   0xc002c5fc
c001cc35:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc39:	50                   	push   eax
c001cc3a:	e8 59 3c fe ff       	call   c0000898 <strcmp>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	85 c0                	test   eax,eax
c001cc44:	75 0f                	jne    c001cc55 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cc46:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc55:	45                   	inc    ebp
c001cc56:	e9 4c ff ff ff       	jmp    c001cba7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cc5b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cc60:	75 10                	jne    c001cc72 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	68 04 c6 02 c0       	push   0xc002c604
c001cc6a:	e8 e4 d6 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cc77:	75 10                	jne    c001cc89 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	68 04 c6 02 c0       	push   0xc002c604
c001cc81:	e8 cd d6 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001cc86:	83 c4 10             	add    esp,0x10
c001cc89:	31 d2                	xor    edx,edx
c001cc8b:	50                   	push   eax
c001cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc90:	52                   	push   edx
c001cc91:	50                   	push   eax
c001cc92:	53                   	push   ebx
c001cc93:	e8 9e 63 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cc98:	5a                   	pop    edx
c001cc99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc9d:	e8 bb 2c ff ff       	call   c000f95d <malloc>
c001cca2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccaa:	31 c9                	xor    ecx,ecx
c001ccac:	5e                   	pop    esi
c001ccad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccaf:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ccb3:	55                   	push   ebp
c001ccb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb8:	51                   	push   ecx
c001ccb9:	52                   	push   edx
c001ccba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ccbe:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ccc2:	53                   	push   ebx
c001ccc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccc6:	83 c4 14             	add    esp,0x14
c001ccc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cccd:	e8 8b 2c ff ff       	call   c000f95d <malloc>
c001ccd2:	89 c6                	mov    esi,eax
c001ccd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ccd9:	56                   	push   esi
c001ccda:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ccde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cce2:	51                   	push   ecx
c001cce3:	52                   	push   edx
c001cce4:	53                   	push   ebx
c001cce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cce8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccec:	8b 15 a0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002faa0
c001ccf2:	83 c4 1c             	add    esp,0x1c
c001ccf5:	c1 e8 04             	shr    eax,0x4
c001ccf8:	89 04 95 20 f9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd06e0],eax
c001ccff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd03:	31 d2                	xor    edx,edx
c001cd05:	52                   	push   edx
c001cd06:	50                   	push   eax
c001cd07:	53                   	push   ebx
c001cd08:	e8 29 63 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cd0d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd0f:	31 d2                	xor    edx,edx
c001cd11:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd14:	56                   	push   esi
c001cd15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd19:	52                   	push   edx
c001cd1a:	50                   	push   eax
c001cd1b:	53                   	push   ebx
c001cd1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd1f:	83 c4 14             	add    esp,0x14
c001cd22:	53                   	push   ebx
c001cd23:	e8 ae 62 ff ff       	call   c0012fd6 <File::close()>
c001cd28:	5d                   	pop    ebp
c001cd29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd2d:	e8 3b 2c ff ff       	call   c000f96d <free>
c001cd32:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd35:	e8 33 2c ff ff       	call   c000f96d <free>
c001cd3a:	a1 a0 fa 02 c0       	mov    eax,ds:0xc002faa0
c001cd3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd43:	8d 50 01             	lea    edx,[eax+0x1]
c001cd46:	89 0c 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],ecx
c001cd4d:	89 34 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],esi
c001cd54:	89 15 a0 fa 02 c0    	mov    DWORD PTR ds:0xc002faa0,edx
c001cd5a:	83 c4 10             	add    esp,0x10
c001cd5d:	b0 01                	mov    al,0x1
c001cd5f:	83 c4 5c             	add    esp,0x5c
c001cd62:	5b                   	pop    ebx
c001cd63:	5e                   	pop    esi
c001cd64:	5f                   	pop    edi
c001cd65:	5d                   	pop    ebp
c001cd66:	c3                   	ret    

c001cd67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cd67:	55                   	push   ebp
c001cd68:	57                   	push   edi
c001cd69:	56                   	push   esi
c001cd6a:	53                   	push   ebx
c001cd6b:	81 ec 68 03 00 00    	sub    esp,0x368
c001cd71:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cd78:	8b 1d f0 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002faf0
c001cd7e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cd82:	68 14 01 00 00       	push   0x114
c001cd87:	e8 d1 2b ff ff       	call   c000f95d <malloc>
c001cd8c:	83 c4 0c             	add    esp,0xc
c001cd8f:	89 c5                	mov    ebp,eax
c001cd91:	53                   	push   ebx
c001cd92:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cd99:	50                   	push   eax
c001cd9a:	e8 75 61 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001cd9f:	5e                   	pop    esi
c001cda0:	5f                   	pop    edi
c001cda1:	6a 01                	push   0x1
c001cda3:	55                   	push   ebp
c001cda4:	e8 cf 61 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	85 c0                	test   eax,eax
c001cdae:	0f 85 a7 06 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdb4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdbc:	83 ec 0c             	sub    esp,0xc
c001cdbf:	6a 34                	push   0x34
c001cdc1:	e8 97 2b ff ff       	call   c000f95d <malloc>
c001cdc6:	5b                   	pop    ebx
c001cdc7:	89 c7                	mov    edi,eax
c001cdc9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cdcd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdd0:	53                   	push   ebx
c001cdd1:	57                   	push   edi
c001cdd2:	6a 00                	push   0x0
c001cdd4:	6a 34                	push   0x34
c001cdd6:	55                   	push   ebp
c001cdd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdda:	83 c4 20             	add    esp,0x20
c001cddd:	85 c0                	test   eax,eax
c001cddf:	0f 85 76 06 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cde5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdeb:	0f 85 6a 06 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdf1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdf4:	85 c0                	test   eax,eax
c001cdf6:	0f 84 5f 06 00 00    	je     c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdfc:	31 d2                	xor    edx,edx
c001cdfe:	51                   	push   ecx
c001cdff:	52                   	push   edx
c001ce00:	50                   	push   eax
c001ce01:	55                   	push   ebp
c001ce02:	e8 2f 62 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	85 c0                	test   eax,eax
c001ce0c:	0f 85 49 06 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce12:	83 ec 0c             	sub    esp,0xc
c001ce15:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce18:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce1c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ce20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce24:	0f af c2             	imul   eax,edx
c001ce27:	50                   	push   eax
c001ce28:	e8 30 2b ff ff       	call   c000f95d <malloc>
c001ce2d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce3b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce3f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce43:	0f af c2             	imul   eax,edx
c001ce46:	99                   	cdq    
c001ce47:	52                   	push   edx
c001ce48:	50                   	push   eax
c001ce49:	55                   	push   ebp
c001ce4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ce50:	83 c4 20             	add    esp,0x20
c001ce53:	85 c0                	test   eax,eax
c001ce55:	0f 84 00 06 00 00    	je     c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce5b:	52                   	push   edx
c001ce5c:	31 d2                	xor    edx,edx
c001ce5e:	52                   	push   edx
c001ce5f:	50                   	push   eax
c001ce60:	55                   	push   ebp
c001ce61:	e8 d0 61 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	85 c0                	test   eax,eax
c001ce6b:	0f 85 ea 05 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ce78:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ce7c:	31 f6                	xor    esi,esi
c001ce7e:	0f af c2             	imul   eax,edx
c001ce81:	50                   	push   eax
c001ce82:	e8 d6 2a ff ff       	call   c000f95d <malloc>
c001ce87:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce95:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ce99:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ce9d:	0f af c2             	imul   eax,edx
c001cea0:	99                   	cdq    
c001cea1:	52                   	push   edx
c001cea2:	50                   	push   eax
c001cea3:	55                   	push   ebp
c001cea4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cea7:	83 c4 20             	add    esp,0x20
c001ceaa:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001ceae:	0f 86 8a 00 00 00    	jbe    c001cf3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001ceb4:	0f b7 de             	movzx  ebx,si
c001ceb7:	c1 e3 05             	shl    ebx,0x5
c001ceba:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cebe:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cec1:	75 75                	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cec3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cec6:	31 d2                	xor    edx,edx
c001cec8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cecc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ced3:	50                   	push   eax
c001ced4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ced7:	52                   	push   edx
c001ced8:	50                   	push   eax
c001ced9:	55                   	push   ebp
c001ceda:	e8 57 61 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cedf:	83 c4 10             	add    esp,0x10
c001cee2:	85 c0                	test   eax,eax
c001cee4:	0f 85 71 05 00 00    	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ceea:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cef1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cef4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cef8:	31 d2                	xor    edx,edx
c001cefa:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cefe:	83 ec 0c             	sub    esp,0xc
c001cf01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf05:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf0c:	50                   	push   eax
c001cf0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf15:	52                   	push   edx
c001cf16:	50                   	push   eax
c001cf17:	55                   	push   ebp
c001cf18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf1b:	83 c4 1c             	add    esp,0x1c
c001cf1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cf21:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cf24:	50                   	push   eax
c001cf25:	6a 00                	push   0x0
c001cf27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cf2f:	50                   	push   eax
c001cf30:	e8 1b 38 fe ff       	call   c0000750 <memset>
c001cf35:	83 c4 10             	add    esp,0x10
c001cf38:	46                   	inc    esi
c001cf39:	e9 6c ff ff ff       	jmp    c001ceaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cf3e:	53                   	push   ebx
c001cf3f:	31 db                	xor    ebx,ebx
c001cf41:	68 00 01 00 00       	push   0x100
c001cf46:	6a 00                	push   0x0
c001cf48:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf4c:	50                   	push   eax
c001cf4d:	e8 fe 37 fe ff       	call   c0000750 <memset>
c001cf52:	83 c4 0c             	add    esp,0xc
c001cf55:	68 00 01 00 00       	push   0x100
c001cf5a:	6a 00                	push   0x0
c001cf5c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cf63:	50                   	push   eax
c001cf64:	e8 e7 37 fe ff       	call   c0000750 <memset>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cf74:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cf7c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cf84:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cf8c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cf94:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cf98:	0f 86 30 01 00 00    	jbe    c001d0ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cf9e:	0f b7 f3             	movzx  esi,bx
c001cfa1:	6b f6 28             	imul   esi,esi,0x28
c001cfa4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cfa8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cfab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfaf:	52                   	push   edx
c001cfb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfb4:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cfb8:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfba:	6b d2 28             	imul   edx,edx,0x28
c001cfbd:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cfc1:	31 d2                	xor    edx,edx
c001cfc3:	52                   	push   edx
c001cfc4:	50                   	push   eax
c001cfc5:	55                   	push   ebp
c001cfc6:	e8 6b 60 ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001cfcb:	83 c4 0c             	add    esp,0xc
c001cfce:	6a 20                	push   0x20
c001cfd0:	6a 00                	push   0x0
c001cfd2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cfd9:	51                   	push   ecx
c001cfda:	e8 71 37 fe ff       	call   c0000750 <memset>
c001cfdf:	59                   	pop    ecx
c001cfe0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfe3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cfe7:	52                   	push   edx
c001cfe8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cfef:	51                   	push   ecx
c001cff0:	6a 00                	push   0x0
c001cff2:	6a 1f                	push   0x1f
c001cff4:	55                   	push   ebp
c001cff5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cff8:	83 c4 1c             	add    esp,0x1c
c001cffb:	6a 09                	push   0x9
c001cffd:	68 1e c6 02 c0       	push   0xc002c61e
c001d002:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d009:	51                   	push   ecx
c001d00a:	e8 3d 36 fe ff       	call   c000064c <memcmp>
c001d00f:	83 c4 10             	add    esp,0x10
c001d012:	85 c0                	test   eax,eax
c001d014:	75 21                	jne    c001d037 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d01a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d01e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d026:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d029:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d030:	89 d0                	mov    eax,edx
c001d032:	40                   	inc    eax
c001d033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d037:	50                   	push   eax
c001d038:	6a 09                	push   0x9
c001d03a:	68 28 c6 02 c0       	push   0xc002c628
c001d03f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d046:	50                   	push   eax
c001d047:	e8 00 36 fe ff       	call   c000064c <memcmp>
c001d04c:	83 c4 10             	add    esp,0x10
c001d04f:	85 c0                	test   eax,eax
c001d051:	75 21                	jne    c001d074 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d057:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d05b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d05f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d063:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d066:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d06d:	89 d0                	mov    eax,edx
c001d06f:	40                   	inc    eax
c001d070:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d074:	50                   	push   eax
c001d075:	50                   	push   eax
c001d076:	68 f4 c5 02 c0       	push   0xc002c5f4
c001d07b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d082:	50                   	push   eax
c001d083:	e8 10 38 fe ff       	call   c0000898 <strcmp>
c001d088:	83 c4 10             	add    esp,0x10
c001d08b:	85 c0                	test   eax,eax
c001d08d:	75 0f                	jne    c001d09e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d08f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d092:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d09a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d09e:	50                   	push   eax
c001d09f:	50                   	push   eax
c001d0a0:	68 fc c5 02 c0       	push   0xc002c5fc
c001d0a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0ac:	50                   	push   eax
c001d0ad:	e8 e6 37 fe ff       	call   c0000898 <strcmp>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	85 c0                	test   eax,eax
c001d0b7:	75 0f                	jne    c001d0c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d0b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d0c8:	43                   	inc    ebx
c001d0c9:	e9 c6 fe ff ff       	jmp    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d0ce:	31 d2                	xor    edx,edx
c001d0d0:	50                   	push   eax
c001d0d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0d5:	52                   	push   edx
c001d0d6:	50                   	push   eax
c001d0d7:	55                   	push   ebp
c001d0d8:	e8 59 5f ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001d0dd:	58                   	pop    eax
c001d0de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0e2:	e8 76 28 ff ff       	call   c000f95d <malloc>
c001d0e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d0ee:	31 d2                	xor    edx,edx
c001d0f0:	58                   	pop    eax
c001d0f1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0f5:	53                   	push   ebx
c001d0f6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d0fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0fe:	52                   	push   edx
c001d0ff:	50                   	push   eax
c001d100:	55                   	push   ebp
c001d101:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d104:	83 c4 14             	add    esp,0x14
c001d107:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d10b:	e8 4d 28 ff ff       	call   c000f95d <malloc>
c001d110:	31 d2                	xor    edx,edx
c001d112:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d116:	83 c4 0c             	add    esp,0xc
c001d119:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d11d:	52                   	push   edx
c001d11e:	50                   	push   eax
c001d11f:	55                   	push   ebp
c001d120:	e8 11 5f ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001d125:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d128:	31 d2                	xor    edx,edx
c001d12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d12d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d131:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d135:	52                   	push   edx
c001d136:	50                   	push   eax
c001d137:	55                   	push   ebp
c001d138:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d13b:	83 c4 20             	add    esp,0x20
c001d13e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d146:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d14a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d14e:	0f 84 0b 03 00 00    	je     c001d45f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d154:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d15b:	31 d2                	xor    edx,edx
c001d15d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d161:	c1 e8 03             	shr    eax,0x3
c001d164:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d168:	51                   	push   ecx
c001d169:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d16d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d171:	52                   	push   edx
c001d172:	50                   	push   eax
c001d173:	55                   	push   ebp
c001d174:	e8 bd 5e ff ff       	call   c0013036 <File::seek(unsigned long long)>
c001d179:	5b                   	pop    ebx
c001d17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d17e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d185:	e8 d3 27 ff ff       	call   c000f95d <malloc>
c001d18a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d18d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d191:	31 d2                	xor    edx,edx
c001d193:	5e                   	pop    esi
c001d194:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d198:	50                   	push   eax
c001d199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d19d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1a1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d1a8:	52                   	push   edx
c001d1a9:	50                   	push   eax
c001d1aa:	55                   	push   ebp
c001d1ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ae:	83 c4 20             	add    esp,0x20
c001d1b1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d1bd:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d1c1:	0f 8d 7c 02 00 00    	jge    c001d443 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d1c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1cf:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d1d4:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d1d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1df:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d1e3:	89 d8                	mov    eax,ebx
c001d1e5:	c1 e8 08             	shr    eax,0x8
c001d1e8:	89 c6                	mov    esi,eax
c001d1ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d1ee:	c1 e6 04             	shl    esi,0x4
c001d1f1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d1f5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d1f8:	85 d2                	test   edx,edx
c001d1fa:	0f 85 bf 00 00 00    	jne    c001d2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d207:	03 06                	add    eax,DWORD PTR [esi]
c001d209:	50                   	push   eax
c001d20a:	e8 4b f8 ff ff       	call   c001ca5a <Thr::getAddressOfKernelSymbol(char const*)>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	89 c2                	mov    edx,eax
c001d214:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d219:	85 c0                	test   eax,eax
c001d21b:	0f 85 9e 00 00 00    	jne    c001d2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d221:	83 ec 0c             	sub    esp,0xc
c001d224:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d228:	03 06                	add    eax,DWORD PTR [esi]
c001d22a:	50                   	push   eax
c001d22b:	e8 45 15 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d230:	83 c4 10             	add    esp,0x10
c001d233:	89 c2                	mov    edx,eax
c001d235:	85 c0                	test   eax,eax
c001d237:	0f 85 82 00 00 00    	jne    c001d2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d23d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d241:	50                   	push   eax
c001d242:	50                   	push   eax
c001d243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d247:	03 06                	add    eax,DWORD PTR [esi]
c001d249:	50                   	push   eax
c001d24a:	68 32 c6 02 c0       	push   0xc002c632
c001d24f:	e8 61 57 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001d254:	58                   	pop    eax
c001d255:	5a                   	pop    edx
c001d256:	68 4c c6 02 c0       	push   0xc002c64c
c001d25b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d262:	50                   	push   eax
c001d263:	e8 a4 35 fe ff       	call   c000080c <strcpy>
c001d268:	59                   	pop    ecx
c001d269:	58                   	pop    eax
c001d26a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26e:	03 06                	add    eax,DWORD PTR [esi]
c001d270:	50                   	push   eax
c001d271:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d278:	50                   	push   eax
c001d279:	e8 ce 36 fe ff       	call   c000094c <strcat>
c001d27e:	58                   	pop    eax
c001d27f:	5a                   	pop    edx
c001d280:	68 e2 c6 02 c0       	push   0xc002c6e2
c001d285:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d28c:	50                   	push   eax
c001d28d:	e8 ba 36 fe ff       	call   c000094c <strcat>
c001d292:	83 c4 10             	add    esp,0x10
c001d295:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d29a:	0f 84 5d 01 00 00    	je     c001d3fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2aa:	50                   	push   eax
c001d2ab:	e8 a3 d0 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d2b0:	83 c4 10             	add    esp,0x10
c001d2b3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d2b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2bb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d2bf:	80 fb 01             	cmp    bl,0x1
c001d2c2:	0f 85 88 00 00 00    	jne    c001d350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d2c8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d2cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d2d3:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d2d7:	01 ce                	add    esi,ecx
c001d2d9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d2df:	0f 94 c0             	sete   al
c001d2e2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d2e8:	0f 94 c3             	sete   bl
c001d2eb:	09 c3                	or     ebx,eax
c001d2ed:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2ef:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d2f4:	74 41                	je     c001d337 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d2f6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d2f9:	84 db                	test   bl,bl
c001d2fb:	75 15                	jne    c001d312 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d2fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d301:	66 83 f8 0c          	cmp    ax,0xc
c001d305:	76 05                	jbe    c001d30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d307:	b8 0c 00 00 00       	mov    eax,0xc
c001d30c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d310:	76 37                	jbe    c001d349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d312:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d316:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d31b:	0f 84 dc 00 00 00    	je     c001d3fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d321:	83 ec 0c             	sub    esp,0xc
c001d324:	68 63 c6 02 c0       	push   0xc002c663
c001d329:	e8 25 d0 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d32e:	83 c4 10             	add    esp,0x10
c001d331:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d335:	eb 12                	jmp    c001d349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d337:	01 c1                	add    ecx,eax
c001d339:	84 db                	test   bl,bl
c001d33b:	75 0c                	jne    c001d349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d33d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d341:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d345:	77 02                	ja     c001d349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d347:	01 d1                	add    ecx,edx
c001d349:	89 0e                	mov    DWORD PTR [esi],ecx
c001d34b:	e9 ea 00 00 00       	jmp    c001d43a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d350:	80 fb 02             	cmp    bl,0x2
c001d353:	75 7c                	jne    c001d3d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d355:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d35c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d360:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d364:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d36a:	74 20                	je     c001d38c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d36c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d372:	74 18                	je     c001d38c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d374:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d378:	b9 0a 00 00 00       	mov    ecx,0xa
c001d37d:	66 83 f8 0e          	cmp    ax,0xe
c001d381:	77 03                	ja     c001d386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d383:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d386:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d38a:	76 1f                	jbe    c001d3ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d390:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d395:	74 66                	je     c001d3fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d397:	83 ec 0c             	sub    esp,0xc
c001d39a:	68 7f c6 02 c0       	push   0xc002c67f
c001d39f:	e8 af cf ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3ab:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3ad:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3b2:	74 13                	je     c001d3c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d3b4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d3b8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d3bf:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d3c3:	01 c8                	add    eax,ecx
c001d3c5:	eb 04                	jmp    c001d3cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d3c7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d3cb:	01 c2                	add    edx,eax
c001d3cd:	89 16                	mov    DWORD PTR [esi],edx
c001d3cf:	eb 69                	jmp    c001d43a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d3d1:	0f b6 db             	movzx  ebx,bl
c001d3d4:	50                   	push   eax
c001d3d5:	50                   	push   eax
c001d3d6:	53                   	push   ebx
c001d3d7:	68 9b c6 02 c0       	push   0xc002c69b
c001d3dc:	e8 d4 55 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001d3e1:	83 c4 10             	add    esp,0x10
c001d3e4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3e9:	74 12                	je     c001d3fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3eb:	83 ec 0c             	sub    esp,0xc
c001d3ee:	68 a6 c6 02 c0       	push   0xc002c6a6
c001d3f3:	e8 5b cf ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d3f8:	83 c4 10             	add    esp,0x10
c001d3fb:	eb 3d                	jmp    c001d43a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d3fd:	83 ec 0c             	sub    esp,0xc
c001d400:	55                   	push   ebp
c001d401:	e8 d0 5b ff ff       	call   c0012fd6 <File::close()>
c001d406:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d409:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d40c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d40f:	59                   	pop    ecx
c001d410:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d414:	e8 54 25 ff ff       	call   c000f96d <free>
c001d419:	5b                   	pop    ebx
c001d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d41e:	e8 4a 25 ff ff       	call   c000f96d <free>
c001d423:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d426:	e8 42 25 ff ff       	call   c000f96d <free>
c001d42b:	5e                   	pop    esi
c001d42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d430:	e8 38 25 ff ff       	call   c000f96d <free>
c001d435:	83 c4 10             	add    esp,0x10
c001d438:	eb 21                	jmp    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d43a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d43e:	e9 76 fd ff ff       	jmp    c001d1b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d443:	83 ec 0c             	sub    esp,0xc
c001d446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d44a:	e8 1e 25 ff ff       	call   c000f96d <free>
c001d44f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d453:	83 c4 10             	add    esp,0x10
c001d456:	e9 eb fc ff ff       	jmp    c001d146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d45b:	31 c0                	xor    eax,eax
c001d45d:	eb 33                	jmp    c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	55                   	push   ebp
c001d463:	e8 6e 5b ff ff       	call   c0012fd6 <File::close()>
c001d468:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d46b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d46e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d471:	58                   	pop    eax
c001d472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d476:	e8 f2 24 ff ff       	call   c000f96d <free>
c001d47b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d47e:	e8 ea 24 ff ff       	call   c000f96d <free>
c001d483:	5a                   	pop    edx
c001d484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d488:	e8 e0 24 ff ff       	call   c000f96d <free>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	b0 01                	mov    al,0x1
c001d492:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d498:	5b                   	pop    ebx
c001d499:	5e                   	pop    esi
c001d49a:	5f                   	pop    edi
c001d49b:	5d                   	pop    ebp
c001d49c:	c3                   	ret    

c001d49d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d49d:	56                   	push   esi
c001d49e:	31 d2                	xor    edx,edx
c001d4a0:	53                   	push   ebx
c001d4a1:	8b 1d 00 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f300
c001d4a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4ab:	39 d3                	cmp    ebx,edx
c001d4ad:	7e 1b                	jle    c001d4ca <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d4af:	8b 04 95 20 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ae0]
c001d4b6:	39 c8                	cmp    eax,ecx
c001d4b8:	77 0d                	ja     c001d4c7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d4ba:	8b 34 95 20 f3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0ce0]
c001d4c1:	01 c6                	add    esi,eax
c001d4c3:	39 ce                	cmp    esi,ecx
c001d4c5:	77 05                	ja     c001d4cc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d4c7:	42                   	inc    edx
c001d4c8:	eb e1                	jmp    c001d4ab <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d4ca:	31 c0                	xor    eax,eax
c001d4cc:	5b                   	pop    ebx
c001d4cd:	5e                   	pop    esi
c001d4ce:	c3                   	ret    

c001d4cf <Thr::getDriverNameFromAddress(unsigned long)>:
c001d4cf:	53                   	push   ebx
c001d4d0:	31 c0                	xor    eax,eax
c001d4d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d4d6:	8b 1d 00 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f300
c001d4dc:	39 c3                	cmp    ebx,eax
c001d4de:	7e 22                	jle    c001d502 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d4e0:	8b 14 85 20 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ae0]
c001d4e7:	39 ca                	cmp    edx,ecx
c001d4e9:	77 14                	ja     c001d4ff <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d4eb:	03 14 85 20 f3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0ce0]
c001d4f2:	39 ca                	cmp    edx,ecx
c001d4f4:	76 09                	jbe    c001d4ff <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d4f6:	8b 04 85 20 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08e0]
c001d4fd:	eb 05                	jmp    c001d504 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d4ff:	40                   	inc    eax
c001d500:	eb da                	jmp    c001d4dc <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d502:	31 c0                	xor    eax,eax
c001d504:	5b                   	pop    ebx
c001d505:	c3                   	ret    

c001d506 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d506:	53                   	push   ebx
c001d507:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d50b:	53                   	push   ebx
c001d50c:	e8 8c ff ff ff       	call   c001d49d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d511:	5a                   	pop    edx
c001d512:	31 d2                	xor    edx,edx
c001d514:	85 c0                	test   eax,eax
c001d516:	74 04                	je     c001d51c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d518:	89 da                	mov    edx,ebx
c001d51a:	29 c2                	sub    edx,eax
c001d51c:	89 d0                	mov    eax,edx
c001d51e:	5b                   	pop    ebx
c001d51f:	c3                   	ret    

c001d520 <Thr::loadDLL(char const*, bool)>:
c001d520:	55                   	push   ebp
c001d521:	57                   	push   edi
c001d522:	56                   	push   esi
c001d523:	53                   	push   ebx
c001d524:	81 ec 34 01 00 00    	sub    esp,0x134
c001d52a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d531:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d538:	56                   	push   esi
c001d539:	68 be c6 02 c0       	push   0xc002c6be
c001d53e:	e8 72 54 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001d543:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d54a:	e8 0e 24 ff ff       	call   c000f95d <malloc>
c001d54f:	83 c4 0c             	add    esp,0xc
c001d552:	89 c3                	mov    ebx,eax
c001d554:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001d55a:	56                   	push   esi
c001d55b:	50                   	push   eax
c001d55c:	e8 b3 59 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	85 db                	test   ebx,ebx
c001d566:	75 3c                	jne    c001d5a4 <Thr::loadDLL(char const*, bool)+0x84>
c001d568:	89 f8                	mov    eax,edi
c001d56a:	84 c0                	test   al,al
c001d56c:	0f 84 d2 01 00 00    	je     c001d744 <Thr::loadDLL(char const*, bool)+0x224>
c001d572:	55                   	push   ebp
c001d573:	55                   	push   ebp
c001d574:	68 cf c6 02 c0       	push   0xc002c6cf
c001d579:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d57d:	55                   	push   ebp
c001d57e:	e8 89 32 fe ff       	call   c000080c <strcpy>
c001d583:	58                   	pop    eax
c001d584:	5a                   	pop    edx
c001d585:	56                   	push   esi
c001d586:	55                   	push   ebp
c001d587:	e8 c0 33 fe ff       	call   c000094c <strcat>
c001d58c:	59                   	pop    ecx
c001d58d:	58                   	pop    eax
c001d58e:	68 e2 c6 02 c0       	push   0xc002c6e2
c001d593:	55                   	push   ebp
c001d594:	e8 b3 33 fe ff       	call   c000094c <strcat>
c001d599:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d59c:	e8 b2 cd ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	51                   	push   ecx
c001d5a5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d5a9:	50                   	push   eax
c001d5aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d5ae:	50                   	push   eax
c001d5af:	53                   	push   ebx
c001d5b0:	e8 6f 5c ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	85 db                	test   ebx,ebx
c001d5ba:	74 0c                	je     c001d5c8 <Thr::loadDLL(char const*, bool)+0xa8>
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d5c1:	53                   	push   ebx
c001d5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d5cd:	75 0a                	jne    c001d5d9 <Thr::loadDLL(char const*, bool)+0xb9>
c001d5cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5d3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d5d7:	75 3c                	jne    c001d615 <Thr::loadDLL(char const*, bool)+0xf5>
c001d5d9:	89 f8                	mov    eax,edi
c001d5db:	84 c0                	test   al,al
c001d5dd:	0f 84 49 01 00 00    	je     c001d72c <Thr::loadDLL(char const*, bool)+0x20c>
c001d5e3:	51                   	push   ecx
c001d5e4:	51                   	push   ecx
c001d5e5:	68 cf c6 02 c0       	push   0xc002c6cf
c001d5ea:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d5ee:	53                   	push   ebx
c001d5ef:	e8 18 32 fe ff       	call   c000080c <strcpy>
c001d5f4:	5d                   	pop    ebp
c001d5f5:	58                   	pop    eax
c001d5f6:	56                   	push   esi
c001d5f7:	53                   	push   ebx
c001d5f8:	e8 4f 33 fe ff       	call   c000094c <strcat>
c001d5fd:	58                   	pop    eax
c001d5fe:	5a                   	pop    edx
c001d5ff:	68 e2 c6 02 c0       	push   0xc002c6e2
c001d604:	53                   	push   ebx
c001d605:	e8 42 33 fe ff       	call   c000094c <strcat>
c001d60a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d60d:	e8 41 cd ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	52                   	push   edx
c001d616:	6a 03                	push   0x3
c001d618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d61c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d620:	05 ff 0f 00 00       	add    eax,0xfff
c001d625:	83 d2 00             	adc    edx,0x0
c001d628:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d62c:	50                   	push   eax
c001d62d:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c001d633:	e8 54 47 ff ff       	call   c0011d8c <VAS::allocatePages(int, int)>
c001d638:	59                   	pop    ecx
c001d639:	89 c3                	mov    ebx,eax
c001d63b:	5d                   	pop    ebp
c001d63c:	50                   	push   eax
c001d63d:	68 89 a8 02 c0       	push   0xc002a889
c001d642:	e8 6e 53 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001d647:	89 34 24             	mov    DWORD PTR [esp],esi
c001d64a:	e8 1d 31 fe ff       	call   c000076c <strlen>
c001d64f:	8b 2d 00 f3 02 c0    	mov    ebp,DWORD PTR ds:0xc002f300
c001d655:	40                   	inc    eax
c001d656:	89 04 24             	mov    DWORD PTR [esp],eax
c001d659:	e8 ff 22 ff ff       	call   c000f95d <malloc>
c001d65e:	89 04 ad 20 f7 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd08e0],eax
c001d665:	58                   	pop    eax
c001d666:	a1 00 f3 02 c0       	mov    eax,ds:0xc002f300
c001d66b:	5a                   	pop    edx
c001d66c:	56                   	push   esi
c001d66d:	ff 34 85 20 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08e0]
c001d674:	e8 93 31 fe ff       	call   c000080c <strcpy>
c001d679:	a1 00 f3 02 c0       	mov    eax,ds:0xc002f300
c001d67e:	8d 50 01             	lea    edx,[eax+0x1]
c001d681:	89 1c 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],ebx
c001d688:	89 15 00 f3 02 c0    	mov    DWORD PTR ds:0xc002f300,edx
c001d68e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d692:	83 c4 0c             	add    esp,0xc
c001d695:	89 14 85 20 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ce0],edx
c001d69c:	6a 01                	push   0x1
c001d69e:	53                   	push   ebx
c001d69f:	56                   	push   esi
c001d6a0:	e8 c2 f6 ff ff       	call   c001cd67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d6a5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d6b1:	0f 85 89 00 00 00    	jne    c001d740 <Thr::loadDLL(char const*, bool)+0x220>
c001d6b7:	89 f8                	mov    eax,edi
c001d6b9:	84 c0                	test   al,al
c001d6bb:	74 73                	je     c001d730 <Thr::loadDLL(char const*, bool)+0x210>
c001d6bd:	83 ec 0c             	sub    esp,0xc
c001d6c0:	68 e4 c6 02 c0       	push   0xc002c6e4
c001d6c5:	e8 89 cc ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d6ca:	83 c4 10             	add    esp,0x10
c001d6cd:	eb 61                	jmp    c001d730 <Thr::loadDLL(char const*, bool)+0x210>
c001d6cf:	50                   	push   eax
c001d6d0:	50                   	push   eax
c001d6d1:	89 e8                	mov    eax,ebp
c001d6d3:	c1 e0 0c             	shl    eax,0xc
c001d6d6:	01 d8                	add    eax,ebx
c001d6d8:	50                   	push   eax
c001d6d9:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c001d6df:	e8 10 42 ff ff       	call   c00118f4 <VAS::getPageTableEntry(unsigned long)>
c001d6e4:	83 c4 10             	add    esp,0x10
c001d6e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6e9:	a8 60                	test   al,0x60
c001d6eb:	75 11                	jne    c001d6fe <Thr::loadDLL(char const*, bool)+0x1de>
c001d6ed:	83 ec 0c             	sub    esp,0xc
c001d6f0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d6f5:	50                   	push   eax
c001d6f6:	e8 ed 25 ff ff       	call   c000fce8 <Phys::freePage(unsigned long)>
c001d6fb:	83 c4 10             	add    esp,0x10
c001d6fe:	45                   	inc    ebp
c001d6ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d703:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d707:	05 ff 0f 00 00       	add    eax,0xfff
c001d70c:	bf 00 00 00 00       	mov    edi,0x0
c001d711:	83 d2 00             	adc    edx,0x0
c001d714:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d718:	c1 ea 0c             	shr    edx,0xc
c001d71b:	39 c5                	cmp    ebp,eax
c001d71d:	89 d1                	mov    ecx,edx
c001d71f:	89 f8                	mov    eax,edi
c001d721:	19 c8                	sbb    eax,ecx
c001d723:	72 aa                	jb     c001d6cf <Thr::loadDLL(char const*, bool)+0x1af>
c001d725:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d72a:	75 18                	jne    c001d744 <Thr::loadDLL(char const*, bool)+0x224>
c001d72c:	31 db                	xor    ebx,ebx
c001d72e:	eb 14                	jmp    c001d744 <Thr::loadDLL(char const*, bool)+0x224>
c001d730:	83 ec 0c             	sub    esp,0xc
c001d733:	68 03 c7 02 c0       	push   0xc002c703
c001d738:	e8 16 cc ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	31 ed                	xor    ebp,ebp
c001d742:	eb bb                	jmp    c001d6ff <Thr::loadDLL(char const*, bool)+0x1df>
c001d744:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d74a:	89 d8                	mov    eax,ebx
c001d74c:	5b                   	pop    ebx
c001d74d:	5e                   	pop    esi
c001d74e:	5f                   	pop    edi
c001d74f:	5d                   	pop    ebp
c001d750:	c3                   	ret    

c001d751 <Thr::executeDLL(unsigned long, void*)>:
c001d751:	56                   	push   esi
c001d752:	53                   	push   ebx
c001d753:	52                   	push   edx
c001d754:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d758:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d75c:	85 db                	test   ebx,ebx
c001d75e:	75 10                	jne    c001d770 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d760:	83 ec 0c             	sub    esp,0xc
c001d763:	68 1f c7 02 c0       	push   0xc002c71f
c001d768:	e8 e6 cb ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	50                   	push   eax
c001d771:	50                   	push   eax
c001d772:	53                   	push   ebx
c001d773:	68 49 c7 02 c0       	push   0xc002c749
c001d778:	e8 38 52 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001d77d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d781:	89 d8                	mov    eax,ebx
c001d783:	83 c4 14             	add    esp,0x14
c001d786:	5b                   	pop    ebx
c001d787:	5e                   	pop    esi
c001d788:	ff e0                	jmp    eax

c001d78a <userModeEntryPoint(void*)>:
c001d78a:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001d78f:	48                   	dec    eax
c001d790:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001d795:	75 01                	jne    c001d798 <userModeEntryPoint(void*)+0xe>
c001d797:	fb                   	sti    
c001d798:	fb                   	sti    
c001d799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d79e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d7a1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d7a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7ab:	e9 7a 2b fe ff       	jmp    c000032a <goToUsermode>

c001d7b0 <changeTSS>:
c001d7b0:	83 ec 14             	sub    esp,0x14
c001d7b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d7bb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d7c0:	c1 e2 15             	shl    edx,0x15
c001d7c3:	29 d0                	sub    eax,edx
c001d7c5:	50                   	push   eax
c001d7c6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001d7cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7d1:	05 7c 11 00 00       	add    eax,0x117c
c001d7d6:	50                   	push   eax
c001d7d7:	e8 5c 37 ff ff       	call   c0010f38 <TSS::setESP(unsigned long)>
c001d7dc:	83 c4 1c             	add    esp,0x1c
c001d7df:	c3                   	ret    

c001d7e0 <switchToThread(ThreadControlBlock*)>:
c001d7e0:	57                   	push   edi
c001d7e1:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001d7e6:	56                   	push   esi
c001d7e7:	85 c0                	test   eax,eax
c001d7e9:	53                   	push   ebx
c001d7ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7ee:	0f 85 88 00 00 00    	jne    c001d87c <switchToThread(ThreadControlBlock*)+0x9c>
c001d7f4:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d7f7:	3c ff                	cmp    al,0xff
c001d7f9:	74 7d                	je     c001d878 <switchToThread(ThreadControlBlock*)+0x98>
c001d7fb:	0f b6 d0             	movzx  edx,al
c001d7fe:	b8 84 03 00 00       	mov    eax,0x384
c001d803:	29 d0                	sub    eax,edx
c001d805:	c1 e0 10             	shl    eax,0x10
c001d808:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d80b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d80e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001d813:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d819:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d820:	74 4a                	je     c001d86c <switchToThread(ThreadControlBlock*)+0x8c>
c001d822:	0f 31                	rdtsc  
c001d824:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001d829:	89 c6                	mov    esi,eax
c001d82b:	89 d7                	mov    edi,edx
c001d82d:	2b 35 f8 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002faf8
c001d833:	89 15 0c fb 02 c0    	mov    DWORD PTR ds:0xc002fb0c,edx
c001d839:	1b 3d fc fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fafc
c001d83f:	89 35 00 fb 02 c0    	mov    DWORD PTR ds:0xc002fb00,esi
c001d845:	a3 f8 fa 02 c0       	mov    ds:0xc002faf8,eax
c001d84a:	89 3d 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,edi
c001d850:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d856:	89 15 fc fa 02 c0    	mov    DWORD PTR ds:0xc002fafc,edx
c001d85c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d85f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d862:	01 c6                	add    esi,eax
c001d864:	11 d7                	adc    edi,edx
c001d866:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d869:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d86c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d870:	5b                   	pop    ebx
c001d871:	5e                   	pop    esi
c001d872:	5f                   	pop    edi
c001d873:	e9 ea 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d878:	31 c0                	xor    eax,eax
c001d87a:	eb 8f                	jmp    c001d80b <switchToThread(ThreadControlBlock*)+0x2b>
c001d87c:	5b                   	pop    ebx
c001d87d:	c7 05 c0 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x1
c001d887:	5e                   	pop    esi
c001d888:	5f                   	pop    edi
c001d889:	c3                   	ret    

c001d88a <Process::addArgs(char**)>:
c001d88a:	57                   	push   edi
c001d88b:	56                   	push   esi
c001d88c:	53                   	push   ebx
c001d88d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d891:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d895:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d89f:	85 ff                	test   edi,edi
c001d8a1:	74 3d                	je     c001d8e0 <Process::addArgs(char**)+0x56>
c001d8a3:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8a5:	85 c0                	test   eax,eax
c001d8a7:	74 37                	je     c001d8e0 <Process::addArgs(char**)+0x56>
c001d8a9:	31 db                	xor    ebx,ebx
c001d8ab:	83 ec 0c             	sub    esp,0xc
c001d8ae:	50                   	push   eax
c001d8af:	e8 b8 2e fe ff       	call   c000076c <strlen>
c001d8b4:	40                   	inc    eax
c001d8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8b8:	e8 a0 20 ff ff       	call   c000f95d <malloc>
c001d8bd:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d8c4:	5a                   	pop    edx
c001d8c5:	59                   	pop    ecx
c001d8c6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8c9:	43                   	inc    ebx
c001d8ca:	50                   	push   eax
c001d8cb:	e8 3c 2f fe ff       	call   c000080c <strcpy>
c001d8d0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8dc:	85 c0                	test   eax,eax
c001d8de:	75 cb                	jne    c001d8ab <Process::addArgs(char**)+0x21>
c001d8e0:	5b                   	pop    ebx
c001d8e1:	5e                   	pop    esi
c001d8e2:	5f                   	pop    edi
c001d8e3:	c3                   	ret    

c001d8e4 <Process::Process(char const*, Process*, char**)>:
c001d8e4:	56                   	push   esi
c001d8e5:	53                   	push   ebx
c001d8e6:	83 ec 14             	sub    esp,0x14
c001d8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ed:	05 0c 02 00 00       	add    eax,0x20c
c001d8f2:	bb 07 00 00 00       	mov    ebx,0x7
c001d8f7:	89 c6                	mov    esi,eax
c001d8f9:	85 db                	test   ebx,ebx
c001d8fb:	78 12                	js     c001d90f <Process::Process(char const*, Process*, char**)+0x2b>
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	56                   	push   esi
c001d901:	e8 f0 b7 00 00       	call   c00290f6 <ThreadControlBlock::ThreadControlBlock()>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	83 c6 63             	add    esi,0x63
c001d90c:	4b                   	dec    ebx
c001d90d:	eb ea                	jmp    c001d8f9 <Process::Process(char const*, Process*, char**)+0x15>
c001d90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d913:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d91a:	83 ec 0c             	sub    esp,0xc
c001d91d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d921:	e8 b6 c8 ff ff       	call   c001a1dc <Krnl::newProcessEnv(Process*)>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	89 c2                	mov    edx,eax
c001d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d939:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d942:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001d947:	8d 50 01             	lea    edx,[eax+0x1]
c001d94a:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001d950:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d954:	89 02                	mov    DWORD PTR [edx],eax
c001d956:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d95e:	83 ec 0c             	sub    esp,0xc
c001d961:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d965:	e8 f3 1f ff ff       	call   c000f95d <malloc>
c001d96a:	83 c4 10             	add    esp,0x10
c001d96d:	89 c3                	mov    ebx,eax
c001d96f:	83 ec 08             	sub    esp,0x8
c001d972:	6a 00                	push   0x0
c001d974:	53                   	push   ebx
c001d975:	e8 ba 47 ff ff       	call   c0012134 <VAS::VAS(bool)>
c001d97a:	83 c4 10             	add    esp,0x10
c001d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d981:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d999:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d99d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9ad:	85 c0                	test   eax,eax
c001d9af:	74 42                	je     c001d9f3 <Process::Process(char const*, Process*, char**)+0x10f>
c001d9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9bb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9d5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9df:	05 0c 01 00 00       	add    eax,0x10c
c001d9e4:	83 ec 08             	sub    esp,0x8
c001d9e7:	52                   	push   edx
c001d9e8:	50                   	push   eax
c001d9e9:	e8 1e 2e fe ff       	call   c000080c <strcpy>
c001d9ee:	83 c4 10             	add    esp,0x10
c001d9f1:	eb 63                	jmp    c001da56 <Process::Process(char const*, Process*, char**)+0x172>
c001d9f3:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d9fb:	83 ec 0c             	sub    esp,0xc
c001d9fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da02:	e8 56 1f ff ff       	call   c000f95d <malloc>
c001da07:	83 c4 10             	add    esp,0x10
c001da0a:	89 c3                	mov    ebx,eax
c001da0c:	83 ec 08             	sub    esp,0x8
c001da0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da13:	53                   	push   ebx
c001da14:	e8 31 32 ff ff       	call   c0010c4a <VgaText::VgaText(char const*)>
c001da19:	83 c4 10             	add    esp,0x10
c001da1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da20:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da30:	83 ec 0c             	sub    esp,0xc
c001da33:	50                   	push   eax
c001da34:	e8 d0 29 ff ff       	call   c0010409 <addToTerminalCycle(VgaText*)>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da40:	05 0c 01 00 00       	add    eax,0x10c
c001da45:	83 ec 08             	sub    esp,0x8
c001da48:	68 68 c7 02 c0       	push   0xc002c768
c001da4d:	50                   	push   eax
c001da4e:	e8 b9 2d fe ff       	call   c000080c <strcpy>
c001da53:	83 c4 10             	add    esp,0x10
c001da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5a:	83 c0 0c             	add    eax,0xc
c001da5d:	83 ec 08             	sub    esp,0x8
c001da60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da64:	50                   	push   eax
c001da65:	e8 a2 2d fe ff       	call   c000080c <strcpy>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	83 ec 08             	sub    esp,0x8
c001da70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da78:	e8 0d fe ff ff       	call   c001d88a <Process::addArgs(char**)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	83 ec 08             	sub    esp,0x8
c001da83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da8b:	e8 a1 ed ff ff       	call   c001c831 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da97:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da9b:	83 f0 01             	xor    eax,0x1
c001da9e:	88 c2                	mov    dl,al
c001daa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa4:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001daaa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001daaf:	83 ec 08             	sub    esp,0x8
c001dab2:	50                   	push   eax
c001dab3:	68 c0 c7 02 c0       	push   0xc002c7c0
c001dab8:	e8 f8 4e ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	90                   	nop
c001dac1:	83 c4 14             	add    esp,0x14
c001dac4:	5b                   	pop    ebx
c001dac5:	5e                   	pop    esi
c001dac6:	c3                   	ret    
c001dac7:	90                   	nop

c001dac8 <Process::Process(bool, char const*, Process*, char**)>:
c001dac8:	56                   	push   esi
c001dac9:	53                   	push   ebx
c001daca:	83 ec 24             	sub    esp,0x24
c001dacd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dad1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dad5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dad9:	05 0c 02 00 00       	add    eax,0x20c
c001dade:	bb 07 00 00 00       	mov    ebx,0x7
c001dae3:	89 c6                	mov    esi,eax
c001dae5:	85 db                	test   ebx,ebx
c001dae7:	78 12                	js     c001dafb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	56                   	push   esi
c001daed:	e8 04 b6 00 00       	call   c00290f6 <ThreadControlBlock::ThreadControlBlock()>
c001daf2:	83 c4 10             	add    esp,0x10
c001daf5:	83 c6 63             	add    esi,0x63
c001daf8:	4b                   	dec    ebx
c001daf9:	eb ea                	jmp    c001dae5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dafb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daff:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db06:	83 ec 0c             	sub    esp,0xc
c001db09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db0d:	e8 ca c6 ff ff       	call   c001a1dc <Krnl::newProcessEnv(Process*)>
c001db12:	83 c4 10             	add    esp,0x10
c001db15:	89 c2                	mov    edx,eax
c001db17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db1b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db25:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db2e:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001db33:	8d 50 01             	lea    edx,[eax+0x1]
c001db36:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001db3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db40:	89 02                	mov    DWORD PTR [edx],eax
c001db42:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db4a:	83 ec 0c             	sub    esp,0xc
c001db4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db51:	e8 07 1e ff ff       	call   c000f95d <malloc>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	89 c3                	mov    ebx,eax
c001db5b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db60:	83 ec 08             	sub    esp,0x8
c001db63:	50                   	push   eax
c001db64:	53                   	push   ebx
c001db65:	e8 ca 45 ff ff       	call   c0012134 <VAS::VAS(bool)>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db71:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db89:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db8d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db9d:	85 c0                	test   eax,eax
c001db9f:	74 42                	je     c001dbe3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbab:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbc5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcf:	05 0c 01 00 00       	add    eax,0x10c
c001dbd4:	83 ec 08             	sub    esp,0x8
c001dbd7:	52                   	push   edx
c001dbd8:	50                   	push   eax
c001dbd9:	e8 2e 2c fe ff       	call   c000080c <strcpy>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	eb 63                	jmp    c001dc46 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dbe3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dbeb:	83 ec 0c             	sub    esp,0xc
c001dbee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbf2:	e8 66 1d ff ff       	call   c000f95d <malloc>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	89 c3                	mov    ebx,eax
c001dbfc:	83 ec 08             	sub    esp,0x8
c001dbff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc03:	53                   	push   ebx
c001dc04:	e8 41 30 ff ff       	call   c0010c4a <VgaText::VgaText(char const*)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc10:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	50                   	push   eax
c001dc24:	e8 e0 27 ff ff       	call   c0010409 <addToTerminalCycle(VgaText*)>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc30:	05 0c 01 00 00       	add    eax,0x10c
c001dc35:	83 ec 08             	sub    esp,0x8
c001dc38:	68 68 c7 02 c0       	push   0xc002c768
c001dc3d:	50                   	push   eax
c001dc3e:	e8 c9 2b fe ff       	call   c000080c <strcpy>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4a:	83 c0 0c             	add    eax,0xc
c001dc4d:	83 ec 08             	sub    esp,0x8
c001dc50:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc54:	50                   	push   eax
c001dc55:	e8 b2 2b fe ff       	call   c000080c <strcpy>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc68:	e8 1d fc ff ff       	call   c001d88a <Process::addArgs(char**)>
c001dc6d:	83 c4 10             	add    esp,0x10
c001dc70:	90                   	nop
c001dc71:	83 c4 24             	add    esp,0x24
c001dc74:	5b                   	pop    ebx
c001dc75:	5e                   	pop    esi
c001dc76:	c3                   	ret    

c001dc77 <taskStartupFunction>:
c001dc77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc7c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dc7f:	c3                   	ret    

c001dc80 <Semaphore::Semaphore(int)>:
c001dc80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc88:	89 10                	mov    DWORD PTR [eax],edx
c001dc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc8e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dc95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dca4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dcab:	90                   	nop
c001dcac:	c3                   	ret    
c001dcad:	90                   	nop

c001dcae <Mutex::Mutex()>:
c001dcae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcb2:	6a 01                	push   0x1
c001dcb4:	50                   	push   eax
c001dcb5:	e8 c6 ff ff ff       	call   c001dc80 <Semaphore::Semaphore(int)>
c001dcba:	83 c4 08             	add    esp,0x8
c001dcbd:	90                   	nop
c001dcbe:	c3                   	ret    
c001dcbf:	90                   	nop

c001dcc0 <Process::createThread(void (*)(void*), void*, int)>:
c001dcc0:	55                   	push   ebp
c001dcc1:	31 c9                	xor    ecx,ecx
c001dcc3:	57                   	push   edi
c001dcc4:	56                   	push   esi
c001dcc5:	53                   	push   ebx
c001dcc6:	83 ec 1c             	sub    esp,0x1c
c001dcc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dccd:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dcd4:	89 f2                	mov    edx,esi
c001dcd6:	0f b7 c2             	movzx  eax,dx
c001dcd9:	83 e2 01             	and    edx,0x1
c001dcdc:	74 16                	je     c001dcf4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dcde:	d1 f8                	sar    eax,1
c001dce0:	41                   	inc    ecx
c001dce1:	89 c2                	mov    edx,eax
c001dce3:	83 f9 10             	cmp    ecx,0x10
c001dce6:	75 ee                	jne    c001dcd6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dce8:	83 c4 1c             	add    esp,0x1c
c001dceb:	31 db                	xor    ebx,ebx
c001dced:	89 d8                	mov    eax,ebx
c001dcef:	5b                   	pop    ebx
c001dcf0:	5e                   	pop    esi
c001dcf1:	5f                   	pop    edi
c001dcf2:	5d                   	pop    ebp
c001dcf3:	c3                   	ret    
c001dcf4:	b8 01 00 00 00       	mov    eax,0x1
c001dcf9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dcfc:	d3 e0                	shl    eax,cl
c001dcfe:	09 c6                	or     esi,eax
c001dd00:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dd03:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dd0a:	89 c6                	mov    esi,eax
c001dd0c:	c1 e6 05             	shl    esi,0x5
c001dd0f:	01 f0                	add    eax,esi
c001dd11:	01 d8                	add    eax,ebx
c001dd13:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dd1a:	75 0a                	jne    c001dd26 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dd1c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dd26:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd2c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dd30:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dd33:	01 ca                	add    edx,ecx
c001dd35:	83 ec 08             	sub    esp,0x8
c001dd38:	89 d0                	mov    eax,edx
c001dd3a:	c1 e0 05             	shl    eax,0x5
c001dd3d:	01 d0                	add    eax,edx
c001dd3f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dd43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd47:	01 d8                	add    eax,ebx
c001dd49:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dd4f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dd55:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dd5b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dd61:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dd67:	89 cd                	mov    ebp,ecx
c001dd69:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dd6d:	f7 dd                	neg    ebp
c001dd6f:	c1 e5 15             	shl    ebp,0x15
c001dd72:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dd78:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dd7e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dd88:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dd8e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dd98:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dda2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dda6:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001ddad:	53                   	push   ebx
c001ddae:	68 e4 fa 02 c0       	push   0xc002fae4
c001ddb3:	e8 f8 b0 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddb8:	89 d8                	mov    eax,ebx
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	83 c4 1c             	add    esp,0x1c
c001ddc0:	5b                   	pop    ebx
c001ddc1:	5e                   	pop    esi
c001ddc2:	5f                   	pop    edi
c001ddc3:	5d                   	pop    ebp
c001ddc4:	c3                   	ret    
c001ddc5:	90                   	nop

c001ddc6 <Process::createUserThread()>:
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	68 80 00 00 00       	push   0x80
c001ddce:	6a 00                	push   0x0
c001ddd0:	68 8a d7 01 c0       	push   0xc001d78a
c001ddd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddd9:	e8 e2 fe ff ff       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c001ddde:	83 c4 1c             	add    esp,0x1c
c001dde1:	c3                   	ret    

c001dde2 <setupMultitasking(void (*)())>:
c001dde2:	56                   	push   esi
c001dde3:	53                   	push   ebx
c001dde4:	51                   	push   ecx
c001dde5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dde9:	eb 10                	jmp    c001ddfb <setupMultitasking(void (*)())+0x19>
c001ddeb:	83 ec 0c             	sub    esp,0xc
c001ddee:	68 e4 fa 02 c0       	push   0xc002fae4
c001ddf3:	e8 0a b0 00 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddf8:	83 c4 10             	add    esp,0x10
c001ddfb:	83 ec 0c             	sub    esp,0xc
c001ddfe:	68 e4 fa 02 c0       	push   0xc002fae4
c001de03:	e8 d6 af 00 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	84 c0                	test   al,al
c001de0d:	74 dc                	je     c001ddeb <setupMultitasking(void (*)())+0x9>
c001de0f:	83 ec 0c             	sub    esp,0xc
c001de12:	68 3f 07 00 00       	push   0x73f
c001de17:	e8 41 1b ff ff       	call   c000f95d <malloc>
c001de1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de23:	89 c3                	mov    ebx,eax
c001de25:	6a 00                	push   0x0
c001de27:	68 6c c7 02 c0       	push   0xc002c76c
c001de2c:	6a 01                	push   0x1
c001de2e:	50                   	push   eax
c001de2f:	e8 94 fc ff ff       	call   c001dac8 <Process::Process(bool, char const*, Process*, char**)>
c001de34:	83 c4 14             	add    esp,0x14
c001de37:	89 1d f0 fa 02 c0    	mov    DWORD PTR ds:0xc002faf0,ebx
c001de3d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001de43:	e8 cf 28 ff ff       	call   c0010717 <setActiveTerminal(VgaText*)>
c001de48:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001de50:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001de5a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de60:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001de63:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001de6d:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001de73:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001de79:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001de83:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001de8d:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001de97:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001de9d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dea7:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dead:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001deb7:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001debd:	58                   	pop    eax
c001debe:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dec4:	5a                   	pop    edx
c001dec5:	68 68 c7 02 c0       	push   0xc002c768
c001deca:	50                   	push   eax
c001decb:	e8 3c 29 fe ff       	call   c000080c <strcpy>
c001ded0:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001ded7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dedb:	83 c4 14             	add    esp,0x14
c001dede:	5b                   	pop    ebx
c001dedf:	5e                   	pop    esi
c001dee0:	e9 6f 24 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dee5 <schedule()>:
c001dee5:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001deea:	85 c0                	test   eax,eax
c001deec:	74 0b                	je     c001def9 <schedule()+0x14>
c001deee:	c7 05 c0 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x1
c001def8:	c3                   	ret    
c001def9:	53                   	push   ebx
c001defa:	83 ec 14             	sub    esp,0x14
c001defd:	68 e4 fa 02 c0       	push   0xc002fae4
c001df02:	e8 d7 ae 00 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df07:	83 c4 10             	add    esp,0x10
c001df0a:	84 c0                	test   al,al
c001df0c:	75 38                	jne    c001df46 <schedule()+0x61>
c001df0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df16:	4a                   	dec    edx
c001df17:	74 32                	je     c001df4b <schedule()+0x66>
c001df19:	83 ec 0c             	sub    esp,0xc
c001df1c:	68 e4 fa 02 c0       	push   0xc002fae4
c001df21:	e8 d4 ae 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df26:	c7 04 24 e4 fa 02 c0 	mov    DWORD PTR [esp],0xc002fae4
c001df2d:	89 c3                	mov    ebx,eax
c001df2f:	e8 ce ae 00 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df34:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001df3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df3e:	e8 9d f8 ff ff       	call   c001d7e0 <switchToThread(ThreadControlBlock*)>
c001df43:	83 c4 10             	add    esp,0x10
c001df46:	83 c4 08             	add    esp,0x8
c001df49:	5b                   	pop    ebx
c001df4a:	c3                   	ret    
c001df4b:	83 ec 08             	sub    esp,0x8
c001df4e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001df55:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df5b:	68 e4 fa 02 c0       	push   0xc002fae4
c001df60:	e8 4b af 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	eb af                	jmp    c001df19 <schedule()+0x34>

c001df6a <Semaphore::tryAcquire()>:
c001df6a:	53                   	push   ebx
c001df6b:	83 ec 08             	sub    esp,0x8
c001df6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df72:	fa                   	cli    
c001df73:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001df78:	8d 50 01             	lea    edx,[eax+0x1]
c001df7b:	89 15 c8 fa 02 c0    	mov    DWORD PTR ds:0xc002fac8,edx
c001df81:	8b 15 c4 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac4
c001df87:	8d 5a 01             	lea    ebx,[edx+0x1]
c001df8a:	89 1d c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,ebx
c001df90:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001df93:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001df95:	7c 2a                	jl     c001dfc1 <Semaphore::tryAcquire()+0x57>
c001df97:	89 15 c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,edx
c001df9d:	85 d2                	test   edx,edx
c001df9f:	75 0a                	jne    c001dfab <Semaphore::tryAcquire()+0x41>
c001dfa1:	8b 15 c0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac0
c001dfa7:	85 d2                	test   edx,edx
c001dfa9:	75 5b                	jne    c001e006 <Semaphore::tryAcquire()+0x9c>
c001dfab:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001dfb0:	85 c0                	test   eax,eax
c001dfb2:	74 07                	je     c001dfbb <Semaphore::tryAcquire()+0x51>
c001dfb4:	31 c0                	xor    eax,eax
c001dfb6:	83 c4 08             	add    esp,0x8
c001dfb9:	5b                   	pop    ebx
c001dfba:	c3                   	ret    
c001dfbb:	fb                   	sti    
c001dfbc:	83 c4 08             	add    esp,0x8
c001dfbf:	5b                   	pop    ebx
c001dfc0:	c3                   	ret    
c001dfc1:	43                   	inc    ebx
c001dfc2:	89 15 c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,edx
c001dfc8:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dfcb:	85 d2                	test   edx,edx
c001dfcd:	75 1f                	jne    c001dfee <Semaphore::tryAcquire()+0x84>
c001dfcf:	8b 0d c0 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fac0
c001dfd5:	85 c9                	test   ecx,ecx
c001dfd7:	74 15                	je     c001dfee <Semaphore::tryAcquire()+0x84>
c001dfd9:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001dfe3:	e8 fd fe ff ff       	call   c001dee5 <schedule()>
c001dfe8:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001dfed:	48                   	dec    eax
c001dfee:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001dff3:	85 c0                	test   eax,eax
c001dff5:	75 08                	jne    c001dfff <Semaphore::tryAcquire()+0x95>
c001dff7:	fb                   	sti    
c001dff8:	b0 01                	mov    al,0x1
c001dffa:	83 c4 08             	add    esp,0x8
c001dffd:	5b                   	pop    ebx
c001dffe:	c3                   	ret    
c001dfff:	b0 01                	mov    al,0x1
c001e001:	83 c4 08             	add    esp,0x8
c001e004:	5b                   	pop    ebx
c001e005:	c3                   	ret    
c001e006:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e010:	e8 d0 fe ff ff       	call   c001dee5 <schedule()>
c001e015:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e01a:	48                   	dec    eax
c001e01b:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e020:	85 c0                	test   eax,eax
c001e022:	75 90                	jne    c001dfb4 <Semaphore::tryAcquire()+0x4a>
c001e024:	eb 95                	jmp    c001dfbb <Semaphore::tryAcquire()+0x51>

c001e026 <Semaphore::assertLocked(char const*)>:
c001e026:	83 ec 0c             	sub    esp,0xc
c001e029:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e02d:	fa                   	cli    
c001e02e:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e034:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e039:	8d 48 01             	lea    ecx,[eax+0x1]
c001e03c:	89 0d c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,ecx
c001e042:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e044:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e047:	7c 24                	jl     c001e06d <Semaphore::assertLocked(char const*)+0x47>
c001e049:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e04e:	85 c0                	test   eax,eax
c001e050:	75 09                	jne    c001e05b <Semaphore::assertLocked(char const*)+0x35>
c001e052:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001e057:	85 c0                	test   eax,eax
c001e059:	75 29                	jne    c001e084 <Semaphore::assertLocked(char const*)+0x5e>
c001e05b:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e060:	48                   	dec    eax
c001e061:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e066:	75 01                	jne    c001e069 <Semaphore::assertLocked(char const*)+0x43>
c001e068:	fb                   	sti    
c001e069:	83 c4 0c             	add    esp,0xc
c001e06c:	c3                   	ret    
c001e06d:	83 ec 0c             	sub    esp,0xc
c001e070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e074:	e8 da c2 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001e079:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	48                   	dec    eax
c001e082:	eb c5                	jmp    c001e049 <Semaphore::assertLocked(char const*)+0x23>
c001e084:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e08e:	e8 52 fe ff ff       	call   c001dee5 <schedule()>
c001e093:	eb c6                	jmp    c001e05b <Semaphore::assertLocked(char const*)+0x35>

c001e095 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e095:	83 ec 0c             	sub    esp,0xc
c001e098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e09d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0a4:	e8 3c fe ff ff       	call   c001dee5 <schedule()>
c001e0a9:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e0ae:	48                   	dec    eax
c001e0af:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e0b4:	75 01                	jne    c001e0b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001e0b6:	fb                   	sti    
c001e0b7:	83 c4 0c             	add    esp,0xc
c001e0ba:	c3                   	ret    

c001e0bb <blockTask(TaskState)>:
c001e0bb:	83 ec 0c             	sub    esp,0xc
c001e0be:	fa                   	cli    
c001e0bf:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e0c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0d1:	e8 0f fe ff ff       	call   c001dee5 <schedule()>
c001e0d6:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e0db:	48                   	dec    eax
c001e0dc:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e0e1:	75 01                	jne    c001e0e4 <blockTask(TaskState)+0x29>
c001e0e3:	fb                   	sti    
c001e0e4:	83 c4 0c             	add    esp,0xc
c001e0e7:	c3                   	ret    

c001e0e8 <waitTask(int, int*, int)>:
c001e0e8:	83 ec 18             	sub    esp,0x18
c001e0eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0f4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e0f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e100:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e103:	6a 07                	push   0x7
c001e105:	e8 b1 ff ff ff       	call   c001e0bb <blockTask(TaskState)>
c001e10a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e10f:	83 c4 10             	add    esp,0x10
c001e112:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e115:	85 d2                	test   edx,edx
c001e117:	74 0a                	je     c001e123 <waitTask(int, int*, int)+0x3b>
c001e119:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e11c:	89 02                	mov    DWORD PTR [edx],eax
c001e11e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e123:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e126:	83 c4 0c             	add    esp,0xc
c001e129:	c3                   	ret    

c001e12a <nanoSleepUntil(unsigned long long)>:
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e131:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e135:	3b 05 30 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec30
c001e13b:	89 d1                	mov    ecx,edx
c001e13d:	1b 0d 34 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec34
c001e143:	73 04                	jae    c001e149 <nanoSleepUntil(unsigned long long)+0x1f>
c001e145:	83 c4 0c             	add    esp,0xc
c001e148:	c3                   	ret    
c001e149:	fa                   	cli    
c001e14a:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e150:	83 ec 08             	sub    esp,0x8
c001e153:	ff 05 c4 fa 02 c0    	inc    DWORD PTR ds:0xc002fac4
c001e159:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e15f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e162:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e165:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e16b:	68 d8 fa 02 c0       	push   0xc002fad8
c001e170:	e8 3b ad 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e175:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e17c:	e8 3a ff ff ff       	call   c001e0bb <blockTask(TaskState)>
c001e181:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e186:	83 c4 10             	add    esp,0x10
c001e189:	48                   	dec    eax
c001e18a:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e18f:	85 c0                	test   eax,eax
c001e191:	75 09                	jne    c001e19c <nanoSleepUntil(unsigned long long)+0x72>
c001e193:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001e198:	85 c0                	test   eax,eax
c001e19a:	75 12                	jne    c001e1ae <nanoSleepUntil(unsigned long long)+0x84>
c001e19c:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e1a1:	48                   	dec    eax
c001e1a2:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e1a7:	75 9c                	jne    c001e145 <nanoSleepUntil(unsigned long long)+0x1b>
c001e1a9:	fb                   	sti    
c001e1aa:	83 c4 0c             	add    esp,0xc
c001e1ad:	c3                   	ret    
c001e1ae:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e1b8:	e8 28 fd ff ff       	call   c001dee5 <schedule()>
c001e1bd:	eb dd                	jmp    c001e19c <nanoSleepUntil(unsigned long long)+0x72>

c001e1bf <nanoSleep(unsigned long long)>:
c001e1bf:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c001e1c4:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c001e1ca:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1ce:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1d2:	e9 53 ff ff ff       	jmp    c001e12a <nanoSleepUntil(unsigned long long)>

c001e1d7 <sleep(unsigned long long)>:
c001e1d7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1df:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1e4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1e8:	01 ca                	add    edx,ecx
c001e1ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1f2:	eb cb                	jmp    c001e1bf <nanoSleep(unsigned long long)>

c001e1f4 <Semaphore::acquire()>:
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1fb:	fa                   	cli    
c001e1fc:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e201:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e207:	8d 48 01             	lea    ecx,[eax+0x1]
c001e20a:	89 0d c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,ecx
c001e210:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e213:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e215:	7d 28                	jge    c001e23f <Semaphore::acquire()+0x4b>
c001e217:	41                   	inc    ecx
c001e218:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e21b:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e220:	85 c0                	test   eax,eax
c001e222:	75 09                	jne    c001e22d <Semaphore::acquire()+0x39>
c001e224:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001e229:	85 c0                	test   eax,eax
c001e22b:	75 5d                	jne    c001e28a <Semaphore::acquire()+0x96>
c001e22d:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e232:	48                   	dec    eax
c001e233:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e238:	75 01                	jne    c001e23b <Semaphore::acquire()+0x47>
c001e23a:	fb                   	sti    
c001e23b:	83 c4 0c             	add    esp,0xc
c001e23e:	c3                   	ret    
c001e23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e244:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e24b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e24e:	85 c9                	test   ecx,ecx
c001e250:	74 49                	je     c001e29b <Semaphore::acquire()+0xa7>
c001e252:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e255:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e25b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e269:	68 e8 c7 02 c0       	push   0xc002c7e8
c001e26e:	e8 42 47 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001e273:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e27a:	e8 3c fe ff ff       	call   c001e0bb <blockTask(TaskState)>
c001e27f:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	48                   	dec    eax
c001e288:	eb 91                	jmp    c001e21b <Semaphore::acquire()+0x27>
c001e28a:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e294:	e8 4c fc ff ff       	call   c001dee5 <schedule()>
c001e299:	eb 92                	jmp    c001e22d <Semaphore::acquire()+0x39>
c001e29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e2a3:	eb b9                	jmp    c001e25e <Semaphore::acquire()+0x6a>

c001e2a5 <taskReturned>:
c001e2a5:	83 ec 18             	sub    esp,0x18
c001e2a8:	68 08 c8 02 c0       	push   0xc002c808
c001e2ad:	e8 a1 c0 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	83 ec 0c             	sub    esp,0xc
c001e2b8:	6a 02                	push   0x2
c001e2ba:	e8 fc fd ff ff       	call   c001e0bb <blockTask(TaskState)>
c001e2bf:	fa                   	cli    
c001e2c0:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e2c6:	e8 1a fc ff ff       	call   c001dee5 <schedule()>
c001e2cb:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	48                   	dec    eax
c001e2d4:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e2d9:	85 c0                	test   eax,eax
c001e2db:	75 d8                	jne    c001e2b5 <taskReturned+0x10>
c001e2dd:	fb                   	sti    
c001e2de:	eb d5                	jmp    c001e2b5 <taskReturned+0x10>

c001e2e0 <Thr::processFromPID(int)>:
c001e2e0:	57                   	push   edi
c001e2e1:	56                   	push   esi
c001e2e2:	53                   	push   ebx
c001e2e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2e7:	fa                   	cli    
c001e2e8:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e2ee:	83 ec 0c             	sub    esp,0xc
c001e2f1:	68 e4 fa 02 c0       	push   0xc002fae4
c001e2f6:	e8 ff aa 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2fb:	83 c4 10             	add    esp,0x10
c001e2fe:	89 c7                	mov    edi,eax
c001e300:	eb 14                	jmp    c001e316 <Thr::processFromPID(int)+0x36>
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	68 e4 fa 02 c0       	push   0xc002fae4
c001e30a:	e8 eb aa 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e30f:	83 c4 10             	add    esp,0x10
c001e312:	39 f8                	cmp    eax,edi
c001e314:	74 49                	je     c001e35f <Thr::processFromPID(int)+0x7f>
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	68 e4 fa 02 c0       	push   0xc002fae4
c001e31e:	e8 d7 aa 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e323:	c7 04 24 e4 fa 02 c0 	mov    DWORD PTR [esp],0xc002fae4
c001e32a:	89 c3                	mov    ebx,eax
c001e32c:	e8 d1 aa 00 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e331:	58                   	pop    eax
c001e332:	5a                   	pop    edx
c001e333:	53                   	push   ebx
c001e334:	68 e4 fa 02 c0       	push   0xc002fae4
c001e339:	e8 72 ab 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e33e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e341:	83 c4 10             	add    esp,0x10
c001e344:	39 30                	cmp    DWORD PTR [eax],esi
c001e346:	75 ba                	jne    c001e302 <Thr::processFromPID(int)+0x22>
c001e348:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e34d:	48                   	dec    eax
c001e34e:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e353:	74 07                	je     c001e35c <Thr::processFromPID(int)+0x7c>
c001e355:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e358:	5b                   	pop    ebx
c001e359:	5e                   	pop    esi
c001e35a:	5f                   	pop    edi
c001e35b:	c3                   	ret    
c001e35c:	fb                   	sti    
c001e35d:	eb f6                	jmp    c001e355 <Thr::processFromPID(int)+0x75>
c001e35f:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e364:	48                   	dec    eax
c001e365:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e36a:	75 05                	jne    c001e371 <Thr::processFromPID(int)+0x91>
c001e36c:	fb                   	sti    
c001e36d:	5b                   	pop    ebx
c001e36e:	5e                   	pop    esi
c001e36f:	5f                   	pop    edi
c001e370:	c3                   	ret    
c001e371:	5b                   	pop    ebx
c001e372:	31 c0                	xor    eax,eax
c001e374:	5e                   	pop    esi
c001e375:	5f                   	pop    edi
c001e376:	c3                   	ret    

c001e377 <unblockTask(ThreadControlBlock*)>:
c001e377:	53                   	push   ebx
c001e378:	83 ec 08             	sub    esp,0x8
c001e37b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e37f:	fa                   	cli    
c001e380:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e386:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e389:	85 c0                	test   eax,eax
c001e38b:	74 5a                	je     c001e3e7 <unblockTask(ThreadControlBlock*)+0x70>
c001e38d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e390:	48                   	dec    eax
c001e391:	74 31                	je     c001e3c4 <unblockTask(ThreadControlBlock*)+0x4d>
c001e393:	83 ec 0c             	sub    esp,0xc
c001e396:	68 e4 fa 02 c0       	push   0xc002fae4
c001e39b:	e8 5a aa 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	85 c0                	test   eax,eax
c001e3a5:	75 17                	jne    c001e3be <unblockTask(ThreadControlBlock*)+0x47>
c001e3a7:	eb 50                	jmp    c001e3f9 <unblockTask(ThreadControlBlock*)+0x82>
c001e3a9:	83 ec 08             	sub    esp,0x8
c001e3ac:	50                   	push   eax
c001e3ad:	68 e4 fa 02 c0       	push   0xc002fae4
c001e3b2:	e8 cb ad 00 00       	call   c0029182 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	85 c0                	test   eax,eax
c001e3bc:	74 3b                	je     c001e3f9 <unblockTask(ThreadControlBlock*)+0x82>
c001e3be:	39 c3                	cmp    ebx,eax
c001e3c0:	75 e7                	jne    c001e3a9 <unblockTask(ThreadControlBlock*)+0x32>
c001e3c2:	eb 10                	jmp    c001e3d4 <unblockTask(ThreadControlBlock*)+0x5d>
c001e3c4:	83 ec 0c             	sub    esp,0xc
c001e3c7:	68 8a c7 02 c0       	push   0xc002c78a
c001e3cc:	e8 e4 45 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001e3d1:	83 c4 10             	add    esp,0x10
c001e3d4:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e3d9:	48                   	dec    eax
c001e3da:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e3df:	75 01                	jne    c001e3e2 <unblockTask(ThreadControlBlock*)+0x6b>
c001e3e1:	fb                   	sti    
c001e3e2:	83 c4 08             	add    esp,0x8
c001e3e5:	5b                   	pop    ebx
c001e3e6:	c3                   	ret    
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	68 73 c7 02 c0       	push   0xc002c773
c001e3ef:	e8 c1 45 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	eb db                	jmp    c001e3d4 <unblockTask(ThreadControlBlock*)+0x5d>
c001e3f9:	83 ec 08             	sub    esp,0x8
c001e3fc:	53                   	push   ebx
c001e3fd:	68 e4 fa 02 c0       	push   0xc002fae4
c001e402:	e8 a9 aa 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	eb c8                	jmp    c001e3d4 <unblockTask(ThreadControlBlock*)+0x5d>

c001e40c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e40c:	55                   	push   ebp
c001e40d:	57                   	push   edi
c001e40e:	56                   	push   esi
c001e40f:	53                   	push   ebx
c001e410:	83 ec 1c             	sub    esp,0x1c
c001e413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e417:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e41a:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e420:	85 ff                	test   edi,edi
c001e422:	7e 20                	jle    c001e444 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e424:	31 f6                	xor    esi,esi
c001e426:	83 ec 0c             	sub    esp,0xc
c001e429:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e430:	46                   	inc    esi
c001e431:	e8 37 15 ff ff       	call   c000f96d <free>
c001e436:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e439:	83 c4 10             	add    esp,0x10
c001e43c:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e442:	7f e2                	jg     c001e426 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e444:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e44e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e453:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e456:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e459:	d3 c0                	rol    eax,cl
c001e45b:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e462:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e465:	89 f7                	mov    edi,esi
c001e467:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e46f:	0f 85 64 01 00 00    	jne    c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e475:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e47b:	85 ed                	test   ebp,ebp
c001e47d:	74 1b                	je     c001e49a <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e47f:	83 ec 0c             	sub    esp,0xc
c001e482:	55                   	push   ebp
c001e483:	e8 70 bc ff ff       	call   c001a0f8 <EnvVarContainer::~EnvVarContainer()>
c001e488:	59                   	pop    ecx
c001e489:	5e                   	pop    esi
c001e48a:	6a 0c                	push   0xc
c001e48c:	55                   	push   ebp
c001e48d:	e8 4b 44 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c001e492:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e495:	83 c4 10             	add    esp,0x10
c001e498:	89 f7                	mov    edi,esi
c001e49a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4a0:	85 c0                	test   eax,eax
c001e4a2:	0f 84 aa 00 00 00    	je     c001e552 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4a8:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4af:	31 c9                	xor    ecx,ecx
c001e4b1:	eb 10                	jmp    c001e4c3 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4b3:	41                   	inc    ecx
c001e4b4:	83 f9 10             	cmp    ecx,0x10
c001e4b7:	0f 84 95 00 00 00    	je     c001e552 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4bd:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4c3:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e4ca:	d3 fa                	sar    edx,cl
c001e4cc:	83 e2 01             	and    edx,0x1
c001e4cf:	74 e2                	je     c001e4b3 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4d1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4d4:	01 ca                	add    edx,ecx
c001e4d6:	89 d5                	mov    ebp,edx
c001e4d8:	c1 e5 05             	shl    ebp,0x5
c001e4db:	01 ea                	add    edx,ebp
c001e4dd:	01 d0                	add    eax,edx
c001e4df:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e4e5:	83 fd 07             	cmp    ebp,0x7
c001e4e8:	75 c9                	jne    c001e4b3 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4ea:	05 40 02 00 00       	add    eax,0x240
c001e4ef:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e4f2:	83 fd ff             	cmp    ebp,0xffffffff
c001e4f5:	0f 8c e6 00 00 00    	jl     c001e5e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e4fb:	0f 84 97 01 00 00    	je     c001e698 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e501:	85 ed                	test   ebp,ebp
c001e503:	0f 84 7e 01 00 00    	je     c001e687 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e509:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e50b:	75 a6                	jne    c001e4b3 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e50d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e513:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e517:	01 d0                	add    eax,edx
c001e519:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e51d:	83 ec 0c             	sub    esp,0xc
c001e520:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e526:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e529:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e52f:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e536:	50                   	push   eax
c001e537:	e8 3b fe ff ff       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e542:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e546:	89 f7                	mov    edi,esi
c001e548:	41                   	inc    ecx
c001e549:	83 f9 10             	cmp    ecx,0x10
c001e54c:	0f 85 6b ff ff ff    	jne    c001e4bd <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e552:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e558:	85 c0                	test   eax,eax
c001e55a:	74 5d                	je     c001e5b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e55c:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e562:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e568:	74 4f                	je     c001e5b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e56a:	83 ec 0c             	sub    esp,0xc
c001e56d:	68 e4 fa 02 c0       	push   0xc002fae4
c001e572:	e8 83 a8 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e577:	c7 04 24 e4 fa 02 c0 	mov    DWORD PTR [esp],0xc002fae4
c001e57e:	89 c7                	mov    edi,eax
c001e580:	e8 59 a8 00 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e585:	83 c4 10             	add    esp,0x10
c001e588:	84 c0                	test   al,al
c001e58a:	0f 84 c2 00 00 00    	je     c001e652 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e590:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e593:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e599:	85 d2                	test   edx,edx
c001e59b:	74 0f                	je     c001e5ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e59d:	83 ec 0c             	sub    esp,0xc
c001e5a0:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5a2:	52                   	push   edx
c001e5a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5a6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5a9:	83 c4 10             	add    esp,0x10
c001e5ac:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e5b6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5b9:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e5bf:	85 db                	test   ebx,ebx
c001e5c1:	74 16                	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e5c3:	83 ec 0c             	sub    esp,0xc
c001e5c6:	53                   	push   ebx
c001e5c7:	e8 42 35 ff ff       	call   c0011b0e <VAS::~VAS()>
c001e5cc:	58                   	pop    eax
c001e5cd:	5a                   	pop    edx
c001e5ce:	6a 14                	push   0x14
c001e5d0:	53                   	push   ebx
c001e5d1:	e8 07 43 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	83 c4 1c             	add    esp,0x1c
c001e5dc:	5b                   	pop    ebx
c001e5dd:	5e                   	pop    esi
c001e5de:	5f                   	pop    edi
c001e5df:	5d                   	pop    ebp
c001e5e0:	c3                   	ret    
c001e5e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5e5:	83 ec 0c             	sub    esp,0xc
c001e5e8:	68 3c c8 02 c0       	push   0xc002c83c
c001e5ed:	e8 61 bd ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001e5f2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5f5:	83 c4 10             	add    esp,0x10
c001e5f8:	89 f7                	mov    edi,esi
c001e5fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5fe:	e9 b0 fe ff ff       	jmp    c001e4b3 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e603:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e609:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e60f:	75 1c                	jne    c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e611:	83 ec 0c             	sub    esp,0xc
c001e614:	68 a4 c8 02 c0       	push   0xc002c8a4
c001e619:	e8 97 43 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001e61e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e625:	e8 91 fa ff ff       	call   c001e0bb <blockTask(TaskState)>
c001e62a:	83 c4 10             	add    esp,0x10
c001e62d:	83 ec 08             	sub    esp,0x8
c001e630:	56                   	push   esi
c001e631:	68 e4 fa 02 c0       	push   0xc002fae4
c001e636:	e8 75 a8 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e63b:	c7 04 24 e4 fa 02 c0 	mov    DWORD PTR [esp],0xc002fae4
c001e642:	e8 b3 a7 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e647:	83 c4 10             	add    esp,0x10
c001e64a:	39 f8                	cmp    eax,edi
c001e64c:	0f 84 3e ff ff ff    	je     c001e590 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	68 e4 fa 02 c0       	push   0xc002fae4
c001e65a:	e8 9b a7 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e65f:	c7 04 24 e4 fa 02 c0 	mov    DWORD PTR [esp],0xc002fae4
c001e666:	89 c6                	mov    esi,eax
c001e668:	e8 95 a7 00 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	39 f3                	cmp    ebx,esi
c001e672:	74 b9                	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e674:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e677:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e67a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e680:	75 ab                	jne    c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e682:	e9 7c ff ff ff       	jmp    c001e603 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e687:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e68b:	83 ec 0c             	sub    esp,0xc
c001e68e:	68 70 c8 02 c0       	push   0xc002c870
c001e693:	e9 55 ff ff ff       	jmp    c001e5ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e698:	8b 36                	mov    esi,DWORD PTR [esi]
c001e69a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e69e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a4:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e6aa:	01 d7                	add    edi,edx
c001e6ac:	89 f8                	mov    eax,edi
c001e6ae:	e9 66 fe ff ff       	jmp    c001e519 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6b3 <cleanerTaskFunction(void*)>:
c001e6b3:	53                   	push   ebx
c001e6b4:	83 ec 08             	sub    esp,0x8
c001e6b7:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e6bc:	48                   	dec    eax
c001e6bd:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e6c2:	75 01                	jne    c001e6c5 <cleanerTaskFunction(void*)+0x12>
c001e6c4:	fb                   	sti    
c001e6c5:	fa                   	cli    
c001e6c6:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e6cb:	80 3d ac fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faac,0x0
c001e6d2:	8d 50 01             	lea    edx,[eax+0x1]
c001e6d5:	89 15 c8 fa 02 c0    	mov    DWORD PTR ds:0xc002fac8,edx
c001e6db:	0f 84 a1 00 00 00    	je     c001e782 <cleanerTaskFunction(void*)+0xcf>
c001e6e1:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e6e6:	85 c0                	test   eax,eax
c001e6e8:	75 01                	jne    c001e6eb <cleanerTaskFunction(void*)+0x38>
c001e6ea:	fb                   	sti    
c001e6eb:	c6 05 ac fa 02 c0 00 	mov    BYTE PTR ds:0xc002faac,0x0
c001e6f2:	fa                   	cli    
c001e6f3:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e6f9:	ff 05 c4 fa 02 c0    	inc    DWORD PTR ds:0xc002fac4
c001e6ff:	fa                   	cli    
c001e700:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e706:	eb 26                	jmp    c001e72e <cleanerTaskFunction(void*)+0x7b>
c001e708:	83 ec 0c             	sub    esp,0xc
c001e70b:	68 cc fa 02 c0       	push   0xc002facc
c001e710:	e8 e5 a6 00 00       	call   c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e715:	c7 04 24 cc fa 02 c0 	mov    DWORD PTR [esp],0xc002facc
c001e71c:	89 c3                	mov    ebx,eax
c001e71e:	e8 df a6 00 00       	call   c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e723:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e726:	e8 e1 fc ff ff       	call   c001e40c <cleanupTerminatedTask(ThreadControlBlock*)>
c001e72b:	83 c4 10             	add    esp,0x10
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 cc fa 02 c0       	push   0xc002facc
c001e736:	e8 a3 a6 00 00       	call   c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	84 c0                	test   al,al
c001e740:	74 c6                	je     c001e708 <cleanerTaskFunction(void*)+0x55>
c001e742:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e747:	48                   	dec    eax
c001e748:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e74d:	75 01                	jne    c001e750 <cleanerTaskFunction(void*)+0x9d>
c001e74f:	fb                   	sti    
c001e750:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e755:	48                   	dec    eax
c001e756:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e75b:	0f 85 56 ff ff ff    	jne    c001e6b7 <cleanerTaskFunction(void*)+0x4>
c001e761:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001e766:	85 c0                	test   eax,eax
c001e768:	0f 84 49 ff ff ff    	je     c001e6b7 <cleanerTaskFunction(void*)+0x4>
c001e76e:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e778:	e8 68 f7 ff ff       	call   c001dee5 <schedule()>
c001e77d:	e9 35 ff ff ff       	jmp    c001e6b7 <cleanerTaskFunction(void*)+0x4>
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	6a 02                	push   0x2
c001e787:	e8 09 f9 ff ff       	call   c001e095 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	e9 57 ff ff ff       	jmp    c001e6eb <cleanerTaskFunction(void*)+0x38>

c001e794 <terminateTask(int)>:
c001e794:	83 ec 14             	sub    esp,0x14
c001e797:	fa                   	cli    
c001e798:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e79e:	ff 05 c4 fa 02 c0    	inc    DWORD PTR ds:0xc002fac4
c001e7a4:	fa                   	cli    
c001e7a5:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e7ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b4:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7bc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7bf:	50                   	push   eax
c001e7c0:	68 cc fa 02 c0       	push   0xc002facc
c001e7c5:	e8 e6 a6 00 00       	call   c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7cf:	83 c4 10             	add    esp,0x10
c001e7d2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e7d9:	a1 a8 fa 02 c0       	mov    eax,ds:0xc002faa8
c001e7de:	85 c0                	test   eax,eax
c001e7e0:	74 53                	je     c001e835 <terminateTask(int)+0xa1>
c001e7e2:	83 ec 0c             	sub    esp,0xc
c001e7e5:	c6 05 ac fa 02 c0 01 	mov    BYTE PTR ds:0xc002faac,0x1
c001e7ec:	50                   	push   eax
c001e7ed:	e8 85 fb ff ff       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c001e7f2:	83 c4 10             	add    esp,0x10
c001e7f5:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e7fa:	48                   	dec    eax
c001e7fb:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e800:	75 01                	jne    c001e803 <terminateTask(int)+0x6f>
c001e802:	fb                   	sti    
c001e803:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e808:	48                   	dec    eax
c001e809:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e80e:	75 09                	jne    c001e819 <terminateTask(int)+0x85>
c001e810:	83 3d c0 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fac0,0x0
c001e817:	75 2e                	jne    c001e847 <terminateTask(int)+0xb3>
c001e819:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e81e:	48                   	dec    eax
c001e81f:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e824:	75 01                	jne    c001e827 <terminateTask(int)+0x93>
c001e826:	fb                   	sti    
c001e827:	fa                   	cli    
c001e828:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e82e:	e8 b2 f6 ff ff       	call   c001dee5 <schedule()>
c001e833:	eb e4                	jmp    c001e819 <terminateTask(int)+0x85>
c001e835:	83 ec 0c             	sub    esp,0xc
c001e838:	68 a1 c7 02 c0       	push   0xc002c7a1
c001e83d:	e8 73 41 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001e842:	83 c4 10             	add    esp,0x10
c001e845:	eb ae                	jmp    c001e7f5 <terminateTask(int)+0x61>
c001e847:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e851:	eb db                	jmp    c001e82e <terminateTask(int)+0x9a>

c001e853 <Thr::terminateFromIRQ(int)>:
c001e853:	83 ec 18             	sub    esp,0x18
c001e856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e85a:	e8 35 ff ff ff       	call   c001e794 <terminateTask(int)>
c001e85f:	90                   	nop

c001e860 <Semaphore::release()>:
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e867:	fa                   	cli    
c001e868:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e86d:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e873:	8d 48 01             	lea    ecx,[eax+0x1]
c001e876:	89 0d c4 fa 02 c0    	mov    DWORD PTR ds:0xc002fac4,ecx
c001e87c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e87f:	85 c9                	test   ecx,ecx
c001e881:	74 3c                	je     c001e8bf <Semaphore::release()+0x5f>
c001e883:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e886:	83 ec 0c             	sub    esp,0xc
c001e889:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e88c:	51                   	push   ecx
c001e88d:	e8 e5 fa ff ff       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c001e892:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	48                   	dec    eax
c001e89b:	a3 c4 fa 02 c0       	mov    ds:0xc002fac4,eax
c001e8a0:	85 c0                	test   eax,eax
c001e8a2:	75 09                	jne    c001e8ad <Semaphore::release()+0x4d>
c001e8a4:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001e8a9:	85 c0                	test   eax,eax
c001e8ab:	75 17                	jne    c001e8c4 <Semaphore::release()+0x64>
c001e8ad:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001e8b2:	48                   	dec    eax
c001e8b3:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001e8b8:	75 01                	jne    c001e8bb <Semaphore::release()+0x5b>
c001e8ba:	fb                   	sti    
c001e8bb:	83 c4 0c             	add    esp,0xc
c001e8be:	c3                   	ret    
c001e8bf:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e8c2:	eb d7                	jmp    c001e89b <Semaphore::release()+0x3b>
c001e8c4:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c001e8ce:	e8 12 f6 ff ff       	call   c001dee5 <schedule()>
c001e8d3:	eb d8                	jmp    c001e8ad <Semaphore::release()+0x4d>

c001e8d5 <__static_initialization_and_destruction_0(int, int)>:
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8dd:	0f 85 88 00 00 00    	jne    c001e96b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8eb:	75 7e                	jne    c001e96b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8ed:	83 ec 0c             	sub    esp,0xc
c001e8f0:	68 e4 fa 02 c0       	push   0xc002fae4
c001e8f5:	e8 46 a8 00 00       	call   c0029140 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	83 ec 04             	sub    esp,0x4
c001e900:	68 84 d3 02 c0       	push   0xc002d384
c001e905:	68 e4 fa 02 c0       	push   0xc002fae4
c001e90a:	68 f4 90 02 c0       	push   0xc00290f4
c001e90f:	e8 43 3f ff ff       	call   c0012857 <__cxa_atexit>
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 d8 fa 02 c0       	push   0xc002fad8
c001e91f:	e8 1c a8 00 00       	call   c0029140 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	83 ec 04             	sub    esp,0x4
c001e92a:	68 84 d3 02 c0       	push   0xc002d384
c001e92f:	68 d8 fa 02 c0       	push   0xc002fad8
c001e934:	68 f4 90 02 c0       	push   0xc00290f4
c001e939:	e8 19 3f ff ff       	call   c0012857 <__cxa_atexit>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	68 cc fa 02 c0       	push   0xc002facc
c001e949:	e8 f2 a7 00 00       	call   c0029140 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	83 ec 04             	sub    esp,0x4
c001e954:	68 84 d3 02 c0       	push   0xc002d384
c001e959:	68 cc fa 02 c0       	push   0xc002facc
c001e95e:	68 f4 90 02 c0       	push   0xc00290f4
c001e963:	e8 ef 3e ff ff       	call   c0012857 <__cxa_atexit>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	90                   	nop
c001e96c:	83 c4 0c             	add    esp,0xc
c001e96f:	c3                   	ret    

c001e970 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	83 ec 08             	sub    esp,0x8
c001e976:	68 ff ff 00 00       	push   0xffff
c001e97b:	6a 01                	push   0x1
c001e97d:	e8 53 ff ff ff       	call   c001e8d5 <__static_initialization_and_destruction_0(int, int)>
c001e982:	83 c4 10             	add    esp,0x10
c001e985:	83 c4 0c             	add    esp,0xc
c001e988:	c3                   	ret    

c001e989 <Vm::inbv(unsigned short)>:
c001e989:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e98d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e992:	75 06                	jne    c001e99a <Vm::inbv(unsigned short)+0x11>
c001e994:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c001e999:	c3                   	ret    
c001e99a:	ec                   	in     al,dx
c001e99b:	c3                   	ret    

c001e99c <Vm::outbv(unsigned short, unsigned char)>:
c001e99c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9a4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9a9:	75 25                	jne    c001e9d0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e9ab:	8b 0d 2c fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb2c
c001e9b1:	8d 51 01             	lea    edx,[ecx+0x1]
c001e9b4:	88 81 40 fb 02 c0    	mov    BYTE PTR [ecx-0x3ffd04c0],al
c001e9ba:	89 15 2c fb 02 c0    	mov    DWORD PTR ds:0xc002fb2c,edx
c001e9c0:	83 fa 20             	cmp    edx,0x20
c001e9c3:	75 0c                	jne    c001e9d1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e9c5:	c7 05 2c fb 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fb2c,0x1f
c001e9cf:	c3                   	ret    
c001e9d0:	ee                   	out    dx,al
c001e9d1:	c3                   	ret    

c001e9d2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9dc:	c1 e0 04             	shl    eax,0x4
c001e9df:	01 d0                	add    eax,edx
c001e9e1:	c3                   	ret    

c001e9e2 <Vm::getSegment(unsigned int)>:
c001e9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e6:	c1 e8 10             	shr    eax,0x10
c001e9e9:	c3                   	ret    

c001e9ea <Vm::getOffset(unsigned int)>:
c001e9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ee:	c3                   	ret    

c001e9ef <Vm::mainloop2()>:
c001e9ef:	83 ec 18             	sub    esp,0x18
c001e9f2:	fa                   	cli    
c001e9f3:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001e9f9:	6a 02                	push   0x2
c001e9fb:	c6 05 25 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb25,0x1
c001ea02:	e8 8e f6 ff ff       	call   c001e095 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea0c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea10:	52                   	push   edx
c001ea11:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea15:	52                   	push   edx
c001ea16:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea1a:	52                   	push   edx
c001ea1b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea1f:	50                   	push   eax
c001ea20:	e8 d5 18 fe ff       	call   c00002fa <goToVM86>
c001ea25:	83 c4 2c             	add    esp,0x2c
c001ea28:	c3                   	ret    

c001ea29 <Vm::mainVm8086Loop(void*)>:
c001ea29:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001ea2e:	48                   	dec    eax
c001ea2f:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001ea34:	75 01                	jne    c001ea37 <Vm::mainVm8086Loop(void*)+0xe>
c001ea36:	fb                   	sti    
c001ea37:	eb b6                	jmp    c001e9ef <Vm::mainloop2()>

c001ea39 <Vm::mainloop3(unsigned long)>:
c001ea39:	83 ec 18             	sub    esp,0x18
c001ea3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea40:	fa                   	cli    
c001ea41:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001ea47:	6a 02                	push   0x2
c001ea49:	c6 05 24 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb24,0x1
c001ea50:	a3 20 fb 02 c0       	mov    ds:0xc002fb20,eax
c001ea55:	e8 3b f6 ff ff       	call   c001e095 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea5a:	83 c4 1c             	add    esp,0x1c
c001ea5d:	eb 90                	jmp    c001e9ef <Vm::mainloop2()>

c001ea5f <Vm::initialise8086()>:
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	68 80 00 00 00       	push   0x80
c001ea67:	6a 00                	push   0x0
c001ea69:	68 29 ea 01 c0       	push   0xc001ea29
c001ea6e:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001ea74:	e8 47 f2 ff ff       	call   c001dcc0 <Process::createThread(void (*)(void*), void*, int)>
c001ea79:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea80:	a3 28 fb 02 c0       	mov    ds:0xc002fb28,eax
c001ea85:	68 00 01 00 00       	push   0x100
c001ea8a:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c001ea8f:	6a 00                	push   0x0
c001ea91:	6a 00                	push   0x0
c001ea93:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ea99:	e8 e2 34 ff ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ea9e:	83 c4 2c             	add    esp,0x2c
c001eaa1:	c3                   	ret    

c001eaa2 <Vm::finish8086()>:
c001eaa2:	53                   	push   ebx
c001eaa3:	83 ec 08             	sub    esp,0x8
c001eaa6:	fa                   	cli    
c001eaa7:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001eaad:	80 3d 24 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb24,0x0
c001eab4:	75 15                	jne    c001eacb <Vm::finish8086()+0x29>
c001eab6:	e8 2a f4 ff ff       	call   c001dee5 <schedule()>
c001eabb:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001eac0:	48                   	dec    eax
c001eac1:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001eac6:	75 de                	jne    c001eaa6 <Vm::finish8086()+0x4>
c001eac8:	fb                   	sti    
c001eac9:	eb db                	jmp    c001eaa6 <Vm::finish8086()+0x4>
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	8b 1d 20 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb20
c001ead4:	ff 35 28 fb 02 c0    	push   DWORD PTR ds:0xc002fb28
c001eada:	c6 05 24 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb24,0x0
c001eae1:	e8 91 f8 ff ff       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c001eae6:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	8d 50 ff             	lea    edx,[eax-0x1]
c001eaf1:	89 15 c8 fa 02 c0    	mov    DWORD PTR ds:0xc002fac8,edx
c001eaf7:	85 d2                	test   edx,edx
c001eaf9:	75 01                	jne    c001eafc <Vm::finish8086()+0x5a>
c001eafb:	fb                   	sti    
c001eafc:	89 d8                	mov    eax,ebx
c001eafe:	83 c4 08             	add    esp,0x8
c001eb01:	5b                   	pop    ebx
c001eb02:	c3                   	ret    

c001eb03 <Vm::getOutput8086(unsigned char*)>:
c001eb03:	57                   	push   edi
c001eb04:	8b 0d 2c fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb2c
c001eb0a:	56                   	push   esi
c001eb0b:	be 40 fb 02 c0       	mov    esi,0xc002fb40
c001eb10:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb16:	a1 2c fb 02 c0       	mov    eax,ds:0xc002fb2c
c001eb1b:	5e                   	pop    esi
c001eb1c:	c7 05 2c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb2c,0x0
c001eb26:	5f                   	pop    edi
c001eb27:	c3                   	ret    

c001eb28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb28:	55                   	push   ebp
c001eb29:	57                   	push   edi
c001eb2a:	56                   	push   esi
c001eb2b:	53                   	push   ebx
c001eb2c:	83 ec 2c             	sub    esp,0x2c
c001eb2f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb33:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eb37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eb3b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eb3f:	fa                   	cli    
c001eb40:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c001eb46:	0f b6 35 25 fb 02 c0 	movzx  esi,BYTE PTR ds:0xc002fb25
c001eb4d:	89 f0                	mov    eax,esi
c001eb4f:	84 c0                	test   al,al
c001eb51:	75 1d                	jne    c001eb70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eb53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb57:	e8 89 f3 ff ff       	call   c001dee5 <schedule()>
c001eb5c:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001eb61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb65:	48                   	dec    eax
c001eb66:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001eb6b:	75 d2                	jne    c001eb3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb6d:	fb                   	sti    
c001eb6e:	eb cf                	jmp    c001eb3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb70:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c001eb75:	c7 05 2c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb2c,0x0
c001eb7f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001eb83:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001eb87:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001eb8b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001eb8f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb93:	50                   	push   eax
c001eb94:	6a 20                	push   0x20
c001eb96:	6a 00                	push   0x0
c001eb98:	68 40 fb 02 c0       	push   0xc002fb40
c001eb9d:	e8 ae 1b fe ff       	call   c0000750 <memset>
c001eba2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eba9:	e8 af 0d ff ff       	call   c000f95d <malloc>
c001ebae:	83 c4 0c             	add    esp,0xc
c001ebb1:	89 c3                	mov    ebx,eax
c001ebb3:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c001ebb9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebbd:	50                   	push   eax
c001ebbe:	e8 51 43 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c001ebc3:	83 c4 10             	add    esp,0x10
c001ebc6:	85 db                	test   ebx,ebx
c001ebc8:	75 0a                	jne    c001ebd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ebca:	83 ec 0c             	sub    esp,0xc
c001ebcd:	68 cc c8 02 c0       	push   0xc002c8cc
c001ebd2:	eb 3e                	jmp    c001ec12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ebd4:	50                   	push   eax
c001ebd5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebd9:	50                   	push   eax
c001ebda:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebde:	50                   	push   eax
c001ebdf:	53                   	push   ebx
c001ebe0:	e8 3f 46 ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c001ebe5:	83 c4 10             	add    esp,0x10
c001ebe8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ebed:	74 0a                	je     c001ebf9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	68 e0 c8 02 c0       	push   0xc002c8e0
c001ebf7:	eb 19                	jmp    c001ec12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ebf9:	51                   	push   ecx
c001ebfa:	51                   	push   ecx
c001ebfb:	6a 01                	push   0x1
c001ebfd:	53                   	push   ebx
c001ebfe:	e8 75 43 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c001ec03:	83 c4 10             	add    esp,0x10
c001ec06:	85 c0                	test   eax,eax
c001ec08:	74 24                	je     c001ec2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec0a:	83 ec 0c             	sub    esp,0xc
c001ec0d:	68 f9 c8 02 c0       	push   0xc002c8f9
c001ec12:	e8 3c b7 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001ec17:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	48                   	dec    eax
c001ec20:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001ec25:	85 c0                	test   eax,eax
c001ec27:	75 01                	jne    c001ec2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ec29:	fb                   	sti    
c001ec2a:	31 f6                	xor    esi,esi
c001ec2c:	eb 58                	jmp    c001ec86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ec2e:	0f b7 ed             	movzx  ebp,bp
c001ec31:	50                   	push   eax
c001ec32:	0f b7 ff             	movzx  edi,di
c001ec35:	50                   	push   eax
c001ec36:	55                   	push   ebp
c001ec37:	57                   	push   edi
c001ec38:	e8 95 fd ff ff       	call   c001e9d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec3d:	5a                   	pop    edx
c001ec3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ec40:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec44:	51                   	push   ecx
c001ec45:	50                   	push   eax
c001ec46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec4e:	53                   	push   ebx
c001ec4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec52:	83 c4 14             	add    esp,0x14
c001ec55:	53                   	push   ebx
c001ec56:	e8 7b 43 ff ff       	call   c0012fd6 <File::close()>
c001ec5b:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	48                   	dec    eax
c001ec64:	c6 05 25 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb25,0x0
c001ec6b:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001ec70:	85 c0                	test   eax,eax
c001ec72:	75 01                	jne    c001ec75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ec74:	fb                   	sti    
c001ec75:	83 ec 0c             	sub    esp,0xc
c001ec78:	ff 35 28 fb 02 c0    	push   DWORD PTR ds:0xc002fb28
c001ec7e:	e8 f4 f6 ff ff       	call   c001e377 <unblockTask(ThreadControlBlock*)>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	83 c4 2c             	add    esp,0x2c
c001ec89:	89 f0                	mov    eax,esi
c001ec8b:	5b                   	pop    ebx
c001ec8c:	5e                   	pop    esi
c001ec8d:	5f                   	pop    edi
c001ec8e:	5d                   	pop    ebp
c001ec8f:	c3                   	ret    

c001ec90 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec90:	57                   	push   edi
c001ec91:	56                   	push   esi
c001ec92:	53                   	push   ebx
c001ec93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec9f:	83 e8 06             	sub    eax,0x6
c001eca2:	0f b7 c0             	movzx  eax,ax
c001eca5:	50                   	push   eax
c001eca6:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecab:	50                   	push   eax
c001ecac:	e8 21 fd ff ff       	call   c001e9d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecb1:	5a                   	pop    edx
c001ecb2:	5e                   	pop    esi
c001ecb3:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecb6:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecb9:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ecbf:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ecc2:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecc5:	83 c2 02             	add    edx,0x2
c001ecc8:	66 89 10             	mov    WORD PTR [eax],dx
c001eccb:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecce:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecd2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecd5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecd9:	89 d6                	mov    esi,edx
c001ecdb:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ece1:	66 81 e6 ff fd       	and    si,0xfdff
c001ece6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecea:	74 07                	je     c001ecf3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecec:	89 d6                	mov    esi,edx
c001ecee:	66 81 ce 00 02       	or     si,0x200
c001ecf3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ecf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecfc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed00:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed08:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed0b:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed13:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed16:	5b                   	pop    ebx
c001ed17:	5e                   	pop    esi
c001ed18:	5f                   	pop    edi
c001ed19:	c3                   	ret    

c001ed1a <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed24:	c1 e0 04             	shl    eax,0x4
c001ed27:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed2a:	c3                   	ret    

c001ed2b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed35:	c1 e0 04             	shl    eax,0x4
c001ed38:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed3c:	c3                   	ret    

c001ed3d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed3d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed42:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed47:	c1 e0 04             	shl    eax,0x4
c001ed4a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed4d:	c3                   	ret    

c001ed4e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed58:	c1 e0 04             	shl    eax,0x4
c001ed5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed5f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed62:	c3                   	ret    

c001ed63 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6d:	c1 e0 04             	shl    eax,0x4
c001ed70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed74:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed78:	c3                   	ret    

c001ed79 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed79:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed7e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed83:	c1 e0 04             	shl    eax,0x4
c001ed86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed8a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed8d:	c3                   	ret    

c001ed8e <Vm::faultHandler(regs*)>:
c001ed8e:	55                   	push   ebp
c001ed8f:	57                   	push   edi
c001ed90:	56                   	push   esi
c001ed91:	53                   	push   ebx
c001ed92:	83 ec 1c             	sub    esp,0x1c
c001ed95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ed99:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ed9c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001eda0:	0f b7 f8             	movzx  edi,ax
c001eda3:	52                   	push   edx
c001eda4:	0f b7 c0             	movzx  eax,ax
c001eda7:	50                   	push   eax
c001eda8:	e8 25 fc ff ff       	call   c001e9d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001edad:	5a                   	pop    edx
c001edae:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001edb1:	59                   	pop    ecx
c001edb2:	89 c1                	mov    ecx,eax
c001edb4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001edb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001edbb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edc4:	0f b7 c5             	movzx  eax,bp
c001edc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edcb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001edcf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001edd3:	e8 fa fb ff ff       	call   c001e9d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001edd8:	5e                   	pop    esi
c001edd9:	be 06 00 00 00       	mov    esi,0x6
c001edde:	5a                   	pop    edx
c001eddf:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ede4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ede9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001edec:	80 fa 9d             	cmp    dl,0x9d
c001edef:	0f 84 2c 02 00 00    	je     c001f021 <Vm::faultHandler(regs*)+0x293>
c001edf5:	0f 87 91 00 00 00    	ja     c001ee8c <Vm::faultHandler(regs*)+0xfe>
c001edfb:	80 fa 66             	cmp    dl,0x66
c001edfe:	0f 84 98 01 00 00    	je     c001ef9c <Vm::faultHandler(regs*)+0x20e>
c001ee04:	77 47                	ja     c001ee4d <Vm::faultHandler(regs*)+0xbf>
c001ee06:	80 fa 36             	cmp    dl,0x36
c001ee09:	0f 84 80 01 00 00    	je     c001ef8f <Vm::faultHandler(regs*)+0x201>
c001ee0f:	77 1a                	ja     c001ee2b <Vm::faultHandler(regs*)+0x9d>
c001ee11:	80 fa 26             	cmp    dl,0x26
c001ee14:	0f 84 4e 01 00 00    	je     c001ef68 <Vm::faultHandler(regs*)+0x1da>
c001ee1a:	80 fa 2e             	cmp    dl,0x2e
c001ee1d:	0f 85 e2 05 00 00    	jne    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ee23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee26:	31 f6                	xor    esi,esi
c001ee28:	41                   	inc    ecx
c001ee29:	eb be                	jmp    c001ede9 <Vm::faultHandler(regs*)+0x5b>
c001ee2b:	80 fa 64             	cmp    dl,0x64
c001ee2e:	0f 84 41 01 00 00    	je     c001ef75 <Vm::faultHandler(regs*)+0x1e7>
c001ee34:	0f 87 48 01 00 00    	ja     c001ef82 <Vm::faultHandler(regs*)+0x1f4>
c001ee3a:	80 fa 3e             	cmp    dl,0x3e
c001ee3d:	0f 85 c2 05 00 00    	jne    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ee43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee46:	be 01 00 00 00       	mov    esi,0x1
c001ee4b:	eb db                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ee4d:	80 fa 6d             	cmp    dl,0x6d
c001ee50:	0f 84 ec 02 00 00    	je     c001f142 <Vm::faultHandler(regs*)+0x3b4>
c001ee56:	77 17                	ja     c001ee6f <Vm::faultHandler(regs*)+0xe1>
c001ee58:	80 fa 67             	cmp    dl,0x67
c001ee5b:	0f 84 48 01 00 00    	je     c001efa9 <Vm::faultHandler(regs*)+0x21b>
c001ee61:	80 fa 6c             	cmp    dl,0x6c
c001ee64:	0f 84 69 02 00 00    	je     c001f0d3 <Vm::faultHandler(regs*)+0x345>
c001ee6a:	e9 96 05 00 00       	jmp    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ee6f:	80 fa 6f             	cmp    dl,0x6f
c001ee72:	0f 84 f4 03 00 00    	je     c001f26c <Vm::faultHandler(regs*)+0x4de>
c001ee78:	0f 82 59 03 00 00    	jb     c001f1d7 <Vm::faultHandler(regs*)+0x449>
c001ee7e:	80 fa 9c             	cmp    dl,0x9c
c001ee81:	0f 84 2f 01 00 00    	je     c001efb6 <Vm::faultHandler(regs*)+0x228>
c001ee87:	e9 79 05 00 00       	jmp    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ee8c:	80 fa ec             	cmp    dl,0xec
c001ee8f:	0f 84 14 05 00 00    	je     c001f3a9 <Vm::faultHandler(regs*)+0x61b>
c001ee95:	77 7b                	ja     c001ef12 <Vm::faultHandler(regs*)+0x184>
c001ee97:	80 fa e4             	cmp    dl,0xe4
c001ee9a:	0f 84 93 04 00 00    	je     c001f333 <Vm::faultHandler(regs*)+0x5a5>
c001eea0:	77 53                	ja     c001eef5 <Vm::faultHandler(regs*)+0x167>
c001eea2:	80 fa cd             	cmp    dl,0xcd
c001eea5:	0f 84 d9 01 00 00    	je     c001f084 <Vm::faultHandler(regs*)+0x2f6>
c001eeab:	80 fa cf             	cmp    dl,0xcf
c001eeae:	0f 85 51 05 00 00    	jne    c001f405 <Vm::faultHandler(regs*)+0x677>
c001eeb4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eeb7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eeba:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eebe:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eec1:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eec5:	81 ca 00 02 02 00    	or     edx,0x20200
c001eecb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eece:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eed2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eed8:	66 c1 e8 09          	shr    ax,0x9
c001eedc:	83 e0 01             	and    eax,0x1
c001eedf:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eee2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eee5:	83 c0 06             	add    eax,0x6
c001eee8:	25 ff ff 00 00       	and    eax,0xffff
c001eeed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eef0:	e9 0c 05 00 00       	jmp    c001f401 <Vm::faultHandler(regs*)+0x673>
c001eef5:	80 fa e6             	cmp    dl,0xe6
c001eef8:	0f 84 7f 04 00 00    	je     c001f37d <Vm::faultHandler(regs*)+0x5ef>
c001eefe:	0f 82 4b 04 00 00    	jb     c001f34f <Vm::faultHandler(regs*)+0x5c1>
c001ef04:	80 fa e7             	cmp    dl,0xe7
c001ef07:	0f 84 87 04 00 00    	je     c001f394 <Vm::faultHandler(regs*)+0x606>
c001ef0d:	e9 f3 04 00 00       	jmp    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ef12:	80 fa ef             	cmp    dl,0xef
c001ef15:	0f 84 d1 04 00 00    	je     c001f3ec <Vm::faultHandler(regs*)+0x65e>
c001ef1b:	77 28                	ja     c001ef45 <Vm::faultHandler(regs*)+0x1b7>
c001ef1d:	80 fa ed             	cmp    dl,0xed
c001ef20:	0f 84 9f 04 00 00    	je     c001f3c5 <Vm::faultHandler(regs*)+0x637>
c001ef26:	80 fa ee             	cmp    dl,0xee
c001ef29:	0f 85 d6 04 00 00    	jne    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ef2f:	50                   	push   eax
c001ef30:	50                   	push   eax
c001ef31:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef35:	50                   	push   eax
c001ef36:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef3a:	50                   	push   eax
c001ef3b:	e8 5c fa ff ff       	call   c001e99c <Vm::outbv(unsigned short, unsigned char)>
c001ef40:	e9 9f 04 00 00       	jmp    c001f3e4 <Vm::faultHandler(regs*)+0x656>
c001ef45:	80 fa fa             	cmp    dl,0xfa
c001ef48:	0f 84 69 01 00 00    	je     c001f0b7 <Vm::faultHandler(regs*)+0x329>
c001ef4e:	80 fa fb             	cmp    dl,0xfb
c001ef51:	0f 84 6e 01 00 00    	je     c001f0c5 <Vm::faultHandler(regs*)+0x337>
c001ef57:	80 fa f3             	cmp    dl,0xf3
c001ef5a:	0f 85 a5 04 00 00    	jne    c001f405 <Vm::faultHandler(regs*)+0x677>
c001ef60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef63:	e9 c0 fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ef68:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef6b:	be 02 00 00 00       	mov    esi,0x2
c001ef70:	e9 b3 fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ef75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef78:	be 03 00 00 00       	mov    esi,0x3
c001ef7d:	e9 a6 fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ef82:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef85:	be 04 00 00 00       	mov    esi,0x4
c001ef8a:	e9 99 fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ef8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef92:	be 05 00 00 00       	mov    esi,0x5
c001ef97:	e9 8c fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001ef9c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef9f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001efa4:	e9 7f fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001efa9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efac:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001efb1:	e9 72 fe ff ff       	jmp    c001ee28 <Vm::faultHandler(regs*)+0x9a>
c001efb6:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001efb9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001efbd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efc2:	74 30                	je     c001eff4 <Vm::faultHandler(regs*)+0x266>
c001efc4:	83 e9 04             	sub    ecx,0x4
c001efc7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001efcd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001efd3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001efd6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001efd9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001efdf:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001efe3:	0f 84 15 04 00 00    	je     c001f3fe <Vm::faultHandler(regs*)+0x670>
c001efe9:	80 ce 02             	or     dh,0x2
c001efec:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001efef:	e9 0a 04 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001eff4:	83 e9 02             	sub    ecx,0x2
c001eff7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001effd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f000:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f004:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f00a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f00e:	74 05                	je     c001f015 <Vm::faultHandler(regs*)+0x287>
c001f010:	80 ce 02             	or     dh,0x2
c001f013:	eb 03                	jmp    c001f018 <Vm::faultHandler(regs*)+0x28a>
c001f015:	80 e6 fd             	and    dh,0xfd
c001f018:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f01c:	e9 dd 03 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f021:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f026:	74 2a                	je     c001f052 <Vm::faultHandler(regs*)+0x2c4>
c001f028:	8b 10                	mov    edx,DWORD PTR [eax]
c001f02a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f030:	81 ca 00 02 02 00    	or     edx,0x20200
c001f036:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f039:	8b 00                	mov    eax,DWORD PTR [eax]
c001f03b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f041:	c1 e8 09             	shr    eax,0x9
c001f044:	83 e0 01             	and    eax,0x1
c001f047:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f04a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f04d:	83 c0 04             	add    eax,0x4
c001f050:	eb 25                	jmp    c001f077 <Vm::faultHandler(regs*)+0x2e9>
c001f052:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f055:	81 ca 00 02 02 00    	or     edx,0x20200
c001f05b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f05e:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f061:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f067:	66 c1 e8 09          	shr    ax,0x9
c001f06b:	83 e0 01             	and    eax,0x1
c001f06e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f071:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f074:	83 c0 02             	add    eax,0x2
c001f077:	25 ff ff 00 00       	and    eax,0xffff
c001f07c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f07f:	e9 7a 03 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f084:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f088:	3c ee                	cmp    al,0xee
c001f08a:	75 10                	jne    c001f09c <Vm::faultHandler(regs*)+0x30e>
c001f08c:	83 ec 0c             	sub    esp,0xc
c001f08f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f092:	e8 a2 f9 ff ff       	call   c001ea39 <Vm::mainloop3(unsigned long)>
c001f097:	e9 4b 03 00 00       	jmp    c001f3e7 <Vm::faultHandler(regs*)+0x659>
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a7:	51                   	push   ecx
c001f0a8:	50                   	push   eax
c001f0a9:	53                   	push   ebx
c001f0aa:	e8 e1 fb ff ff       	call   c001ec90 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0af:	83 c4 20             	add    esp,0x20
c001f0b2:	e9 4a 03 00 00       	jmp    c001f401 <Vm::faultHandler(regs*)+0x673>
c001f0b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0bc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0c0:	e9 39 03 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f0c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0ca:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0ce:	e9 2b 03 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f0d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f0d6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f0db:	74 2b                	je     c001f108 <Vm::faultHandler(regs*)+0x37a>
c001f0dd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f0e4:	76 22                	jbe    c001f108 <Vm::faultHandler(regs*)+0x37a>
c001f0e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0ea:	50                   	push   eax
c001f0eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0ef:	50                   	push   eax
c001f0f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f0f4:	50                   	push   eax
c001f0f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0f9:	50                   	push   eax
c001f0fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0fe:	50                   	push   eax
c001f0ff:	6a 6c                	push   0x6c
c001f101:	6a 6c                	push   0x6c
c001f103:	e9 b9 01 00 00       	jmp    c001f2c1 <Vm::faultHandler(regs*)+0x533>
c001f108:	83 ec 0c             	sub    esp,0xc
c001f10b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f10f:	0f b7 f6             	movzx  esi,si
c001f112:	50                   	push   eax
c001f113:	e8 71 f8 ff ff       	call   c001e989 <Vm::inbv(unsigned short)>
c001f118:	83 c4 0c             	add    esp,0xc
c001f11b:	0f b6 c0             	movzx  eax,al
c001f11e:	50                   	push   eax
c001f11f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f123:	50                   	push   eax
c001f124:	56                   	push   esi
c001f125:	e8 24 fc ff ff       	call   c001ed4e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f12a:	83 c4 10             	add    esp,0x10
c001f12d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f130:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f134:	74 03                	je     c001f139 <Vm::faultHandler(regs*)+0x3ab>
c001f136:	48                   	dec    eax
c001f137:	eb 01                	jmp    c001f13a <Vm::faultHandler(regs*)+0x3ac>
c001f139:	40                   	inc    eax
c001f13a:	0f b7 c0             	movzx  eax,ax
c001f13d:	e9 8d 00 00 00       	jmp    c001f1cf <Vm::faultHandler(regs*)+0x441>
c001f142:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f145:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f148:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f14d:	74 29                	je     c001f178 <Vm::faultHandler(regs*)+0x3ea>
c001f14f:	3d ff ff 00 00       	cmp    eax,0xffff
c001f154:	76 22                	jbe    c001f178 <Vm::faultHandler(regs*)+0x3ea>
c001f156:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f15a:	50                   	push   eax
c001f15b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f15f:	50                   	push   eax
c001f160:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f164:	50                   	push   eax
c001f165:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f169:	50                   	push   eax
c001f16a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f16e:	50                   	push   eax
c001f16f:	6a 6d                	push   0x6d
c001f171:	6a 6d                	push   0x6d
c001f173:	e9 49 01 00 00       	jmp    c001f2c1 <Vm::faultHandler(regs*)+0x533>
c001f178:	0f b7 c8             	movzx  ecx,ax
c001f17b:	0f b7 f6             	movzx  esi,si
c001f17e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f181:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f186:	74 20                	je     c001f1a8 <Vm::faultHandler(regs*)+0x41a>
c001f188:	ed                   	in     eax,dx
c001f189:	55                   	push   ebp
c001f18a:	50                   	push   eax
c001f18b:	51                   	push   ecx
c001f18c:	56                   	push   esi
c001f18d:	e8 e7 fb ff ff       	call   c001ed79 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f192:	83 c4 10             	add    esp,0x10
c001f195:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f198:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f19c:	74 05                	je     c001f1a3 <Vm::faultHandler(regs*)+0x415>
c001f19e:	83 e8 04             	sub    eax,0x4
c001f1a1:	eb 27                	jmp    c001f1ca <Vm::faultHandler(regs*)+0x43c>
c001f1a3:	83 c0 04             	add    eax,0x4
c001f1a6:	eb 22                	jmp    c001f1ca <Vm::faultHandler(regs*)+0x43c>
c001f1a8:	66 ed                	in     ax,dx
c001f1aa:	0f b7 c0             	movzx  eax,ax
c001f1ad:	57                   	push   edi
c001f1ae:	50                   	push   eax
c001f1af:	51                   	push   ecx
c001f1b0:	56                   	push   esi
c001f1b1:	e8 ad fb ff ff       	call   c001ed63 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f1b6:	83 c4 10             	add    esp,0x10
c001f1b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1bc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1c0:	74 05                	je     c001f1c7 <Vm::faultHandler(regs*)+0x439>
c001f1c2:	83 e8 02             	sub    eax,0x2
c001f1c5:	eb 03                	jmp    c001f1ca <Vm::faultHandler(regs*)+0x43c>
c001f1c7:	83 c0 02             	add    eax,0x2
c001f1ca:	25 ff ff 00 00       	and    eax,0xffff
c001f1cf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f1d2:	e9 27 02 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f1d7:	8d 46 ff             	lea    eax,[esi-0x1]
c001f1da:	3c 05                	cmp    al,0x5
c001f1dc:	77 24                	ja     c001f202 <Vm::faultHandler(regs*)+0x474>
c001f1de:	0f b6 c0             	movzx  eax,al
c001f1e1:	ff 24 85 6c c9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3694]
c001f1e8:	0f b7 fd             	movzx  edi,bp
c001f1eb:	eb 15                	jmp    c001f202 <Vm::faultHandler(regs*)+0x474>
c001f1ed:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f1f1:	eb 0f                	jmp    c001f202 <Vm::faultHandler(regs*)+0x474>
c001f1f3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f1f7:	eb 09                	jmp    c001f202 <Vm::faultHandler(regs*)+0x474>
c001f1f9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f1fd:	eb 03                	jmp    c001f202 <Vm::faultHandler(regs*)+0x474>
c001f1ff:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f202:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f205:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f20a:	74 29                	je     c001f235 <Vm::faultHandler(regs*)+0x4a7>
c001f20c:	3d ff ff 00 00       	cmp    eax,0xffff
c001f211:	76 22                	jbe    c001f235 <Vm::faultHandler(regs*)+0x4a7>
c001f213:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f217:	50                   	push   eax
c001f218:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f21c:	50                   	push   eax
c001f21d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f221:	50                   	push   eax
c001f222:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f226:	50                   	push   eax
c001f227:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f22b:	50                   	push   eax
c001f22c:	6a 6e                	push   0x6e
c001f22e:	6a 6e                	push   0x6e
c001f230:	e9 8c 00 00 00       	jmp    c001f2c1 <Vm::faultHandler(regs*)+0x533>
c001f235:	0f b7 c0             	movzx  eax,ax
c001f238:	52                   	push   edx
c001f239:	52                   	push   edx
c001f23a:	50                   	push   eax
c001f23b:	57                   	push   edi
c001f23c:	e8 d9 fa ff ff       	call   c001ed1a <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f241:	59                   	pop    ecx
c001f242:	0f b6 c0             	movzx  eax,al
c001f245:	5e                   	pop    esi
c001f246:	50                   	push   eax
c001f247:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f24b:	50                   	push   eax
c001f24c:	e8 4b f7 ff ff       	call   c001e99c <Vm::outbv(unsigned short, unsigned char)>
c001f251:	83 c4 10             	add    esp,0x10
c001f254:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f257:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f25b:	74 03                	je     c001f260 <Vm::faultHandler(regs*)+0x4d2>
c001f25d:	48                   	dec    eax
c001f25e:	eb 01                	jmp    c001f261 <Vm::faultHandler(regs*)+0x4d3>
c001f260:	40                   	inc    eax
c001f261:	0f b7 c0             	movzx  eax,ax
c001f264:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f267:	e9 92 01 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f26c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f26f:	3c 05                	cmp    al,0x5
c001f271:	77 1f                	ja     c001f292 <Vm::faultHandler(regs*)+0x504>
c001f273:	0f b6 c0             	movzx  eax,al
c001f276:	ff 24 85 84 c9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd367c]
c001f27d:	89 ef                	mov    edi,ebp
c001f27f:	eb 11                	jmp    c001f292 <Vm::faultHandler(regs*)+0x504>
c001f281:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f284:	eb 0c                	jmp    c001f292 <Vm::faultHandler(regs*)+0x504>
c001f286:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f289:	eb 07                	jmp    c001f292 <Vm::faultHandler(regs*)+0x504>
c001f28b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f28e:	eb 02                	jmp    c001f292 <Vm::faultHandler(regs*)+0x504>
c001f290:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f292:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f295:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f29a:	74 37                	je     c001f2d3 <Vm::faultHandler(regs*)+0x545>
c001f29c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f2a2:	76 2f                	jbe    c001f2d3 <Vm::faultHandler(regs*)+0x545>
c001f2a4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2a8:	50                   	push   eax
c001f2a9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2ad:	50                   	push   eax
c001f2ae:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2b2:	50                   	push   eax
c001f2b3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2b7:	50                   	push   eax
c001f2b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2bc:	50                   	push   eax
c001f2bd:	6a 6f                	push   0x6f
c001f2bf:	6a 6f                	push   0x6f
c001f2c1:	68 12 c9 02 c0       	push   0xc002c912
c001f2c6:	e8 ea 36 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001f2cb:	83 c4 20             	add    esp,0x20
c001f2ce:	e9 86 01 00 00       	jmp    c001f459 <Vm::faultHandler(regs*)+0x6cb>
c001f2d3:	0f b7 d7             	movzx  edx,di
c001f2d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f2d9:	0f b7 c6             	movzx  eax,si
c001f2dc:	81 e1 00 04 00 00    	and    ecx,0x400
c001f2e2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f2e5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2ea:	74 1d                	je     c001f309 <Vm::faultHandler(regs*)+0x57b>
c001f2ec:	55                   	push   ebp
c001f2ed:	55                   	push   ebp
c001f2ee:	50                   	push   eax
c001f2ef:	52                   	push   edx
c001f2f0:	e8 48 fa ff ff       	call   c001ed3d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f2f5:	83 c4 10             	add    esp,0x10
c001f2f8:	89 fa                	mov    edx,edi
c001f2fa:	ef                   	out    dx,eax
c001f2fb:	85 c9                	test   ecx,ecx
c001f2fd:	74 05                	je     c001f304 <Vm::faultHandler(regs*)+0x576>
c001f2ff:	83 ee 04             	sub    esi,0x4
c001f302:	eb 21                	jmp    c001f325 <Vm::faultHandler(regs*)+0x597>
c001f304:	83 c6 04             	add    esi,0x4
c001f307:	eb 1c                	jmp    c001f325 <Vm::faultHandler(regs*)+0x597>
c001f309:	55                   	push   ebp
c001f30a:	55                   	push   ebp
c001f30b:	50                   	push   eax
c001f30c:	52                   	push   edx
c001f30d:	e8 19 fa ff ff       	call   c001ed2b <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f312:	83 c4 10             	add    esp,0x10
c001f315:	89 fa                	mov    edx,edi
c001f317:	66 ef                	out    dx,ax
c001f319:	85 c9                	test   ecx,ecx
c001f31b:	74 05                	je     c001f322 <Vm::faultHandler(regs*)+0x594>
c001f31d:	83 ee 02             	sub    esi,0x2
c001f320:	eb 03                	jmp    c001f325 <Vm::faultHandler(regs*)+0x597>
c001f322:	83 c6 02             	add    esi,0x2
c001f325:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f32b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f32e:	e9 cb 00 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f333:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f33a:	83 ec 0c             	sub    esp,0xc
c001f33d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f341:	50                   	push   eax
c001f342:	e8 42 f6 ff ff       	call   c001e989 <Vm::inbv(unsigned short)>
c001f347:	0f b6 c0             	movzx  eax,al
c001f34a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f34d:	eb 3f                	jmp    c001f38e <Vm::faultHandler(regs*)+0x600>
c001f34f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f354:	74 07                	je     c001f35d <Vm::faultHandler(regs*)+0x5cf>
c001f356:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f35a:	ed                   	in     eax,dx
c001f35b:	eb 14                	jmp    c001f371 <Vm::faultHandler(regs*)+0x5e3>
c001f35d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f360:	66 31 f6             	xor    si,si
c001f363:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f366:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f36a:	66 ed                	in     ax,dx
c001f36c:	0f b7 c0             	movzx  eax,ax
c001f36f:	09 f0                	or     eax,esi
c001f371:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f374:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f378:	e9 84 00 00 00       	jmp    c001f401 <Vm::faultHandler(regs*)+0x673>
c001f37d:	52                   	push   edx
c001f37e:	52                   	push   edx
c001f37f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f383:	50                   	push   eax
c001f384:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f388:	50                   	push   eax
c001f389:	e8 0e f6 ff ff       	call   c001e99c <Vm::outbv(unsigned short, unsigned char)>
c001f38e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f392:	eb 53                	jmp    c001f3e7 <Vm::faultHandler(regs*)+0x659>
c001f394:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f397:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f39b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3a0:	74 03                	je     c001f3a5 <Vm::faultHandler(regs*)+0x617>
c001f3a2:	ef                   	out    dx,eax
c001f3a3:	eb cf                	jmp    c001f374 <Vm::faultHandler(regs*)+0x5e6>
c001f3a5:	66 ef                	out    dx,ax
c001f3a7:	eb cb                	jmp    c001f374 <Vm::faultHandler(regs*)+0x5e6>
c001f3a9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f3b0:	83 ec 0c             	sub    esp,0xc
c001f3b3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3b7:	50                   	push   eax
c001f3b8:	e8 cc f5 ff ff       	call   c001e989 <Vm::inbv(unsigned short)>
c001f3bd:	0f b6 c0             	movzx  eax,al
c001f3c0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f3c3:	eb 1f                	jmp    c001f3e4 <Vm::faultHandler(regs*)+0x656>
c001f3c5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f3c8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3cd:	74 03                	je     c001f3d2 <Vm::faultHandler(regs*)+0x644>
c001f3cf:	ed                   	in     eax,dx
c001f3d0:	eb 0d                	jmp    c001f3df <Vm::faultHandler(regs*)+0x651>
c001f3d2:	66 ed                	in     ax,dx
c001f3d4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f3d7:	0f b7 c0             	movzx  eax,ax
c001f3da:	66 31 d2             	xor    dx,dx
c001f3dd:	09 d0                	or     eax,edx
c001f3df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3e2:	eb 1a                	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f3e4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	eb 15                	jmp    c001f401 <Vm::faultHandler(regs*)+0x673>
c001f3ec:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3ef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f3f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3f7:	74 03                	je     c001f3fc <Vm::faultHandler(regs*)+0x66e>
c001f3f9:	ef                   	out    dx,eax
c001f3fa:	eb 02                	jmp    c001f3fe <Vm::faultHandler(regs*)+0x670>
c001f3fc:	66 ef                	out    dx,ax
c001f3fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f401:	b0 01                	mov    al,0x1
c001f403:	eb 56                	jmp    c001f45b <Vm::faultHandler(regs*)+0x6cd>
c001f405:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f409:	50                   	push   eax
c001f40a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f40e:	50                   	push   eax
c001f40f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f413:	50                   	push   eax
c001f414:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f418:	50                   	push   eax
c001f419:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f41d:	50                   	push   eax
c001f41e:	52                   	push   edx
c001f41f:	52                   	push   edx
c001f420:	68 3f c9 02 c0       	push   0xc002c93f
c001f425:	e8 8b 35 ff ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c001f42a:	83 c4 20             	add    esp,0x20
c001f42d:	83 ec 0c             	sub    esp,0xc
c001f430:	6a 60                	push   0x60
c001f432:	e8 52 f5 ff ff       	call   c001e989 <Vm::inbv(unsigned short)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	3c 1c                	cmp    al,0x1c
c001f43c:	74 04                	je     c001f442 <Vm::faultHandler(regs*)+0x6b4>
c001f43e:	3c 5a                	cmp    al,0x5a
c001f440:	75 eb                	jne    c001f42d <Vm::faultHandler(regs*)+0x69f>
c001f442:	3c 5a                	cmp    al,0x5a
c001f444:	74 04                	je     c001f44a <Vm::faultHandler(regs*)+0x6bc>
c001f446:	3c 1c                	cmp    al,0x1c
c001f448:	75 0f                	jne    c001f459 <Vm::faultHandler(regs*)+0x6cb>
c001f44a:	83 ec 0c             	sub    esp,0xc
c001f44d:	6a 60                	push   0x60
c001f44f:	e8 35 f5 ff ff       	call   c001e989 <Vm::inbv(unsigned short)>
c001f454:	83 c4 10             	add    esp,0x10
c001f457:	eb e9                	jmp    c001f442 <Vm::faultHandler(regs*)+0x6b4>
c001f459:	31 c0                	xor    eax,eax
c001f45b:	83 c4 1c             	add    esp,0x1c
c001f45e:	5b                   	pop    ebx
c001f45f:	5e                   	pop    esi
c001f460:	5f                   	pop    edi
c001f461:	5d                   	pop    ebp
c001f462:	c3                   	ret    

c001f463 <Vm::fpuInternalTo32(unsigned long long)>:
c001f463:	57                   	push   edi
c001f464:	56                   	push   esi
c001f465:	53                   	push   ebx
c001f466:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46e:	89 d6                	mov    esi,edx
c001f470:	89 d7                	mov    edi,edx
c001f472:	89 c1                	mov    ecx,eax
c001f474:	c1 ef 14             	shr    edi,0x14
c001f477:	89 d3                	mov    ebx,edx
c001f479:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f47f:	31 d2                	xor    edx,edx
c001f481:	89 f8                	mov    eax,edi
c001f483:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f489:	bf ff 00 00 00       	mov    edi,0xff
c001f48e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f493:	83 d2 ff             	adc    edx,0xffffffff
c001f496:	39 c7                	cmp    edi,eax
c001f498:	bf 00 00 00 00       	mov    edi,0x0
c001f49d:	19 d7                	sbb    edi,edx
c001f49f:	72 15                	jb     c001f4b6 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4a1:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4a5:	c1 e0 17             	shl    eax,0x17
c001f4a8:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f4ae:	09 f1                	or     ecx,esi
c001f4b0:	09 c1                	or     ecx,eax
c001f4b2:	89 cf                	mov    edi,ecx
c001f4b4:	eb 02                	jmp    c001f4b8 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f4b6:	31 ff                	xor    edi,edi
c001f4b8:	89 f8                	mov    eax,edi
c001f4ba:	5b                   	pop    ebx
c001f4bb:	5e                   	pop    esi
c001f4bc:	5f                   	pop    edi
c001f4bd:	c3                   	ret    

c001f4be <Vm::fpuInternalTo64(unsigned long long)>:
c001f4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f4c6:	c3                   	ret    

c001f4c7 <Vm::fpu32ToInternal(unsigned int)>:
c001f4c7:	57                   	push   edi
c001f4c8:	31 ff                	xor    edi,edi
c001f4ca:	56                   	push   esi
c001f4cb:	53                   	push   ebx
c001f4cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f4d0:	89 cb                	mov    ebx,ecx
c001f4d2:	89 ce                	mov    esi,ecx
c001f4d4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f4da:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f4e0:	c1 e9 17             	shr    ecx,0x17
c001f4e3:	89 f0                	mov    eax,esi
c001f4e5:	0f b6 d1             	movzx  edx,cl
c001f4e8:	81 c2 80 03 00 00    	add    edx,0x380
c001f4ee:	89 d1                	mov    ecx,edx
c001f4f0:	89 fa                	mov    edx,edi
c001f4f2:	c1 e1 14             	shl    ecx,0x14
c001f4f5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f4f9:	c1 e0 1d             	shl    eax,0x1d
c001f4fc:	89 d7                	mov    edi,edx
c001f4fe:	89 c6                	mov    esi,eax
c001f500:	89 ca                	mov    edx,ecx
c001f502:	89 f0                	mov    eax,esi
c001f504:	09 fa                	or     edx,edi
c001f506:	09 da                	or     edx,ebx
c001f508:	5b                   	pop    ebx
c001f509:	5e                   	pop    esi
c001f50a:	5f                   	pop    edi
c001f50b:	c3                   	ret    

c001f50c <Vm::fpu64ToInternal(unsigned long long)>:
c001f50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f514:	c3                   	ret    

c001f515 <Vm::fpuFloatToLong(unsigned long long)>:
c001f515:	57                   	push   edi
c001f516:	31 c0                	xor    eax,eax
c001f518:	56                   	push   esi
c001f519:	31 d2                	xor    edx,edx
c001f51b:	53                   	push   ebx
c001f51c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f520:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f524:	89 d9                	mov    ecx,ebx
c001f526:	c1 e9 14             	shr    ecx,0x14
c001f529:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f52f:	89 cf                	mov    edi,ecx
c001f531:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f537:	78 33                	js     c001f56c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f539:	89 d9                	mov    ecx,ebx
c001f53b:	89 f0                	mov    eax,esi
c001f53d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f543:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f549:	89 ca                	mov    edx,ecx
c001f54b:	b9 34 00 00 00       	mov    ecx,0x34
c001f550:	29 f9                	sub    ecx,edi
c001f552:	0f ad d0             	shrd   eax,edx,cl
c001f555:	d3 fa                	sar    edx,cl
c001f557:	f6 c1 20             	test   cl,0x20
c001f55a:	74 05                	je     c001f561 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f55c:	89 d0                	mov    eax,edx
c001f55e:	c1 fa 1f             	sar    edx,0x1f
c001f561:	85 db                	test   ebx,ebx
c001f563:	79 07                	jns    c001f56c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f565:	f7 d8                	neg    eax
c001f567:	83 d2 00             	adc    edx,0x0
c001f56a:	f7 da                	neg    edx
c001f56c:	5b                   	pop    ebx
c001f56d:	5e                   	pop    esi
c001f56e:	5f                   	pop    edi
c001f56f:	c3                   	ret    

c001f570 <Vm::fpuULongToFloat(unsigned long long)>:
c001f570:	57                   	push   edi
c001f571:	31 c9                	xor    ecx,ecx
c001f573:	56                   	push   esi
c001f574:	53                   	push   ebx
c001f575:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f579:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f57d:	0f ba e7 14          	bt     edi,0x14
c001f581:	72 07                	jb     c001f58a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f583:	01 f6                	add    esi,esi
c001f585:	11 ff                	adc    edi,edi
c001f587:	41                   	inc    ecx
c001f588:	eb f3                	jmp    c001f57d <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f58a:	89 fa                	mov    edx,edi
c001f58c:	89 f0                	mov    eax,esi
c001f58e:	bb 33 04 00 00       	mov    ebx,0x433
c001f593:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f599:	29 cb                	sub    ebx,ecx
c001f59b:	89 d9                	mov    ecx,ebx
c001f59d:	5b                   	pop    ebx
c001f59e:	c1 e1 14             	shl    ecx,0x14
c001f5a1:	5e                   	pop    esi
c001f5a2:	09 ca                	or     edx,ecx
c001f5a4:	5f                   	pop    edi
c001f5a5:	c3                   	ret    

c001f5a6 <Vm::fpuLongToFloat(long long)>:
c001f5a6:	56                   	push   esi
c001f5a7:	31 c0                	xor    eax,eax
c001f5a9:	53                   	push   ebx
c001f5aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5b2:	39 c8                	cmp    eax,ecx
c001f5b4:	19 d8                	sbb    eax,ebx
c001f5b6:	7d 04                	jge    c001f5bc <Vm::fpuLongToFloat(long long)+0x16>
c001f5b8:	31 f6                	xor    esi,esi
c001f5ba:	eb 0c                	jmp    c001f5c8 <Vm::fpuLongToFloat(long long)+0x22>
c001f5bc:	f7 d9                	neg    ecx
c001f5be:	be 01 00 00 00       	mov    esi,0x1
c001f5c3:	83 d3 00             	adc    ebx,0x0
c001f5c6:	f7 db                	neg    ebx
c001f5c8:	31 c0                	xor    eax,eax
c001f5ca:	0f ba e3 14          	bt     ebx,0x14
c001f5ce:	72 07                	jb     c001f5d7 <Vm::fpuLongToFloat(long long)+0x31>
c001f5d0:	01 c9                	add    ecx,ecx
c001f5d2:	11 db                	adc    ebx,ebx
c001f5d4:	40                   	inc    eax
c001f5d5:	eb f3                	jmp    c001f5ca <Vm::fpuLongToFloat(long long)+0x24>
c001f5d7:	ba 33 04 00 00       	mov    edx,0x433
c001f5dc:	29 c2                	sub    edx,eax
c001f5de:	89 c8                	mov    eax,ecx
c001f5e0:	c1 e2 14             	shl    edx,0x14
c001f5e3:	89 d9                	mov    ecx,ebx
c001f5e5:	89 f3                	mov    ebx,esi
c001f5e7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5ed:	09 ca                	or     edx,ecx
c001f5ef:	84 db                	test   bl,bl
c001f5f1:	74 06                	je     c001f5f9 <Vm::fpuLongToFloat(long long)+0x53>
c001f5f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f5f9:	5b                   	pop    ebx
c001f5fa:	5e                   	pop    esi
c001f5fb:	c3                   	ret    

c001f5fc <Vm::fpuGet0()>:
c001f5fc:	31 c0                	xor    eax,eax
c001f5fe:	31 d2                	xor    edx,edx
c001f600:	c3                   	ret    

c001f601 <Vm::fpuGet1()>:
c001f601:	b8 01 00 00 00       	mov    eax,0x1
c001f606:	31 d2                	xor    edx,edx
c001f608:	c3                   	ret    

c001f609 <Vm::fpuGetPi()>:
c001f609:	b8 03 00 00 00       	mov    eax,0x3
c001f60e:	31 d2                	xor    edx,edx
c001f610:	c3                   	ret    

c001f611 <Vm::fpuGetLog2E()>:
c001f611:	83 ec 18             	sub    esp,0x18
c001f614:	68 9c c9 02 c0       	push   0xc002c99c
c001f619:	e8 35 ad ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f61e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f623:	31 d2                	xor    edx,edx
c001f625:	83 c4 1c             	add    esp,0x1c
c001f628:	c3                   	ret    

c001f629 <Vm::fpuGetLogE2()>:
c001f629:	83 ec 18             	sub    esp,0x18
c001f62c:	68 a8 c9 02 c0       	push   0xc002c9a8
c001f631:	e8 1d ad ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f636:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f63b:	31 d2                	xor    edx,edx
c001f63d:	83 c4 1c             	add    esp,0x1c
c001f640:	c3                   	ret    

c001f641 <Vm::fpuGetLog210()>:
c001f641:	83 ec 18             	sub    esp,0x18
c001f644:	68 b4 c9 02 c0       	push   0xc002c9b4
c001f649:	e8 05 ad ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f64e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f653:	31 d2                	xor    edx,edx
c001f655:	83 c4 1c             	add    esp,0x1c
c001f658:	c3                   	ret    

c001f659 <Vm::fpuGetLog102()>:
c001f659:	83 ec 18             	sub    esp,0x18
c001f65c:	68 c1 c9 02 c0       	push   0xc002c9c1
c001f661:	e8 ed ac ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f666:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f66b:	31 d2                	xor    edx,edx
c001f66d:	83 c4 1c             	add    esp,0x1c
c001f670:	c3                   	ret    

c001f671 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f675:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f67d:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f681:	0f 92 c0             	setb   al
c001f684:	c3                   	ret    

c001f685 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f685:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f691:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f695:	09 c2                	or     edx,eax
c001f697:	0f 94 c0             	sete   al
c001f69a:	c3                   	ret    

c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f69b:	57                   	push   edi
c001f69c:	56                   	push   esi
c001f69d:	53                   	push   ebx
c001f69e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6ae:	57                   	push   edi
c001f6af:	56                   	push   esi
c001f6b0:	53                   	push   ebx
c001f6b1:	51                   	push   ecx
c001f6b2:	e8 ce ff ff ff       	call   c001f685 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	88 c2                	mov    dl,al
c001f6bc:	31 c0                	xor    eax,eax
c001f6be:	84 d2                	test   dl,dl
c001f6c0:	75 0c                	jne    c001f6ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f6c2:	57                   	push   edi
c001f6c3:	56                   	push   esi
c001f6c4:	53                   	push   ebx
c001f6c5:	51                   	push   ecx
c001f6c6:	e8 a6 ff ff ff       	call   c001f671 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f6cb:	83 c4 10             	add    esp,0x10
c001f6ce:	83 e0 01             	and    eax,0x1
c001f6d1:	5b                   	pop    ebx
c001f6d2:	88 c1                	mov    cl,al
c001f6d4:	83 e2 01             	and    edx,0x1
c001f6d7:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c001f6dc:	c1 e2 06             	shl    edx,0x6
c001f6df:	83 e0 ba             	and    eax,0xffffffba
c001f6e2:	5e                   	pop    esi
c001f6e3:	09 c8                	or     eax,ecx
c001f6e5:	5f                   	pop    edi
c001f6e6:	09 d0                	or     eax,edx
c001f6e8:	a2 61 fb 02 c0       	mov    ds:0xc002fb61,al
c001f6ed:	c3                   	ret    

c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f6ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6f6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f6fa:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f6fe:	c3                   	ret    

c001f6ff <Vm::fpuAbs(unsigned long long)>:
c001f6ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f707:	c3                   	ret    

c001f708 <Vm::fpuChs(unsigned long long)>:
c001f708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f710:	f7 d8                	neg    eax
c001f712:	83 d2 00             	adc    edx,0x0
c001f715:	f7 da                	neg    edx
c001f717:	c3                   	ret    

c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f718:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f71c:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f721:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f725:	eb c7                	jmp    c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f727:	53                   	push   ebx
c001f728:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f72c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f730:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f734:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f738:	0f af ca             	imul   ecx,edx
c001f73b:	0f af d8             	imul   ebx,eax
c001f73e:	f7 e2                	mul    edx
c001f740:	01 d9                	add    ecx,ebx
c001f742:	5b                   	pop    ebx
c001f743:	01 ca                	add    edx,ecx
c001f745:	c3                   	ret    

c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f746:	83 ec 0c             	sub    esp,0xc
c001f749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f759:	e8 26 76 00 00       	call   c0026d84 <__udivdi3>
c001f75e:	83 c4 1c             	add    esp,0x1c
c001f761:	c3                   	ret    

c001f762 <Vm::fpuSquare(unsigned long long)>:
c001f762:	50                   	push   eax
c001f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f76b:	52                   	push   edx
c001f76c:	50                   	push   eax
c001f76d:	52                   	push   edx
c001f76e:	50                   	push   eax
c001f76f:	e8 b3 ff ff ff       	call   c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f774:	83 c4 14             	add    esp,0x14
c001f777:	c3                   	ret    

c001f778 <Vm::fpuGetReg(int)>:
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f780:	76 10                	jbe    c001f792 <Vm::fpuGetReg(int)+0x1a>
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	68 ce c9 02 c0       	push   0xc002c9ce
c001f78a:	e8 c4 ab ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c001f797:	b9 08 00 00 00       	mov    ecx,0x8
c001f79c:	c0 e8 03             	shr    al,0x3
c001f79f:	83 e0 07             	and    eax,0x7
c001f7a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7a6:	99                   	cdq    
c001f7a7:	f7 f9                	idiv   ecx
c001f7a9:	8b 04 d5 64 fb 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd049c]
c001f7b0:	8b 14 d5 68 fb 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0498]
c001f7b7:	83 c4 0c             	add    esp,0xc
c001f7ba:	c3                   	ret    

c001f7bb <Vm::fpuSetReg(int, unsigned long long)>:
c001f7bb:	57                   	push   edi
c001f7bc:	56                   	push   esi
c001f7bd:	52                   	push   edx
c001f7be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f7c2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7c6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7cb:	76 10                	jbe    c001f7dd <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f7cd:	83 ec 0c             	sub    esp,0xc
c001f7d0:	68 e1 c9 02 c0       	push   0xc002c9e1
c001f7d5:	e8 79 ab ff ff       	call   c001a353 <Krnl::panic(char const*)>
c001f7da:	83 c4 10             	add    esp,0x10
c001f7dd:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c001f7e2:	b9 08 00 00 00       	mov    ecx,0x8
c001f7e7:	c0 e8 03             	shr    al,0x3
c001f7ea:	83 e0 07             	and    eax,0x7
c001f7ed:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7f1:	99                   	cdq    
c001f7f2:	f7 f9                	idiv   ecx
c001f7f4:	89 34 d5 64 fb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd049c],esi
c001f7fb:	89 3c d5 68 fb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0498],edi
c001f802:	58                   	pop    eax
c001f803:	5e                   	pop    esi
c001f804:	5f                   	pop    edi
c001f805:	c3                   	ret    

c001f806 <Vm::fpuPush(unsigned long long)>:
c001f806:	a0 61 fb 02 c0       	mov    al,ds:0xc002fb61
c001f80b:	c0 e8 03             	shr    al,0x3
c001f80e:	83 e0 07             	and    eax,0x7
c001f811:	83 c0 07             	add    eax,0x7
c001f814:	88 c2                	mov    dl,al
c001f816:	83 e0 07             	and    eax,0x7
c001f819:	83 e2 07             	and    edx,0x7
c001f81c:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f823:	8a 15 61 fb 02 c0    	mov    dl,BYTE PTR ds:0xc002fb61
c001f829:	83 e2 c7             	and    edx,0xffffffc7
c001f82c:	09 ca                	or     edx,ecx
c001f82e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f832:	88 15 61 fb 02 c0    	mov    BYTE PTR ds:0xc002fb61,dl
c001f838:	89 0c c5 68 fb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0498],ecx
c001f83f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f843:	89 14 c5 64 fb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd049c],edx
c001f84a:	a1 a4 fb 02 c0       	mov    eax,ds:0xc002fba4
c001f84f:	83 f8 08             	cmp    eax,0x8
c001f852:	75 08                	jne    c001f85c <Vm::fpuPush(unsigned long long)+0x56>
c001f854:	80 0d 60 fb 02 c0 40 	or     BYTE PTR ds:0xc002fb60,0x40
c001f85b:	c3                   	ret    
c001f85c:	40                   	inc    eax
c001f85d:	a3 a4 fb 02 c0       	mov    ds:0xc002fba4,eax
c001f862:	c3                   	ret    

c001f863 <Vm::fpuPop()>:
c001f863:	8a 0d 61 fb 02 c0    	mov    cl,BYTE PTR ds:0xc002fb61
c001f869:	53                   	push   ebx
c001f86a:	c0 e9 03             	shr    cl,0x3
c001f86d:	8a 1d 61 fb 02 c0    	mov    bl,BYTE PTR ds:0xc002fb61
c001f873:	83 e1 07             	and    ecx,0x7
c001f876:	83 e3 c7             	and    ebx,0xffffffc7
c001f879:	8b 04 cd 64 fb 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd049c]
c001f880:	8b 14 cd 68 fb 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0498]
c001f887:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f88e:	83 e1 38             	and    ecx,0x38
c001f891:	09 d9                	or     ecx,ebx
c001f893:	88 0d 61 fb 02 c0    	mov    BYTE PTR ds:0xc002fb61,cl
c001f899:	8b 0d a4 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fba4
c001f89f:	85 c9                	test   ecx,ecx
c001f8a1:	74 09                	je     c001f8ac <Vm::fpuPop()+0x49>
c001f8a3:	49                   	dec    ecx
c001f8a4:	89 0d a4 fb 02 c0    	mov    DWORD PTR ds:0xc002fba4,ecx
c001f8aa:	eb 07                	jmp    c001f8b3 <Vm::fpuPop()+0x50>
c001f8ac:	80 0d 60 fb 02 c0 40 	or     BYTE PTR ds:0xc002fb60,0x40
c001f8b3:	5b                   	pop    ebx
c001f8b4:	c3                   	ret    

c001f8b5 <Vm::x87Handler(regs*)>:
c001f8b5:	55                   	push   ebp
c001f8b6:	57                   	push   edi
c001f8b7:	56                   	push   esi
c001f8b8:	53                   	push   ebx
c001f8b9:	83 ec 1c             	sub    esp,0x1c
c001f8bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f8c0:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f8c5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f8c8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f8d0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f8d4:	50                   	push   eax
c001f8d5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f8d9:	50                   	push   eax
c001f8da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f8de:	50                   	push   eax
c001f8df:	53                   	push   ebx
c001f8e0:	e8 87 a1 ff ff       	call   c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f8e5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f8e8:	83 c4 10             	add    esp,0x10
c001f8eb:	89 c6                	mov    esi,eax
c001f8ed:	80 fa d9             	cmp    dl,0xd9
c001f8f0:	0f 85 52 01 00 00    	jne    c001fa48 <Vm::x87Handler(regs*)+0x193>
c001f8f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8fa:	8d 50 20             	lea    edx,[eax+0x20]
c001f8fd:	80 fa 0e             	cmp    dl,0xe
c001f900:	0f 87 86 00 00 00    	ja     c001f98c <Vm::x87Handler(regs*)+0xd7>
c001f906:	0f b6 d2             	movzx  edx,dl
c001f909:	ff 24 95 f4 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd360c]
c001f910:	e8 e7 fc ff ff       	call   c001f5fc <Vm::fpuGet0()>
c001f915:	eb 05                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f917:	e8 e5 fc ff ff       	call   c001f601 <Vm::fpuGet1()>
c001f91c:	57                   	push   edi
c001f91d:	57                   	push   edi
c001f91e:	52                   	push   edx
c001f91f:	50                   	push   eax
c001f920:	e8 e1 fe ff ff       	call   c001f806 <Vm::fpuPush(unsigned long long)>
c001f925:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	b0 01                	mov    al,0x1
c001f92e:	e9 e3 09 00 00       	jmp    c0020316 <Vm::x87Handler(regs*)+0xa61>
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	6a 00                	push   0x0
c001f938:	e8 3b fe ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001f93d:	59                   	pop    ecx
c001f93e:	5e                   	pop    esi
c001f93f:	52                   	push   edx
c001f940:	50                   	push   eax
c001f941:	e8 c2 fd ff ff       	call   c001f708 <Vm::fpuChs(unsigned long long)>
c001f946:	eb 13                	jmp    c001f95b <Vm::x87Handler(regs*)+0xa6>
c001f948:	83 ec 0c             	sub    esp,0xc
c001f94b:	6a 00                	push   0x0
c001f94d:	e8 26 fe ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001f952:	5f                   	pop    edi
c001f953:	5d                   	pop    ebp
c001f954:	52                   	push   edx
c001f955:	50                   	push   eax
c001f956:	e8 a4 fd ff ff       	call   c001f6ff <Vm::fpuAbs(unsigned long long)>
c001f95b:	83 c4 0c             	add    esp,0xc
c001f95e:	52                   	push   edx
c001f95f:	50                   	push   eax
c001f960:	6a 00                	push   0x0
c001f962:	e8 54 fe ff ff       	call   c001f7bb <Vm::fpuSetReg(int, unsigned long long)>
c001f967:	eb bc                	jmp    c001f925 <Vm::x87Handler(regs*)+0x70>
c001f969:	e8 d3 fc ff ff       	call   c001f641 <Vm::fpuGetLog210()>
c001f96e:	eb ac                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f970:	e8 9c fc ff ff       	call   c001f611 <Vm::fpuGetLog2E()>
c001f975:	eb a5                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f977:	e8 8d fc ff ff       	call   c001f609 <Vm::fpuGetPi()>
c001f97c:	eb 9e                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f97e:	e8 d6 fc ff ff       	call   c001f659 <Vm::fpuGetLog102()>
c001f983:	eb 97                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f985:	e8 9f fc ff ff       	call   c001f629 <Vm::fpuGetLogE2()>
c001f98a:	eb 90                	jmp    c001f91c <Vm::x87Handler(regs*)+0x67>
c001f98c:	8d 50 40             	lea    edx,[eax+0x40]
c001f98f:	80 fa 07             	cmp    dl,0x7
c001f992:	77 15                	ja     c001f9a9 <Vm::x87Handler(regs*)+0xf4>
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	2d c0 00 00 00       	sub    eax,0xc0
c001f99c:	50                   	push   eax
c001f99d:	e8 d6 fd ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001f9a2:	59                   	pop    ecx
c001f9a3:	5e                   	pop    esi
c001f9a4:	e9 75 ff ff ff       	jmp    c001f91e <Vm::x87Handler(regs*)+0x69>
c001f9a9:	8d 50 38             	lea    edx,[eax+0x38]
c001f9ac:	80 fa 07             	cmp    dl,0x7
c001f9af:	77 3c                	ja     c001f9ed <Vm::x87Handler(regs*)+0x138>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	2d c8 00 00 00       	sub    eax,0xc8
c001f9b9:	50                   	push   eax
c001f9ba:	e8 b9 fd ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001f9bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9c6:	89 c6                	mov    esi,eax
c001f9c8:	89 d7                	mov    edi,edx
c001f9ca:	e8 a9 fd ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	52                   	push   edx
c001f9d3:	50                   	push   eax
c001f9d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d8:	2d c8 00 00 00       	sub    eax,0xc8
c001f9dd:	50                   	push   eax
c001f9de:	e8 d8 fd ff ff       	call   c001f7bb <Vm::fpuSetReg(int, unsigned long long)>
c001f9e3:	83 c4 0c             	add    esp,0xc
c001f9e6:	57                   	push   edi
c001f9e7:	56                   	push   esi
c001f9e8:	e9 73 ff ff ff       	jmp    c001f960 <Vm::x87Handler(regs*)+0xab>
c001f9ed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9f1:	84 d2                	test   dl,dl
c001f9f3:	75 0f                	jne    c001fa04 <Vm::x87Handler(regs*)+0x14f>
c001f9f5:	83 ec 0c             	sub    esp,0xc
c001f9f8:	ff 36                	push   DWORD PTR [esi]
c001f9fa:	e8 c8 fa ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c001f9ff:	e9 bf 00 00 00       	jmp    c001fac3 <Vm::x87Handler(regs*)+0x20e>
c001fa04:	80 fa 03             	cmp    dl,0x3
c001fa07:	75 13                	jne    c001fa1c <Vm::x87Handler(regs*)+0x167>
c001fa09:	e8 55 fe ff ff       	call   c001f863 <Vm::fpuPop()>
c001fa0e:	55                   	push   ebp
c001fa0f:	55                   	push   ebp
c001fa10:	52                   	push   edx
c001fa11:	50                   	push   eax
c001fa12:	e8 4c fa ff ff       	call   c001f463 <Vm::fpuInternalTo32(unsigned long long)>
c001fa17:	e9 88 00 00 00       	jmp    c001faa4 <Vm::x87Handler(regs*)+0x1ef>
c001fa1c:	80 fa 05             	cmp    dl,0x5
c001fa1f:	75 0e                	jne    c001fa2f <Vm::x87Handler(regs*)+0x17a>
c001fa21:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa24:	66 a3 62 fb 02 c0    	mov    ds:0xc002fb62,ax
c001fa2a:	e9 df 00 00 00       	jmp    c001fb0e <Vm::x87Handler(regs*)+0x259>
c001fa2f:	31 c0                	xor    eax,eax
c001fa31:	80 fa 07             	cmp    dl,0x7
c001fa34:	0f 85 dc 08 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c001fa3a:	66 a1 62 fb 02 c0    	mov    ax,ds:0xc002fb62
c001fa40:	66 89 06             	mov    WORD PTR [esi],ax
c001fa43:	e9 c6 00 00 00       	jmp    c001fb0e <Vm::x87Handler(regs*)+0x259>
c001fa48:	80 fa d8             	cmp    dl,0xd8
c001fa4b:	0f 84 c9 00 00 00    	je     c001fb1a <Vm::x87Handler(regs*)+0x265>
c001fa51:	80 fa dc             	cmp    dl,0xdc
c001fa54:	0f 84 0d 02 00 00    	je     c001fc67 <Vm::x87Handler(regs*)+0x3b2>
c001fa5a:	80 fa de             	cmp    dl,0xde
c001fa5d:	0f 84 cd 02 00 00    	je     c001fd30 <Vm::x87Handler(regs*)+0x47b>
c001fa63:	80 fa dd             	cmp    dl,0xdd
c001fa66:	0f 84 5f 04 00 00    	je     c001fecb <Vm::x87Handler(regs*)+0x616>
c001fa6c:	80 fa da             	cmp    dl,0xda
c001fa6f:	0f 84 24 05 00 00    	je     c001ff99 <Vm::x87Handler(regs*)+0x6e4>
c001fa75:	80 fa df             	cmp    dl,0xdf
c001fa78:	0f 84 68 05 00 00    	je     c001ffe6 <Vm::x87Handler(regs*)+0x731>
c001fa7e:	31 c0                	xor    eax,eax
c001fa80:	80 fa db             	cmp    dl,0xdb
c001fa83:	0f 85 8d 08 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c001fa89:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa8d:	80 fa 03             	cmp    dl,0x3
c001fa90:	0f 85 70 06 00 00    	jne    c0020106 <Vm::x87Handler(regs*)+0x851>
c001fa96:	e8 c8 fd ff ff       	call   c001f863 <Vm::fpuPop()>
c001fa9b:	55                   	push   ebp
c001fa9c:	55                   	push   ebp
c001fa9d:	52                   	push   edx
c001fa9e:	50                   	push   eax
c001fa9f:	e8 71 fa ff ff       	call   c001f515 <Vm::fpuFloatToLong(unsigned long long)>
c001faa4:	83 c4 10             	add    esp,0x10
c001faa7:	89 06                	mov    DWORD PTR [esi],eax
c001faa9:	eb 63                	jmp    c001fb0e <Vm::x87Handler(regs*)+0x259>
c001faab:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faaf:	84 d2                	test   dl,dl
c001fab1:	0f 85 e6 05 00 00    	jne    c002009d <Vm::x87Handler(regs*)+0x7e8>
c001fab7:	57                   	push   edi
c001fab8:	57                   	push   edi
c001fab9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fabc:	ff 36                	push   DWORD PTR [esi]
c001fabe:	e8 49 fa ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c001fac3:	5e                   	pop    esi
c001fac4:	5f                   	pop    edi
c001fac5:	52                   	push   edx
c001fac6:	50                   	push   eax
c001fac7:	e8 3a fd ff ff       	call   c001f806 <Vm::fpuPush(unsigned long long)>
c001facc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fad0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fad3:	e9 51 fe ff ff       	jmp    c001f929 <Vm::x87Handler(regs*)+0x74>
c001fad8:	80 fa 03             	cmp    dl,0x3
c001fadb:	0f 85 d7 06 00 00    	jne    c00201b8 <Vm::x87Handler(regs*)+0x903>
c001fae1:	57                   	push   edi
c001fae2:	57                   	push   edi
c001fae3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fae6:	ff 36                	push   DWORD PTR [esi]
c001fae8:	e8 1f fa ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c001faed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faf4:	89 c6                	mov    esi,eax
c001faf6:	89 d7                	mov    edi,edx
c001faf8:	e8 7b fc ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fafd:	57                   	push   edi
c001fafe:	56                   	push   esi
c001faff:	52                   	push   edx
c001fb00:	50                   	push   eax
c001fb01:	e8 95 fb ff ff       	call   c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb06:	83 c4 20             	add    esp,0x20
c001fb09:	e8 55 fd ff ff       	call   c001f863 <Vm::fpuPop()>
c001fb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb12:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb15:	e9 12 fe ff ff       	jmp    c001f92c <Vm::x87Handler(regs*)+0x77>
c001fb1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1e:	8d 50 40             	lea    edx,[eax+0x40]
c001fb21:	80 fa 07             	cmp    dl,0x7
c001fb24:	77 29                	ja     c001fb4f <Vm::x87Handler(regs*)+0x29a>
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	2d c0 00 00 00       	sub    eax,0xc0
c001fb2e:	50                   	push   eax
c001fb2f:	e8 44 fc ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fb34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb3b:	89 c6                	mov    esi,eax
c001fb3d:	89 d7                	mov    edi,edx
c001fb3f:	e8 34 fc ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fb44:	57                   	push   edi
c001fb45:	56                   	push   esi
c001fb46:	52                   	push   edx
c001fb47:	50                   	push   eax
c001fb48:	e8 a1 fb ff ff       	call   c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb4d:	eb 2f                	jmp    c001fb7e <Vm::x87Handler(regs*)+0x2c9>
c001fb4f:	8d 50 38             	lea    edx,[eax+0x38]
c001fb52:	80 fa 07             	cmp    dl,0x7
c001fb55:	77 2f                	ja     c001fb86 <Vm::x87Handler(regs*)+0x2d1>
c001fb57:	83 ec 0c             	sub    esp,0xc
c001fb5a:	2d c8 00 00 00       	sub    eax,0xc8
c001fb5f:	50                   	push   eax
c001fb60:	e8 13 fc ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fb65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb6c:	89 c6                	mov    esi,eax
c001fb6e:	89 d7                	mov    edi,edx
c001fb70:	e8 03 fc ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fb75:	57                   	push   edi
c001fb76:	56                   	push   esi
c001fb77:	52                   	push   edx
c001fb78:	50                   	push   eax
c001fb79:	e8 a9 fb ff ff       	call   c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb7e:	83 c4 1c             	add    esp,0x1c
c001fb81:	e9 d8 fd ff ff       	jmp    c001f95e <Vm::x87Handler(regs*)+0xa9>
c001fb86:	8d 50 30             	lea    edx,[eax+0x30]
c001fb89:	80 fa 07             	cmp    dl,0x7
c001fb8c:	77 0d                	ja     c001fb9b <Vm::x87Handler(regs*)+0x2e6>
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	2d d0 00 00 00       	sub    eax,0xd0
c001fb96:	e9 99 03 00 00       	jmp    c001ff34 <Vm::x87Handler(regs*)+0x67f>
c001fb9b:	8d 50 28             	lea    edx,[eax+0x28]
c001fb9e:	80 fa 07             	cmp    dl,0x7
c001fba1:	77 0d                	ja     c001fbb0 <Vm::x87Handler(regs*)+0x2fb>
c001fba3:	83 ec 0c             	sub    esp,0xc
c001fba6:	2d d8 00 00 00       	sub    eax,0xd8
c001fbab:	e9 c0 03 00 00       	jmp    c001ff70 <Vm::x87Handler(regs*)+0x6bb>
c001fbb0:	8d 50 20             	lea    edx,[eax+0x20]
c001fbb3:	80 fa 07             	cmp    dl,0x7
c001fbb6:	77 1b                	ja     c001fbd3 <Vm::x87Handler(regs*)+0x31e>
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	2d e0 00 00 00       	sub    eax,0xe0
c001fbc0:	50                   	push   eax
c001fbc1:	e8 b2 fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fbc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbcd:	89 c6                	mov    esi,eax
c001fbcf:	89 d7                	mov    edi,edx
c001fbd1:	eb 22                	jmp    c001fbf5 <Vm::x87Handler(regs*)+0x340>
c001fbd3:	8d 50 18             	lea    edx,[eax+0x18]
c001fbd6:	80 fa 07             	cmp    dl,0x7
c001fbd9:	77 2d                	ja     c001fc08 <Vm::x87Handler(regs*)+0x353>
c001fbdb:	83 ec 0c             	sub    esp,0xc
c001fbde:	6a 00                	push   0x0
c001fbe0:	e8 93 fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fbe5:	89 c6                	mov    esi,eax
c001fbe7:	89 d7                	mov    edi,edx
c001fbe9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbed:	2d e8 00 00 00       	sub    eax,0xe8
c001fbf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbf5:	e8 7e fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fbfa:	57                   	push   edi
c001fbfb:	56                   	push   esi
c001fbfc:	52                   	push   edx
c001fbfd:	50                   	push   eax
c001fbfe:	e8 15 fb ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc03:	e9 76 ff ff ff       	jmp    c001fb7e <Vm::x87Handler(regs*)+0x2c9>
c001fc08:	8d 50 10             	lea    edx,[eax+0x10]
c001fc0b:	80 fa 07             	cmp    dl,0x7
c001fc0e:	77 1b                	ja     c001fc2b <Vm::x87Handler(regs*)+0x376>
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	2d f0 00 00 00       	sub    eax,0xf0
c001fc18:	50                   	push   eax
c001fc19:	e8 5a fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fc1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc25:	89 c6                	mov    esi,eax
c001fc27:	89 d7                	mov    edi,edx
c001fc29:	eb 22                	jmp    c001fc4d <Vm::x87Handler(regs*)+0x398>
c001fc2b:	3c f7                	cmp    al,0xf7
c001fc2d:	0f 86 d1 03 00 00    	jbe    c0020004 <Vm::x87Handler(regs*)+0x74f>
c001fc33:	83 ec 0c             	sub    esp,0xc
c001fc36:	6a 00                	push   0x0
c001fc38:	e8 3b fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fc3d:	89 c6                	mov    esi,eax
c001fc3f:	89 d7                	mov    edi,edx
c001fc41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc45:	2d f8 00 00 00       	sub    eax,0xf8
c001fc4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc4d:	e8 26 fb ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fc52:	57                   	push   edi
c001fc53:	56                   	push   esi
c001fc54:	52                   	push   edx
c001fc55:	50                   	push   eax
c001fc56:	e8 eb fa ff ff       	call   c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc5b:	83 c4 1c             	add    esp,0x1c
c001fc5e:	52                   	push   edx
c001fc5f:	50                   	push   eax
c001fc60:	6a 00                	push   0x0
c001fc62:	e9 51 02 00 00       	jmp    c001feb8 <Vm::x87Handler(regs*)+0x603>
c001fc67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc6b:	8d 50 40             	lea    edx,[eax+0x40]
c001fc6e:	80 fa 07             	cmp    dl,0x7
c001fc71:	77 37                	ja     c001fcaa <Vm::x87Handler(regs*)+0x3f5>
c001fc73:	83 ec 0c             	sub    esp,0xc
c001fc76:	2d c0 00 00 00       	sub    eax,0xc0
c001fc7b:	50                   	push   eax
c001fc7c:	e8 f7 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fc81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc88:	89 c6                	mov    esi,eax
c001fc8a:	89 d7                	mov    edi,edx
c001fc8c:	e8 e7 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fc91:	57                   	push   edi
c001fc92:	56                   	push   esi
c001fc93:	52                   	push   edx
c001fc94:	50                   	push   eax
c001fc95:	e8 54 fa ff ff       	call   c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc9a:	83 c4 1c             	add    esp,0x1c
c001fc9d:	52                   	push   edx
c001fc9e:	50                   	push   eax
c001fc9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca3:	2d c0 00 00 00       	sub    eax,0xc0
c001fca8:	eb 3d                	jmp    c001fce7 <Vm::x87Handler(regs*)+0x432>
c001fcaa:	8d 50 38             	lea    edx,[eax+0x38]
c001fcad:	80 fa 07             	cmp    dl,0x7
c001fcb0:	77 3b                	ja     c001fced <Vm::x87Handler(regs*)+0x438>
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	2d c8 00 00 00       	sub    eax,0xc8
c001fcba:	50                   	push   eax
c001fcbb:	e8 b8 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fcc0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc7:	89 c6                	mov    esi,eax
c001fcc9:	89 d7                	mov    edi,edx
c001fccb:	e8 a8 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fcd0:	57                   	push   edi
c001fcd1:	56                   	push   esi
c001fcd2:	52                   	push   edx
c001fcd3:	50                   	push   eax
c001fcd4:	e8 4e fa ff ff       	call   c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcd9:	83 c4 1c             	add    esp,0x1c
c001fcdc:	52                   	push   edx
c001fcdd:	50                   	push   eax
c001fcde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce2:	2d c8 00 00 00       	sub    eax,0xc8
c001fce7:	50                   	push   eax
c001fce8:	e9 75 fc ff ff       	jmp    c001f962 <Vm::x87Handler(regs*)+0xad>
c001fced:	83 c0 18             	add    eax,0x18
c001fcf0:	3c 07                	cmp    al,0x7
c001fcf2:	0f 87 3b 04 00 00    	ja     c0020133 <Vm::x87Handler(regs*)+0x87e>
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	6a 00                	push   0x0
c001fcfd:	e8 76 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd02:	89 c6                	mov    esi,eax
c001fd04:	89 d7                	mov    edi,edx
c001fd06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd0a:	2d e8 00 00 00       	sub    eax,0xe8
c001fd0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd12:	e8 61 fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd17:	57                   	push   edi
c001fd18:	56                   	push   esi
c001fd19:	52                   	push   edx
c001fd1a:	50                   	push   eax
c001fd1b:	e8 f8 f9 ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd20:	83 c4 1c             	add    esp,0x1c
c001fd23:	52                   	push   edx
c001fd24:	50                   	push   eax
c001fd25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd29:	2d e8 00 00 00       	sub    eax,0xe8
c001fd2e:	eb b7                	jmp    c001fce7 <Vm::x87Handler(regs*)+0x432>
c001fd30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd34:	8d 50 40             	lea    edx,[eax+0x40]
c001fd37:	80 fa 07             	cmp    dl,0x7
c001fd3a:	77 3a                	ja     c001fd76 <Vm::x87Handler(regs*)+0x4c1>
c001fd3c:	83 ec 0c             	sub    esp,0xc
c001fd3f:	2d c0 00 00 00       	sub    eax,0xc0
c001fd44:	50                   	push   eax
c001fd45:	e8 2e fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd51:	89 c6                	mov    esi,eax
c001fd53:	89 d7                	mov    edi,edx
c001fd55:	e8 1e fa ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd5a:	57                   	push   edi
c001fd5b:	56                   	push   esi
c001fd5c:	52                   	push   edx
c001fd5d:	50                   	push   eax
c001fd5e:	e8 8b f9 ff ff       	call   c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd63:	83 c4 1c             	add    esp,0x1c
c001fd66:	52                   	push   edx
c001fd67:	50                   	push   eax
c001fd68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd6c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd71:	e9 9e 01 00 00       	jmp    c001ff14 <Vm::x87Handler(regs*)+0x65f>
c001fd76:	8d 50 20             	lea    edx,[eax+0x20]
c001fd79:	80 fa 07             	cmp    dl,0x7
c001fd7c:	77 3a                	ja     c001fdb8 <Vm::x87Handler(regs*)+0x503>
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	2d e0 00 00 00       	sub    eax,0xe0
c001fd86:	50                   	push   eax
c001fd87:	e8 ec f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd93:	89 c6                	mov    esi,eax
c001fd95:	89 d7                	mov    edi,edx
c001fd97:	e8 dc f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fd9c:	57                   	push   edi
c001fd9d:	56                   	push   esi
c001fd9e:	52                   	push   edx
c001fd9f:	50                   	push   eax
c001fda0:	e8 73 f9 ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fda5:	83 c4 1c             	add    esp,0x1c
c001fda8:	52                   	push   edx
c001fda9:	50                   	push   eax
c001fdaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdae:	2d e0 00 00 00       	sub    eax,0xe0
c001fdb3:	e9 5c 01 00 00       	jmp    c001ff14 <Vm::x87Handler(regs*)+0x65f>
c001fdb8:	8d 50 18             	lea    edx,[eax+0x18]
c001fdbb:	80 fa 07             	cmp    dl,0x7
c001fdbe:	77 3b                	ja     c001fdfb <Vm::x87Handler(regs*)+0x546>
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	6a 00                	push   0x0
c001fdc5:	e8 ae f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fdca:	89 c6                	mov    esi,eax
c001fdcc:	89 d7                	mov    edi,edx
c001fdce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdd2:	2d e8 00 00 00       	sub    eax,0xe8
c001fdd7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdda:	e8 99 f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fddf:	57                   	push   edi
c001fde0:	56                   	push   esi
c001fde1:	52                   	push   edx
c001fde2:	50                   	push   eax
c001fde3:	e8 30 f9 ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fde8:	83 c4 1c             	add    esp,0x1c
c001fdeb:	52                   	push   edx
c001fdec:	50                   	push   eax
c001fded:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf1:	2d e8 00 00 00       	sub    eax,0xe8
c001fdf6:	e9 19 01 00 00       	jmp    c001ff14 <Vm::x87Handler(regs*)+0x65f>
c001fdfb:	8d 50 38             	lea    edx,[eax+0x38]
c001fdfe:	80 fa 07             	cmp    dl,0x7
c001fe01:	77 37                	ja     c001fe3a <Vm::x87Handler(regs*)+0x585>
c001fe03:	83 ec 0c             	sub    esp,0xc
c001fe06:	2d c8 00 00 00       	sub    eax,0xc8
c001fe0b:	50                   	push   eax
c001fe0c:	e8 67 f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fe11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe18:	89 c6                	mov    esi,eax
c001fe1a:	89 d7                	mov    edi,edx
c001fe1c:	e8 57 f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fe21:	57                   	push   edi
c001fe22:	56                   	push   esi
c001fe23:	52                   	push   edx
c001fe24:	50                   	push   eax
c001fe25:	e8 fd f8 ff ff       	call   c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe2a:	83 c4 1c             	add    esp,0x1c
c001fe2d:	52                   	push   edx
c001fe2e:	50                   	push   eax
c001fe2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe33:	2d c8 00 00 00       	sub    eax,0xc8
c001fe38:	eb 7d                	jmp    c001feb7 <Vm::x87Handler(regs*)+0x602>
c001fe3a:	3c f7                	cmp    al,0xf7
c001fe3c:	76 38                	jbe    c001fe76 <Vm::x87Handler(regs*)+0x5c1>
c001fe3e:	83 ec 0c             	sub    esp,0xc
c001fe41:	6a 00                	push   0x0
c001fe43:	e8 30 f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fe48:	89 c6                	mov    esi,eax
c001fe4a:	89 d7                	mov    edi,edx
c001fe4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe50:	2d f8 00 00 00       	sub    eax,0xf8
c001fe55:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe58:	e8 1b f9 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fe5d:	57                   	push   edi
c001fe5e:	56                   	push   esi
c001fe5f:	52                   	push   edx
c001fe60:	50                   	push   eax
c001fe61:	e8 e0 f8 ff ff       	call   c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe66:	83 c4 1c             	add    esp,0x1c
c001fe69:	52                   	push   edx
c001fe6a:	50                   	push   eax
c001fe6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6f:	2d f8 00 00 00       	sub    eax,0xf8
c001fe74:	eb 41                	jmp    c001feb7 <Vm::x87Handler(regs*)+0x602>
c001fe76:	8d 50 10             	lea    edx,[eax+0x10]
c001fe79:	80 fa 07             	cmp    dl,0x7
c001fe7c:	0f 87 5a 01 00 00    	ja     c001ffdc <Vm::x87Handler(regs*)+0x727>
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	2d f0 00 00 00       	sub    eax,0xf0
c001fe8a:	50                   	push   eax
c001fe8b:	e8 e8 f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fe90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe97:	89 c6                	mov    esi,eax
c001fe99:	89 d7                	mov    edi,edx
c001fe9b:	e8 d8 f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fea0:	57                   	push   edi
c001fea1:	56                   	push   esi
c001fea2:	52                   	push   edx
c001fea3:	50                   	push   eax
c001fea4:	e8 9d f8 ff ff       	call   c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fea9:	83 c4 1c             	add    esp,0x1c
c001feac:	52                   	push   edx
c001fead:	50                   	push   eax
c001feae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb2:	2d f0 00 00 00       	sub    eax,0xf0
c001feb7:	50                   	push   eax
c001feb8:	e8 fe f8 ff ff       	call   c001f7bb <Vm::fpuSetReg(int, unsigned long long)>
c001febd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fec1:	e8 9d f9 ff ff       	call   c001f863 <Vm::fpuPop()>
c001fec6:	e9 5e fa ff ff       	jmp    c001f929 <Vm::x87Handler(regs*)+0x74>
c001fecb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fecf:	8d 50 30             	lea    edx,[eax+0x30]
c001fed2:	80 fa 07             	cmp    dl,0x7
c001fed5:	77 1d                	ja     c001fef4 <Vm::x87Handler(regs*)+0x63f>
c001fed7:	83 ec 0c             	sub    esp,0xc
c001feda:	6a 00                	push   0x0
c001fedc:	e8 97 f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001fee1:	83 c4 0c             	add    esp,0xc
c001fee4:	52                   	push   edx
c001fee5:	50                   	push   eax
c001fee6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feea:	2d d0 00 00 00       	sub    eax,0xd0
c001feef:	e9 f3 fd ff ff       	jmp    c001fce7 <Vm::x87Handler(regs*)+0x432>
c001fef4:	8d 50 28             	lea    edx,[eax+0x28]
c001fef7:	80 fa 07             	cmp    dl,0x7
c001fefa:	77 28                	ja     c001ff24 <Vm::x87Handler(regs*)+0x66f>
c001fefc:	83 ec 0c             	sub    esp,0xc
c001feff:	6a 00                	push   0x0
c001ff01:	e8 72 f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ff06:	83 c4 0c             	add    esp,0xc
c001ff09:	52                   	push   edx
c001ff0a:	50                   	push   eax
c001ff0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0f:	2d d8 00 00 00       	sub    eax,0xd8
c001ff14:	50                   	push   eax
c001ff15:	e8 a1 f8 ff ff       	call   c001f7bb <Vm::fpuSetReg(int, unsigned long long)>
c001ff1a:	e8 44 f9 ff ff       	call   c001f863 <Vm::fpuPop()>
c001ff1f:	e9 01 fa ff ff       	jmp    c001f925 <Vm::x87Handler(regs*)+0x70>
c001ff24:	8d 50 20             	lea    edx,[eax+0x20]
c001ff27:	80 fa 07             	cmp    dl,0x7
c001ff2a:	77 30                	ja     c001ff5c <Vm::x87Handler(regs*)+0x6a7>
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	2d e0 00 00 00       	sub    eax,0xe0
c001ff34:	50                   	push   eax
c001ff35:	e8 3e f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ff3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff41:	89 c6                	mov    esi,eax
c001ff43:	89 d7                	mov    edi,edx
c001ff45:	e8 2e f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ff4a:	57                   	push   edi
c001ff4b:	56                   	push   esi
c001ff4c:	52                   	push   edx
c001ff4d:	50                   	push   eax
c001ff4e:	e8 48 f7 ff ff       	call   c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff53:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff57:	e9 54 02 00 00       	jmp    c00201b0 <Vm::x87Handler(regs*)+0x8fb>
c001ff5c:	8d 50 18             	lea    edx,[eax+0x18]
c001ff5f:	80 fa 07             	cmp    dl,0x7
c001ff62:	0f 87 43 fb ff ff    	ja     c001faab <Vm::x87Handler(regs*)+0x1f6>
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	2d e8 00 00 00       	sub    eax,0xe8
c001ff70:	50                   	push   eax
c001ff71:	e8 02 f8 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ff76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff7d:	89 c6                	mov    esi,eax
c001ff7f:	89 d7                	mov    edi,edx
c001ff81:	e8 f2 f7 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ff86:	57                   	push   edi
c001ff87:	56                   	push   esi
c001ff88:	52                   	push   edx
c001ff89:	50                   	push   eax
c001ff8a:	e8 0c f7 ff ff       	call   c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff8f:	83 c4 20             	add    esp,0x20
c001ff92:	e8 cc f8 ff ff       	call   c001f863 <Vm::fpuPop()>
c001ff97:	eb 62                	jmp    c001fffb <Vm::x87Handler(regs*)+0x746>
c001ff99:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ff9d:	0f 85 0f 01 00 00    	jne    c00200b2 <Vm::x87Handler(regs*)+0x7fd>
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	6a 01                	push   0x1
c001ffa8:	e8 cb f7 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ffad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffb4:	89 c6                	mov    esi,eax
c001ffb6:	89 d7                	mov    edi,edx
c001ffb8:	e8 bb f7 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c001ffbd:	57                   	push   edi
c001ffbe:	56                   	push   esi
c001ffbf:	52                   	push   edx
c001ffc0:	50                   	push   eax
c001ffc1:	e8 d5 f6 ff ff       	call   c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffc6:	83 c4 20             	add    esp,0x20
c001ffc9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffcd:	e8 91 f8 ff ff       	call   c001f863 <Vm::fpuPop()>
c001ffd2:	e8 8c f8 ff ff       	call   c001f863 <Vm::fpuPop()>
c001ffd7:	e9 50 f9 ff ff       	jmp    c001f92c <Vm::x87Handler(regs*)+0x77>
c001ffdc:	3c d9                	cmp    al,0xd9
c001ffde:	0f 85 b5 02 00 00    	jne    c0020299 <Vm::x87Handler(regs*)+0x9e4>
c001ffe4:	eb bd                	jmp    c001ffa3 <Vm::x87Handler(regs*)+0x6ee>
c001ffe6:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001ffea:	0f 85 ea 02 00 00    	jne    c00202da <Vm::x87Handler(regs*)+0xa25>
c001fff0:	0f b7 05 60 fb 02 c0 	movzx  eax,WORD PTR ds:0xc002fb60
c001fff7:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fffb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffff:	e9 28 f9 ff ff       	jmp    c001f92c <Vm::x87Handler(regs*)+0x77>
c0020004:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020008:	84 d2                	test   dl,dl
c002000a:	75 0f                	jne    c002001b <Vm::x87Handler(regs*)+0x766>
c002000c:	83 ec 0c             	sub    esp,0xc
c002000f:	ff 36                	push   DWORD PTR [esi]
c0020011:	e8 b1 f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c0020016:	e9 2c 01 00 00       	jmp    c0020147 <Vm::x87Handler(regs*)+0x892>
c002001b:	80 fa 01             	cmp    dl,0x1
c002001e:	75 0f                	jne    c002002f <Vm::x87Handler(regs*)+0x77a>
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	ff 36                	push   DWORD PTR [esi]
c0020025:	e8 9d f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c002002a:	e9 81 02 00 00       	jmp    c00202b0 <Vm::x87Handler(regs*)+0x9fb>
c002002f:	80 fa 04             	cmp    dl,0x4
c0020032:	75 0f                	jne    c0020043 <Vm::x87Handler(regs*)+0x78e>
c0020034:	83 ec 0c             	sub    esp,0xc
c0020037:	ff 36                	push   DWORD PTR [esi]
c0020039:	e8 89 f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c002003e:	e9 86 01 00 00       	jmp    c00201c9 <Vm::x87Handler(regs*)+0x914>
c0020043:	80 fa 05             	cmp    dl,0x5
c0020046:	75 1b                	jne    c0020063 <Vm::x87Handler(regs*)+0x7ae>
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	6a 00                	push   0x0
c002004d:	e8 26 f7 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c0020052:	89 c7                	mov    edi,eax
c0020054:	89 d5                	mov    ebp,edx
c0020056:	58                   	pop    eax
c0020057:	ff 36                	push   DWORD PTR [esi]
c0020059:	e8 69 f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c002005e:	e9 a3 01 00 00       	jmp    c0020206 <Vm::x87Handler(regs*)+0x951>
c0020063:	80 fa 06             	cmp    dl,0x6
c0020066:	75 0f                	jne    c0020077 <Vm::x87Handler(regs*)+0x7c2>
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	ff 36                	push   DWORD PTR [esi]
c002006d:	e8 55 f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c0020072:	e9 ae 01 00 00       	jmp    c0020225 <Vm::x87Handler(regs*)+0x970>
c0020077:	31 c0                	xor    eax,eax
c0020079:	80 fa 07             	cmp    dl,0x7
c002007c:	0f 85 94 02 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c0020082:	83 ec 0c             	sub    esp,0xc
c0020085:	6a 00                	push   0x0
c0020087:	e8 ec f6 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c002008c:	89 c7                	mov    edi,eax
c002008e:	89 d5                	mov    ebp,edx
c0020090:	58                   	pop    eax
c0020091:	ff 36                	push   DWORD PTR [esi]
c0020093:	e8 2f f4 ff ff       	call   c001f4c7 <Vm::fpu32ToInternal(unsigned int)>
c0020098:	e9 cb 01 00 00       	jmp    c0020268 <Vm::x87Handler(regs*)+0x9b3>
c002009d:	80 fa 03             	cmp    dl,0x3
c00200a0:	0f 85 d3 01 00 00    	jne    c0020279 <Vm::x87Handler(regs*)+0x9c4>
c00200a6:	e8 b8 f7 ff ff       	call   c001f863 <Vm::fpuPop()>
c00200ab:	51                   	push   ecx
c00200ac:	51                   	push   ecx
c00200ad:	e9 de 01 00 00       	jmp    c0020290 <Vm::x87Handler(regs*)+0x9db>
c00200b2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200b6:	80 fa 01             	cmp    dl,0x1
c00200b9:	75 09                	jne    c00200c4 <Vm::x87Handler(regs*)+0x80f>
c00200bb:	57                   	push   edi
c00200bc:	57                   	push   edi
c00200bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00200bf:	e9 e3 01 00 00       	jmp    c00202a7 <Vm::x87Handler(regs*)+0x9f2>
c00200c4:	80 fa 04             	cmp    dl,0x4
c00200c7:	75 12                	jne    c00200db <Vm::x87Handler(regs*)+0x826>
c00200c9:	31 d2                	xor    edx,edx
c00200cb:	51                   	push   ecx
c00200cc:	51                   	push   ecx
c00200cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00200cf:	52                   	push   edx
c00200d0:	50                   	push   eax
c00200d1:	e8 d0 f4 ff ff       	call   c001f5a6 <Vm::fpuLongToFloat(long long)>
c00200d6:	e9 ee 00 00 00       	jmp    c00201c9 <Vm::x87Handler(regs*)+0x914>
c00200db:	31 c0                	xor    eax,eax
c00200dd:	80 fa 07             	cmp    dl,0x7
c00200e0:	0f 85 30 02 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c00200e6:	83 ec 0c             	sub    esp,0xc
c00200e9:	6a 00                	push   0x0
c00200eb:	e8 88 f6 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c00200f0:	89 c7                	mov    edi,eax
c00200f2:	89 d5                	mov    ebp,edx
c00200f4:	58                   	pop    eax
c00200f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00200f7:	5a                   	pop    edx
c00200f8:	31 d2                	xor    edx,edx
c00200fa:	52                   	push   edx
c00200fb:	50                   	push   eax
c00200fc:	e8 a5 f4 ff ff       	call   c001f5a6 <Vm::fpuLongToFloat(long long)>
c0020101:	e9 62 01 00 00       	jmp    c0020268 <Vm::x87Handler(regs*)+0x9b3>
c0020106:	84 d2                	test   dl,dl
c0020108:	75 0d                	jne    c0020117 <Vm::x87Handler(regs*)+0x862>
c002010a:	31 d2                	xor    edx,edx
c002010c:	55                   	push   ebp
c002010d:	55                   	push   ebp
c002010e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020110:	52                   	push   edx
c0020111:	50                   	push   eax
c0020112:	e9 d3 01 00 00       	jmp    c00202ea <Vm::x87Handler(regs*)+0xa35>
c0020117:	31 c0                	xor    eax,eax
c0020119:	80 fa 02             	cmp    dl,0x2
c002011c:	0f 85 f4 01 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	6a 00                	push   0x0
c0020127:	e8 4c f6 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c002012c:	59                   	pop    ecx
c002012d:	5f                   	pop    edi
c002012e:	e9 6a f9 ff ff       	jmp    c001fa9d <Vm::x87Handler(regs*)+0x1e8>
c0020133:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020137:	84 d2                	test   dl,dl
c0020139:	75 2a                	jne    c0020165 <Vm::x87Handler(regs*)+0x8b0>
c002013b:	50                   	push   eax
c002013c:	50                   	push   eax
c002013d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020140:	ff 36                	push   DWORD PTR [esi]
c0020142:	e8 c5 f3 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020147:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002014e:	89 c6                	mov    esi,eax
c0020150:	89 d7                	mov    edi,edx
c0020152:	e8 21 f6 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c0020157:	57                   	push   edi
c0020158:	56                   	push   esi
c0020159:	52                   	push   edx
c002015a:	50                   	push   eax
c002015b:	e8 8e f5 ff ff       	call   c001f6ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020160:	e9 64 01 00 00       	jmp    c00202c9 <Vm::x87Handler(regs*)+0xa14>
c0020165:	80 fa 01             	cmp    dl,0x1
c0020168:	75 11                	jne    c002017b <Vm::x87Handler(regs*)+0x8c6>
c002016a:	50                   	push   eax
c002016b:	50                   	push   eax
c002016c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002016f:	ff 36                	push   DWORD PTR [esi]
c0020171:	e8 96 f3 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020176:	e9 35 01 00 00       	jmp    c00202b0 <Vm::x87Handler(regs*)+0x9fb>
c002017b:	80 fa 02             	cmp    dl,0x2
c002017e:	0f 85 54 f9 ff ff    	jne    c001fad8 <Vm::x87Handler(regs*)+0x223>
c0020184:	55                   	push   ebp
c0020185:	55                   	push   ebp
c0020186:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020189:	ff 36                	push   DWORD PTR [esi]
c002018b:	e8 7c f3 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020190:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020197:	89 c6                	mov    esi,eax
c0020199:	89 d7                	mov    edi,edx
c002019b:	e8 d8 f5 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c00201a0:	57                   	push   edi
c00201a1:	56                   	push   esi
c00201a2:	52                   	push   edx
c00201a3:	50                   	push   eax
c00201a4:	e8 f2 f4 ff ff       	call   c001f69b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201ad:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00201b0:	83 c4 20             	add    esp,0x20
c00201b3:	e9 74 f7 ff ff       	jmp    c001f92c <Vm::x87Handler(regs*)+0x77>
c00201b8:	80 fa 04             	cmp    dl,0x4
c00201bb:	75 2a                	jne    c00201e7 <Vm::x87Handler(regs*)+0x932>
c00201bd:	51                   	push   ecx
c00201be:	51                   	push   ecx
c00201bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201c2:	ff 36                	push   DWORD PTR [esi]
c00201c4:	e8 43 f3 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c00201c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201d0:	89 c6                	mov    esi,eax
c00201d2:	89 d7                	mov    edi,edx
c00201d4:	e8 9f f5 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c00201d9:	57                   	push   edi
c00201da:	56                   	push   esi
c00201db:	52                   	push   edx
c00201dc:	50                   	push   eax
c00201dd:	e8 36 f5 ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00201e2:	e9 e2 00 00 00       	jmp    c00202c9 <Vm::x87Handler(regs*)+0xa14>
c00201e7:	80 fa 05             	cmp    dl,0x5
c00201ea:	75 28                	jne    c0020214 <Vm::x87Handler(regs*)+0x95f>
c00201ec:	83 ec 0c             	sub    esp,0xc
c00201ef:	6a 00                	push   0x0
c00201f1:	e8 82 f5 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c00201f6:	89 c7                	mov    edi,eax
c00201f8:	89 d5                	mov    ebp,edx
c00201fa:	58                   	pop    eax
c00201fb:	5a                   	pop    edx
c00201fc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201ff:	ff 36                	push   DWORD PTR [esi]
c0020201:	e8 06 f3 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020206:	83 c4 10             	add    esp,0x10
c0020209:	55                   	push   ebp
c002020a:	57                   	push   edi
c002020b:	52                   	push   edx
c002020c:	50                   	push   eax
c002020d:	e8 06 f5 ff ff       	call   c001f718 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020212:	eb 60                	jmp    c0020274 <Vm::x87Handler(regs*)+0x9bf>
c0020214:	80 fa 06             	cmp    dl,0x6
c0020217:	75 2a                	jne    c0020243 <Vm::x87Handler(regs*)+0x98e>
c0020219:	51                   	push   ecx
c002021a:	51                   	push   ecx
c002021b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002021e:	ff 36                	push   DWORD PTR [esi]
c0020220:	e8 e7 f2 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020225:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002022c:	89 c6                	mov    esi,eax
c002022e:	89 d7                	mov    edi,edx
c0020230:	e8 43 f5 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c0020235:	57                   	push   edi
c0020236:	56                   	push   esi
c0020237:	52                   	push   edx
c0020238:	50                   	push   eax
c0020239:	e8 08 f5 ff ff       	call   c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002023e:	e9 86 00 00 00       	jmp    c00202c9 <Vm::x87Handler(regs*)+0xa14>
c0020243:	31 c0                	xor    eax,eax
c0020245:	80 fa 07             	cmp    dl,0x7
c0020248:	0f 85 c8 00 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c002024e:	83 ec 0c             	sub    esp,0xc
c0020251:	6a 00                	push   0x0
c0020253:	e8 20 f5 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c0020258:	89 c7                	mov    edi,eax
c002025a:	89 d5                	mov    ebp,edx
c002025c:	58                   	pop    eax
c002025d:	5a                   	pop    edx
c002025e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020261:	ff 36                	push   DWORD PTR [esi]
c0020263:	e8 a4 f2 ff ff       	call   c001f50c <Vm::fpu64ToInternal(unsigned long long)>
c0020268:	83 c4 10             	add    esp,0x10
c002026b:	55                   	push   ebp
c002026c:	57                   	push   edi
c002026d:	52                   	push   edx
c002026e:	50                   	push   eax
c002026f:	e8 d2 f4 ff ff       	call   c001f746 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020274:	83 c4 0c             	add    esp,0xc
c0020277:	eb 53                	jmp    c00202cc <Vm::x87Handler(regs*)+0xa17>
c0020279:	31 c0                	xor    eax,eax
c002027b:	80 fa 02             	cmp    dl,0x2
c002027e:	0f 85 92 00 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c0020284:	83 ec 0c             	sub    esp,0xc
c0020287:	6a 00                	push   0x0
c0020289:	e8 ea f4 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c002028e:	59                   	pop    ecx
c002028f:	5f                   	pop    edi
c0020290:	52                   	push   edx
c0020291:	50                   	push   eax
c0020292:	e8 27 f2 ff ff       	call   c001f4be <Vm::fpuInternalTo64(unsigned long long)>
c0020297:	eb 70                	jmp    c0020309 <Vm::x87Handler(regs*)+0xa54>
c0020299:	31 c0                	xor    eax,eax
c002029b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202a0:	75 74                	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c00202a2:	50                   	push   eax
c00202a3:	50                   	push   eax
c00202a4:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202a7:	31 d2                	xor    edx,edx
c00202a9:	52                   	push   edx
c00202aa:	50                   	push   eax
c00202ab:	e8 f6 f2 ff ff       	call   c001f5a6 <Vm::fpuLongToFloat(long long)>
c00202b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202b7:	89 c6                	mov    esi,eax
c00202b9:	89 d7                	mov    edi,edx
c00202bb:	e8 b8 f4 ff ff       	call   c001f778 <Vm::fpuGetReg(int)>
c00202c0:	57                   	push   edi
c00202c1:	56                   	push   esi
c00202c2:	52                   	push   edx
c00202c3:	50                   	push   eax
c00202c4:	e8 5e f4 ff ff       	call   c001f727 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00202c9:	83 c4 1c             	add    esp,0x1c
c00202cc:	52                   	push   edx
c00202cd:	50                   	push   eax
c00202ce:	6a 00                	push   0x0
c00202d0:	e8 e6 f4 ff ff       	call   c001f7bb <Vm::fpuSetReg(int, unsigned long long)>
c00202d5:	e9 f2 f7 ff ff       	jmp    c001facc <Vm::x87Handler(regs*)+0x217>
c00202da:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202de:	80 fa 05             	cmp    dl,0x5
c00202e1:	75 11                	jne    c00202f4 <Vm::x87Handler(regs*)+0xa3f>
c00202e3:	55                   	push   ebp
c00202e4:	55                   	push   ebp
c00202e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e8:	ff 36                	push   DWORD PTR [esi]
c00202ea:	e8 81 f2 ff ff       	call   c001f570 <Vm::fpuULongToFloat(unsigned long long)>
c00202ef:	e9 cf f7 ff ff       	jmp    c001fac3 <Vm::x87Handler(regs*)+0x20e>
c00202f4:	31 c0                	xor    eax,eax
c00202f6:	80 fa 07             	cmp    dl,0x7
c00202f9:	75 1b                	jne    c0020316 <Vm::x87Handler(regs*)+0xa61>
c00202fb:	e8 63 f5 ff ff       	call   c001f863 <Vm::fpuPop()>
c0020300:	51                   	push   ecx
c0020301:	51                   	push   ecx
c0020302:	52                   	push   edx
c0020303:	50                   	push   eax
c0020304:	e8 0c f2 ff ff       	call   c001f515 <Vm::fpuFloatToLong(unsigned long long)>
c0020309:	83 c4 10             	add    esp,0x10
c002030c:	89 06                	mov    DWORD PTR [esi],eax
c002030e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020311:	e9 f8 f7 ff ff       	jmp    c001fb0e <Vm::x87Handler(regs*)+0x259>
c0020316:	83 c4 1c             	add    esp,0x1c
c0020319:	5b                   	pop    ebx
c002031a:	5e                   	pop    esi
c002031b:	5f                   	pop    edi
c002031c:	5d                   	pop    ebp
c002031d:	c3                   	ret    

c002031e <__static_initialization_and_destruction_0(int, int)>:
c002031e:	83 ec 0c             	sub    esp,0xc
c0020321:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020326:	75 1a                	jne    c0020342 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020328:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020330:	75 10                	jne    c0020342 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	68 60 fb 02 c0       	push   0xc002fb60
c002033a:	e8 4b 8e 00 00       	call   c002918a <Vm::_FPUState::_FPUState()>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	90                   	nop
c0020343:	83 c4 0c             	add    esp,0xc
c0020346:	c3                   	ret    

c0020347 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020347:	83 ec 0c             	sub    esp,0xc
c002034a:	83 ec 08             	sub    esp,0x8
c002034d:	68 ff ff 00 00       	push   0xffff
c0020352:	6a 01                	push   0x1
c0020354:	e8 c5 ff ff ff       	call   c002031e <__static_initialization_and_destruction_0(int, int)>
c0020359:	83 c4 10             	add    esp,0x10
c002035c:	83 c4 0c             	add    esp,0xc
c002035f:	c3                   	ret    

c0020360 <FAT::getName()>:
c0020360:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0020365:	c3                   	ret    

c0020366 <FAT::tell(void*, unsigned long long*)>:
c0020366:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002036b:	75 06                	jne    c0020373 <FAT::tell(void*, unsigned long long*)+0xd>
c002036d:	b8 04 00 00 00       	mov    eax,0x4
c0020372:	c3                   	ret    
c0020373:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020378:	75 06                	jne    c0020380 <FAT::tell(void*, unsigned long long*)+0x1a>
c002037a:	b8 04 00 00 00       	mov    eax,0x4
c002037f:	c3                   	ret    
c0020380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020384:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020387:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002038a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002038e:	89 01                	mov    DWORD PTR [ecx],eax
c0020390:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020393:	b8 00 00 00 00       	mov    eax,0x0
c0020398:	c3                   	ret    
c0020399:	90                   	nop

c002039a <FAT::stat(void*, unsigned long long*)>:
c002039a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002039f:	75 06                	jne    c00203a7 <FAT::stat(void*, unsigned long long*)+0xd>
c00203a1:	b8 04 00 00 00       	mov    eax,0x4
c00203a6:	c3                   	ret    
c00203a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203ac:	75 06                	jne    c00203b4 <FAT::stat(void*, unsigned long long*)+0x1a>
c00203ae:	b8 04 00 00 00       	mov    eax,0x4
c00203b3:	c3                   	ret    
c00203b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00203bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00203be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203c2:	89 01                	mov    DWORD PTR [ecx],eax
c00203c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203c7:	b8 00 00 00 00       	mov    eax,0x0
c00203cc:	c3                   	ret    
c00203cd:	90                   	nop

c00203ce <FAT::~FAT()>:
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	89 10                	mov    DWORD PTR [eax],edx
c00203dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e0:	83 ec 0c             	sub    esp,0xc
c00203e3:	50                   	push   eax
c00203e4:	e8 fb 28 ff ff       	call   c0012ce4 <Filesystem::~Filesystem()>
c00203e9:	83 c4 10             	add    esp,0x10
c00203ec:	90                   	nop
c00203ed:	83 c4 0c             	add    esp,0xc
c00203f0:	c3                   	ret    
c00203f1:	90                   	nop

c00203f2 <FAT::~FAT()>:
c00203f2:	83 ec 0c             	sub    esp,0xc
c00203f5:	83 ec 0c             	sub    esp,0xc
c00203f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fc:	e8 cd ff ff ff       	call   c00203ce <FAT::~FAT()>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	83 ec 08             	sub    esp,0x8
c0020407:	6a 08                	push   0x8
c0020409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002040d:	e8 cb 24 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0020412:	83 c4 10             	add    esp,0x10
c0020415:	83 c4 0c             	add    esp,0xc
c0020418:	c3                   	ret    
c0020419:	90                   	nop

c002041a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002041a:	83 ec 1c             	sub    esp,0x1c
c002041d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020424:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002042d:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c0020434:	83 f8 ff             	cmp    eax,0xffffffff
c0020437:	75 34                	jne    c002046d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020439:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002043d:	88 c2                	mov    dl,al
c002043f:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c0020444:	01 d0                	add    eax,edx
c0020446:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002044a:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c0020450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020454:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c002045b:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c0020460:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020464:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c002046b:	eb 17                	jmp    c0020484 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002046d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020471:	88 c2                	mov    dl,al
c0020473:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020477:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c002047e:	01 d0                	add    eax,edx
c0020480:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020484:	83 ec 04             	sub    esp,0x4
c0020487:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002048b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002048f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020493:	50                   	push   eax
c0020494:	e8 65 68 fe ff       	call   c0006cfe <f_getlabel>
c0020499:	83 c4 10             	add    esp,0x10
c002049c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204a5:	75 07                	jne    c00204ae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204a7:	b8 00 00 00 00       	mov    eax,0x0
c00204ac:	eb 05                	jmp    c00204b3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00204ae:	b8 01 00 00 00       	mov    eax,0x1
c00204b3:	83 c4 1c             	add    esp,0x1c
c00204b6:	c3                   	ret    
c00204b7:	90                   	nop

c00204b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00204b8:	57                   	push   edi
c00204b9:	83 ec 58             	sub    esp,0x58
c00204bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00204c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00204c8:	b9 0f 00 00 00       	mov    ecx,0xf
c00204cd:	b8 00 00 00 00       	mov    eax,0x0
c00204d2:	fc                   	cld    
c00204d3:	89 d7                	mov    edi,edx
c00204d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00204db:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c00204e2:	83 f8 ff             	cmp    eax,0xffffffff
c00204e5:	75 34                	jne    c002051b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00204e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00204eb:	88 c2                	mov    dl,al
c00204ed:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c00204f2:	01 d0                	add    eax,edx
c00204f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204f8:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c00204fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020502:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c0020509:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c002050e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020512:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c0020519:	eb 17                	jmp    c0020532 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002051b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002051f:	88 c2                	mov    dl,al
c0020521:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020525:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c002052c:	01 d0                	add    eax,edx
c002052e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020532:	83 ec 08             	sub    esp,0x8
c0020535:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020539:	8d 44 24 18          	lea    eax,[esp+0x18]
c002053d:	50                   	push   eax
c002053e:	e8 09 04 fe ff       	call   c000094c <strcat>
c0020543:	83 c4 10             	add    esp,0x10
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	8d 44 24 18          	lea    eax,[esp+0x18]
c002054d:	50                   	push   eax
c002054e:	e8 99 69 fe ff       	call   c0006eec <f_setlabel>
c0020553:	83 c4 10             	add    esp,0x10
c0020556:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002055a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002055f:	75 07                	jne    c0020568 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020561:	b8 00 00 00 00       	mov    eax,0x0
c0020566:	eb 05                	jmp    c002056d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020568:	b8 01 00 00 00       	mov    eax,0x1
c002056d:	83 c4 58             	add    esp,0x58
c0020570:	5f                   	pop    edi
c0020571:	c3                   	ret    

c0020572 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020572:	83 ec 2c             	sub    esp,0x2c
c0020575:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002057d:	83 ec 08             	sub    esp,0x8
c0020580:	68 54 ca 02 c0       	push   0xc002ca54
c0020585:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020589:	e8 0a 03 fe ff       	call   c0000898 <strcmp>
c002058e:	83 c4 10             	add    esp,0x10
c0020591:	85 c0                	test   eax,eax
c0020593:	0f 94 c0             	sete   al
c0020596:	84 c0                	test   al,al
c0020598:	74 0d                	je     c00205a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002059a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205a2:	e9 a6 00 00 00       	jmp    c002064d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205a7:	83 ec 08             	sub    esp,0x8
c00205aa:	68 46 ca 02 c0       	push   0xc002ca46
c00205af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205b3:	e8 e0 02 fe ff       	call   c0000898 <strcmp>
c00205b8:	83 c4 10             	add    esp,0x10
c00205bb:	85 c0                	test   eax,eax
c00205bd:	0f 94 c0             	sete   al
c00205c0:	84 c0                	test   al,al
c00205c2:	74 0a                	je     c00205ce <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00205c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205cc:	eb 7f                	jmp    c002064d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205ce:	83 ec 08             	sub    esp,0x8
c00205d1:	68 4c ca 02 c0       	push   0xc002ca4c
c00205d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205da:	e8 b9 02 fe ff       	call   c0000898 <strcmp>
c00205df:	83 c4 10             	add    esp,0x10
c00205e2:	85 c0                	test   eax,eax
c00205e4:	0f 94 c0             	sete   al
c00205e7:	84 c0                	test   al,al
c00205e9:	74 0a                	je     c00205f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00205eb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205f3:	eb 58                	jmp    c002064d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205f5:	83 ec 08             	sub    esp,0x8
c00205f8:	68 ec 98 02 c0       	push   0xc00298ec
c00205fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020601:	e8 92 02 fe ff       	call   c0000898 <strcmp>
c0020606:	83 c4 10             	add    esp,0x10
c0020609:	85 c0                	test   eax,eax
c002060b:	0f 94 c0             	sete   al
c002060e:	84 c0                	test   al,al
c0020610:	74 0a                	je     c002061c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020612:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002061a:	eb 31                	jmp    c002064d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002061c:	83 ec 08             	sub    esp,0x8
c002061f:	68 52 ca 02 c0       	push   0xc002ca52
c0020624:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020628:	e8 6b 02 fe ff       	call   c0000898 <strcmp>
c002062d:	83 c4 10             	add    esp,0x10
c0020630:	85 c0                	test   eax,eax
c0020632:	0f 94 c0             	sete   al
c0020635:	84 c0                	test   al,al
c0020637:	74 0a                	je     c0020643 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020639:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020641:	eb 0a                	jmp    c002064d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020643:	b8 08 00 00 00       	mov    eax,0x8
c0020648:	e9 df 00 00 00       	jmp    c002072c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002064d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020654:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020659:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002065d:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c0020664:	83 f8 ff             	cmp    eax,0xffffffff
c0020667:	75 34                	jne    c002069d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020669:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002066d:	88 c2                	mov    dl,al
c002066f:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c0020674:	01 d0                	add    eax,edx
c0020676:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002067a:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c0020680:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020684:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c002068b:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c0020690:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020694:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c002069b:	eb 17                	jmp    c00206b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002069d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206a1:	88 c2                	mov    dl,al
c00206a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206a7:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c00206ae:	01 d0                	add    eax,edx
c00206b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206b8:	88 04 24             	mov    BYTE PTR [esp],al
c00206bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00206bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00206cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00206d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	68 00 20 00 00       	push   0x2000
c00206e0:	e8 78 f2 fe ff       	call   c000f95d <malloc>
c00206e5:	83 c4 10             	add    esp,0x10
c00206e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206ec:	68 00 20 00 00       	push   0x2000
c00206f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206f9:	50                   	push   eax
c00206fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00206fe:	50                   	push   eax
c00206ff:	e8 69 6e fe ff       	call   c000756d <f_mkfs>
c0020704:	83 c4 10             	add    esp,0x10
c0020707:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002070b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020710:	75 07                	jne    c0020719 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020712:	b8 00 00 00 00       	mov    eax,0x0
c0020717:	eb 13                	jmp    c002072c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020719:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002071e:	75 07                	jne    c0020727 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020720:	b8 09 00 00 00       	mov    eax,0x9
c0020725:	eb 05                	jmp    c002072c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020727:	b8 01 00 00 00       	mov    eax,0x1
c002072c:	83 c4 2c             	add    esp,0x2c
c002072f:	c3                   	ret    

c0020730 <FAT::tryMount(LogicalDisk*, int)>:
c0020730:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020736:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c002073b:	83 f8 14             	cmp    eax,0x14
c002073e:	75 17                	jne    c0020757 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020740:	83 ec 0c             	sub    esp,0xc
c0020743:	68 58 ca 02 c0       	push   0xc002ca58
c0020748:	e8 06 9c ff ff       	call   c001a353 <Krnl::panic(char const*)>
c002074d:	83 c4 10             	add    esp,0x10
c0020750:	b0 00                	mov    al,0x0
c0020752:	e9 d7 01 00 00       	jmp    c002092e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020757:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002075e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020764:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002076a:	3d 00 02 00 00       	cmp    eax,0x200
c002076f:	74 07                	je     c0020778 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020771:	b0 00                	mov    al,0x0
c0020773:	e9 b6 01 00 00       	jmp    c002092e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020778:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020780:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020787:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c002078e:	83 f8 ff             	cmp    eax,0xffffffff
c0020791:	74 07                	je     c002079a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020793:	b0 01                	mov    al,0x1
c0020795:	e9 94 01 00 00       	jmp    c002092e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002079a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00207a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00207ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00207b3:	88 c2                	mov    dl,al
c00207b5:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c00207ba:	01 d0                	add    eax,edx
c00207bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00207c3:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c00207c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207d0:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c00207d7:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c00207dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00207e3:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c00207ea:	83 ec 0c             	sub    esp,0xc
c00207ed:	68 54 02 00 00       	push   0x254
c00207f2:	e8 66 f1 fe ff       	call   c000f95d <malloc>
c00207f7:	83 c4 10             	add    esp,0x10
c00207fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020801:	83 ec 04             	sub    esp,0x4
c0020804:	6a 00                	push   0x0
c0020806:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002080d:	50                   	push   eax
c002080e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020815:	e8 db 46 fe ff       	call   c0004ef5 <f_mount>
c002081a:	83 c4 10             	add    esp,0x10
c002081d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020824:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002082c:	74 19                	je     c0020847 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002082e:	83 ec 0c             	sub    esp,0xc
c0020831:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020838:	e8 40 f1 fe ff       	call   c000f97d <rfree>
c002083d:	83 c4 10             	add    esp,0x10
c0020840:	b0 00                	mov    al,0x0
c0020842:	e9 e7 00 00 00       	jmp    c002092e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020847:	83 ec 04             	sub    esp,0x4
c002084a:	68 00 01 00 00       	push   0x100
c002084f:	6a 00                	push   0x0
c0020851:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020858:	50                   	push   eax
c0020859:	e8 f2 fe fd ff       	call   c0000750 <memset>
c002085e:	83 c4 10             	add    esp,0x10
c0020861:	83 ec 08             	sub    esp,0x8
c0020864:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002086b:	50                   	push   eax
c002086c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020873:	50                   	push   eax
c0020874:	e8 d3 00 fe ff       	call   c000094c <strcat>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	83 ec 08             	sub    esp,0x8
c002087f:	68 66 ca 02 c0       	push   0xc002ca66
c0020884:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002088b:	50                   	push   eax
c002088c:	e8 bb 00 fe ff       	call   c000094c <strcat>
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	83 ec 04             	sub    esp,0x4
c0020897:	6a 01                	push   0x1
c0020899:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00208a0:	50                   	push   eax
c00208a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208a5:	50                   	push   eax
c00208a6:	e8 ac 46 fe ff       	call   c0004f57 <f_open>
c00208ab:	83 c4 10             	add    esp,0x10
c00208ae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208b5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00208bc:	85 c0                	test   eax,eax
c00208be:	74 0a                	je     c00208ca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00208c0:	78 2d                	js     c00208ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00208c2:	83 e8 04             	sub    eax,0x4
c00208c5:	83 f8 01             	cmp    eax,0x1
c00208c8:	77 25                	ja     c00208ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00208ca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208d9:	50                   	push   eax
c00208da:	e8 ca 51 fe ff       	call   c0005aa9 <f_close>
c00208df:	83 c4 10             	add    esp,0x10
c00208e2:	90                   	nop
c00208e3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00208eb:	74 3a                	je     c0020927 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00208ed:	eb 2d                	jmp    c002091c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00208ef:	83 ec 0c             	sub    esp,0xc
c00208f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208f9:	e8 7f f0 fe ff       	call   c000f97d <rfree>
c00208fe:	83 c4 10             	add    esp,0x10
c0020901:	83 ec 04             	sub    esp,0x4
c0020904:	6a 00                	push   0x0
c0020906:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002090d:	50                   	push   eax
c002090e:	6a 00                	push   0x0
c0020910:	e8 e0 45 fe ff       	call   c0004ef5 <f_mount>
c0020915:	83 c4 10             	add    esp,0x10
c0020918:	b0 00                	mov    al,0x0
c002091a:	eb 12                	jmp    c002092e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002091c:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c0020921:	40                   	inc    eax
c0020922:	a3 c0 fb 02 c0       	mov    ds:0xc002fbc0,eax
c0020927:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002092e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020934:	c3                   	ret    
c0020935:	90                   	nop

c0020936 <FAT::allocateSwapfile(char const*, int)>:
c0020936:	53                   	push   ebx
c0020937:	81 ec 28 04 00 00    	sub    esp,0x428
c002093d:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020948:	83 ec 0c             	sub    esp,0xc
c002094b:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c0020952:	e8 06 f0 fe ff       	call   c000f95d <malloc>
c0020957:	83 c4 10             	add    esp,0x10
c002095a:	89 c3                	mov    ebx,eax
c002095c:	a1 f0 fa 02 c0       	mov    eax,ds:0xc002faf0
c0020961:	83 ec 04             	sub    esp,0x4
c0020964:	50                   	push   eax
c0020965:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c002096c:	53                   	push   ebx
c002096d:	e8 a2 25 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020986:	e8 65 27 ff ff       	call   c00130f0 <File::unlink()>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	83 ec 08             	sub    esp,0x8
c0020991:	6a 12                	push   0x12
c0020993:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c002099a:	e8 d9 25 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209a9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00209af:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c00209b6:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c00209bd:	c1 e0 14             	shl    eax,0x14
c00209c0:	99                   	cdq    
c00209c1:	6a 01                	push   0x1
c00209c3:	52                   	push   edx
c00209c4:	50                   	push   eax
c00209c5:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c00209cc:	e8 88 67 fe ff       	call   c0007159 <f_expand>
c00209d1:	83 c4 10             	add    esp,0x10
c00209d4:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209db:	8b 00                	mov    eax,DWORD PTR [eax]
c00209dd:	83 c0 10             	add    eax,0x10
c00209e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00209e2:	83 ec 0c             	sub    esp,0xc
c00209e5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209e9:	52                   	push   edx
c00209ea:	8d 54 24 20          	lea    edx,[esp+0x20]
c00209ee:	52                   	push   edx
c00209ef:	6a 00                	push   0x0
c00209f1:	68 00 04 00 00       	push   0x400
c00209f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00209fd:	ff d0                	call   eax
c00209ff:	83 c4 20             	add    esp,0x20
c0020a02:	83 ec 0c             	sub    esp,0xc
c0020a05:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a0c:	e8 c5 25 ff ff       	call   c0012fd6 <File::close()>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	83 ec 08             	sub    esp,0x8
c0020a17:	6a 01                	push   0x1
c0020a19:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a20:	e8 53 25 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c0020a25:	83 c4 10             	add    esp,0x10
c0020a28:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a31:	83 c0 0c             	add    eax,0xc
c0020a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a36:	83 ec 0c             	sub    esp,0xc
c0020a39:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a3d:	52                   	push   edx
c0020a3e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a42:	52                   	push   edx
c0020a43:	6a 00                	push   0x0
c0020a45:	6a 04                	push   0x4
c0020a47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a4e:	ff d0                	call   eax
c0020a50:	83 c4 20             	add    esp,0x20
c0020a53:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a5a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020a60:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020a67:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020a6e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020a71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020a74:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020a7b:	83 ec 0c             	sub    esp,0xc
c0020a7e:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a85:	e8 4c 25 ff ff       	call   c0012fd6 <File::close()>
c0020a8a:	83 c4 10             	add    esp,0x10
c0020a8d:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020a94:	ba 00 00 00 00       	mov    edx,0x0
c0020a99:	81 c4 28 04 00 00    	add    esp,0x428
c0020a9f:	5b                   	pop    ebx
c0020aa0:	c3                   	ret    
c0020aa1:	90                   	nop

c0020aa2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020aa2:	57                   	push   edi
c0020aa3:	56                   	push   esi
c0020aa4:	53                   	push   ebx
c0020aa5:	81 ec 50 02 00 00    	sub    esp,0x250
c0020aab:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020ab3:	74 0a                	je     c0020abf <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020ab5:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020abd:	75 0a                	jne    c0020ac9 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020abf:	b8 04 00 00 00       	mov    eax,0x4
c0020ac4:	e9 29 01 00 00       	jmp    c0020bf2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ac9:	83 ec 08             	sub    esp,0x8
c0020acc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020ad3:	50                   	push   eax
c0020ad4:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020adb:	e8 d3 55 fe ff       	call   c00060b3 <f_readdir>
c0020ae0:	83 c4 10             	add    esp,0x10
c0020ae3:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020aea:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020af1:	83 ec 0c             	sub    esp,0xc
c0020af4:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020afb:	83 c0 1a             	add    eax,0x1a
c0020afe:	50                   	push   eax
c0020aff:	e8 68 fc fd ff       	call   c000076c <strlen>
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	ba 00 00 00 00       	mov    edx,0x0
c0020b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b14:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020b1b:	0f b6 c0             	movzx  eax,al
c0020b1e:	83 e0 10             	and    eax,0x10
c0020b21:	74 07                	je     c0020b2a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020b23:	b8 02 00 00 00       	mov    eax,0x2
c0020b28:	eb 05                	jmp    c0020b2f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020b2a:	b8 01 00 00 00       	mov    eax,0x1
c0020b2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b33:	83 ec 08             	sub    esp,0x8
c0020b36:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b3d:	83 c0 1a             	add    eax,0x1a
c0020b40:	50                   	push   eax
c0020b41:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b45:	83 c0 10             	add    eax,0x10
c0020b48:	50                   	push   eax
c0020b49:	e8 be fc fd ff       	call   c000080c <strcpy>
c0020b4e:	83 c4 10             	add    esp,0x10
c0020b51:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020b58:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020b5f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020b63:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020b6a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020b71:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020b78:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020b7f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020b86:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020b8d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020b94:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020b9b:	89 c6                	mov    esi,eax
c0020b9d:	89 d7                	mov    edi,edx
c0020b9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ba1:	89 c8                	mov    eax,ecx
c0020ba3:	89 fa                	mov    edx,edi
c0020ba5:	89 f3                	mov    ebx,esi
c0020ba7:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020bae:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020bb5:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020bbc:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020bc3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bc9:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020bd0:	84 c0                	test   al,al
c0020bd2:	75 07                	jne    c0020bdb <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020bd4:	b8 07 00 00 00       	mov    eax,0x7
c0020bd9:	eb 17                	jmp    c0020bf2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020bdb:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020be2:	85 c0                	test   eax,eax
c0020be4:	75 07                	jne    c0020bed <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020be6:	b8 00 00 00 00       	mov    eax,0x0
c0020beb:	eb 05                	jmp    c0020bf2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020bed:	b8 01 00 00 00       	mov    eax,0x1
c0020bf2:	81 c4 50 02 00 00    	add    esp,0x250
c0020bf8:	5b                   	pop    ebx
c0020bf9:	5e                   	pop    esi
c0020bfa:	5f                   	pop    edi
c0020bfb:	c3                   	ret    

c0020bfc <FAT::read(void*, unsigned long, void*, int*)>:
c0020bfc:	83 ec 1c             	sub    esp,0x1c
c0020bff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c04:	74 07                	je     c0020c0d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c0b:	75 07                	jne    c0020c14 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c0d:	b8 04 00 00 00       	mov    eax,0x4
c0020c12:	eb 3d                	jmp    c0020c51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c18:	50                   	push   eax
c0020c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c25:	e8 69 47 fe ff       	call   c0005393 <f_read>
c0020c2a:	83 c4 10             	add    esp,0x10
c0020c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c35:	89 c2                	mov    edx,eax
c0020c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c3b:	89 10                	mov    DWORD PTR [eax],edx
c0020c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c41:	85 c0                	test   eax,eax
c0020c43:	75 07                	jne    c0020c4c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c45:	b8 00 00 00 00       	mov    eax,0x0
c0020c4a:	eb 05                	jmp    c0020c51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c4c:	b8 01 00 00 00       	mov    eax,0x1
c0020c51:	83 c4 1c             	add    esp,0x1c
c0020c54:	c3                   	ret    
c0020c55:	90                   	nop

c0020c56 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c56:	83 ec 1c             	sub    esp,0x1c
c0020c59:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c5e:	74 07                	je     c0020c67 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c60:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c65:	75 07                	jne    c0020c6e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c67:	b8 04 00 00 00       	mov    eax,0x4
c0020c6c:	eb 3d                	jmp    c0020cab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c72:	50                   	push   eax
c0020c73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c7f:	e8 8f 49 fe ff       	call   c0005613 <f_write>
c0020c84:	83 c4 10             	add    esp,0x10
c0020c87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c8f:	89 c2                	mov    edx,eax
c0020c91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c95:	89 10                	mov    DWORD PTR [eax],edx
c0020c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c9b:	85 c0                	test   eax,eax
c0020c9d:	75 07                	jne    c0020ca6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c9f:	b8 00 00 00 00       	mov    eax,0x0
c0020ca4:	eb 05                	jmp    c0020cab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ca6:	b8 01 00 00 00       	mov    eax,0x1
c0020cab:	83 c4 1c             	add    esp,0x1c
c0020cae:	c3                   	ret    
c0020caf:	90                   	nop

c0020cb0 <FAT::close(void*)>:
c0020cb0:	83 ec 1c             	sub    esp,0x1c
c0020cb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cb8:	75 07                	jne    c0020cc1 <FAT::close(void*)+0x11>
c0020cba:	b8 04 00 00 00       	mov    eax,0x4
c0020cbf:	eb 36                	jmp    c0020cf7 <FAT::close(void*)+0x47>
c0020cc1:	83 ec 0c             	sub    esp,0xc
c0020cc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc8:	e8 dc 4d fe ff       	call   c0005aa9 <f_close>
c0020ccd:	83 c4 10             	add    esp,0x10
c0020cd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd4:	83 ec 0c             	sub    esp,0xc
c0020cd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cdb:	e8 8d ec fe ff       	call   c000f96d <free>
c0020ce0:	83 c4 10             	add    esp,0x10
c0020ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce7:	85 c0                	test   eax,eax
c0020ce9:	75 07                	jne    c0020cf2 <FAT::close(void*)+0x42>
c0020ceb:	b8 00 00 00 00       	mov    eax,0x0
c0020cf0:	eb 05                	jmp    c0020cf7 <FAT::close(void*)+0x47>
c0020cf2:	b8 01 00 00 00       	mov    eax,0x1
c0020cf7:	83 c4 1c             	add    esp,0x1c
c0020cfa:	c3                   	ret    
c0020cfb:	90                   	nop

c0020cfc <FAT::closeDir(void*)>:
c0020cfc:	83 ec 1c             	sub    esp,0x1c
c0020cff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d04:	75 07                	jne    c0020d0d <FAT::closeDir(void*)+0x11>
c0020d06:	b8 04 00 00 00       	mov    eax,0x4
c0020d0b:	eb 36                	jmp    c0020d43 <FAT::closeDir(void*)+0x47>
c0020d0d:	83 ec 0c             	sub    esp,0xc
c0020d10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d14:	e8 78 53 fe ff       	call   c0006091 <f_closedir>
c0020d19:	83 c4 10             	add    esp,0x10
c0020d1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d20:	83 ec 0c             	sub    esp,0xc
c0020d23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d27:	e8 41 ec fe ff       	call   c000f96d <free>
c0020d2c:	83 c4 10             	add    esp,0x10
c0020d2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d33:	85 c0                	test   eax,eax
c0020d35:	75 07                	jne    c0020d3e <FAT::closeDir(void*)+0x42>
c0020d37:	b8 00 00 00 00       	mov    eax,0x0
c0020d3c:	eb 05                	jmp    c0020d43 <FAT::closeDir(void*)+0x47>
c0020d3e:	b8 01 00 00 00       	mov    eax,0x1
c0020d43:	83 c4 1c             	add    esp,0x1c
c0020d46:	c3                   	ret    
c0020d47:	90                   	nop

c0020d48 <FAT::seek(void*, unsigned long long)>:
c0020d48:	83 ec 2c             	sub    esp,0x2c
c0020d4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d5b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d60:	75 07                	jne    c0020d69 <FAT::seek(void*, unsigned long long)+0x21>
c0020d62:	b8 04 00 00 00       	mov    eax,0x4
c0020d67:	eb 2f                	jmp    c0020d98 <FAT::seek(void*, unsigned long long)+0x50>
c0020d69:	83 ec 04             	sub    esp,0x4
c0020d6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d78:	e8 5b 4d fe ff       	call   c0005ad8 <f_lseek>
c0020d7d:	83 c4 10             	add    esp,0x10
c0020d80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d88:	85 c0                	test   eax,eax
c0020d8a:	75 07                	jne    c0020d93 <FAT::seek(void*, unsigned long long)+0x4b>
c0020d8c:	b8 00 00 00 00       	mov    eax,0x0
c0020d91:	eb 05                	jmp    c0020d98 <FAT::seek(void*, unsigned long long)+0x50>
c0020d93:	b8 01 00 00 00       	mov    eax,0x1
c0020d98:	83 c4 2c             	add    esp,0x2c
c0020d9b:	c3                   	ret    

c0020d9c <fatWrapperReadDisk>:
c0020d9c:	83 ec 1c             	sub    esp,0x1c
c0020d9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020da3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020da7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020db2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020db6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dbb:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020dc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dc6:	83 ec 0c             	sub    esp,0xc
c0020dc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dcd:	52                   	push   edx
c0020dce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dd6:	50                   	push   eax
c0020dd7:	e8 34 55 ff ff       	call   c0016310 <LogicalDisk::read(unsigned long long, int, void*)>
c0020ddc:	83 c4 20             	add    esp,0x20
c0020ddf:	83 c4 1c             	add    esp,0x1c
c0020de2:	c3                   	ret    

c0020de3 <fatWrapperWriteDisk>:
c0020de3:	83 ec 1c             	sub    esp,0x1c
c0020de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020df5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020df9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dfd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e02:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020e09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e0d:	83 ec 0c             	sub    esp,0xc
c0020e10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e14:	52                   	push   edx
c0020e15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e1d:	50                   	push   eax
c0020e1e:	e8 59 55 ff ff       	call   c001637c <LogicalDisk::write(unsigned long long, int, void*)>
c0020e23:	83 c4 20             	add    esp,0x20
c0020e26:	83 c4 1c             	add    esp,0x1c
c0020e29:	c3                   	ret    

c0020e2a <fatWrapperIoctl>:
c0020e2a:	53                   	push   ebx
c0020e2b:	83 ec 28             	sub    esp,0x28
c0020e2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e36:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e3e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e43:	75 31                	jne    c0020e76 <fatWrapperIoctl+0x4c>
c0020e45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e4d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e52:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020e59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e69:	66 89 02             	mov    WORD PTR [edx],ax
c0020e6c:	b8 00 00 00 00       	mov    eax,0x0
c0020e71:	e9 b2 00 00 00       	jmp    c0020f28 <fatWrapperIoctl+0xfe>
c0020e76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e7b:	75 6a                	jne    c0020ee7 <fatWrapperIoctl+0xbd>
c0020e7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e8a:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020e91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e97:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e9d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ea3:	89 c8                	mov    eax,ecx
c0020ea5:	89 da                	mov    edx,ebx
c0020ea7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020eab:	c1 e0 0a             	shl    eax,0xa
c0020eae:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020eb3:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0020eba:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ec0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ec6:	89 cb                	mov    ebx,ecx
c0020ec8:	c1 fb 1f             	sar    ebx,0x1f
c0020ecb:	53                   	push   ebx
c0020ecc:	51                   	push   ecx
c0020ecd:	52                   	push   edx
c0020ece:	50                   	push   eax
c0020ecf:	e8 b0 5e 00 00       	call   c0026d84 <__udivdi3>
c0020ed4:	83 c4 10             	add    esp,0x10
c0020ed7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020edb:	89 01                	mov    DWORD PTR [ecx],eax
c0020edd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ee0:	b8 00 00 00 00       	mov    eax,0x0
c0020ee5:	eb 41                	jmp    c0020f28 <fatWrapperIoctl+0xfe>
c0020ee7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020eec:	75 07                	jne    c0020ef5 <fatWrapperIoctl+0xcb>
c0020eee:	b8 00 00 00 00       	mov    eax,0x0
c0020ef3:	eb 33                	jmp    c0020f28 <fatWrapperIoctl+0xfe>
c0020ef5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020efa:	75 19                	jne    c0020f15 <fatWrapperIoctl+0xeb>
c0020efc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f08:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f0e:	b8 00 00 00 00       	mov    eax,0x0
c0020f13:	eb 13                	jmp    c0020f28 <fatWrapperIoctl+0xfe>
c0020f15:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f1a:	75 07                	jne    c0020f23 <fatWrapperIoctl+0xf9>
c0020f1c:	b8 00 00 00 00       	mov    eax,0x0
c0020f21:	eb 05                	jmp    c0020f28 <fatWrapperIoctl+0xfe>
c0020f23:	b8 04 00 00 00       	mov    eax,0x4
c0020f28:	83 c4 28             	add    esp,0x28
c0020f2b:	5b                   	pop    ebx
c0020f2c:	c3                   	ret    
c0020f2d:	90                   	nop

c0020f2e <FAT::FAT()>:
c0020f2e:	83 ec 1c             	sub    esp,0x1c
c0020f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f35:	83 ec 0c             	sub    esp,0xc
c0020f38:	50                   	push   eax
c0020f39:	e8 82 1d ff ff       	call   c0012cc0 <Filesystem::Filesystem()>
c0020f3e:	83 c4 10             	add    esp,0x10
c0020f41:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c0020f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f4a:	89 10                	mov    DWORD PTR [eax],edx
c0020f4c:	c7 05 c0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbc0,0x0
c0020f56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f5e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f63:	7f 15                	jg     c0020f7a <FAT::FAT()+0x4c>
c0020f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f69:	c7 04 85 e0 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0420],0xffffffff
c0020f74:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f78:	eb e4                	jmp    c0020f5e <FAT::FAT()+0x30>
c0020f7a:	90                   	nop
c0020f7b:	83 c4 1c             	add    esp,0x1c
c0020f7e:	c3                   	ret    
c0020f7f:	90                   	nop

c0020f80 <FAT::fixFilepath(char*)>:
c0020f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f84:	8a 00                	mov    al,BYTE PTR [eax]
c0020f86:	3c 40                	cmp    al,0x40
c0020f88:	7e 2c                	jle    c0020fb6 <FAT::fixFilepath(char*)+0x36>
c0020f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8e:	8a 00                	mov    al,BYTE PTR [eax]
c0020f90:	83 e8 41             	sub    eax,0x41
c0020f93:	88 c2                	mov    dl,al
c0020f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f99:	88 10                	mov    BYTE PTR [eax],dl
c0020f9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f9f:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa1:	0f be c0             	movsx  eax,al
c0020fa4:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c0020fab:	83 c0 30             	add    eax,0x30
c0020fae:	88 c2                	mov    dl,al
c0020fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb4:	88 10                	mov    BYTE PTR [eax],dl
c0020fb6:	90                   	nop
c0020fb7:	c3                   	ret    

c0020fb8 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fc6:	74 0a                	je     c0020fd2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fc8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fd0:	75 0a                	jne    c0020fdc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fd2:	b8 04 00 00 00       	mov    eax,0x4
c0020fd7:	e9 fd 00 00 00       	jmp    c00210d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fdc:	83 ec 08             	sub    esp,0x8
c0020fdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fe6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fea:	50                   	push   eax
c0020feb:	e8 1c f8 fd ff       	call   c000080c <strcpy>
c0020ff0:	83 c4 10             	add    esp,0x10
c0020ff3:	83 ec 08             	sub    esp,0x8
c0020ff6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ffa:	50                   	push   eax
c0020ffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021002:	e8 79 ff ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c0021007:	83 c4 10             	add    esp,0x10
c002100a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021012:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021019:	83 e0 01             	and    eax,0x1
c002101c:	74 08                	je     c0021026 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002101e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021026:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002102d:	83 e0 04             	and    eax,0x4
c0021030:	74 10                	je     c0021042 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021032:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002103a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021042:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021049:	83 e0 02             	and    eax,0x2
c002104c:	74 08                	je     c0021056 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002104e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021056:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002105d:	83 e0 08             	and    eax,0x8
c0021060:	74 08                	je     c002106a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021062:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002106a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021071:	83 e0 10             	and    eax,0x10
c0021074:	74 08                	je     c002107e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021076:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002107e:	83 ec 0c             	sub    esp,0xc
c0021081:	68 50 02 00 00       	push   0x250
c0021086:	e8 d2 e8 fe ff       	call   c000f95d <malloc>
c002108b:	83 c4 10             	add    esp,0x10
c002108e:	89 c2                	mov    edx,eax
c0021090:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021097:	89 10                	mov    DWORD PTR [eax],edx
c0021099:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210aa:	83 ec 04             	sub    esp,0x4
c00210ad:	52                   	push   edx
c00210ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210b2:	52                   	push   edx
c00210b3:	50                   	push   eax
c00210b4:	e8 9e 3e fe ff       	call   c0004f57 <f_open>
c00210b9:	83 c4 10             	add    esp,0x10
c00210bc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210c3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210cb:	74 07                	je     c00210d4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210cd:	b8 01 00 00 00       	mov    eax,0x1
c00210d2:	eb 05                	jmp    c00210d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210d4:	b8 00 00 00 00       	mov    eax,0x0
c00210d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210df:	c3                   	ret    

c00210e0 <FAT::openDir(char const*, void**)>:
c00210e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ee:	74 0a                	je     c00210fa <FAT::openDir(char const*, void**)+0x1a>
c00210f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210f8:	75 07                	jne    c0021101 <FAT::openDir(char const*, void**)+0x21>
c00210fa:	b8 04 00 00 00       	mov    eax,0x4
c00210ff:	eb 7d                	jmp    c002117e <FAT::openDir(char const*, void**)+0x9e>
c0021101:	83 ec 08             	sub    esp,0x8
c0021104:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002110b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002110f:	50                   	push   eax
c0021110:	e8 f7 f6 fd ff       	call   c000080c <strcpy>
c0021115:	83 c4 10             	add    esp,0x10
c0021118:	83 ec 08             	sub    esp,0x8
c002111b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002111f:	50                   	push   eax
c0021120:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021127:	e8 54 fe ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c002112c:	83 c4 10             	add    esp,0x10
c002112f:	83 ec 0c             	sub    esp,0xc
c0021132:	6a 4c                	push   0x4c
c0021134:	e8 24 e8 fe ff       	call   c000f95d <malloc>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	89 c2                	mov    edx,eax
c002113e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021145:	89 10                	mov    DWORD PTR [eax],edx
c0021147:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002114e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021150:	83 ec 08             	sub    esp,0x8
c0021153:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021157:	52                   	push   edx
c0021158:	50                   	push   eax
c0021159:	e8 31 4e fe ff       	call   c0005f8f <f_opendir>
c002115e:	83 c4 10             	add    esp,0x10
c0021161:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021168:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021170:	74 07                	je     c0021179 <FAT::openDir(char const*, void**)+0x99>
c0021172:	b8 01 00 00 00       	mov    eax,0x1
c0021177:	eb 05                	jmp    c002117e <FAT::openDir(char const*, void**)+0x9e>
c0021179:	b8 00 00 00 00       	mov    eax,0x0
c002117e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021184:	c3                   	ret    
c0021185:	90                   	nop

c0021186 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021186:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002118c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021194:	75 0a                	jne    c00211a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021196:	b8 04 00 00 00       	mov    eax,0x4
c002119b:	e9 c9 00 00 00       	jmp    c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211a0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211a8:	75 0a                	jne    c00211b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211aa:	b8 04 00 00 00       	mov    eax,0x4
c00211af:	e9 b5 00 00 00       	jmp    c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211b4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211bc:	75 0a                	jne    c00211c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211be:	b8 04 00 00 00       	mov    eax,0x4
c00211c3:	e9 a1 00 00 00       	jmp    c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c8:	83 ec 08             	sub    esp,0x8
c00211cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211d9:	50                   	push   eax
c00211da:	e8 2d f6 fd ff       	call   c000080c <strcpy>
c00211df:	83 c4 10             	add    esp,0x10
c00211e2:	83 ec 08             	sub    esp,0x8
c00211e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211ec:	50                   	push   eax
c00211ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211f4:	e8 87 fd ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	83 ec 08             	sub    esp,0x8
c00211ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021203:	50                   	push   eax
c0021204:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002120b:	50                   	push   eax
c002120c:	e8 3d 4f fe ff       	call   c000614e <f_stat>
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002121b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021222:	85 c0                	test   eax,eax
c0021224:	74 07                	je     c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021226:	83 f8 04             	cmp    eax,0x4
c0021229:	74 32                	je     c002125d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002122b:	eb 37                	jmp    c0021264 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002122d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021231:	0f b6 c0             	movzx  eax,al
c0021234:	83 e0 10             	and    eax,0x10
c0021237:	0f 95 c2             	setne  dl
c002123a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021241:	88 10                	mov    BYTE PTR [eax],dl
c0021243:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021246:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002124a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021251:	89 01                	mov    DWORD PTR [ecx],eax
c0021253:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021256:	b8 00 00 00 00       	mov    eax,0x0
c002125b:	eb 0c                	jmp    c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002125d:	b8 02 00 00 00       	mov    eax,0x2
c0021262:	eb 05                	jmp    c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021264:	b8 01 00 00 00       	mov    eax,0x1
c0021269:	81 c4 2c 02 00 00    	add    esp,0x22c
c002126f:	c3                   	ret    

c0021270 <FAT::unlink(char const*)>:
c0021270:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021276:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002127e:	75 07                	jne    c0021287 <FAT::unlink(char const*)+0x17>
c0021280:	b8 04 00 00 00       	mov    eax,0x4
c0021285:	eb 5c                	jmp    c00212e3 <FAT::unlink(char const*)+0x73>
c0021287:	83 ec 08             	sub    esp,0x8
c002128a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021291:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021295:	50                   	push   eax
c0021296:	e8 71 f5 fd ff       	call   c000080c <strcpy>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	83 ec 08             	sub    esp,0x8
c00212a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212a5:	50                   	push   eax
c00212a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ad:	e8 ce fc ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c00212b2:	83 c4 10             	add    esp,0x10
c00212b5:	83 ec 0c             	sub    esp,0xc
c00212b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212bc:	50                   	push   eax
c00212bd:	e8 de 51 fe ff       	call   c00064a0 <f_unlink>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212cc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212d3:	85 c0                	test   eax,eax
c00212d5:	75 07                	jne    c00212de <FAT::unlink(char const*)+0x6e>
c00212d7:	b8 00 00 00 00       	mov    eax,0x0
c00212dc:	eb 05                	jmp    c00212e3 <FAT::unlink(char const*)+0x73>
c00212de:	b8 01 00 00 00       	mov    eax,0x1
c00212e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212e9:	c3                   	ret    

c00212ea <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212f0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212f7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021302:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021306:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002130e:	75 0a                	jne    c002131a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021310:	b8 04 00 00 00       	mov    eax,0x4
c0021315:	e9 1c 01 00 00       	jmp    c0021436 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002131a:	83 ec 08             	sub    esp,0x8
c002131d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021324:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021328:	50                   	push   eax
c0021329:	e8 de f4 fd ff       	call   c000080c <strcpy>
c002132e:	83 c4 10             	add    esp,0x10
c0021331:	83 ec 08             	sub    esp,0x8
c0021334:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021338:	50                   	push   eax
c0021339:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021340:	e8 3b fc ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c0021345:	83 c4 10             	add    esp,0x10
c0021348:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021350:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021358:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002135d:	83 e0 01             	and    eax,0x1
c0021360:	74 08                	je     c002136a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021362:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002136a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136f:	83 e0 02             	and    eax,0x2
c0021372:	74 08                	je     c002137c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021374:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002137c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021381:	83 e0 04             	and    eax,0x4
c0021384:	74 08                	je     c002138e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021386:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002138e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021393:	83 e0 08             	and    eax,0x8
c0021396:	74 08                	je     c00213a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021398:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a5:	83 e0 01             	and    eax,0x1
c00213a8:	74 08                	je     c00213b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213aa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b7:	83 e0 02             	and    eax,0x2
c00213ba:	74 08                	je     c00213c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213bc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c9:	83 e0 04             	and    eax,0x4
c00213cc:	74 08                	je     c00213d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213db:	83 e0 08             	and    eax,0x8
c00213de:	74 08                	je     c00213e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213e0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213e8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213ef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213f6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213fe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021406:	83 ec 04             	sub    esp,0x4
c0021409:	52                   	push   edx
c002140a:	50                   	push   eax
c002140b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002140f:	50                   	push   eax
c0021410:	e8 2d 57 fe ff       	call   c0006b42 <f_chmod>
c0021415:	83 c4 10             	add    esp,0x10
c0021418:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002141f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021426:	85 c0                	test   eax,eax
c0021428:	75 07                	jne    c0021431 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002142a:	b8 00 00 00 00       	mov    eax,0x0
c002142f:	eb 05                	jmp    c0021436 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021431:	b8 01 00 00 00       	mov    eax,0x1
c0021436:	81 c4 2c 01 00 00    	add    esp,0x12c
c002143c:	c3                   	ret    
c002143d:	90                   	nop

c002143e <FAT::rename(char const*, char const*)>:
c002143e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021444:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002144c:	74 0a                	je     c0021458 <FAT::rename(char const*, char const*)+0x1a>
c002144e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021456:	75 0a                	jne    c0021462 <FAT::rename(char const*, char const*)+0x24>
c0021458:	b8 04 00 00 00       	mov    eax,0x4
c002145d:	e9 98 00 00 00       	jmp    c00214fa <FAT::rename(char const*, char const*)+0xbc>
c0021462:	83 ec 08             	sub    esp,0x8
c0021465:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002146c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021473:	50                   	push   eax
c0021474:	e8 93 f3 fd ff       	call   c000080c <strcpy>
c0021479:	83 c4 10             	add    esp,0x10
c002147c:	83 ec 08             	sub    esp,0x8
c002147f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021486:	50                   	push   eax
c0021487:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002148e:	e8 ed fa ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c0021493:	83 c4 10             	add    esp,0x10
c0021496:	83 ec 08             	sub    esp,0x8
c0021499:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214a4:	50                   	push   eax
c00214a5:	e8 62 f3 fd ff       	call   c000080c <strcpy>
c00214aa:	83 c4 10             	add    esp,0x10
c00214ad:	83 ec 08             	sub    esp,0x8
c00214b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214b4:	50                   	push   eax
c00214b5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214bc:	e8 bf fa ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c00214c1:	83 c4 10             	add    esp,0x10
c00214c4:	83 ec 08             	sub    esp,0x8
c00214c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214cb:	50                   	push   eax
c00214cc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214d3:	50                   	push   eax
c00214d4:	e8 76 53 fe ff       	call   c000684f <f_rename>
c00214d9:	83 c4 10             	add    esp,0x10
c00214dc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214e3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214ea:	85 c0                	test   eax,eax
c00214ec:	75 07                	jne    c00214f5 <FAT::rename(char const*, char const*)+0xb7>
c00214ee:	b8 00 00 00 00       	mov    eax,0x0
c00214f3:	eb 05                	jmp    c00214fa <FAT::rename(char const*, char const*)+0xbc>
c00214f5:	b8 01 00 00 00       	mov    eax,0x1
c00214fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021500:	c3                   	ret    
c0021501:	90                   	nop

c0021502 <FAT::mkdir(char const*)>:
c0021502:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021508:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021510:	75 07                	jne    c0021519 <FAT::mkdir(char const*)+0x17>
c0021512:	b8 04 00 00 00       	mov    eax,0x4
c0021517:	eb 5c                	jmp    c0021575 <FAT::mkdir(char const*)+0x73>
c0021519:	83 ec 08             	sub    esp,0x8
c002151c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021523:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021527:	50                   	push   eax
c0021528:	e8 df f2 fd ff       	call   c000080c <strcpy>
c002152d:	83 c4 10             	add    esp,0x10
c0021530:	83 ec 08             	sub    esp,0x8
c0021533:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021537:	50                   	push   eax
c0021538:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002153f:	e8 3c fa ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c0021544:	83 c4 10             	add    esp,0x10
c0021547:	83 ec 0c             	sub    esp,0xc
c002154a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002154e:	50                   	push   eax
c002154f:	e8 cf 50 fe ff       	call   c0006623 <f_mkdir>
c0021554:	83 c4 10             	add    esp,0x10
c0021557:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002155e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021565:	85 c0                	test   eax,eax
c0021567:	75 07                	jne    c0021570 <FAT::mkdir(char const*)+0x6e>
c0021569:	b8 00 00 00 00       	mov    eax,0x0
c002156e:	eb 05                	jmp    c0021575 <FAT::mkdir(char const*)+0x73>
c0021570:	b8 01 00 00 00       	mov    eax,0x1
c0021575:	81 c4 1c 01 00 00    	add    esp,0x11c
c002157b:	c3                   	ret    

c002157c <FAT::exists(char const*)>:
c002157c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021582:	83 ec 08             	sub    esp,0x8
c0021585:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002158c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021590:	50                   	push   eax
c0021591:	e8 76 f2 fd ff       	call   c000080c <strcpy>
c0021596:	83 c4 10             	add    esp,0x10
c0021599:	83 ec 08             	sub    esp,0x8
c002159c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215a0:	50                   	push   eax
c00215a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215a8:	e8 d3 f9 ff ff       	call   c0020f80 <FAT::fixFilepath(char*)>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	83 ec 08             	sub    esp,0x8
c00215b3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215ba:	50                   	push   eax
c00215bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215bf:	50                   	push   eax
c00215c0:	e8 89 4b fe ff       	call   c000614e <f_stat>
c00215c5:	83 c4 10             	add    esp,0x10
c00215c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215d6:	85 c0                	test   eax,eax
c00215d8:	75 04                	jne    c00215de <FAT::exists(char const*)+0x62>
c00215da:	b0 01                	mov    al,0x1
c00215dc:	eb 02                	jmp    c00215e0 <FAT::exists(char const*)+0x64>
c00215de:	b0 00                	mov    al,0x0
c00215e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215e6:	c3                   	ret    
c00215e7:	90                   	nop

c00215e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215e8:	b8 08 00 00 00       	mov    eax,0x8
c00215ed:	c3                   	ret    

c00215ee <ISO9660::seek(void*, unsigned long long)>:
c00215ee:	53                   	push   ebx
c00215ef:	b8 04 00 00 00       	mov    eax,0x4
c00215f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021600:	85 d2                	test   edx,edx
c0021602:	74 17                	je     c002161b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021604:	89 c8                	mov    eax,ecx
c0021606:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021609:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002160c:	b8 01 00 00 00       	mov    eax,0x1
c0021611:	73 08                	jae    c002161b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021613:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021616:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021619:	31 c0                	xor    eax,eax
c002161b:	5b                   	pop    ebx
c002161c:	c3                   	ret    
c002161d:	90                   	nop

c002161e <ISO9660::tell(void*, unsigned long long*)>:
c002161e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021626:	85 d2                	test   edx,edx
c0021628:	74 12                	je     c002163c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002162a:	85 c0                	test   eax,eax
c002162c:	74 0e                	je     c002163c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002162e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021631:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021634:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021637:	89 10                	mov    DWORD PTR [eax],edx
c0021639:	31 c0                	xor    eax,eax
c002163b:	c3                   	ret    
c002163c:	b8 04 00 00 00       	mov    eax,0x4
c0021641:	c3                   	ret    

c0021642 <ISO9660::getName()>:
c0021642:	b8 dc ca 02 c0       	mov    eax,0xc002cadc
c0021647:	c3                   	ret    

c0021648 <ISO9660::stat(void*, unsigned long long*)>:
c0021648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002164c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021650:	85 d2                	test   edx,edx
c0021652:	74 12                	je     c0021666 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021654:	85 c0                	test   eax,eax
c0021656:	74 0e                	je     c0021666 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021658:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002165b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002165e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021661:	89 10                	mov    DWORD PTR [eax],edx
c0021663:	31 c0                	xor    eax,eax
c0021665:	c3                   	ret    
c0021666:	b8 04 00 00 00       	mov    eax,0x4
c002166b:	c3                   	ret    

c002166c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002166c:	b8 01 00 00 00       	mov    eax,0x1
c0021671:	c3                   	ret    

c0021672 <ISO9660::unlink(char const*)>:
c0021672:	b8 01 00 00 00       	mov    eax,0x1
c0021677:	c3                   	ret    

c0021678 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021678:	b8 01 00 00 00       	mov    eax,0x1
c002167d:	c3                   	ret    

c002167e <ISO9660::rename(char const*, char const*)>:
c002167e:	b8 01 00 00 00       	mov    eax,0x1
c0021683:	c3                   	ret    

c0021684 <ISO9660::mkdir(char const*)>:
c0021684:	b8 01 00 00 00       	mov    eax,0x1
c0021689:	c3                   	ret    

c002168a <ISO9660::close(void*)>:
c002168a:	83 ec 0c             	sub    esp,0xc
c002168d:	b8 04 00 00 00       	mov    eax,0x4
c0021692:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021696:	85 d2                	test   edx,edx
c0021698:	74 0e                	je     c00216a8 <ISO9660::close(void*)+0x1e>
c002169a:	83 ec 0c             	sub    esp,0xc
c002169d:	52                   	push   edx
c002169e:	e8 ca e2 fe ff       	call   c000f96d <free>
c00216a3:	83 c4 10             	add    esp,0x10
c00216a6:	31 c0                	xor    eax,eax
c00216a8:	83 c4 0c             	add    esp,0xc
c00216ab:	c3                   	ret    

c00216ac <ISO9660::closeDir(void*)>:
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	b8 04 00 00 00       	mov    eax,0x4
c00216b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b8:	85 d2                	test   edx,edx
c00216ba:	74 0e                	je     c00216ca <ISO9660::closeDir(void*)+0x1e>
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	52                   	push   edx
c00216c0:	e8 a8 e2 fe ff       	call   c000f96d <free>
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	31 c0                	xor    eax,eax
c00216ca:	83 c4 0c             	add    esp,0xc
c00216cd:	c3                   	ret    

c00216ce <ISO9660::~ISO9660()>:
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	ba 00 cb 02 c0       	mov    edx,0xc002cb00
c00216d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216da:	89 10                	mov    DWORD PTR [eax],edx
c00216dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	50                   	push   eax
c00216e4:	e8 fb 15 ff ff       	call   c0012ce4 <Filesystem::~Filesystem()>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	90                   	nop
c00216ed:	83 c4 0c             	add    esp,0xc
c00216f0:	c3                   	ret    
c00216f1:	90                   	nop

c00216f2 <ISO9660::~ISO9660()>:
c00216f2:	83 ec 0c             	sub    esp,0xc
c00216f5:	83 ec 0c             	sub    esp,0xc
c00216f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fc:	e8 cd ff ff ff       	call   c00216ce <ISO9660::~ISO9660()>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	83 ec 08             	sub    esp,0x8
c0021707:	6a 08                	push   0x8
c0021709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002170d:	e8 cb 11 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0021712:	83 c4 10             	add    esp,0x10
c0021715:	83 c4 0c             	add    esp,0xc
c0021718:	c3                   	ret    

c0021719 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021719:	55                   	push   ebp
c002171a:	31 c9                	xor    ecx,ecx
c002171c:	57                   	push   edi
c002171d:	56                   	push   esi
c002171e:	53                   	push   ebx
c002171f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021723:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021727:	89 eb                	mov    ebx,ebp
c0021729:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002172d:	39 ce                	cmp    esi,ecx
c002172f:	7e 17                	jle    c0021748 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021731:	31 d2                	xor    edx,edx
c0021733:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021737:	7d 13                	jge    c002174c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021739:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002173d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021740:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021743:	75 0d                	jne    c0021752 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021745:	42                   	inc    edx
c0021746:	eb eb                	jmp    c0021733 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021748:	31 c0                	xor    eax,eax
c002174a:	eb 0a                	jmp    c0021756 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002174c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021750:	eb 04                	jmp    c0021756 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021752:	41                   	inc    ecx
c0021753:	43                   	inc    ebx
c0021754:	eb d7                	jmp    c002172d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021756:	5b                   	pop    ebx
c0021757:	5e                   	pop    esi
c0021758:	5f                   	pop    edi
c0021759:	5d                   	pop    ebp
c002175a:	c3                   	ret    

c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002175b:	57                   	push   edi
c002175c:	56                   	push   esi
c002175d:	53                   	push   ebx
c002175e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021762:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021766:	39 0d c0 fc 02 c0    	cmp    DWORD PTR ds:0xc002fcc0,ecx
c002176c:	75 08                	jne    c0021776 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002176e:	38 05 54 db 02 c0    	cmp    BYTE PTR ds:0xc002db54,al
c0021774:	74 2b                	je     c00217a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	a2 54 db 02 c0       	mov    ds:0xc002db54,al
c002177e:	68 e0 fc 02 c0       	push   0xc002fce0
c0021783:	0f be c0             	movsx  eax,al
c0021786:	6a 01                	push   0x1
c0021788:	89 0d c0 fc 02 c0    	mov    DWORD PTR ds:0xc002fcc0,ecx
c002178e:	31 db                	xor    ebx,ebx
c0021790:	53                   	push   ebx
c0021791:	51                   	push   ecx
c0021792:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c0021799:	e8 72 4b ff ff       	call   c0016310 <LogicalDisk::read(unsigned long long, int, void*)>
c002179e:	83 c4 20             	add    esp,0x20
c00217a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00217a5:	be e0 fc 02 c0       	mov    esi,0xc002fce0
c00217aa:	b9 00 08 00 00       	mov    ecx,0x800
c00217af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217b1:	5b                   	pop    ebx
c00217b2:	5e                   	pop    esi
c00217b3:	5f                   	pop    edi
c00217b4:	c3                   	ret    
c00217b5:	90                   	nop

c00217b6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217b6:	81 ec 10 08 00 00    	sub    esp,0x810
c00217bc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217c3:	83 c0 41             	add    eax,0x41
c00217c6:	0f be c0             	movsx  eax,al
c00217c9:	50                   	push   eax
c00217ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217ce:	50                   	push   eax
c00217cf:	6a 10                	push   0x10
c00217d1:	e8 85 ff ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217d6:	83 c4 10             	add    esp,0x10
c00217d9:	31 c0                	xor    eax,eax
c00217db:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217e0:	75 1d                	jne    c00217ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217e2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217e7:	75 16                	jne    c00217ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217e9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217ee:	75 0f                	jne    c00217ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217f0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217f5:	75 08                	jne    c00217ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217f7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217fc:	0f 94 c0             	sete   al
c00217ff:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021805:	c3                   	ret    

c0021806 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021806:	55                   	push   ebp
c0021807:	57                   	push   edi
c0021808:	56                   	push   esi
c0021809:	53                   	push   ebx
c002180a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021810:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021817:	85 ed                	test   ebp,ebp
c0021819:	0f 84 da 01 00 00    	je     c00219f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002181f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021827:	0f 84 cc 01 00 00    	je     c00219f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002182d:	b8 01 00 00 00       	mov    eax,0x1
c0021832:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021836:	0f 85 c2 01 00 00    	jne    c00219fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002183c:	31 d2                	xor    edx,edx
c002183e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021845:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021848:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002184b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002184e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021851:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021855:	01 c8                	add    eax,ecx
c0021857:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002185a:	11 da                	adc    edx,ebx
c002185c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021860:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021864:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021868:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002186c:	19 d7                	sbb    edi,edx
c002186e:	72 11                	jb     c0021881 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021870:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021873:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021877:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002187b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002187f:	eb 0c                	jmp    c002188d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021881:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021885:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021889:	29 ce                	sub    esi,ecx
c002188b:	19 df                	sbb    edi,ebx
c002188d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021890:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021893:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021897:	c1 e0 0b             	shl    eax,0xb
c002189a:	01 c8                	add    eax,ecx
c002189c:	11 da                	adc    edx,ebx
c002189e:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218a5:	51                   	push   ecx
c00218a6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218aa:	50                   	push   eax
c00218ab:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218af:	53                   	push   ebx
c00218b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218bc:	50                   	push   eax
c00218bd:	e8 99 fe ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218c5:	b8 00 08 00 00       	mov    eax,0x800
c00218ca:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218d0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00218d4:	29 d0                	sub    eax,edx
c00218d6:	83 c4 10             	add    esp,0x10
c00218d9:	89 f9                	mov    ecx,edi
c00218db:	39 c6                	cmp    esi,eax
c00218dd:	83 d9 00             	sbb    ecx,0x0
c00218e0:	7d 1b                	jge    c00218fd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00218e2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218e7:	75 12                	jne    c00218fb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00218e9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218f6:	e9 fa 00 00 00       	jmp    c00219f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218fb:	89 f0                	mov    eax,esi
c00218fd:	01 d3                	add    ebx,edx
c00218ff:	31 d2                	xor    edx,edx
c0021901:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021905:	39 c2                	cmp    edx,eax
c0021907:	7d 14                	jge    c002191d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021909:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021910:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021914:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021917:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002191a:	42                   	inc    edx
c002191b:	eb e8                	jmp    c0021905 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002191d:	89 c2                	mov    edx,eax
c002191f:	85 c0                	test   eax,eax
c0021921:	79 02                	jns    c0021925 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021923:	31 d2                	xor    edx,edx
c0021925:	01 c2                	add    edx,eax
c0021927:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002192a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021931:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021935:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021939:	99                   	cdq    
c002193a:	01 c1                	add    ecx,eax
c002193c:	11 d3                	adc    ebx,edx
c002193e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021942:	29 c6                	sub    esi,eax
c0021944:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021948:	19 d7                	sbb    edi,edx
c002194a:	89 34 24             	mov    DWORD PTR [esp],esi
c002194d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021951:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021956:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021959:	b8 00 00 00 00       	mov    eax,0x0
c002195e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021962:	7d 43                	jge    c00219a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021964:	52                   	push   edx
c0021965:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021969:	50                   	push   eax
c002196a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002196e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021972:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021976:	0f ac d0 0b          	shrd   eax,edx,0xb
c002197a:	50                   	push   eax
c002197b:	e8 db fd ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021980:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021988:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002198d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021995:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002199d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219a2:	83 c4 10             	add    esp,0x10
c00219a5:	eb aa                	jmp    c0021951 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00219a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219ab:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ae:	74 2a                	je     c00219da <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00219b0:	50                   	push   eax
c00219b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b5:	50                   	push   eax
c00219b6:	8d 74 24 28          	lea    esi,[esp+0x28]
c00219ba:	56                   	push   esi
c00219bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00219bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00219c3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00219c7:	51                   	push   ecx
c00219c8:	e8 8e fd ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219cd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219d7:	83 c4 10             	add    esp,0x10
c00219da:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00219e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219e9:	89 18                	mov    DWORD PTR [eax],ebx
c00219eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ef:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219f2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219f5:	31 c0                	xor    eax,eax
c00219f7:	eb 05                	jmp    c00219fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00219f9:	b8 04 00 00 00       	mov    eax,0x4
c00219fe:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a04:	5b                   	pop    ebx
c0021a05:	5e                   	pop    esi
c0021a06:	5f                   	pop    edi
c0021a07:	5d                   	pop    ebp
c0021a08:	c3                   	ret    
c0021a09:	90                   	nop

c0021a0a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a0a:	55                   	push   ebp
c0021a0b:	57                   	push   edi
c0021a0c:	56                   	push   esi
c0021a0d:	53                   	push   ebx
c0021a0e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a14:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021a1b:	85 ed                	test   ebp,ebp
c0021a1d:	0f 84 51 02 00 00    	je     c0021c74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a23:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a2b:	0f 84 43 02 00 00    	je     c0021c74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a34:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021a37:	75 0a                	jne    c0021a43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a39:	b8 07 00 00 00       	mov    eax,0x7
c0021a3e:	e9 36 02 00 00       	jmp    c0021c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a43:	50                   	push   eax
c0021a44:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a48:	50                   	push   eax
c0021a49:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a50:	53                   	push   ebx
c0021a51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a54:	c1 e0 0b             	shl    eax,0xb
c0021a57:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021a5a:	c1 e8 0b             	shr    eax,0xb
c0021a5d:	50                   	push   eax
c0021a5e:	e8 f8 fc ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a66:	83 c4 10             	add    esp,0x10
c0021a69:	89 c1                	mov    ecx,eax
c0021a6b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021a6e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a74:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a77:	84 db                	test   bl,bl
c0021a79:	0f 85 8b 00 00 00    	jne    c0021b0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021a7f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021a85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a88:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021a8e:	29 c6                	sub    esi,eax
c0021a90:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021a94:	89 f3                	mov    ebx,esi
c0021a96:	89 f1                	mov    ecx,esi
c0021a98:	c1 fb 1f             	sar    ebx,0x1f
c0021a9b:	01 f0                	add    eax,esi
c0021a9d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021aa0:	11 da                	adc    edx,ebx
c0021aa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0021aa5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aa9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021aac:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021aaf:	89 d8                	mov    eax,ebx
c0021ab1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021ab5:	ba 00 00 00 00       	mov    edx,0x0
c0021aba:	19 f8                	sbb    eax,edi
c0021abc:	b8 00 00 00 00       	mov    eax,0x0
c0021ac1:	73 08                	jae    c0021acb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021ac3:	89 f0                	mov    eax,esi
c0021ac5:	89 fa                	mov    edx,edi
c0021ac7:	29 c8                	sub    eax,ecx
c0021ac9:	19 da                	sbb    edx,ebx
c0021acb:	89 d7                	mov    edi,edx
c0021acd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021ad0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021ad3:	09 c7                	or     edi,eax
c0021ad5:	0f 84 5e ff ff ff    	je     c0021a39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021adb:	57                   	push   edi
c0021adc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ae0:	50                   	push   eax
c0021ae1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ae8:	53                   	push   ebx
c0021ae9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021aec:	c1 e0 0b             	shl    eax,0xb
c0021aef:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021af3:	c1 e8 0b             	shr    eax,0xb
c0021af6:	50                   	push   eax
c0021af7:	e8 5f fc ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021afc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	25 ff 07 00 00       	and    eax,0x7ff
c0021b07:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b0a:	31 ff                	xor    edi,edi
c0021b0c:	56                   	push   esi
c0021b0d:	6a 28                	push   0x28
c0021b0f:	6a 00                	push   0x0
c0021b11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b15:	50                   	push   eax
c0021b16:	e8 35 ec fd ff       	call   c0000750 <memset>
c0021b1b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b1e:	25 ff 07 00 00       	and    eax,0x7ff
c0021b23:	89 c6                	mov    esi,eax
c0021b25:	83 c6 21             	add    esi,0x21
c0021b28:	83 d7 00             	adc    edi,0x0
c0021b2b:	83 c4 10             	add    esp,0x10
c0021b2e:	31 c9                	xor    ecx,ecx
c0021b30:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021b37:	83 f9 28             	cmp    ecx,0x28
c0021b3a:	88 04 24             	mov    BYTE PTR [esp],al
c0021b3d:	0f 94 c2             	sete   dl
c0021b40:	88 d0                	mov    al,dl
c0021b42:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b47:	39 f2                	cmp    edx,esi
c0021b49:	ba 00 00 00 00       	mov    edx,0x0
c0021b4e:	19 fa                	sbb    edx,edi
c0021b50:	0f 92 c2             	setb   dl
c0021b53:	09 c2                	or     edx,eax
c0021b55:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b59:	0f 94 c0             	sete   al
c0021b5c:	08 d0                	or     al,dl
c0021b5e:	75 16                	jne    c0021b76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b60:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b64:	74 10                	je     c0021b76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b66:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b69:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b6d:	41                   	inc    ecx
c0021b6e:	83 c6 01             	add    esi,0x1
c0021b71:	83 d7 00             	adc    edi,0x0
c0021b74:	eb ba                	jmp    c0021b30 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021b76:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b7d:	83 ec 0c             	sub    esp,0xc
c0021b80:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021b84:	56                   	push   esi
c0021b85:	e8 e2 eb fd ff       	call   c000076c <strlen>
c0021b8a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021b91:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b95:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ba0:	5a                   	pop    edx
c0021ba1:	25 ff 07 00 00       	and    eax,0x7ff
c0021ba6:	59                   	pop    ecx
c0021ba7:	01 f8                	add    eax,edi
c0021ba9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021baf:	83 e0 02             	and    eax,0x2
c0021bb2:	3c 01                	cmp    al,0x1
c0021bb4:	19 c0                	sbb    eax,eax
c0021bb6:	83 c0 02             	add    eax,0x2
c0021bb9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bbd:	56                   	push   esi
c0021bbe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bc2:	50                   	push   eax
c0021bc3:	e8 44 ec fd ff       	call   c000080c <strcpy>
c0021bc8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bcc:	83 c4 10             	add    esp,0x10
c0021bcf:	84 c0                	test   al,al
c0021bd1:	75 21                	jne    c0021bf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021bd3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bdb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021be3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021beb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bf2:	eb 28                	jmp    c0021c1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021bf4:	fe c8                	dec    al
c0021bf6:	75 24                	jne    c0021c1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021bf8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c00:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c08:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c10:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c17:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c1c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021c20:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021c27:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021c2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c30:	0f b6 f3             	movzx  esi,bl
c0021c33:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021c3a:	31 db                	xor    ebx,ebx
c0021c3c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c42:	89 df                	mov    edi,ebx
c0021c44:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c4a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021c4d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c50:	39 c6                	cmp    esi,eax
c0021c52:	19 d7                	sbb    edi,edx
c0021c54:	72 10                	jb     c0021c66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021c56:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021c5d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021c64:	eb 0a                	jmp    c0021c70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021c66:	29 f0                	sub    eax,esi
c0021c68:	19 da                	sbb    edx,ebx
c0021c6a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021c6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021c70:	31 c0                	xor    eax,eax
c0021c72:	eb 05                	jmp    c0021c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c74:	b8 04 00 00 00       	mov    eax,0x4
c0021c79:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c7f:	5b                   	pop    ebx
c0021c80:	5e                   	pop    esi
c0021c81:	5f                   	pop    edi
c0021c82:	5d                   	pop    ebp
c0021c83:	c3                   	ret    

c0021c84 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c84:	57                   	push   edi
c0021c85:	56                   	push   esi
c0021c86:	81 ec 38 08 00 00    	sub    esp,0x838
c0021c8c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c94:	50                   	push   eax
c0021c95:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c99:	50                   	push   eax
c0021c9a:	6a 10                	push   0x10
c0021c9c:	e8 ba fa ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021ca8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021cac:	b9 22 00 00 00       	mov    ecx,0x22
c0021cb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021cb3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cbe:	89 10                	mov    DWORD PTR [eax],edx
c0021cc0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ccb:	89 10                	mov    DWORD PTR [eax],edx
c0021ccd:	81 c4 44 08 00 00    	add    esp,0x844
c0021cd3:	b0 01                	mov    al,0x1
c0021cd5:	5e                   	pop    esi
c0021cd6:	5f                   	pop    edi
c0021cd7:	c3                   	ret    

c0021cd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cd8:	55                   	push   ebp
c0021cd9:	57                   	push   edi
c0021cda:	56                   	push   esi
c0021cdb:	53                   	push   ebx
c0021cdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ce2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ce9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cf4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cf8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d00:	75 03                	jne    c0021d05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d02:	83 c3 02             	add    ebx,0x2
c0021d05:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d08:	75 03                	jne    c0021d0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d0a:	43                   	inc    ebx
c0021d0b:	eb f8                	jmp    c0021d05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d0d:	51                   	push   ecx
c0021d0e:	68 00 01 00 00       	push   0x100
c0021d13:	6a 00                	push   0x0
c0021d15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d19:	50                   	push   eax
c0021d1a:	e8 31 ea fd ff       	call   c0000750 <memset>
c0021d1f:	83 c4 10             	add    esp,0x10
c0021d22:	31 d2                	xor    edx,edx
c0021d24:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d27:	84 c0                	test   al,al
c0021d29:	74 21                	je     c0021d4c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d2b:	3c 2f                	cmp    al,0x2f
c0021d2d:	75 0b                	jne    c0021d3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d2f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d33:	bd 01 00 00 00       	mov    ebp,0x1
c0021d38:	eb 14                	jmp    c0021d4e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d3a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d3d:	80 f9 19             	cmp    cl,0x19
c0021d40:	77 03                	ja     c0021d45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d42:	83 e8 20             	sub    eax,0x20
c0021d45:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d49:	42                   	inc    edx
c0021d4a:	eb d8                	jmp    c0021d24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d4c:	31 ed                	xor    ebp,ebp
c0021d4e:	83 ec 0c             	sub    esp,0xc
c0021d51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d58:	e8 00 dc fe ff       	call   c000f95d <malloc>
c0021d5d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d64:	89 c6                	mov    esi,eax
c0021d66:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d6c:	c1 ef 0b             	shr    edi,0xb
c0021d6f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d76:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d7a:	83 c4 10             	add    esp,0x10
c0021d7d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d86:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d8d:	74 28                	je     c0021db7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d8f:	52                   	push   edx
c0021d90:	57                   	push   edi
c0021d91:	50                   	push   eax
c0021d92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d9d:	e8 b9 f9 ff ff       	call   c002175b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021da6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021dad:	05 00 08 00 00       	add    eax,0x800
c0021db2:	83 c4 10             	add    esp,0x10
c0021db5:	eb cb                	jmp    c0021d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021db7:	83 ec 0c             	sub    esp,0xc
c0021dba:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dbe:	57                   	push   edi
c0021dbf:	e8 a8 e9 fd ff       	call   c000076c <strlen>
c0021dc4:	50                   	push   eax
c0021dc5:	57                   	push   edi
c0021dc6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dcd:	56                   	push   esi
c0021dce:	e8 46 f9 ff ff       	call   c0021719 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dd3:	83 c4 20             	add    esp,0x20
c0021dd6:	85 c0                	test   eax,eax
c0021dd8:	75 13                	jne    c0021ded <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dda:	83 ec 0c             	sub    esp,0xc
c0021ddd:	56                   	push   esi
c0021dde:	e8 8a db fe ff       	call   c000f96d <free>
c0021de3:	83 c4 10             	add    esp,0x10
c0021de6:	31 c0                	xor    eax,eax
c0021de8:	e9 b3 00 00 00       	jmp    c0021ea0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ded:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021df1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021df5:	c1 e7 08             	shl    edi,0x8
c0021df8:	c1 e2 10             	shl    edx,0x10
c0021dfb:	09 d7                	or     edi,edx
c0021dfd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e01:	09 d7                	or     edi,edx
c0021e03:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e07:	c1 e2 18             	shl    edx,0x18
c0021e0a:	09 d7                	or     edi,edx
c0021e0c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e10:	89 d1                	mov    ecx,edx
c0021e12:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e16:	c1 e1 08             	shl    ecx,0x8
c0021e19:	c1 e2 10             	shl    edx,0x10
c0021e1c:	09 ca                	or     edx,ecx
c0021e1e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e22:	09 ca                	or     edx,ecx
c0021e24:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e28:	c1 e1 18             	shl    ecx,0x18
c0021e2b:	09 ca                	or     edx,ecx
c0021e2d:	89 e9                	mov    ecx,ebp
c0021e2f:	84 c9                	test   cl,cl
c0021e31:	74 3c                	je     c0021e6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e37:	83 ec 0c             	sub    esp,0xc
c0021e3a:	56                   	push   esi
c0021e3b:	e8 2d db fe ff       	call   c000f96d <free>
c0021e40:	83 c4 0c             	add    esp,0xc
c0021e43:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e4a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e4f:	50                   	push   eax
c0021e50:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e57:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e62:	52                   	push   edx
c0021e63:	57                   	push   edi
c0021e64:	53                   	push   ebx
c0021e65:	e8 6e fe ff ff       	call   c0021cd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e6a:	83 c4 20             	add    esp,0x20
c0021e6d:	eb 31                	jmp    c0021ea0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e6f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e72:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e79:	d0 e8                	shr    al,1
c0021e7b:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e7d:	83 e0 01             	and    eax,0x1
c0021e80:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e87:	83 ec 0c             	sub    esp,0xc
c0021e8a:	89 13                	mov    DWORD PTR [ebx],edx
c0021e8c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e93:	89 03                	mov    DWORD PTR [ebx],eax
c0021e95:	56                   	push   esi
c0021e96:	e8 d2 da fe ff       	call   c000f96d <free>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	b0 01                	mov    al,0x1
c0021ea0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ea6:	5b                   	pop    ebx
c0021ea7:	5e                   	pop    esi
c0021ea8:	5f                   	pop    edi
c0021ea9:	5d                   	pop    ebp
c0021eaa:	c3                   	ret    

c0021eab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021eab:	55                   	push   ebp
c0021eac:	57                   	push   edi
c0021ead:	56                   	push   esi
c0021eae:	53                   	push   ebx
c0021eaf:	83 ec 20             	sub    esp,0x20
c0021eb2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eb6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021eba:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ebe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ec6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ece:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ed3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ed9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021edf:	57                   	push   edi
c0021ee0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ee4:	50                   	push   eax
c0021ee5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ee9:	50                   	push   eax
c0021eea:	e8 95 fd ff ff       	call   c0021c84 <readRoot(unsigned int*, unsigned int*, char)>
c0021eef:	5a                   	pop    edx
c0021ef0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ef4:	e8 73 e8 fd ff       	call   c000076c <strlen>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	83 f8 03             	cmp    eax,0x3
c0021eff:	77 17                	ja     c0021f18 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f05:	89 03                	mov    DWORD PTR [ebx],eax
c0021f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f0b:	89 06                	mov    DWORD PTR [esi],eax
c0021f0d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f14:	b0 01                	mov    al,0x1
c0021f16:	eb 19                	jmp    c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f18:	50                   	push   eax
c0021f19:	55                   	push   ebp
c0021f1a:	57                   	push   edi
c0021f1b:	56                   	push   esi
c0021f1c:	53                   	push   ebx
c0021f1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f29:	e8 aa fd ff ff       	call   c0021cd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f2e:	83 c4 20             	add    esp,0x20
c0021f31:	83 c4 1c             	add    esp,0x1c
c0021f34:	5b                   	pop    ebx
c0021f35:	5e                   	pop    esi
c0021f36:	5f                   	pop    edi
c0021f37:	5d                   	pop    ebp
c0021f38:	c3                   	ret    
c0021f39:	90                   	nop

c0021f3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f3a:	57                   	push   edi
c0021f3b:	56                   	push   esi
c0021f3c:	53                   	push   ebx
c0021f3d:	83 ec 10             	sub    esp,0x10
c0021f40:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f44:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f48:	85 ff                	test   edi,edi
c0021f4a:	0f 84 8b 00 00 00    	je     c0021fdb <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021f50:	85 f6                	test   esi,esi
c0021f52:	0f 84 83 00 00 00    	je     c0021fdb <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021f58:	b8 03 00 00 00       	mov    eax,0x3
c0021f5d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f62:	75 7c                	jne    c0021fe0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021f64:	83 ec 0c             	sub    esp,0xc
c0021f67:	6a 1c                	push   0x1c
c0021f69:	e8 ef d9 fe ff       	call   c000f95d <malloc>
c0021f6e:	89 07                	mov    DWORD PTR [edi],eax
c0021f70:	89 c3                	mov    ebx,eax
c0021f72:	58                   	pop    eax
c0021f73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f77:	50                   	push   eax
c0021f78:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f7b:	50                   	push   eax
c0021f7c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f80:	50                   	push   eax
c0021f81:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f85:	50                   	push   eax
c0021f86:	56                   	push   esi
c0021f87:	e8 1f ff ff ff       	call   c0021eab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f8c:	83 c4 20             	add    esp,0x20
c0021f8f:	84 c0                	test   al,al
c0021f91:	74 07                	je     c0021f9a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021f93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f98:	74 0b                	je     c0021fa5 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021f9a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f9e:	b8 01 00 00 00       	mov    eax,0x1
c0021fa3:	eb 3b                	jmp    c0021fe0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fad:	89 03                	mov    DWORD PTR [ebx],eax
c0021faf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fc1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fc8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fcb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fd2:	8a 06                	mov    al,BYTE PTR [esi]
c0021fd4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fd7:	31 c0                	xor    eax,eax
c0021fd9:	eb 05                	jmp    c0021fe0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fdb:	b8 04 00 00 00       	mov    eax,0x4
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	5b                   	pop    ebx
c0021fe4:	5e                   	pop    esi
c0021fe5:	5f                   	pop    edi
c0021fe6:	c3                   	ret    
c0021fe7:	90                   	nop

c0021fe8 <ISO9660::exists(char const*)>:
c0021fe8:	83 ec 28             	sub    esp,0x28
c0021feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fef:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ff3:	52                   	push   edx
c0021ff4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ff7:	52                   	push   edx
c0021ff8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ffc:	52                   	push   edx
c0021ffd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022001:	52                   	push   edx
c0022002:	50                   	push   eax
c0022003:	e8 a3 fe ff ff       	call   c0021eab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022008:	83 c4 3c             	add    esp,0x3c
c002200b:	c3                   	ret    

c002200c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002200c:	56                   	push   esi
c002200d:	53                   	push   ebx
c002200e:	83 ec 14             	sub    esp,0x14
c0022011:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022015:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022019:	85 db                	test   ebx,ebx
c002201b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002201f:	0f 94 c2             	sete   dl
c0022022:	85 f6                	test   esi,esi
c0022024:	0f 94 c0             	sete   al
c0022027:	08 c2                	or     dl,al
c0022029:	75 68                	jne    c0022093 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002202b:	85 c9                	test   ecx,ecx
c002202d:	74 64                	je     c0022093 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002202f:	83 ec 0c             	sub    esp,0xc
c0022032:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022035:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022039:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002203f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022046:	50                   	push   eax
c0022047:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002204a:	50                   	push   eax
c002204b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002204f:	50                   	push   eax
c0022050:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022054:	50                   	push   eax
c0022055:	51                   	push   ecx
c0022056:	e8 50 fe ff ff       	call   c0021eab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002205b:	83 c4 20             	add    esp,0x20
c002205e:	ba 01 00 00 00       	mov    edx,0x1
c0022063:	84 c0                	test   al,al
c0022065:	74 31                	je     c0022098 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022067:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002206b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022072:	89 03                	mov    DWORD PTR [ebx],eax
c0022074:	ba 00 00 00 00       	mov    edx,0x0
c0022079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002207d:	85 c0                	test   eax,eax
c002207f:	0f 95 06             	setne  BYTE PTR [esi]
c0022082:	74 14                	je     c0022098 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022084:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002208a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022091:	eb 05                	jmp    c0022098 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022093:	ba 04 00 00 00       	mov    edx,0x4
c0022098:	83 c4 14             	add    esp,0x14
c002209b:	89 d0                	mov    eax,edx
c002209d:	5b                   	pop    ebx
c002209e:	5e                   	pop    esi
c002209f:	c3                   	ret    

c00220a0 <ISO9660::openDir(char const*, void**)>:
c00220a0:	57                   	push   edi
c00220a1:	56                   	push   esi
c00220a2:	53                   	push   ebx
c00220a3:	83 ec 10             	sub    esp,0x10
c00220a6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220aa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220ae:	85 ff                	test   edi,edi
c00220b0:	74 7b                	je     c002212d <ISO9660::openDir(char const*, void**)+0x8d>
c00220b2:	85 f6                	test   esi,esi
c00220b4:	74 77                	je     c002212d <ISO9660::openDir(char const*, void**)+0x8d>
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	6a 1c                	push   0x1c
c00220bb:	e8 9d d8 fe ff       	call   c000f95d <malloc>
c00220c0:	89 07                	mov    DWORD PTR [edi],eax
c00220c2:	89 c3                	mov    ebx,eax
c00220c4:	58                   	pop    eax
c00220c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220c9:	50                   	push   eax
c00220ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220cd:	50                   	push   eax
c00220ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d2:	50                   	push   eax
c00220d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d7:	50                   	push   eax
c00220d8:	56                   	push   esi
c00220d9:	e8 cd fd ff ff       	call   c0021eab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220de:	83 c4 20             	add    esp,0x20
c00220e1:	84 c0                	test   al,al
c00220e3:	74 07                	je     c00220ec <ISO9660::openDir(char const*, void**)+0x4c>
c00220e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220ea:	75 0b                	jne    c00220f7 <ISO9660::openDir(char const*, void**)+0x57>
c00220ec:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220f0:	b8 01 00 00 00       	mov    eax,0x1
c00220f5:	eb 3b                	jmp    c0022132 <ISO9660::openDir(char const*, void**)+0x92>
c00220f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220fb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220ff:	89 03                	mov    DWORD PTR [ebx],eax
c0022101:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002210c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022113:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002211a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002211d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022124:	8a 06                	mov    al,BYTE PTR [esi]
c0022126:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022129:	31 c0                	xor    eax,eax
c002212b:	eb 05                	jmp    c0022132 <ISO9660::openDir(char const*, void**)+0x92>
c002212d:	b8 04 00 00 00       	mov    eax,0x4
c0022132:	83 c4 10             	add    esp,0x10
c0022135:	5b                   	pop    ebx
c0022136:	5e                   	pop    esi
c0022137:	5f                   	pop    edi
c0022138:	c3                   	ret    
c0022139:	90                   	nop

c002213a <ISO9660::ISO9660()>:
c002213a:	83 ec 0c             	sub    esp,0xc
c002213d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022141:	83 ec 0c             	sub    esp,0xc
c0022144:	50                   	push   eax
c0022145:	e8 76 0b ff ff       	call   c0012cc0 <Filesystem::Filesystem()>
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	ba 00 cb 02 c0       	mov    edx,0xc002cb00
c0022152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022156:	89 10                	mov    DWORD PTR [eax],edx
c0022158:	90                   	nop
c0022159:	83 c4 0c             	add    esp,0xc
c002215c:	c3                   	ret    
c002215d:	90                   	nop

c002215e <SoundChannel::SoundChannel(int, int, int, int)>:
c002215e:	83 ec 1c             	sub    esp,0x1c
c0022161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022165:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022169:	89 10                	mov    DWORD PTR [eax],edx
c002216b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022173:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002217e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022181:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022186:	75 23                	jne    c00221ab <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022188:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002218c:	8b 10                	mov    edx,DWORD PTR [eax]
c002218e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022195:	0f af c2             	imul   eax,edx
c0022198:	85 c0                	test   eax,eax
c002219a:	79 03                	jns    c002219f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c002219c:	83 c0 03             	add    eax,0x3
c002219f:	c1 f8 02             	sar    eax,0x2
c00221a2:	05 a0 0f 00 00       	add    eax,0xfa0
c00221a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221b3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00221b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ba:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00221c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00221cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221d3:	c1 e0 02             	shl    eax,0x2
c00221d6:	83 ec 0c             	sub    esp,0xc
c00221d9:	50                   	push   eax
c00221da:	e8 7e d7 fe ff       	call   c000f95d <malloc>
c00221df:	83 c4 10             	add    esp,0x10
c00221e2:	89 c2                	mov    edx,eax
c00221e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221eb:	83 ec 04             	sub    esp,0x4
c00221ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221f2:	50                   	push   eax
c00221f3:	6a 01                	push   0x1
c00221f5:	6a 04                	push   0x4
c00221f7:	e8 9f 6b fe ff       	call   c0008d9b <src_new>
c00221fc:	83 c4 10             	add    esp,0x10
c00221ff:	89 c2                	mov    edx,eax
c0022201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022205:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220c:	85 c0                	test   eax,eax
c002220e:	74 10                	je     c0022220 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	68 60 cb 02 c0       	push   0xc002cb60
c0022218:	e8 36 81 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c002221d:	83 c4 10             	add    esp,0x10
c0022220:	a0 e0 08 03 c0       	mov    al,ds:0xc00308e0
c0022225:	83 f0 01             	xor    eax,0x1
c0022228:	84 c0                	test   al,al
c002222a:	74 57                	je     c0022283 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c002222c:	a1 7c cb 02 c0       	mov    eax,ds:0xc002cb7c
c0022231:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022235:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002223d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022245:	7f 35                	jg     c002227c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022247:	83 ec 0c             	sub    esp,0xc
c002224a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002224e:	e8 5c 54 00 00       	call   c00276af <__floatsisf>
c0022253:	83 c4 10             	add    esp,0x10
c0022256:	8b 15 7c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb7c
c002225c:	83 ec 08             	sub    esp,0x8
c002225f:	52                   	push   edx
c0022260:	50                   	push   eax
c0022261:	e8 5b 50 00 00       	call   c00272c1 <__mulsf3>
c0022266:	83 c4 10             	add    esp,0x10
c0022269:	89 c2                	mov    edx,eax
c002226b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002226f:	89 14 85 e0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb20],edx
c0022276:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002227a:	eb c1                	jmp    c002223d <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c002227c:	c6 05 e0 08 03 c0 01 	mov    BYTE PTR ds:0xc00308e0,0x1
c0022283:	90                   	nop
c0022284:	83 c4 1c             	add    esp,0x1c
c0022287:	c3                   	ret    

c0022288 <SoundChannel::~SoundChannel()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022292:	83 ec 0c             	sub    esp,0xc
c0022295:	50                   	push   eax
c0022296:	e8 d2 d6 fe ff       	call   c000f96d <free>
c002229b:	83 c4 10             	add    esp,0x10
c002229e:	90                   	nop
c002229f:	83 c4 0c             	add    esp,0xc
c00222a2:	c3                   	ret    
c00222a3:	90                   	nop

c00222a4 <SoundChannel::getSampleRate()>:
c00222a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00222aa:	c3                   	ret    
c00222ab:	90                   	nop

c00222ac <SoundChannel::getBits()>:
c00222ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b3:	c3                   	ret    

c00222b4 <SoundChannel::getBufferUsed()>:
c00222b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00222bb:	c3                   	ret    

c00222bc <SoundChannel::getBufferSize()>:
c00222bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c3:	c3                   	ret    

c00222c4 <SoundChannel::unbuffer(float*, int, int)>:
c00222c4:	56                   	push   esi
c00222c5:	53                   	push   ebx
c00222c6:	83 ec 40             	sub    esp,0x40
c00222c9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00222cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00222d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00222d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00222db:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00222df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00222e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00222e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222ef:	e8 bb 53 00 00       	call   c00276af <__floatsisf>
c00222f4:	5a                   	pop    edx
c00222f5:	89 c6                	mov    esi,eax
c00222f7:	ff 33                	push   DWORD PTR [ebx]
c00222f9:	e8 b1 53 00 00       	call   c00276af <__floatsisf>
c00222fe:	59                   	pop    ecx
c00222ff:	5a                   	pop    edx
c0022300:	50                   	push   eax
c0022301:	56                   	push   esi
c0022302:	e8 7d 51 00 00       	call   c0027484 <__divsf3>
c0022307:	89 04 24             	mov    DWORD PTR [esp],eax
c002230a:	e8 70 66 00 00       	call   c002897f <__extendsfdf2>
c002230f:	59                   	pop    ecx
c0022310:	5e                   	pop    esi
c0022311:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022315:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022319:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022321:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022325:	50                   	push   eax
c0022326:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022329:	e8 62 66 fe ff       	call   c0008990 <src_process>
c002232e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022332:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022335:	83 c4 0c             	add    esp,0xc
c0022338:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002233b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002233e:	29 d0                	sub    eax,edx
c0022340:	c1 e0 02             	shl    eax,0x2
c0022343:	50                   	push   eax
c0022344:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022347:	50                   	push   eax
c0022348:	51                   	push   ecx
c0022349:	e8 3a e3 fd ff       	call   c0000688 <memmove>
c002234e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022352:	83 c4 44             	add    esp,0x44
c0022355:	5b                   	pop    ebx
c0022356:	5e                   	pop    esi
c0022357:	c3                   	ret    

c0022358 <SoundChannel::buffer16(short*, int)>:
c0022358:	55                   	push   ebp
c0022359:	57                   	push   edi
c002235a:	56                   	push   esi
c002235b:	53                   	push   ebx
c002235c:	83 ec 1c             	sub    esp,0x1c
c002235f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022363:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022366:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022369:	0f 84 d2 00 00 00    	je     c0022441 <SoundChannel::buffer16(short*, int)+0xe9>
c002236f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022373:	85 ed                	test   ebp,ebp
c0022375:	0f 8e c6 00 00 00    	jle    c0022441 <SoundChannel::buffer16(short*, int)+0xe9>
c002237b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002237f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022384:	83 ec 0c             	sub    esp,0xc
c0022387:	0f bf 00             	movsx  eax,WORD PTR [eax]
c002238a:	50                   	push   eax
c002238b:	e8 1f 53 00 00       	call   c00276af <__floatsisf>
c0022390:	59                   	pop    ecx
c0022391:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022394:	5f                   	pop    edi
c0022395:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022398:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002239b:	55                   	push   ebp
c002239c:	50                   	push   eax
c002239d:	e8 1f 4f 00 00       	call   c00272c1 <__mulsf3>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223a8:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223ab:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223ae:	0f 84 99 00 00 00    	je     c002244d <SoundChannel::buffer16(short*, int)+0xf5>
c00223b4:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00223b9:	74 78                	je     c0022433 <SoundChannel::buffer16(short*, int)+0xdb>
c00223bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223bf:	83 ec 0c             	sub    esp,0xc
c00223c2:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00223c6:	50                   	push   eax
c00223c7:	e8 e3 52 00 00       	call   c00276af <__floatsisf>
c00223cc:	5f                   	pop    edi
c00223cd:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223d0:	5a                   	pop    edx
c00223d1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223d4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223d7:	55                   	push   ebp
c00223d8:	50                   	push   eax
c00223d9:	e8 e3 4e 00 00       	call   c00272c1 <__mulsf3>
c00223de:	83 c4 10             	add    esp,0x10
c00223e1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223e4:	be 02 00 00 00       	mov    esi,0x2
c00223e9:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00223ec:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00223ef:	74 46                	je     c0022437 <SoundChannel::buffer16(short*, int)+0xdf>
c00223f1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00223f5:	eb 36                	jmp    c002242d <SoundChannel::buffer16(short*, int)+0xd5>
c00223f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223fb:	83 ec 0c             	sub    esp,0xc
c00223fe:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022402:	46                   	inc    esi
c0022403:	50                   	push   eax
c0022404:	e8 a6 52 00 00       	call   c00276af <__floatsisf>
c0022409:	5a                   	pop    edx
c002240a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c002240d:	59                   	pop    ecx
c002240e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022411:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022418:	50                   	push   eax
c0022419:	e8 a3 4e 00 00       	call   c00272c1 <__mulsf3>
c002241e:	83 c4 10             	add    esp,0x10
c0022421:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022425:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022428:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002242b:	74 0a                	je     c0022437 <SoundChannel::buffer16(short*, int)+0xdf>
c002242d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022431:	75 c4                	jne    c00223f7 <SoundChannel::buffer16(short*, int)+0x9f>
c0022433:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022437:	83 c4 1c             	add    esp,0x1c
c002243a:	89 f0                	mov    eax,esi
c002243c:	5b                   	pop    ebx
c002243d:	5e                   	pop    esi
c002243e:	5f                   	pop    edi
c002243f:	5d                   	pop    ebp
c0022440:	c3                   	ret    
c0022441:	83 c4 1c             	add    esp,0x1c
c0022444:	31 f6                	xor    esi,esi
c0022446:	5b                   	pop    ebx
c0022447:	89 f0                	mov    eax,esi
c0022449:	5e                   	pop    esi
c002244a:	5f                   	pop    edi
c002244b:	5d                   	pop    ebp
c002244c:	c3                   	ret    
c002244d:	be 01 00 00 00       	mov    esi,0x1
c0022452:	eb e3                	jmp    c0022437 <SoundChannel::buffer16(short*, int)+0xdf>

c0022454 <SoundChannel::buffer8(unsigned char*, int)>:
c0022454:	55                   	push   ebp
c0022455:	57                   	push   edi
c0022456:	56                   	push   esi
c0022457:	53                   	push   ebx
c0022458:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002245c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022460:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022463:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022467:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002246a:	74 7a                	je     c00224e6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002246c:	85 ff                	test   edi,edi
c002246e:	7e 76                	jle    c00224e6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022470:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022474:	8d 70 01             	lea    esi,[eax+0x1]
c0022477:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002247a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002247d:	8b 1c 9d e0 04 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfb20]
c0022484:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022487:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002248a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002248d:	74 5e                	je     c00224ed <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002248f:	83 ff 01             	cmp    edi,0x1
c0022492:	74 4b                	je     c00224df <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022494:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022498:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002249b:	8d 70 01             	lea    esi,[eax+0x1]
c002249e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224a1:	8b 1c 9d e0 04 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfb20]
c00224a8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224ab:	b8 02 00 00 00       	mov    eax,0x2
c00224b0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224b3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224b6:	75 23                	jne    c00224db <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224b8:	eb 27                	jmp    c00224e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224ba:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224bf:	8d 71 01             	lea    esi,[ecx+0x1]
c00224c2:	40                   	inc    eax
c00224c3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224c9:	8b 1c 9d e0 04 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfb20]
c00224d0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224d3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224d6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d9:	74 06                	je     c00224e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224db:	39 c7                	cmp    edi,eax
c00224dd:	75 db                	jne    c00224ba <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224df:	89 f8                	mov    eax,edi
c00224e1:	5b                   	pop    ebx
c00224e2:	5e                   	pop    esi
c00224e3:	5f                   	pop    edi
c00224e4:	5d                   	pop    ebp
c00224e5:	c3                   	ret    
c00224e6:	5b                   	pop    ebx
c00224e7:	31 c0                	xor    eax,eax
c00224e9:	5e                   	pop    esi
c00224ea:	5f                   	pop    edi
c00224eb:	5d                   	pop    ebp
c00224ec:	c3                   	ret    
c00224ed:	b8 01 00 00 00       	mov    eax,0x1
c00224f2:	eb ed                	jmp    c00224e1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224f4 <SoundDevice::SoundDevice(char const*)>:
c00224f4:	83 ec 1c             	sub    esp,0x1c
c00224f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224fb:	83 ec 08             	sub    esp,0x8
c00224fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022502:	50                   	push   eax
c0022503:	e8 ea 1a ff ff       	call   c0013ff2 <Device::Device(char const*)>
c0022508:	83 c4 10             	add    esp,0x10
c002250b:	ba 88 cb 02 c0       	mov    edx,0xc002cb88
c0022510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022514:	89 10                	mov    DWORD PTR [eax],edx
c0022516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022528:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022532:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002253a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002253f:	7f 19                	jg     c002255a <SoundDevice::SoundDevice(char const*)+0x66>
c0022541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022545:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022549:	83 c2 54             	add    edx,0x54
c002254c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022554:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022558:	eb e0                	jmp    c002253a <SoundDevice::SoundDevice(char const*)+0x46>
c002255a:	90                   	nop
c002255b:	83 c4 1c             	add    esp,0x1c
c002255e:	c3                   	ret    
c002255f:	90                   	nop

c0022560 <SoundDevice::~SoundDevice()>:
c0022560:	53                   	push   ebx
c0022561:	83 ec 18             	sub    esp,0x18
c0022564:	ba 88 cb 02 c0       	mov    edx,0xc002cb88
c0022569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256d:	89 10                	mov    DWORD PTR [eax],edx
c002256f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022577:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002257c:	7f 46                	jg     c00225c4 <SoundDevice::~SoundDevice()+0x64>
c002257e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022586:	83 c2 54             	add    edx,0x54
c0022589:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002258d:	85 c0                	test   eax,eax
c002258f:	74 2d                	je     c00225be <SoundDevice::~SoundDevice()+0x5e>
c0022591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022595:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022599:	83 c2 54             	add    edx,0x54
c002259c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225a0:	85 db                	test   ebx,ebx
c00225a2:	74 1a                	je     c00225be <SoundDevice::~SoundDevice()+0x5e>
c00225a4:	83 ec 0c             	sub    esp,0xc
c00225a7:	53                   	push   ebx
c00225a8:	e8 db fc ff ff       	call   c0022288 <SoundChannel::~SoundChannel()>
c00225ad:	83 c4 10             	add    esp,0x10
c00225b0:	83 ec 08             	sub    esp,0x8
c00225b3:	6a 2c                	push   0x2c
c00225b5:	53                   	push   ebx
c00225b6:	e8 22 03 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00225bb:	83 c4 10             	add    esp,0x10
c00225be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225c2:	eb b3                	jmp    c0022577 <SoundDevice::~SoundDevice()+0x17>
c00225c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c8:	83 ec 0c             	sub    esp,0xc
c00225cb:	50                   	push   eax
c00225cc:	e8 eb 16 ff ff       	call   c0013cbc <Device::~Device()>
c00225d1:	83 c4 10             	add    esp,0x10
c00225d4:	90                   	nop
c00225d5:	83 c4 18             	add    esp,0x18
c00225d8:	5b                   	pop    ebx
c00225d9:	c3                   	ret    

c00225da <SoundDevice::~SoundDevice()>:
c00225da:	83 ec 0c             	sub    esp,0xc
c00225dd:	83 ec 0c             	sub    esp,0xc
c00225e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e4:	e8 77 ff ff ff       	call   c0022560 <SoundDevice::~SoundDevice()>
c00225e9:	83 c4 10             	add    esp,0x10
c00225ec:	83 ec 08             	sub    esp,0x8
c00225ef:	68 e4 01 00 00       	push   0x1e4
c00225f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f8:	e8 e0 02 ff ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	83 c4 0c             	add    esp,0xc
c0022603:	c3                   	ret    

c0022604 <SoundDevice::getFreeChannelNum()>:
c0022604:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022608:	31 c0                	xor    eax,eax
c002260a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022612:	74 09                	je     c002261d <SoundDevice::getFreeChannelNum()+0x19>
c0022614:	40                   	inc    eax
c0022615:	83 f8 20             	cmp    eax,0x20
c0022618:	75 f0                	jne    c002260a <SoundDevice::getFreeChannelNum()+0x6>
c002261a:	83 c8 ff             	or     eax,0xffffffff
c002261d:	c3                   	ret    

c002261e <SoundDevice::addChannel(SoundChannel*)>:
c002261e:	56                   	push   esi
c002261f:	53                   	push   ebx
c0022620:	51                   	push   ecx
c0022621:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022625:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022629:	53                   	push   ebx
c002262a:	e8 d5 ff ff ff       	call   c0022604 <SoundDevice::getFreeChannelNum()>
c002262f:	5a                   	pop    edx
c0022630:	83 f8 ff             	cmp    eax,0xffffffff
c0022633:	74 51                	je     c0022686 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022635:	85 f6                	test   esi,esi
c0022637:	74 4d                	je     c0022686 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022639:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022640:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022647:	75 30                	jne    c0022679 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022649:	83 ec 0c             	sub    esp,0xc
c002264c:	56                   	push   esi
c002264d:	e8 52 fc ff ff       	call   c00222a4 <SoundChannel::getSampleRate()>
c0022652:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022658:	89 34 24             	mov    DWORD PTR [esp],esi
c002265b:	e8 4c fc ff ff       	call   c00222ac <SoundChannel::getBits()>
c0022660:	83 c4 0c             	add    esp,0xc
c0022663:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022669:	8b 13                	mov    edx,DWORD PTR [ebx]
c002266b:	50                   	push   eax
c002266c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022672:	53                   	push   ebx
c0022673:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022676:	83 c4 10             	add    esp,0x10
c0022679:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002267f:	b8 01 00 00 00       	mov    eax,0x1
c0022684:	eb 03                	jmp    c0022689 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022686:	83 c8 ff             	or     eax,0xffffffff
c0022689:	5a                   	pop    edx
c002268a:	5b                   	pop    ebx
c002268b:	5e                   	pop    esi
c002268c:	c3                   	ret    
c002268d:	90                   	nop

c002268e <SoundDevice::removeChannel(int)>:
c002268e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022696:	83 fa 1f             	cmp    edx,0x1f
c0022699:	77 23                	ja     c00226be <SoundDevice::removeChannel(int)+0x30>
c002269b:	8d 14 90             	lea    edx,[eax+edx*4]
c002269e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226a5:	74 17                	je     c00226be <SoundDevice::removeChannel(int)+0x30>
c00226a7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226b1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226b7:	75 05                	jne    c00226be <SoundDevice::removeChannel(int)+0x30>
c00226b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00226bb:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00226be:	c3                   	ret    
c00226bf:	90                   	nop

c00226c0 <SoundDevice::floatTo16(float*, short*, int)>:
c00226c0:	57                   	push   edi
c00226c1:	56                   	push   esi
c00226c2:	53                   	push   ebx
c00226c3:	31 db                	xor    ebx,ebx
c00226c5:	83 ec 10             	sub    esp,0x10
c00226c8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226cc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226d0:	0f 8d d0 00 00 00    	jge    c00227a6 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00226d6:	83 ec 0c             	sub    esp,0xc
c00226d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226dd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226e0:	e8 9a 62 00 00       	call   c002897f <__extendsfdf2>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226f0:	68 00 00 f0 3f       	push   0x3ff00000
c00226f5:	6a 00                	push   0x0
c00226f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ff:	e8 07 52 00 00       	call   c002790b <__adddf3>
c0022704:	83 c4 10             	add    esp,0x10
c0022707:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002270b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002270f:	68 00 00 e0 3f       	push   0x3fe00000
c0022714:	6a 00                	push   0x0
c0022716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271e:	e8 65 58 00 00       	call   c0027f88 <__muldf3>
c0022723:	83 c4 10             	add    esp,0x10
c0022726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002272a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002272e:	68 c0 ff df 40       	push   0x40dfffc0
c0022733:	6a 00                	push   0x0
c0022735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273d:	e8 46 58 00 00       	call   c0027f88 <__muldf3>
c0022742:	59                   	pop    ecx
c0022743:	5f                   	pop    edi
c0022744:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022748:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002274c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022754:	e8 02 61 00 00       	call   c002885b <__truncdfsf2>
c0022759:	5a                   	pop    edx
c002275a:	89 c7                	mov    edi,eax
c002275c:	59                   	pop    ecx
c002275d:	68 00 fe ff 46       	push   0x46fffe00
c0022762:	50                   	push   eax
c0022763:	e8 9d 51 00 00       	call   c0027905 <__gesf2>
c0022768:	83 c4 10             	add    esp,0x10
c002276b:	85 c0                	test   eax,eax
c002276d:	78 08                	js     c0022777 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002276f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022775:	eb 29                	jmp    c00227a0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022777:	50                   	push   eax
c0022778:	50                   	push   eax
c0022779:	6a 00                	push   0x0
c002277b:	57                   	push   edi
c002277c:	e8 88 51 00 00       	call   c0027909 <__lesf2>
c0022781:	83 c4 10             	add    esp,0x10
c0022784:	85 c0                	test   eax,eax
c0022786:	7f 08                	jg     c0022790 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022788:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002278e:	eb 10                	jmp    c00227a0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022790:	83 ec 0c             	sub    esp,0xc
c0022793:	57                   	push   edi
c0022794:	e8 83 62 00 00       	call   c0028a1c <lrintf>
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00227a0:	43                   	inc    ebx
c00227a1:	e9 26 ff ff ff       	jmp    c00226cc <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00227a6:	83 c4 10             	add    esp,0x10
c00227a9:	5b                   	pop    ebx
c00227aa:	5e                   	pop    esi
c00227ab:	5f                   	pop    edi
c00227ac:	c3                   	ret    
c00227ad:	90                   	nop

c00227ae <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227ae:	57                   	push   edi
c00227af:	56                   	push   esi
c00227b0:	53                   	push   ebx
c00227b1:	31 db                	xor    ebx,ebx
c00227b3:	83 ec 10             	sub    esp,0x10
c00227b6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227ba:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227be:	0f 8d cb 00 00 00    	jge    c002288f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227c4:	83 ec 0c             	sub    esp,0xc
c00227c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227cb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227ce:	e8 ac 61 00 00       	call   c002897f <__extendsfdf2>
c00227d3:	83 c4 10             	add    esp,0x10
c00227d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227de:	68 00 00 f0 3f       	push   0x3ff00000
c00227e3:	6a 00                	push   0x0
c00227e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ed:	e8 19 51 00 00       	call   c002790b <__adddf3>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227fd:	68 00 00 e0 3f       	push   0x3fe00000
c0022802:	6a 00                	push   0x0
c0022804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280c:	e8 77 57 00 00       	call   c0027f88 <__muldf3>
c0022811:	83 c4 10             	add    esp,0x10
c0022814:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022818:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002281c:	68 00 00 60 40       	push   0x40600000
c0022821:	6a 00                	push   0x0
c0022823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002282b:	e8 58 57 00 00       	call   c0027f88 <__muldf3>
c0022830:	59                   	pop    ecx
c0022831:	5f                   	pop    edi
c0022832:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022836:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002283a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002283e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022842:	e8 14 60 00 00       	call   c002885b <__truncdfsf2>
c0022847:	5a                   	pop    edx
c0022848:	89 c7                	mov    edi,eax
c002284a:	59                   	pop    ecx
c002284b:	68 00 00 fe 42       	push   0x42fe0000
c0022850:	50                   	push   eax
c0022851:	e8 af 50 00 00       	call   c0027905 <__gesf2>
c0022856:	83 c4 10             	add    esp,0x10
c0022859:	85 c0                	test   eax,eax
c002285b:	78 06                	js     c0022863 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002285d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022861:	eb 26                	jmp    c0022889 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022863:	50                   	push   eax
c0022864:	50                   	push   eax
c0022865:	6a 00                	push   0x0
c0022867:	57                   	push   edi
c0022868:	e8 9c 50 00 00       	call   c0027909 <__lesf2>
c002286d:	83 c4 10             	add    esp,0x10
c0022870:	85 c0                	test   eax,eax
c0022872:	7f 06                	jg     c002287a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022874:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022878:	eb 0f                	jmp    c0022889 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002287a:	83 ec 0c             	sub    esp,0xc
c002287d:	57                   	push   edi
c002287e:	e8 99 61 00 00       	call   c0028a1c <lrintf>
c0022883:	83 c4 10             	add    esp,0x10
c0022886:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022889:	43                   	inc    ebx
c002288a:	e9 2b ff ff ff       	jmp    c00227ba <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002288f:	83 c4 10             	add    esp,0x10
c0022892:	5b                   	pop    ebx
c0022893:	5e                   	pop    esi
c0022894:	5f                   	pop    edi
c0022895:	c3                   	ret    

c0022896 <SoundDevice::getAudio(int, float*, float*)>:
c0022896:	55                   	push   ebp
c0022897:	31 ed                	xor    ebp,ebp
c0022899:	57                   	push   edi
c002289a:	56                   	push   esi
c002289b:	31 f6                	xor    esi,esi
c002289d:	53                   	push   ebx
c002289e:	83 ec 20             	sub    esp,0x20
c00228a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228a9:	c1 e0 02             	shl    eax,0x2
c00228ac:	50                   	push   eax
c00228ad:	6a 00                	push   0x0
c00228af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228b3:	e8 98 de fd ff       	call   c0000750 <memset>
c00228b8:	83 c4 10             	add    esp,0x10
c00228bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228c3:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00228ca:	85 c9                	test   ecx,ecx
c00228cc:	74 52                	je     c0022920 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00228ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00228d2:	99                   	cdq    
c00228d3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00228d9:	50                   	push   eax
c00228da:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00228e4:	51                   	push   ecx
c00228e5:	e8 da f9 ff ff       	call   c00222c4 <SoundChannel::unbuffer(float*, int, int)>
c00228ea:	31 d2                	xor    edx,edx
c00228ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00228f0:	83 c4 10             	add    esp,0x10
c00228f3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00228f7:	7d 1e                	jge    c0022917 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00228f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00228fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022901:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022904:	89 cf                	mov    edi,ecx
c0022906:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002290c:	0f af ca             	imul   ecx,edx
c002290f:	42                   	inc    edx
c0022910:	01 e9                	add    ecx,ebp
c0022912:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022915:	eb dc                	jmp    c00228f3 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022917:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002291b:	45                   	inc    ebp
c002291c:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022920:	46                   	inc    esi
c0022921:	83 fe 20             	cmp    esi,0x20
c0022924:	75 9d                	jne    c00228c3 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002292a:	83 c4 1c             	add    esp,0x1c
c002292d:	5b                   	pop    ebx
c002292e:	5e                   	pop    esi
c002292f:	5f                   	pop    edi
c0022930:	5d                   	pop    ebp
c0022931:	c3                   	ret    

c0022932 <PCI::open(int, int, void*)>:
c0022932:	83 ec 18             	sub    esp,0x18
c0022935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022939:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002293d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022943:	8b 10                	mov    edx,DWORD PTR [eax]
c0022945:	50                   	push   eax
c0022946:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022949:	31 c0                	xor    eax,eax
c002294b:	83 c4 1c             	add    esp,0x1c
c002294e:	c3                   	ret    
c002294f:	90                   	nop

c0022950 <PCI::close(int, int, void*)>:
c0022950:	31 c0                	xor    eax,eax
c0022952:	c3                   	ret    
c0022953:	90                   	nop

c0022954 <PCI::PCI()>:
c0022954:	83 ec 0c             	sub    esp,0xc
c0022957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295b:	83 ec 08             	sub    esp,0x8
c002295e:	68 b8 cb 02 c0       	push   0xc002cbb8
c0022963:	50                   	push   eax
c0022964:	e8 ed 0c ff ff       	call   c0013656 <Bus::Bus(char const*)>
c0022969:	83 c4 10             	add    esp,0x10
c002296c:	ba a4 cc 02 c0       	mov    edx,0xc002cca4
c0022971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022975:	89 10                	mov    DWORD PTR [eax],edx
c0022977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022989:	a3 e4 08 03 c0       	mov    ds:0xc00308e4,eax
c002298e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022992:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022998:	0f b6 d0             	movzx  edx,al
c002299b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229b0:	0f b6 d0             	movzx  edx,al
c00229b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c6:	8d 50 01             	lea    edx,[eax+0x1]
c00229c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229d3:	0f b6 d0             	movzx  edx,al
c00229d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229da:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229de:	83 c9 c0             	or     ecx,0xffffffc0
c00229e1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229e5:	90                   	nop
c00229e6:	83 c4 0c             	add    esp,0xc
c00229e9:	c3                   	ret    

c00229ea <PCI::readBAR8(unsigned int, int)>:
c00229ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229f2:	f6 c2 01             	test   dl,0x1
c00229f5:	74 07                	je     c00229fe <PCI::readBAR8(unsigned int, int)+0x14>
c00229f7:	83 e2 fc             	and    edx,0xfffffffc
c00229fa:	01 c2                	add    edx,eax
c00229fc:	ec                   	in     al,dx
c00229fd:	c3                   	ret    
c00229fe:	83 e2 f0             	and    edx,0xfffffff0
c0022a01:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022a04:	c3                   	ret    
c0022a05:	90                   	nop

c0022a06 <PCI::readBAR16(unsigned int, int)>:
c0022a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a0e:	f6 c2 01             	test   dl,0x1
c0022a11:	74 08                	je     c0022a1b <PCI::readBAR16(unsigned int, int)+0x15>
c0022a13:	83 e2 fc             	and    edx,0xfffffffc
c0022a16:	01 c2                	add    edx,eax
c0022a18:	66 ed                	in     ax,dx
c0022a1a:	c3                   	ret    
c0022a1b:	83 e2 f0             	and    edx,0xfffffff0
c0022a1e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022a22:	c3                   	ret    
c0022a23:	90                   	nop

c0022a24 <PCI::readBAR32(unsigned int, int)>:
c0022a24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a2c:	f6 c2 01             	test   dl,0x1
c0022a2f:	74 07                	je     c0022a38 <PCI::readBAR32(unsigned int, int)+0x14>
c0022a31:	83 e2 fc             	and    edx,0xfffffffc
c0022a34:	01 c2                	add    edx,eax
c0022a36:	ed                   	in     eax,dx
c0022a37:	c3                   	ret    
c0022a38:	83 e2 f0             	and    edx,0xfffffff0
c0022a3b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022a3e:	c3                   	ret    
c0022a3f:	90                   	nop

c0022a40 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022a40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a4c:	f6 c2 01             	test   dl,0x1
c0022a4f:	74 07                	je     c0022a58 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022a51:	83 e2 fc             	and    edx,0xfffffffc
c0022a54:	01 ca                	add    edx,ecx
c0022a56:	ee                   	out    dx,al
c0022a57:	c3                   	ret    
c0022a58:	83 e2 f0             	and    edx,0xfffffff0
c0022a5b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022a5e:	c3                   	ret    
c0022a5f:	90                   	nop

c0022a60 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022a60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a6c:	f6 c2 01             	test   dl,0x1
c0022a6f:	74 08                	je     c0022a79 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022a71:	83 e2 fc             	and    edx,0xfffffffc
c0022a74:	01 ca                	add    edx,ecx
c0022a76:	66 ef                	out    dx,ax
c0022a78:	c3                   	ret    
c0022a79:	83 e2 f0             	and    edx,0xfffffff0
c0022a7c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022a80:	c3                   	ret    
c0022a81:	90                   	nop

c0022a82 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022a82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a8e:	f6 c2 01             	test   dl,0x1
c0022a91:	74 07                	je     c0022a9a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022a93:	83 e2 fc             	and    edx,0xfffffffc
c0022a96:	01 ca                	add    edx,ecx
c0022a98:	ef                   	out    dx,eax
c0022a99:	c3                   	ret    
c0022a9a:	83 e2 f0             	and    edx,0xfffffff0
c0022a9d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022aa0:	c3                   	ret    
c0022aa1:	90                   	nop

c0022aa2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aa2:	55                   	push   ebp
c0022aa3:	57                   	push   edi
c0022aa4:	56                   	push   esi
c0022aa5:	53                   	push   ebx
c0022aa6:	83 ec 0c             	sub    esp,0xc
c0022aa9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022aad:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022ab1:	89 f0                	mov    eax,esi
c0022ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ab7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022abb:	3c 07                	cmp    al,0x7
c0022abd:	76 10                	jbe    c0022acf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022abf:	83 ec 0c             	sub    esp,0xc
c0022ac2:	68 c0 cb 02 c0       	push   0xc002cbc0
c0022ac7:	e8 87 78 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0022acc:	83 c4 10             	add    esp,0x10
c0022acf:	80 fb 0f             	cmp    bl,0xf
c0022ad2:	76 10                	jbe    c0022ae4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022ad4:	83 ec 0c             	sub    esp,0xc
c0022ad7:	68 f0 cb 02 c0       	push   0xc002cbf0
c0022adc:	e8 72 78 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0022ae1:	83 c4 10             	add    esp,0x10
c0022ae4:	8d 04 36             	lea    eax,[esi+esi*1]
c0022ae7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022aec:	83 c8 f0             	or     eax,0xfffffff0
c0022aef:	ee                   	out    dx,al
c0022af0:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022af5:	89 e8                	mov    eax,ebp
c0022af7:	ee                   	out    dx,al
c0022af8:	83 c4 0c             	add    esp,0xc
c0022afb:	89 d8                	mov    eax,ebx
c0022afd:	66 81 e7 fc 00       	and    di,0xfc
c0022b02:	5b                   	pop    ebx
c0022b03:	c1 e0 08             	shl    eax,0x8
c0022b06:	5e                   	pop    esi
c0022b07:	09 f8                	or     eax,edi
c0022b09:	5f                   	pop    edi
c0022b0a:	66 0d 00 c0          	or     ax,0xc000
c0022b0e:	5d                   	pop    ebp
c0022b0f:	c3                   	ret    

c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b10:	57                   	push   edi
c0022b11:	56                   	push   esi
c0022b12:	53                   	push   ebx
c0022b13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b1b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022b21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022b25:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022b2d:	83 ff 01             	cmp    edi,0x1
c0022b30:	75 3e                	jne    c0022b70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022b32:	89 de                	mov    esi,ebx
c0022b34:	0f b6 c0             	movzx  eax,al
c0022b37:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022b3d:	c1 e0 10             	shl    eax,0x10
c0022b40:	0f b6 c9             	movzx  ecx,cl
c0022b43:	09 f0                	or     eax,esi
c0022b45:	c1 e1 08             	shl    ecx,0x8
c0022b48:	0f b6 d2             	movzx  edx,dl
c0022b4b:	09 c8                	or     eax,ecx
c0022b4d:	c1 e2 0b             	shl    edx,0xb
c0022b50:	09 d0                	or     eax,edx
c0022b52:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b57:	0d 00 00 00 80       	or     eax,0x80000000
c0022b5c:	ef                   	out    dx,eax
c0022b5d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b62:	ed                   	in     eax,dx
c0022b63:	83 e3 02             	and    ebx,0x2
c0022b66:	0f b6 cb             	movzx  ecx,bl
c0022b69:	c1 e1 03             	shl    ecx,0x3
c0022b6c:	d3 e8                	shr    eax,cl
c0022b6e:	eb 43                	jmp    c0022bb3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022b70:	83 ff 02             	cmp    edi,0x2
c0022b73:	75 2c                	jne    c0022ba1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022b75:	83 ec 0c             	sub    esp,0xc
c0022b78:	0f b6 c9             	movzx  ecx,cl
c0022b7b:	0f b6 d2             	movzx  edx,dl
c0022b7e:	0f b6 fb             	movzx  edi,bl
c0022b81:	0f b6 c0             	movzx  eax,al
c0022b84:	57                   	push   edi
c0022b85:	51                   	push   ecx
c0022b86:	52                   	push   edx
c0022b87:	50                   	push   eax
c0022b88:	56                   	push   esi
c0022b89:	e8 14 ff ff ff       	call   c0022aa2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b8e:	89 c2                	mov    edx,eax
c0022b90:	ed                   	in     eax,dx
c0022b91:	83 e3 02             	and    ebx,0x2
c0022b94:	83 c4 20             	add    esp,0x20
c0022b97:	0f b6 cb             	movzx  ecx,bl
c0022b9a:	c1 e1 03             	shl    ecx,0x3
c0022b9d:	d3 e8                	shr    eax,cl
c0022b9f:	eb 12                	jmp    c0022bb3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ba1:	83 ec 0c             	sub    esp,0xc
c0022ba4:	68 20 cc 02 c0       	push   0xc002cc20
c0022ba9:	e8 a5 77 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0022bae:	83 c4 10             	add    esp,0x10
c0022bb1:	31 c0                	xor    eax,eax
c0022bb3:	5b                   	pop    ebx
c0022bb4:	5e                   	pop    esi
c0022bb5:	5f                   	pop    edi
c0022bb6:	c3                   	ret    
c0022bb7:	90                   	nop

c0022bb8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022bb8:	83 ec 18             	sub    esp,0x18
c0022bbb:	6a 00                	push   0x0
c0022bbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bc2:	50                   	push   eax
c0022bc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bc8:	50                   	push   eax
c0022bc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bce:	50                   	push   eax
c0022bcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bd3:	e8 38 ff ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bd8:	83 c4 2c             	add    esp,0x2c
c0022bdb:	c3                   	ret    

c0022bdc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022bdc:	83 ec 18             	sub    esp,0x18
c0022bdf:	6a 0e                	push   0xe
c0022be1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022be6:	50                   	push   eax
c0022be7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bec:	50                   	push   eax
c0022bed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bf2:	50                   	push   eax
c0022bf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bf7:	e8 14 ff ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bfc:	83 c4 2c             	add    esp,0x2c
c0022bff:	0f b6 c0             	movzx  eax,al
c0022c02:	c3                   	ret    
c0022c03:	90                   	nop

c0022c04 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022c04:	55                   	push   ebp
c0022c05:	57                   	push   edi
c0022c06:	56                   	push   esi
c0022c07:	53                   	push   ebx
c0022c08:	83 ec 18             	sub    esp,0x18
c0022c0b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022c10:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022c15:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022c1a:	6a 0a                	push   0xa
c0022c1c:	56                   	push   esi
c0022c1d:	55                   	push   ebp
c0022c1e:	57                   	push   edi
c0022c1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c23:	e8 e8 fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c28:	83 c4 14             	add    esp,0x14
c0022c2b:	89 c3                	mov    ebx,eax
c0022c2d:	6a 0a                	push   0xa
c0022c2f:	0f b6 db             	movzx  ebx,bl
c0022c32:	56                   	push   esi
c0022c33:	55                   	push   ebp
c0022c34:	57                   	push   edi
c0022c35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c39:	e8 d2 fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c3e:	83 c4 2c             	add    esp,0x2c
c0022c41:	25 00 ff 00 00       	and    eax,0xff00
c0022c46:	09 d8                	or     eax,ebx
c0022c48:	5b                   	pop    ebx
c0022c49:	5e                   	pop    esi
c0022c4a:	5f                   	pop    edi
c0022c4b:	5d                   	pop    ebp
c0022c4c:	c3                   	ret    
c0022c4d:	90                   	nop

c0022c4e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022c4e:	83 ec 18             	sub    esp,0x18
c0022c51:	6a 08                	push   0x8
c0022c53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c58:	50                   	push   eax
c0022c59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c5e:	50                   	push   eax
c0022c5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c64:	50                   	push   eax
c0022c65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c69:	e8 a2 fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c6e:	83 c4 2c             	add    esp,0x2c
c0022c71:	0f b6 c4             	movzx  eax,ah
c0022c74:	c3                   	ret    
c0022c75:	90                   	nop

c0022c76 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022c76:	83 ec 18             	sub    esp,0x18
c0022c79:	6a 08                	push   0x8
c0022c7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c80:	50                   	push   eax
c0022c81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c86:	50                   	push   eax
c0022c87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c8c:	50                   	push   eax
c0022c8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c91:	e8 7a fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c96:	83 c4 2c             	add    esp,0x2c
c0022c99:	c3                   	ret    

c0022c9a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022c9a:	83 ec 18             	sub    esp,0x18
c0022c9d:	6a 3c                	push   0x3c
c0022c9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ca4:	50                   	push   eax
c0022ca5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022caa:	50                   	push   eax
c0022cab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cb0:	50                   	push   eax
c0022cb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cb5:	e8 56 fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cba:	83 c4 2c             	add    esp,0x2c
c0022cbd:	c3                   	ret    

c0022cbe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022cbe:	83 ec 18             	sub    esp,0x18
c0022cc1:	6a 18                	push   0x18
c0022cc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cc8:	50                   	push   eax
c0022cc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cce:	50                   	push   eax
c0022ccf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd4:	50                   	push   eax
c0022cd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cd9:	e8 32 fe ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cde:	83 c4 2c             	add    esp,0x2c
c0022ce1:	0f b6 c4             	movzx  eax,ah
c0022ce4:	c3                   	ret    
c0022ce5:	90                   	nop

c0022ce6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ce6:	55                   	push   ebp
c0022ce7:	57                   	push   edi
c0022ce8:	56                   	push   esi
c0022ce9:	53                   	push   ebx
c0022cea:	83 ec 28             	sub    esp,0x28
c0022ced:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022cf1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022cf6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022cfb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022d00:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022d07:	8d 43 12             	lea    eax,[ebx+0x12]
c0022d0a:	83 c3 10             	add    ebx,0x10
c0022d0d:	0f b6 c0             	movzx  eax,al
c0022d10:	0f b6 db             	movzx  ebx,bl
c0022d13:	50                   	push   eax
c0022d14:	51                   	push   ecx
c0022d15:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022d19:	57                   	push   edi
c0022d1a:	55                   	push   ebp
c0022d1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d1f:	e8 ec fd ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d24:	83 c4 14             	add    esp,0x14
c0022d27:	89 c6                	mov    esi,eax
c0022d29:	53                   	push   ebx
c0022d2a:	c1 e6 10             	shl    esi,0x10
c0022d2d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d31:	51                   	push   ecx
c0022d32:	57                   	push   edi
c0022d33:	55                   	push   ebp
c0022d34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d38:	e8 d3 fd ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d3d:	83 c4 3c             	add    esp,0x3c
c0022d40:	0f b7 c0             	movzx  eax,ax
c0022d43:	5b                   	pop    ebx
c0022d44:	09 f0                	or     eax,esi
c0022d46:	5e                   	pop    esi
c0022d47:	5f                   	pop    edi
c0022d48:	5d                   	pop    ebp
c0022d49:	c3                   	ret    

c0022d4a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022d4a:	55                   	push   ebp
c0022d4b:	57                   	push   edi
c0022d4c:	56                   	push   esi
c0022d4d:	53                   	push   ebx
c0022d4e:	83 ec 0c             	sub    esp,0xc
c0022d51:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022d55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022d59:	89 f5                	mov    ebp,esi
c0022d5b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022d61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d71:	83 f9 01             	cmp    ecx,0x1
c0022d74:	75 5d                	jne    c0022dd3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022d76:	0f b6 c8             	movzx  ecx,al
c0022d79:	0f b6 d2             	movzx  edx,dl
c0022d7c:	c1 e1 10             	shl    ecx,0x10
c0022d7f:	c1 e2 0b             	shl    edx,0xb
c0022d82:	89 f0                	mov    eax,esi
c0022d84:	25 fc 00 00 00       	and    eax,0xfc
c0022d89:	09 c1                	or     ecx,eax
c0022d8b:	89 e8                	mov    eax,ebp
c0022d8d:	0f b6 c0             	movzx  eax,al
c0022d90:	c1 e0 08             	shl    eax,0x8
c0022d93:	09 c1                	or     ecx,eax
c0022d95:	09 d1                	or     ecx,edx
c0022d97:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022d9c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022da2:	89 c8                	mov    eax,ecx
c0022da4:	ef                   	out    dx,eax
c0022da5:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022daa:	ed                   	in     eax,dx
c0022dab:	0f b7 db             	movzx  ebx,bx
c0022dae:	83 e6 02             	and    esi,0x2
c0022db1:	74 0a                	je     c0022dbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022db3:	0f b7 d0             	movzx  edx,ax
c0022db6:	c1 e3 10             	shl    ebx,0x10
c0022db9:	09 d3                	or     ebx,edx
c0022dbb:	eb 05                	jmp    c0022dc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022dbd:	66 31 c0             	xor    ax,ax
c0022dc0:	09 c3                	or     ebx,eax
c0022dc2:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022dc7:	89 c8                	mov    eax,ecx
c0022dc9:	ef                   	out    dx,eax
c0022dca:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022dcf:	89 d8                	mov    eax,ebx
c0022dd1:	eb 41                	jmp    c0022e14 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022dd3:	83 f9 02             	cmp    ecx,0x2
c0022dd6:	75 45                	jne    c0022e1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022dd8:	83 ec 0c             	sub    esp,0xc
c0022ddb:	0f b6 d2             	movzx  edx,dl
c0022dde:	89 f1                	mov    ecx,esi
c0022de0:	0f b6 c0             	movzx  eax,al
c0022de3:	0f b6 f1             	movzx  esi,cl
c0022de6:	89 e9                	mov    ecx,ebp
c0022de8:	56                   	push   esi
c0022de9:	0f b6 c9             	movzx  ecx,cl
c0022dec:	51                   	push   ecx
c0022ded:	52                   	push   edx
c0022dee:	50                   	push   eax
c0022def:	57                   	push   edi
c0022df0:	e8 ad fc ff ff       	call   c0022aa2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df5:	89 c2                	mov    edx,eax
c0022df7:	ed                   	in     eax,dx
c0022df8:	83 c4 20             	add    esp,0x20
c0022dfb:	0f b7 db             	movzx  ebx,bx
c0022dfe:	f6 c2 02             	test   dl,0x2
c0022e01:	74 0c                	je     c0022e0f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022e03:	0f b7 c8             	movzx  ecx,ax
c0022e06:	89 d8                	mov    eax,ebx
c0022e08:	c1 e0 10             	shl    eax,0x10
c0022e0b:	09 c8                	or     eax,ecx
c0022e0d:	eb 05                	jmp    c0022e14 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e0f:	66 31 c0             	xor    ax,ax
c0022e12:	09 d8                	or     eax,ebx
c0022e14:	ef                   	out    dx,eax
c0022e15:	83 c4 0c             	add    esp,0xc
c0022e18:	5b                   	pop    ebx
c0022e19:	5e                   	pop    esi
c0022e1a:	5f                   	pop    edi
c0022e1b:	5d                   	pop    ebp
c0022e1c:	c3                   	ret    
c0022e1d:	c7 44 24 20 20 cc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002cc20
c0022e25:	83 c4 0c             	add    esp,0xc
c0022e28:	5b                   	pop    ebx
c0022e29:	5e                   	pop    esi
c0022e2a:	5f                   	pop    edi
c0022e2b:	5d                   	pop    ebp
c0022e2c:	e9 22 75 ff ff       	jmp    c001a353 <Krnl::panic(char const*)>
c0022e31:	90                   	nop

c0022e32 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022e32:	55                   	push   ebp
c0022e33:	57                   	push   edi
c0022e34:	56                   	push   esi
c0022e35:	53                   	push   ebx
c0022e36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e3c:	80 3d f0 08 03 c0 00 	cmp    BYTE PTR ds:0xc00308f0,0x0
c0022e43:	0f 85 84 00 00 00    	jne    c0022ecd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022e49:	83 ec 0c             	sub    esp,0xc
c0022e4c:	68 14 01 00 00       	push   0x114
c0022e51:	e8 07 cb fe ff       	call   c000f95d <malloc>
c0022e56:	83 c4 0c             	add    esp,0xc
c0022e59:	89 c3                	mov    ebx,eax
c0022e5b:	ff 35 f0 fa 02 c0    	push   DWORD PTR ds:0xc002faf0
c0022e61:	68 26 cc 02 c0       	push   0xc002cc26
c0022e66:	50                   	push   eax
c0022e67:	e8 a8 00 ff ff       	call   c0012f14 <File::File(char const*, Process*)>
c0022e6c:	5a                   	pop    edx
c0022e6d:	59                   	pop    ecx
c0022e6e:	6a 01                	push   0x1
c0022e70:	53                   	push   ebx
c0022e71:	e8 02 01 ff ff       	call   c0012f78 <File::open(FileOpenMode)>
c0022e76:	83 c4 0c             	add    esp,0xc
c0022e79:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022e7d:	50                   	push   eax
c0022e7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022e82:	50                   	push   eax
c0022e83:	53                   	push   ebx
c0022e84:	e8 9b 03 ff ff       	call   c0013224 <File::stat(unsigned long long*, bool*)>
c0022e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e8d:	40                   	inc    eax
c0022e8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e91:	e8 c7 ca fe ff       	call   c000f95d <malloc>
c0022e96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022e9a:	a3 ec 08 03 c0       	mov    ds:0xc00308ec,eax
c0022e9f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022ea3:	5e                   	pop    esi
c0022ea4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022ea6:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022eaa:	51                   	push   ecx
c0022eab:	50                   	push   eax
c0022eac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022eb0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022eb4:	53                   	push   ebx
c0022eb5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022eb8:	83 c4 14             	add    esp,0x14
c0022ebb:	53                   	push   ebx
c0022ebc:	e8 15 01 ff ff       	call   c0012fd6 <File::close()>
c0022ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ec5:	83 c4 10             	add    esp,0x10
c0022ec8:	a3 e8 08 03 c0       	mov    ds:0xc00308e8,eax
c0022ecd:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c0022ed2:	8b 15 ec 08 03 c0    	mov    edx,DWORD PTR ds:0xc00308ec
c0022ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0022edb:	31 ff                	xor    edi,edi
c0022edd:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022ee5:	31 f6                	xor    esi,esi
c0022ee7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022eec:	31 db                	xor    ebx,ebx
c0022eee:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022ef6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022efb:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022f02:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022f06:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022f0d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022f11:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f14:	0f 8e 6b 01 00 00    	jle    c0023085 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022f1a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022f1d:	d4 40                	aam    0x40
c0022f1f:	d5 39                	aad    0x39
c0022f21:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022f25:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022f29:	d4 40                	aam    0x40
c0022f2b:	d5 39                	aad    0x39
c0022f2d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022f31:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022f35:	d4 40                	aam    0x40
c0022f37:	d5 39                	aad    0x39
c0022f39:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022f3d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022f41:	d4 40                	aam    0x40
c0022f43:	d5 39                	aad    0x39
c0022f45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022f49:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022f4d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022f51:	3c 56                	cmp    al,0x56
c0022f53:	74 45                	je     c0022f9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022f55:	d4 40                	aam    0x40
c0022f57:	d5 39                	aad    0x39
c0022f59:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022f5c:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022f60:	0f b6 c9             	movzx  ecx,cl
c0022f63:	c1 e1 04             	shl    ecx,0x4
c0022f66:	d4 40                	aam    0x40
c0022f68:	d5 39                	aad    0x39
c0022f6a:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022f6d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022f71:	0f b6 db             	movzx  ebx,bl
c0022f74:	09 cb                	or     ebx,ecx
c0022f76:	c1 e3 04             	shl    ebx,0x4
c0022f79:	d4 40                	aam    0x40
c0022f7b:	d5 39                	aad    0x39
c0022f7d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022f80:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022f84:	0f b6 c9             	movzx  ecx,cl
c0022f87:	09 cb                	or     ebx,ecx
c0022f89:	c1 e3 04             	shl    ebx,0x4
c0022f8c:	89 d9                	mov    ecx,ebx
c0022f8e:	d4 40                	aam    0x40
c0022f90:	d5 39                	aad    0x39
c0022f92:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022f95:	0f b6 db             	movzx  ebx,bl
c0022f98:	09 cb                	or     ebx,ecx
c0022f9a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022f9e:	80 f9 44             	cmp    cl,0x44
c0022fa1:	74 47                	je     c0022fea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022fa3:	88 c8                	mov    al,cl
c0022fa5:	d4 40                	aam    0x40
c0022fa7:	d5 39                	aad    0x39
c0022fa9:	83 e8 30             	sub    eax,0x30
c0022fac:	0f b6 e8             	movzx  ebp,al
c0022faf:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022fb3:	c1 e5 04             	shl    ebp,0x4
c0022fb6:	d4 40                	aam    0x40
c0022fb8:	d5 39                	aad    0x39
c0022fba:	83 e8 30             	sub    eax,0x30
c0022fbd:	0f b6 f0             	movzx  esi,al
c0022fc0:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022fc4:	09 ee                	or     esi,ebp
c0022fc6:	c1 e6 04             	shl    esi,0x4
c0022fc9:	d4 40                	aam    0x40
c0022fcb:	d5 39                	aad    0x39
c0022fcd:	83 e8 30             	sub    eax,0x30
c0022fd0:	0f b6 e8             	movzx  ebp,al
c0022fd3:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022fd7:	09 ee                	or     esi,ebp
c0022fd9:	c1 e6 04             	shl    esi,0x4
c0022fdc:	89 f5                	mov    ebp,esi
c0022fde:	d4 40                	aam    0x40
c0022fe0:	d5 39                	aad    0x39
c0022fe2:	83 e8 30             	sub    eax,0x30
c0022fe5:	0f b6 f0             	movzx  esi,al
c0022fe8:	09 ee                	or     esi,ebp
c0022fea:	83 c7 10             	add    edi,0x10
c0022fed:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ff1:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022ff4:	3c 0a                	cmp    al,0xa
c0022ff6:	74 09                	je     c0023001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022ff8:	45                   	inc    ebp
c0022ff9:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022ffc:	75 16                	jne    c0023014 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022ffe:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023001:	3c 0a                	cmp    al,0xa
c0023003:	0f 94 c0             	sete   al
c0023006:	0f b6 c0             	movzx  eax,al
c0023009:	01 c7                	add    edi,eax
c002300b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023010:	75 0c                	jne    c002301e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0023012:	eb 15                	jmp    c0023029 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0023014:	47                   	inc    edi
c0023015:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023018:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002301c:	eb d3                	jmp    c0022ff1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c002301e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023023:	0f 85 e8 fe ff ff    	jne    c0022f11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023029:	80 f9 44             	cmp    cl,0x44
c002302c:	74 0b                	je     c0023039 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c002302e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023033:	0f 85 d8 fe ff ff    	jne    c0022f11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023039:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002303d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0023041:	c1 e1 04             	shl    ecx,0x4
c0023044:	83 e8 30             	sub    eax,0x30
c0023047:	09 c8                	or     eax,ecx
c0023049:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002304d:	0f 85 be fe ff ff    	jne    c0022f11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023053:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023057:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002305b:	c1 e1 04             	shl    ecx,0x4
c002305e:	83 e8 30             	sub    eax,0x30
c0023061:	09 c8                	or     eax,ecx
c0023063:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023067:	0f 85 a4 fe ff ff    	jne    c0022f11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002306d:	50                   	push   eax
c002306e:	50                   	push   eax
c002306f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023073:	50                   	push   eax
c0023074:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002307b:	e8 8c d7 fd ff       	call   c000080c <strcpy>
c0023080:	83 c4 10             	add    esp,0x10
c0023083:	eb 15                	jmp    c002309a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0023085:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002308c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023097:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002309a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00230a7:	5b                   	pop    ebx
c00230a8:	5e                   	pop    esi
c00230a9:	5f                   	pop    edi
c00230aa:	5d                   	pop    ebp
c00230ab:	c3                   	ret    

c00230ac <PCI::checkBus(unsigned char)>:
c00230ac:	56                   	push   esi
c00230ad:	53                   	push   ebx
c00230ae:	31 db                	xor    ebx,ebx
c00230b0:	51                   	push   ecx
c00230b1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00230b6:	52                   	push   edx
c00230b7:	53                   	push   ebx
c00230b8:	43                   	inc    ebx
c00230b9:	56                   	push   esi
c00230ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230be:	e8 37 03 00 00       	call   c00233fa <PCI::checkDevice(unsigned char, unsigned char)>
c00230c3:	83 c4 10             	add    esp,0x10
c00230c6:	83 fb 20             	cmp    ebx,0x20
c00230c9:	75 eb                	jne    c00230b6 <PCI::checkBus(unsigned char)+0xa>
c00230cb:	58                   	pop    eax
c00230cc:	5b                   	pop    ebx
c00230cd:	5e                   	pop    esi
c00230ce:	c3                   	ret    
c00230cf:	90                   	nop

c00230d0 <PCI::foundDevice(PCIDeviceInfo)>:
c00230d0:	55                   	push   ebp
c00230d1:	57                   	push   edi
c00230d2:	56                   	push   esi
c00230d3:	53                   	push   ebx
c00230d4:	83 ec 1c             	sub    esp,0x1c
c00230d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230db:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00230e1:	0f 84 52 01 00 00    	je     c0023239 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00230e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00230eb:	66 81 f9 06 04       	cmp    cx,0x406
c00230f0:	75 2c                	jne    c002311e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00230f2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00230f7:	50                   	push   eax
c00230f8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00230fd:	50                   	push   eax
c00230fe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023103:	50                   	push   eax
c0023104:	56                   	push   esi
c0023105:	e8 b4 fb ff ff       	call   c0022cbe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002310a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002310e:	0f b6 c0             	movzx  eax,al
c0023111:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023115:	83 c4 2c             	add    esp,0x2c
c0023118:	5b                   	pop    ebx
c0023119:	5e                   	pop    esi
c002311a:	5f                   	pop    edi
c002311b:	5d                   	pop    ebp
c002311c:	eb 8e                	jmp    c00230ac <PCI::checkBus(unsigned char)>
c002311e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023122:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023128:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002312c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023130:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023134:	88 d3                	mov    bl,dl
c0023136:	85 c0                	test   eax,eax
c0023138:	74 33                	je     c002316d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002313a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002313d:	85 d2                	test   edx,edx
c002313f:	74 28                	je     c0023169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023141:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023147:	31 ef                	xor    edi,ebp
c0023149:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002314f:	75 18                	jne    c0023169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023151:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023155:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002315b:	75 0c                	jne    c0023169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002315d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023163:	0f 84 d0 00 00 00    	je     c0023239 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023169:	8b 00                	mov    eax,DWORD PTR [eax]
c002316b:	eb c9                	jmp    c0023136 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002316d:	66 81 f9 01 06       	cmp    cx,0x601
c0023172:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023176:	75 19                	jne    c0023191 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023178:	83 ec 0c             	sub    esp,0xc
c002317b:	68 64 01 00 00       	push   0x164
c0023180:	e8 d8 c7 fe ff       	call   c000f95d <malloc>
c0023185:	89 c5                	mov    ebp,eax
c0023187:	89 04 24             	mov    DWORD PTR [esp],eax
c002318a:	e8 85 0e 00 00       	call   c0024014 <SATABus::SATABus()>
c002318f:	eb 1e                	jmp    c00231af <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023191:	66 81 f9 01 01       	cmp    cx,0x101
c0023196:	75 60                	jne    c00231f8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	68 70 02 00 00       	push   0x270
c00231a0:	e8 b8 c7 fe ff       	call   c000f95d <malloc>
c00231a5:	89 c5                	mov    ebp,eax
c00231a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00231aa:	e8 0f 03 00 00       	call   c00234be <IDE::IDE()>
c00231af:	58                   	pop    eax
c00231b0:	5a                   	pop    edx
c00231b1:	55                   	push   ebp
c00231b2:	56                   	push   esi
c00231b3:	e8 36 0c ff ff       	call   c0013dee <Device::addChild(Device*)>
c00231b8:	83 ec 1c             	sub    esp,0x1c
c00231bb:	b9 09 00 00 00       	mov    ecx,0x9
c00231c0:	fc                   	cld    
c00231c1:	89 e7                	mov    edi,esp
c00231c3:	89 de                	mov    esi,ebx
c00231c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00231c7:	55                   	push   ebp
c00231c8:	e8 33 0b ff ff       	call   c0013d00 <Device::preOpenPCI(PCIDeviceInfo)>
c00231cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00231d0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00231d4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00231dc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00231e4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00231ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231ef:	83 c4 4c             	add    esp,0x4c
c00231f2:	5b                   	pop    ebx
c00231f3:	5e                   	pop    esi
c00231f4:	5f                   	pop    edi
c00231f5:	5d                   	pop    ebp
c00231f6:	ff e0                	jmp    eax
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	68 58 01 00 00       	push   0x158
c0023200:	e8 58 c7 fe ff       	call   c000f95d <malloc>
c0023205:	89 c5                	mov    ebp,eax
c0023207:	58                   	pop    eax
c0023208:	5a                   	pop    edx
c0023209:	68 3f cc 02 c0       	push   0xc002cc3f
c002320e:	55                   	push   ebp
c002320f:	e8 e4 0e ff ff       	call   c00140f8 <DriverlessDevice::DriverlessDevice(char const*)>
c0023214:	59                   	pop    ecx
c0023215:	5f                   	pop    edi
c0023216:	55                   	push   ebp
c0023217:	56                   	push   esi
c0023218:	e8 d1 0b ff ff       	call   c0013dee <Device::addChild(Device*)>
c002321d:	b9 09 00 00 00       	mov    ecx,0x9
c0023222:	fc                   	cld    
c0023223:	89 df                	mov    edi,ebx
c0023225:	89 de                	mov    esi,ebx
c0023227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023229:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002322d:	83 c4 2c             	add    esp,0x2c
c0023230:	5b                   	pop    ebx
c0023231:	5e                   	pop    esi
c0023232:	5f                   	pop    edi
c0023233:	5d                   	pop    ebp
c0023234:	e9 c7 0a ff ff       	jmp    c0013d00 <Device::preOpenPCI(PCIDeviceInfo)>
c0023239:	83 c4 1c             	add    esp,0x1c
c002323c:	5b                   	pop    ebx
c002323d:	5e                   	pop    esi
c002323e:	5f                   	pop    edi
c002323f:	5d                   	pop    ebp
c0023240:	c3                   	ret    
c0023241:	90                   	nop

c0023242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023242:	55                   	push   ebp
c0023243:	57                   	push   edi
c0023244:	56                   	push   esi
c0023245:	53                   	push   ebx
c0023246:	83 ec 68             	sub    esp,0x68
c0023249:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002324d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023258:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002325f:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023264:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023268:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002326f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023274:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023278:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c002327d:	6a 0c                	push   0xc
c002327f:	57                   	push   edi
c0023280:	53                   	push   ebx
c0023281:	56                   	push   esi
c0023282:	55                   	push   ebp
c0023283:	e8 88 f8 ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023288:	83 c4 20             	add    esp,0x20
c002328b:	57                   	push   edi
c002328c:	53                   	push   ebx
c002328d:	56                   	push   esi
c002328e:	55                   	push   ebp
c002328f:	e8 70 f9 ff ff       	call   c0022c04 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023294:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023299:	57                   	push   edi
c002329a:	53                   	push   ebx
c002329b:	56                   	push   esi
c002329c:	55                   	push   ebp
c002329d:	e8 f8 f9 ff ff       	call   c0022c9a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00232a2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00232a6:	83 c4 14             	add    esp,0x14
c00232a9:	6a 3c                	push   0x3c
c00232ab:	57                   	push   edi
c00232ac:	53                   	push   ebx
c00232ad:	56                   	push   esi
c00232ae:	55                   	push   ebp
c00232af:	e8 5c f8 ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232b4:	0f b6 c4             	movzx  eax,ah
c00232b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00232bb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00232bf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00232c3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00232c8:	83 c4 20             	add    esp,0x20
c00232cb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00232d1:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00232d8:	74 7c                	je     c0023356 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00232da:	31 c0                	xor    eax,eax
c00232dc:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00232e2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00232e8:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c00232ee:	7e 66                	jle    c0023356 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00232f0:	8d 14 c2             	lea    edx,[edx+eax*8]
c00232f3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00232fa:	39 cb                	cmp    ebx,ecx
c00232fc:	75 55                	jne    c0023353 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00232fe:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023305:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023309:	75 48                	jne    c0023353 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002330b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002330f:	83 ec 0c             	sub    esp,0xc
c0023312:	68 59 cc 02 c0       	push   0xc002cc59
c0023317:	e8 99 f6 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002331c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023320:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0023326:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002332a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023330:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023338:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c002333c:	52                   	push   edx
c002333d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023341:	53                   	push   ebx
c0023342:	68 7e cc 02 c0       	push   0xc002cc7e
c0023347:	e8 69 f6 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002334c:	83 c4 20             	add    esp,0x20
c002334f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023353:	40                   	inc    eax
c0023354:	eb 86                	jmp    c00232dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023356:	31 d2                	xor    edx,edx
c0023358:	83 ec 0c             	sub    esp,0xc
c002335b:	57                   	push   edi
c002335c:	53                   	push   ebx
c002335d:	56                   	push   esi
c002335e:	52                   	push   edx
c002335f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023363:	55                   	push   ebp
c0023364:	e8 7d f9 ff ff       	call   c0022ce6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023369:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002336d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023371:	42                   	inc    edx
c0023372:	83 c4 20             	add    esp,0x20
c0023375:	83 fa 06             	cmp    edx,0x6
c0023378:	75 de                	jne    c0023358 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c002337a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002337f:	83 ec 0c             	sub    esp,0xc
c0023382:	86 e0                	xchg   al,ah
c0023384:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023389:	6a 02                	push   0x2
c002338b:	57                   	push   edi
c002338c:	53                   	push   ebx
c002338d:	56                   	push   esi
c002338e:	55                   	push   ebp
c002338f:	e8 7c f7 ff ff       	call   c0022b10 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023394:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023399:	83 c4 20             	add    esp,0x20
c002339c:	57                   	push   edi
c002339d:	53                   	push   ebx
c002339e:	56                   	push   esi
c002339f:	55                   	push   ebp
c00233a0:	e8 a9 f8 ff ff       	call   c0022c4e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00233a5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00233a9:	57                   	push   edi
c00233aa:	53                   	push   ebx
c00233ab:	56                   	push   esi
c00233ac:	55                   	push   ebp
c00233ad:	e8 06 f8 ff ff       	call   c0022bb8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00233b2:	b9 09 00 00 00       	mov    ecx,0x9
c00233b7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00233bc:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00233c0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00233c4:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00233c8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00233cc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00233d0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00233d4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00233d8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00233dc:	83 ec 0c             	sub    esp,0xc
c00233df:	fc                   	cld    
c00233e0:	89 e7                	mov    edi,esp
c00233e2:	8d 74 24 58          	lea    esi,[esp+0x58]
c00233e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00233e8:	55                   	push   ebp
c00233e9:	e8 e2 fc ff ff       	call   c00230d0 <PCI::foundDevice(PCIDeviceInfo)>
c00233ee:	81 c4 8c 00 00 00    	add    esp,0x8c
c00233f4:	5b                   	pop    ebx
c00233f5:	5e                   	pop    esi
c00233f6:	5f                   	pop    edi
c00233f7:	5d                   	pop    ebp
c00233f8:	c3                   	ret    
c00233f9:	90                   	nop

c00233fa <PCI::checkDevice(unsigned char, unsigned char)>:
c00233fa:	55                   	push   ebp
c00233fb:	57                   	push   edi
c00233fc:	56                   	push   esi
c00233fd:	53                   	push   ebx
c00233fe:	83 ec 0c             	sub    esp,0xc
c0023401:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023405:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002340a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002340f:	6a 00                	push   0x0
c0023411:	56                   	push   esi
c0023412:	57                   	push   edi
c0023413:	55                   	push   ebp
c0023414:	e8 9f f7 ff ff       	call   c0022bb8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023419:	6a 00                	push   0x0
c002341b:	56                   	push   esi
c002341c:	57                   	push   edi
c002341d:	55                   	push   ebp
c002341e:	e8 1f fe ff ff       	call   c0023242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023423:	83 c4 20             	add    esp,0x20
c0023426:	6a 00                	push   0x0
c0023428:	56                   	push   esi
c0023429:	57                   	push   edi
c002342a:	55                   	push   ebp
c002342b:	e8 ac f7 ff ff       	call   c0022bdc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023430:	83 c4 10             	add    esp,0x10
c0023433:	84 c0                	test   al,al
c0023435:	79 27                	jns    c002345e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023437:	bb 01 00 00 00       	mov    ebx,0x1
c002343c:	53                   	push   ebx
c002343d:	56                   	push   esi
c002343e:	57                   	push   edi
c002343f:	55                   	push   ebp
c0023440:	e8 73 f7 ff ff       	call   c0022bb8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023445:	83 c4 10             	add    esp,0x10
c0023448:	66 40                	inc    ax
c002344a:	74 0c                	je     c0023458 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002344c:	53                   	push   ebx
c002344d:	56                   	push   esi
c002344e:	57                   	push   edi
c002344f:	55                   	push   ebp
c0023450:	e8 ed fd ff ff       	call   c0023242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023455:	83 c4 10             	add    esp,0x10
c0023458:	43                   	inc    ebx
c0023459:	83 fb 08             	cmp    ebx,0x8
c002345c:	75 de                	jne    c002343c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002345e:	83 c4 0c             	add    esp,0xc
c0023461:	5b                   	pop    ebx
c0023462:	5e                   	pop    esi
c0023463:	5f                   	pop    edi
c0023464:	5d                   	pop    ebp
c0023465:	c3                   	ret    

c0023466 <PCI::detect()>:
c0023466:	56                   	push   esi
c0023467:	53                   	push   ebx
c0023468:	53                   	push   ebx
c0023469:	31 db                	xor    ebx,ebx
c002346b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002346f:	6a 00                	push   0x0
c0023471:	6a 00                	push   0x0
c0023473:	6a 00                	push   0x0
c0023475:	56                   	push   esi
c0023476:	e8 61 f7 ff ff       	call   c0022bdc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002347b:	83 c4 10             	add    esp,0x10
c002347e:	a8 80                	test   al,0x80
c0023480:	75 21                	jne    c00234a3 <PCI::detect()+0x3d>
c0023482:	51                   	push   ecx
c0023483:	51                   	push   ecx
c0023484:	6a 00                	push   0x0
c0023486:	56                   	push   esi
c0023487:	e8 20 fc ff ff       	call   c00230ac <PCI::checkBus(unsigned char)>
c002348c:	83 c4 10             	add    esp,0x10
c002348f:	eb 24                	jmp    c00234b5 <PCI::detect()+0x4f>
c0023491:	52                   	push   edx
c0023492:	52                   	push   edx
c0023493:	53                   	push   ebx
c0023494:	43                   	inc    ebx
c0023495:	56                   	push   esi
c0023496:	e8 11 fc ff ff       	call   c00230ac <PCI::checkBus(unsigned char)>
c002349b:	83 c4 10             	add    esp,0x10
c002349e:	83 fb 08             	cmp    ebx,0x8
c00234a1:	74 12                	je     c00234b5 <PCI::detect()+0x4f>
c00234a3:	53                   	push   ebx
c00234a4:	6a 00                	push   0x0
c00234a6:	6a 00                	push   0x0
c00234a8:	56                   	push   esi
c00234a9:	e8 0a f7 ff ff       	call   c0022bb8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00234ae:	83 c4 10             	add    esp,0x10
c00234b1:	66 40                	inc    ax
c00234b3:	74 dc                	je     c0023491 <PCI::detect()+0x2b>
c00234b5:	58                   	pop    eax
c00234b6:	5b                   	pop    ebx
c00234b7:	5e                   	pop    esi
c00234b8:	c3                   	ret    
c00234b9:	90                   	nop

c00234ba <IDE::close(int, int, void*)>:
c00234ba:	83 c8 ff             	or     eax,0xffffffff
c00234bd:	c3                   	ret    

c00234be <IDE::IDE()>:
c00234be:	83 ec 0c             	sub    esp,0xc
c00234c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c5:	83 ec 08             	sub    esp,0x8
c00234c8:	68 c8 cc 02 c0       	push   0xc002ccc8
c00234cd:	50                   	push   eax
c00234ce:	e8 c9 0c ff ff       	call   c001419c <HardDiskController::HardDiskController(char const*)>
c00234d3:	83 c4 10             	add    esp,0x10
c00234d6:	ba 58 cd 02 c0       	mov    edx,0xc002cd58
c00234db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234df:	89 10                	mov    DWORD PTR [eax],edx
c00234e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00234ec:	90                   	nop
c00234ed:	83 c4 0c             	add    esp,0xc
c00234f0:	c3                   	ret    
c00234f1:	90                   	nop

c00234f2 <IDE::prepareInterrupt(unsigned char)>:
c00234f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00234f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00234fb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023503:	c3                   	ret    

c0023504 <selectDrive(unsigned char, unsigned char)>:
c0023504:	c3                   	ret    
c0023505:	90                   	nop

c0023506 <IDE::getBase(unsigned char)>:
c0023506:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002350b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002350f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023517:	c3                   	ret    

c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023518:	55                   	push   ebp
c0023519:	57                   	push   edi
c002351a:	56                   	push   esi
c002351b:	53                   	push   ebx
c002351c:	83 ec 1c             	sub    esp,0x1c
c002351f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023523:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023527:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002352a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002352e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023532:	80 f9 03             	cmp    cl,0x3
c0023535:	77 51                	ja     c0023588 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002353b:	0f b6 f2             	movzx  esi,dl
c002353e:	0f b6 db             	movzx  ebx,bl
c0023541:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023544:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023548:	83 ca 80             	or     edx,0xffffff80
c002354b:	0f b6 d2             	movzx  edx,dl
c002354e:	52                   	push   edx
c002354f:	6a 0c                	push   0xc
c0023551:	56                   	push   esi
c0023552:	57                   	push   edi
c0023553:	e8 c0 ff ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023558:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002355d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023561:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023565:	ee                   	out    dx,al
c0023566:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002356b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002356f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023573:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023577:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002357f:	83 c4 2c             	add    esp,0x2c
c0023582:	5b                   	pop    ebx
c0023583:	5e                   	pop    esi
c0023584:	5f                   	pop    edi
c0023585:	5d                   	pop    ebp
c0023586:	eb 90                	jmp    c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023588:	80 fb 07             	cmp    bl,0x7
c002358b:	77 12                	ja     c002359f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002358d:	0f b6 d2             	movzx  edx,dl
c0023590:	0f b6 db             	movzx  ebx,bl
c0023593:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002359b:	89 da                	mov    edx,ebx
c002359d:	eb 2f                	jmp    c00235ce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002359f:	80 fb 0d             	cmp    bl,0xd
c00235a2:	77 13                	ja     c00235b7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00235a4:	0f b6 d2             	movzx  edx,dl
c00235a7:	0f b6 db             	movzx  ebx,bl
c00235aa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00235b1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00235b5:	eb 17                	jmp    c00235ce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00235b7:	80 fb 15             	cmp    bl,0x15
c00235ba:	77 13                	ja     c00235cf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00235bc:	0f b6 d2             	movzx  edx,dl
c00235bf:	0f b6 db             	movzx  ebx,bl
c00235c2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00235ca:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00235ce:	ee                   	out    dx,al
c00235cf:	83 c4 1c             	add    esp,0x1c
c00235d2:	5b                   	pop    ebx
c00235d3:	5e                   	pop    esi
c00235d4:	5f                   	pop    edi
c00235d5:	5d                   	pop    ebp
c00235d6:	c3                   	ret    
c00235d7:	90                   	nop

c00235d8 <IDE::read(unsigned char, unsigned char)>:
c00235d8:	55                   	push   ebp
c00235d9:	57                   	push   edi
c00235da:	56                   	push   esi
c00235db:	53                   	push   ebx
c00235dc:	83 ec 1c             	sub    esp,0x1c
c00235df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00235e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00235e7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00235ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00235ee:	3c 03                	cmp    al,0x3
c00235f0:	77 43                	ja     c0023635 <IDE::read(unsigned char, unsigned char)+0x5d>
c00235f2:	0f b6 f2             	movzx  esi,dl
c00235f5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00235f8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00235fc:	83 c8 80             	or     eax,0xffffff80
c00235ff:	0f b6 c0             	movzx  eax,al
c0023602:	50                   	push   eax
c0023603:	6a 0c                	push   0xc
c0023605:	56                   	push   esi
c0023606:	57                   	push   edi
c0023607:	e8 0c ff ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002360c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023611:	0f b6 c3             	movzx  eax,bl
c0023614:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023618:	ec                   	in     al,dx
c0023619:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002361d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023622:	52                   	push   edx
c0023623:	6a 0c                	push   0xc
c0023625:	56                   	push   esi
c0023626:	57                   	push   edi
c0023627:	e8 ec fe ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002362c:	83 c4 20             	add    esp,0x20
c002362f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023633:	eb 49                	jmp    c002367e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023635:	80 fb 07             	cmp    bl,0x7
c0023638:	77 12                	ja     c002364c <IDE::read(unsigned char, unsigned char)+0x74>
c002363a:	0f b6 d2             	movzx  edx,dl
c002363d:	0f b6 c3             	movzx  eax,bl
c0023640:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023648:	89 c2                	mov    edx,eax
c002364a:	eb 31                	jmp    c002367d <IDE::read(unsigned char, unsigned char)+0xa5>
c002364c:	80 fb 0d             	cmp    bl,0xd
c002364f:	77 13                	ja     c0023664 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023651:	0f b6 d2             	movzx  edx,dl
c0023654:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002365b:	0f b6 d3             	movzx  edx,bl
c002365e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023662:	eb 19                	jmp    c002367d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023664:	31 c0                	xor    eax,eax
c0023666:	80 fb 15             	cmp    bl,0x15
c0023669:	77 13                	ja     c002367e <IDE::read(unsigned char, unsigned char)+0xa6>
c002366b:	0f b6 d2             	movzx  edx,dl
c002366e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023676:	0f b6 d3             	movzx  edx,bl
c0023679:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002367d:	ec                   	in     al,dx
c002367e:	83 c4 1c             	add    esp,0x1c
c0023681:	5b                   	pop    ebx
c0023682:	5e                   	pop    esi
c0023683:	5f                   	pop    edi
c0023684:	5d                   	pop    ebp
c0023685:	c3                   	ret    

c0023686 <IDE::waitInterrupt(unsigned char)>:
c0023686:	55                   	push   ebp
c0023687:	57                   	push   edi
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	31 db                	xor    ebx,ebx
c002368c:	83 ec 0c             	sub    esp,0xc
c002368f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023693:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023698:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00236a0:	89 e8                	mov    eax,ebp
c00236a2:	84 c0                	test   al,al
c00236a4:	75 34                	jne    c00236da <IDE::waitInterrupt(unsigned char)+0x54>
c00236a6:	52                   	push   edx
c00236a7:	6a 0c                	push   0xc
c00236a9:	56                   	push   esi
c00236aa:	57                   	push   edi
c00236ab:	e8 28 ff ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c00236b0:	83 c4 10             	add    esp,0x10
c00236b3:	a8 01                	test   al,0x1
c00236b5:	75 2b                	jne    c00236e2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00236b7:	f6 c3 04             	test   bl,0x4
c00236ba:	75 16                	jne    c00236d2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00236bc:	83 fb 32             	cmp    ebx,0x32
c00236bf:	7e 11                	jle    c00236d2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00236c1:	50                   	push   eax
c00236c2:	50                   	push   eax
c00236c3:	6a 00                	push   0x0
c00236c5:	68 80 96 98 00       	push   0x989680
c00236ca:	e8 f0 aa ff ff       	call   c001e1bf <nanoSleep(unsigned long long)>
c00236cf:	83 c4 10             	add    esp,0x10
c00236d2:	83 fb 3c             	cmp    ebx,0x3c
c00236d5:	74 0b                	je     c00236e2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00236d7:	43                   	inc    ebx
c00236d8:	eb be                	jmp    c0023698 <IDE::waitInterrupt(unsigned char)+0x12>
c00236da:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00236e2:	83 c4 0c             	add    esp,0xc
c00236e5:	89 e8                	mov    eax,ebp
c00236e7:	5b                   	pop    ebx
c00236e8:	5e                   	pop    esi
c00236e9:	5f                   	pop    edi
c00236ea:	5d                   	pop    ebp
c00236eb:	c3                   	ret    

c00236ec <ideChannel0IRQHandler(regs*, void*)>:
c00236ec:	83 ec 10             	sub    esp,0x10
c00236ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236f3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00236fa:	6a 07                	push   0x7
c00236fc:	6a 00                	push   0x0
c00236fe:	50                   	push   eax
c00236ff:	e8 d4 fe ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023704:	83 c4 1c             	add    esp,0x1c
c0023707:	c3                   	ret    

c0023708 <ideChannel1IRQHandler(regs*, void*)>:
c0023708:	83 ec 10             	sub    esp,0x10
c002370b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002370f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023716:	6a 07                	push   0x7
c0023718:	6a 01                	push   0x1
c002371a:	50                   	push   eax
c002371b:	e8 b8 fe ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023720:	83 c4 1c             	add    esp,0x1c
c0023723:	c3                   	ret    

c0023724 <IDE::enableIRQs(unsigned char, bool)>:
c0023724:	57                   	push   edi
c0023725:	56                   	push   esi
c0023726:	be 04 00 00 00       	mov    esi,0x4
c002372b:	53                   	push   ebx
c002372c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023735:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002373a:	0f 94 c0             	sete   al
c002373d:	d1 e0                	shl    eax,1
c002373f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023746:	0f b6 c0             	movzx  eax,al
c0023749:	50                   	push   eax
c002374a:	6a 0c                	push   0xc
c002374c:	57                   	push   edi
c002374d:	53                   	push   ebx
c002374e:	e8 c5 fd ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023753:	83 c4 10             	add    esp,0x10
c0023756:	50                   	push   eax
c0023757:	6a 0c                	push   0xc
c0023759:	57                   	push   edi
c002375a:	53                   	push   ebx
c002375b:	e8 78 fe ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023760:	83 c4 10             	add    esp,0x10
c0023763:	4e                   	dec    esi
c0023764:	75 f0                	jne    c0023756 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023766:	5b                   	pop    ebx
c0023767:	5e                   	pop    esi
c0023768:	5f                   	pop    edi
c0023769:	c3                   	ret    

c002376a <IDE::open(int, int, void*)>:
c002376a:	55                   	push   ebp
c002376b:	57                   	push   edi
c002376c:	56                   	push   esi
c002376d:	53                   	push   ebx
c002376e:	83 ec 1c             	sub    esp,0x1c
c0023771:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023775:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002377e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023787:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002378e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023795:	0f 85 b0 02 00 00    	jne    c0023a4b <IDE::open(int, int, void*)+0x2e1>
c002379b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00237a1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00237a5:	83 e0 7f             	and    eax,0x7f
c00237a8:	3c 05                	cmp    al,0x5
c00237aa:	74 04                	je     c00237b0 <IDE::open(int, int, void*)+0x46>
c00237ac:	3c 0f                	cmp    al,0xf
c00237ae:	75 32                	jne    c00237e2 <IDE::open(int, int, void*)+0x78>
c00237b0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00237b6:	83 e0 fc             	and    eax,0xfffffffc
c00237b9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00237c0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00237c6:	83 e0 fc             	and    eax,0xfffffffc
c00237c9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00237d0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00237d6:	83 e0 fc             	and    eax,0xfffffffc
c00237d9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00237e0:	eb 14                	jmp    c00237f6 <IDE::open(int, int, void*)+0x8c>
c00237e2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00237ec:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00237f6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00237fd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023804:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023808:	89 c6                	mov    esi,eax
c002380a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002380f:	c1 e6 10             	shl    esi,0x10
c0023812:	89 e8                	mov    eax,ebp
c0023814:	89 fa                	mov    edx,edi
c0023816:	c1 e0 0b             	shl    eax,0xb
c0023819:	09 f0                	or     eax,esi
c002381b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023822:	c1 e6 08             	shl    esi,0x8
c0023825:	09 c6                	or     esi,eax
c0023827:	89 f0                	mov    eax,esi
c0023829:	0d 08 00 00 80       	or     eax,0x80000008
c002382e:	ef                   	out    dx,eax
c002382f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023834:	89 ca                	mov    edx,ecx
c0023836:	ed                   	in     eax,dx
c0023837:	c1 e8 10             	shr    eax,0x10
c002383a:	3d ff ff 00 00       	cmp    eax,0xffff
c002383f:	0f 84 f5 00 00 00    	je     c002393a <IDE::open(int, int, void*)+0x1d0>
c0023845:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002384b:	89 fa                	mov    edx,edi
c002384d:	89 f0                	mov    eax,esi
c002384f:	ef                   	out    dx,eax
c0023850:	b0 fe                	mov    al,0xfe
c0023852:	89 ca                	mov    edx,ecx
c0023854:	ee                   	out    dx,al
c0023855:	89 f0                	mov    eax,esi
c0023857:	89 fa                	mov    edx,edi
c0023859:	ef                   	out    dx,eax
c002385a:	89 ca                	mov    edx,ecx
c002385c:	ed                   	in     eax,dx
c002385d:	3c fe                	cmp    al,0xfe
c002385f:	0f 85 a9 00 00 00    	jne    c002390e <IDE::open(int, int, void*)+0x1a4>
c0023865:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c002386b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023872:	74 33                	je     c00238a7 <IDE::open(int, int, void*)+0x13d>
c0023874:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002387a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002387e:	40                   	inc    eax
c002387f:	83 ec 0c             	sub    esp,0xc
c0023882:	0f b6 c0             	movzx  eax,al
c0023885:	50                   	push   eax
c0023886:	55                   	push   ebp
c0023887:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002388b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023891:	51                   	push   ecx
c0023892:	e8 e5 46 ff ff       	call   c0017f7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023897:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002389c:	83 c4 1c             	add    esp,0x1c
c002389f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00238a5:	eb 0a                	jmp    c00238b1 <IDE::open(int, int, void*)+0x147>
c00238a7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00238b1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00238b8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00238bf:	c1 e1 10             	shl    ecx,0x10
c00238c2:	c1 e0 08             	shl    eax,0x8
c00238c5:	bf f8 0c 00 00       	mov    edi,0xcf8
c00238ca:	09 c1                	or     ecx,eax
c00238cc:	89 fa                	mov    edx,edi
c00238ce:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00238d5:	c1 e0 0b             	shl    eax,0xb
c00238d8:	09 c1                	or     ecx,eax
c00238da:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00238e0:	89 c8                	mov    eax,ecx
c00238e2:	ef                   	out    dx,eax
c00238e3:	be fc 0c 00 00       	mov    esi,0xcfc
c00238e8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00238ee:	89 f2                	mov    edx,esi
c00238f0:	ee                   	out    dx,al
c00238f1:	89 c8                	mov    eax,ecx
c00238f3:	89 fa                	mov    edx,edi
c00238f5:	ef                   	out    dx,eax
c00238f6:	89 f2                	mov    edx,esi
c00238f8:	ed                   	in     eax,dx
c00238f9:	0f b6 c0             	movzx  eax,al
c00238fc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023902:	74 46                	je     c002394a <IDE::open(int, int, void*)+0x1e0>
c0023904:	83 ec 0c             	sub    esp,0xc
c0023907:	68 e0 cc 02 c0       	push   0xc002cce0
c002390c:	eb 34                	jmp    c0023942 <IDE::open(int, int, void*)+0x1d8>
c002390e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023917:	75 17                	jne    c0023930 <IDE::open(int, int, void*)+0x1c6>
c0023919:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002391e:	74 07                	je     c0023927 <IDE::open(int, int, void*)+0x1bd>
c0023920:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023925:	75 09                	jne    c0023930 <IDE::open(int, int, void*)+0x1c6>
c0023927:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002392e:	eb 1a                	jmp    c002394a <IDE::open(int, int, void*)+0x1e0>
c0023930:	83 ec 0c             	sub    esp,0xc
c0023933:	68 e8 cc 02 c0       	push   0xc002cce8
c0023938:	eb 08                	jmp    c0023942 <IDE::open(int, int, void*)+0x1d8>
c002393a:	83 ec 0c             	sub    esp,0xc
c002393d:	68 19 cd 02 c0       	push   0xc002cd19
c0023942:	e8 0c 6a ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0023947:	83 c4 10             	add    esp,0x10
c002394a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023951:	79 1a                	jns    c002396d <IDE::open(int, int, void*)+0x203>
c0023953:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023959:	83 e0 fc             	and    eax,0xfffffffc
c002395c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023963:	83 c0 08             	add    eax,0x8
c0023966:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002396d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023973:	89 c2                	mov    edx,eax
c0023975:	83 e2 0f             	and    edx,0xf
c0023978:	66 83 fa 08          	cmp    dx,0x8
c002397c:	75 0a                	jne    c0023988 <IDE::open(int, int, void*)+0x21e>
c002397e:	83 e8 02             	sub    eax,0x2
c0023981:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023988:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002398e:	89 c2                	mov    edx,eax
c0023990:	83 e2 0f             	and    edx,0xf
c0023993:	66 83 fa 08          	cmp    dx,0x8
c0023997:	75 0a                	jne    c00239a3 <IDE::open(int, int, void*)+0x239>
c0023999:	83 e8 02             	sub    eax,0x2
c002399c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00239a3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00239aa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00239b1:	89 d0                	mov    eax,edx
c00239b3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00239b6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00239ba:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00239be:	8d 4a 01             	lea    ecx,[edx+0x1]
c00239c1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00239c6:	0f b6 c9             	movzx  ecx,cl
c00239c9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00239d0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00239d3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00239d7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00239db:	8d 50 02             	lea    edx,[eax+0x2]
c00239de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00239e3:	0f b6 d2             	movzx  edx,dl
c00239e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00239ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00239ef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00239f3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00239f7:	8d 48 03             	lea    ecx,[eax+0x3]
c00239fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00239ff:	0f b6 c9             	movzx  ecx,cl
c0023a02:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023a08:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a0b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a0f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023a13:	8d 50 04             	lea    edx,[eax+0x4]
c0023a16:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023a1c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a21:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023a28:	66 85 f6             	test   si,si
c0023a2b:	74 5b                	je     c0023a88 <IDE::open(int, int, void*)+0x31e>
c0023a2d:	0f b6 d2             	movzx  edx,dl
c0023a30:	83 c0 05             	add    eax,0x5
c0023a33:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a3a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023a3e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023a44:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a49:	eb 3d                	jmp    c0023a88 <IDE::open(int, int, void*)+0x31e>
c0023a4b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023a51:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023a58:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a5f:	66 05 06 02          	add    ax,0x206
c0023a63:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a6a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023a71:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a78:	66 05 06 02          	add    ax,0x206
c0023a7c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023a83:	e9 e5 fe ff ff       	jmp    c002396d <IDE::open(int, int, void*)+0x203>
c0023a88:	50                   	push   eax
c0023a89:	50                   	push   eax
c0023a8a:	6a 00                	push   0x0
c0023a8c:	53                   	push   ebx
c0023a8d:	e8 60 fa ff ff       	call   c00234f2 <IDE::prepareInterrupt(unsigned char)>
c0023a92:	5a                   	pop    edx
c0023a93:	59                   	pop    ecx
c0023a94:	6a 01                	push   0x1
c0023a96:	53                   	push   ebx
c0023a97:	e8 56 fa ff ff       	call   c00234f2 <IDE::prepareInterrupt(unsigned char)>
c0023a9c:	83 c4 0c             	add    esp,0xc
c0023a9f:	6a 00                	push   0x0
c0023aa1:	6a 00                	push   0x0
c0023aa3:	53                   	push   ebx
c0023aa4:	e8 7b fc ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c0023aa9:	83 c4 0c             	add    esp,0xc
c0023aac:	6a 00                	push   0x0
c0023aae:	6a 01                	push   0x1
c0023ab0:	53                   	push   ebx
c0023ab1:	e8 6e fc ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c0023ab6:	83 c4 10             	add    esp,0x10
c0023ab9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023ac0:	74 34                	je     c0023af6 <IDE::open(int, int, void*)+0x38c>
c0023ac2:	83 ec 0c             	sub    esp,0xc
c0023ac5:	53                   	push   ebx
c0023ac6:	6a 01                	push   0x1
c0023ac8:	68 ec 36 02 c0       	push   0xc00236ec
c0023acd:	6a 0e                	push   0xe
c0023acf:	53                   	push   ebx
c0023ad0:	e8 91 02 ff ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ad5:	83 c4 14             	add    esp,0x14
c0023ad8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023ade:	53                   	push   ebx
c0023adf:	6a 01                	push   0x1
c0023ae1:	68 08 37 02 c0       	push   0xc0023708
c0023ae6:	6a 0f                	push   0xf
c0023ae8:	53                   	push   ebx
c0023ae9:	e8 78 02 ff ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023aee:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023af4:	eb 38                	jmp    c0023b2e <IDE::open(int, int, void*)+0x3c4>
c0023af6:	83 ec 0c             	sub    esp,0xc
c0023af9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023b03:	53                   	push   ebx
c0023b04:	6a 00                	push   0x0
c0023b06:	68 ec 36 02 c0       	push   0xc00236ec
c0023b0b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023b11:	53                   	push   ebx
c0023b12:	e8 4f 02 ff ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b17:	83 c4 14             	add    esp,0x14
c0023b1a:	53                   	push   ebx
c0023b1b:	6a 00                	push   0x0
c0023b1d:	68 08 37 02 c0       	push   0xc0023708
c0023b22:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023b28:	53                   	push   ebx
c0023b29:	e8 38 02 ff ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b30:	83 c4 20             	add    esp,0x20
c0023b33:	83 ec 0c             	sub    esp,0xc
c0023b36:	53                   	push   ebx
c0023b37:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023b3a:	83 c4 0c             	add    esp,0xc
c0023b3d:	6a 07                	push   0x7
c0023b3f:	6a 00                	push   0x0
c0023b41:	53                   	push   ebx
c0023b42:	e8 91 fa ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023b47:	83 c4 0c             	add    esp,0xc
c0023b4a:	6a 07                	push   0x7
c0023b4c:	6a 01                	push   0x1
c0023b4e:	53                   	push   ebx
c0023b4f:	e8 84 fa ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023b54:	83 c4 0c             	add    esp,0xc
c0023b57:	6a 01                	push   0x1
c0023b59:	6a 00                	push   0x0
c0023b5b:	53                   	push   ebx
c0023b5c:	e8 c3 fb ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c0023b61:	83 c4 0c             	add    esp,0xc
c0023b64:	6a 01                	push   0x1
c0023b66:	6a 01                	push   0x1
c0023b68:	53                   	push   ebx
c0023b69:	e8 b6 fb ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c0023b6e:	83 c4 2c             	add    esp,0x2c
c0023b71:	31 c0                	xor    eax,eax
c0023b73:	5b                   	pop    ebx
c0023b74:	5e                   	pop    esi
c0023b75:	5f                   	pop    edi
c0023b76:	5d                   	pop    ebp
c0023b77:	c3                   	ret    

c0023b78 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023b78:	55                   	push   ebp
c0023b79:	57                   	push   edi
c0023b7a:	56                   	push   esi
c0023b7b:	53                   	push   ebx
c0023b7c:	83 ec 1c             	sub    esp,0x1c
c0023b7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023b83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b87:	8d 50 f8             	lea    edx,[eax-0x8]
c0023b8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b8e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023b92:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023b96:	80 fa 03             	cmp    dl,0x3
c0023b99:	77 5d                	ja     c0023bf8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023b9b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023b9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ba3:	0f b6 db             	movzx  ebx,bl
c0023ba6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023ba9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023bad:	83 ca 80             	or     edx,0xffffff80
c0023bb0:	0f b6 d2             	movzx  edx,dl
c0023bb3:	52                   	push   edx
c0023bb4:	6a 0c                	push   0xc
c0023bb6:	53                   	push   ebx
c0023bb7:	56                   	push   esi
c0023bb8:	e8 5b f9 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bbd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023bca:	0f b6 c0             	movzx  eax,al
c0023bcd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023bd1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023bd3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023bd8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023bdc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023be0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023be4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023bec:	83 c4 2c             	add    esp,0x2c
c0023bef:	5b                   	pop    ebx
c0023bf0:	5e                   	pop    esi
c0023bf1:	5f                   	pop    edi
c0023bf2:	5d                   	pop    ebp
c0023bf3:	e9 20 f9 ff ff       	jmp    c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bf8:	3c 07                	cmp    al,0x7
c0023bfa:	77 10                	ja     c0023c0c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023bfc:	0f b6 db             	movzx  ebx,bl
c0023bff:	0f b6 d0             	movzx  edx,al
c0023c02:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023c0a:	eb 2d                	jmp    c0023c39 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c0c:	3c 0d                	cmp    al,0xd
c0023c0e:	77 13                	ja     c0023c23 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023c10:	0f b6 db             	movzx  ebx,bl
c0023c13:	0f b6 c0             	movzx  eax,al
c0023c16:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023c1d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023c21:	eb 16                	jmp    c0023c39 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c23:	3c 15                	cmp    al,0x15
c0023c25:	77 14                	ja     c0023c3b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023c27:	0f b6 db             	movzx  ebx,bl
c0023c2a:	0f b6 c0             	movzx  eax,al
c0023c2d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023c35:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023c39:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c3b:	83 c4 1c             	add    esp,0x1c
c0023c3e:	5b                   	pop    ebx
c0023c3f:	5e                   	pop    esi
c0023c40:	5f                   	pop    edi
c0023c41:	5d                   	pop    ebp
c0023c42:	c3                   	ret    
c0023c43:	90                   	nop

c0023c44 <IDE::detect()>:
c0023c44:	55                   	push   ebp
c0023c45:	57                   	push   edi
c0023c46:	56                   	push   esi
c0023c47:	53                   	push   ebx
c0023c48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023c4e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023c55:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023c5c:	0f 85 9d 02 00 00    	jne    c0023eff <IDE::detect()+0x2bb>
c0023c62:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023c69:	31 f6                	xor    esi,esi
c0023c6b:	31 ed                	xor    ebp,ebp
c0023c6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023c75:	89 e8                	mov    eax,ebp
c0023c77:	c1 e0 06             	shl    eax,0x6
c0023c7a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023c82:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023c86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023c8a:	c1 e0 04             	shl    eax,0x4
c0023c8d:	83 c8 a0             	or     eax,0xffffffa0
c0023c90:	0f b6 c0             	movzx  eax,al
c0023c93:	50                   	push   eax
c0023c94:	6a 06                	push   0x6
c0023c96:	56                   	push   esi
c0023c97:	53                   	push   ebx
c0023c98:	e8 7b f8 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c9d:	83 c4 0c             	add    esp,0xc
c0023ca0:	6a 0c                	push   0xc
c0023ca2:	56                   	push   esi
c0023ca3:	53                   	push   ebx
c0023ca4:	e8 2f f9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023ca9:	83 c4 0c             	add    esp,0xc
c0023cac:	6a 0c                	push   0xc
c0023cae:	56                   	push   esi
c0023caf:	53                   	push   ebx
c0023cb0:	e8 23 f9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023cb5:	83 c4 0c             	add    esp,0xc
c0023cb8:	6a 0c                	push   0xc
c0023cba:	56                   	push   esi
c0023cbb:	53                   	push   ebx
c0023cbc:	e8 17 f9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023cc1:	83 c4 0c             	add    esp,0xc
c0023cc4:	6a 0c                	push   0xc
c0023cc6:	56                   	push   esi
c0023cc7:	53                   	push   ebx
c0023cc8:	e8 0b f9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023ccd:	68 ec 00 00 00       	push   0xec
c0023cd2:	6a 07                	push   0x7
c0023cd4:	56                   	push   esi
c0023cd5:	53                   	push   ebx
c0023cd6:	e8 3d f8 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cdb:	83 c4 1c             	add    esp,0x1c
c0023cde:	6a 0c                	push   0xc
c0023ce0:	56                   	push   esi
c0023ce1:	53                   	push   ebx
c0023ce2:	e8 f1 f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023ce7:	83 c4 0c             	add    esp,0xc
c0023cea:	6a 0c                	push   0xc
c0023cec:	56                   	push   esi
c0023ced:	53                   	push   ebx
c0023cee:	e8 e5 f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023cf3:	83 c4 0c             	add    esp,0xc
c0023cf6:	6a 0c                	push   0xc
c0023cf8:	56                   	push   esi
c0023cf9:	53                   	push   ebx
c0023cfa:	e8 d9 f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	6a 0c                	push   0xc
c0023d04:	56                   	push   esi
c0023d05:	53                   	push   ebx
c0023d06:	e8 cd f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023d0b:	83 c4 0c             	add    esp,0xc
c0023d0e:	6a 0c                	push   0xc
c0023d10:	56                   	push   esi
c0023d11:	53                   	push   ebx
c0023d12:	e8 c1 f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023d17:	83 c4 10             	add    esp,0x10
c0023d1a:	84 c0                	test   al,al
c0023d1c:	0f 84 63 01 00 00    	je     c0023e85 <IDE::detect()+0x241>
c0023d22:	31 ff                	xor    edi,edi
c0023d24:	50                   	push   eax
c0023d25:	6a 0c                	push   0xc
c0023d27:	56                   	push   esi
c0023d28:	53                   	push   ebx
c0023d29:	e8 aa f8 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023d2e:	83 c4 10             	add    esp,0x10
c0023d31:	a8 01                	test   al,0x1
c0023d33:	0f 85 6d 01 00 00    	jne    c0023ea6 <IDE::detect()+0x262>
c0023d39:	84 c0                	test   al,al
c0023d3b:	78 04                	js     c0023d41 <IDE::detect()+0xfd>
c0023d3d:	a8 08                	test   al,0x8
c0023d3f:	75 27                	jne    c0023d68 <IDE::detect()+0x124>
c0023d41:	47                   	inc    edi
c0023d42:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023d48:	7e da                	jle    c0023d24 <IDE::detect()+0xe0>
c0023d4a:	50                   	push   eax
c0023d4b:	50                   	push   eax
c0023d4c:	6a 00                	push   0x0
c0023d4e:	68 40 4b 4c 00       	push   0x4c4b40
c0023d53:	e8 67 a4 ff ff       	call   c001e1bf <nanoSleep(unsigned long long)>
c0023d58:	83 c4 10             	add    esp,0x10
c0023d5b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023d61:	75 c1                	jne    c0023d24 <IDE::detect()+0xe0>
c0023d63:	e9 3e 01 00 00       	jmp    c0023ea6 <IDE::detect()+0x262>
c0023d68:	31 c9                	xor    ecx,ecx
c0023d6a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023d6e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023d72:	83 ec 0c             	sub    esp,0xc
c0023d75:	68 80 00 00 00       	push   0x80
c0023d7a:	57                   	push   edi
c0023d7b:	6a 00                	push   0x0
c0023d7d:	56                   	push   esi
c0023d7e:	53                   	push   ebx
c0023d7f:	e8 f4 fd ff ff       	call   c0023b78 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023d84:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023d89:	89 e8                	mov    eax,ebp
c0023d8b:	89 d1                	mov    ecx,edx
c0023d8d:	c1 e0 06             	shl    eax,0x6
c0023d90:	01 d8                	add    eax,ebx
c0023d92:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023d99:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023da0:	89 f2                	mov    edx,esi
c0023da2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023da8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023dac:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023db2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023db6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023dbd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023dc5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023dcc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023dd4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023dda:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023de1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023de7:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023deb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023def:	83 c4 20             	add    esp,0x20
c0023df2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023df5:	83 c0 02             	add    eax,0x2
c0023df8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023dfe:	83 c7 02             	add    edi,0x2
c0023e01:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023e04:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023e0a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023e0e:	75 e2                	jne    c0023df2 <IDE::detect()+0x1ae>
c0023e10:	89 e8                	mov    eax,ebp
c0023e12:	c1 e0 06             	shl    eax,0x6
c0023e15:	01 d8                	add    eax,ebx
c0023e17:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023e1d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023e24:	66 c1 ea 09          	shr    dx,0x9
c0023e28:	83 e2 01             	and    edx,0x1
c0023e2b:	84 c9                	test   cl,cl
c0023e2d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023e33:	75 22                	jne    c0023e57 <IDE::detect()+0x213>
c0023e35:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023e3c:	74 46                	je     c0023e84 <IDE::detect()+0x240>
c0023e3e:	83 ec 0c             	sub    esp,0xc
c0023e41:	68 7c 01 00 00       	push   0x17c
c0023e46:	e8 12 bb fe ff       	call   c000f95d <malloc>
c0023e4b:	89 c7                	mov    edi,eax
c0023e4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e50:	e8 15 05 00 00       	call   c002436a <ATA::ATA()>
c0023e55:	eb 17                	jmp    c0023e6e <IDE::detect()+0x22a>
c0023e57:	83 ec 0c             	sub    esp,0xc
c0023e5a:	68 80 01 00 00       	push   0x180
c0023e5f:	e8 f9 ba fe ff       	call   c000f95d <malloc>
c0023e64:	89 c7                	mov    edi,eax
c0023e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e69:	e8 88 0b 00 00       	call   c00249f6 <ATAPI::ATAPI()>
c0023e6e:	5a                   	pop    edx
c0023e6f:	59                   	pop    ecx
c0023e70:	57                   	push   edi
c0023e71:	53                   	push   ebx
c0023e72:	e8 77 ff fe ff       	call   c0013dee <Device::addChild(Device*)>
c0023e77:	8b 07                	mov    eax,DWORD PTR [edi]
c0023e79:	53                   	push   ebx
c0023e7a:	55                   	push   ebp
c0023e7b:	6a 00                	push   0x0
c0023e7d:	57                   	push   edi
c0023e7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e81:	83 c4 20             	add    esp,0x20
c0023e84:	45                   	inc    ebp
c0023e85:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023e8a:	74 0d                	je     c0023e99 <IDE::detect()+0x255>
c0023e8c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023e94:	e9 dc fd ff ff       	jmp    c0023c75 <IDE::detect()+0x31>
c0023e99:	4e                   	dec    esi
c0023e9a:	74 63                	je     c0023eff <IDE::detect()+0x2bb>
c0023e9c:	be 01 00 00 00       	mov    esi,0x1
c0023ea1:	e9 c7 fd ff ff       	jmp    c0023c6d <IDE::detect()+0x29>
c0023ea6:	50                   	push   eax
c0023ea7:	6a 04                	push   0x4
c0023ea9:	56                   	push   esi
c0023eaa:	53                   	push   ebx
c0023eab:	e8 28 f7 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023eb0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023eb4:	83 c4 0c             	add    esp,0xc
c0023eb7:	6a 05                	push   0x5
c0023eb9:	56                   	push   esi
c0023eba:	53                   	push   ebx
c0023ebb:	e8 18 f7 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023ec0:	83 c4 10             	add    esp,0x10
c0023ec3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023ec7:	80 fa 14             	cmp    dl,0x14
c0023eca:	75 04                	jne    c0023ed0 <IDE::detect()+0x28c>
c0023ecc:	3c eb                	cmp    al,0xeb
c0023ece:	eb 07                	jmp    c0023ed7 <IDE::detect()+0x293>
c0023ed0:	3c 96                	cmp    al,0x96
c0023ed2:	75 b1                	jne    c0023e85 <IDE::detect()+0x241>
c0023ed4:	80 fa 69             	cmp    dl,0x69
c0023ed7:	75 ac                	jne    c0023e85 <IDE::detect()+0x241>
c0023ed9:	68 a1 00 00 00       	push   0xa1
c0023ede:	6a 07                	push   0x7
c0023ee0:	56                   	push   esi
c0023ee1:	53                   	push   ebx
c0023ee2:	e8 31 f6 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee7:	5f                   	pop    edi
c0023ee8:	58                   	pop    eax
c0023ee9:	6a 00                	push   0x0
c0023eeb:	68 40 42 0f 00       	push   0xf4240
c0023ef0:	e8 ca a2 ff ff       	call   c001e1bf <nanoSleep(unsigned long long)>
c0023ef5:	83 c4 10             	add    esp,0x10
c0023ef8:	b1 01                	mov    cl,0x1
c0023efa:	e9 6b fe ff ff       	jmp    c0023d6a <IDE::detect()+0x126>
c0023eff:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023f05:	5b                   	pop    ebx
c0023f06:	5e                   	pop    esi
c0023f07:	5f                   	pop    edi
c0023f08:	5d                   	pop    ebp
c0023f09:	c3                   	ret    

c0023f0a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023f0a:	55                   	push   ebp
c0023f0b:	57                   	push   edi
c0023f0c:	56                   	push   esi
c0023f0d:	53                   	push   ebx
c0023f0e:	83 ec 1c             	sub    esp,0x1c
c0023f11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023f15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f19:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023f1d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023f21:	88 c3                	mov    bl,al
c0023f23:	84 c0                	test   al,al
c0023f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f29:	0f 84 81 00 00 00    	je     c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f2f:	83 ec 0c             	sub    esp,0xc
c0023f32:	68 43 cd 02 c0       	push   0xc002cd43
c0023f37:	e8 79 ea fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0023f3c:	83 c4 10             	add    esp,0x10
c0023f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f43:	3c 01                	cmp    al,0x1
c0023f45:	74 63                	je     c0023faa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023f47:	3c 02                	cmp    al,0x2
c0023f49:	75 53                	jne    c0023f9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023f4b:	d1 e6                	shl    esi,1
c0023f4d:	09 ee                	or     esi,ebp
c0023f4f:	50                   	push   eax
c0023f50:	89 f0                	mov    eax,esi
c0023f52:	6a 01                	push   0x1
c0023f54:	0f b6 f0             	movzx  esi,al
c0023f57:	c1 e6 06             	shl    esi,0x6
c0023f5a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023f62:	50                   	push   eax
c0023f63:	57                   	push   edi
c0023f64:	e8 6f f6 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023f69:	83 c4 10             	add    esp,0x10
c0023f6c:	a8 01                	test   al,0x1
c0023f6e:	74 02                	je     c0023f72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023f70:	b3 07                	mov    bl,0x7
c0023f72:	a8 02                	test   al,0x2
c0023f74:	74 02                	je     c0023f78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023f76:	b3 03                	mov    bl,0x3
c0023f78:	a8 04                	test   al,0x4
c0023f7a:	74 02                	je     c0023f7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023f7c:	b3 14                	mov    bl,0x14
c0023f7e:	a8 08                	test   al,0x8
c0023f80:	74 02                	je     c0023f84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023f82:	b3 03                	mov    bl,0x3
c0023f84:	a8 10                	test   al,0x10
c0023f86:	74 02                	je     c0023f8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023f88:	b3 15                	mov    bl,0x15
c0023f8a:	a8 20                	test   al,0x20
c0023f8c:	74 02                	je     c0023f90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023f8e:	b3 03                	mov    bl,0x3
c0023f90:	a8 40                	test   al,0x40
c0023f92:	74 02                	je     c0023f96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023f94:	b3 16                	mov    bl,0x16
c0023f96:	84 c0                	test   al,al
c0023f98:	79 16                	jns    c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f9a:	b3 0d                	mov    bl,0xd
c0023f9c:	eb 12                	jmp    c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f9e:	3c 03                	cmp    al,0x3
c0023fa0:	74 0c                	je     c0023fae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023fa2:	3c 04                	cmp    al,0x4
c0023fa4:	75 0a                	jne    c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fa6:	b3 08                	mov    bl,0x8
c0023fa8:	eb 06                	jmp    c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023faa:	b3 13                	mov    bl,0x13
c0023fac:	eb 02                	jmp    c0023fb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fae:	b3 17                	mov    bl,0x17
c0023fb0:	83 c4 1c             	add    esp,0x1c
c0023fb3:	88 d8                	mov    al,bl
c0023fb5:	5b                   	pop    ebx
c0023fb6:	5e                   	pop    esi
c0023fb7:	5f                   	pop    edi
c0023fb8:	5d                   	pop    ebp
c0023fb9:	c3                   	ret    

c0023fba <IDE::polling(unsigned char, unsigned int)>:
c0023fba:	57                   	push   edi
c0023fbb:	56                   	push   esi
c0023fbc:	53                   	push   ebx
c0023fbd:	bb 04 00 00 00       	mov    ebx,0x4
c0023fc2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023fc6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023fcb:	52                   	push   edx
c0023fcc:	6a 0c                	push   0xc
c0023fce:	56                   	push   esi
c0023fcf:	57                   	push   edi
c0023fd0:	e8 03 f6 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023fd5:	83 c4 10             	add    esp,0x10
c0023fd8:	4b                   	dec    ebx
c0023fd9:	75 f0                	jne    c0023fcb <IDE::polling(unsigned char, unsigned int)+0x11>
c0023fdb:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023fe0:	50                   	push   eax
c0023fe1:	6a 0c                	push   0xc
c0023fe3:	56                   	push   esi
c0023fe4:	57                   	push   edi
c0023fe5:	e8 ee f5 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	a8 01                	test   al,0x1
c0023fef:	75 17                	jne    c0024008 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ff1:	a8 20                	test   al,0x20
c0023ff3:	75 0f                	jne    c0024004 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023ff5:	4b                   	dec    ebx
c0023ff6:	74 10                	je     c0024008 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ff8:	84 c0                	test   al,al
c0023ffa:	78 e4                	js     c0023fe0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ffc:	a8 08                	test   al,0x8
c0023ffe:	74 e0                	je     c0023fe0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024000:	31 c0                	xor    eax,eax
c0024002:	eb 06                	jmp    c002400a <IDE::polling(unsigned char, unsigned int)+0x50>
c0024004:	b0 01                	mov    al,0x1
c0024006:	eb 02                	jmp    c002400a <IDE::polling(unsigned char, unsigned int)+0x50>
c0024008:	b0 02                	mov    al,0x2
c002400a:	5b                   	pop    ebx
c002400b:	5e                   	pop    esi
c002400c:	5f                   	pop    edi
c002400d:	c3                   	ret    

c002400e <SATABus::close(int, int, void*)>:
c002400e:	31 c0                	xor    eax,eax
c0024010:	c3                   	ret    
c0024011:	90                   	nop

c0024012 <SATABus::detect()>:
c0024012:	c3                   	ret    
c0024013:	90                   	nop

c0024014 <SATABus::SATABus()>:
c0024014:	83 ec 0c             	sub    esp,0xc
c0024017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002401b:	83 ec 08             	sub    esp,0x8
c002401e:	68 7c cd 02 c0       	push   0xc002cd7c
c0024023:	50                   	push   eax
c0024024:	e8 73 01 ff ff       	call   c001419c <HardDiskController::HardDiskController(char const*)>
c0024029:	83 c4 10             	add    esp,0x10
c002402c:	ba d0 cd 02 c0       	mov    edx,0xc002cdd0
c0024031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024035:	89 10                	mov    DWORD PTR [eax],edx
c0024037:	83 ec 0c             	sub    esp,0xc
c002403a:	6a 50                	push   0x50
c002403c:	e8 10 be fe ff       	call   c000fe51 <Phys::allocateContiguousPages(int)>
c0024041:	83 c4 10             	add    esp,0x10
c0024044:	89 c2                	mov    edx,eax
c0024046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002404a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024050:	83 ec 0c             	sub    esp,0xc
c0024053:	6a 50                	push   0x50
c0024055:	e8 89 d5 fe ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c002405a:	83 c4 10             	add    esp,0x10
c002405d:	89 c2                	mov    edx,eax
c002405f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024063:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024069:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c002406e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024072:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002407c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024082:	83 ec 0c             	sub    esp,0xc
c0024085:	6a 03                	push   0x3
c0024087:	6a 50                	push   0x50
c0024089:	51                   	push   ecx
c002408a:	52                   	push   edx
c002408b:	50                   	push   eax
c002408c:	e8 ef de fe ff       	call   c0011f80 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024091:	83 c4 20             	add    esp,0x20
c0024094:	90                   	nop
c0024095:	83 c4 0c             	add    esp,0xc
c0024098:	c3                   	ret    
c0024099:	90                   	nop

c002409a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002409a:	83 ec 0c             	sub    esp,0xc
c002409d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240a1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00240a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00240a7:	09 c2                	or     edx,eax
c00240a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00240b5:	31 c0                	xor    eax,eax
c00240b7:	c1 e9 08             	shr    ecx,0x8
c00240ba:	83 e1 0f             	and    ecx,0xf
c00240bd:	39 c8                	cmp    eax,ecx
c00240bf:	74 0a                	je     c00240cb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00240c1:	f6 c2 01             	test   dl,0x1
c00240c4:	74 18                	je     c00240de <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00240c6:	d1 ea                	shr    edx,1
c00240c8:	40                   	inc    eax
c00240c9:	eb f2                	jmp    c00240bd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00240cb:	83 ec 0c             	sub    esp,0xc
c00240ce:	68 a0 cd 02 c0       	push   0xc002cda0
c00240d3:	e8 7b 62 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00240d8:	83 c4 10             	add    esp,0x10
c00240db:	83 c8 ff             	or     eax,0xffffffff
c00240de:	83 c4 0c             	add    esp,0xc
c00240e1:	c3                   	ret    

c00240e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00240e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240e6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00240e9:	89 c2                	mov    edx,eax
c00240eb:	c1 ea 08             	shr    edx,0x8
c00240ee:	83 e2 0f             	and    edx,0xf
c00240f1:	fe ca                	dec    dl
c00240f3:	75 31                	jne    c0024126 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00240f5:	83 e0 0f             	and    eax,0xf
c00240f8:	3c 03                	cmp    al,0x3
c00240fa:	75 2a                	jne    c0024126 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00240fc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00240ff:	b8 02 00 00 00       	mov    eax,0x2
c0024104:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002410a:	74 1c                	je     c0024128 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002410c:	b8 04 00 00 00       	mov    eax,0x4
c0024111:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024117:	74 0f                	je     c0024128 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024119:	31 c0                	xor    eax,eax
c002411b:	83 fa 03             	cmp    edx,0x3
c002411e:	0f 94 c0             	sete   al
c0024121:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024125:	c3                   	ret    
c0024126:	31 c0                	xor    eax,eax
c0024128:	c3                   	ret    
c0024129:	90                   	nop

c002412a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002412a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002412e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024131:	0f ba e2 0f          	bt     edx,0xf
c0024135:	72 f7                	jb     c002412e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024137:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002413a:	83 ca 10             	or     edx,0x10
c002413d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024143:	83 ca 01             	or     edx,0x1
c0024146:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024149:	c3                   	ret    

c002414a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002414a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002414e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024151:	83 e2 fe             	and    edx,0xfffffffe
c0024154:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024157:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002415a:	83 e2 ef             	and    edx,0xffffffef
c002415d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024160:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024163:	0f ba e2 0e          	bt     edx,0xe
c0024167:	72 f7                	jb     c0024160 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024169:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002416c:	0f ba e2 0f          	bt     edx,0xf
c0024170:	72 ee                	jb     c0024160 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024172:	c3                   	ret    
c0024173:	90                   	nop

c0024174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024174:	55                   	push   ebp
c0024175:	57                   	push   edi
c0024176:	56                   	push   esi
c0024177:	53                   	push   ebx
c0024178:	83 ec 1c             	sub    esp,0x1c
c002417b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002417f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024183:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024187:	53                   	push   ebx
c0024188:	89 fd                	mov    ebp,edi
c002418a:	56                   	push   esi
c002418b:	c1 e5 0a             	shl    ebp,0xa
c002418e:	e8 b7 ff ff ff       	call   c002414a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024193:	83 ec 0c             	sub    esp,0xc
c0024196:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002419c:	01 e8                	add    eax,ebp
c002419e:	89 03                	mov    DWORD PTR [ebx],eax
c00241a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241a2:	68 00 04 00 00       	push   0x400
c00241a7:	6a 00                	push   0x0
c00241a9:	50                   	push   eax
c00241aa:	e8 a1 c5 fd ff       	call   c0000750 <memset>
c00241af:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00241b5:	89 fa                	mov    edx,edi
c00241b7:	01 e8                	add    eax,ebp
c00241b9:	c1 e7 0d             	shl    edi,0xd
c00241bc:	89 03                	mov    DWORD PTR [ebx],eax
c00241be:	c1 e2 08             	shl    edx,0x8
c00241c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00241c8:	81 c2 00 80 00 00    	add    edx,0x8000
c00241ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00241d2:	89 d0                	mov    eax,edx
c00241d4:	83 c4 1c             	add    esp,0x1c
c00241d7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00241dd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00241e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00241e3:	68 00 01 00 00       	push   0x100
c00241e8:	6a 00                	push   0x0
c00241ea:	50                   	push   eax
c00241eb:	e8 60 c5 fd ff       	call   c0000750 <memset>
c00241f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241f4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00241fa:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024200:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024204:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024207:	83 c4 10             	add    esp,0x10
c002420a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024211:	31 ff                	xor    edi,edi
c0024213:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024219:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002421f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024223:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024229:	83 c5 20             	add    ebp,0x20
c002422c:	01 f8                	add    eax,edi
c002422e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024231:	52                   	push   edx
c0024232:	68 00 01 00 00       	push   0x100
c0024237:	6a 00                	push   0x0
c0024239:	50                   	push   eax
c002423a:	e8 11 c5 fd ff       	call   c0000750 <memset>
c002423f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024243:	83 c4 10             	add    esp,0x10
c0024246:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002424c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024253:	01 f8                	add    eax,edi
c0024255:	81 c7 00 01 00 00    	add    edi,0x100
c002425b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002425e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024264:	75 b3                	jne    c0024219 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024266:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002426a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002426e:	83 c4 1c             	add    esp,0x1c
c0024271:	5b                   	pop    ebx
c0024272:	5e                   	pop    esi
c0024273:	5f                   	pop    edi
c0024274:	5d                   	pop    ebp
c0024275:	e9 b0 fe ff ff       	jmp    c002412a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002427a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002427a:	55                   	push   ebp
c002427b:	57                   	push   edi
c002427c:	56                   	push   esi
c002427d:	53                   	push   ebx
c002427e:	31 db                	xor    ebx,ebx
c0024280:	83 ec 0c             	sub    esp,0xc
c0024283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024287:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002428b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002428e:	f7 c7 01 00 00 00    	test   edi,0x1
c0024294:	74 7a                	je     c0024310 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024296:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002429a:	89 d8                	mov    eax,ebx
c002429c:	c1 e0 07             	shl    eax,0x7
c002429f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00242a6:	55                   	push   ebp
c00242a7:	56                   	push   esi
c00242a8:	e8 35 fe ff ff       	call   c00240e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00242ad:	5a                   	pop    edx
c00242ae:	83 f8 01             	cmp    eax,0x1
c00242b1:	59                   	pop    ecx
c00242b2:	75 21                	jne    c00242d5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00242b4:	50                   	push   eax
c00242b5:	53                   	push   ebx
c00242b6:	55                   	push   ebp
c00242b7:	56                   	push   esi
c00242b8:	e8 b7 fe ff ff       	call   c0024174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00242bd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00242c4:	e8 94 b6 fe ff       	call   c000f95d <malloc>
c00242c9:	89 c5                	mov    ebp,eax
c00242cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00242ce:	e8 87 0d 00 00       	call   c002505a <SATA::SATA()>
c00242d3:	eb 24                	jmp    c00242f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00242d5:	83 f8 04             	cmp    eax,0x4
c00242d8:	75 36                	jne    c0024310 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00242da:	51                   	push   ecx
c00242db:	53                   	push   ebx
c00242dc:	55                   	push   ebp
c00242dd:	56                   	push   esi
c00242de:	e8 91 fe ff ff       	call   c0024174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00242e3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00242ea:	e8 6e b6 fe ff       	call   c000f95d <malloc>
c00242ef:	89 c5                	mov    ebp,eax
c00242f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00242f4:	e8 d7 10 00 00       	call   c00253d0 <SATAPI::SATAPI()>
c00242f9:	58                   	pop    eax
c00242fa:	5a                   	pop    edx
c00242fb:	55                   	push   ebp
c00242fc:	56                   	push   esi
c00242fd:	e8 ec fa fe ff       	call   c0013dee <Device::addChild(Device*)>
c0024302:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0024305:	56                   	push   esi
c0024306:	6a 00                	push   0x0
c0024308:	53                   	push   ebx
c0024309:	55                   	push   ebp
c002430a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002430d:	83 c4 20             	add    esp,0x20
c0024310:	d1 ef                	shr    edi,1
c0024312:	43                   	inc    ebx
c0024313:	83 fb 20             	cmp    ebx,0x20
c0024316:	0f 85 72 ff ff ff    	jne    c002428e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002431c:	83 c4 0c             	add    esp,0xc
c002431f:	5b                   	pop    ebx
c0024320:	5e                   	pop    esi
c0024321:	5f                   	pop    edi
c0024322:	5d                   	pop    ebp
c0024323:	c3                   	ret    

c0024324 <SATABus::open(int, int, void*)>:
c0024324:	83 ec 14             	sub    esp,0x14
c0024327:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002432b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024331:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024337:	52                   	push   edx
c0024338:	50                   	push   eax
c0024339:	e8 3c ff ff ff       	call   c002427a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002433e:	31 c0                	xor    eax,eax
c0024340:	83 c4 1c             	add    esp,0x1c
c0024343:	c3                   	ret    

c0024344 <ATA::close(int, int, void*)>:
c0024344:	83 ec 0c             	sub    esp,0xc
c0024347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002434b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024351:	85 c0                	test   eax,eax
c0024353:	74 0c                	je     c0024361 <ATA::close(int, int, void*)+0x1d>
c0024355:	83 ec 0c             	sub    esp,0xc
c0024358:	8b 10                	mov    edx,DWORD PTR [eax]
c002435a:	50                   	push   eax
c002435b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002435e:	83 c4 10             	add    esp,0x10
c0024361:	31 c0                	xor    eax,eax
c0024363:	83 c4 0c             	add    esp,0xc
c0024366:	c3                   	ret    
c0024367:	90                   	nop

c0024368 <ATA::powerSaving(PowerSavingLevel)>:
c0024368:	c3                   	ret    
c0024369:	90                   	nop

c002436a <ATA::ATA()>:
c002436a:	83 ec 0c             	sub    esp,0xc
c002436d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024371:	83 ec 04             	sub    esp,0x4
c0024374:	68 00 02 00 00       	push   0x200
c0024379:	68 c5 ce 02 c0       	push   0xc002cec5
c002437e:	50                   	push   eax
c002437f:	e8 a0 fe fe ff       	call   c0014224 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024384:	83 c4 10             	add    esp,0x10
c0024387:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c002438c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024390:	89 10                	mov    DWORD PTR [eax],edx
c0024392:	90                   	nop
c0024393:	83 c4 0c             	add    esp,0xc
c0024396:	c3                   	ret    
c0024397:	90                   	nop

c0024398 <ATA::flush(bool)>:
c0024398:	53                   	push   ebx
c0024399:	83 ec 08             	sub    esp,0x8
c002439c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00243a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243a5:	19 c0                	sbb    eax,eax
c00243a7:	83 e0 fd             	and    eax,0xfffffffd
c00243aa:	05 ea 00 00 00       	add    eax,0xea
c00243af:	50                   	push   eax
c00243b0:	6a 07                	push   0x7
c00243b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243b9:	50                   	push   eax
c00243ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c0:	e8 53 f1 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c5:	83 c4 0c             	add    esp,0xc
c00243c8:	6a 00                	push   0x0
c00243ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243d1:	50                   	push   eax
c00243d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d8:	e8 dd fb ff ff       	call   c0023fba <IDE::polling(unsigned char, unsigned int)>
c00243dd:	83 c4 18             	add    esp,0x18
c00243e0:	5b                   	pop    ebx
c00243e1:	c3                   	ret    

c00243e2 <ATA::readyForCommand()>:
c00243e2:	56                   	push   esi
c00243e3:	53                   	push   ebx
c00243e4:	31 db                	xor    ebx,ebx
c00243e6:	50                   	push   eax
c00243e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243eb:	50                   	push   eax
c00243ec:	6a 0c                	push   0xc
c00243ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243f5:	50                   	push   eax
c00243f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243fc:	e8 d7 f1 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0024401:	83 c4 10             	add    esp,0x10
c0024404:	a8 88                	test   al,0x88
c0024406:	74 23                	je     c002442b <ATA::readyForCommand()+0x49>
c0024408:	43                   	inc    ebx
c0024409:	83 fb 63             	cmp    ebx,0x63
c002440c:	7e dd                	jle    c00243eb <ATA::readyForCommand()+0x9>
c002440e:	51                   	push   ecx
c002440f:	51                   	push   ecx
c0024410:	6a 00                	push   0x0
c0024412:	68 40 42 0f 00       	push   0xf4240
c0024417:	e8 a3 9d ff ff       	call   c001e1bf <nanoSleep(unsigned long long)>
c002441c:	83 c4 10             	add    esp,0x10
c002441f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024425:	75 c4                	jne    c00243eb <ATA::readyForCommand()+0x9>
c0024427:	31 c0                	xor    eax,eax
c0024429:	eb 02                	jmp    c002442d <ATA::readyForCommand()+0x4b>
c002442b:	b0 01                	mov    al,0x1
c002442d:	5a                   	pop    edx
c002442e:	5b                   	pop    ebx
c002442f:	5e                   	pop    esi
c0024430:	c3                   	ret    
c0024431:	90                   	nop

c0024432 <ATA::access(unsigned long long, int, void*, bool)>:
c0024432:	55                   	push   ebp
c0024433:	57                   	push   edi
c0024434:	56                   	push   esi
c0024435:	53                   	push   ebx
c0024436:	83 ec 38             	sub    esp,0x38
c0024439:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002443d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0024441:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024449:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002444d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024451:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0024455:	68 f4 cd 02 c0       	push   0xc002cdf4
c002445a:	e8 56 e5 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002445f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024469:	83 c4 10             	add    esp,0x10
c002446c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024472:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024476:	c1 e0 06             	shl    eax,0x6
c0024479:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024481:	74 5d                	je     c00244e0 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c0024483:	89 fa                	mov    edx,edi
c0024485:	89 f0                	mov    eax,esi
c0024487:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002448b:	c1 ea 1c             	shr    edx,0x1c
c002448e:	89 d1                	mov    ecx,edx
c0024490:	09 c1                	or     ecx,eax
c0024492:	74 25                	je     c00244b9 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c0024494:	31 ed                	xor    ebp,ebp
c0024496:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002449d:	89 fa                	mov    edx,edi
c002449f:	89 f0                	mov    eax,esi
c00244a1:	0f ad d0             	shrd   eax,edx,cl
c00244a4:	d3 ea                	shr    edx,cl
c00244a6:	f6 c1 20             	test   cl,0x20
c00244a9:	74 02                	je     c00244ad <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c00244ab:	89 d0                	mov    eax,edx
c00244ad:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00244b1:	45                   	inc    ebp
c00244b2:	83 fd 06             	cmp    ebp,0x6
c00244b5:	75 df                	jne    c0024496 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c00244b7:	eb 76                	jmp    c002452f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c00244b9:	89 f0                	mov    eax,esi
c00244bb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00244c0:	89 fa                	mov    edx,edi
c00244c2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00244c9:	0f ac d0 10          	shrd   eax,edx,0x10
c00244cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00244d2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00244d6:	c1 ee 18             	shr    esi,0x18
c00244d9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00244de:	eb 56                	jmp    c0024536 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00244e0:	6a 00                	push   0x0
c00244e2:	6a 3f                	push   0x3f
c00244e4:	57                   	push   edi
c00244e5:	56                   	push   esi
c00244e6:	e8 99 29 00 00       	call   c0026e84 <__umoddi3>
c00244eb:	83 c4 10             	add    esp,0x10
c00244ee:	40                   	inc    eax
c00244ef:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00244f3:	6a 00                	push   0x0
c00244f5:	68 f0 03 00 00       	push   0x3f0
c00244fa:	57                   	push   edi
c00244fb:	56                   	push   esi
c00244fc:	e8 83 28 00 00       	call   c0026d84 <__udivdi3>
c0024501:	83 c4 10             	add    esp,0x10
c0024504:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024509:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024510:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024515:	6a 00                	push   0x0
c0024517:	6a 3f                	push   0x3f
c0024519:	57                   	push   edi
c002451a:	56                   	push   esi
c002451b:	e8 64 28 00 00       	call   c0026d84 <__udivdi3>
c0024520:	83 c4 10             	add    esp,0x10
c0024523:	89 c6                	mov    esi,eax
c0024525:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002452a:	83 e6 0f             	and    esi,0xf
c002452d:	eb 07                	jmp    c0024536 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002452f:	31 f6                	xor    esi,esi
c0024531:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024536:	bf 01 00 00 00       	mov    edi,0x1
c002453b:	50                   	push   eax
c002453c:	6a 00                	push   0x0
c002453e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024545:	50                   	push   eax
c0024546:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002454a:	e8 d5 f1 ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c002454f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024552:	e8 8b fe ff ff       	call   c00243e2 <ATA::readyForCommand()>
c0024557:	83 c4 10             	add    esp,0x10
c002455a:	84 c0                	test   al,al
c002455c:	0f 84 bc 02 00 00    	je     c002481e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024562:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024568:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002456e:	c1 e0 04             	shl    eax,0x4
c0024571:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024578:	09 c6                	or     esi,eax
c002457a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002457f:	75 05                	jne    c0024586 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c0024581:	83 ce a0             	or     esi,0xffffffa0
c0024584:	eb 03                	jmp    c0024589 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024586:	83 ce e0             	or     esi,0xffffffe0
c0024589:	89 f0                	mov    eax,esi
c002458b:	0f b6 f0             	movzx  esi,al
c002458e:	56                   	push   esi
c002458f:	6a 06                	push   0x6
c0024591:	51                   	push   ecx
c0024592:	52                   	push   edx
c0024593:	e8 80 ef ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024598:	83 c4 10             	add    esp,0x10
c002459b:	6a 00                	push   0x0
c002459d:	6a 01                	push   0x1
c002459f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a6:	50                   	push   eax
c00245a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ad:	e8 66 ef ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b2:	83 c4 10             	add    esp,0x10
c00245b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00245ba:	75 6e                	jne    c002462a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00245bc:	6a 00                	push   0x0
c00245be:	6a 08                	push   0x8
c00245c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245c7:	50                   	push   eax
c00245c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ce:	e8 45 ef ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00245d8:	50                   	push   eax
c00245d9:	6a 09                	push   0x9
c00245db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245e2:	50                   	push   eax
c00245e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245e9:	e8 2a ef ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ee:	83 c4 20             	add    esp,0x20
c00245f1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00245f6:	50                   	push   eax
c00245f7:	6a 0a                	push   0xa
c00245f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024600:	50                   	push   eax
c0024601:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024607:	e8 0c ef ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002460c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024611:	50                   	push   eax
c0024612:	6a 0b                	push   0xb
c0024614:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002461b:	50                   	push   eax
c002461c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024622:	e8 f1 ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024627:	83 c4 20             	add    esp,0x20
c002462a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002462f:	50                   	push   eax
c0024630:	6a 02                	push   0x2
c0024632:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024639:	50                   	push   eax
c002463a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024640:	e8 d3 ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024645:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002464a:	50                   	push   eax
c002464b:	6a 03                	push   0x3
c002464d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024654:	50                   	push   eax
c0024655:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002465b:	e8 b8 ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024660:	83 c4 20             	add    esp,0x20
c0024663:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024668:	50                   	push   eax
c0024669:	6a 04                	push   0x4
c002466b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024672:	50                   	push   eax
c0024673:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024679:	e8 9a ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002467e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024683:	50                   	push   eax
c0024684:	6a 05                	push   0x5
c0024686:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002468d:	50                   	push   eax
c002468e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024694:	e8 7f ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024699:	83 c4 20             	add    esp,0x20
c002469c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00246a1:	0f 94 c0             	sete   al
c00246a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00246a9:	74 09                	je     c00246b4 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00246ab:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00246b2:	eb 07                	jmp    c00246bb <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00246b4:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00246bb:	0f b6 c0             	movzx  eax,al
c00246be:	50                   	push   eax
c00246bf:	6a 07                	push   0x7
c00246c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246c8:	50                   	push   eax
c00246c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246cf:	e8 44 ee ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d4:	c7 04 24 01 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce01
c00246db:	e8 d5 e2 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00246e0:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00246e4:	83 c4 10             	add    esp,0x10
c00246e7:	85 f6                	test   esi,esi
c00246e9:	0f 84 f7 00 00 00    	je     c00247e6 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00246ef:	83 ec 0c             	sub    esp,0xc
c00246f2:	68 04 ce 02 c0       	push   0xc002ce04
c00246f7:	e8 b9 e2 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00246fc:	83 c4 0c             	add    esp,0xc
c00246ff:	6a 01                	push   0x1
c0024701:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024708:	50                   	push   eax
c0024709:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002470f:	e8 a6 f8 ff ff       	call   c0023fba <IDE::polling(unsigned char, unsigned int)>
c0024714:	c7 04 24 07 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce07
c002471b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002471f:	e8 91 e2 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0024724:	83 c4 10             	add    esp,0x10
c0024727:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002472b:	84 c0                	test   al,al
c002472d:	74 2b                	je     c002475a <ATA::access(unsigned long long, int, void*, bool)+0x328>
c002472f:	0f b6 f8             	movzx  edi,al
c0024732:	57                   	push   edi
c0024733:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002473a:	50                   	push   eax
c002473b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024742:	50                   	push   eax
c0024743:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024749:	e8 bc f7 ff ff       	call   c0023f0a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002474e:	c7 04 24 0a ce 02 c0 	mov    DWORD PTR [esp],0xc002ce0a
c0024755:	e9 bc 00 00 00       	jmp    c0024816 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c002475a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002475f:	74 50                	je     c00247b1 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0024761:	83 ec 0c             	sub    esp,0xc
c0024764:	31 ed                	xor    ebp,ebp
c0024766:	68 15 ce 02 c0       	push   0xc002ce15
c002476b:	e8 45 e2 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0024770:	83 c4 10             	add    esp,0x10
c0024773:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024777:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002477b:	50                   	push   eax
c002477c:	50                   	push   eax
c002477d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024784:	50                   	push   eax
c0024785:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002478b:	e8 76 ed ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c0024790:	89 c2                	mov    edx,eax
c0024792:	89 f8                	mov    eax,edi
c0024794:	66 ef                	out    dx,ax
c0024796:	45                   	inc    ebp
c0024797:	83 c4 10             	add    esp,0x10
c002479a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00247a0:	75 d1                	jne    c0024773 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00247a2:	83 ec 0c             	sub    esp,0xc
c00247a5:	68 18 ce 02 c0       	push   0xc002ce18
c00247aa:	e8 06 e2 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00247af:	eb 24                	jmp    c00247d5 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00247b1:	51                   	push   ecx
c00247b2:	51                   	push   ecx
c00247b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247ba:	50                   	push   eax
c00247bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247c1:	e8 40 ed ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c00247c6:	b9 00 01 00 00       	mov    ecx,0x100
c00247cb:	89 c2                	mov    edx,eax
c00247cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00247d1:	fc                   	cld    
c00247d2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00247d5:	83 c4 10             	add    esp,0x10
c00247d8:	4e                   	dec    esi
c00247d9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00247e1:	e9 01 ff ff ff       	jmp    c00246e7 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00247e6:	31 ff                	xor    edi,edi
c00247e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00247ed:	74 2f                	je     c002481e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00247ef:	83 ec 0c             	sub    esp,0xc
c00247f2:	68 1b ce 02 c0       	push   0xc002ce1b
c00247f7:	e8 b9 e1 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00247fc:	58                   	pop    eax
c00247fd:	31 c0                	xor    eax,eax
c00247ff:	5a                   	pop    edx
c0024800:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024805:	0f 94 c0             	sete   al
c0024808:	50                   	push   eax
c0024809:	53                   	push   ebx
c002480a:	e8 89 fb ff ff       	call   c0024398 <ATA::flush(bool)>
c002480f:	c7 04 24 1e ce 02 c0 	mov    DWORD PTR [esp],0xc002ce1e
c0024816:	e8 9a e1 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002481b:	83 c4 10             	add    esp,0x10
c002481e:	83 c4 2c             	add    esp,0x2c
c0024821:	89 f8                	mov    eax,edi
c0024823:	5b                   	pop    ebx
c0024824:	5e                   	pop    esi
c0024825:	5f                   	pop    edi
c0024826:	5d                   	pop    ebp
c0024827:	c3                   	ret    

c0024828 <ATA::read(unsigned long long, int, void*)>:
c0024828:	57                   	push   edi
c0024829:	b8 04 00 00 00       	mov    eax,0x4
c002482e:	56                   	push   esi
c002482f:	53                   	push   ebx
c0024830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024834:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024838:	8d 7a ff             	lea    edi,[edx-0x1]
c002483b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002483f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024843:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024849:	77 25                	ja     c0024870 <ATA::read(unsigned long long, int, void*)+0x48>
c002484b:	b8 06 00 00 00       	mov    eax,0x6
c0024850:	85 f6                	test   esi,esi
c0024852:	74 1c                	je     c0024870 <ATA::read(unsigned long long, int, void*)+0x48>
c0024854:	50                   	push   eax
c0024855:	50                   	push   eax
c0024856:	6a 00                	push   0x0
c0024858:	56                   	push   esi
c0024859:	52                   	push   edx
c002485a:	53                   	push   ebx
c002485b:	51                   	push   ecx
c002485c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024860:	e8 cd fb ff ff       	call   c0024432 <ATA::access(unsigned long long, int, void*, bool)>
c0024865:	83 c4 20             	add    esp,0x20
c0024868:	85 c0                	test   eax,eax
c002486a:	0f 95 c0             	setne  al
c002486d:	0f b6 c0             	movzx  eax,al
c0024870:	5b                   	pop    ebx
c0024871:	5e                   	pop    esi
c0024872:	5f                   	pop    edi
c0024873:	c3                   	ret    

c0024874 <ATA::write(unsigned long long, int, void*)>:
c0024874:	55                   	push   ebp
c0024875:	57                   	push   edi
c0024876:	56                   	push   esi
c0024877:	53                   	push   ebx
c0024878:	83 ec 18             	sub    esp,0x18
c002487b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002487f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024883:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024887:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002488b:	68 21 ce 02 c0       	push   0xc002ce21
c0024890:	e8 20 e1 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0024895:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024898:	83 c4 10             	add    esp,0x10
c002489b:	b8 04 00 00 00       	mov    eax,0x4
c00248a0:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00248a6:	77 25                	ja     c00248cd <ATA::write(unsigned long long, int, void*)+0x59>
c00248a8:	b8 06 00 00 00       	mov    eax,0x6
c00248ad:	85 f6                	test   esi,esi
c00248af:	74 1c                	je     c00248cd <ATA::write(unsigned long long, int, void*)+0x59>
c00248b1:	50                   	push   eax
c00248b2:	50                   	push   eax
c00248b3:	6a 01                	push   0x1
c00248b5:	56                   	push   esi
c00248b6:	53                   	push   ebx
c00248b7:	55                   	push   ebp
c00248b8:	57                   	push   edi
c00248b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00248bd:	e8 70 fb ff ff       	call   c0024432 <ATA::access(unsigned long long, int, void*, bool)>
c00248c2:	83 c4 20             	add    esp,0x20
c00248c5:	85 c0                	test   eax,eax
c00248c7:	0f 95 c0             	setne  al
c00248ca:	0f b6 c0             	movzx  eax,al
c00248cd:	83 c4 0c             	add    esp,0xc
c00248d0:	5b                   	pop    ebx
c00248d1:	5e                   	pop    esi
c00248d2:	5f                   	pop    edi
c00248d3:	5d                   	pop    ebp
c00248d4:	c3                   	ret    
c00248d5:	90                   	nop

c00248d6 <ATA::detectCHS()>:
c00248d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00248da:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00248e0:	c1 e0 06             	shl    eax,0x6
c00248e3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00248e9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00248f3:	c7 44 24 04 2d ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce2d
c00248fb:	e9 53 5a ff ff       	jmp    c001a353 <Krnl::panic(char const*)>

c0024900 <ATA::open(int, int, void*)>:
c0024900:	53                   	push   ebx
c0024901:	83 ec 08             	sub    esp,0x8
c0024904:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024908:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002490c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024910:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024916:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002491c:	c1 e0 06             	shl    eax,0x6
c002491f:	01 d0                	add    eax,edx
c0024921:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024928:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002492e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024935:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002493f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024945:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002494c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024953:	75 0c                	jne    c0024961 <ATA::open(int, int, void*)+0x61>
c0024955:	83 ec 0c             	sub    esp,0xc
c0024958:	53                   	push   ebx
c0024959:	e8 78 ff ff ff       	call   c00248d6 <ATA::detectCHS()>
c002495e:	83 c4 10             	add    esp,0x10
c0024961:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024967:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002496d:	c1 e0 06             	shl    eax,0x6
c0024970:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024977:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024981:	d1 e8                	shr    eax,1
c0024983:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024989:	6a 04                	push   0x4
c002498b:	6a 0c                	push   0xc
c002498d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024994:	50                   	push   eax
c0024995:	52                   	push   edx
c0024996:	e8 7d eb ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002499b:	90                   	nop
c002499c:	90                   	nop
c002499d:	6a 00                	push   0x0
c002499f:	6a 0c                	push   0xc
c00249a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a8:	50                   	push   eax
c00249a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249af:	e8 64 eb ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b4:	83 c4 14             	add    esp,0x14
c00249b7:	53                   	push   ebx
c00249b8:	e8 cf f8 fe ff       	call   c001428c <PhysicalDisk::startCache()>
c00249bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249c0:	e8 4f 1b ff ff       	call   c0016514 <createPartitionsForDisk(PhysicalDisk*)>
c00249c5:	31 c0                	xor    eax,eax
c00249c7:	83 c4 18             	add    esp,0x18
c00249ca:	5b                   	pop    ebx
c00249cb:	c3                   	ret    

c00249cc <ATAPI::write(unsigned long long, int, void*)>:
c00249cc:	b8 03 00 00 00       	mov    eax,0x3
c00249d1:	c3                   	ret    

c00249d2 <ATAPI::close(int, int, void*)>:
c00249d2:	83 ec 0c             	sub    esp,0xc
c00249d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00249df:	85 c0                	test   eax,eax
c00249e1:	74 0c                	je     c00249ef <ATAPI::close(int, int, void*)+0x1d>
c00249e3:	83 ec 0c             	sub    esp,0xc
c00249e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00249e8:	50                   	push   eax
c00249e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00249ec:	83 c4 10             	add    esp,0x10
c00249ef:	31 c0                	xor    eax,eax
c00249f1:	83 c4 0c             	add    esp,0xc
c00249f4:	c3                   	ret    
c00249f5:	90                   	nop

c00249f6 <ATAPI::ATAPI()>:
c00249f6:	83 ec 0c             	sub    esp,0xc
c00249f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249fd:	83 ec 04             	sub    esp,0x4
c0024a00:	68 00 08 00 00       	push   0x800
c0024a05:	68 65 cf 02 c0       	push   0xc002cf65
c0024a0a:	50                   	push   eax
c0024a0b:	e8 14 f8 fe ff       	call   c0014224 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a10:	83 c4 10             	add    esp,0x10
c0024a13:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0024a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a1c:	89 10                	mov    DWORD PTR [eax],edx
c0024a1e:	90                   	nop
c0024a1f:	83 c4 0c             	add    esp,0xc
c0024a22:	c3                   	ret    
c0024a23:	90                   	nop

c0024a24 <ATAPI::readyForCommand()>:
c0024a24:	56                   	push   esi
c0024a25:	53                   	push   ebx
c0024a26:	31 db                	xor    ebx,ebx
c0024a28:	50                   	push   eax
c0024a29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a2d:	50                   	push   eax
c0024a2e:	6a 0c                	push   0xc
c0024a30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024a37:	50                   	push   eax
c0024a38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a3e:	e8 95 eb ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0024a43:	83 c4 10             	add    esp,0x10
c0024a46:	a8 88                	test   al,0x88
c0024a48:	74 23                	je     c0024a6d <ATAPI::readyForCommand()+0x49>
c0024a4a:	43                   	inc    ebx
c0024a4b:	83 fb 63             	cmp    ebx,0x63
c0024a4e:	7e dd                	jle    c0024a2d <ATAPI::readyForCommand()+0x9>
c0024a50:	51                   	push   ecx
c0024a51:	51                   	push   ecx
c0024a52:	6a 00                	push   0x0
c0024a54:	68 40 42 0f 00       	push   0xf4240
c0024a59:	e8 61 97 ff ff       	call   c001e1bf <nanoSleep(unsigned long long)>
c0024a5e:	83 c4 10             	add    esp,0x10
c0024a61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024a67:	75 c4                	jne    c0024a2d <ATAPI::readyForCommand()+0x9>
c0024a69:	31 c0                	xor    eax,eax
c0024a6b:	eb 02                	jmp    c0024a6f <ATAPI::readyForCommand()+0x4b>
c0024a6d:	b0 01                	mov    al,0x1
c0024a6f:	5a                   	pop    edx
c0024a70:	5b                   	pop    ebx
c0024a71:	5e                   	pop    esi
c0024a72:	c3                   	ret    
c0024a73:	90                   	nop

c0024a74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024a74:	55                   	push   ebp
c0024a75:	57                   	push   edi
c0024a76:	56                   	push   esi
c0024a77:	53                   	push   ebx
c0024a78:	83 ec 20             	sub    esp,0x20
c0024a7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024a7f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024a83:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024a87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a8b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a8f:	6a 01                	push   0x1
c0024a91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a98:	50                   	push   eax
c0024a99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a9f:	e8 80 ec ff ff       	call   c0023724 <IDE::enableIRQs(unsigned char, bool)>
c0024aa4:	5e                   	pop    esi
c0024aa5:	58                   	pop    eax
c0024aa6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024aad:	50                   	push   eax
c0024aae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ab4:	e8 39 ea ff ff       	call   c00234f2 <IDE::prepareInterrupt(unsigned char)>
c0024ab9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024abc:	e8 63 ff ff ff       	call   c0024a24 <ATAPI::readyForCommand()>
c0024ac1:	83 c4 10             	add    esp,0x10
c0024ac4:	84 c0                	test   al,al
c0024ac6:	75 0a                	jne    c0024ad2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ac8:	bb 01 00 00 00       	mov    ebx,0x1
c0024acd:	e9 57 02 00 00       	jmp    c0024d29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ad2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ad8:	c1 e0 04             	shl    eax,0x4
c0024adb:	0f b6 c0             	movzx  eax,al
c0024ade:	50                   	push   eax
c0024adf:	6a 06                	push   0x6
c0024ae1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ae8:	50                   	push   eax
c0024ae9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024aef:	e8 24 ea ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af4:	6a 00                	push   0x0
c0024af6:	6a 01                	push   0x1
c0024af8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024aff:	50                   	push   eax
c0024b00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b06:	e8 0d ea ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0b:	83 c4 20             	add    esp,0x20
c0024b0e:	0f b6 c3             	movzx  eax,bl
c0024b11:	0f b6 df             	movzx  ebx,bh
c0024b14:	50                   	push   eax
c0024b15:	6a 04                	push   0x4
c0024b17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b1e:	50                   	push   eax
c0024b1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b25:	e8 ee e9 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b2a:	53                   	push   ebx
c0024b2b:	6a 05                	push   0x5
c0024b2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b34:	50                   	push   eax
c0024b35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b3b:	e8 d8 e9 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b40:	83 c4 20             	add    esp,0x20
c0024b43:	68 a0 00 00 00       	push   0xa0
c0024b48:	6a 07                	push   0x7
c0024b4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b51:	50                   	push   eax
c0024b52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b58:	e8 bb e9 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b5d:	83 c4 0c             	add    esp,0xc
c0024b60:	6a 01                	push   0x1
c0024b62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b69:	50                   	push   eax
c0024b6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b70:	e8 45 f4 ff ff       	call   c0023fba <IDE::polling(unsigned char, unsigned int)>
c0024b75:	83 c4 10             	add    esp,0x10
c0024b78:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024b7e:	84 c0                	test   al,al
c0024b80:	74 23                	je     c0024ba5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024b82:	0f b6 d8             	movzx  ebx,al
c0024b85:	0f b6 d2             	movzx  edx,dl
c0024b88:	53                   	push   ebx
c0024b89:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024b90:	50                   	push   eax
c0024b91:	52                   	push   edx
c0024b92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b98:	e8 6d f3 ff ff       	call   c0023f0a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b9d:	83 c4 10             	add    esp,0x10
c0024ba0:	e9 84 01 00 00       	jmp    c0024d29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ba5:	0f b6 d2             	movzx  edx,dl
c0024ba8:	53                   	push   ebx
c0024ba9:	53                   	push   ebx
c0024baa:	52                   	push   edx
c0024bab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bb1:	e8 50 e9 ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c0024bb6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024bba:	b9 06 00 00 00       	mov    ecx,0x6
c0024bbf:	89 c2                	mov    edx,eax
c0024bc1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024bc4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024bc8:	83 c4 10             	add    esp,0x10
c0024bcb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024bd1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024bd8:	85 db                	test   ebx,ebx
c0024bda:	0f 84 ec 00 00 00    	je     c0024ccc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024be0:	51                   	push   ecx
c0024be1:	51                   	push   ecx
c0024be2:	52                   	push   edx
c0024be3:	50                   	push   eax
c0024be4:	e8 9d ea ff ff       	call   c0023686 <IDE::waitInterrupt(unsigned char)>
c0024be9:	83 c4 10             	add    esp,0x10
c0024bec:	84 c0                	test   al,al
c0024bee:	0f 84 d4 fe ff ff    	je     c0024ac8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024bf4:	56                   	push   esi
c0024bf5:	56                   	push   esi
c0024bf6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bfd:	50                   	push   eax
c0024bfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c04:	e8 e9 e8 ff ff       	call   c00234f2 <IDE::prepareInterrupt(unsigned char)>
c0024c09:	83 c4 0c             	add    esp,0xc
c0024c0c:	6a 04                	push   0x4
c0024c0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c15:	50                   	push   eax
c0024c16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c1c:	e8 b7 e9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0024c21:	83 c4 0c             	add    esp,0xc
c0024c24:	89 c6                	mov    esi,eax
c0024c26:	6a 05                	push   0x5
c0024c28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c2f:	50                   	push   eax
c0024c30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c36:	e8 9d e9 ff ff       	call   c00235d8 <IDE::read(unsigned char, unsigned char)>
c0024c3b:	89 f1                	mov    ecx,esi
c0024c3d:	0f b6 c0             	movzx  eax,al
c0024c40:	0f b6 f1             	movzx  esi,cl
c0024c43:	c1 e0 08             	shl    eax,0x8
c0024c46:	09 c6                	or     esi,eax
c0024c48:	d1 fe                	sar    esi,1
c0024c4a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024c4e:	83 c4 10             	add    esp,0x10
c0024c51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024c56:	74 41                	je     c0024c99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024c58:	31 c9                	xor    ecx,ecx
c0024c5a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c60:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c67:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024c6b:	75 0a                	jne    c0024c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024c6d:	01 c9                	add    ecx,ecx
c0024c6f:	01 cd                	add    ebp,ecx
c0024c71:	4b                   	dec    ebx
c0024c72:	e9 54 ff ff ff       	jmp    c0024bcb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024c77:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024c7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024c80:	51                   	push   ecx
c0024c81:	51                   	push   ecx
c0024c82:	52                   	push   edx
c0024c83:	50                   	push   eax
c0024c84:	e8 7d e8 ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c0024c89:	89 c2                	mov    edx,eax
c0024c8b:	89 f0                	mov    eax,esi
c0024c8d:	66 ef                	out    dx,ax
c0024c8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024c93:	83 c4 10             	add    esp,0x10
c0024c96:	41                   	inc    ecx
c0024c97:	eb c1                	jmp    c0024c5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024c99:	31 f6                	xor    esi,esi
c0024c9b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ca1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024ca8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024cac:	75 06                	jne    c0024cb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024cae:	01 f6                	add    esi,esi
c0024cb0:	01 f5                	add    ebp,esi
c0024cb2:	eb bd                	jmp    c0024c71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024cb4:	51                   	push   ecx
c0024cb5:	51                   	push   ecx
c0024cb6:	52                   	push   edx
c0024cb7:	50                   	push   eax
c0024cb8:	e8 49 e8 ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c0024cbd:	89 c2                	mov    edx,eax
c0024cbf:	66 ed                	in     ax,dx
c0024cc1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024cc6:	83 c4 10             	add    esp,0x10
c0024cc9:	46                   	inc    esi
c0024cca:	eb cf                	jmp    c0024c9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024ccc:	51                   	push   ecx
c0024ccd:	51                   	push   ecx
c0024cce:	52                   	push   edx
c0024ccf:	50                   	push   eax
c0024cd0:	e8 b1 e9 ff ff       	call   c0023686 <IDE::waitInterrupt(unsigned char)>
c0024cd5:	83 c4 10             	add    esp,0x10
c0024cd8:	84 c0                	test   al,al
c0024cda:	0f 84 e8 fd ff ff    	je     c0024ac8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024ce0:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024ce5:	52                   	push   edx
c0024ce6:	52                   	push   edx
c0024ce7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024cee:	50                   	push   eax
c0024cef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024cf5:	e8 f8 e7 ff ff       	call   c00234f2 <IDE::prepareInterrupt(unsigned char)>
c0024cfa:	83 c4 10             	add    esp,0x10
c0024cfd:	50                   	push   eax
c0024cfe:	50                   	push   eax
c0024cff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d06:	50                   	push   eax
c0024d07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d0d:	e8 f4 e7 ff ff       	call   c0023506 <IDE::getBase(unsigned char)>
c0024d12:	8d 50 07             	lea    edx,[eax+0x7]
c0024d15:	ec                   	in     al,dx
c0024d16:	83 c4 10             	add    esp,0x10
c0024d19:	a8 88                	test   al,0x88
c0024d1b:	74 0a                	je     c0024d27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024d1d:	4b                   	dec    ebx
c0024d1e:	75 dd                	jne    c0024cfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024d20:	bb 02 00 00 00       	mov    ebx,0x2
c0024d25:	eb 02                	jmp    c0024d29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024d27:	31 db                	xor    ebx,ebx
c0024d29:	83 c4 1c             	add    esp,0x1c
c0024d2c:	89 d8                	mov    eax,ebx
c0024d2e:	5b                   	pop    ebx
c0024d2f:	5e                   	pop    esi
c0024d30:	5f                   	pop    edi
c0024d31:	5d                   	pop    ebp
c0024d32:	c3                   	ret    
c0024d33:	90                   	nop

c0024d34 <ATAPI::diskRemoved()>:
c0024d34:	83 ec 18             	sub    esp,0x18
c0024d37:	68 71 cf 02 c0       	push   0xc002cf71
c0024d3c:	e8 74 dc fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0024d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d45:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024d4c:	83 c4 1c             	add    esp,0x1c
c0024d4f:	c3                   	ret    

c0024d50 <ATAPI::eject()>:
c0024d50:	57                   	push   edi
c0024d51:	b9 03 00 00 00       	mov    ecx,0x3
c0024d56:	53                   	push   ebx
c0024d57:	83 ec 14             	sub    esp,0x14
c0024d5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024d5e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d62:	fc                   	cld    
c0024d63:	31 c0                	xor    eax,eax
c0024d65:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d67:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024d6c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024d71:	50                   	push   eax
c0024d72:	50                   	push   eax
c0024d73:	6a 00                	push   0x0
c0024d75:	6a 00                	push   0x0
c0024d77:	6a 00                	push   0x0
c0024d79:	6a 02                	push   0x2
c0024d7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d7f:	50                   	push   eax
c0024d80:	53                   	push   ebx
c0024d81:	e8 ee fc ff ff       	call   c0024a74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d86:	83 c4 14             	add    esp,0x14
c0024d89:	53                   	push   ebx
c0024d8a:	e8 a5 ff ff ff       	call   c0024d34 <ATAPI::diskRemoved()>
c0024d8f:	83 c4 24             	add    esp,0x24
c0024d92:	31 c0                	xor    eax,eax
c0024d94:	5b                   	pop    ebx
c0024d95:	5f                   	pop    edi
c0024d96:	c3                   	ret    
c0024d97:	90                   	nop

c0024d98 <ATAPI::diskInserted()>:
c0024d98:	53                   	push   ebx
c0024d99:	83 ec 14             	sub    esp,0x14
c0024d9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024da0:	68 88 cf 02 c0       	push   0xc002cf88
c0024da5:	e8 0b dc fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0024daa:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024db1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024db4:	e8 d3 f4 fe ff       	call   c001428c <PhysicalDisk::startCache()>
c0024db9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dbd:	83 c4 18             	add    esp,0x18
c0024dc0:	5b                   	pop    ebx
c0024dc1:	e9 4e 17 ff ff       	jmp    c0016514 <createPartitionsForDisk(PhysicalDisk*)>

c0024dc6 <ATAPI::detectMedia()>:
c0024dc6:	56                   	push   esi
c0024dc7:	53                   	push   ebx
c0024dc8:	83 ec 28             	sub    esp,0x28
c0024dcb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024dcf:	6a 0c                	push   0xc
c0024dd1:	6a 00                	push   0x0
c0024dd3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024dd7:	56                   	push   esi
c0024dd8:	e8 73 b9 fd ff       	call   c0000750 <memset>
c0024ddd:	58                   	pop    eax
c0024dde:	5a                   	pop    edx
c0024ddf:	6a 00                	push   0x0
c0024de1:	6a 00                	push   0x0
c0024de3:	6a 00                	push   0x0
c0024de5:	6a 00                	push   0x0
c0024de7:	56                   	push   esi
c0024de8:	53                   	push   ebx
c0024de9:	e8 86 fc ff ff       	call   c0024a74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024dee:	83 c4 1c             	add    esp,0x1c
c0024df1:	6a 0c                	push   0xc
c0024df3:	6a 00                	push   0x0
c0024df5:	56                   	push   esi
c0024df6:	e8 55 b9 fd ff       	call   c0000750 <memset>
c0024dfb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e00:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e05:	59                   	pop    ecx
c0024e06:	58                   	pop    eax
c0024e07:	6a 01                	push   0x1
c0024e09:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024e0d:	50                   	push   eax
c0024e0e:	6a 00                	push   0x0
c0024e10:	6a 12                	push   0x12
c0024e12:	56                   	push   esi
c0024e13:	53                   	push   ebx
c0024e14:	e8 5b fc ff ff       	call   c0024a74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e19:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e1d:	83 c4 20             	add    esp,0x20
c0024e20:	83 e0 7f             	and    eax,0x7f
c0024e23:	3c 70                	cmp    al,0x70
c0024e25:	74 15                	je     c0024e3c <ATAPI::detectMedia()+0x76>
c0024e27:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e2e:	75 0c                	jne    c0024e3c <ATAPI::detectMedia()+0x76>
c0024e30:	83 ec 0c             	sub    esp,0xc
c0024e33:	53                   	push   ebx
c0024e34:	e8 5f ff ff ff       	call   c0024d98 <ATAPI::diskInserted()>
c0024e39:	83 c4 10             	add    esp,0x10
c0024e3c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024e40:	83 e0 0f             	and    eax,0xf
c0024e43:	3c 02                	cmp    al,0x2
c0024e45:	75 1b                	jne    c0024e62 <ATAPI::detectMedia()+0x9c>
c0024e47:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024e4c:	75 2d                	jne    c0024e7b <ATAPI::detectMedia()+0xb5>
c0024e4e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e55:	74 24                	je     c0024e7b <ATAPI::detectMedia()+0xb5>
c0024e57:	83 ec 0c             	sub    esp,0xc
c0024e5a:	53                   	push   ebx
c0024e5b:	e8 d4 fe ff ff       	call   c0024d34 <ATAPI::diskRemoved()>
c0024e60:	eb 16                	jmp    c0024e78 <ATAPI::detectMedia()+0xb2>
c0024e62:	84 c0                	test   al,al
c0024e64:	75 15                	jne    c0024e7b <ATAPI::detectMedia()+0xb5>
c0024e66:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e6d:	75 0c                	jne    c0024e7b <ATAPI::detectMedia()+0xb5>
c0024e6f:	83 ec 0c             	sub    esp,0xc
c0024e72:	53                   	push   ebx
c0024e73:	e8 20 ff ff ff       	call   c0024d98 <ATAPI::diskInserted()>
c0024e78:	83 c4 10             	add    esp,0x10
c0024e7b:	83 c4 24             	add    esp,0x24
c0024e7e:	5b                   	pop    ebx
c0024e7f:	5e                   	pop    esi
c0024e80:	c3                   	ret    
c0024e81:	90                   	nop

c0024e82 <ATAPI::open(int, int, void*)>:
c0024e82:	53                   	push   ebx
c0024e83:	83 ec 08             	sub    esp,0x8
c0024e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e92:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e98:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e9e:	c1 e0 06             	shl    eax,0x6
c0024ea1:	01 d0                	add    eax,edx
c0024ea3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024eaa:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024eb0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024eb7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ec1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ec7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ece:	6a 04                	push   0x4
c0024ed0:	6a 0c                	push   0xc
c0024ed2:	51                   	push   ecx
c0024ed3:	52                   	push   edx
c0024ed4:	e8 3f e6 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ed9:	90                   	nop
c0024eda:	90                   	nop
c0024edb:	6a 00                	push   0x0
c0024edd:	6a 0c                	push   0xc
c0024edf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ee6:	50                   	push   eax
c0024ee7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024eed:	e8 26 e6 ff ff       	call   c0023518 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ef2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ef9:	83 c4 14             	add    esp,0x14
c0024efc:	53                   	push   ebx
c0024efd:	e8 c4 fe ff ff       	call   c0024dc6 <ATAPI::detectMedia()>
c0024f02:	31 c0                	xor    eax,eax
c0024f04:	83 c4 18             	add    esp,0x18
c0024f07:	5b                   	pop    ebx
c0024f08:	c3                   	ret    
c0024f09:	90                   	nop

c0024f0a <ATAPI::read(unsigned long long, int, void*)>:
c0024f0a:	55                   	push   ebp
c0024f0b:	57                   	push   edi
c0024f0c:	56                   	push   esi
c0024f0d:	53                   	push   ebx
c0024f0e:	83 ec 1c             	sub    esp,0x1c
c0024f11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024f15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f19:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f1d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f24:	74 41                	je     c0024f67 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024f26:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f2a:	b9 03 00 00 00       	mov    ecx,0x3
c0024f2f:	fc                   	cld    
c0024f30:	31 c0                	xor    eax,eax
c0024f32:	86 fb                	xchg   bl,bh
c0024f34:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f36:	c1 c3 10             	rol    ebx,0x10
c0024f39:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024f3e:	89 e8                	mov    eax,ebp
c0024f40:	86 fb                	xchg   bl,bh
c0024f42:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024f46:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024f4a:	50                   	push   eax
c0024f4b:	50                   	push   eax
c0024f4c:	55                   	push   ebp
c0024f4d:	c1 e5 0b             	shl    ebp,0xb
c0024f50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f54:	6a 00                	push   0x0
c0024f56:	55                   	push   ebp
c0024f57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f5b:	50                   	push   eax
c0024f5c:	56                   	push   esi
c0024f5d:	e8 12 fb ff ff       	call   c0024a74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024f62:	83 c4 20             	add    esp,0x20
c0024f65:	eb 1a                	jmp    c0024f81 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024f67:	83 ec 0c             	sub    esp,0xc
c0024f6a:	56                   	push   esi
c0024f6b:	e8 56 fe ff ff       	call   c0024dc6 <ATAPI::detectMedia()>
c0024f70:	83 c4 10             	add    esp,0x10
c0024f73:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f7a:	75 aa                	jne    c0024f26 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024f7c:	b8 02 00 00 00       	mov    eax,0x2
c0024f81:	83 c4 1c             	add    esp,0x1c
c0024f84:	5b                   	pop    ebx
c0024f85:	5e                   	pop    esi
c0024f86:	5f                   	pop    edi
c0024f87:	5d                   	pop    ebp
c0024f88:	c3                   	ret    
c0024f89:	90                   	nop

c0024f8a <SATA::close(int, int, void*)>:
c0024f8a:	83 ec 0c             	sub    esp,0xc
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f97:	85 c0                	test   eax,eax
c0024f99:	74 0c                	je     c0024fa7 <SATA::close(int, int, void*)+0x1d>
c0024f9b:	83 ec 0c             	sub    esp,0xc
c0024f9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fa0:	50                   	push   eax
c0024fa1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fa4:	83 c4 10             	add    esp,0x10
c0024fa7:	31 c0                	xor    eax,eax
c0024fa9:	83 c4 0c             	add    esp,0xc
c0024fac:	c3                   	ret    
c0024fad:	90                   	nop

c0024fae <SATA::powerSaving(PowerSavingLevel)>:
c0024fae:	c3                   	ret    
c0024faf:	90                   	nop

c0024fb0 <SATA::open(int, int, void*)>:
c0024fb0:	56                   	push   esi
c0024fb1:	53                   	push   ebx
c0024fb2:	50                   	push   eax
c0024fb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fbb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024fc5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024fcb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024fd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fd9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024fe3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024fe9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ff0:	e8 64 ad fe ff       	call   c000fd59 <Phys::allocatePage()>
c0024ff5:	89 c6                	mov    esi,eax
c0024ff7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ffd:	81 c6 00 10 00 00    	add    esi,0x1000
c0025003:	e8 51 ad fe ff       	call   c000fd59 <Phys::allocatePage()>
c0025008:	39 c6                	cmp    esi,eax
c002500a:	74 10                	je     c002501c <SATA::open(int, int, void*)+0x6c>
c002500c:	83 ec 0c             	sub    esp,0xc
c002500f:	68 b0 ce 02 c0       	push   0xc002ceb0
c0025014:	e8 3a 53 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0025019:	83 c4 10             	add    esp,0x10
c002501c:	83 ec 0c             	sub    esp,0xc
c002501f:	6a 02                	push   0x2
c0025021:	e8 bd c5 fe ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c0025026:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002502c:	6a 03                	push   0x3
c002502e:	50                   	push   eax
c002502f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025035:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c002503b:	e8 4a cc fe ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c0025040:	83 c4 14             	add    esp,0x14
c0025043:	53                   	push   ebx
c0025044:	e8 43 f2 fe ff       	call   c001428c <PhysicalDisk::startCache()>
c0025049:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002504c:	e8 c3 14 ff ff       	call   c0016514 <createPartitionsForDisk(PhysicalDisk*)>
c0025051:	83 c4 14             	add    esp,0x14
c0025054:	31 c0                	xor    eax,eax
c0025056:	5b                   	pop    ebx
c0025057:	5e                   	pop    esi
c0025058:	c3                   	ret    
c0025059:	90                   	nop

c002505a <SATA::SATA()>:
c002505a:	83 ec 0c             	sub    esp,0xc
c002505d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025061:	83 ec 04             	sub    esp,0x4
c0025064:	68 00 02 00 00       	push   0x200
c0025069:	68 c4 ce 02 c0       	push   0xc002cec4
c002506e:	50                   	push   eax
c002506f:	e8 b0 f1 fe ff       	call   c0014224 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025074:	83 c4 10             	add    esp,0x10
c0025077:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c002507c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025080:	89 10                	mov    DWORD PTR [eax],edx
c0025082:	90                   	nop
c0025083:	83 c4 0c             	add    esp,0xc
c0025086:	c3                   	ret    
c0025087:	90                   	nop

c0025088 <SATA::access(unsigned long long, int, void*, bool)>:
c0025088:	55                   	push   ebp
c0025089:	57                   	push   edi
c002508a:	56                   	push   esi
c002508b:	53                   	push   ebx
c002508c:	83 ec 2c             	sub    esp,0x2c
c002508f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025093:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002509b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002509f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00250a3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00250a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250ac:	7e 10                	jle    c00250be <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00250ae:	83 ec 0c             	sub    esp,0xc
c00250b1:	68 d4 ce 02 c0       	push   0xc002ced4
c00250b6:	e8 98 52 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00250bb:	83 c4 10             	add    esp,0x10
c00250be:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00250c4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00250ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250d4:	89 d0                	mov    eax,edx
c00250d6:	c1 e0 07             	shl    eax,0x7
c00250d9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250dd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250e7:	51                   	push   ecx
c00250e8:	8d 42 02             	lea    eax,[edx+0x2]
c00250eb:	51                   	push   ecx
c00250ec:	c1 e0 07             	shl    eax,0x7
c00250ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00250f3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00250f7:	50                   	push   eax
c00250f8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00250fe:	e8 97 ef ff ff       	call   c002409a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025103:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025107:	83 c4 10             	add    esp,0x10
c002510a:	b8 01 00 00 00       	mov    eax,0x1
c002510f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025114:	0f 84 cb 01 00 00    	je     c00252e5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002511a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002511e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025122:	c1 e0 09             	shl    eax,0x9
c0025125:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002512a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002512e:	74 0e                	je     c002513e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025130:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025136:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002513a:	89 c1                	mov    ecx,eax
c002513c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002513e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025142:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025148:	8d 42 02             	lea    eax,[edx+0x2]
c002514b:	c1 e0 07             	shl    eax,0x7
c002514e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025152:	8b 00                	mov    eax,DWORD PTR [eax]
c0025154:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002515a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025160:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025164:	c1 e1 05             	shl    ecx,0x5
c0025167:	01 c8                	add    eax,ecx
c0025169:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002516d:	83 e1 01             	and    ecx,0x1
c0025170:	89 ce                	mov    esi,ecx
c0025172:	8a 08                	mov    cl,BYTE PTR [eax]
c0025174:	c1 e6 06             	shl    esi,0x6
c0025177:	83 e1 bf             	and    ecx,0xffffffbf
c002517a:	09 f1                	or     ecx,esi
c002517c:	88 08                	mov    BYTE PTR [eax],cl
c002517e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025180:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025186:	81 c9 05 00 01 00    	or     ecx,0x10005
c002518c:	89 08                	mov    DWORD PTR [eax],ecx
c002518e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025194:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002519a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00251a0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00251a3:	50                   	push   eax
c00251a4:	68 90 00 00 00       	push   0x90
c00251a9:	6a 00                	push   0x0
c00251ab:	56                   	push   esi
c00251ac:	e8 9f b5 fd ff       	call   c0000750 <memset>
c00251b1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00251b7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00251bb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00251c1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00251c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00251c9:	83 c4 10             	add    esp,0x10
c00251cc:	48                   	dec    eax
c00251cd:	25 ff ff 3f 00       	and    eax,0x3fffff
c00251d2:	89 c1                	mov    ecx,eax
c00251d4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00251da:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251df:	09 c8                	or     eax,ecx
c00251e1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00251e7:	66 8b 06             	mov    ax,WORD PTR [esi]
c00251ea:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00251f1:	66 25 00 7f          	and    ax,0x7f00
c00251f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00251f9:	66 0d 27 80          	or     ax,0x8027
c00251fd:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025202:	66 89 06             	mov    WORD PTR [esi],ax
c0025205:	19 c0                	sbb    eax,eax
c0025207:	83 e0 f0             	and    eax,0xfffffff0
c002520a:	83 c0 35             	add    eax,0x35
c002520d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025210:	89 e8                	mov    eax,ebp
c0025212:	c1 e8 10             	shr    eax,0x10
c0025215:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025218:	89 e8                	mov    eax,ebp
c002521a:	c1 e8 18             	shr    eax,0x18
c002521d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025220:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025224:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002522b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002522e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025232:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025236:	89 d6                	mov    esi,edx
c0025238:	31 c0                	xor    eax,eax
c002523a:	c1 e6 07             	shl    esi,0x7
c002523d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025241:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025247:	80 e1 88             	and    cl,0x88
c002524a:	74 0a                	je     c0025256 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002524c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025251:	74 0a                	je     c002525d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025253:	40                   	inc    eax
c0025254:	eb eb                	jmp    c0025241 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025256:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002525b:	75 0a                	jne    c0025267 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002525d:	83 ec 0c             	sub    esp,0xc
c0025260:	68 0d cf 02 c0       	push   0xc002cf0d
c0025265:	eb 56                	jmp    c00252bd <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025267:	b8 01 00 00 00       	mov    eax,0x1
c002526c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025270:	c1 e2 07             	shl    edx,0x7
c0025273:	d3 e0                	shl    eax,cl
c0025275:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025279:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002527f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025285:	85 c8                	test   eax,ecx
c0025287:	74 20                	je     c00252a9 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025289:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002528f:	0f ba e1 1e          	bt     ecx,0x1e
c0025293:	73 ea                	jae    c002527f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025295:	83 ec 0c             	sub    esp,0xc
c0025298:	68 1b cf 02 c0       	push   0xc002cf1b
c002529d:	e8 b1 50 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00252a2:	83 c4 10             	add    esp,0x10
c00252a5:	31 c0                	xor    eax,eax
c00252a7:	eb 3c                	jmp    c00252e5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252a9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00252af:	0f ba e0 1e          	bt     eax,0x1e
c00252b3:	73 17                	jae    c00252cc <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00252b5:	83 ec 0c             	sub    esp,0xc
c00252b8:	68 1b cf 02 c0       	push   0xc002cf1b
c00252bd:	e8 91 50 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00252c2:	83 c4 10             	add    esp,0x10
c00252c5:	b8 01 00 00 00       	mov    eax,0x1
c00252ca:	eb 19                	jmp    c00252e5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252cc:	31 c0                	xor    eax,eax
c00252ce:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00252d3:	75 10                	jne    c00252e5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252d5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00252db:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00252df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00252e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00252e5:	83 c4 2c             	add    esp,0x2c
c00252e8:	5b                   	pop    ebx
c00252e9:	5e                   	pop    esi
c00252ea:	5f                   	pop    edi
c00252eb:	5d                   	pop    ebp
c00252ec:	c3                   	ret    
c00252ed:	90                   	nop

c00252ee <SATA::read(unsigned long long, int, void*)>:
c00252ee:	57                   	push   edi
c00252ef:	b8 04 00 00 00       	mov    eax,0x4
c00252f4:	56                   	push   esi
c00252f5:	53                   	push   ebx
c00252f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00252fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00252fe:	8d 7a ff             	lea    edi,[edx-0x1]
c0025301:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025305:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025309:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002530f:	77 25                	ja     c0025336 <SATA::read(unsigned long long, int, void*)+0x48>
c0025311:	b8 06 00 00 00       	mov    eax,0x6
c0025316:	85 f6                	test   esi,esi
c0025318:	74 1c                	je     c0025336 <SATA::read(unsigned long long, int, void*)+0x48>
c002531a:	50                   	push   eax
c002531b:	50                   	push   eax
c002531c:	6a 00                	push   0x0
c002531e:	56                   	push   esi
c002531f:	52                   	push   edx
c0025320:	53                   	push   ebx
c0025321:	51                   	push   ecx
c0025322:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025326:	e8 5d fd ff ff       	call   c0025088 <SATA::access(unsigned long long, int, void*, bool)>
c002532b:	83 c4 20             	add    esp,0x20
c002532e:	85 c0                	test   eax,eax
c0025330:	0f 95 c0             	setne  al
c0025333:	0f b6 c0             	movzx  eax,al
c0025336:	5b                   	pop    ebx
c0025337:	5e                   	pop    esi
c0025338:	5f                   	pop    edi
c0025339:	c3                   	ret    

c002533a <SATA::write(unsigned long long, int, void*)>:
c002533a:	55                   	push   ebp
c002533b:	b8 04 00 00 00       	mov    eax,0x4
c0025340:	57                   	push   edi
c0025341:	56                   	push   esi
c0025342:	53                   	push   ebx
c0025343:	83 ec 0c             	sub    esp,0xc
c0025346:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002534a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002534e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0025351:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025355:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025359:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002535f:	77 3d                	ja     c002539e <SATA::write(unsigned long long, int, void*)+0x64>
c0025361:	b8 06 00 00 00       	mov    eax,0x6
c0025366:	85 ed                	test   ebp,ebp
c0025368:	74 34                	je     c002539e <SATA::write(unsigned long long, int, void*)+0x64>
c002536a:	c1 e3 09             	shl    ebx,0x9
c002536d:	01 eb                	add    ebx,ebp
c002536f:	89 d6                	mov    esi,edx
c0025371:	89 cf                	mov    edi,ecx
c0025373:	83 c6 01             	add    esi,0x1
c0025376:	83 d7 00             	adc    edi,0x0
c0025379:	50                   	push   eax
c002537a:	50                   	push   eax
c002537b:	6a 01                	push   0x1
c002537d:	55                   	push   ebp
c002537e:	81 c5 00 02 00 00    	add    ebp,0x200
c0025384:	6a 01                	push   0x1
c0025386:	51                   	push   ecx
c0025387:	52                   	push   edx
c0025388:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002538c:	e8 f7 fc ff ff       	call   c0025088 <SATA::access(unsigned long long, int, void*, bool)>
c0025391:	83 c4 20             	add    esp,0x20
c0025394:	89 f2                	mov    edx,esi
c0025396:	89 f9                	mov    ecx,edi
c0025398:	39 dd                	cmp    ebp,ebx
c002539a:	75 d3                	jne    c002536f <SATA::write(unsigned long long, int, void*)+0x35>
c002539c:	31 c0                	xor    eax,eax
c002539e:	83 c4 0c             	add    esp,0xc
c00253a1:	5b                   	pop    ebx
c00253a2:	5e                   	pop    esi
c00253a3:	5f                   	pop    edi
c00253a4:	5d                   	pop    ebp
c00253a5:	c3                   	ret    

c00253a6 <SATAPI::write(unsigned long long, int, void*)>:
c00253a6:	b8 03 00 00 00       	mov    eax,0x3
c00253ab:	c3                   	ret    

c00253ac <SATAPI::close(int, int, void*)>:
c00253ac:	83 ec 0c             	sub    esp,0xc
c00253af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253b9:	85 c0                	test   eax,eax
c00253bb:	74 0c                	je     c00253c9 <SATAPI::close(int, int, void*)+0x1d>
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00253c2:	50                   	push   eax
c00253c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	31 c0                	xor    eax,eax
c00253cb:	83 c4 0c             	add    esp,0xc
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <SATAPI::SATAPI()>:
c00253d0:	83 ec 0c             	sub    esp,0xc
c00253d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d7:	83 ec 04             	sub    esp,0x4
c00253da:	68 00 08 00 00       	push   0x800
c00253df:	68 64 cf 02 c0       	push   0xc002cf64
c00253e4:	50                   	push   eax
c00253e5:	e8 3a ee fe ff       	call   c0014224 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00253ea:	83 c4 10             	add    esp,0x10
c00253ed:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c00253f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f6:	89 10                	mov    DWORD PTR [eax],edx
c00253f8:	90                   	nop
c00253f9:	83 c4 0c             	add    esp,0xc
c00253fc:	c3                   	ret    
c00253fd:	90                   	nop

c00253fe <SATAPI::diskRemoved()>:
c00253fe:	83 ec 18             	sub    esp,0x18
c0025401:	68 70 cf 02 c0       	push   0xc002cf70
c0025406:	e8 aa d5 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002540b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002540f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025416:	83 c4 1c             	add    esp,0x1c
c0025419:	c3                   	ret    

c002541a <SATAPI::diskInserted()>:
c002541a:	53                   	push   ebx
c002541b:	83 ec 14             	sub    esp,0x14
c002541e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025422:	68 87 cf 02 c0       	push   0xc002cf87
c0025427:	e8 89 d5 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c002542c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025436:	e8 51 ee fe ff       	call   c001428c <PhysicalDisk::startCache()>
c002543b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002543f:	83 c4 18             	add    esp,0x18
c0025442:	5b                   	pop    ebx
c0025443:	e9 cc 10 ff ff       	jmp    c0016514 <createPartitionsForDisk(PhysicalDisk*)>

c0025448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025448:	55                   	push   ebp
c0025449:	57                   	push   edi
c002544a:	56                   	push   esi
c002544b:	53                   	push   ebx
c002544c:	83 ec 34             	sub    esp,0x34
c002544f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025453:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025457:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002545b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002545f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025463:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025469:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002546f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025473:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025479:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002547d:	c1 e0 07             	shl    eax,0x7
c0025480:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025484:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025488:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025496:	8d 58 02             	lea    ebx,[eax+0x2]
c0025499:	c1 e3 07             	shl    ebx,0x7
c002549c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00254a0:	53                   	push   ebx
c00254a1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254a7:	e8 ee eb ff ff       	call   c002409a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254b0:	83 c4 10             	add    esp,0x10
c00254b3:	b8 01 00 00 00       	mov    eax,0x1
c00254b8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00254bd:	0f 84 85 01 00 00    	je     c0025648 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00254c3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00254c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00254cb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00254d1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00254d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00254db:	c1 e1 05             	shl    ecx,0x5
c00254de:	01 c8                	add    eax,ecx
c00254e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00254e2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00254e8:	81 c9 25 00 01 00    	or     ecx,0x10025
c00254ee:	89 08                	mov    DWORD PTR [eax],ecx
c00254f0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00254f6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00254fc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025502:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025505:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025508:	50                   	push   eax
c0025509:	68 90 00 00 00       	push   0x90
c002550e:	6a 00                	push   0x0
c0025510:	53                   	push   ebx
c0025511:	e8 3a b2 fd ff       	call   c0000750 <memset>
c0025516:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002551a:	b9 0c 00 00 00       	mov    ecx,0xc
c002551f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025521:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025527:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002552b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025531:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025535:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025539:	48                   	dec    eax
c002553a:	25 ff ff 3f 00       	and    eax,0x3fffff
c002553f:	89 c1                	mov    ecx,eax
c0025541:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025547:	25 00 00 c0 ff       	and    eax,0xffc00000
c002554c:	09 c8                	or     eax,ecx
c002554e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025554:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025557:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002555e:	66 25 00 7f          	and    ax,0x7f00
c0025562:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025566:	66 0d 27 80          	or     ax,0x8027
c002556a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002556e:	66 89 03             	mov    WORD PTR [ebx],ax
c0025571:	89 d0                	mov    eax,edx
c0025573:	c1 ea 18             	shr    edx,0x18
c0025576:	c1 e8 10             	shr    eax,0x10
c0025579:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002557c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002557f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025583:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025586:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002558a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002558d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025591:	83 c4 10             	add    esp,0x10
c0025594:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025598:	31 c0                	xor    eax,eax
c002559a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002559e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00255a4:	80 e2 88             	and    dl,0x88
c00255a7:	74 0a                	je     c00255b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00255a9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255ae:	74 0a                	je     c00255ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00255b0:	40                   	inc    eax
c00255b1:	eb eb                	jmp    c002559e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00255b3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255b8:	75 0f                	jne    c00255c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	68 0d cf 02 c0       	push   0xc002cf0d
c00255c2:	e8 8c 4d ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00255c7:	eb 3f                	jmp    c0025608 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00255c9:	ba 01 00 00 00       	mov    edx,0x1
c00255ce:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00255d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255d6:	d3 e2                	shl    edx,cl
c00255d8:	c1 e0 07             	shl    eax,0x7
c00255db:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00255e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255e5:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00255eb:	85 ca                	test   edx,ecx
c00255ed:	74 23                	je     c0025612 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00255ef:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00255f5:	0f ba e1 1e          	bt     ecx,0x1e
c00255f9:	73 ea                	jae    c00255e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00255fb:	83 ec 0c             	sub    esp,0xc
c00255fe:	68 9f cf 02 c0       	push   0xc002cf9f
c0025603:	e8 ad d3 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0025608:	83 c4 10             	add    esp,0x10
c002560b:	b8 01 00 00 00       	mov    eax,0x1
c0025610:	eb 36                	jmp    c0025648 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025612:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025618:	0f ba e0 1e          	bt     eax,0x1e
c002561c:	73 0a                	jae    c0025628 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002561e:	83 ec 0c             	sub    esp,0xc
c0025621:	68 b2 cf 02 c0       	push   0xc002cfb2
c0025626:	eb db                	jmp    c0025603 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025628:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002562d:	74 17                	je     c0025646 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002562f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025634:	74 10                	je     c0025646 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025636:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c002563c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025640:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025644:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025646:	31 c0                	xor    eax,eax
c0025648:	83 c4 2c             	add    esp,0x2c
c002564b:	5b                   	pop    ebx
c002564c:	5e                   	pop    esi
c002564d:	5f                   	pop    edi
c002564e:	5d                   	pop    ebp
c002564f:	c3                   	ret    

c0025650 <SATAPI::eject()>:
c0025650:	57                   	push   edi
c0025651:	b9 03 00 00 00       	mov    ecx,0x3
c0025656:	53                   	push   ebx
c0025657:	83 ec 14             	sub    esp,0x14
c002565a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002565e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025662:	fc                   	cld    
c0025663:	31 c0                	xor    eax,eax
c0025665:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025667:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002566c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025671:	50                   	push   eax
c0025672:	6a 00                	push   0x0
c0025674:	6a 00                	push   0x0
c0025676:	6a 00                	push   0x0
c0025678:	6a 00                	push   0x0
c002567a:	6a 02                	push   0x2
c002567c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025680:	50                   	push   eax
c0025681:	53                   	push   ebx
c0025682:	e8 c1 fd ff ff       	call   c0025448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025687:	83 c4 14             	add    esp,0x14
c002568a:	53                   	push   ebx
c002568b:	e8 6e fd ff ff       	call   c00253fe <SATAPI::diskRemoved()>
c0025690:	83 c4 24             	add    esp,0x24
c0025693:	31 c0                	xor    eax,eax
c0025695:	5b                   	pop    ebx
c0025696:	5f                   	pop    edi
c0025697:	c3                   	ret    

c0025698 <SATAPI::detectMedia()>:
c0025698:	56                   	push   esi
c0025699:	53                   	push   ebx
c002569a:	83 ec 28             	sub    esp,0x28
c002569d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256a1:	6a 0c                	push   0xc
c00256a3:	6a 00                	push   0x0
c00256a5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00256a9:	56                   	push   esi
c00256aa:	e8 a1 b0 fd ff       	call   c0000750 <memset>
c00256af:	83 c4 0c             	add    esp,0xc
c00256b2:	6a 00                	push   0x0
c00256b4:	6a 00                	push   0x0
c00256b6:	6a 00                	push   0x0
c00256b8:	6a 00                	push   0x0
c00256ba:	6a 00                	push   0x0
c00256bc:	56                   	push   esi
c00256bd:	53                   	push   ebx
c00256be:	e8 85 fd ff ff       	call   c0025448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256c3:	83 c4 1c             	add    esp,0x1c
c00256c6:	6a 0c                	push   0xc
c00256c8:	6a 00                	push   0x0
c00256ca:	56                   	push   esi
c00256cb:	e8 80 b0 fd ff       	call   c0000750 <memset>
c00256d0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00256d5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00256da:	83 c4 0c             	add    esp,0xc
c00256dd:	6a 01                	push   0x1
c00256df:	8d 44 24 16          	lea    eax,[esp+0x16]
c00256e3:	50                   	push   eax
c00256e4:	6a 00                	push   0x0
c00256e6:	6a 00                	push   0x0
c00256e8:	6a 12                	push   0x12
c00256ea:	56                   	push   esi
c00256eb:	53                   	push   ebx
c00256ec:	e8 57 fd ff ff       	call   c0025448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256f1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00256f5:	83 c4 20             	add    esp,0x20
c00256f8:	83 e0 7f             	and    eax,0x7f
c00256fb:	3c 70                	cmp    al,0x70
c00256fd:	74 15                	je     c0025714 <SATAPI::detectMedia()+0x7c>
c00256ff:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025706:	75 0c                	jne    c0025714 <SATAPI::detectMedia()+0x7c>
c0025708:	83 ec 0c             	sub    esp,0xc
c002570b:	53                   	push   ebx
c002570c:	e8 09 fd ff ff       	call   c002541a <SATAPI::diskInserted()>
c0025711:	83 c4 10             	add    esp,0x10
c0025714:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025718:	83 e0 0f             	and    eax,0xf
c002571b:	3c 02                	cmp    al,0x2
c002571d:	75 1b                	jne    c002573a <SATAPI::detectMedia()+0xa2>
c002571f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025724:	75 2d                	jne    c0025753 <SATAPI::detectMedia()+0xbb>
c0025726:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002572d:	74 24                	je     c0025753 <SATAPI::detectMedia()+0xbb>
c002572f:	83 ec 0c             	sub    esp,0xc
c0025732:	53                   	push   ebx
c0025733:	e8 c6 fc ff ff       	call   c00253fe <SATAPI::diskRemoved()>
c0025738:	eb 16                	jmp    c0025750 <SATAPI::detectMedia()+0xb8>
c002573a:	84 c0                	test   al,al
c002573c:	75 15                	jne    c0025753 <SATAPI::detectMedia()+0xbb>
c002573e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025745:	75 0c                	jne    c0025753 <SATAPI::detectMedia()+0xbb>
c0025747:	83 ec 0c             	sub    esp,0xc
c002574a:	53                   	push   ebx
c002574b:	e8 ca fc ff ff       	call   c002541a <SATAPI::diskInserted()>
c0025750:	83 c4 10             	add    esp,0x10
c0025753:	83 c4 24             	add    esp,0x24
c0025756:	5b                   	pop    ebx
c0025757:	5e                   	pop    esi
c0025758:	c3                   	ret    
c0025759:	90                   	nop

c002575a <SATAPI::open(int, int, void*)>:
c002575a:	56                   	push   esi
c002575b:	53                   	push   ebx
c002575c:	50                   	push   eax
c002575d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025765:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002576f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025775:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002577f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025783:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002578d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025793:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002579a:	e8 ba a5 fe ff       	call   c000fd59 <Phys::allocatePage()>
c002579f:	89 c6                	mov    esi,eax
c00257a1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257a7:	81 c6 00 10 00 00    	add    esi,0x1000
c00257ad:	e8 a7 a5 fe ff       	call   c000fd59 <Phys::allocatePage()>
c00257b2:	39 c6                	cmp    esi,eax
c00257b4:	74 10                	je     c00257c6 <SATAPI::open(int, int, void*)+0x6c>
c00257b6:	83 ec 0c             	sub    esp,0xc
c00257b9:	68 c7 cf 02 c0       	push   0xc002cfc7
c00257be:	e8 90 4b ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00257c3:	83 c4 10             	add    esp,0x10
c00257c6:	83 ec 0c             	sub    esp,0xc
c00257c9:	6a 02                	push   0x2
c00257cb:	e8 13 be fe ff       	call   c00115e3 <Virt::allocateKernelVirtualPages(int)>
c00257d0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00257d6:	6a 03                	push   0x3
c00257d8:	50                   	push   eax
c00257d9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00257df:	ff 35 30 e7 02 c0    	push   DWORD PTR ds:0xc002e730
c00257e5:	e8 a0 c4 fe ff       	call   c0011c8a <VAS::mapPage(unsigned long, unsigned long, int)>
c00257ea:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00257f1:	83 c4 14             	add    esp,0x14
c00257f4:	53                   	push   ebx
c00257f5:	e8 9e fe ff ff       	call   c0025698 <SATAPI::detectMedia()>
c00257fa:	83 c4 14             	add    esp,0x14
c00257fd:	31 c0                	xor    eax,eax
c00257ff:	5b                   	pop    ebx
c0025800:	5e                   	pop    esi
c0025801:	c3                   	ret    

c0025802 <SATAPI::read(unsigned long long, int, void*)>:
c0025802:	55                   	push   ebp
c0025803:	57                   	push   edi
c0025804:	56                   	push   esi
c0025805:	53                   	push   ebx
c0025806:	83 ec 1c             	sub    esp,0x1c
c0025809:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002580d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025811:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025815:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002581c:	74 19                	je     c0025837 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002581e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025823:	7e 2e                	jle    c0025853 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025825:	83 ec 0c             	sub    esp,0xc
c0025828:	68 dd cf 02 c0       	push   0xc002cfdd
c002582d:	e8 21 4b ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0025832:	83 c4 10             	add    esp,0x10
c0025835:	eb 1c                	jmp    c0025853 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025837:	83 ec 0c             	sub    esp,0xc
c002583a:	55                   	push   ebp
c002583b:	e8 58 fe ff ff       	call   c0025698 <SATAPI::detectMedia()>
c0025840:	83 c4 10             	add    esp,0x10
c0025843:	b8 02 00 00 00       	mov    eax,0x2
c0025848:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002584f:	75 cd                	jne    c002581e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025851:	eb 49                	jmp    c002589c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025853:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025857:	b9 03 00 00 00       	mov    ecx,0x3
c002585c:	fc                   	cld    
c002585d:	31 c0                	xor    eax,eax
c002585f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025861:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025866:	89 d8                	mov    eax,ebx
c0025868:	86 e0                	xchg   al,ah
c002586a:	c1 c0 10             	rol    eax,0x10
c002586d:	86 e0                	xchg   al,ah
c002586f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025873:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025877:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002587b:	50                   	push   eax
c002587c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025880:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025884:	56                   	push   esi
c0025885:	53                   	push   ebx
c0025886:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002588a:	c1 e0 0b             	shl    eax,0xb
c002588d:	50                   	push   eax
c002588e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025892:	50                   	push   eax
c0025893:	55                   	push   ebp
c0025894:	e8 af fb ff ff       	call   c0025448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025899:	83 c4 20             	add    esp,0x20
c002589c:	83 c4 1c             	add    esp,0x1c
c002589f:	5b                   	pop    ebx
c00258a0:	5e                   	pop    esi
c00258a1:	5f                   	pop    edi
c00258a2:	5d                   	pop    ebp
c00258a3:	c3                   	ret    

c00258a4 <AVX::open(int, int, void*)>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	e8 3c 11 00 00       	call   c00269e8 <avxInit>
c00258ac:	b8 00 00 00 00       	mov    eax,0x0
c00258b1:	83 c4 0c             	add    esp,0xc
c00258b4:	c3                   	ret    
c00258b5:	90                   	nop

c00258b6 <AVX::close(int, int, void*)>:
c00258b6:	83 ec 0c             	sub    esp,0xc
c00258b9:	e8 2b 11 00 00       	call   c00269e9 <avxClose>
c00258be:	b8 00 00 00 00       	mov    eax,0x0
c00258c3:	83 c4 0c             	add    esp,0xc
c00258c6:	c3                   	ret    
c00258c7:	90                   	nop

c00258c8 <AVX::available()>:
c00258c8:	83 ec 0c             	sub    esp,0xc
c00258cb:	e8 10 11 00 00       	call   c00269e0 <avxDetect>
c00258d0:	85 c0                	test   eax,eax
c00258d2:	0f 95 c0             	setne  al
c00258d5:	83 c4 0c             	add    esp,0xc
c00258d8:	c3                   	ret    
c00258d9:	90                   	nop

c00258da <AVX::save(void*)>:
c00258da:	83 ec 0c             	sub    esp,0xc
c00258dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258e1:	83 ec 0c             	sub    esp,0xc
c00258e4:	50                   	push   eax
c00258e5:	e8 fc 10 00 00       	call   c00269e6 <avxSave>
c00258ea:	83 c4 10             	add    esp,0x10
c00258ed:	90                   	nop
c00258ee:	83 c4 0c             	add    esp,0xc
c00258f1:	c3                   	ret    

c00258f2 <AVX::load(void*)>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258f9:	83 ec 0c             	sub    esp,0xc
c00258fc:	50                   	push   eax
c00258fd:	e8 e5 10 00 00       	call   c00269e7 <avxLoad>
c0025902:	83 c4 10             	add    esp,0x10
c0025905:	90                   	nop
c0025906:	83 c4 0c             	add    esp,0xc
c0025909:	c3                   	ret    

c002590a <AVX::AVX()>:
c002590a:	83 ec 0c             	sub    esp,0xc
c002590d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025911:	83 ec 08             	sub    esp,0x8
c0025914:	68 40 d0 02 c0       	push   0xc002d040
c0025919:	50                   	push   eax
c002591a:	e8 e3 e9 fe ff       	call   c0014302 <FPU::FPU(char const*)>
c002591f:	83 c4 10             	add    esp,0x10
c0025922:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c0025927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592b:	89 10                	mov    DWORD PTR [eax],edx
c002592d:	90                   	nop
c002592e:	83 c4 0c             	add    esp,0xc
c0025931:	c3                   	ret    

c0025932 <MMX::available()>:
c0025932:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025937:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002593d:	83 e0 20             	and    eax,0x20
c0025940:	84 c0                	test   al,al
c0025942:	0f 95 c0             	setne  al
c0025945:	c3                   	ret    

c0025946 <MMX::open(int, int, void*)>:
c0025946:	83 ec 0c             	sub    esp,0xc
c0025949:	e8 24 11 00 00       	call   c0026a72 <x87Init>
c002594e:	b8 00 00 00 00       	mov    eax,0x0
c0025953:	83 c4 0c             	add    esp,0xc
c0025956:	c3                   	ret    
c0025957:	90                   	nop

c0025958 <MMX::close(int, int, void*)>:
c0025958:	83 ec 0c             	sub    esp,0xc
c002595b:	e8 2c 11 00 00       	call   c0026a8c <x87Close>
c0025960:	b8 00 00 00 00       	mov    eax,0x0
c0025965:	83 c4 0c             	add    esp,0xc
c0025968:	c3                   	ret    
c0025969:	90                   	nop

c002596a <MMX::save(void*)>:
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025971:	83 ec 0c             	sub    esp,0xc
c0025974:	50                   	push   eax
c0025975:	e8 e7 10 00 00       	call   c0026a61 <x87Save>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	90                   	nop
c002597e:	83 c4 0c             	add    esp,0xc
c0025981:	c3                   	ret    

c0025982 <MMX::load(void*)>:
c0025982:	83 ec 0c             	sub    esp,0xc
c0025985:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025989:	83 ec 0c             	sub    esp,0xc
c002598c:	50                   	push   eax
c002598d:	e8 d8 10 00 00       	call   c0026a6a <x87Load>
c0025992:	83 c4 10             	add    esp,0x10
c0025995:	90                   	nop
c0025996:	83 c4 0c             	add    esp,0xc
c0025999:	c3                   	ret    

c002599a <MMX::MMX()>:
c002599a:	83 ec 0c             	sub    esp,0xc
c002599d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a1:	83 ec 08             	sub    esp,0x8
c00259a4:	68 80 d0 02 c0       	push   0xc002d080
c00259a9:	50                   	push   eax
c00259aa:	e8 53 e9 fe ff       	call   c0014302 <FPU::FPU(char const*)>
c00259af:	83 c4 10             	add    esp,0x10
c00259b2:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c00259b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259bb:	89 10                	mov    DWORD PTR [eax],edx
c00259bd:	90                   	nop
c00259be:	83 c4 0c             	add    esp,0xc
c00259c1:	c3                   	ret    

c00259c2 <SSE::open(int, int, void*)>:
c00259c2:	83 ec 0c             	sub    esp,0xc
c00259c5:	e8 5a 10 00 00       	call   c0026a24 <sseInit>
c00259ca:	b8 00 00 00 00       	mov    eax,0x0
c00259cf:	83 c4 0c             	add    esp,0xc
c00259d2:	c3                   	ret    
c00259d3:	90                   	nop

c00259d4 <SSE::close(int, int, void*)>:
c00259d4:	83 ec 0c             	sub    esp,0xc
c00259d7:	e8 58 10 00 00       	call   c0026a34 <sseClose>
c00259dc:	b8 00 00 00 00       	mov    eax,0x0
c00259e1:	83 c4 0c             	add    esp,0xc
c00259e4:	c3                   	ret    
c00259e5:	90                   	nop

c00259e6 <SSE::available()>:
c00259e6:	83 ec 1c             	sub    esp,0x1c
c00259e9:	e8 12 10 00 00       	call   c0026a00 <absolutelyNoChanceInHell>
c00259ee:	85 c0                	test   eax,eax
c00259f0:	0f 95 c0             	setne  al
c00259f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00259f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00259fb:	83 c4 1c             	add    esp,0x1c
c00259fe:	c3                   	ret    
c00259ff:	90                   	nop

c0025a00 <SSE::save(void*)>:
c0025a00:	83 ec 0c             	sub    esp,0xc
c0025a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a07:	83 ec 0c             	sub    esp,0xc
c0025a0a:	50                   	push   eax
c0025a0b:	e8 08 10 00 00       	call   c0026a18 <sseSave>
c0025a10:	83 c4 10             	add    esp,0x10
c0025a13:	90                   	nop
c0025a14:	83 c4 0c             	add    esp,0xc
c0025a17:	c3                   	ret    

c0025a18 <SSE::load(void*)>:
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a1f:	83 ec 0c             	sub    esp,0xc
c0025a22:	50                   	push   eax
c0025a23:	e8 f6 0f 00 00       	call   c0026a1e <sseLoad>
c0025a28:	83 c4 10             	add    esp,0x10
c0025a2b:	90                   	nop
c0025a2c:	83 c4 0c             	add    esp,0xc
c0025a2f:	c3                   	ret    

c0025a30 <SSE::SSE()>:
c0025a30:	83 ec 0c             	sub    esp,0xc
c0025a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a37:	83 ec 08             	sub    esp,0x8
c0025a3a:	68 c0 d0 02 c0       	push   0xc002d0c0
c0025a3f:	50                   	push   eax
c0025a40:	e8 bd e8 fe ff       	call   c0014302 <FPU::FPU(char const*)>
c0025a45:	83 c4 10             	add    esp,0x10
c0025a48:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c0025a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a51:	89 10                	mov    DWORD PTR [eax],edx
c0025a53:	90                   	nop
c0025a54:	83 c4 0c             	add    esp,0xc
c0025a57:	c3                   	ret    

c0025a58 <x87::open(int, int, void*)>:
c0025a58:	83 ec 0c             	sub    esp,0xc
c0025a5b:	e8 12 10 00 00       	call   c0026a72 <x87Init>
c0025a60:	b8 00 00 00 00       	mov    eax,0x0
c0025a65:	83 c4 0c             	add    esp,0xc
c0025a68:	c3                   	ret    
c0025a69:	90                   	nop

c0025a6a <x87::close(int, int, void*)>:
c0025a6a:	83 ec 0c             	sub    esp,0xc
c0025a6d:	e8 1a 10 00 00       	call   c0026a8c <x87Close>
c0025a72:	b8 00 00 00 00       	mov    eax,0x0
c0025a77:	83 c4 0c             	add    esp,0xc
c0025a7a:	c3                   	ret    
c0025a7b:	90                   	nop

c0025a7c <x87::available()>:
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	e8 c2 0f 00 00       	call   c0026a46 <x87Detect>
c0025a84:	85 c0                	test   eax,eax
c0025a86:	0f 95 c0             	setne  al
c0025a89:	83 c4 0c             	add    esp,0xc
c0025a8c:	c3                   	ret    
c0025a8d:	90                   	nop

c0025a8e <x87::save(void*)>:
c0025a8e:	83 ec 0c             	sub    esp,0xc
c0025a91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a95:	83 ec 0c             	sub    esp,0xc
c0025a98:	50                   	push   eax
c0025a99:	e8 c3 0f 00 00       	call   c0026a61 <x87Save>
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	90                   	nop
c0025aa2:	83 c4 0c             	add    esp,0xc
c0025aa5:	c3                   	ret    

c0025aa6 <x87::load(void*)>:
c0025aa6:	83 ec 0c             	sub    esp,0xc
c0025aa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025aad:	83 ec 0c             	sub    esp,0xc
c0025ab0:	50                   	push   eax
c0025ab1:	e8 b4 0f 00 00       	call   c0026a6a <x87Load>
c0025ab6:	83 c4 10             	add    esp,0x10
c0025ab9:	90                   	nop
c0025aba:	83 c4 0c             	add    esp,0xc
c0025abd:	c3                   	ret    

c0025abe <x87::x87()>:
c0025abe:	83 ec 0c             	sub    esp,0xc
c0025ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac5:	83 ec 08             	sub    esp,0x8
c0025ac8:	68 00 d1 02 c0       	push   0xc002d100
c0025acd:	50                   	push   eax
c0025ace:	e8 2f e8 fe ff       	call   c0014302 <FPU::FPU(char const*)>
c0025ad3:	83 c4 10             	add    esp,0x10
c0025ad6:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c0025adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adf:	89 10                	mov    DWORD PTR [eax],edx
c0025ae1:	90                   	nop
c0025ae2:	83 c4 0c             	add    esp,0xc
c0025ae5:	c3                   	ret    

c0025ae6 <APIC::disable()>:
c0025ae6:	90                   	nop
c0025ae7:	c3                   	ret    

c0025ae8 <APIC::close(int, int, void*)>:
c0025ae8:	55                   	push   ebp
c0025ae9:	89 e5                	mov    ebp,esp
c0025aeb:	83 ec 08             	sub    esp,0x8
c0025aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025af3:	83 c0 3c             	add    eax,0x3c
c0025af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025af8:	83 ec 0c             	sub    esp,0xc
c0025afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025afe:	ff d0                	call   eax
c0025b00:	83 c4 10             	add    esp,0x10
c0025b03:	b8 00 00 00 00       	mov    eax,0x0
c0025b08:	c9                   	leave  
c0025b09:	c3                   	ret    

c0025b0a <IOAPIC::close(int, int, void*)>:
c0025b0a:	b8 00 00 00 00       	mov    eax,0x0
c0025b0f:	c3                   	ret    

c0025b10 <APIC::io_wait()>:
c0025b10:	eb 00                	jmp    c0025b12 <APIC::io_wait()+0x2>
c0025b12:	eb 00                	jmp    c0025b14 <APIC::io_wait()+0x4>
c0025b14:	90                   	nop
c0025b15:	c3                   	ret    

c0025b16 <APIC::getBase()>:
c0025b16:	55                   	push   ebp
c0025b17:	89 e5                	mov    ebp,esp
c0025b19:	83 ec 18             	sub    esp,0x18
c0025b1c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025b21:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b27:	83 e0 08             	and    eax,0x8
c0025b2a:	84 c0                	test   al,al
c0025b2c:	75 07                	jne    c0025b35 <APIC::getBase()+0x1f>
c0025b2e:	b8 00 00 00 00       	mov    eax,0x0
c0025b33:	eb 21                	jmp    c0025b56 <APIC::getBase()+0x40>
c0025b35:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025b3a:	83 ec 08             	sub    esp,0x8
c0025b3d:	6a 1b                	push   0x1b
c0025b3f:	50                   	push   eax
c0025b40:	e8 3d 92 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025b45:	83 c4 10             	add    esp,0x10
c0025b48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b4b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025b4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b51:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025b56:	c9                   	leave  
c0025b57:	c3                   	ret    

c0025b58 <APIC::eoi(unsigned char)>:
c0025b58:	55                   	push   ebp
c0025b59:	89 e5                	mov    ebp,esp
c0025b5b:	83 ec 28             	sub    esp,0x28
c0025b5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b61:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b64:	83 ec 0c             	sub    esp,0xc
c0025b67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b6a:	e8 a7 ff ff ff       	call   c0025b16 <APIC::getBase()>
c0025b6f:	83 c4 10             	add    esp,0x10
c0025b72:	05 b0 00 00 00       	add    eax,0xb0
c0025b77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025b7d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025b83:	90                   	nop
c0025b84:	c9                   	leave  
c0025b85:	c3                   	ret    

c0025b86 <APIC::open(int, int, void*)>:
c0025b86:	55                   	push   ebp
c0025b87:	89 e5                	mov    ebp,esp
c0025b89:	57                   	push   edi
c0025b8a:	56                   	push   esi
c0025b8b:	53                   	push   ebx
c0025b8c:	83 ec 2c             	sub    esp,0x2c
c0025b8f:	83 ec 0c             	sub    esp,0xc
c0025b92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b95:	e8 7c ff ff ff       	call   c0025b16 <APIC::getBase()>
c0025b9a:	83 c4 10             	add    esp,0x10
c0025b9d:	89 c2                	mov    edx,eax
c0025b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ba8:	0f b6 f8             	movzx  edi,al
c0025bab:	89 d0                	mov    eax,edx
c0025bad:	ba 00 00 00 00       	mov    edx,0x0
c0025bb2:	89 c1                	mov    ecx,eax
c0025bb4:	80 e5 ff             	and    ch,0xff
c0025bb7:	89 cb                	mov    ebx,ecx
c0025bb9:	0f b6 f2             	movzx  esi,dl
c0025bbc:	89 d8                	mov    eax,ebx
c0025bbe:	89 f2                	mov    edx,esi
c0025bc0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bc3:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bc6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bce:	83 e0 00             	and    eax,0x0
c0025bd1:	09 d0                	or     eax,edx
c0025bd3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bda:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025be0:	8d 50 01             	lea    edx,[eax+0x1]
c0025be3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025be6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bec:	0f b6 d0             	movzx  edx,al
c0025bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf2:	83 c2 08             	add    edx,0x8
c0025bf5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bf9:	0f b6 c9             	movzx  ecx,cl
c0025bfc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c02:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c06:	83 ec 0c             	sub    esp,0xc
c0025c09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c0c:	e8 05 ff ff ff       	call   c0025b16 <APIC::getBase()>
c0025c11:	83 c4 10             	add    esp,0x10
c0025c14:	05 f0 00 00 00       	add    eax,0xf0
c0025c19:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c1c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c21:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c24:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025c2b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025c32:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c35:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c38:	89 10                	mov    DWORD PTR [eax],edx
c0025c3a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025c41:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c0025c46:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025c49:	7d 7c                	jge    c0025cc7 <APIC::open(int, int, void*)+0x141>
c0025c4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c4e:	8b 04 85 80 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1180]
c0025c55:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025c58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c5b:	8b 04 85 80 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1180]
c0025c62:	c1 e8 08             	shr    eax,0x8
c0025c65:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025c69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c6c:	8b 04 85 80 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1180]
c0025c73:	c1 e8 18             	shr    eax,0x18
c0025c76:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025c79:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025c7d:	75 40                	jne    c0025cbf <APIC::open(int, int, void*)+0x139>
c0025c7f:	83 ec 0c             	sub    esp,0xc
c0025c82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c85:	e8 8c fe ff ff       	call   c0025b16 <APIC::getBase()>
c0025c8a:	83 c4 10             	add    esp,0x10
c0025c8d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025c91:	75 07                	jne    c0025c9a <APIC::open(int, int, void*)+0x114>
c0025c93:	ba 60 03 00 00       	mov    edx,0x360
c0025c98:	eb 05                	jmp    c0025c9f <APIC::open(int, int, void*)+0x119>
c0025c9a:	ba 50 03 00 00       	mov    edx,0x350
c0025c9f:	01 d0                	add    eax,edx
c0025ca1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ca4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ca9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025cac:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025cb3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025cb7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025cba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025cbd:	89 10                	mov    DWORD PTR [eax],edx
c0025cbf:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025cc2:	e9 7a ff ff ff       	jmp    c0025c41 <APIC::open(int, int, void*)+0xbb>
c0025cc7:	b8 00 00 00 00       	mov    eax,0x0
c0025ccc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ccf:	5b                   	pop    ebx
c0025cd0:	5e                   	pop    esi
c0025cd1:	5f                   	pop    edi
c0025cd2:	5d                   	pop    ebp
c0025cd3:	c3                   	ret    

c0025cd4 <IOAPIC::IOAPIC()>:
c0025cd4:	83 ec 0c             	sub    esp,0xc
c0025cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cdb:	83 ec 08             	sub    esp,0x8
c0025cde:	68 40 d1 02 c0       	push   0xc002d140
c0025ce3:	50                   	push   eax
c0025ce4:	e8 09 e3 fe ff       	call   c0013ff2 <Device::Device(char const*)>
c0025ce9:	83 c4 10             	add    esp,0x10
c0025cec:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c0025cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf5:	89 10                	mov    DWORD PTR [eax],edx
c0025cf7:	90                   	nop
c0025cf8:	83 c4 0c             	add    esp,0xc
c0025cfb:	c3                   	ret    

c0025cfc <APIC::APIC()>:
c0025cfc:	53                   	push   ebx
c0025cfd:	83 ec 18             	sub    esp,0x18
c0025d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d04:	83 ec 08             	sub    esp,0x8
c0025d07:	68 48 d1 02 c0       	push   0xc002d148
c0025d0c:	50                   	push   eax
c0025d0d:	e8 4a ea fe ff       	call   c001475c <InterruptController::InterruptController(char const*)>
c0025d12:	83 c4 10             	add    esp,0x10
c0025d15:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c0025d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d1e:	89 10                	mov    DWORD PTR [eax],edx
c0025d20:	a0 40 09 03 c0       	mov    al,ds:0xc0030940
c0025d25:	83 f0 01             	xor    eax,0x1
c0025d28:	84 c0                	test   al,al
c0025d2a:	0f 84 a1 00 00 00    	je     c0025dd1 <APIC::APIC()+0xd5>
c0025d30:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025d35:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c0025d3a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025d3e:	0f 83 86 00 00 00    	jae    c0025dca <APIC::APIC()+0xce>
c0025d44:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025d4c:	83 ec 0c             	sub    esp,0xc
c0025d4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d53:	e8 05 9c fe ff       	call   c000f95d <malloc>
c0025d58:	83 c4 10             	add    esp,0x10
c0025d5b:	89 c3                	mov    ebx,eax
c0025d5d:	83 ec 0c             	sub    esp,0xc
c0025d60:	53                   	push   ebx
c0025d61:	e8 6e ff ff ff       	call   c0025cd4 <IOAPIC::IOAPIC()>
c0025d66:	83 c4 10             	add    esp,0x10
c0025d69:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025d6d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025d72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025d76:	89 14 85 20 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6e0],edx
c0025d7d:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c0025d82:	40                   	inc    eax
c0025d83:	a3 00 09 03 c0       	mov    ds:0xc0030900,eax
c0025d88:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025d8d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025d93:	83 ec 08             	sub    esp,0x8
c0025d96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d9a:	50                   	push   eax
c0025d9b:	e8 4e e0 fe ff       	call   c0013dee <Device::addChild(Device*)>
c0025da0:	83 c4 10             	add    esp,0x10
c0025da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025da9:	83 c0 08             	add    eax,0x8
c0025dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025db3:	6a 00                	push   0x0
c0025db5:	6a 00                	push   0x0
c0025db7:	52                   	push   edx
c0025db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025dbc:	ff d0                	call   eax
c0025dbe:	83 c4 10             	add    esp,0x10
c0025dc1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025dc5:	e9 6b ff ff ff       	jmp    c0025d35 <APIC::APIC()+0x39>
c0025dca:	c6 05 40 09 03 c0 01 	mov    BYTE PTR ds:0xc0030940,0x1
c0025dd1:	90                   	nop
c0025dd2:	83 c4 18             	add    esp,0x18
c0025dd5:	5b                   	pop    ebx
c0025dd6:	c3                   	ret    
c0025dd7:	90                   	nop

c0025dd8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025dd8:	55                   	push   ebp
c0025dd9:	89 e5                	mov    ebp,esp
c0025ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025de4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025de7:	72 1d                	jb     c0025e06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025dfb:	01 d0                	add    eax,edx
c0025dfd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e00:	73 04                	jae    c0025e06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e02:	b0 01                	mov    al,0x1
c0025e04:	eb 02                	jmp    c0025e08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025e06:	b0 00                	mov    al,0x0
c0025e08:	5d                   	pop    ebp
c0025e09:	c3                   	ret    

c0025e0a <IOAPIC::read(int)>:
c0025e0a:	55                   	push   ebp
c0025e0b:	89 e5                	mov    ebp,esp
c0025e0d:	83 ec 10             	sub    esp,0x10
c0025e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1f:	0f b6 d0             	movzx  edx,al
c0025e22:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e25:	89 10                	mov    DWORD PTR [eax],edx
c0025e27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e2a:	83 c0 10             	add    eax,0x10
c0025e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e2f:	c9                   	leave  
c0025e30:	c3                   	ret    
c0025e31:	90                   	nop

c0025e32 <IOAPIC::open(int, int, void*)>:
c0025e32:	55                   	push   ebp
c0025e33:	89 e5                	mov    ebp,esp
c0025e35:	57                   	push   edi
c0025e36:	56                   	push   esi
c0025e37:	53                   	push   ebx
c0025e38:	83 ec 0c             	sub    esp,0xc
c0025e3b:	83 ec 0c             	sub    esp,0xc
c0025e3e:	68 73 d1 02 c0       	push   0xc002d173
c0025e43:	e8 6d cb fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c0025e48:	83 c4 10             	add    esp,0x10
c0025e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e51:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e60:	8b 14 85 60 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd10a0]
c0025e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e79:	8b 14 85 e0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1020]
c0025e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e83:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e8c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e95:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025e9b:	0f b6 f8             	movzx  edi,al
c0025e9e:	89 d0                	mov    eax,edx
c0025ea0:	ba 00 00 00 00       	mov    edx,0x0
c0025ea5:	89 c1                	mov    ecx,eax
c0025ea7:	80 e5 ff             	and    ch,0xff
c0025eaa:	89 cb                	mov    ebx,ecx
c0025eac:	0f b6 f2             	movzx  esi,dl
c0025eaf:	89 d8                	mov    eax,ebx
c0025eb1:	89 f2                	mov    edx,esi
c0025eb3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025eb6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025eb9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ebd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ec1:	83 e0 00             	and    eax,0x0
c0025ec4:	09 d0                	or     eax,edx
c0025ec6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ecd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ed3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ed6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ed9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025edf:	0f b6 d0             	movzx  edx,al
c0025ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ee5:	83 c2 08             	add    edx,0x8
c0025ee8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025eec:	0f b6 c9             	movzx  ecx,cl
c0025eef:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ef5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ef9:	83 ec 08             	sub    esp,0x8
c0025efc:	6a 01                	push   0x1
c0025efe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f01:	e8 04 ff ff ff       	call   c0025e0a <IOAPIC::read(int)>
c0025f06:	83 c4 10             	add    esp,0x10
c0025f09:	c1 f8 10             	sar    eax,0x10
c0025f0c:	0f b6 c0             	movzx  eax,al
c0025f0f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f15:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025f1b:	b8 00 00 00 00       	mov    eax,0x0
c0025f20:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f23:	5b                   	pop    ebx
c0025f24:	5e                   	pop    esi
c0025f25:	5f                   	pop    edi
c0025f26:	5d                   	pop    ebp
c0025f27:	c3                   	ret    

c0025f28 <IOAPIC::write(int, int)>:
c0025f28:	55                   	push   ebp
c0025f29:	89 e5                	mov    ebp,esp
c0025f2b:	83 ec 10             	sub    esp,0x10
c0025f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025f3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f3d:	0f b6 d0             	movzx  edx,al
c0025f40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f43:	89 10                	mov    DWORD PTR [eax],edx
c0025f45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f48:	8d 50 10             	lea    edx,[eax+0x10]
c0025f4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f4e:	89 02                	mov    DWORD PTR [edx],eax
c0025f50:	90                   	nop
c0025f51:	c9                   	leave  
c0025f52:	c3                   	ret    
c0025f53:	90                   	nop

c0025f54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025f54:	55                   	push   ebp
c0025f55:	89 e5                	mov    ebp,esp
c0025f57:	53                   	push   ebx
c0025f58:	83 ec 2c             	sub    esp,0x2c
c0025f5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f5e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025f61:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025f64:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025f67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f76:	88 d8                	mov    al,bl
c0025f78:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025f7b:	88 c8                	mov    al,cl
c0025f7d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025f80:	88 d0                	mov    al,dl
c0025f82:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025f85:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025f89:	83 c0 08             	add    eax,0x8
c0025f8c:	01 c0                	add    eax,eax
c0025f8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f91:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025f95:	83 c0 08             	add    eax,0x8
c0025f98:	01 c0                	add    eax,eax
c0025f9a:	40                   	inc    eax
c0025f9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025f9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025fa1:	50                   	push   eax
c0025fa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa5:	e8 60 fe ff ff       	call   c0025e0a <IOAPIC::read(int)>
c0025faa:	83 c4 08             	add    esp,0x8
c0025fad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025fb0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025fb7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025fba:	c1 e0 18             	shl    eax,0x18
c0025fbd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025fc0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025fc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025fc6:	52                   	push   edx
c0025fc7:	50                   	push   eax
c0025fc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fcb:	e8 58 ff ff ff       	call   c0025f28 <IOAPIC::write(int, int)>
c0025fd0:	83 c4 0c             	add    esp,0xc
c0025fd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fd6:	50                   	push   eax
c0025fd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fda:	e8 2b fe ff ff       	call   c0025e0a <IOAPIC::read(int)>
c0025fdf:	83 c4 08             	add    esp,0x8
c0025fe2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fe5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025fec:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ff3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025ffa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ffe:	74 09                	je     c0026009 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026000:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026007:	eb 07                	jmp    c0026010 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026009:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026010:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026014:	74 09                	je     c002601f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026016:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002601d:	eb 07                	jmp    c0026026 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002601f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026026:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002602d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026031:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026034:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026037:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002603a:	52                   	push   edx
c002603b:	50                   	push   eax
c002603c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603f:	e8 e4 fe ff ff       	call   c0025f28 <IOAPIC::write(int, int)>
c0026044:	83 c4 0c             	add    esp,0xc
c0026047:	90                   	nop
c0026048:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002604b:	c9                   	leave  
c002604c:	c3                   	ret    
c002604d:	90                   	nop

c002604e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002604e:	55                   	push   ebp
c002604f:	89 e5                	mov    ebp,esp
c0026051:	57                   	push   edi
c0026052:	56                   	push   esi
c0026053:	53                   	push   ebx
c0026054:	83 ec 2c             	sub    esp,0x2c
c0026057:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002605a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002605d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026061:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026065:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026069:	74 5a                	je     c00260c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002606b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002606f:	7f 44                	jg     c00260b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026071:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026074:	05 20 d8 02 c0       	add    eax,0xc002d820
c0026079:	8a 00                	mov    al,BYTE PTR [eax]
c002607b:	0f b6 c0             	movzx  eax,al
c002607e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026081:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026084:	66 8b 84 00 00 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1100]
c002608c:	0f b7 c0             	movzx  eax,ax
c002608f:	83 e0 02             	and    eax,0x2
c0026092:	85 c0                	test   eax,eax
c0026094:	74 04                	je     c002609a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026096:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002609a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002609d:	66 8b 84 00 00 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1100]
c00260a5:	0f b7 c0             	movzx  eax,ax
c00260a8:	83 e0 08             	and    eax,0x8
c00260ab:	85 c0                	test   eax,eax
c00260ad:	74 16                	je     c00260c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260af:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260b3:	eb 10                	jmp    c00260c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260b5:	83 ec 0c             	sub    esp,0xc
c00260b8:	68 84 d1 02 c0       	push   0xc002d184
c00260bd:	e8 91 42 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00260c2:	83 c4 10             	add    esp,0x10
c00260c5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00260c9:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c00260ce:	83 ec 08             	sub    esp,0x8
c00260d1:	50                   	push   eax
c00260d2:	68 bc d1 02 c0       	push   0xc002d1bc
c00260d7:	e8 d9 c8 fe ff       	call   c00129b5 <Dbg::kprintf(char const*, ...)>
c00260dc:	83 c4 10             	add    esp,0x10
c00260df:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00260e6:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c00260eb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00260ee:	7d 67                	jge    c0026157 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00260f0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260f3:	8b 04 85 20 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf6e0]
c00260fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260fd:	83 ec 08             	sub    esp,0x8
c0026100:	52                   	push   edx
c0026101:	50                   	push   eax
c0026102:	e8 d1 fc ff ff       	call   c0025dd8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026107:	83 c4 10             	add    esp,0x10
c002610a:	84 c0                	test   al,al
c002610c:	74 44                	je     c0026152 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002610e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026111:	8b 1c 85 20 09 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf6e0]
c0026118:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002611c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002611f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026123:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026126:	83 c0 20             	add    eax,0x20
c0026129:	0f b6 f0             	movzx  esi,al
c002612c:	b8 00 00 00 00       	mov    eax,0x0
c0026131:	99                   	cdq    
c0026132:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026135:	0f b6 c9             	movzx  ecx,cl
c0026138:	83 ec 04             	sub    esp,0x4
c002613b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002613e:	57                   	push   edi
c002613f:	56                   	push   esi
c0026140:	52                   	push   edx
c0026141:	50                   	push   eax
c0026142:	51                   	push   ecx
c0026143:	53                   	push   ebx
c0026144:	e8 0b fe ff ff       	call   c0025f54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026149:	83 c4 20             	add    esp,0x20
c002614c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026150:	eb 05                	jmp    c0026157 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026152:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026155:	eb 8f                	jmp    c00260e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026157:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002615a:	83 f0 01             	xor    eax,0x1
c002615d:	84 c0                	test   al,al
c002615f:	74 10                	je     c0026171 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026161:	83 ec 0c             	sub    esp,0xc
c0026164:	68 d3 d1 02 c0       	push   0xc002d1d3
c0026169:	e8 e5 41 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c002616e:	83 c4 10             	add    esp,0x10
c0026171:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026175:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002617c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026180:	7f 65                	jg     c00261e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026185:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026188:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002618f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026192:	01 ca                	add    edx,ecx
c0026194:	83 c2 54             	add    edx,0x54
c0026197:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002619b:	85 c0                	test   eax,eax
c002619d:	75 43                	jne    c00261e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002619f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261a5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261ac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261af:	01 ca                	add    edx,ecx
c00261b1:	8d 4a 54             	lea    ecx,[edx+0x54]
c00261b4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00261b7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00261bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261c8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261cb:	01 ca                	add    edx,ecx
c00261cd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00261d3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00261d6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00261da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261dd:	83 e8 20             	sub    eax,0x20
c00261e0:	eb 1a                	jmp    c00261fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00261e2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00261e5:	eb 95                	jmp    c002617c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00261e7:	83 ec 0c             	sub    esp,0xc
c00261ea:	68 e0 d1 02 c0       	push   0xc002d1e0
c00261ef:	e8 5f 41 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c00261f4:	83 c4 10             	add    esp,0x10
c00261f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00261fc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261ff:	5b                   	pop    ebx
c0026200:	5e                   	pop    esi
c0026201:	5f                   	pop    edi
c0026202:	5d                   	pop    ebp
c0026203:	c3                   	ret    

c0026204 <PIC::disable()>:
c0026204:	55                   	push   ebp
c0026205:	89 e5                	mov    ebp,esp
c0026207:	83 ec 10             	sub    esp,0x10
c002620a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026210:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026214:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026217:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002621b:	ee                   	out    dx,al
c002621c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026222:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026226:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026229:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002622d:	ee                   	out    dx,al
c002622e:	90                   	nop
c002622f:	c9                   	leave  
c0026230:	c3                   	ret    
c0026231:	90                   	nop

c0026232 <PIC::close(int, int, void*)>:
c0026232:	55                   	push   ebp
c0026233:	89 e5                	mov    ebp,esp
c0026235:	83 ec 08             	sub    esp,0x8
c0026238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002623b:	8b 00                	mov    eax,DWORD PTR [eax]
c002623d:	83 c0 3c             	add    eax,0x3c
c0026240:	8b 00                	mov    eax,DWORD PTR [eax]
c0026242:	83 ec 0c             	sub    esp,0xc
c0026245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026248:	ff d0                	call   eax
c002624a:	83 c4 10             	add    esp,0x10
c002624d:	b8 00 00 00 00       	mov    eax,0x0
c0026252:	c9                   	leave  
c0026253:	c3                   	ret    

c0026254 <PIC::PIC()>:
c0026254:	83 ec 0c             	sub    esp,0xc
c0026257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625b:	83 ec 08             	sub    esp,0x8
c002625e:	68 8c d2 02 c0       	push   0xc002d28c
c0026263:	50                   	push   eax
c0026264:	e8 f3 e4 fe ff       	call   c001475c <InterruptController::InterruptController(char const*)>
c0026269:	83 c4 10             	add    esp,0x10
c002626c:	ba b8 d2 02 c0       	mov    edx,0xc002d2b8
c0026271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026275:	89 10                	mov    DWORD PTR [eax],edx
c0026277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002627b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026281:	0f b6 d0             	movzx  edx,al
c0026284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026288:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002628f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026293:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026299:	0f b6 d0             	movzx  edx,al
c002629c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262af:	8d 50 01             	lea    edx,[eax+0x1]
c00262b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262b6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00262bc:	0f b6 d0             	movzx  edx,al
c00262bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00262c7:	83 e1 3f             	and    ecx,0x3f
c00262ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00262ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262d8:	0f b6 d0             	movzx  edx,al
c00262db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262df:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00262e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262f0:	0f b6 d0             	movzx  edx,al
c00262f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026300:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026306:	8d 50 01             	lea    edx,[eax+0x1]
c0026309:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002630d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026313:	0f b6 d0             	movzx  edx,al
c0026316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002631e:	83 e1 3f             	and    ecx,0x3f
c0026321:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026325:	90                   	nop
c0026326:	83 c4 0c             	add    esp,0xc
c0026329:	c3                   	ret    

c002632a <PIC::ioWait()>:
c002632a:	eb 00                	jmp    c002632c <PIC::ioWait()+0x2>
c002632c:	eb 00                	jmp    c002632e <PIC::ioWait()+0x4>
c002632e:	90                   	nop
c002632f:	c3                   	ret    

c0026330 <PIC::getIRQReg(int)>:
c0026330:	55                   	push   ebp
c0026331:	89 e5                	mov    ebp,esp
c0026333:	83 ec 10             	sub    esp,0x10
c0026336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026339:	0f b6 c0             	movzx  eax,al
c002633c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026342:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026345:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026348:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002634c:	ee                   	out    dx,al
c002634d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026350:	0f b6 c0             	movzx  eax,al
c0026353:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026359:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002635c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002635f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026363:	ee                   	out    dx,al
c0026364:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002636a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002636e:	89 c2                	mov    edx,eax
c0026370:	ec                   	in     al,dx
c0026371:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026374:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026377:	0f b6 c0             	movzx  eax,al
c002637a:	c1 e0 08             	shl    eax,0x8
c002637d:	89 c1                	mov    ecx,eax
c002637f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026385:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026389:	89 c2                	mov    edx,eax
c002638b:	ec                   	in     al,dx
c002638c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002638f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026392:	0f b6 c0             	movzx  eax,al
c0026395:	09 c8                	or     eax,ecx
c0026397:	c9                   	leave  
c0026398:	c3                   	ret    
c0026399:	90                   	nop

c002639a <PIC::eoi(unsigned char)>:
c002639a:	55                   	push   ebp
c002639b:	89 e5                	mov    ebp,esp
c002639d:	83 ec 14             	sub    esp,0x14
c00263a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263a3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00263a6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00263aa:	75 1e                	jne    c00263ca <PIC::eoi(unsigned char)+0x30>
c00263ac:	6a 0b                	push   0xb
c00263ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263b1:	e8 7a ff ff ff       	call   c0026330 <PIC::getIRQReg(int)>
c00263b6:	83 c4 08             	add    esp,0x8
c00263b9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00263bd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00263c1:	25 80 00 00 00       	and    eax,0x80
c00263c6:	85 c0                	test   eax,eax
c00263c8:	74 5f                	je     c0026429 <PIC::eoi(unsigned char)+0x8f>
c00263ca:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00263ce:	75 2d                	jne    c00263fd <PIC::eoi(unsigned char)+0x63>
c00263d0:	6a 0b                	push   0xb
c00263d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263d5:	e8 56 ff ff ff       	call   c0026330 <PIC::getIRQReg(int)>
c00263da:	83 c4 08             	add    esp,0x8
c00263dd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00263e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263e4:	66 85 c0             	test   ax,ax
c00263e7:	78 14                	js     c00263fd <PIC::eoi(unsigned char)+0x63>
c00263e9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00263ef:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00263f3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00263f6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00263fa:	ee                   	out    dx,al
c00263fb:	eb 2d                	jmp    c002642a <PIC::eoi(unsigned char)+0x90>
c00263fd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026401:	76 12                	jbe    c0026415 <PIC::eoi(unsigned char)+0x7b>
c0026403:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026409:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002640d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026410:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026414:	ee                   	out    dx,al
c0026415:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002641b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002641f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026422:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026426:	ee                   	out    dx,al
c0026427:	eb 01                	jmp    c002642a <PIC::eoi(unsigned char)+0x90>
c0026429:	90                   	nop
c002642a:	c9                   	leave  
c002642b:	c3                   	ret    

c002642c <PIC::remap()>:
c002642c:	55                   	push   ebp
c002642d:	89 e5                	mov    ebp,esp
c002642f:	83 ec 48             	sub    esp,0x48
c0026432:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026439:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026440:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026446:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026449:	89 c2                	mov    edx,eax
c002644b:	ec                   	in     al,dx
c002644c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002644f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026452:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026455:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002645b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002645e:	89 c2                	mov    edx,eax
c0026460:	ec                   	in     al,dx
c0026461:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026464:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026467:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002646a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026470:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026474:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026477:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002647a:	ee                   	out    dx,al
c002647b:	83 ec 0c             	sub    esp,0xc
c002647e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026481:	e8 a4 fe ff ff       	call   c002632a <PIC::ioWait()>
c0026486:	83 c4 10             	add    esp,0x10
c0026489:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002648f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026493:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026496:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026499:	ee                   	out    dx,al
c002649a:	83 ec 0c             	sub    esp,0xc
c002649d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264a0:	e8 85 fe ff ff       	call   c002632a <PIC::ioWait()>
c00264a5:	83 c4 10             	add    esp,0x10
c00264a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00264ab:	0f b6 c0             	movzx  eax,al
c00264ae:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00264b4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00264b7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00264ba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00264bd:	ee                   	out    dx,al
c00264be:	83 ec 0c             	sub    esp,0xc
c00264c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264c4:	e8 61 fe ff ff       	call   c002632a <PIC::ioWait()>
c00264c9:	83 c4 10             	add    esp,0x10
c00264cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264cf:	0f b6 c0             	movzx  eax,al
c00264d2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00264d8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00264db:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00264de:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00264e1:	ee                   	out    dx,al
c00264e2:	83 ec 0c             	sub    esp,0xc
c00264e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264e8:	e8 3d fe ff ff       	call   c002632a <PIC::ioWait()>
c00264ed:	83 c4 10             	add    esp,0x10
c00264f0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00264f6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00264fa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00264fd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026500:	ee                   	out    dx,al
c0026501:	83 ec 0c             	sub    esp,0xc
c0026504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026507:	e8 1e fe ff ff       	call   c002632a <PIC::ioWait()>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026515:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026519:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002651c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002651f:	ee                   	out    dx,al
c0026520:	83 ec 0c             	sub    esp,0xc
c0026523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026526:	e8 ff fd ff ff       	call   c002632a <PIC::ioWait()>
c002652b:	83 c4 10             	add    esp,0x10
c002652e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026534:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026538:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002653b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002653e:	ee                   	out    dx,al
c002653f:	83 ec 0c             	sub    esp,0xc
c0026542:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026545:	e8 e0 fd ff ff       	call   c002632a <PIC::ioWait()>
c002654a:	83 c4 10             	add    esp,0x10
c002654d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026553:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026557:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002655a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002655d:	ee                   	out    dx,al
c002655e:	83 ec 0c             	sub    esp,0xc
c0026561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026564:	e8 c1 fd ff ff       	call   c002632a <PIC::ioWait()>
c0026569:	83 c4 10             	add    esp,0x10
c002656c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026570:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026576:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026579:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002657c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002657f:	ee                   	out    dx,al
c0026580:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026584:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002658a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002658d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026590:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026593:	ee                   	out    dx,al
c0026594:	90                   	nop
c0026595:	c9                   	leave  
c0026596:	c3                   	ret    
c0026597:	90                   	nop

c0026598 <PIC::open(int, int, void*)>:
c0026598:	55                   	push   ebp
c0026599:	89 e5                	mov    ebp,esp
c002659b:	83 ec 18             	sub    esp,0x18
c002659e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00265a4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00265a8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00265ab:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00265af:	ee                   	out    dx,al
c00265b0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00265b6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00265ba:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00265bd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00265c1:	ee                   	out    dx,al
c00265c2:	83 ec 0c             	sub    esp,0xc
c00265c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265c8:	e8 5f fe ff ff       	call   c002642c <PIC::remap()>
c00265cd:	83 c4 10             	add    esp,0x10
c00265d0:	b8 00 00 00 00       	mov    eax,0x0
c00265d5:	c9                   	leave  
c00265d6:	c3                   	ret    
c00265d7:	90                   	nop

c00265d8 <APICTimer::close(int, int, void*)>:
c00265d8:	b8 00 00 00 00       	mov    eax,0x0
c00265dd:	c3                   	ret    

c00265de <apicTimerHandler(regs*, void*)>:
c00265de:	83 ec 0c             	sub    esp,0xc
c00265e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00265e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e7:	99                   	cdq    
c00265e8:	52                   	push   edx
c00265e9:	50                   	push   eax
c00265ea:	6a 00                	push   0x0
c00265ec:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265f1:	e8 8e 07 00 00       	call   c0026d84 <__udivdi3>
c00265f6:	83 c4 10             	add    esp,0x10
c00265f9:	83 ec 08             	sub    esp,0x8
c00265fc:	52                   	push   edx
c00265fd:	50                   	push   eax
c00265fe:	e8 b6 02 ff ff       	call   c00168b9 <timerHandler(unsigned long long)>
c0026603:	83 c4 10             	add    esp,0x10
c0026606:	90                   	nop
c0026607:	83 c4 0c             	add    esp,0xc
c002660a:	c3                   	ret    
c002660b:	90                   	nop

c002660c <APICTimer::write(int)>:
c002660c:	53                   	push   ebx
c002660d:	83 ec 28             	sub    esp,0x28
c0026610:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026614:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026618:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002661e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026623:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026629:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002662f:	83 ec 0c             	sub    esp,0xc
c0026632:	50                   	push   eax
c0026633:	e8 de f4 ff ff       	call   c0025b16 <APIC::getBase()>
c0026638:	83 c4 10             	add    esp,0x10
c002663b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002663f:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c0026644:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c002664a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002664e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026656:	05 e0 03 00 00       	add    eax,0x3e0
c002665b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026665:	05 80 03 00 00       	add    eax,0x380
c002666a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026670:	fb                   	sti    
c0026671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026675:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026679:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002667e:	83 d2 00             	adc    edx,0x0
c0026681:	89 c1                	mov    ecx,eax
c0026683:	89 d3                	mov    ebx,edx
c0026685:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c002668a:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c0026690:	39 c8                	cmp    eax,ecx
c0026692:	89 d0                	mov    eax,edx
c0026694:	19 d8                	sbb    eax,ebx
c0026696:	73 02                	jae    c002669a <APICTimer::write(int)+0x8e>
c0026698:	eb d7                	jmp    c0026671 <APICTimer::write(int)+0x65>
c002669a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002669e:	05 20 03 00 00       	add    eax,0x320
c00266a3:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00266a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266ad:	05 90 03 00 00       	add    eax,0x390
c00266b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00266b4:	f7 d0                	not    eax
c00266b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266c2:	ba 00 00 00 00       	mov    edx,0x0
c00266c7:	f7 f3                	div    ebx
c00266c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00266d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00266d7:	0d 00 00 02 00       	or     eax,0x20000
c00266dc:	89 c2                	mov    edx,eax
c00266de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266e2:	05 20 03 00 00       	add    eax,0x320
c00266e7:	89 10                	mov    DWORD PTR [eax],edx
c00266e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266ed:	05 e0 03 00 00       	add    eax,0x3e0
c00266f2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00266f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266fc:	05 80 03 00 00       	add    eax,0x380
c0026701:	89 c2                	mov    edx,eax
c0026703:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026707:	89 02                	mov    DWORD PTR [edx],eax
c0026709:	90                   	nop
c002670a:	83 c4 28             	add    esp,0x28
c002670d:	5b                   	pop    ebx
c002670e:	c3                   	ret    
c002670f:	90                   	nop

c0026710 <APICTimer::open(int, int, void*)>:
c0026710:	57                   	push   edi
c0026711:	56                   	push   esi
c0026712:	53                   	push   ebx
c0026713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026717:	8b 00                	mov    eax,DWORD PTR [eax]
c0026719:	83 c0 24             	add    eax,0x24
c002671c:	8b 00                	mov    eax,DWORD PTR [eax]
c002671e:	83 ec 08             	sub    esp,0x8
c0026721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026729:	ff d0                	call   eax
c002672b:	83 c4 10             	add    esp,0x10
c002672e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026733:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026739:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002673f:	83 ec 0c             	sub    esp,0xc
c0026742:	50                   	push   eax
c0026743:	e8 ce f3 ff ff       	call   c0025b16 <APIC::getBase()>
c0026748:	83 c4 10             	add    esp,0x10
c002674b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026755:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002675b:	0f b6 f8             	movzx  edi,al
c002675e:	89 d0                	mov    eax,edx
c0026760:	ba 00 00 00 00       	mov    edx,0x0
c0026765:	89 c1                	mov    ecx,eax
c0026767:	80 e5 ff             	and    ch,0xff
c002676a:	89 cb                	mov    ebx,ecx
c002676c:	0f b6 f2             	movzx  esi,dl
c002676f:	89 d8                	mov    eax,ebx
c0026771:	89 f2                	mov    edx,esi
c0026773:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026777:	8d 5f 08             	lea    ebx,[edi+0x8]
c002677a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002677e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026782:	83 e0 00             	and    eax,0x0
c0026785:	09 d0                	or     eax,edx
c0026787:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002678b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002678f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026795:	8d 50 01             	lea    edx,[eax+0x1]
c0026798:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002679c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00267a2:	0f b6 d0             	movzx  edx,al
c00267a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a9:	83 c2 08             	add    edx,0x8
c00267ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00267b0:	0f b6 c9             	movzx  ecx,cl
c00267b3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00267b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00267bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00267c5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00267cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00267d3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00267d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00267dd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00267e3:	83 ec 0c             	sub    esp,0xc
c00267e6:	51                   	push   ecx
c00267e7:	6a 01                	push   0x1
c00267e9:	68 de 65 02 c0       	push   0xc00265de
c00267ee:	52                   	push   edx
c00267ef:	50                   	push   eax
c00267f0:	e8 71 d5 fe ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00267f5:	83 c4 20             	add    esp,0x20
c00267f8:	89 c2                	mov    edx,eax
c00267fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267fe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026804:	b8 00 00 00 00       	mov    eax,0x0
c0026809:	5b                   	pop    ebx
c002680a:	5e                   	pop    esi
c002680b:	5f                   	pop    edi
c002680c:	c3                   	ret    
c002680d:	90                   	nop

c002680e <APICTimer::APICTimer()>:
c002680e:	83 ec 0c             	sub    esp,0xc
c0026811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026815:	83 ec 08             	sub    esp,0x8
c0026818:	68 f8 d2 02 c0       	push   0xc002d2f8
c002681d:	50                   	push   eax
c002681e:	e8 07 00 ff ff       	call   c001682a <Timer::Timer(char const*)>
c0026823:	83 c4 10             	add    esp,0x10
c0026826:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c002682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682f:	89 10                	mov    DWORD PTR [eax],edx
c0026831:	90                   	nop
c0026832:	83 c4 0c             	add    esp,0xc
c0026835:	c3                   	ret    

c0026836 <PIT::write(int)>:
c0026836:	83 ec 10             	sub    esp,0x10
c0026839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002683d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026841:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026847:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002684b:	a3 44 09 03 c0       	mov    ds:0xc0030944,eax
c0026850:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026855:	99                   	cdq    
c0026856:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002685a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002685e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026865:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002686a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002686e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026873:	ee                   	out    dx,al
c0026874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026878:	0f b6 c0             	movzx  eax,al
c002687b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026882:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026886:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002688a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002688f:	ee                   	out    dx,al
c0026890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026894:	c1 f8 08             	sar    eax,0x8
c0026897:	0f b6 c0             	movzx  eax,al
c002689a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00268a1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00268a5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00268a9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00268ae:	ee                   	out    dx,al
c00268af:	90                   	nop
c00268b0:	83 c4 10             	add    esp,0x10
c00268b3:	c3                   	ret    

c00268b4 <pitHandler(regs*, void*)>:
c00268b4:	83 ec 0c             	sub    esp,0xc
c00268b7:	a1 44 09 03 c0       	mov    eax,ds:0xc0030944
c00268bc:	99                   	cdq    
c00268bd:	52                   	push   edx
c00268be:	50                   	push   eax
c00268bf:	6a 00                	push   0x0
c00268c1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00268c6:	e8 b9 04 00 00       	call   c0026d84 <__udivdi3>
c00268cb:	83 c4 10             	add    esp,0x10
c00268ce:	83 ec 08             	sub    esp,0x8
c00268d1:	52                   	push   edx
c00268d2:	50                   	push   eax
c00268d3:	e8 e1 ff fe ff       	call   c00168b9 <timerHandler(unsigned long long)>
c00268d8:	83 c4 10             	add    esp,0x10
c00268db:	90                   	nop
c00268dc:	83 c4 0c             	add    esp,0xc
c00268df:	c3                   	ret    

c00268e0 <PIT::open(int, int, void*)>:
c00268e0:	83 ec 0c             	sub    esp,0xc
c00268e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00268e9:	83 c0 24             	add    eax,0x24
c00268ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00268ee:	83 ec 08             	sub    esp,0x8
c00268f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268f9:	ff d0                	call   eax
c00268fb:	83 c4 10             	add    esp,0x10
c00268fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026902:	83 ec 0c             	sub    esp,0xc
c0026905:	6a 00                	push   0x0
c0026907:	6a 01                	push   0x1
c0026909:	68 b4 68 02 c0       	push   0xc00268b4
c002690e:	6a 00                	push   0x0
c0026910:	50                   	push   eax
c0026911:	e8 50 d4 fe ff       	call   c0013d66 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026916:	83 c4 20             	add    esp,0x20
c0026919:	89 c2                	mov    edx,eax
c002691b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002691f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026925:	b8 00 00 00 00       	mov    eax,0x0
c002692a:	83 c4 0c             	add    esp,0xc
c002692d:	c3                   	ret    

c002692e <PIT::close(int, int, void*)>:
c002692e:	83 ec 0c             	sub    esp,0xc
c0026931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026935:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002693f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026943:	6a 01                	push   0x1
c0026945:	68 b4 68 02 c0       	push   0xc00268b4
c002694a:	6a 00                	push   0x0
c002694c:	50                   	push   eax
c002694d:	e8 5e d4 fe ff       	call   c0013db0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026952:	83 c4 10             	add    esp,0x10
c0026955:	b8 00 00 00 00       	mov    eax,0x0
c002695a:	83 c4 0c             	add    esp,0xc
c002695d:	c3                   	ret    

c002695e <PIT::PIT()>:
c002695e:	83 ec 0c             	sub    esp,0xc
c0026961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026965:	83 ec 08             	sub    esp,0x8
c0026968:	68 34 d3 02 c0       	push   0xc002d334
c002696d:	50                   	push   eax
c002696e:	e8 b7 fe fe ff       	call   c001682a <Timer::Timer(char const*)>
c0026973:	83 c4 10             	add    esp,0x10
c0026976:	ba 5c d3 02 c0       	mov    edx,0xc002d35c
c002697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697f:	89 10                	mov    DWORD PTR [eax],edx
c0026981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026985:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002698b:	0f b6 d0             	movzx  edx,al
c002698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026992:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002699d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269a3:	0f b6 d0             	movzx  edx,al
c00269a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269aa:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00269af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269b9:	8d 50 01             	lea    edx,[eax+0x1]
c00269bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269c6:	0f b6 d0             	movzx  edx,al
c00269c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269d1:	83 e1 3f             	and    ecx,0x3f
c00269d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269d8:	90                   	nop
c00269d9:	83 c4 0c             	add    esp,0xc
c00269dc:	c3                   	ret    
c00269dd:	66 90                	xchg   ax,ax
c00269df:	90                   	nop

c00269e0 <avxDetect>:
c00269e0:	b8 00 00 00 00       	mov    eax,0x0
c00269e5:	c3                   	ret    

c00269e6 <avxSave>:
c00269e6:	c3                   	ret    

c00269e7 <avxLoad>:
c00269e7:	c3                   	ret    

c00269e8 <avxInit>:
c00269e8:	c3                   	ret    

c00269e9 <avxClose>:
c00269e9:	c3                   	ret    

c00269ea <wouldSheSayYes>:
c00269ea:	c3                   	ret    
c00269eb:	49                   	dec    ecx
c00269ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00269f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00269f4:	75 20                	jne    c0026a16 <sseDetect.noSSE+0x1>
c00269f6:	4e                   	dec    esi
c00269f7:	79 61                	jns    c0026a5a <x87Detect+0x14>
c00269f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00269fe:	66 90                	xchg   ax,ax

c0026a00 <absolutelyNoChanceInHell>:
c0026a00:	b8 01 00 00 00       	mov    eax,0x1
c0026a05:	0f a2                	cpuid  
c0026a07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026a0d:	74 06                	je     c0026a15 <sseDetect.noSSE>
c0026a0f:	b8 01 00 00 00       	mov    eax,0x1
c0026a14:	c3                   	ret    

c0026a15 <sseDetect.noSSE>:
c0026a15:	31 c0                	xor    eax,eax
c0026a17:	c3                   	ret    

c0026a18 <sseSave>:
c0026a18:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026a1d:	c3                   	ret    

c0026a1e <sseLoad>:
c0026a1e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026a23:	c3                   	ret    

c0026a24 <sseInit>:
c0026a24:	e8 49 00 00 00       	call   c0026a72 <x87Init>
c0026a29:	0f 20 e0             	mov    eax,cr4
c0026a2c:	66 0d 00 06          	or     ax,0x600
c0026a30:	0f 22 e0             	mov    cr4,eax
c0026a33:	c3                   	ret    

c0026a34 <sseClose>:
c0026a34:	c3                   	ret    
c0026a35:	66 90                	xchg   ax,ax
c0026a37:	66 90                	xchg   ax,ax
c0026a39:	66 90                	xchg   ax,ax
c0026a3b:	66 90                	xchg   ax,ax
c0026a3d:	66 90                	xchg   ax,ax
c0026a3f:	90                   	nop

c0026a40 <value_37F>:
c0026a40:	7f 03                	jg     c0026a45 <value_37A+0x1>

c0026a42 <value_37E>:
c0026a42:	7e 03                	jle    c0026a47 <x87Detect+0x1>

c0026a44 <value_37A>:
c0026a44:	7a 03                	jp     c0026a49 <x87Detect+0x3>

c0026a46 <x87Detect>:
c0026a46:	b8 01 00 00 00       	mov    eax,0x1
c0026a4b:	0f a2                	cpuid  
c0026a4d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026a53:	74 06                	je     c0026a5b <x87Detect.nox87>
c0026a55:	b8 01 00 00 00       	mov    eax,0x1
c0026a5a:	c3                   	ret    

c0026a5b <x87Detect.nox87>:
c0026a5b:	b8 00 00 00 00       	mov    eax,0x0
c0026a60:	c3                   	ret    

c0026a61 <x87Save>:
c0026a61:	55                   	push   ebp
c0026a62:	89 e5                	mov    ebp,esp
c0026a64:	9b dd 75 08          	fsave  [ebp+0x8]
c0026a68:	c9                   	leave  
c0026a69:	c3                   	ret    

c0026a6a <x87Load>:
c0026a6a:	55                   	push   ebp
c0026a6b:	89 e5                	mov    ebp,esp
c0026a6d:	dd 65 08             	frstor [ebp+0x8]
c0026a70:	c9                   	leave  
c0026a71:	c3                   	ret    

c0026a72 <x87Init>:
c0026a72:	9b db e3             	finit  
c0026a75:	0f 20 c0             	mov    eax,cr0
c0026a78:	66 25 fb ff          	and    ax,0xfffb
c0026a7c:	66 0d 22 00          	or     ax,0x22
c0026a80:	0f 22 c0             	mov    cr0,eax
c0026a83:	0f 06                	clts   
c0026a85:	d9 2d 44 6a 02 c0    	fldcw  WORD PTR ds:0xc0026a44
c0026a8b:	c3                   	ret    

c0026a8c <x87Close>:
c0026a8c:	c3                   	ret    
c0026a8d:	66 90                	xchg   ax,ax
c0026a8f:	90                   	nop

c0026a90 <__do_global_ctors_aux>:
c0026a90:	a1 84 96 02 c0       	mov    eax,ds:0xc0029684
c0026a95:	83 f8 ff             	cmp    eax,0xffffffff
c0026a98:	74 1a                	je     c0026ab4 <__do_global_ctors_aux+0x24>
c0026a9a:	55                   	push   ebp
c0026a9b:	89 e5                	mov    ebp,esp
c0026a9d:	53                   	push   ebx
c0026a9e:	52                   	push   edx
c0026a9f:	bb 84 96 02 c0       	mov    ebx,0xc0029684
c0026aa4:	ff d0                	call   eax
c0026aa6:	83 eb 04             	sub    ebx,0x4
c0026aa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026aab:	83 f8 ff             	cmp    eax,0xffffffff
c0026aae:	75 f4                	jne    c0026aa4 <__do_global_ctors_aux+0x14>
c0026ab0:	58                   	pop    eax
c0026ab1:	5b                   	pop    ebx
c0026ab2:	5d                   	pop    ebp
c0026ab3:	c3                   	ret    
c0026ab4:	c3                   	ret    
c0026ab5:	66 90                	xchg   ax,ax
c0026ab7:	90                   	nop

c0026ab8 <__divdi3>:
c0026ab8:	55                   	push   ebp
c0026ab9:	57                   	push   edi
c0026aba:	56                   	push   esi
c0026abb:	53                   	push   ebx
c0026abc:	83 ec 1c             	sub    esp,0x1c
c0026abf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ac3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ac7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026aca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026ace:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026ad2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ad6:	85 db                	test   ebx,ebx
c0026ad8:	0f 88 8e 00 00 00    	js     c0026b6c <__divdi3+0xb4>
c0026ade:	89 dd                	mov    ebp,ebx
c0026ae0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026ae8:	89 d3                	mov    ebx,edx
c0026aea:	85 d2                	test   edx,edx
c0026aec:	79 0d                	jns    c0026afb <__divdi3+0x43>
c0026aee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026af2:	f7 d8                	neg    eax
c0026af4:	83 d2 00             	adc    edx,0x0
c0026af7:	f7 da                	neg    edx
c0026af9:	89 d3                	mov    ebx,edx
c0026afb:	89 c7                	mov    edi,eax
c0026afd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b00:	85 db                	test   ebx,ebx
c0026b02:	75 48                	jne    c0026b4c <__divdi3+0x94>
c0026b04:	39 ef                	cmp    edi,ebp
c0026b06:	76 24                	jbe    c0026b2c <__divdi3+0x74>
c0026b08:	89 ea                	mov    edx,ebp
c0026b0a:	f7 f7                	div    edi
c0026b0c:	89 c1                	mov    ecx,eax
c0026b0e:	31 f6                	xor    esi,esi
c0026b10:	89 c8                	mov    eax,ecx
c0026b12:	89 f2                	mov    edx,esi
c0026b14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b18:	85 c9                	test   ecx,ecx
c0026b1a:	74 07                	je     c0026b23 <__divdi3+0x6b>
c0026b1c:	f7 d8                	neg    eax
c0026b1e:	83 d2 00             	adc    edx,0x0
c0026b21:	f7 da                	neg    edx
c0026b23:	83 c4 1c             	add    esp,0x1c
c0026b26:	5b                   	pop    ebx
c0026b27:	5e                   	pop    esi
c0026b28:	5f                   	pop    edi
c0026b29:	5d                   	pop    ebp
c0026b2a:	c3                   	ret    
c0026b2b:	90                   	nop
c0026b2c:	85 ff                	test   edi,edi
c0026b2e:	75 0b                	jne    c0026b3b <__divdi3+0x83>
c0026b30:	b8 01 00 00 00       	mov    eax,0x1
c0026b35:	31 d2                	xor    edx,edx
c0026b37:	f7 f3                	div    ebx
c0026b39:	89 c7                	mov    edi,eax
c0026b3b:	31 d2                	xor    edx,edx
c0026b3d:	89 e8                	mov    eax,ebp
c0026b3f:	f7 f7                	div    edi
c0026b41:	89 c6                	mov    esi,eax
c0026b43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b46:	f7 f7                	div    edi
c0026b48:	89 c1                	mov    ecx,eax
c0026b4a:	eb c4                	jmp    c0026b10 <__divdi3+0x58>
c0026b4c:	39 eb                	cmp    ebx,ebp
c0026b4e:	77 3c                	ja     c0026b8c <__divdi3+0xd4>
c0026b50:	0f bd f3             	bsr    esi,ebx
c0026b53:	83 f6 1f             	xor    esi,0x1f
c0026b56:	75 40                	jne    c0026b98 <__divdi3+0xe0>
c0026b58:	39 eb                	cmp    ebx,ebp
c0026b5a:	72 09                	jb     c0026b65 <__divdi3+0xad>
c0026b5c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026b5f:	0f 87 97 00 00 00    	ja     c0026bfc <__divdi3+0x144>
c0026b65:	b9 01 00 00 00       	mov    ecx,0x1
c0026b6a:	eb a4                	jmp    c0026b10 <__divdi3+0x58>
c0026b6c:	f7 d9                	neg    ecx
c0026b6e:	83 d3 00             	adc    ebx,0x0
c0026b71:	f7 db                	neg    ebx
c0026b73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b7a:	89 dd                	mov    ebp,ebx
c0026b7c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026b84:	e9 5f ff ff ff       	jmp    c0026ae8 <__divdi3+0x30>
c0026b89:	8d 76 00             	lea    esi,[esi+0x0]
c0026b8c:	31 f6                	xor    esi,esi
c0026b8e:	31 c9                	xor    ecx,ecx
c0026b90:	e9 7b ff ff ff       	jmp    c0026b10 <__divdi3+0x58>
c0026b95:	8d 76 00             	lea    esi,[esi+0x0]
c0026b98:	b8 20 00 00 00       	mov    eax,0x20
c0026b9d:	29 f0                	sub    eax,esi
c0026b9f:	89 f1                	mov    ecx,esi
c0026ba1:	d3 e3                	shl    ebx,cl
c0026ba3:	89 fa                	mov    edx,edi
c0026ba5:	88 c1                	mov    cl,al
c0026ba7:	d3 ea                	shr    edx,cl
c0026ba9:	09 da                	or     edx,ebx
c0026bab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026baf:	89 f1                	mov    ecx,esi
c0026bb1:	d3 e7                	shl    edi,cl
c0026bb3:	89 eb                	mov    ebx,ebp
c0026bb5:	88 c1                	mov    cl,al
c0026bb7:	d3 eb                	shr    ebx,cl
c0026bb9:	89 f1                	mov    ecx,esi
c0026bbb:	d3 e5                	shl    ebp,cl
c0026bbd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026bc0:	88 c1                	mov    cl,al
c0026bc2:	d3 ea                	shr    edx,cl
c0026bc4:	09 d5                	or     ebp,edx
c0026bc6:	89 e8                	mov    eax,ebp
c0026bc8:	89 da                	mov    edx,ebx
c0026bca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026bce:	89 d3                	mov    ebx,edx
c0026bd0:	89 c5                	mov    ebp,eax
c0026bd2:	f7 e7                	mul    edi
c0026bd4:	39 d3                	cmp    ebx,edx
c0026bd6:	72 18                	jb     c0026bf0 <__divdi3+0x138>
c0026bd8:	74 0a                	je     c0026be4 <__divdi3+0x12c>
c0026bda:	89 e9                	mov    ecx,ebp
c0026bdc:	31 f6                	xor    esi,esi
c0026bde:	e9 2d ff ff ff       	jmp    c0026b10 <__divdi3+0x58>
c0026be3:	90                   	nop
c0026be4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026be7:	89 f1                	mov    ecx,esi
c0026be9:	d3 e7                	shl    edi,cl
c0026beb:	39 c7                	cmp    edi,eax
c0026bed:	73 eb                	jae    c0026bda <__divdi3+0x122>
c0026bef:	90                   	nop
c0026bf0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026bf3:	31 f6                	xor    esi,esi
c0026bf5:	e9 16 ff ff ff       	jmp    c0026b10 <__divdi3+0x58>
c0026bfa:	66 90                	xchg   ax,ax
c0026bfc:	31 c9                	xor    ecx,ecx
c0026bfe:	e9 0d ff ff ff       	jmp    c0026b10 <__divdi3+0x58>
c0026c03:	90                   	nop

c0026c04 <__moddi3>:
c0026c04:	55                   	push   ebp
c0026c05:	57                   	push   edi
c0026c06:	56                   	push   esi
c0026c07:	53                   	push   ebx
c0026c08:	83 ec 2c             	sub    esp,0x2c
c0026c0b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026c0f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026c13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026c17:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026c1b:	85 db                	test   ebx,ebx
c0026c1d:	0f 88 85 00 00 00    	js     c0026ca8 <__moddi3+0xa4>
c0026c23:	89 de                	mov    esi,ebx
c0026c25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026c2d:	89 d7                	mov    edi,edx
c0026c2f:	85 d2                	test   edx,edx
c0026c31:	79 09                	jns    c0026c3c <__moddi3+0x38>
c0026c33:	f7 d8                	neg    eax
c0026c35:	83 d2 00             	adc    edx,0x0
c0026c38:	f7 da                	neg    edx
c0026c3a:	89 d7                	mov    edi,edx
c0026c3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c40:	89 cd                	mov    ebp,ecx
c0026c42:	85 ff                	test   edi,edi
c0026c44:	75 52                	jne    c0026c98 <__moddi3+0x94>
c0026c46:	89 c3                	mov    ebx,eax
c0026c48:	39 f0                	cmp    eax,esi
c0026c4a:	76 24                	jbe    c0026c70 <__moddi3+0x6c>
c0026c4c:	89 c8                	mov    eax,ecx
c0026c4e:	89 f2                	mov    edx,esi
c0026c50:	f7 f3                	div    ebx
c0026c52:	89 d6                	mov    esi,edx
c0026c54:	89 f0                	mov    eax,esi
c0026c56:	31 d2                	xor    edx,edx
c0026c58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c5c:	85 c9                	test   ecx,ecx
c0026c5e:	74 07                	je     c0026c67 <__moddi3+0x63>
c0026c60:	f7 d8                	neg    eax
c0026c62:	83 d2 00             	adc    edx,0x0
c0026c65:	f7 da                	neg    edx
c0026c67:	83 c4 2c             	add    esp,0x2c
c0026c6a:	5b                   	pop    ebx
c0026c6b:	5e                   	pop    esi
c0026c6c:	5f                   	pop    edi
c0026c6d:	5d                   	pop    ebp
c0026c6e:	c3                   	ret    
c0026c6f:	90                   	nop
c0026c70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026c74:	85 db                	test   ebx,ebx
c0026c76:	75 0d                	jne    c0026c85 <__moddi3+0x81>
c0026c78:	b8 01 00 00 00       	mov    eax,0x1
c0026c7d:	31 d2                	xor    edx,edx
c0026c7f:	f7 f7                	div    edi
c0026c81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c85:	89 f0                	mov    eax,esi
c0026c87:	31 d2                	xor    edx,edx
c0026c89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026c8d:	f7 f7                	div    edi
c0026c8f:	89 e8                	mov    eax,ebp
c0026c91:	f7 f7                	div    edi
c0026c93:	89 d6                	mov    esi,edx
c0026c95:	eb bd                	jmp    c0026c54 <__moddi3+0x50>
c0026c97:	90                   	nop
c0026c98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026c9c:	39 f7                	cmp    edi,esi
c0026c9e:	76 20                	jbe    c0026cc0 <__moddi3+0xbc>
c0026ca0:	89 c8                	mov    eax,ecx
c0026ca2:	89 f2                	mov    edx,esi
c0026ca4:	eb b2                	jmp    c0026c58 <__moddi3+0x54>
c0026ca6:	66 90                	xchg   ax,ax
c0026ca8:	f7 d9                	neg    ecx
c0026caa:	83 d3 00             	adc    ebx,0x0
c0026cad:	f7 db                	neg    ebx
c0026caf:	89 de                	mov    esi,ebx
c0026cb1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026cb9:	e9 6f ff ff ff       	jmp    c0026c2d <__moddi3+0x29>
c0026cbe:	66 90                	xchg   ax,ax
c0026cc0:	0f bd c7             	bsr    eax,edi
c0026cc3:	83 f0 1f             	xor    eax,0x1f
c0026cc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026cca:	75 24                	jne    c0026cf0 <__moddi3+0xec>
c0026ccc:	39 f7                	cmp    edi,esi
c0026cce:	72 06                	jb     c0026cd6 <__moddi3+0xd2>
c0026cd0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026cd4:	77 0c                	ja     c0026ce2 <__moddi3+0xde>
c0026cd6:	89 e9                	mov    ecx,ebp
c0026cd8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026cdc:	19 fe                	sbb    esi,edi
c0026cde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026ce2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ce6:	89 f2                	mov    edx,esi
c0026ce8:	e9 6b ff ff ff       	jmp    c0026c58 <__moddi3+0x54>
c0026ced:	8d 76 00             	lea    esi,[esi+0x0]
c0026cf0:	b8 20 00 00 00       	mov    eax,0x20
c0026cf5:	89 c2                	mov    edx,eax
c0026cf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026cfb:	29 da                	sub    edx,ebx
c0026cfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026d01:	88 d9                	mov    cl,bl
c0026d03:	d3 e7                	shl    edi,cl
c0026d05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d09:	88 d1                	mov    cl,dl
c0026d0b:	d3 e8                	shr    eax,cl
c0026d0d:	09 c7                	or     edi,eax
c0026d0f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026d13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026d17:	89 d8                	mov    eax,ebx
c0026d19:	88 d9                	mov    cl,bl
c0026d1b:	d3 e7                	shl    edi,cl
c0026d1d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d21:	89 f3                	mov    ebx,esi
c0026d23:	88 d1                	mov    cl,dl
c0026d25:	d3 eb                	shr    ebx,cl
c0026d27:	89 c7                	mov    edi,eax
c0026d29:	88 c1                	mov    cl,al
c0026d2b:	d3 e6                	shl    esi,cl
c0026d2d:	89 e8                	mov    eax,ebp
c0026d2f:	88 d1                	mov    cl,dl
c0026d31:	d3 e8                	shr    eax,cl
c0026d33:	09 f0                	or     eax,esi
c0026d35:	89 f9                	mov    ecx,edi
c0026d37:	d3 e5                	shl    ebp,cl
c0026d39:	89 da                	mov    edx,ebx
c0026d3b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026d3f:	89 d3                	mov    ebx,edx
c0026d41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d45:	89 c6                	mov    esi,eax
c0026d47:	89 d1                	mov    ecx,edx
c0026d49:	39 d3                	cmp    ebx,edx
c0026d4b:	72 27                	jb     c0026d74 <__moddi3+0x170>
c0026d4d:	74 21                	je     c0026d70 <__moddi3+0x16c>
c0026d4f:	29 f5                	sub    ebp,esi
c0026d51:	19 cb                	sbb    ebx,ecx
c0026d53:	89 de                	mov    esi,ebx
c0026d55:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026d59:	d3 e6                	shl    esi,cl
c0026d5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026d5f:	89 f9                	mov    ecx,edi
c0026d61:	d3 ed                	shr    ebp,cl
c0026d63:	09 ee                	or     esi,ebp
c0026d65:	89 f0                	mov    eax,esi
c0026d67:	d3 eb                	shr    ebx,cl
c0026d69:	89 da                	mov    edx,ebx
c0026d6b:	e9 e8 fe ff ff       	jmp    c0026c58 <__moddi3+0x54>
c0026d70:	39 c5                	cmp    ebp,eax
c0026d72:	73 db                	jae    c0026d4f <__moddi3+0x14b>
c0026d74:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d78:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026d7c:	89 d1                	mov    ecx,edx
c0026d7e:	89 c6                	mov    esi,eax
c0026d80:	eb cd                	jmp    c0026d4f <__moddi3+0x14b>
c0026d82:	66 90                	xchg   ax,ax

c0026d84 <__udivdi3>:
c0026d84:	55                   	push   ebp
c0026d85:	57                   	push   edi
c0026d86:	56                   	push   esi
c0026d87:	53                   	push   ebx
c0026d88:	83 ec 1c             	sub    esp,0x1c
c0026d8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026d8f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026d93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026d97:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026d9b:	85 d2                	test   edx,edx
c0026d9d:	75 41                	jne    c0026de0 <__udivdi3+0x5c>
c0026d9f:	39 f7                	cmp    edi,esi
c0026da1:	76 15                	jbe    c0026db8 <__udivdi3+0x34>
c0026da3:	89 e8                	mov    eax,ebp
c0026da5:	89 f2                	mov    edx,esi
c0026da7:	f7 f7                	div    edi
c0026da9:	31 db                	xor    ebx,ebx
c0026dab:	89 da                	mov    edx,ebx
c0026dad:	83 c4 1c             	add    esp,0x1c
c0026db0:	5b                   	pop    ebx
c0026db1:	5e                   	pop    esi
c0026db2:	5f                   	pop    edi
c0026db3:	5d                   	pop    ebp
c0026db4:	c3                   	ret    
c0026db5:	8d 76 00             	lea    esi,[esi+0x0]
c0026db8:	89 f9                	mov    ecx,edi
c0026dba:	85 ff                	test   edi,edi
c0026dbc:	75 0b                	jne    c0026dc9 <__udivdi3+0x45>
c0026dbe:	b8 01 00 00 00       	mov    eax,0x1
c0026dc3:	31 d2                	xor    edx,edx
c0026dc5:	f7 f7                	div    edi
c0026dc7:	89 c1                	mov    ecx,eax
c0026dc9:	31 d2                	xor    edx,edx
c0026dcb:	89 f0                	mov    eax,esi
c0026dcd:	f7 f1                	div    ecx
c0026dcf:	89 c3                	mov    ebx,eax
c0026dd1:	89 e8                	mov    eax,ebp
c0026dd3:	f7 f1                	div    ecx
c0026dd5:	89 da                	mov    edx,ebx
c0026dd7:	83 c4 1c             	add    esp,0x1c
c0026dda:	5b                   	pop    ebx
c0026ddb:	5e                   	pop    esi
c0026ddc:	5f                   	pop    edi
c0026ddd:	5d                   	pop    ebp
c0026dde:	c3                   	ret    
c0026ddf:	90                   	nop
c0026de0:	39 f2                	cmp    edx,esi
c0026de2:	77 1c                	ja     c0026e00 <__udivdi3+0x7c>
c0026de4:	0f bd da             	bsr    ebx,edx
c0026de7:	83 f3 1f             	xor    ebx,0x1f
c0026dea:	75 24                	jne    c0026e10 <__udivdi3+0x8c>
c0026dec:	39 f2                	cmp    edx,esi
c0026dee:	72 08                	jb     c0026df8 <__udivdi3+0x74>
c0026df0:	39 ef                	cmp    edi,ebp
c0026df2:	0f 87 84 00 00 00    	ja     c0026e7c <__udivdi3+0xf8>
c0026df8:	b8 01 00 00 00       	mov    eax,0x1
c0026dfd:	eb ac                	jmp    c0026dab <__udivdi3+0x27>
c0026dff:	90                   	nop
c0026e00:	31 db                	xor    ebx,ebx
c0026e02:	31 c0                	xor    eax,eax
c0026e04:	89 da                	mov    edx,ebx
c0026e06:	83 c4 1c             	add    esp,0x1c
c0026e09:	5b                   	pop    ebx
c0026e0a:	5e                   	pop    esi
c0026e0b:	5f                   	pop    edi
c0026e0c:	5d                   	pop    ebp
c0026e0d:	c3                   	ret    
c0026e0e:	66 90                	xchg   ax,ax
c0026e10:	b8 20 00 00 00       	mov    eax,0x20
c0026e15:	29 d8                	sub    eax,ebx
c0026e17:	88 d9                	mov    cl,bl
c0026e19:	d3 e2                	shl    edx,cl
c0026e1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026e1f:	89 fa                	mov    edx,edi
c0026e21:	88 c1                	mov    cl,al
c0026e23:	d3 ea                	shr    edx,cl
c0026e25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026e29:	09 d1                	or     ecx,edx
c0026e2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026e2f:	88 d9                	mov    cl,bl
c0026e31:	d3 e7                	shl    edi,cl
c0026e33:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e37:	89 f7                	mov    edi,esi
c0026e39:	88 c1                	mov    cl,al
c0026e3b:	d3 ef                	shr    edi,cl
c0026e3d:	88 d9                	mov    cl,bl
c0026e3f:	d3 e6                	shl    esi,cl
c0026e41:	89 ea                	mov    edx,ebp
c0026e43:	88 c1                	mov    cl,al
c0026e45:	d3 ea                	shr    edx,cl
c0026e47:	09 d6                	or     esi,edx
c0026e49:	89 f0                	mov    eax,esi
c0026e4b:	89 fa                	mov    edx,edi
c0026e4d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026e51:	89 d7                	mov    edi,edx
c0026e53:	89 c6                	mov    esi,eax
c0026e55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e59:	39 d7                	cmp    edi,edx
c0026e5b:	72 13                	jb     c0026e70 <__udivdi3+0xec>
c0026e5d:	74 09                	je     c0026e68 <__udivdi3+0xe4>
c0026e5f:	89 f0                	mov    eax,esi
c0026e61:	31 db                	xor    ebx,ebx
c0026e63:	e9 43 ff ff ff       	jmp    c0026dab <__udivdi3+0x27>
c0026e68:	88 d9                	mov    cl,bl
c0026e6a:	d3 e5                	shl    ebp,cl
c0026e6c:	39 c5                	cmp    ebp,eax
c0026e6e:	73 ef                	jae    c0026e5f <__udivdi3+0xdb>
c0026e70:	8d 46 ff             	lea    eax,[esi-0x1]
c0026e73:	31 db                	xor    ebx,ebx
c0026e75:	e9 31 ff ff ff       	jmp    c0026dab <__udivdi3+0x27>
c0026e7a:	66 90                	xchg   ax,ax
c0026e7c:	31 c0                	xor    eax,eax
c0026e7e:	e9 28 ff ff ff       	jmp    c0026dab <__udivdi3+0x27>
c0026e83:	90                   	nop

c0026e84 <__umoddi3>:
c0026e84:	55                   	push   ebp
c0026e85:	57                   	push   edi
c0026e86:	56                   	push   esi
c0026e87:	53                   	push   ebx
c0026e88:	83 ec 1c             	sub    esp,0x1c
c0026e8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026e8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026e93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026e97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026e9b:	89 da                	mov    edx,ebx
c0026e9d:	85 c0                	test   eax,eax
c0026e9f:	75 37                	jne    c0026ed8 <__umoddi3+0x54>
c0026ea1:	39 df                	cmp    edi,ebx
c0026ea3:	76 13                	jbe    c0026eb8 <__umoddi3+0x34>
c0026ea5:	89 f0                	mov    eax,esi
c0026ea7:	f7 f7                	div    edi
c0026ea9:	89 d0                	mov    eax,edx
c0026eab:	31 d2                	xor    edx,edx
c0026ead:	83 c4 1c             	add    esp,0x1c
c0026eb0:	5b                   	pop    ebx
c0026eb1:	5e                   	pop    esi
c0026eb2:	5f                   	pop    edi
c0026eb3:	5d                   	pop    ebp
c0026eb4:	c3                   	ret    
c0026eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0026eb8:	89 fd                	mov    ebp,edi
c0026eba:	85 ff                	test   edi,edi
c0026ebc:	75 0b                	jne    c0026ec9 <__umoddi3+0x45>
c0026ebe:	b8 01 00 00 00       	mov    eax,0x1
c0026ec3:	31 d2                	xor    edx,edx
c0026ec5:	f7 f7                	div    edi
c0026ec7:	89 c5                	mov    ebp,eax
c0026ec9:	89 d8                	mov    eax,ebx
c0026ecb:	31 d2                	xor    edx,edx
c0026ecd:	f7 f5                	div    ebp
c0026ecf:	89 f0                	mov    eax,esi
c0026ed1:	f7 f5                	div    ebp
c0026ed3:	89 d0                	mov    eax,edx
c0026ed5:	eb d4                	jmp    c0026eab <__umoddi3+0x27>
c0026ed7:	90                   	nop
c0026ed8:	89 f1                	mov    ecx,esi
c0026eda:	39 d8                	cmp    eax,ebx
c0026edc:	76 0a                	jbe    c0026ee8 <__umoddi3+0x64>
c0026ede:	89 f0                	mov    eax,esi
c0026ee0:	83 c4 1c             	add    esp,0x1c
c0026ee3:	5b                   	pop    ebx
c0026ee4:	5e                   	pop    esi
c0026ee5:	5f                   	pop    edi
c0026ee6:	5d                   	pop    ebp
c0026ee7:	c3                   	ret    
c0026ee8:	0f bd e8             	bsr    ebp,eax
c0026eeb:	83 f5 1f             	xor    ebp,0x1f
c0026eee:	75 1c                	jne    c0026f0c <__umoddi3+0x88>
c0026ef0:	39 d8                	cmp    eax,ebx
c0026ef2:	72 04                	jb     c0026ef8 <__umoddi3+0x74>
c0026ef4:	39 f7                	cmp    edi,esi
c0026ef6:	77 08                	ja     c0026f00 <__umoddi3+0x7c>
c0026ef8:	89 da                	mov    edx,ebx
c0026efa:	29 fe                	sub    esi,edi
c0026efc:	19 c2                	sbb    edx,eax
c0026efe:	89 f1                	mov    ecx,esi
c0026f00:	89 c8                	mov    eax,ecx
c0026f02:	83 c4 1c             	add    esp,0x1c
c0026f05:	5b                   	pop    ebx
c0026f06:	5e                   	pop    esi
c0026f07:	5f                   	pop    edi
c0026f08:	5d                   	pop    ebp
c0026f09:	c3                   	ret    
c0026f0a:	66 90                	xchg   ax,ax
c0026f0c:	ba 20 00 00 00       	mov    edx,0x20
c0026f11:	29 ea                	sub    edx,ebp
c0026f13:	89 e9                	mov    ecx,ebp
c0026f15:	d3 e0                	shl    eax,cl
c0026f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f1b:	89 f8                	mov    eax,edi
c0026f1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026f21:	88 d1                	mov    cl,dl
c0026f23:	d3 e8                	shr    eax,cl
c0026f25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f29:	09 c1                	or     ecx,eax
c0026f2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026f2f:	89 e9                	mov    ecx,ebp
c0026f31:	d3 e7                	shl    edi,cl
c0026f33:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026f37:	89 d8                	mov    eax,ebx
c0026f39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f3d:	88 d1                	mov    cl,dl
c0026f3f:	d3 e8                	shr    eax,cl
c0026f41:	89 c7                	mov    edi,eax
c0026f43:	89 e9                	mov    ecx,ebp
c0026f45:	d3 e3                	shl    ebx,cl
c0026f47:	89 f0                	mov    eax,esi
c0026f49:	88 d1                	mov    cl,dl
c0026f4b:	d3 e8                	shr    eax,cl
c0026f4d:	09 d8                	or     eax,ebx
c0026f4f:	89 e9                	mov    ecx,ebp
c0026f51:	d3 e6                	shl    esi,cl
c0026f53:	89 f3                	mov    ebx,esi
c0026f55:	89 fa                	mov    edx,edi
c0026f57:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026f5b:	89 d1                	mov    ecx,edx
c0026f5d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026f61:	89 c6                	mov    esi,eax
c0026f63:	89 d7                	mov    edi,edx
c0026f65:	39 d1                	cmp    ecx,edx
c0026f67:	72 27                	jb     c0026f90 <__umoddi3+0x10c>
c0026f69:	74 21                	je     c0026f8c <__umoddi3+0x108>
c0026f6b:	89 ca                	mov    edx,ecx
c0026f6d:	29 f3                	sub    ebx,esi
c0026f6f:	19 fa                	sbb    edx,edi
c0026f71:	89 d0                	mov    eax,edx
c0026f73:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026f77:	d3 e0                	shl    eax,cl
c0026f79:	89 e9                	mov    ecx,ebp
c0026f7b:	d3 eb                	shr    ebx,cl
c0026f7d:	09 d8                	or     eax,ebx
c0026f7f:	d3 ea                	shr    edx,cl
c0026f81:	83 c4 1c             	add    esp,0x1c
c0026f84:	5b                   	pop    ebx
c0026f85:	5e                   	pop    esi
c0026f86:	5f                   	pop    edi
c0026f87:	5d                   	pop    ebp
c0026f88:	c3                   	ret    
c0026f89:	8d 76 00             	lea    esi,[esi+0x0]
c0026f8c:	39 c3                	cmp    ebx,eax
c0026f8e:	73 db                	jae    c0026f6b <__umoddi3+0xe7>
c0026f90:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026f94:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026f98:	89 d7                	mov    edi,edx
c0026f9a:	89 c6                	mov    esi,eax
c0026f9c:	eb cd                	jmp    c0026f6b <__umoddi3+0xe7>

c0026f9e <__addsf3>:
c0026f9e:	55                   	push   ebp
c0026f9f:	89 e5                	mov    ebp,esp
c0026fa1:	57                   	push   edi
c0026fa2:	56                   	push   esi
c0026fa3:	53                   	push   ebx
c0026fa4:	83 ec 08             	sub    esp,0x8
c0026fa7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026faa:	89 fa                	mov    edx,edi
c0026fac:	89 f8                	mov    eax,edi
c0026fae:	c1 f8 17             	sar    eax,0x17
c0026fb1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026fb4:	c1 e2 08             	shl    edx,0x8
c0026fb7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fbd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026fc0:	89 de                	mov    esi,ebx
c0026fc2:	c1 fe 17             	sar    esi,0x17
c0026fc5:	c1 e3 08             	shl    ebx,0x8
c0026fc8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026fce:	31 f0                	xor    eax,esi
c0026fd0:	0f 88 3b 01 00 00    	js     c0027111 <__addsf3+0x173>
c0026fd6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026fd9:	29 f1                	sub    ecx,esi
c0026fdb:	85 c9                	test   ecx,ecx
c0026fdd:	7e 54                	jle    c0027033 <__addsf3+0x95>
c0026fdf:	89 f0                	mov    eax,esi
c0026fe1:	84 c0                	test   al,al
c0026fe3:	75 10                	jne    c0026ff5 <__addsf3+0x57>
c0026fe5:	85 db                	test   ebx,ebx
c0026fe7:	0f 84 aa 02 00 00    	je     c0027297 <__addsf3+0x2f9>
c0026fed:	49                   	dec    ecx
c0026fee:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ff1:	74 38                	je     c002702b <__addsf3+0x8d>
c0026ff3:	eb 13                	jmp    c0027008 <__addsf3+0x6a>
c0026ff5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ff8:	f7 d0                	not    eax
c0026ffa:	84 c0                	test   al,al
c0026ffc:	0f 84 95 02 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027002:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027008:	83 f9 1f             	cmp    ecx,0x1f
c002700b:	0f 8f 86 02 00 00    	jg     c0027297 <__addsf3+0x2f9>
c0027011:	89 de                	mov    esi,ebx
c0027013:	d3 ee                	shr    esi,cl
c0027015:	b8 20 00 00 00       	mov    eax,0x20
c002701a:	29 c8                	sub    eax,ecx
c002701c:	89 c1                	mov    ecx,eax
c002701e:	d3 e3                	shl    ebx,cl
c0027020:	31 c0                	xor    eax,eax
c0027022:	85 db                	test   ebx,ebx
c0027024:	0f 95 c0             	setne  al
c0027027:	09 f0                	or     eax,esi
c0027029:	01 d0                	add    eax,edx
c002702b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002702e:	e9 b6 00 00 00       	jmp    c00270e9 <__addsf3+0x14b>
c0027033:	74 5c                	je     c0027091 <__addsf3+0xf3>
c0027035:	89 f1                	mov    ecx,esi
c0027037:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002703a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002703d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027041:	75 14                	jne    c0027057 <__addsf3+0xb9>
c0027043:	85 d2                	test   edx,edx
c0027045:	0f 84 4c 02 00 00    	je     c0027297 <__addsf3+0x2f9>
c002704b:	49                   	dec    ecx
c002704c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002704f:	0f 84 94 00 00 00    	je     c00270e9 <__addsf3+0x14b>
c0027055:	eb 12                	jmp    c0027069 <__addsf3+0xcb>
c0027057:	89 f0                	mov    eax,esi
c0027059:	f7 d0                	not    eax
c002705b:	84 c0                	test   al,al
c002705d:	0f 84 34 02 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027063:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027069:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002706c:	83 f9 1f             	cmp    ecx,0x1f
c002706f:	0f 8f 22 02 00 00    	jg     c0027297 <__addsf3+0x2f9>
c0027075:	89 d7                	mov    edi,edx
c0027077:	d3 ef                	shr    edi,cl
c0027079:	b8 20 00 00 00       	mov    eax,0x20
c002707e:	29 c8                	sub    eax,ecx
c0027080:	89 c1                	mov    ecx,eax
c0027082:	d3 e2                	shl    edx,cl
c0027084:	31 c0                	xor    eax,eax
c0027086:	85 d2                	test   edx,edx
c0027088:	0f 95 c0             	setne  al
c002708b:	09 f8                	or     eax,edi
c002708d:	01 d8                	add    eax,ebx
c002708f:	eb 58                	jmp    c00270e9 <__addsf3+0x14b>
c0027091:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027094:	8d 70 01             	lea    esi,[eax+0x1]
c0027097:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002709d:	75 32                	jne    c00270d1 <__addsf3+0x133>
c002709f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00270a3:	75 1f                	jne    c00270c4 <__addsf3+0x126>
c00270a5:	85 d2                	test   edx,edx
c00270a7:	0f 84 e0 01 00 00    	je     c002728d <__addsf3+0x2ef>
c00270ad:	85 db                	test   ebx,ebx
c00270af:	0f 84 e2 01 00 00    	je     c0027297 <__addsf3+0x2f9>
c00270b5:	89 d0                	mov    eax,edx
c00270b7:	01 d8                	add    eax,ebx
c00270b9:	0f 89 a9 01 00 00    	jns    c0027268 <__addsf3+0x2ca>
c00270bf:	e9 9d 01 00 00       	jmp    c0027261 <__addsf3+0x2c3>
c00270c4:	85 d2                	test   edx,edx
c00270c6:	0f 85 cb 01 00 00    	jne    c0027297 <__addsf3+0x2f9>
c00270cc:	e9 bc 01 00 00       	jmp    c002728d <__addsf3+0x2ef>
c00270d1:	31 c0                	xor    eax,eax
c00270d3:	89 f1                	mov    ecx,esi
c00270d5:	f7 d1                	not    ecx
c00270d7:	84 c9                	test   cl,cl
c00270d9:	0f 84 90 01 00 00    	je     c002726f <__addsf3+0x2d1>
c00270df:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00270e2:	d1 e8                	shr    eax,1
c00270e4:	e9 86 01 00 00       	jmp    c002726f <__addsf3+0x2d1>
c00270e9:	85 c0                	test   eax,eax
c00270eb:	0f 89 7e 01 00 00    	jns    c002726f <__addsf3+0x2d1>
c00270f1:	46                   	inc    esi
c00270f2:	89 f2                	mov    edx,esi
c00270f4:	f7 d2                	not    edx
c00270f6:	84 d2                	test   dl,dl
c00270f8:	0f 84 6f 01 00 00    	je     c002726d <__addsf3+0x2cf>
c00270fe:	89 c2                	mov    edx,eax
c0027100:	83 e2 01             	and    edx,0x1
c0027103:	d1 e8                	shr    eax,1
c0027105:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002710a:	09 d0                	or     eax,edx
c002710c:	e9 5e 01 00 00       	jmp    c002726f <__addsf3+0x2d1>
c0027111:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027115:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027118:	89 f0                	mov    eax,esi
c002711a:	0f b6 c0             	movzx  eax,al
c002711d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027120:	29 c1                	sub    ecx,eax
c0027122:	85 c9                	test   ecx,ecx
c0027124:	7e 55                	jle    c002717b <__addsf3+0x1dd>
c0027126:	85 c0                	test   eax,eax
c0027128:	75 11                	jne    c002713b <__addsf3+0x19d>
c002712a:	85 db                	test   ebx,ebx
c002712c:	0f 84 65 01 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027132:	49                   	dec    ecx
c0027133:	75 19                	jne    c002714e <__addsf3+0x1b0>
c0027135:	89 d0                	mov    eax,edx
c0027137:	29 d8                	sub    eax,ebx
c0027139:	eb 38                	jmp    c0027173 <__addsf3+0x1d5>
c002713b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002713e:	f7 d0                	not    eax
c0027140:	84 c0                	test   al,al
c0027142:	0f 84 4f 01 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027148:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002714e:	83 f9 1f             	cmp    ecx,0x1f
c0027151:	0f 8f 40 01 00 00    	jg     c0027297 <__addsf3+0x2f9>
c0027157:	89 de                	mov    esi,ebx
c0027159:	d3 ee                	shr    esi,cl
c002715b:	b8 20 00 00 00       	mov    eax,0x20
c0027160:	29 c8                	sub    eax,ecx
c0027162:	89 c1                	mov    ecx,eax
c0027164:	d3 e3                	shl    ebx,cl
c0027166:	31 c0                	xor    eax,eax
c0027168:	85 db                	test   ebx,ebx
c002716a:	0f 95 c0             	setne  al
c002716d:	09 f0                	or     eax,esi
c002716f:	29 c2                	sub    edx,eax
c0027171:	89 d0                	mov    eax,edx
c0027173:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027176:	e9 af 00 00 00       	jmp    c002722a <__addsf3+0x28c>
c002717b:	74 5c                	je     c00271d9 <__addsf3+0x23b>
c002717d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027180:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027183:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027187:	75 14                	jne    c002719d <__addsf3+0x1ff>
c0027189:	85 d2                	test   edx,edx
c002718b:	0f 84 06 01 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027191:	48                   	dec    eax
c0027192:	75 1b                	jne    c00271af <__addsf3+0x211>
c0027194:	89 d8                	mov    eax,ebx
c0027196:	29 d0                	sub    eax,edx
c0027198:	e9 8d 00 00 00       	jmp    c002722a <__addsf3+0x28c>
c002719d:	89 f1                	mov    ecx,esi
c002719f:	f7 d1                	not    ecx
c00271a1:	84 c9                	test   cl,cl
c00271a3:	0f 84 ee 00 00 00    	je     c0027297 <__addsf3+0x2f9>
c00271a9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271af:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271b2:	83 f8 1f             	cmp    eax,0x1f
c00271b5:	0f 8f dc 00 00 00    	jg     c0027297 <__addsf3+0x2f9>
c00271bb:	89 d7                	mov    edi,edx
c00271bd:	88 c1                	mov    cl,al
c00271bf:	d3 ef                	shr    edi,cl
c00271c1:	b9 20 00 00 00       	mov    ecx,0x20
c00271c6:	29 c1                	sub    ecx,eax
c00271c8:	d3 e2                	shl    edx,cl
c00271ca:	31 c0                	xor    eax,eax
c00271cc:	85 d2                	test   edx,edx
c00271ce:	0f 95 c0             	setne  al
c00271d1:	09 f8                	or     eax,edi
c00271d3:	29 c3                	sub    ebx,eax
c00271d5:	89 d8                	mov    eax,ebx
c00271d7:	eb 51                	jmp    c002722a <__addsf3+0x28c>
c00271d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00271dc:	40                   	inc    eax
c00271dd:	a8 fe                	test   al,0xfe
c00271df:	75 3d                	jne    c002721e <__addsf3+0x280>
c00271e1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00271e5:	0f 85 a7 00 00 00    	jne    c0027292 <__addsf3+0x2f4>
c00271eb:	85 d2                	test   edx,edx
c00271ed:	75 12                	jne    c0027201 <__addsf3+0x263>
c00271ef:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271f2:	85 db                	test   ebx,ebx
c00271f4:	0f 85 9d 00 00 00    	jne    c0027297 <__addsf3+0x2f9>
c00271fa:	31 ff                	xor    edi,edi
c00271fc:	e9 96 00 00 00       	jmp    c0027297 <__addsf3+0x2f9>
c0027201:	85 db                	test   ebx,ebx
c0027203:	0f 84 8e 00 00 00    	je     c0027297 <__addsf3+0x2f9>
c0027209:	89 d0                	mov    eax,edx
c002720b:	29 d8                	sub    eax,ebx
c002720d:	79 06                	jns    c0027215 <__addsf3+0x277>
c002720f:	89 d8                	mov    eax,ebx
c0027211:	29 d0                	sub    eax,edx
c0027213:	eb 5a                	jmp    c002726f <__addsf3+0x2d1>
c0027215:	bf 00 00 00 00       	mov    edi,0x0
c002721a:	74 7b                	je     c0027297 <__addsf3+0x2f9>
c002721c:	eb 4a                	jmp    c0027268 <__addsf3+0x2ca>
c002721e:	89 d0                	mov    eax,edx
c0027220:	29 d8                	sub    eax,ebx
c0027222:	79 12                	jns    c0027236 <__addsf3+0x298>
c0027224:	89 d8                	mov    eax,ebx
c0027226:	29 d0                	sub    eax,edx
c0027228:	eb 09                	jmp    c0027233 <__addsf3+0x295>
c002722a:	85 c0                	test   eax,eax
c002722c:	79 41                	jns    c002726f <__addsf3+0x2d1>
c002722e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027233:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027236:	31 f6                	xor    esi,esi
c0027238:	85 c0                	test   eax,eax
c002723a:	74 33                	je     c002726f <__addsf3+0x2d1>
c002723c:	0f bd c8             	bsr    ecx,eax
c002723f:	83 f1 1f             	xor    ecx,0x1f
c0027242:	d3 e0                	shl    eax,cl
c0027244:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027248:	39 ca                	cmp    edx,ecx
c002724a:	7f 10                	jg     c002725c <__addsf3+0x2be>
c002724c:	29 d1                	sub    ecx,edx
c002724e:	41                   	inc    ecx
c002724f:	d3 e8                	shr    eax,cl
c0027251:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027254:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002725a:	eb 13                	jmp    c002726f <__addsf3+0x2d1>
c002725c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002725f:	29 ce                	sub    esi,ecx
c0027261:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027266:	eb 07                	jmp    c002726f <__addsf3+0x2d1>
c0027268:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002726b:	eb 02                	jmp    c002726f <__addsf3+0x2d1>
c002726d:	31 c0                	xor    eax,eax
c002726f:	89 c2                	mov    edx,eax
c0027271:	c1 ea 08             	shr    edx,0x8
c0027274:	a8 7f                	test   al,0x7f
c0027276:	0f 95 c1             	setne  cl
c0027279:	09 d1                	or     ecx,edx
c002727b:	83 e1 01             	and    ecx,0x1
c002727e:	c1 e8 07             	shr    eax,0x7
c0027281:	21 c8                	and    eax,ecx
c0027283:	c1 e6 17             	shl    esi,0x17
c0027286:	09 d6                	or     esi,edx
c0027288:	8d 3c 30             	lea    edi,[eax+esi*1]
c002728b:	eb 0a                	jmp    c0027297 <__addsf3+0x2f9>
c002728d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027290:	eb 05                	jmp    c0027297 <__addsf3+0x2f9>
c0027292:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027297:	89 f8                	mov    eax,edi
c0027299:	5a                   	pop    edx
c002729a:	59                   	pop    ecx
c002729b:	5b                   	pop    ebx
c002729c:	5e                   	pop    esi
c002729d:	5f                   	pop    edi
c002729e:	5d                   	pop    ebp
c002729f:	c3                   	ret    

c00272a0 <__subsf3>:
c00272a0:	55                   	push   ebp
c00272a1:	89 e5                	mov    ebp,esp
c00272a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272a6:	05 00 00 00 80       	add    eax,0x80000000
c00272ab:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00272ae:	5d                   	pop    ebp
c00272af:	e9 ea fc ff ff       	jmp    c0026f9e <__addsf3>

c00272b4 <__negsf2>:
c00272b4:	55                   	push   ebp
c00272b5:	89 e5                	mov    ebp,esp
c00272b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00272ba:	05 00 00 00 80       	add    eax,0x80000000
c00272bf:	5d                   	pop    ebp
c00272c0:	c3                   	ret    

c00272c1 <__mulsf3>:
c00272c1:	55                   	push   ebp
c00272c2:	89 e5                	mov    ebp,esp
c00272c4:	57                   	push   edi
c00272c5:	56                   	push   esi
c00272c6:	53                   	push   ebx
c00272c7:	83 ec 1c             	sub    esp,0x1c
c00272ca:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00272cd:	89 f0                	mov    eax,esi
c00272cf:	89 f1                	mov    ecx,esi
c00272d1:	c1 f9 17             	sar    ecx,0x17
c00272d4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00272d7:	c1 e0 08             	shl    eax,0x8
c00272da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272df:	89 c1                	mov    ecx,eax
c00272e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272e4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272e7:	89 c7                	mov    edi,eax
c00272e9:	c1 ff 17             	sar    edi,0x17
c00272ec:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00272f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00272f3:	89 f8                	mov    eax,edi
c00272f5:	0f b6 c0             	movzx  eax,al
c00272f8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00272fb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00272ff:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027302:	42                   	inc    edx
c0027303:	80 e2 fe             	and    dl,0xfe
c0027306:	75 7b                	jne    c0027383 <__mulsf3+0xc2>
c0027308:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002730c:	74 54                	je     c0027362 <__mulsf3+0xa1>
c002730e:	85 c9                	test   ecx,ecx
c0027310:	0f 85 64 01 00 00    	jne    c002747a <__mulsf3+0x1b9>
c0027316:	8d 57 01             	lea    edx,[edi+0x1]
c0027319:	80 e2 fe             	and    dl,0xfe
c002731c:	75 1f                	jne    c002733d <__mulsf3+0x7c>
c002731e:	85 c0                	test   eax,eax
c0027320:	b8 00 00 00 00       	mov    eax,0x0
c0027325:	74 29                	je     c0027350 <__mulsf3+0x8f>
c0027327:	53                   	push   ebx
c0027328:	53                   	push   ebx
c0027329:	50                   	push   eax
c002732a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002732d:	e8 96 05 00 00       	call   c00278c8 <__nesf2>
c0027332:	83 c4 10             	add    esp,0x10
c0027335:	85 c0                	test   eax,eax
c0027337:	0f 85 3a 01 00 00    	jne    c0027477 <__mulsf3+0x1b6>
c002733d:	85 ff                	test   edi,edi
c002733f:	0f 89 35 01 00 00    	jns    c002747a <__mulsf3+0x1b9>
c0027345:	81 c6 00 00 00 80    	add    esi,0x80000000
c002734b:	e9 2a 01 00 00       	jmp    c002747a <__mulsf3+0x1b9>
c0027350:	51                   	push   ecx
c0027351:	51                   	push   ecx
c0027352:	50                   	push   eax
c0027353:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027356:	e8 6d 05 00 00       	call   c00278c8 <__nesf2>
c002735b:	83 c4 10             	add    esp,0x10
c002735e:	85 c0                	test   eax,eax
c0027360:	eb 15                	jmp    c0027377 <__mulsf3+0xb6>
c0027362:	85 c9                	test   ecx,ecx
c0027364:	74 0b                	je     c0027371 <__mulsf3+0xb0>
c0027366:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027369:	01 c9                	add    ecx,ecx
c002736b:	78 16                	js     c0027383 <__mulsf3+0xc2>
c002736d:	89 d3                	mov    ebx,edx
c002736f:	eb f5                	jmp    c0027366 <__mulsf3+0xa5>
c0027371:	89 f8                	mov    eax,edi
c0027373:	f7 d0                	not    eax
c0027375:	84 c0                	test   al,al
c0027377:	75 c4                	jne    c002733d <__mulsf3+0x7c>
c0027379:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002737e:	e9 f7 00 00 00       	jmp    c002747a <__mulsf3+0x1b9>
c0027383:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027386:	c1 e6 08             	shl    esi,0x8
c0027389:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002738f:	8d 57 01             	lea    edx,[edi+0x1]
c0027392:	80 e2 fe             	and    dl,0xfe
c0027395:	75 63                	jne    c00273fa <__mulsf3+0x139>
c0027397:	85 c0                	test   eax,eax
c0027399:	74 2f                	je     c00273ca <__mulsf3+0x109>
c002739b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002739f:	0f 89 d2 00 00 00    	jns    c0027477 <__mulsf3+0x1b6>
c00273a5:	52                   	push   edx
c00273a6:	52                   	push   edx
c00273a7:	6a 00                	push   0x0
c00273a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273ac:	e8 dc 04 00 00       	call   c002788d <__eqsf2>
c00273b1:	83 c4 10             	add    esp,0x10
c00273b4:	85 c0                	test   eax,eax
c00273b6:	0f 85 bb 00 00 00    	jne    c0027477 <__mulsf3+0x1b6>
c00273bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00273bf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00273c5:	e9 b0 00 00 00       	jmp    c002747a <__mulsf3+0x1b9>
c00273ca:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00273cd:	50                   	push   eax
c00273ce:	50                   	push   eax
c00273cf:	6a 00                	push   0x0
c00273d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273d4:	e8 b4 04 00 00       	call   c002788d <__eqsf2>
c00273d9:	83 c4 10             	add    esp,0x10
c00273dc:	85 c0                	test   eax,eax
c00273de:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273e1:	75 0c                	jne    c00273ef <__mulsf3+0x12e>
c00273e3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00273e7:	0f 89 8a 00 00 00    	jns    c0027477 <__mulsf3+0x1b6>
c00273ed:	eb cd                	jmp    c00273bc <__mulsf3+0xfb>
c00273ef:	8d 43 ff             	lea    eax,[ebx-0x1]
c00273f2:	01 f6                	add    esi,esi
c00273f4:	78 04                	js     c00273fa <__mulsf3+0x139>
c00273f6:	89 c3                	mov    ebx,eax
c00273f8:	eb f5                	jmp    c00273ef <__mulsf3+0x12e>
c00273fa:	89 c8                	mov    eax,ecx
c00273fc:	0d 00 00 00 80       	or     eax,0x80000000
c0027401:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027407:	f7 e6                	mul    esi
c0027409:	85 c0                	test   eax,eax
c002740b:	0f 95 c0             	setne  al
c002740e:	0f b6 c0             	movzx  eax,al
c0027411:	09 c2                	or     edx,eax
c0027413:	78 03                	js     c0027418 <__mulsf3+0x157>
c0027415:	01 d2                	add    edx,edx
c0027417:	4b                   	dec    ebx
c0027418:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002741e:	7f 22                	jg     c0027442 <__mulsf3+0x181>
c0027420:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027426:	85 db                	test   ebx,ebx
c0027428:	7f 23                	jg     c002744d <__mulsf3+0x18c>
c002742a:	83 fb e9             	cmp    ebx,0xffffffe9
c002742d:	7c 1a                	jl     c0027449 <__mulsf3+0x188>
c002742f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027435:	b9 01 00 00 00       	mov    ecx,0x1
c002743a:	29 d9                	sub    ecx,ebx
c002743c:	d3 ea                	shr    edx,cl
c002743e:	31 db                	xor    ebx,ebx
c0027440:	eb 0b                	jmp    c002744d <__mulsf3+0x18c>
c0027442:	bb ff 00 00 00       	mov    ebx,0xff
c0027447:	eb 02                	jmp    c002744b <__mulsf3+0x18a>
c0027449:	31 db                	xor    ebx,ebx
c002744b:	31 d2                	xor    edx,edx
c002744d:	89 d0                	mov    eax,edx
c002744f:	c1 e8 08             	shr    eax,0x8
c0027452:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027455:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002745b:	09 fb                	or     ebx,edi
c002745d:	c1 e3 17             	shl    ebx,0x17
c0027460:	09 c3                	or     ebx,eax
c0027462:	f6 c2 7f             	test   dl,0x7f
c0027465:	0f 95 c1             	setne  cl
c0027468:	09 c8                	or     eax,ecx
c002746a:	83 e0 01             	and    eax,0x1
c002746d:	c1 ea 07             	shr    edx,0x7
c0027470:	21 c2                	and    edx,eax
c0027472:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027475:	eb 03                	jmp    c002747a <__mulsf3+0x1b9>
c0027477:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002747a:	89 f0                	mov    eax,esi
c002747c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002747f:	5b                   	pop    ebx
c0027480:	5e                   	pop    esi
c0027481:	5f                   	pop    edi
c0027482:	5d                   	pop    ebp
c0027483:	c3                   	ret    

c0027484 <__divsf3>:
c0027484:	55                   	push   ebp
c0027485:	89 e5                	mov    ebp,esp
c0027487:	57                   	push   edi
c0027488:	56                   	push   esi
c0027489:	53                   	push   ebx
c002748a:	83 ec 1c             	sub    esp,0x1c
c002748d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027490:	89 d8                	mov    eax,ebx
c0027492:	89 d9                	mov    ecx,ebx
c0027494:	c1 f9 17             	sar    ecx,0x17
c0027497:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002749a:	c1 e0 08             	shl    eax,0x8
c002749d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274a2:	89 c1                	mov    ecx,eax
c00274a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274a7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274aa:	89 c7                	mov    edi,eax
c00274ac:	c1 ff 17             	sar    edi,0x17
c00274af:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00274b3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00274b6:	89 f8                	mov    eax,edi
c00274b8:	0f b6 c0             	movzx  eax,al
c00274bb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274be:	29 c6                	sub    esi,eax
c00274c0:	83 c6 7f             	add    esi,0x7f
c00274c3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00274c6:	42                   	inc    edx
c00274c7:	80 e2 fe             	and    dl,0xfe
c00274ca:	0f 85 9c 00 00 00    	jne    c002756c <__divsf3+0xe8>
c00274d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274d4:	74 33                	je     c0027509 <__divsf3+0x85>
c00274d6:	85 c9                	test   ecx,ecx
c00274d8:	0f 85 c7 01 00 00    	jne    c00276a5 <__divsf3+0x221>
c00274de:	8d 57 01             	lea    edx,[edi+0x1]
c00274e1:	80 e2 fe             	and    dl,0xfe
c00274e4:	75 2f                	jne    c0027515 <__divsf3+0x91>
c00274e6:	85 c0                	test   eax,eax
c00274e8:	74 2b                	je     c0027515 <__divsf3+0x91>
c00274ea:	51                   	push   ecx
c00274eb:	51                   	push   ecx
c00274ec:	6a 00                	push   0x0
c00274ee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f1:	e8 d2 03 00 00       	call   c00278c8 <__nesf2>
c00274f6:	83 c4 10             	add    esp,0x10
c00274f9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00274fc:	85 c0                	test   eax,eax
c00274fe:	0f 85 a1 01 00 00    	jne    c00276a5 <__divsf3+0x221>
c0027504:	e9 92 01 00 00       	jmp    c002769b <__divsf3+0x217>
c0027509:	85 c9                	test   ecx,ecx
c002750b:	75 1b                	jne    c0027528 <__divsf3+0xa4>
c002750d:	8d 57 01             	lea    edx,[edi+0x1]
c0027510:	80 e2 fe             	and    dl,0xfe
c0027513:	74 1e                	je     c0027533 <__divsf3+0xaf>
c0027515:	85 ff                	test   edi,edi
c0027517:	0f 89 88 01 00 00    	jns    c00276a5 <__divsf3+0x221>
c002751d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027523:	e9 7d 01 00 00       	jmp    c00276a5 <__divsf3+0x221>
c0027528:	8d 56 ff             	lea    edx,[esi-0x1]
c002752b:	01 c9                	add    ecx,ecx
c002752d:	78 3d                	js     c002756c <__divsf3+0xe8>
c002752f:	89 d6                	mov    esi,edx
c0027531:	eb f5                	jmp    c0027528 <__divsf3+0xa4>
c0027533:	85 c0                	test   eax,eax
c0027535:	b8 00 00 00 00       	mov    eax,0x0
c002753a:	74 18                	je     c0027554 <__divsf3+0xd0>
c002753c:	52                   	push   edx
c002753d:	52                   	push   edx
c002753e:	50                   	push   eax
c002753f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027542:	e8 81 03 00 00       	call   c00278c8 <__nesf2>
c0027547:	83 c4 10             	add    esp,0x10
c002754a:	85 c0                	test   eax,eax
c002754c:	0f 85 50 01 00 00    	jne    c00276a2 <__divsf3+0x21e>
c0027552:	eb c1                	jmp    c0027515 <__divsf3+0x91>
c0027554:	56                   	push   esi
c0027555:	56                   	push   esi
c0027556:	50                   	push   eax
c0027557:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002755a:	e8 69 03 00 00       	call   c00278c8 <__nesf2>
c002755f:	83 c4 10             	add    esp,0x10
c0027562:	85 c0                	test   eax,eax
c0027564:	0f 84 31 01 00 00    	je     c002769b <__divsf3+0x217>
c002756a:	eb a9                	jmp    c0027515 <__divsf3+0x91>
c002756c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002756f:	c1 e3 08             	shl    ebx,0x8
c0027572:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027578:	8d 57 01             	lea    edx,[edi+0x1]
c002757b:	80 e2 fe             	and    dl,0xfe
c002757e:	75 71                	jne    c00275f1 <__divsf3+0x16d>
c0027580:	85 c0                	test   eax,eax
c0027582:	ba 00 00 00 00       	mov    edx,0x0
c0027587:	74 2f                	je     c00275b8 <__divsf3+0x134>
c0027589:	51                   	push   ecx
c002758a:	51                   	push   ecx
c002758b:	52                   	push   edx
c002758c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002758f:	e8 f9 02 00 00       	call   c002788d <__eqsf2>
c0027594:	83 c4 10             	add    esp,0x10
c0027597:	85 c0                	test   eax,eax
c0027599:	0f 85 03 01 00 00    	jne    c00276a2 <__divsf3+0x21e>
c002759f:	31 d2                	xor    edx,edx
c00275a1:	89 d3                	mov    ebx,edx
c00275a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275a6:	31 f8                	xor    eax,edi
c00275a8:	0f 89 f7 00 00 00    	jns    c00276a5 <__divsf3+0x221>
c00275ae:	bb 00 00 00 80       	mov    ebx,0x80000000
c00275b3:	e9 ed 00 00 00       	jmp    c00276a5 <__divsf3+0x221>
c00275b8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00275bb:	50                   	push   eax
c00275bc:	50                   	push   eax
c00275bd:	52                   	push   edx
c00275be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275c1:	e8 c7 02 00 00       	call   c002788d <__eqsf2>
c00275c6:	83 c4 10             	add    esp,0x10
c00275c9:	85 c0                	test   eax,eax
c00275cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275ce:	75 16                	jne    c00275e6 <__divsf3+0x162>
c00275d0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275d3:	31 fb                	xor    ebx,edi
c00275d5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00275db:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00275e1:	e9 bf 00 00 00       	jmp    c00276a5 <__divsf3+0x221>
c00275e6:	8d 46 01             	lea    eax,[esi+0x1]
c00275e9:	01 db                	add    ebx,ebx
c00275eb:	78 04                	js     c00275f1 <__divsf3+0x16d>
c00275ed:	89 c6                	mov    esi,eax
c00275ef:	eb f5                	jmp    c00275e6 <__divsf3+0x162>
c00275f1:	89 c8                	mov    eax,ecx
c00275f3:	0d 00 00 00 80       	or     eax,0x80000000
c00275f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275fe:	31 d2                	xor    edx,edx
c0027600:	39 d8                	cmp    eax,ebx
c0027602:	72 07                	jb     c002760b <__divsf3+0x187>
c0027604:	29 d8                	sub    eax,ebx
c0027606:	ba 01 00 00 00       	mov    edx,0x1
c002760b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027612:	01 d2                	add    edx,edx
c0027614:	89 c1                	mov    ecx,eax
c0027616:	01 c0                	add    eax,eax
c0027618:	85 c9                	test   ecx,ecx
c002761a:	78 04                	js     c0027620 <__divsf3+0x19c>
c002761c:	39 c3                	cmp    ebx,eax
c002761e:	77 05                	ja     c0027625 <__divsf3+0x1a1>
c0027620:	29 d8                	sub    eax,ebx
c0027622:	83 ca 01             	or     edx,0x1
c0027625:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027628:	75 e8                	jne    c0027612 <__divsf3+0x18e>
c002762a:	85 c0                	test   eax,eax
c002762c:	0f 95 c0             	setne  al
c002762f:	0f b6 c0             	movzx  eax,al
c0027632:	c1 e2 06             	shl    edx,0x6
c0027635:	09 c2                	or     edx,eax
c0027637:	78 03                	js     c002763c <__divsf3+0x1b8>
c0027639:	01 d2                	add    edx,edx
c002763b:	4e                   	dec    esi
c002763c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027642:	7f 22                	jg     c0027666 <__divsf3+0x1e2>
c0027644:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002764a:	85 f6                	test   esi,esi
c002764c:	7f 23                	jg     c0027671 <__divsf3+0x1ed>
c002764e:	83 fe e9             	cmp    esi,0xffffffe9
c0027651:	7c 1a                	jl     c002766d <__divsf3+0x1e9>
c0027653:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027659:	b9 01 00 00 00       	mov    ecx,0x1
c002765e:	29 f1                	sub    ecx,esi
c0027660:	d3 ea                	shr    edx,cl
c0027662:	31 f6                	xor    esi,esi
c0027664:	eb 0b                	jmp    c0027671 <__divsf3+0x1ed>
c0027666:	be ff 00 00 00       	mov    esi,0xff
c002766b:	eb 02                	jmp    c002766f <__divsf3+0x1eb>
c002766d:	31 f6                	xor    esi,esi
c002766f:	31 d2                	xor    edx,edx
c0027671:	89 d0                	mov    eax,edx
c0027673:	c1 e8 08             	shr    eax,0x8
c0027676:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027679:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002767f:	09 fe                	or     esi,edi
c0027681:	c1 e6 17             	shl    esi,0x17
c0027684:	09 c6                	or     esi,eax
c0027686:	f6 c2 7f             	test   dl,0x7f
c0027689:	0f 95 c1             	setne  cl
c002768c:	09 c8                	or     eax,ecx
c002768e:	83 e0 01             	and    eax,0x1
c0027691:	c1 ea 07             	shr    edx,0x7
c0027694:	21 c2                	and    edx,eax
c0027696:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027699:	eb 0a                	jmp    c00276a5 <__divsf3+0x221>
c002769b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00276a0:	eb 03                	jmp    c00276a5 <__divsf3+0x221>
c00276a2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276a5:	89 d8                	mov    eax,ebx
c00276a7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00276aa:	5b                   	pop    ebx
c00276ab:	5e                   	pop    esi
c00276ac:	5f                   	pop    edi
c00276ad:	5d                   	pop    ebp
c00276ae:	c3                   	ret    

c00276af <__floatsisf>:
c00276af:	55                   	push   ebp
c00276b0:	89 e5                	mov    ebp,esp
c00276b2:	53                   	push   ebx
c00276b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00276b6:	85 d2                	test   edx,edx
c00276b8:	7e 2b                	jle    c00276e5 <__floatsisf+0x36>
c00276ba:	0f bd ca             	bsr    ecx,edx
c00276bd:	83 f1 1f             	xor    ecx,0x1f
c00276c0:	d3 e2                	shl    edx,cl
c00276c2:	89 d0                	mov    eax,edx
c00276c4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276c9:	89 c3                	mov    ebx,eax
c00276cb:	c1 eb 08             	shr    ebx,0x8
c00276ce:	80 e2 7f             	and    dl,0x7f
c00276d1:	0f 95 c2             	setne  dl
c00276d4:	09 da                	or     edx,ebx
c00276d6:	83 e2 01             	and    edx,0x1
c00276d9:	c1 e8 07             	shr    eax,0x7
c00276dc:	21 c2                	and    edx,eax
c00276de:	b8 9e 00 00 00       	mov    eax,0x9e
c00276e3:	eb 32                	jmp    c0027717 <__floatsisf+0x68>
c00276e5:	b8 00 00 00 00       	mov    eax,0x0
c00276ea:	74 34                	je     c0027720 <__floatsisf+0x71>
c00276ec:	f7 da                	neg    edx
c00276ee:	0f bd ca             	bsr    ecx,edx
c00276f1:	83 f1 1f             	xor    ecx,0x1f
c00276f4:	d3 e2                	shl    edx,cl
c00276f6:	89 d0                	mov    eax,edx
c00276f8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276fd:	89 c3                	mov    ebx,eax
c00276ff:	c1 eb 08             	shr    ebx,0x8
c0027702:	80 e2 7f             	and    dl,0x7f
c0027705:	0f 95 c2             	setne  dl
c0027708:	09 da                	or     edx,ebx
c002770a:	83 e2 01             	and    edx,0x1
c002770d:	c1 e8 07             	shr    eax,0x7
c0027710:	21 c2                	and    edx,eax
c0027712:	b8 9e 01 00 00       	mov    eax,0x19e
c0027717:	29 c8                	sub    eax,ecx
c0027719:	c1 e0 17             	shl    eax,0x17
c002771c:	09 d8                	or     eax,ebx
c002771e:	01 d0                	add    eax,edx
c0027720:	5b                   	pop    ebx
c0027721:	5d                   	pop    ebp
c0027722:	c3                   	ret    

c0027723 <__floatunsisf>:
c0027723:	55                   	push   ebp
c0027724:	89 e5                	mov    ebp,esp
c0027726:	53                   	push   ebx
c0027727:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002772a:	31 c0                	xor    eax,eax
c002772c:	85 d2                	test   edx,edx
c002772e:	74 32                	je     c0027762 <__floatunsisf+0x3f>
c0027730:	0f bd ca             	bsr    ecx,edx
c0027733:	83 f1 1f             	xor    ecx,0x1f
c0027736:	d3 e2                	shl    edx,cl
c0027738:	89 d0                	mov    eax,edx
c002773a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002773f:	89 c3                	mov    ebx,eax
c0027741:	c1 eb 08             	shr    ebx,0x8
c0027744:	80 e2 7f             	and    dl,0x7f
c0027747:	0f 95 c2             	setne  dl
c002774a:	09 da                	or     edx,ebx
c002774c:	83 e2 01             	and    edx,0x1
c002774f:	c1 e8 07             	shr    eax,0x7
c0027752:	21 c2                	and    edx,eax
c0027754:	b8 9e 00 00 00       	mov    eax,0x9e
c0027759:	29 c8                	sub    eax,ecx
c002775b:	c1 e0 17             	shl    eax,0x17
c002775e:	09 d8                	or     eax,ebx
c0027760:	01 d0                	add    eax,edx
c0027762:	5b                   	pop    ebx
c0027763:	5d                   	pop    ebp
c0027764:	c3                   	ret    

c0027765 <__fixsfsi>:
c0027765:	55                   	push   ebp
c0027766:	89 e5                	mov    ebp,esp
c0027768:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002776b:	89 d1                	mov    ecx,edx
c002776d:	c1 e1 08             	shl    ecx,0x8
c0027770:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027776:	c1 fa 17             	sar    edx,0x17
c0027779:	78 1c                	js     c0027797 <__fixsfsi+0x32>
c002777b:	83 ea 7f             	sub    edx,0x7f
c002777e:	31 c0                	xor    eax,eax
c0027780:	83 fa 1e             	cmp    edx,0x1e
c0027783:	77 40                	ja     c00277c5 <__fixsfsi+0x60>
c0027785:	89 c8                	mov    eax,ecx
c0027787:	0d 00 00 00 80       	or     eax,0x80000000
c002778c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027791:	29 d1                	sub    ecx,edx
c0027793:	d3 e8                	shr    eax,cl
c0027795:	eb 2e                	jmp    c00277c5 <__fixsfsi+0x60>
c0027797:	31 c0                	xor    eax,eax
c0027799:	81 c2 81 00 00 00    	add    edx,0x81
c002779f:	78 24                	js     c00277c5 <__fixsfsi+0x60>
c00277a1:	83 fa 1e             	cmp    edx,0x1e
c00277a4:	7e 09                	jle    c00277af <__fixsfsi+0x4a>
c00277a6:	83 fa 1f             	cmp    edx,0x1f
c00277a9:	75 18                	jne    c00277c3 <__fixsfsi+0x5e>
c00277ab:	85 c9                	test   ecx,ecx
c00277ad:	75 14                	jne    c00277c3 <__fixsfsi+0x5e>
c00277af:	89 c8                	mov    eax,ecx
c00277b1:	0d 00 00 00 80       	or     eax,0x80000000
c00277b6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277bb:	29 d1                	sub    ecx,edx
c00277bd:	d3 e8                	shr    eax,cl
c00277bf:	f7 d8                	neg    eax
c00277c1:	eb 02                	jmp    c00277c5 <__fixsfsi+0x60>
c00277c3:	31 c0                	xor    eax,eax
c00277c5:	5d                   	pop    ebp
c00277c6:	c3                   	ret    

c00277c7 <__fixunssfsi>:
c00277c7:	55                   	push   ebp
c00277c8:	89 e5                	mov    ebp,esp
c00277ca:	53                   	push   ebx
c00277cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277ce:	89 d3                	mov    ebx,edx
c00277d0:	c1 fb 17             	sar    ebx,0x17
c00277d3:	83 eb 7f             	sub    ebx,0x7f
c00277d6:	31 c0                	xor    eax,eax
c00277d8:	83 fb 1f             	cmp    ebx,0x1f
c00277db:	77 18                	ja     c00277f5 <__fixunssfsi+0x2e>
c00277dd:	89 d0                	mov    eax,edx
c00277df:	c1 e0 08             	shl    eax,0x8
c00277e2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00277e7:	0d 00 00 00 80       	or     eax,0x80000000
c00277ec:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277f1:	29 d9                	sub    ecx,ebx
c00277f3:	d3 e8                	shr    eax,cl
c00277f5:	5b                   	pop    ebx
c00277f6:	5d                   	pop    ebp
c00277f7:	c3                   	ret    

c00277f8 <__cmpsf2>:
c00277f8:	55                   	push   ebp
c00277f9:	89 e5                	mov    ebp,esp
c00277fb:	57                   	push   edi
c00277fc:	56                   	push   esi
c00277fd:	53                   	push   ebx
c00277fe:	83 ec 24             	sub    esp,0x24
c0027801:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027804:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027807:	e8 4f 10 00 00       	call   c002885b <__truncdfsf2>
c002780c:	5a                   	pop    edx
c002780d:	59                   	pop    ecx
c002780e:	89 c3                	mov    ebx,eax
c0027810:	c1 e8 17             	shr    eax,0x17
c0027813:	0f b6 f0             	movzx  esi,al
c0027816:	89 d8                	mov    eax,ebx
c0027818:	c1 e8 1f             	shr    eax,0x1f
c002781b:	31 c6                	xor    esi,eax
c002781d:	c1 e3 08             	shl    ebx,0x8
c0027820:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027823:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027826:	e8 30 10 00 00       	call   c002885b <__truncdfsf2>
c002782b:	83 c4 10             	add    esp,0x10
c002782e:	89 c1                	mov    ecx,eax
c0027830:	c1 e9 17             	shr    ecx,0x17
c0027833:	0f b6 c9             	movzx  ecx,cl
c0027836:	89 c7                	mov    edi,eax
c0027838:	c1 ef 1f             	shr    edi,0x1f
c002783b:	89 ca                	mov    edx,ecx
c002783d:	31 fa                	xor    edx,edi
c002783f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027842:	c1 e0 08             	shl    eax,0x8
c0027845:	89 c2                	mov    edx,eax
c0027847:	89 d8                	mov    eax,ebx
c0027849:	09 d0                	or     eax,edx
c002784b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027850:	09 f0                	or     eax,esi
c0027852:	75 08                	jne    c002785c <__cmpsf2+0x64>
c0027854:	31 c0                	xor    eax,eax
c0027856:	39 f9                	cmp    ecx,edi
c0027858:	75 0c                	jne    c0027866 <__cmpsf2+0x6e>
c002785a:	eb 29                	jmp    c0027885 <__cmpsf2+0x8d>
c002785c:	b8 01 00 00 00       	mov    eax,0x1
c0027861:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027864:	7f 1f                	jg     c0027885 <__cmpsf2+0x8d>
c0027866:	83 c8 ff             	or     eax,0xffffffff
c0027869:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002786c:	7c 17                	jl     c0027885 <__cmpsf2+0x8d>
c002786e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027874:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002787a:	b8 01 00 00 00       	mov    eax,0x1
c002787f:	39 d3                	cmp    ebx,edx
c0027881:	77 02                	ja     c0027885 <__cmpsf2+0x8d>
c0027883:	19 c0                	sbb    eax,eax
c0027885:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027888:	5b                   	pop    ebx
c0027889:	5e                   	pop    esi
c002788a:	5f                   	pop    edi
c002788b:	5d                   	pop    ebp
c002788c:	c3                   	ret    

c002788d <__eqsf2>:
c002788d:	55                   	push   ebp
c002788e:	89 e5                	mov    ebp,esp
c0027890:	83 ec 24             	sub    esp,0x24
c0027893:	6a 01                	push   0x1
c0027895:	83 ec 0c             	sub    esp,0xc
c0027898:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002789b:	e8 df 10 00 00       	call   c002897f <__extendsfdf2>
c00278a0:	83 c4 10             	add    esp,0x10
c00278a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278a9:	52                   	push   edx
c00278aa:	50                   	push   eax
c00278ab:	50                   	push   eax
c00278ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00278af:	e8 cb 10 00 00       	call   c002897f <__extendsfdf2>
c00278b4:	59                   	pop    ecx
c00278b5:	59                   	pop    ecx
c00278b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278b9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278bc:	52                   	push   edx
c00278bd:	50                   	push   eax
c00278be:	e8 35 ff ff ff       	call   c00277f8 <__cmpsf2>
c00278c3:	83 c4 20             	add    esp,0x20
c00278c6:	c9                   	leave  
c00278c7:	c3                   	ret    

c00278c8 <__nesf2>:
c00278c8:	eb c3                	jmp    c002788d <__eqsf2>

c00278ca <__gtsf2>:
c00278ca:	55                   	push   ebp
c00278cb:	89 e5                	mov    ebp,esp
c00278cd:	83 ec 24             	sub    esp,0x24
c00278d0:	6a ff                	push   0xffffffff
c00278d2:	83 ec 0c             	sub    esp,0xc
c00278d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278d8:	e8 a2 10 00 00       	call   c002897f <__extendsfdf2>
c00278dd:	83 c4 10             	add    esp,0x10
c00278e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278e3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278e6:	52                   	push   edx
c00278e7:	50                   	push   eax
c00278e8:	50                   	push   eax
c00278e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00278ec:	e8 8e 10 00 00       	call   c002897f <__extendsfdf2>
c00278f1:	59                   	pop    ecx
c00278f2:	59                   	pop    ecx
c00278f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278f9:	52                   	push   edx
c00278fa:	50                   	push   eax
c00278fb:	e8 f8 fe ff ff       	call   c00277f8 <__cmpsf2>
c0027900:	83 c4 20             	add    esp,0x20
c0027903:	c9                   	leave  
c0027904:	c3                   	ret    

c0027905 <__gesf2>:
c0027905:	eb c3                	jmp    c00278ca <__gtsf2>

c0027907 <__ltsf2>:
c0027907:	eb 84                	jmp    c002788d <__eqsf2>

c0027909 <__lesf2>:
c0027909:	eb 82                	jmp    c002788d <__eqsf2>

c002790b <__adddf3>:
c002790b:	55                   	push   ebp
c002790c:	89 e5                	mov    ebp,esp
c002790e:	57                   	push   edi
c002790f:	56                   	push   esi
c0027910:	53                   	push   ebx
c0027911:	83 ec 24             	sub    esp,0x24
c0027914:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027917:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002791a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002791d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027920:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027923:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027926:	89 c8                	mov    eax,ecx
c0027928:	89 ce                	mov    esi,ecx
c002792a:	c1 fe 14             	sar    esi,0x14
c002792d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027930:	89 fb                	mov    ebx,edi
c0027932:	89 fa                	mov    edx,edi
c0027934:	c1 e2 0b             	shl    edx,0xb
c0027937:	c1 e0 0b             	shl    eax,0xb
c002793a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002793f:	c1 eb 15             	shr    ebx,0x15
c0027942:	09 d8                	or     eax,ebx
c0027944:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027947:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002794a:	c1 fe 14             	sar    esi,0x14
c002794d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027950:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027953:	89 f3                	mov    ebx,esi
c0027955:	c1 e3 0b             	shl    ebx,0xb
c0027958:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002795b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002795e:	c1 e3 0b             	shl    ebx,0xb
c0027961:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027967:	c1 ee 15             	shr    esi,0x15
c002796a:	09 f3                	or     ebx,esi
c002796c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002796f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027972:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027975:	0f 88 5f 02 00 00    	js     c0027bda <__adddf3+0x2cf>
c002797b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002797e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027981:	85 db                	test   ebx,ebx
c0027983:	0f 8e c7 00 00 00    	jle    c0027a50 <__adddf3+0x145>
c0027989:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027990:	75 1a                	jne    c00279ac <__adddf3+0xa1>
c0027992:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027995:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027998:	0f 84 b2 05 00 00    	je     c0027f50 <__adddf3+0x645>
c002799e:	4b                   	dec    ebx
c002799f:	75 23                	jne    c00279c4 <__adddf3+0xb9>
c00279a1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00279a4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00279a7:	e9 99 00 00 00       	jmp    c0027a45 <__adddf3+0x13a>
c00279ac:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279af:	f7 d6                	not    esi
c00279b1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279b7:	0f 84 93 05 00 00    	je     c0027f50 <__adddf3+0x645>
c00279bd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00279c4:	83 fb 1f             	cmp    ebx,0x1f
c00279c7:	7e 42                	jle    c0027a0b <__adddf3+0x100>
c00279c9:	83 fb 3f             	cmp    ebx,0x3f
c00279cc:	0f 8f 7e 05 00 00    	jg     c0027f50 <__adddf3+0x645>
c00279d2:	83 e3 1f             	and    ebx,0x1f
c00279d5:	89 d9                	mov    ecx,ebx
c00279d7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279da:	d3 ef                	shr    edi,cl
c00279dc:	31 db                	xor    ebx,ebx
c00279de:	85 c9                	test   ecx,ecx
c00279e0:	74 15                	je     c00279f7 <__adddf3+0xec>
c00279e2:	be 20 00 00 00       	mov    esi,0x20
c00279e7:	29 ce                	sub    esi,ecx
c00279e9:	89 f1                	mov    ecx,esi
c00279eb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279ee:	d3 e6                	shl    esi,cl
c00279f0:	31 db                	xor    ebx,ebx
c00279f2:	85 f6                	test   esi,esi
c00279f4:	0f 95 c3             	setne  bl
c00279f7:	31 c9                	xor    ecx,ecx
c00279f9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279fd:	0f 95 c1             	setne  cl
c0027a00:	09 cf                	or     edi,ecx
c0027a02:	09 fb                	or     ebx,edi
c0027a04:	01 da                	add    edx,ebx
c0027a06:	83 d0 00             	adc    eax,0x0
c0027a09:	eb 3a                	jmp    c0027a45 <__adddf3+0x13a>
c0027a0b:	bf 20 00 00 00       	mov    edi,0x20
c0027a10:	29 df                	sub    edi,ebx
c0027a12:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a15:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a18:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a1b:	d3 e6                	shl    esi,cl
c0027a1d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a20:	88 d9                	mov    cl,bl
c0027a22:	d3 ef                	shr    edi,cl
c0027a24:	09 fe                	or     esi,edi
c0027a26:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a29:	88 d9                	mov    cl,bl
c0027a2b:	d3 ef                	shr    edi,cl
c0027a2d:	89 fb                	mov    ebx,edi
c0027a2f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a32:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a35:	d3 e7                	shl    edi,cl
c0027a37:	85 ff                	test   edi,edi
c0027a39:	0f 95 c1             	setne  cl
c0027a3c:	0f b6 c9             	movzx  ecx,cl
c0027a3f:	09 ce                	or     esi,ecx
c0027a41:	01 f2                	add    edx,esi
c0027a43:	11 d8                	adc    eax,ebx
c0027a45:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a4b:	e9 52 01 00 00       	jmp    c0027ba2 <__adddf3+0x297>
c0027a50:	0f 84 d5 00 00 00    	je     c0027b2b <__adddf3+0x220>
c0027a56:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a59:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027a5c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a5f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a62:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027a69:	75 20                	jne    c0027a8b <__adddf3+0x180>
c0027a6b:	89 d6                	mov    esi,edx
c0027a6d:	09 c6                	or     esi,eax
c0027a6f:	0f 84 db 04 00 00    	je     c0027f50 <__adddf3+0x645>
c0027a75:	4b                   	dec    ebx
c0027a76:	75 29                	jne    c0027aa1 <__adddf3+0x196>
c0027a78:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a7e:	01 d1                	add    ecx,edx
c0027a80:	11 c6                	adc    esi,eax
c0027a82:	89 f0                	mov    eax,esi
c0027a84:	89 ca                	mov    edx,ecx
c0027a86:	e9 17 01 00 00       	jmp    c0027ba2 <__adddf3+0x297>
c0027a8b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a8e:	f7 d6                	not    esi
c0027a90:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a96:	0f 84 b4 04 00 00    	je     c0027f50 <__adddf3+0x645>
c0027a9c:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa1:	83 fb 1f             	cmp    ebx,0x1f
c0027aa4:	7e 48                	jle    c0027aee <__adddf3+0x1e3>
c0027aa6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aa9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027aac:	83 fb 3f             	cmp    ebx,0x3f
c0027aaf:	0f 8f 9b 04 00 00    	jg     c0027f50 <__adddf3+0x645>
c0027ab5:	83 e3 1f             	and    ebx,0x1f
c0027ab8:	89 d9                	mov    ecx,ebx
c0027aba:	89 c7                	mov    edi,eax
c0027abc:	d3 ef                	shr    edi,cl
c0027abe:	31 db                	xor    ebx,ebx
c0027ac0:	85 c9                	test   ecx,ecx
c0027ac2:	74 12                	je     c0027ad6 <__adddf3+0x1cb>
c0027ac4:	be 20 00 00 00       	mov    esi,0x20
c0027ac9:	29 ce                	sub    esi,ecx
c0027acb:	89 f1                	mov    ecx,esi
c0027acd:	d3 e0                	shl    eax,cl
c0027acf:	31 db                	xor    ebx,ebx
c0027ad1:	85 c0                	test   eax,eax
c0027ad3:	0f 95 c3             	setne  bl
c0027ad6:	31 c0                	xor    eax,eax
c0027ad8:	85 d2                	test   edx,edx
c0027ada:	0f 95 c0             	setne  al
c0027add:	09 c7                	or     edi,eax
c0027adf:	09 fb                	or     ebx,edi
c0027ae1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ae4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ae7:	01 da                	add    edx,ebx
c0027ae9:	83 d6 00             	adc    esi,0x0
c0027aec:	eb 39                	jmp    c0027b27 <__adddf3+0x21c>
c0027aee:	be 20 00 00 00       	mov    esi,0x20
c0027af3:	29 de                	sub    esi,ebx
c0027af5:	89 c7                	mov    edi,eax
c0027af7:	89 f1                	mov    ecx,esi
c0027af9:	d3 e7                	shl    edi,cl
c0027afb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027afe:	89 d7                	mov    edi,edx
c0027b00:	88 d9                	mov    cl,bl
c0027b02:	d3 ef                	shr    edi,cl
c0027b04:	89 f9                	mov    ecx,edi
c0027b06:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b09:	09 cf                	or     edi,ecx
c0027b0b:	88 d9                	mov    cl,bl
c0027b0d:	d3 e8                	shr    eax,cl
c0027b0f:	89 f1                	mov    ecx,esi
c0027b11:	d3 e2                	shl    edx,cl
c0027b13:	85 d2                	test   edx,edx
c0027b15:	0f 95 c2             	setne  dl
c0027b18:	0f b6 d2             	movzx  edx,dl
c0027b1b:	09 d7                	or     edi,edx
c0027b1d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b20:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b23:	01 fa                	add    edx,edi
c0027b25:	11 c6                	adc    esi,eax
c0027b27:	89 f0                	mov    eax,esi
c0027b29:	eb 77                	jmp    c0027ba2 <__adddf3+0x297>
c0027b2b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b2e:	46                   	inc    esi
c0027b2f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027b32:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b38:	75 41                	jne    c0027b7b <__adddf3+0x270>
c0027b3a:	89 d3                	mov    ebx,edx
c0027b3c:	09 c3                	or     ebx,eax
c0027b3e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027b45:	75 27                	jne    c0027b6e <__adddf3+0x263>
c0027b47:	85 db                	test   ebx,ebx
c0027b49:	0f 84 fb 03 00 00    	je     c0027f4a <__adddf3+0x63f>
c0027b4f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b52:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027b55:	0f 84 f5 03 00 00    	je     c0027f50 <__adddf3+0x645>
c0027b5b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b5e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b61:	85 c0                	test   eax,eax
c0027b63:	0f 89 91 03 00 00    	jns    c0027efa <__adddf3+0x5ef>
c0027b69:	e9 85 03 00 00       	jmp    c0027ef3 <__adddf3+0x5e8>
c0027b6e:	85 db                	test   ebx,ebx
c0027b70:	0f 85 da 03 00 00    	jne    c0027f50 <__adddf3+0x645>
c0027b76:	e9 cf 03 00 00       	jmp    c0027f4a <__adddf3+0x63f>
c0027b7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b81:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b84:	f7 d1                	not    ecx
c0027b86:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027b8c:	0f 84 70 03 00 00    	je     c0027f02 <__adddf3+0x5f7>
c0027b92:	d1 ea                	shr    edx,1
c0027b94:	89 c1                	mov    ecx,eax
c0027b96:	c1 e1 1f             	shl    ecx,0x1f
c0027b99:	09 ca                	or     edx,ecx
c0027b9b:	d1 e8                	shr    eax,1
c0027b9d:	e9 6f 03 00 00       	jmp    c0027f11 <__adddf3+0x606>
c0027ba2:	85 c0                	test   eax,eax
c0027ba4:	0f 89 67 03 00 00    	jns    c0027f11 <__adddf3+0x606>
c0027baa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027bad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bb0:	f7 d1                	not    ecx
c0027bb2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027bb8:	0f 84 44 03 00 00    	je     c0027f02 <__adddf3+0x5f7>
c0027bbe:	89 d1                	mov    ecx,edx
c0027bc0:	d1 e9                	shr    ecx,1
c0027bc2:	83 e2 01             	and    edx,0x1
c0027bc5:	09 ca                	or     edx,ecx
c0027bc7:	89 c1                	mov    ecx,eax
c0027bc9:	c1 e1 1f             	shl    ecx,0x1f
c0027bcc:	09 ca                	or     edx,ecx
c0027bce:	d1 e8                	shr    eax,1
c0027bd0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027bd5:	e9 37 03 00 00       	jmp    c0027f11 <__adddf3+0x606>
c0027bda:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027bdd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027be3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027be6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027be9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bef:	29 de                	sub    esi,ebx
c0027bf1:	85 f6                	test   esi,esi
c0027bf3:	0f 8e bd 00 00 00    	jle    c0027cb6 <__adddf3+0x3ab>
c0027bf9:	85 db                	test   ebx,ebx
c0027bfb:	75 17                	jne    c0027c14 <__adddf3+0x309>
c0027bfd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c00:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c03:	0f 84 47 03 00 00    	je     c0027f50 <__adddf3+0x645>
c0027c09:	4e                   	dec    esi
c0027c0a:	75 20                	jne    c0027c2c <__adddf3+0x321>
c0027c0c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c0f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c12:	eb 5b                	jmp    c0027c6f <__adddf3+0x364>
c0027c14:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c17:	f7 d3                	not    ebx
c0027c19:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c1f:	0f 84 2b 03 00 00    	je     c0027f50 <__adddf3+0x645>
c0027c25:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027c2c:	83 fe 1f             	cmp    esi,0x1f
c0027c2f:	7e 49                	jle    c0027c7a <__adddf3+0x36f>
c0027c31:	83 fe 3f             	cmp    esi,0x3f
c0027c34:	0f 8f 16 03 00 00    	jg     c0027f50 <__adddf3+0x645>
c0027c3a:	83 e6 1f             	and    esi,0x1f
c0027c3d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c40:	89 f1                	mov    ecx,esi
c0027c42:	d3 ef                	shr    edi,cl
c0027c44:	31 db                	xor    ebx,ebx
c0027c46:	85 f6                	test   esi,esi
c0027c48:	74 13                	je     c0027c5d <__adddf3+0x352>
c0027c4a:	b9 20 00 00 00       	mov    ecx,0x20
c0027c4f:	29 f1                	sub    ecx,esi
c0027c51:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c54:	d3 e6                	shl    esi,cl
c0027c56:	31 db                	xor    ebx,ebx
c0027c58:	85 f6                	test   esi,esi
c0027c5a:	0f 95 c3             	setne  bl
c0027c5d:	31 c9                	xor    ecx,ecx
c0027c5f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c63:	0f 95 c1             	setne  cl
c0027c66:	09 cf                	or     edi,ecx
c0027c68:	09 fb                	or     ebx,edi
c0027c6a:	29 da                	sub    edx,ebx
c0027c6c:	83 d8 00             	sbb    eax,0x0
c0027c6f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c72:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c75:	e9 aa 01 00 00       	jmp    c0027e24 <__adddf3+0x519>
c0027c7a:	bf 20 00 00 00       	mov    edi,0x20
c0027c7f:	29 f7                	sub    edi,esi
c0027c81:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c84:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c87:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c8a:	d3 e3                	shl    ebx,cl
c0027c8c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c8f:	89 f1                	mov    ecx,esi
c0027c91:	d3 ef                	shr    edi,cl
c0027c93:	09 fb                	or     ebx,edi
c0027c95:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c98:	89 f1                	mov    ecx,esi
c0027c9a:	d3 ef                	shr    edi,cl
c0027c9c:	89 fe                	mov    esi,edi
c0027c9e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ca1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ca4:	d3 e7                	shl    edi,cl
c0027ca6:	85 ff                	test   edi,edi
c0027ca8:	0f 95 c1             	setne  cl
c0027cab:	0f b6 c9             	movzx  ecx,cl
c0027cae:	09 cb                	or     ebx,ecx
c0027cb0:	29 da                	sub    edx,ebx
c0027cb2:	19 f0                	sbb    eax,esi
c0027cb4:	eb b9                	jmp    c0027c6f <__adddf3+0x364>
c0027cb6:	0f 84 cd 00 00 00    	je     c0027d89 <__adddf3+0x47e>
c0027cbc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027cbf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027cc2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027cc5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cc9:	75 1b                	jne    c0027ce6 <__adddf3+0x3db>
c0027ccb:	89 d6                	mov    esi,edx
c0027ccd:	09 c6                	or     esi,eax
c0027ccf:	0f 84 7b 02 00 00    	je     c0027f50 <__adddf3+0x645>
c0027cd5:	4b                   	dec    ebx
c0027cd6:	75 24                	jne    c0027cfc <__adddf3+0x3f1>
c0027cd8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cdb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cde:	29 d1                	sub    ecx,edx
c0027ce0:	19 c6                	sbb    esi,eax
c0027ce2:	89 ca                	mov    edx,ecx
c0027ce4:	eb 61                	jmp    c0027d47 <__adddf3+0x43c>
c0027ce6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ce9:	f7 d6                	not    esi
c0027ceb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027cf1:	0f 84 59 02 00 00    	je     c0027f50 <__adddf3+0x645>
c0027cf7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cfc:	83 fb 1f             	cmp    ebx,0x1f
c0027cff:	7e 4d                	jle    c0027d4e <__adddf3+0x443>
c0027d01:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d04:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d07:	83 fb 3f             	cmp    ebx,0x3f
c0027d0a:	0f 8f 40 02 00 00    	jg     c0027f50 <__adddf3+0x645>
c0027d10:	83 e3 1f             	and    ebx,0x1f
c0027d13:	89 d9                	mov    ecx,ebx
c0027d15:	89 c7                	mov    edi,eax
c0027d17:	d3 ef                	shr    edi,cl
c0027d19:	31 db                	xor    ebx,ebx
c0027d1b:	85 c9                	test   ecx,ecx
c0027d1d:	74 12                	je     c0027d31 <__adddf3+0x426>
c0027d1f:	be 20 00 00 00       	mov    esi,0x20
c0027d24:	29 ce                	sub    esi,ecx
c0027d26:	89 f1                	mov    ecx,esi
c0027d28:	d3 e0                	shl    eax,cl
c0027d2a:	31 db                	xor    ebx,ebx
c0027d2c:	85 c0                	test   eax,eax
c0027d2e:	0f 95 c3             	setne  bl
c0027d31:	31 c0                	xor    eax,eax
c0027d33:	85 d2                	test   edx,edx
c0027d35:	0f 95 c0             	setne  al
c0027d38:	09 c7                	or     edi,eax
c0027d3a:	09 fb                	or     ebx,edi
c0027d3c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d3f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d42:	29 da                	sub    edx,ebx
c0027d44:	83 de 00             	sbb    esi,0x0
c0027d47:	89 f0                	mov    eax,esi
c0027d49:	e9 d6 00 00 00       	jmp    c0027e24 <__adddf3+0x519>
c0027d4e:	be 20 00 00 00       	mov    esi,0x20
c0027d53:	29 de                	sub    esi,ebx
c0027d55:	89 c7                	mov    edi,eax
c0027d57:	89 f1                	mov    ecx,esi
c0027d59:	d3 e7                	shl    edi,cl
c0027d5b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027d5e:	89 d7                	mov    edi,edx
c0027d60:	88 d9                	mov    cl,bl
c0027d62:	d3 ef                	shr    edi,cl
c0027d64:	89 f9                	mov    ecx,edi
c0027d66:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d69:	09 cf                	or     edi,ecx
c0027d6b:	88 d9                	mov    cl,bl
c0027d6d:	d3 e8                	shr    eax,cl
c0027d6f:	89 f1                	mov    ecx,esi
c0027d71:	d3 e2                	shl    edx,cl
c0027d73:	85 d2                	test   edx,edx
c0027d75:	0f 95 c2             	setne  dl
c0027d78:	0f b6 d2             	movzx  edx,dl
c0027d7b:	09 d7                	or     edi,edx
c0027d7d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d80:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d83:	29 fa                	sub    edx,edi
c0027d85:	19 c6                	sbb    esi,eax
c0027d87:	eb be                	jmp    c0027d47 <__adddf3+0x43c>
c0027d89:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d8c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027d8f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027d95:	75 6a                	jne    c0027e01 <__adddf3+0x4f6>
c0027d97:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d9b:	75 58                	jne    c0027df5 <__adddf3+0x4ea>
c0027d9d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027da0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027da3:	89 d6                	mov    esi,edx
c0027da5:	09 c6                	or     esi,eax
c0027da7:	75 17                	jne    c0027dc0 <__adddf3+0x4b5>
c0027da9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027dac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027daf:	85 db                	test   ebx,ebx
c0027db1:	0f 85 99 01 00 00    	jne    c0027f50 <__adddf3+0x645>
c0027db7:	31 ff                	xor    edi,edi
c0027db9:	31 c9                	xor    ecx,ecx
c0027dbb:	e9 90 01 00 00       	jmp    c0027f50 <__adddf3+0x645>
c0027dc0:	85 db                	test   ebx,ebx
c0027dc2:	0f 84 88 01 00 00    	je     c0027f50 <__adddf3+0x645>
c0027dc8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027dcb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027dce:	85 c0                	test   eax,eax
c0027dd0:	79 10                	jns    c0027de2 <__adddf3+0x4d7>
c0027dd2:	31 c9                	xor    ecx,ecx
c0027dd4:	f7 da                	neg    edx
c0027dd6:	0f 95 c1             	setne  cl
c0027dd9:	01 c8                	add    eax,ecx
c0027ddb:	f7 d8                	neg    eax
c0027ddd:	e9 2f 01 00 00       	jmp    c0027f11 <__adddf3+0x606>
c0027de2:	31 ff                	xor    edi,edi
c0027de4:	31 c9                	xor    ecx,ecx
c0027de6:	89 c3                	mov    ebx,eax
c0027de8:	09 d3                	or     ebx,edx
c0027dea:	0f 84 60 01 00 00    	je     c0027f50 <__adddf3+0x645>
c0027df0:	e9 05 01 00 00       	jmp    c0027efa <__adddf3+0x5ef>
c0027df5:	31 ff                	xor    edi,edi
c0027df7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027dfc:	e9 4f 01 00 00       	jmp    c0027f50 <__adddf3+0x645>
c0027e01:	89 c1                	mov    ecx,eax
c0027e03:	89 d0                	mov    eax,edx
c0027e05:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027e08:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027e0b:	89 ca                	mov    edx,ecx
c0027e0d:	85 c9                	test   ecx,ecx
c0027e0f:	79 2c                	jns    c0027e3d <__adddf3+0x532>
c0027e11:	31 c9                	xor    ecx,ecx
c0027e13:	f7 d8                	neg    eax
c0027e15:	0f 95 c1             	setne  cl
c0027e18:	01 ca                	add    edx,ecx
c0027e1a:	f7 da                	neg    edx
c0027e1c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e1f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027e22:	eb 19                	jmp    c0027e3d <__adddf3+0x532>
c0027e24:	85 c0                	test   eax,eax
c0027e26:	0f 89 e5 00 00 00    	jns    c0027f11 <__adddf3+0x606>
c0027e2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e31:	89 c1                	mov    ecx,eax
c0027e33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e36:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e39:	89 d0                	mov    eax,edx
c0027e3b:	89 ca                	mov    edx,ecx
c0027e3d:	85 d2                	test   edx,edx
c0027e3f:	74 59                	je     c0027e9a <__adddf3+0x58f>
c0027e41:	0f bd da             	bsr    ebx,edx
c0027e44:	83 f3 1f             	xor    ebx,0x1f
c0027e47:	88 d9                	mov    cl,bl
c0027e49:	d3 e2                	shl    edx,cl
c0027e4b:	bf 20 00 00 00       	mov    edi,0x20
c0027e50:	89 f9                	mov    ecx,edi
c0027e52:	29 d9                	sub    ecx,ebx
c0027e54:	89 c6                	mov    esi,eax
c0027e56:	d3 ee                	shr    esi,cl
c0027e58:	09 d6                	or     esi,edx
c0027e5a:	88 d9                	mov    cl,bl
c0027e5c:	d3 e0                	shl    eax,cl
c0027e5e:	89 c2                	mov    edx,eax
c0027e60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e63:	25 ff 07 00 00       	and    eax,0x7ff
c0027e68:	39 d8                	cmp    eax,ebx
c0027e6a:	7f 22                	jg     c0027e8e <__adddf3+0x583>
c0027e6c:	29 c3                	sub    ebx,eax
c0027e6e:	43                   	inc    ebx
c0027e6f:	88 d9                	mov    cl,bl
c0027e71:	d3 ea                	shr    edx,cl
c0027e73:	29 df                	sub    edi,ebx
c0027e75:	89 f9                	mov    ecx,edi
c0027e77:	89 f0                	mov    eax,esi
c0027e79:	d3 e0                	shl    eax,cl
c0027e7b:	09 c2                	or     edx,eax
c0027e7d:	89 f0                	mov    eax,esi
c0027e7f:	88 d9                	mov    cl,bl
c0027e81:	d3 e8                	shr    eax,cl
c0027e83:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e86:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027e8c:	eb 6f                	jmp    c0027efd <__adddf3+0x5f2>
c0027e8e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e91:	29 d8                	sub    eax,ebx
c0027e93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e96:	89 f0                	mov    eax,esi
c0027e98:	eb 59                	jmp    c0027ef3 <__adddf3+0x5e8>
c0027e9a:	85 c0                	test   eax,eax
c0027e9c:	74 6a                	je     c0027f08 <__adddf3+0x5fd>
c0027e9e:	0f bd c8             	bsr    ecx,eax
c0027ea1:	83 f1 1f             	xor    ecx,0x1f
c0027ea4:	d3 e0                	shl    eax,cl
c0027ea6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ea9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027eaf:	83 c1 20             	add    ecx,0x20
c0027eb2:	39 cb                	cmp    ebx,ecx
c0027eb4:	7f 35                	jg     c0027eeb <__adddf3+0x5e0>
c0027eb6:	29 d9                	sub    ecx,ebx
c0027eb8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ebb:	83 fe 1f             	cmp    esi,0x1f
c0027ebe:	7e 09                	jle    c0027ec9 <__adddf3+0x5be>
c0027ec0:	83 e9 1f             	sub    ecx,0x1f
c0027ec3:	d3 e8                	shr    eax,cl
c0027ec5:	89 c3                	mov    ebx,eax
c0027ec7:	eb 11                	jmp    c0027eda <__adddf3+0x5cf>
c0027ec9:	b9 20 00 00 00       	mov    ecx,0x20
c0027ece:	29 f1                	sub    ecx,esi
c0027ed0:	89 c3                	mov    ebx,eax
c0027ed2:	d3 e3                	shl    ebx,cl
c0027ed4:	89 f1                	mov    ecx,esi
c0027ed6:	d3 e8                	shr    eax,cl
c0027ed8:	89 c2                	mov    edx,eax
c0027eda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027edd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ee2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ee5:	89 d0                	mov    eax,edx
c0027ee7:	89 da                	mov    edx,ebx
c0027ee9:	eb 26                	jmp    c0027f11 <__adddf3+0x606>
c0027eeb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027eee:	29 cf                	sub    edi,ecx
c0027ef0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ef3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ef8:	eb 17                	jmp    c0027f11 <__adddf3+0x606>
c0027efa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027efd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f00:	eb 0f                	jmp    c0027f11 <__adddf3+0x606>
c0027f02:	31 d2                	xor    edx,edx
c0027f04:	31 c0                	xor    eax,eax
c0027f06:	eb 09                	jmp    c0027f11 <__adddf3+0x606>
c0027f08:	89 c2                	mov    edx,eax
c0027f0a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027f11:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f14:	c1 e1 14             	shl    ecx,0x14
c0027f17:	89 c3                	mov    ebx,eax
c0027f19:	c1 eb 0b             	shr    ebx,0xb
c0027f1c:	09 d9                	or     ecx,ebx
c0027f1e:	89 d3                	mov    ebx,edx
c0027f20:	c1 eb 0b             	shr    ebx,0xb
c0027f23:	c1 e0 15             	shl    eax,0x15
c0027f26:	09 d8                	or     eax,ebx
c0027f28:	89 c7                	mov    edi,eax
c0027f2a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027f30:	0f 95 c0             	setne  al
c0027f33:	89 c6                	mov    esi,eax
c0027f35:	09 f3                	or     ebx,esi
c0027f37:	83 e3 01             	and    ebx,0x1
c0027f3a:	c1 ea 0a             	shr    edx,0xa
c0027f3d:	21 da                	and    edx,ebx
c0027f3f:	89 f8                	mov    eax,edi
c0027f41:	01 d0                	add    eax,edx
c0027f43:	83 d1 00             	adc    ecx,0x0
c0027f46:	89 c7                	mov    edi,eax
c0027f48:	eb 06                	jmp    c0027f50 <__adddf3+0x645>
c0027f4a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f4d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f50:	89 f8                	mov    eax,edi
c0027f52:	89 ca                	mov    edx,ecx
c0027f54:	83 c4 24             	add    esp,0x24
c0027f57:	5b                   	pop    ebx
c0027f58:	5e                   	pop    esi
c0027f59:	5f                   	pop    edi
c0027f5a:	5d                   	pop    ebp
c0027f5b:	c3                   	ret    

c0027f5c <__subdf3>:
c0027f5c:	55                   	push   ebp
c0027f5d:	89 e5                	mov    ebp,esp
c0027f5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f65:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f6b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027f6e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027f71:	5d                   	pop    ebp
c0027f72:	e9 94 f9 ff ff       	jmp    c002790b <__adddf3>

c0027f77 <__negdf2>:
c0027f77:	55                   	push   ebp
c0027f78:	89 e5                	mov    ebp,esp
c0027f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f7d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f80:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f86:	5d                   	pop    ebp
c0027f87:	c3                   	ret    

c0027f88 <__muldf3>:
c0027f88:	55                   	push   ebp
c0027f89:	89 e5                	mov    ebp,esp
c0027f8b:	57                   	push   edi
c0027f8c:	56                   	push   esi
c0027f8d:	53                   	push   ebx
c0027f8e:	83 ec 24             	sub    esp,0x24
c0027f91:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027f97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f9d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027fa0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027fa3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa6:	89 c8                	mov    eax,ecx
c0027fa8:	c1 f8 14             	sar    eax,0x14
c0027fab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fae:	89 f8                	mov    eax,edi
c0027fb0:	89 fb                	mov    ebx,edi
c0027fb2:	c1 e3 0b             	shl    ebx,0xb
c0027fb5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027fb8:	c1 e1 0b             	shl    ecx,0xb
c0027fbb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fc1:	c1 e8 15             	shr    eax,0x15
c0027fc4:	09 c1                	or     ecx,eax
c0027fc6:	89 d6                	mov    esi,edx
c0027fc8:	89 d0                	mov    eax,edx
c0027fca:	c1 f8 14             	sar    eax,0x14
c0027fcd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027fd0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027fd3:	89 c3                	mov    ebx,eax
c0027fd5:	c1 e3 0b             	shl    ebx,0xb
c0027fd8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027fdb:	c1 e6 0b             	shl    esi,0xb
c0027fde:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fe4:	c1 e8 15             	shr    eax,0x15
c0027fe7:	09 c6                	or     esi,eax
c0027fe9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fec:	25 ff 07 00 00       	and    eax,0x7ff
c0027ff1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ff4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ff7:	25 ff 07 00 00       	and    eax,0x7ff
c0027ffc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027fff:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028002:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028005:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002800c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800f:	40                   	inc    eax
c0028010:	a9 fe 07 00 00       	test   eax,0x7fe
c0028015:	0f 85 8d 00 00 00    	jne    c00280a8 <__muldf3+0x120>
c002801b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002801e:	09 c8                	or     eax,ecx
c0028020:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028024:	74 44                	je     c002806a <__muldf3+0xe2>
c0028026:	85 c0                	test   eax,eax
c0028028:	0f 85 31 02 00 00    	jne    c002825f <__muldf3+0x2d7>
c002802e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028031:	40                   	inc    eax
c0028032:	a9 fe 07 00 00       	test   eax,0x7fe
c0028037:	75 13                	jne    c002804c <__muldf3+0xc4>
c0028039:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002803c:	09 f1                	or     ecx,esi
c002803e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028042:	74 22                	je     c0028066 <__muldf3+0xde>
c0028044:	85 c9                	test   ecx,ecx
c0028046:	0f 85 0d 02 00 00    	jne    c0028259 <__muldf3+0x2d1>
c002804c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028050:	0f 89 09 02 00 00    	jns    c002825f <__muldf3+0x2d7>
c0028056:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028059:	05 00 00 00 80       	add    eax,0x80000000
c002805e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028061:	e9 f9 01 00 00       	jmp    c002825f <__muldf3+0x2d7>
c0028066:	85 c9                	test   ecx,ecx
c0028068:	eb 2e                	jmp    c0028098 <__muldf3+0x110>
c002806a:	85 c0                	test   eax,eax
c002806c:	74 20                	je     c002808e <__muldf3+0x106>
c002806e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028071:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028074:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028077:	c1 ef 1f             	shr    edi,0x1f
c002807a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002807d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028080:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028083:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028086:	09 f9                	or     ecx,edi
c0028088:	78 1e                	js     c00280a8 <__muldf3+0x120>
c002808a:	89 c3                	mov    ebx,eax
c002808c:	eb e0                	jmp    c002806e <__muldf3+0xe6>
c002808e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028091:	f7 d0                	not    eax
c0028093:	a9 ff 07 00 00       	test   eax,0x7ff
c0028098:	75 b2                	jne    c002804c <__muldf3+0xc4>
c002809a:	31 ff                	xor    edi,edi
c002809c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00280a3:	e9 b7 01 00 00       	jmp    c002825f <__muldf3+0x2d7>
c00280a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280ab:	40                   	inc    eax
c00280ac:	a9 fe 07 00 00       	test   eax,0x7fe
c00280b1:	75 57                	jne    c002810a <__muldf3+0x182>
c00280b3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00280b6:	09 f0                	or     eax,esi
c00280b8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280bc:	74 23                	je     c00280e1 <__muldf3+0x159>
c00280be:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00280c2:	0f 89 91 01 00 00    	jns    c0028259 <__muldf3+0x2d1>
c00280c8:	85 c0                	test   eax,eax
c00280ca:	0f 85 89 01 00 00    	jne    c0028259 <__muldf3+0x2d1>
c00280d0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00280d3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00280d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280dc:	e9 7e 01 00 00       	jmp    c002825f <__muldf3+0x2d7>
c00280e1:	85 c0                	test   eax,eax
c00280e3:	75 0c                	jne    c00280f1 <__muldf3+0x169>
c00280e5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00280e9:	0f 89 6a 01 00 00    	jns    c0028259 <__muldf3+0x2d1>
c00280ef:	eb df                	jmp    c00280d0 <__muldf3+0x148>
c00280f1:	01 f6                	add    esi,esi
c00280f3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00280f6:	c1 ea 1f             	shr    edx,0x1f
c00280f9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280fc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00280ff:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028102:	09 d6                	or     esi,edx
c0028104:	78 04                	js     c002810a <__muldf3+0x182>
c0028106:	89 c3                	mov    ebx,eax
c0028108:	eb e7                	jmp    c00280f1 <__muldf3+0x169>
c002810a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028110:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028116:	89 c8                	mov    eax,ecx
c0028118:	f7 e6                	mul    esi
c002811a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002811d:	89 c7                	mov    edi,eax
c002811f:	89 c8                	mov    eax,ecx
c0028121:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028124:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028127:	89 c1                	mov    ecx,eax
c0028129:	89 f0                	mov    eax,esi
c002812b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002812e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028131:	89 c6                	mov    esi,eax
c0028133:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028136:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028139:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002813c:	31 c0                	xor    eax,eax
c002813e:	01 f1                	add    ecx,esi
c0028140:	0f 92 c0             	setb   al
c0028143:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028146:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028149:	83 d6 00             	adc    esi,0x0
c002814c:	01 c7                	add    edi,eax
c002814e:	83 d6 00             	adc    esi,0x0
c0028151:	01 ca                	add    edx,ecx
c0028153:	0f 92 c1             	setb   cl
c0028156:	0f b6 c9             	movzx  ecx,cl
c0028159:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002815c:	83 d6 00             	adc    esi,0x0
c002815f:	01 cf                	add    edi,ecx
c0028161:	83 d6 00             	adc    esi,0x0
c0028164:	31 c9                	xor    ecx,ecx
c0028166:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028169:	0f 95 c1             	setne  cl
c002816c:	09 cf                	or     edi,ecx
c002816e:	85 f6                	test   esi,esi
c0028170:	78 0c                	js     c002817e <__muldf3+0x1f6>
c0028172:	01 f6                	add    esi,esi
c0028174:	89 f8                	mov    eax,edi
c0028176:	c1 e8 1f             	shr    eax,0x1f
c0028179:	09 c6                	or     esi,eax
c002817b:	01 ff                	add    edi,edi
c002817d:	4b                   	dec    ebx
c002817e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028184:	0f 8f 85 00 00 00    	jg     c002820f <__muldf3+0x287>
c002818a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028190:	85 db                	test   ebx,ebx
c0028192:	0f 8f 84 00 00 00    	jg     c002821c <__muldf3+0x294>
c0028198:	83 fb cc             	cmp    ebx,0xffffffcc
c002819b:	7c 79                	jl     c0028216 <__muldf3+0x28e>
c002819d:	ba 01 00 00 00       	mov    edx,0x1
c00281a2:	29 da                	sub    edx,ebx
c00281a4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281aa:	83 fa 1f             	cmp    edx,0x1f
c00281ad:	7e 30                	jle    c00281df <__muldf3+0x257>
c00281af:	83 fa 20             	cmp    edx,0x20
c00281b2:	75 0b                	jne    c00281bf <__muldf3+0x237>
c00281b4:	31 c0                	xor    eax,eax
c00281b6:	85 ff                	test   edi,edi
c00281b8:	0f 95 c0             	setne  al
c00281bb:	89 c7                	mov    edi,eax
c00281bd:	eb 1a                	jmp    c00281d9 <__muldf3+0x251>
c00281bf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00281c2:	89 f0                	mov    eax,esi
c00281c4:	d3 e0                	shl    eax,cl
c00281c6:	09 f8                	or     eax,edi
c00281c8:	0f 95 c0             	setne  al
c00281cb:	0f b6 c0             	movzx  eax,al
c00281ce:	89 c7                	mov    edi,eax
c00281d0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281d5:	29 d9                	sub    ecx,ebx
c00281d7:	d3 ee                	shr    esi,cl
c00281d9:	09 f7                	or     edi,esi
c00281db:	31 db                	xor    ebx,ebx
c00281dd:	eb 3b                	jmp    c002821a <__muldf3+0x292>
c00281df:	83 c3 1f             	add    ebx,0x1f
c00281e2:	89 f0                	mov    eax,esi
c00281e4:	88 d9                	mov    cl,bl
c00281e6:	d3 e0                	shl    eax,cl
c00281e8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00281eb:	89 f8                	mov    eax,edi
c00281ed:	88 d1                	mov    cl,dl
c00281ef:	d3 e8                	shr    eax,cl
c00281f1:	89 c1                	mov    ecx,eax
c00281f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00281f6:	09 c8                	or     eax,ecx
c00281f8:	88 d9                	mov    cl,bl
c00281fa:	d3 e7                	shl    edi,cl
c00281fc:	31 db                	xor    ebx,ebx
c00281fe:	85 ff                	test   edi,edi
c0028200:	0f 95 c3             	setne  bl
c0028203:	89 df                	mov    edi,ebx
c0028205:	09 c7                	or     edi,eax
c0028207:	88 d1                	mov    cl,dl
c0028209:	d3 ee                	shr    esi,cl
c002820b:	31 db                	xor    ebx,ebx
c002820d:	eb 0d                	jmp    c002821c <__muldf3+0x294>
c002820f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028214:	eb 02                	jmp    c0028218 <__muldf3+0x290>
c0028216:	31 db                	xor    ebx,ebx
c0028218:	31 ff                	xor    edi,edi
c002821a:	31 f6                	xor    esi,esi
c002821c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002821f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028222:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028227:	09 c3                	or     ebx,eax
c0028229:	c1 e3 14             	shl    ebx,0x14
c002822c:	89 f0                	mov    eax,esi
c002822e:	c1 e8 0b             	shr    eax,0xb
c0028231:	09 c3                	or     ebx,eax
c0028233:	89 f8                	mov    eax,edi
c0028235:	c1 e8 0b             	shr    eax,0xb
c0028238:	c1 e6 15             	shl    esi,0x15
c002823b:	09 c6                	or     esi,eax
c002823d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028243:	0f 95 c1             	setne  cl
c0028246:	09 c8                	or     eax,ecx
c0028248:	83 e0 01             	and    eax,0x1
c002824b:	c1 ef 0a             	shr    edi,0xa
c002824e:	21 c7                	and    edi,eax
c0028250:	01 f7                	add    edi,esi
c0028252:	83 d3 00             	adc    ebx,0x0
c0028255:	89 da                	mov    edx,ebx
c0028257:	eb 03                	jmp    c002825c <__muldf3+0x2d4>
c0028259:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002825c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002825f:	89 f8                	mov    eax,edi
c0028261:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028264:	83 c4 24             	add    esp,0x24
c0028267:	5b                   	pop    ebx
c0028268:	5e                   	pop    esi
c0028269:	5f                   	pop    edi
c002826a:	5d                   	pop    ebp
c002826b:	c3                   	ret    

c002826c <__divdf3>:
c002826c:	55                   	push   ebp
c002826d:	89 e5                	mov    ebp,esp
c002826f:	57                   	push   edi
c0028270:	56                   	push   esi
c0028271:	53                   	push   ebx
c0028272:	83 ec 2c             	sub    esp,0x2c
c0028275:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028278:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002827b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002827e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028281:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028284:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028287:	89 ce                	mov    esi,ecx
c0028289:	89 c8                	mov    eax,ecx
c002828b:	c1 f8 14             	sar    eax,0x14
c002828e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028291:	89 f8                	mov    eax,edi
c0028293:	89 fb                	mov    ebx,edi
c0028295:	c1 e3 0b             	shl    ebx,0xb
c0028298:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002829b:	c1 e6 0b             	shl    esi,0xb
c002829e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00282a4:	c1 e8 15             	shr    eax,0x15
c00282a7:	09 c6                	or     esi,eax
c00282a9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00282ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00282af:	89 c2                	mov    edx,eax
c00282b1:	c1 fa 14             	sar    edx,0x14
c00282b4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00282b7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00282ba:	89 de                	mov    esi,ebx
c00282bc:	c1 e6 0b             	shl    esi,0xb
c00282bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00282c2:	c1 e0 0b             	shl    eax,0xb
c00282c5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ca:	c1 eb 15             	shr    ebx,0x15
c00282cd:	09 d8                	or     eax,ebx
c00282cf:	89 c2                	mov    edx,eax
c00282d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282d4:	25 ff 07 00 00       	and    eax,0x7ff
c00282d9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00282dc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282df:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282e5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00282e8:	29 d8                	sub    eax,ebx
c00282ea:	05 ff 03 00 00       	add    eax,0x3ff
c00282ef:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00282f2:	46                   	inc    esi
c00282f3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00282f9:	0f 85 a5 00 00 00    	jne    c00283a4 <__divdf3+0x138>
c00282ff:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028302:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028305:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028309:	74 2a                	je     c0028335 <__divdf3+0xc9>
c002830b:	85 f6                	test   esi,esi
c002830d:	0f 85 cc 02 00 00    	jne    c00285df <__divdf3+0x373>
c0028313:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028316:	40                   	inc    eax
c0028317:	a9 fe 07 00 00       	test   eax,0x7fe
c002831c:	75 26                	jne    c0028344 <__divdf3+0xd8>
c002831e:	85 db                	test   ebx,ebx
c0028320:	74 22                	je     c0028344 <__divdf3+0xd8>
c0028322:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028325:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028328:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002832b:	09 d0                	or     eax,edx
c002832d:	0f 85 ac 02 00 00    	jne    c00285df <__divdf3+0x373>
c0028333:	eb 63                	jmp    c0028398 <__divdf3+0x12c>
c0028335:	85 f6                	test   esi,esi
c0028337:	75 22                	jne    c002835b <__divdf3+0xef>
c0028339:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002833c:	40                   	inc    eax
c002833d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028342:	74 36                	je     c002837a <__divdf3+0x10e>
c0028344:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028348:	0f 89 91 02 00 00    	jns    c00285df <__divdf3+0x373>
c002834e:	89 f8                	mov    eax,edi
c0028350:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028356:	e9 80 02 00 00       	jmp    c00285db <__divdf3+0x36f>
c002835b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002835e:	01 f6                	add    esi,esi
c0028360:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028363:	c1 ef 1f             	shr    edi,0x1f
c0028366:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028369:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002836c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002836f:	09 f7                	or     edi,esi
c0028371:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028374:	78 2e                	js     c00283a4 <__divdf3+0x138>
c0028376:	89 c8                	mov    eax,ecx
c0028378:	eb e1                	jmp    c002835b <__divdf3+0xef>
c002837a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002837d:	09 d0                	or     eax,edx
c002837f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028383:	74 0f                	je     c0028394 <__divdf3+0x128>
c0028385:	85 c0                	test   eax,eax
c0028387:	74 bb                	je     c0028344 <__divdf3+0xd8>
c0028389:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002838c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002838f:	e9 4b 02 00 00       	jmp    c00285df <__divdf3+0x373>
c0028394:	85 c0                	test   eax,eax
c0028396:	75 ac                	jne    c0028344 <__divdf3+0xd8>
c0028398:	31 ff                	xor    edi,edi
c002839a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002839f:	e9 3b 02 00 00       	jmp    c00285df <__divdf3+0x373>
c00283a4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283a7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00283aa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00283b0:	75 6b                	jne    c002841d <__divdf3+0x1b1>
c00283b2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283b5:	09 d6                	or     esi,edx
c00283b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00283bb:	74 28                	je     c00283e5 <__divdf3+0x179>
c00283bd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00283c0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00283c3:	85 f6                	test   esi,esi
c00283c5:	0f 85 14 02 00 00    	jne    c00285df <__divdf3+0x373>
c00283cb:	31 ff                	xor    edi,edi
c00283cd:	31 c9                	xor    ecx,ecx
c00283cf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00283d2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00283d5:	0f 89 04 02 00 00    	jns    c00285df <__divdf3+0x373>
c00283db:	b9 00 00 00 80       	mov    ecx,0x80000000
c00283e0:	e9 fa 01 00 00       	jmp    c00285df <__divdf3+0x373>
c00283e5:	85 f6                	test   esi,esi
c00283e7:	75 1b                	jne    c0028404 <__divdf3+0x198>
c00283e9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00283ec:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00283ef:	25 00 00 00 80       	and    eax,0x80000000
c00283f4:	31 c9                	xor    ecx,ecx
c00283f6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00283fb:	89 cf                	mov    edi,ecx
c00283fd:	89 c1                	mov    ecx,eax
c00283ff:	e9 db 01 00 00       	jmp    c00285df <__divdf3+0x373>
c0028404:	01 d2                	add    edx,edx
c0028406:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028409:	c1 eb 1f             	shr    ebx,0x1f
c002840c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002840f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028412:	8d 48 01             	lea    ecx,[eax+0x1]
c0028415:	09 da                	or     edx,ebx
c0028417:	78 04                	js     c002841d <__divdf3+0x1b1>
c0028419:	89 c8                	mov    eax,ecx
c002841b:	eb e7                	jmp    c0028404 <__divdf3+0x198>
c002841d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028420:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028426:	81 ca 00 00 00 80    	or     edx,0x80000000
c002842c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002842f:	39 d6                	cmp    esi,edx
c0028431:	77 0d                	ja     c0028440 <__divdf3+0x1d4>
c0028433:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028436:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028439:	72 1b                	jb     c0028456 <__divdf3+0x1ea>
c002843b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002843e:	75 16                	jne    c0028456 <__divdf3+0x1ea>
c0028440:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028443:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028446:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028449:	83 de 00             	sbb    esi,0x0
c002844c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002844f:	ba 01 00 00 00       	mov    edx,0x1
c0028454:	eb 02                	jmp    c0028458 <__divdf3+0x1ec>
c0028456:	31 d2                	xor    edx,edx
c0028458:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002845f:	31 ff                	xor    edi,edi
c0028461:	01 ff                	add    edi,edi
c0028463:	89 d1                	mov    ecx,edx
c0028465:	c1 e9 1f             	shr    ecx,0x1f
c0028468:	09 cf                	or     edi,ecx
c002846a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002846d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028470:	89 da                	mov    edx,ebx
c0028472:	89 f3                	mov    ebx,esi
c0028474:	8d 34 36             	lea    esi,[esi+esi*1]
c0028477:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002847a:	c1 e9 1f             	shr    ecx,0x1f
c002847d:	09 ce                	or     esi,ecx
c002847f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028482:	01 c9                	add    ecx,ecx
c0028484:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028487:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002848a:	85 db                	test   ebx,ebx
c002848c:	78 29                	js     c00284b7 <__divdf3+0x24b>
c002848e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028491:	72 07                	jb     c002849a <__divdf3+0x22e>
c0028493:	75 3c                	jne    c00284d1 <__divdf3+0x265>
c0028495:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028498:	77 37                	ja     c00284d1 <__divdf3+0x265>
c002849a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002849d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00284a0:	31 d2                	xor    edx,edx
c00284a2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00284a5:	0f 97 c2             	seta   dl
c00284a8:	29 d6                	sub    esi,edx
c00284aa:	89 d9                	mov    ecx,ebx
c00284ac:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00284af:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00284b2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00284b5:	eb 17                	jmp    c00284ce <__divdf3+0x262>
c00284b7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284ba:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284c0:	0f 97 c1             	seta   cl
c00284c3:	0f b6 c9             	movzx  ecx,cl
c00284c6:	29 ce                	sub    esi,ecx
c00284c8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00284cb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00284ce:	83 ca 01             	or     edx,0x1
c00284d1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00284d4:	75 8b                	jne    c0028461 <__divdf3+0x1f5>
c00284d6:	c1 e7 09             	shl    edi,0x9
c00284d9:	89 d1                	mov    ecx,edx
c00284db:	c1 e9 17             	shr    ecx,0x17
c00284de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284e1:	09 f3                	or     ebx,esi
c00284e3:	0f 95 c3             	setne  bl
c00284e6:	0f b6 db             	movzx  ebx,bl
c00284e9:	c1 e2 09             	shl    edx,0x9
c00284ec:	09 d3                	or     ebx,edx
c00284ee:	89 ca                	mov    edx,ecx
c00284f0:	09 fa                	or     edx,edi
c00284f2:	78 0c                	js     c0028500 <__divdf3+0x294>
c00284f4:	01 d2                	add    edx,edx
c00284f6:	89 d9                	mov    ecx,ebx
c00284f8:	c1 e9 1f             	shr    ecx,0x1f
c00284fb:	09 ca                	or     edx,ecx
c00284fd:	01 db                	add    ebx,ebx
c00284ff:	48                   	dec    eax
c0028500:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028505:	0f 8f 83 00 00 00    	jg     c002858e <__divdf3+0x322>
c002850b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028511:	85 c0                	test   eax,eax
c0028513:	0f 8f 82 00 00 00    	jg     c002859b <__divdf3+0x32f>
c0028519:	83 f8 cc             	cmp    eax,0xffffffcc
c002851c:	7c 77                	jl     c0028595 <__divdf3+0x329>
c002851e:	be 01 00 00 00       	mov    esi,0x1
c0028523:	29 c6                	sub    esi,eax
c0028525:	81 ca 00 00 00 80    	or     edx,0x80000000
c002852b:	83 fe 1f             	cmp    esi,0x1f
c002852e:	7e 2f                	jle    c002855f <__divdf3+0x2f3>
c0028530:	83 fe 20             	cmp    esi,0x20
c0028533:	75 0a                	jne    c002853f <__divdf3+0x2d3>
c0028535:	85 db                	test   ebx,ebx
c0028537:	0f 95 c3             	setne  bl
c002853a:	0f b6 db             	movzx  ebx,bl
c002853d:	eb 1a                	jmp    c0028559 <__divdf3+0x2ed>
c002853f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028542:	89 d7                	mov    edi,edx
c0028544:	d3 e7                	shl    edi,cl
c0028546:	89 f9                	mov    ecx,edi
c0028548:	09 d9                	or     ecx,ebx
c002854a:	0f 95 c3             	setne  bl
c002854d:	0f b6 db             	movzx  ebx,bl
c0028550:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028555:	29 c1                	sub    ecx,eax
c0028557:	d3 ea                	shr    edx,cl
c0028559:	09 d3                	or     ebx,edx
c002855b:	31 c0                	xor    eax,eax
c002855d:	eb 3a                	jmp    c0028599 <__divdf3+0x32d>
c002855f:	83 c0 1f             	add    eax,0x1f
c0028562:	89 d7                	mov    edi,edx
c0028564:	88 c1                	mov    cl,al
c0028566:	d3 e7                	shl    edi,cl
c0028568:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002856b:	89 df                	mov    edi,ebx
c002856d:	89 f1                	mov    ecx,esi
c002856f:	d3 ef                	shr    edi,cl
c0028571:	89 f9                	mov    ecx,edi
c0028573:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028576:	09 cf                	or     edi,ecx
c0028578:	88 c1                	mov    cl,al
c002857a:	d3 e3                	shl    ebx,cl
c002857c:	85 db                	test   ebx,ebx
c002857e:	0f 95 c3             	setne  bl
c0028581:	0f b6 db             	movzx  ebx,bl
c0028584:	09 fb                	or     ebx,edi
c0028586:	89 f1                	mov    ecx,esi
c0028588:	d3 ea                	shr    edx,cl
c002858a:	31 c0                	xor    eax,eax
c002858c:	eb 0d                	jmp    c002859b <__divdf3+0x32f>
c002858e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028593:	eb 02                	jmp    c0028597 <__divdf3+0x32b>
c0028595:	31 c0                	xor    eax,eax
c0028597:	31 db                	xor    ebx,ebx
c0028599:	31 d2                	xor    edx,edx
c002859b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002859e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00285a1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00285a7:	09 c8                	or     eax,ecx
c00285a9:	c1 e0 14             	shl    eax,0x14
c00285ac:	89 d1                	mov    ecx,edx
c00285ae:	c1 e9 0b             	shr    ecx,0xb
c00285b1:	09 c8                	or     eax,ecx
c00285b3:	89 c6                	mov    esi,eax
c00285b5:	89 d9                	mov    ecx,ebx
c00285b7:	c1 e9 0b             	shr    ecx,0xb
c00285ba:	c1 e2 15             	shl    edx,0x15
c00285bd:	09 ca                	or     edx,ecx
c00285bf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00285c5:	0f 95 c0             	setne  al
c00285c8:	09 c1                	or     ecx,eax
c00285ca:	83 e1 01             	and    ecx,0x1
c00285cd:	c1 eb 0a             	shr    ebx,0xa
c00285d0:	21 cb                	and    ebx,ecx
c00285d2:	01 d3                	add    ebx,edx
c00285d4:	89 d8                	mov    eax,ebx
c00285d6:	83 d6 00             	adc    esi,0x0
c00285d9:	89 f2                	mov    edx,esi
c00285db:	89 c7                	mov    edi,eax
c00285dd:	89 d1                	mov    ecx,edx
c00285df:	89 f8                	mov    eax,edi
c00285e1:	89 ca                	mov    edx,ecx
c00285e3:	83 c4 2c             	add    esp,0x2c
c00285e6:	5b                   	pop    ebx
c00285e7:	5e                   	pop    esi
c00285e8:	5f                   	pop    edi
c00285e9:	5d                   	pop    ebp
c00285ea:	c3                   	ret    

c00285eb <__floatsidf>:
c00285eb:	55                   	push   ebp
c00285ec:	89 e5                	mov    ebp,esp
c00285ee:	56                   	push   esi
c00285ef:	53                   	push   ebx
c00285f0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285f3:	85 db                	test   ebx,ebx
c00285f5:	7e 15                	jle    c002860c <__floatsidf+0x21>
c00285f7:	0f bd cb             	bsr    ecx,ebx
c00285fa:	83 f1 1f             	xor    ecx,0x1f
c00285fd:	d3 e3                	shl    ebx,cl
c00285ff:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028605:	b8 1e 04 00 00       	mov    eax,0x41e
c002860a:	eb 21                	jmp    c002862d <__floatsidf+0x42>
c002860c:	b8 00 00 00 00       	mov    eax,0x0
c0028611:	ba 00 00 00 00       	mov    edx,0x0
c0028616:	74 2a                	je     c0028642 <__floatsidf+0x57>
c0028618:	f7 db                	neg    ebx
c002861a:	0f bd cb             	bsr    ecx,ebx
c002861d:	83 f1 1f             	xor    ecx,0x1f
c0028620:	d3 e3                	shl    ebx,cl
c0028622:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028628:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002862d:	29 c8                	sub    eax,ecx
c002862f:	c1 e0 14             	shl    eax,0x14
c0028632:	89 c1                	mov    ecx,eax
c0028634:	89 de                	mov    esi,ebx
c0028636:	c1 ee 0b             	shr    esi,0xb
c0028639:	09 f1                	or     ecx,esi
c002863b:	89 ca                	mov    edx,ecx
c002863d:	c1 e3 15             	shl    ebx,0x15
c0028640:	89 d8                	mov    eax,ebx
c0028642:	5b                   	pop    ebx
c0028643:	5e                   	pop    esi
c0028644:	5d                   	pop    ebp
c0028645:	c3                   	ret    

c0028646 <__floatunsidf>:
c0028646:	55                   	push   ebp
c0028647:	89 e5                	mov    ebp,esp
c0028649:	56                   	push   esi
c002864a:	53                   	push   ebx
c002864b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002864e:	85 db                	test   ebx,ebx
c0028650:	74 2a                	je     c002867c <__floatunsidf+0x36>
c0028652:	0f bd cb             	bsr    ecx,ebx
c0028655:	83 f1 1f             	xor    ecx,0x1f
c0028658:	d3 e3                	shl    ebx,cl
c002865a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028660:	b8 1e 04 00 00       	mov    eax,0x41e
c0028665:	29 c8                	sub    eax,ecx
c0028667:	c1 e0 14             	shl    eax,0x14
c002866a:	89 c1                	mov    ecx,eax
c002866c:	89 de                	mov    esi,ebx
c002866e:	c1 ee 0b             	shr    esi,0xb
c0028671:	09 f1                	or     ecx,esi
c0028673:	89 ca                	mov    edx,ecx
c0028675:	c1 e3 15             	shl    ebx,0x15
c0028678:	89 d8                	mov    eax,ebx
c002867a:	eb 04                	jmp    c0028680 <__floatunsidf+0x3a>
c002867c:	31 c0                	xor    eax,eax
c002867e:	31 d2                	xor    edx,edx
c0028680:	5b                   	pop    ebx
c0028681:	5e                   	pop    esi
c0028682:	5d                   	pop    ebp
c0028683:	c3                   	ret    

c0028684 <__fixdfsi>:
c0028684:	55                   	push   ebp
c0028685:	89 e5                	mov    ebp,esp
c0028687:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002868a:	89 d1                	mov    ecx,edx
c002868c:	c1 e1 0b             	shl    ecx,0xb
c002868f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028698:	c1 e8 15             	shr    eax,0x15
c002869b:	09 c1                	or     ecx,eax
c002869d:	c1 fa 14             	sar    edx,0x14
c00286a0:	78 1f                	js     c00286c1 <__fixdfsi+0x3d>
c00286a2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00286a8:	31 c0                	xor    eax,eax
c00286aa:	83 fa 1e             	cmp    edx,0x1e
c00286ad:	77 40                	ja     c00286ef <__fixdfsi+0x6b>
c00286af:	89 c8                	mov    eax,ecx
c00286b1:	0d 00 00 00 80       	or     eax,0x80000000
c00286b6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00286bb:	29 d1                	sub    ecx,edx
c00286bd:	d3 e8                	shr    eax,cl
c00286bf:	eb 2e                	jmp    c00286ef <__fixdfsi+0x6b>
c00286c1:	31 c0                	xor    eax,eax
c00286c3:	81 c2 01 04 00 00    	add    edx,0x401
c00286c9:	78 24                	js     c00286ef <__fixdfsi+0x6b>
c00286cb:	83 fa 1e             	cmp    edx,0x1e
c00286ce:	7e 09                	jle    c00286d9 <__fixdfsi+0x55>
c00286d0:	83 fa 1f             	cmp    edx,0x1f
c00286d3:	75 18                	jne    c00286ed <__fixdfsi+0x69>
c00286d5:	85 c9                	test   ecx,ecx
c00286d7:	75 14                	jne    c00286ed <__fixdfsi+0x69>
c00286d9:	89 c8                	mov    eax,ecx
c00286db:	0d 00 00 00 80       	or     eax,0x80000000
c00286e0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00286e5:	29 d1                	sub    ecx,edx
c00286e7:	d3 e8                	shr    eax,cl
c00286e9:	f7 d8                	neg    eax
c00286eb:	eb 02                	jmp    c00286ef <__fixdfsi+0x6b>
c00286ed:	31 c0                	xor    eax,eax
c00286ef:	5d                   	pop    ebp
c00286f0:	c3                   	ret    

c00286f1 <__fixunsdfsi>:
c00286f1:	55                   	push   ebp
c00286f2:	89 e5                	mov    ebp,esp
c00286f4:	53                   	push   ebx
c00286f5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00286f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00286fb:	89 d3                	mov    ebx,edx
c00286fd:	c1 fb 14             	sar    ebx,0x14
c0028700:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028706:	31 c0                	xor    eax,eax
c0028708:	83 fb 1f             	cmp    ebx,0x1f
c002870b:	77 1d                	ja     c002872a <__fixunsdfsi+0x39>
c002870d:	89 d0                	mov    eax,edx
c002870f:	c1 e0 0b             	shl    eax,0xb
c0028712:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028717:	c1 e9 15             	shr    ecx,0x15
c002871a:	09 c8                	or     eax,ecx
c002871c:	0d 00 00 00 80       	or     eax,0x80000000
c0028721:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028726:	29 d9                	sub    ecx,ebx
c0028728:	d3 e8                	shr    eax,cl
c002872a:	5b                   	pop    ebx
c002872b:	5d                   	pop    ebp
c002872c:	c3                   	ret    

c002872d <__cmpdf2>:
c002872d:	55                   	push   ebp
c002872e:	89 e5                	mov    ebp,esp
c0028730:	57                   	push   edi
c0028731:	56                   	push   esi
c0028732:	53                   	push   ebx
c0028733:	83 ec 0c             	sub    esp,0xc
c0028736:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028739:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002873c:	89 ca                	mov    edx,ecx
c002873e:	c1 ea 14             	shr    edx,0x14
c0028741:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028747:	89 cb                	mov    ebx,ecx
c0028749:	c1 fb 1f             	sar    ebx,0x1f
c002874c:	31 da                	xor    edx,ebx
c002874e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028751:	89 df                	mov    edi,ebx
c0028753:	c1 e7 0b             	shl    edi,0xb
c0028756:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028759:	c1 e1 0b             	shl    ecx,0xb
c002875c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028762:	c1 eb 15             	shr    ebx,0x15
c0028765:	09 d9                	or     ecx,ebx
c0028767:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002876a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002876d:	89 ce                	mov    esi,ecx
c002876f:	c1 ee 14             	shr    esi,0x14
c0028772:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028778:	89 cb                	mov    ebx,ecx
c002877a:	c1 fb 1f             	sar    ebx,0x1f
c002877d:	31 de                	xor    esi,ebx
c002877f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028782:	89 df                	mov    edi,ebx
c0028784:	c1 e7 0b             	shl    edi,0xb
c0028787:	c1 e1 0b             	shl    ecx,0xb
c002878a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028790:	c1 eb 15             	shr    ebx,0x15
c0028793:	09 d9                	or     ecx,ebx
c0028795:	89 d3                	mov    ebx,edx
c0028797:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002879d:	43                   	inc    ebx
c002879e:	83 fb 01             	cmp    ebx,0x1
c00287a1:	77 08                	ja     c00287ab <__cmpdf2+0x7e>
c00287a3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287a6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00287a9:	75 68                	jne    c0028813 <__cmpdf2+0xe6>
c00287ab:	89 f3                	mov    ebx,esi
c00287ad:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00287b3:	43                   	inc    ebx
c00287b4:	83 fb 01             	cmp    ebx,0x1
c00287b7:	77 06                	ja     c00287bf <__cmpdf2+0x92>
c00287b9:	89 fb                	mov    ebx,edi
c00287bb:	09 cb                	or     ebx,ecx
c00287bd:	75 54                	jne    c0028813 <__cmpdf2+0xe6>
c00287bf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00287c2:	09 f8                	or     eax,edi
c00287c4:	09 c8                	or     eax,ecx
c00287c6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00287c9:	75 12                	jne    c00287dd <__cmpdf2+0xb0>
c00287cb:	8d 42 01             	lea    eax,[edx+0x1]
c00287ce:	83 f8 01             	cmp    eax,0x1
c00287d1:	77 0a                	ja     c00287dd <__cmpdf2+0xb0>
c00287d3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00287d6:	31 c0                	xor    eax,eax
c00287d8:	83 fb 01             	cmp    ebx,0x1
c00287db:	76 36                	jbe    c0028813 <__cmpdf2+0xe6>
c00287dd:	b8 01 00 00 00       	mov    eax,0x1
c00287e2:	39 f2                	cmp    edx,esi
c00287e4:	7f 2d                	jg     c0028813 <__cmpdf2+0xe6>
c00287e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00287eb:	7c 26                	jl     c0028813 <__cmpdf2+0xe6>
c00287ed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00287f0:	77 07                	ja     c00287f9 <__cmpdf2+0xcc>
c00287f2:	72 16                	jb     c002880a <__cmpdf2+0xdd>
c00287f4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00287f7:	76 0a                	jbe    c0028803 <__cmpdf2+0xd6>
c00287f9:	89 d0                	mov    eax,edx
c00287fb:	c1 f8 1f             	sar    eax,0x1f
c00287fe:	83 c8 01             	or     eax,0x1
c0028801:	eb 10                	jmp    c0028813 <__cmpdf2+0xe6>
c0028803:	b8 00 00 00 00       	mov    eax,0x0
c0028808:	73 09                	jae    c0028813 <__cmpdf2+0xe6>
c002880a:	89 d0                	mov    eax,edx
c002880c:	c1 f8 1f             	sar    eax,0x1f
c002880f:	83 e0 02             	and    eax,0x2
c0028812:	48                   	dec    eax
c0028813:	83 c4 0c             	add    esp,0xc
c0028816:	5b                   	pop    ebx
c0028817:	5e                   	pop    esi
c0028818:	5f                   	pop    edi
c0028819:	5d                   	pop    ebp
c002881a:	c3                   	ret    

c002881b <__eqdf2>:
c002881b:	55                   	push   ebp
c002881c:	89 e5                	mov    ebp,esp
c002881e:	50                   	push   eax
c002881f:	6a 01                	push   0x1
c0028821:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028824:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028827:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002882a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002882d:	e8 fb fe ff ff       	call   c002872d <__cmpdf2>
c0028832:	83 c4 18             	add    esp,0x18
c0028835:	c9                   	leave  
c0028836:	c3                   	ret    

c0028837 <__nedf2>:
c0028837:	eb e2                	jmp    c002881b <__eqdf2>

c0028839 <__gtdf2>:
c0028839:	55                   	push   ebp
c002883a:	89 e5                	mov    ebp,esp
c002883c:	50                   	push   eax
c002883d:	6a ff                	push   0xffffffff
c002883f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028842:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028845:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002884b:	e8 dd fe ff ff       	call   c002872d <__cmpdf2>
c0028850:	83 c4 18             	add    esp,0x18
c0028853:	c9                   	leave  
c0028854:	c3                   	ret    

c0028855 <__gedf2>:
c0028855:	eb e2                	jmp    c0028839 <__gtdf2>

c0028857 <__ltdf2>:
c0028857:	eb c2                	jmp    c002881b <__eqdf2>

c0028859 <__ledf2>:
c0028859:	eb c0                	jmp    c002881b <__eqdf2>

c002885b <__truncdfsf2>:
c002885b:	55                   	push   ebp
c002885c:	89 e5                	mov    ebp,esp
c002885e:	57                   	push   edi
c002885f:	56                   	push   esi
c0028860:	53                   	push   ebx
c0028861:	83 ec 0c             	sub    esp,0xc
c0028864:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028867:	89 d1                	mov    ecx,edx
c0028869:	c1 f9 14             	sar    ecx,0x14
c002886c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002886f:	89 df                	mov    edi,ebx
c0028871:	c1 e7 0b             	shl    edi,0xb
c0028874:	89 d0                	mov    eax,edx
c0028876:	c1 e0 0b             	shl    eax,0xb
c0028879:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002887e:	c1 eb 15             	shr    ebx,0x15
c0028881:	09 d8                	or     eax,ebx
c0028883:	89 cb                	mov    ebx,ecx
c0028885:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002888b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028891:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028897:	0f 86 9e 00 00 00    	jbe    c002893b <__truncdfsf2+0xe0>
c002889d:	85 db                	test   ebx,ebx
c002889f:	75 0a                	jne    c00288ab <__truncdfsf2+0x50>
c00288a1:	c1 fa 17             	sar    edx,0x17
c00288a4:	30 d2                	xor    dl,dl
c00288a6:	e9 84 00 00 00       	jmp    c002892f <__truncdfsf2+0xd4>
c00288ab:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00288b1:	83 fe 83             	cmp    esi,0xffffff83
c00288b4:	7d 4b                	jge    c0028901 <__truncdfsf2+0xa6>
c00288b6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00288bb:	29 f1                	sub    ecx,esi
c00288bd:	83 f9 1f             	cmp    ecx,0x1f
c00288c0:	7f 6b                	jg     c002892d <__truncdfsf2+0xd2>
c00288c2:	0d 00 00 00 80       	or     eax,0x80000000
c00288c7:	89 c3                	mov    ebx,eax
c00288c9:	d3 eb                	shr    ebx,cl
c00288cb:	be 01 00 00 00       	mov    esi,0x1
c00288d0:	d3 e6                	shl    esi,cl
c00288d2:	4e                   	dec    esi
c00288d3:	21 f0                	and    eax,esi
c00288d5:	09 f8                	or     eax,edi
c00288d7:	0f 95 c0             	setne  al
c00288da:	0f b6 c0             	movzx  eax,al
c00288dd:	09 c3                	or     ebx,eax
c00288df:	89 d9                	mov    ecx,ebx
c00288e1:	c1 e9 08             	shr    ecx,0x8
c00288e4:	f6 c3 7f             	test   bl,0x7f
c00288e7:	0f 95 c0             	setne  al
c00288ea:	09 c8                	or     eax,ecx
c00288ec:	83 e0 01             	and    eax,0x1
c00288ef:	c1 eb 07             	shr    ebx,0x7
c00288f2:	21 c3                	and    ebx,eax
c00288f4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00288fa:	09 d1                	or     ecx,edx
c00288fc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00288ff:	eb 76                	jmp    c0028977 <__truncdfsf2+0x11c>
c0028901:	83 c6 80             	add    esi,0xffffff80
c0028904:	7e 1d                	jle    c0028923 <__truncdfsf2+0xc8>
c0028906:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002890c:	75 0b                	jne    c0028919 <__truncdfsf2+0xbe>
c002890e:	09 f8                	or     eax,edi
c0028910:	74 09                	je     c002891b <__truncdfsf2+0xc0>
c0028912:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028917:	eb 02                	jmp    c002891b <__truncdfsf2+0xc0>
c0028919:	31 c0                	xor    eax,eax
c002891b:	c1 fa 17             	sar    edx,0x17
c002891e:	80 ca ff             	or     dl,0xff
c0028921:	eb 0e                	jmp    c0028931 <__truncdfsf2+0xd6>
c0028923:	c1 fa 1f             	sar    edx,0x1f
c0028926:	c1 e2 08             	shl    edx,0x8
c0028929:	09 ca                	or     edx,ecx
c002892b:	eb 04                	jmp    c0028931 <__truncdfsf2+0xd6>
c002892d:	31 d2                	xor    edx,edx
c002892f:	31 c0                	xor    eax,eax
c0028931:	c1 e2 17             	shl    edx,0x17
c0028934:	c1 e8 08             	shr    eax,0x8
c0028937:	09 d0                	or     eax,edx
c0028939:	eb 3c                	jmp    c0028977 <__truncdfsf2+0x11c>
c002893b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028941:	89 ca                	mov    edx,ecx
c0028943:	c1 fa 0b             	sar    edx,0xb
c0028946:	c1 e2 08             	shl    edx,0x8
c0028949:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002894c:	31 db                	xor    ebx,ebx
c002894e:	85 ff                	test   edi,edi
c0028950:	0f 95 c3             	setne  bl
c0028953:	09 d8                	or     eax,ebx
c0028955:	89 c3                	mov    ebx,eax
c0028957:	c1 eb 08             	shr    ebx,0x8
c002895a:	a8 7f                	test   al,0x7f
c002895c:	0f 95 c2             	setne  dl
c002895f:	89 d6                	mov    esi,edx
c0028961:	09 de                	or     esi,ebx
c0028963:	83 e6 01             	and    esi,0x1
c0028966:	c1 e8 07             	shr    eax,0x7
c0028969:	21 f0                	and    eax,esi
c002896b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002896e:	09 ca                	or     edx,ecx
c0028970:	c1 e2 17             	shl    edx,0x17
c0028973:	09 da                	or     edx,ebx
c0028975:	01 d0                	add    eax,edx
c0028977:	83 c4 0c             	add    esp,0xc
c002897a:	5b                   	pop    ebx
c002897b:	5e                   	pop    esi
c002897c:	5f                   	pop    edi
c002897d:	5d                   	pop    ebp
c002897e:	c3                   	ret    

c002897f <__extendsfdf2>:
c002897f:	55                   	push   ebp
c0028980:	89 e5                	mov    ebp,esp
c0028982:	57                   	push   edi
c0028983:	56                   	push   esi
c0028984:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028987:	89 d1                	mov    ecx,edx
c0028989:	c1 f9 17             	sar    ecx,0x17
c002898c:	c1 e2 08             	shl    edx,0x8
c002898f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028995:	89 c8                	mov    eax,ecx
c0028997:	80 e4 f8             	and    ah,0xf8
c002899a:	8d 71 01             	lea    esi,[ecx+0x1]
c002899d:	81 e6 fe 00 00 00    	and    esi,0xfe
c00289a3:	75 27                	jne    c00289cc <__extendsfdf2+0x4d>
c00289a5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00289ab:	75 18                	jne    c00289c5 <__extendsfdf2+0x46>
c00289ad:	85 d2                	test   edx,edx
c00289af:	74 20                	je     c00289d1 <__extendsfdf2+0x52>
c00289b1:	41                   	inc    ecx
c00289b2:	01 d2                	add    edx,edx
c00289b4:	79 fb                	jns    c00289b1 <__extendsfdf2+0x32>
c00289b6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289bc:	29 c8                	sub    eax,ecx
c00289be:	05 81 03 00 00       	add    eax,0x381
c00289c3:	eb 0c                	jmp    c00289d1 <__extendsfdf2+0x52>
c00289c5:	05 00 07 00 00       	add    eax,0x700
c00289ca:	eb 05                	jmp    c00289d1 <__extendsfdf2+0x52>
c00289cc:	05 80 03 00 00       	add    eax,0x380
c00289d1:	c1 e0 14             	shl    eax,0x14
c00289d4:	89 c1                	mov    ecx,eax
c00289d6:	89 d0                	mov    eax,edx
c00289d8:	c1 e8 0b             	shr    eax,0xb
c00289db:	09 c1                	or     ecx,eax
c00289dd:	c1 e2 15             	shl    edx,0x15
c00289e0:	89 d0                	mov    eax,edx
c00289e2:	89 ca                	mov    edx,ecx
c00289e4:	5e                   	pop    esi
c00289e5:	5f                   	pop    edi
c00289e6:	5d                   	pop    ebp
c00289e7:	c3                   	ret    
c00289e8:	66 90                	xchg   ax,ax
c00289ea:	66 90                	xchg   ax,ax
c00289ec:	66 90                	xchg   ax,ax
c00289ee:	66 90                	xchg   ax,ax

c00289f0 <fabs>:
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00289fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00289fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028a03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028a07:	dd 04 24             	fld    QWORD PTR [esp]
c0028a0a:	83 c4 0c             	add    esp,0xc
c0028a0d:	c3                   	ret    
c0028a0e:	66 90                	xchg   ax,ax

c0028a10 <lrint>:
c0028a10:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028a14:	83 ec 04             	sub    esp,0x4
c0028a17:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a1a:	58                   	pop    eax
c0028a1b:	c3                   	ret    

c0028a1c <lrintf>:
c0028a1c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028a20:	83 ec 04             	sub    esp,0x4
c0028a23:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a26:	58                   	pop    eax
c0028a27:	c3                   	ret    

Disassembly of section .init:

c0028a28 <_init>:
c0028a28:	55                   	push   ebp
c0028a29:	89 e5                	mov    ebp,esp
c0028a2b:	e8 e8 76 fd ff       	call   c0000118 <frame_dummy>
c0028a30:	e8 5b e0 ff ff       	call   c0026a90 <__do_global_ctors_aux>
c0028a35:	5d                   	pop    ebp
c0028a36:	c3                   	ret    

Disassembly of section .fini:

c0028a37 <_fini>:
c0028a37:	55                   	push   ebp
c0028a38:	89 e5                	mov    ebp,esp
c0028a3a:	e8 69 76 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028a3f:	5d                   	pop    ebp
c0028a40:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028a42 <Computer::~Computer()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 10                	mov    DWORD PTR [eax],edx
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	50                   	push   eax
c0028a58:	e8 5f b2 fe ff       	call   c0013cbc <Device::~Device()>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	90                   	nop
c0028a61:	83 c4 0c             	add    esp,0xc
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028a66 <Computer::~Computer()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	83 ec 0c             	sub    esp,0xc
c0028a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a70:	e8 cd ff ff ff       	call   c0028a42 <Computer::~Computer()>
c0028a75:	83 c4 10             	add    esp,0x10
c0028a78:	83 ec 08             	sub    esp,0x8
c0028a7b:	68 ec 01 00 00       	push   0x1ec
c0028a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a84:	e8 54 9e fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0028a89:	83 c4 10             	add    esp,0x10
c0028a8c:	83 c4 0c             	add    esp,0xc
c0028a8f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028a90 <idleCommon()>:
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	fa                   	cli    
c0028a94:	ff 05 c8 fa 02 c0    	inc    DWORD PTR ds:0xc002fac8
c0028a9a:	e8 46 54 ff ff       	call   c001dee5 <schedule()>
c0028a9f:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c0028aa4:	48                   	dec    eax
c0028aa5:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c0028aaa:	75 01                	jne    c0028aad <idleCommon()+0x1d>
c0028aac:	fb                   	sti    
c0028aad:	83 c4 0c             	add    esp,0xc
c0028ab0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ab2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ab2:	90                   	nop
c0028ab3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ab4 <LinkedList<UnixFile>::LinkedList()>:
c0028ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028acd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af4:	90                   	nop
c0028af5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028af6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028af6:	83 ec 0c             	sub    esp,0xc
c0028af9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028afe:	75 10                	jne    c0028b10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028b00:	83 ec 0c             	sub    esp,0xc
c0028b03:	68 ec a9 02 c0       	push   0xc002a9ec
c0028b08:	e8 46 18 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028b0d:	83 c4 10             	add    esp,0x10
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b16:	85 c0                	test   eax,eax
c0028b18:	74 34                	je     c0028b4e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b21:	85 c0                	test   eax,eax
c0028b23:	74 29                	je     c0028b4e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b30:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b4c:	eb 65                	jmp    c0028bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b54:	85 c0                	test   eax,eax
c0028b56:	75 4b                	jne    c0028ba3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5f:	85 c0                	test   eax,eax
c0028b61:	75 40                	jne    c0028ba3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6b:	89 10                	mov    DWORD PTR [eax],edx
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b8d:	85 c0                	test   eax,eax
c0028b8f:	74 22                	je     c0028bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b91:	83 ec 0c             	sub    esp,0xc
c0028b94:	68 0e aa 02 c0       	push   0xc002aa0e
c0028b99:	e8 b5 17 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028b9e:	83 c4 10             	add    esp,0x10
c0028ba1:	eb 10                	jmp    c0028bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ba3:	83 ec 0c             	sub    esp,0xc
c0028ba6:	68 18 aa 02 c0       	push   0xc002aa18
c0028bab:	e8 a3 17 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028bb0:	83 c4 10             	add    esp,0x10
c0028bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bba:	8d 50 01             	lea    edx,[eax+0x1]
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bc4:	90                   	nop
c0028bc5:	83 c4 0c             	add    esp,0xc
c0028bc8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028bca <LinkedList<UnixFile>::getFirstElement()>:
c0028bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028bd2 <LinkedList<UnixFile>::removeFirst()>:
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bdb:	85 c0                	test   eax,eax
c0028bdd:	75 12                	jne    c0028bf1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028bdf:	83 ec 0c             	sub    esp,0xc
c0028be2:	68 24 aa 02 c0       	push   0xc002aa24
c0028be7:	e8 67 17 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028bec:	83 c4 10             	add    esp,0x10
c0028bef:	eb 7e                	jmp    c0028c6f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bfb:	85 c0                	test   eax,eax
c0028bfd:	74 10                	je     c0028c0f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028bff:	83 ec 0c             	sub    esp,0xc
c0028c02:	68 6f aa 02 c0       	push   0xc002aa6f
c0028c07:	e8 47 17 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028c0c:	83 c4 10             	add    esp,0x10
c0028c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c18:	85 c0                	test   eax,eax
c0028c1a:	75 33                	jne    c0028c4f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c38:	83 f8 01             	cmp    eax,0x1
c0028c3b:	74 21                	je     c0028c5e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c3d:	83 ec 0c             	sub    esp,0xc
c0028c40:	68 48 aa 02 c0       	push   0xc002aa48
c0028c45:	e8 09 17 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028c4a:	83 c4 10             	add    esp,0x10
c0028c4d:	eb 0f                	jmp    c0028c5e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c55:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5c:	89 10                	mov    DWORD PTR [eax],edx
c0028c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c65:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c6f:	83 c4 0c             	add    esp,0xc
c0028c72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028c74 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c7b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028c7c <DriverlessDevice::~DriverlessDevice()>:
c0028c7c:	ba fc b2 02 c0       	mov    edx,0xc002b2fc
c0028c81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c85:	89 10                	mov    DWORD PTR [eax],edx
c0028c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8b:	50                   	push   eax
c0028c8c:	e8 2b b0 fe ff       	call   c0013cbc <Device::~Device()>
c0028c91:	83 c4 04             	add    esp,0x4
c0028c94:	90                   	nop
c0028c95:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028c96 <DriverlessDevice::~DriverlessDevice()>:
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	83 ec 0c             	sub    esp,0xc
c0028c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca0:	e8 d7 ff ff ff       	call   c0028c7c <DriverlessDevice::~DriverlessDevice()>
c0028ca5:	83 c4 10             	add    esp,0x10
c0028ca8:	83 ec 08             	sub    esp,0x8
c0028cab:	68 58 01 00 00       	push   0x158
c0028cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb4:	e8 24 9c fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0028cb9:	83 c4 10             	add    esp,0x10
c0028cbc:	83 c4 0c             	add    esp,0xc
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028cc0 <LinkedList<Device>::addElement(Device*)>:
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028cc8:	75 10                	jne    c0028cda <LinkedList<Device>::addElement(Device*)+0x1a>
c0028cca:	83 ec 0c             	sub    esp,0xc
c0028ccd:	68 ec a9 02 c0       	push   0xc002a9ec
c0028cd2:	e8 7c 16 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028cd7:	83 c4 10             	add    esp,0x10
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ce0:	85 c0                	test   eax,eax
c0028ce2:	74 3a                	je     c0028d1e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ceb:	85 c0                	test   eax,eax
c0028ced:	74 2f                	je     c0028d1e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cfa:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d08:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d12:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d1c:	eb 68                	jmp    c0028d86 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d24:	85 c0                	test   eax,eax
c0028d26:	75 4e                	jne    c0028d76 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d2f:	85 c0                	test   eax,eax
c0028d31:	75 43                	jne    c0028d76 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d3b:	89 10                	mov    DWORD PTR [eax],edx
c0028d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d4f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d60:	85 c0                	test   eax,eax
c0028d62:	74 22                	je     c0028d86 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d64:	83 ec 0c             	sub    esp,0xc
c0028d67:	68 0e aa 02 c0       	push   0xc002aa0e
c0028d6c:	e8 e2 15 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	eb 10                	jmp    c0028d86 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	68 18 aa 02 c0       	push   0xc002aa18
c0028d7e:	e8 d0 15 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028d83:	83 c4 10             	add    esp,0x10
c0028d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d8d:	8d 50 01             	lea    edx,[eax+0x1]
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d97:	90                   	nop
c0028d98:	83 c4 0c             	add    esp,0xc
c0028d9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028d9c <LinkedList<Device>::LinkedList()>:
c0028d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028da0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028daa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028db5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dd5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ddc:	90                   	nop
c0028ddd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028dde <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028de4:	85 c0                	test   eax,eax
c0028de6:	75 0e                	jne    c0028df6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028def:	85 c0                	test   eax,eax
c0028df1:	75 03                	jne    c0028df6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028df3:	b0 01                	mov    al,0x1
c0028df5:	c3                   	ret    
c0028df6:	b0 00                	mov    al,0x0
c0028df8:	90                   	nop
c0028df9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028dfa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e02:	83 ec 0c             	sub    esp,0xc
c0028e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e0b:	85 c0                	test   eax,eax
c0028e0d:	75 15                	jne    c0028e24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028e0f:	83 ec 0c             	sub    esp,0xc
c0028e12:	68 24 aa 02 c0       	push   0xc002aa24
c0028e17:	e8 37 15 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028e1c:	83 c4 10             	add    esp,0x10
c0028e1f:	e9 88 00 00 00       	jmp    c0028eac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e2e:	85 c0                	test   eax,eax
c0028e30:	0f 95 c0             	setne  al
c0028e33:	84 c0                	test   al,al
c0028e35:	74 10                	je     c0028e47 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028e37:	83 ec 0c             	sub    esp,0xc
c0028e3a:	68 6f aa 02 c0       	push   0xc002aa6f
c0028e3f:	e8 0f 15 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028e44:	83 c4 10             	add    esp,0x10
c0028e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e50:	85 c0                	test   eax,eax
c0028e52:	0f 94 c0             	sete   al
c0028e55:	84 c0                	test   al,al
c0028e57:	74 33                	je     c0028e8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e75:	83 f8 01             	cmp    eax,0x1
c0028e78:	74 21                	je     c0028e9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	68 48 aa 02 c0       	push   0xc002aa48
c0028e82:	e8 cc 14 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	eb 0f                	jmp    c0028e9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e92:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e99:	89 10                	mov    DWORD PTR [eax],edx
c0028e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ea2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028eac:	83 c4 0c             	add    esp,0xc
c0028eaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028eb8:	75 10                	jne    c0028eca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	68 ec a9 02 c0       	push   0xc002a9ec
c0028ec2:	e8 8c 14 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028ec7:	83 c4 10             	add    esp,0x10
c0028eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ece:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ed0:	85 c0                	test   eax,eax
c0028ed2:	74 34                	je     c0028f08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028edb:	85 c0                	test   eax,eax
c0028edd:	74 29                	je     c0028f08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ee6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028eea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ef5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f06:	eb 65                	jmp    c0028f6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f0e:	85 c0                	test   eax,eax
c0028f10:	75 4b                	jne    c0028f5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f19:	85 c0                	test   eax,eax
c0028f1b:	75 40                	jne    c0028f5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f25:	89 10                	mov    DWORD PTR [eax],edx
c0028f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f47:	85 c0                	test   eax,eax
c0028f49:	74 22                	je     c0028f6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f4b:	83 ec 0c             	sub    esp,0xc
c0028f4e:	68 0e aa 02 c0       	push   0xc002aa0e
c0028f53:	e8 fb 13 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028f58:	83 c4 10             	add    esp,0x10
c0028f5b:	eb 10                	jmp    c0028f6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f5d:	83 ec 0c             	sub    esp,0xc
c0028f60:	68 18 aa 02 c0       	push   0xc002aa18
c0028f65:	e8 e9 13 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0028f6a:	83 c4 10             	add    esp,0x10
c0028f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f74:	8d 50 01             	lea    edx,[eax+0x1]
c0028f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f7e:	90                   	nop
c0028f7f:	83 c4 0c             	add    esp,0xc
c0028f82:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028f84 <ACPI::~ACPI()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	ba bc bd 02 c0       	mov    edx,0xc002bdbc
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	89 10                	mov    DWORD PTR [eax],edx
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	50                   	push   eax
c0028f9a:	e8 1d ad fe ff       	call   c0013cbc <Device::~Device()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	90                   	nop
c0028fa3:	83 c4 0c             	add    esp,0xc
c0028fa6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028fa8 <ACPI::~ACPI()>:
c0028fa8:	83 ec 0c             	sub    esp,0xc
c0028fab:	83 ec 0c             	sub    esp,0xc
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 cd ff ff ff       	call   c0028f84 <ACPI::~ACPI()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 ec 08             	sub    esp,0x8
c0028fbd:	68 64 12 00 00       	push   0x1264
c0028fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc6:	e8 12 99 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	83 c4 0c             	add    esp,0xc
c0028fd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028fd2 <LinkedList<Device>::~LinkedList()>:
c0028fd2:	90                   	nop
c0028fd3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028fd4 <LinkedList<Device>::isEmpty()>:
c0028fd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fda:	85 c0                	test   eax,eax
c0028fdc:	75 0e                	jne    c0028fec <LinkedList<Device>::isEmpty()+0x18>
c0028fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe5:	85 c0                	test   eax,eax
c0028fe7:	75 03                	jne    c0028fec <LinkedList<Device>::isEmpty()+0x18>
c0028fe9:	b0 01                	mov    al,0x1
c0028feb:	c3                   	ret    
c0028fec:	b0 00                	mov    al,0x0
c0028fee:	90                   	nop
c0028fef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028ff0 <LinkedList<Device>::getFirstElement()>:
c0028ff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ff4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ff6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028ff8 <LinkedList<Device>::removeFirst()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0029001:	85 c0                	test   eax,eax
c0029003:	75 15                	jne    c002901a <LinkedList<Device>::removeFirst()+0x22>
c0029005:	83 ec 0c             	sub    esp,0xc
c0029008:	68 24 aa 02 c0       	push   0xc002aa24
c002900d:	e8 41 13 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0029012:	83 c4 10             	add    esp,0x10
c0029015:	e9 87 00 00 00       	jmp    c00290a1 <LinkedList<Device>::removeFirst()+0xa9>
c002901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029021:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029027:	85 c0                	test   eax,eax
c0029029:	74 10                	je     c002903b <LinkedList<Device>::removeFirst()+0x43>
c002902b:	83 ec 0c             	sub    esp,0xc
c002902e:	68 6f aa 02 c0       	push   0xc002aa6f
c0029033:	e8 1b 13 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0029038:	83 c4 10             	add    esp,0x10
c002903b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029041:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029047:	85 c0                	test   eax,eax
c0029049:	75 33                	jne    c002907e <LinkedList<Device>::removeFirst()+0x86>
c002904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029059:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029067:	83 f8 01             	cmp    eax,0x1
c002906a:	74 24                	je     c0029090 <LinkedList<Device>::removeFirst()+0x98>
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	68 48 aa 02 c0       	push   0xc002aa48
c0029074:	e8 da 12 ff ff       	call   c001a353 <Krnl::panic(char const*)>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	eb 12                	jmp    c0029090 <LinkedList<Device>::removeFirst()+0x98>
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	8b 00                	mov    eax,DWORD PTR [eax]
c0029084:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002908a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908e:	89 10                	mov    DWORD PTR [eax],edx
c0029090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029094:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029097:	8d 50 ff             	lea    edx,[eax-0x1]
c002909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290a1:	83 c4 0c             	add    esp,0xc
c00290a4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00290a6 <CPU::~CPU()>:
c00290a6:	83 ec 0c             	sub    esp,0xc
c00290a9:	ba 58 c1 02 c0       	mov    edx,0xc002c158
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	89 10                	mov    DWORD PTR [eax],edx
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	50                   	push   eax
c00290bc:	e8 fb ab fe ff       	call   c0013cbc <Device::~Device()>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	90                   	nop
c00290c5:	83 c4 0c             	add    esp,0xc
c00290c8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00290ca <CPU::~CPU()>:
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	83 ec 0c             	sub    esp,0xc
c00290d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d4:	e8 cd ff ff ff       	call   c00290a6 <CPU::~CPU()>
c00290d9:	83 c4 10             	add    esp,0x10
c00290dc:	83 ec 08             	sub    esp,0x8
c00290df:	68 98 11 00 00       	push   0x1198
c00290e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e8:	e8 f0 97 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00290ed:	83 c4 10             	add    esp,0x10
c00290f0:	83 c4 0c             	add    esp,0xc
c00290f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00290f4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00290f4:	90                   	nop
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00290f6 <ThreadControlBlock::ThreadControlBlock()>:
c00290f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029105:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002910c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029110:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002911b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029126:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002912d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029131:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029139:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002913d:	90                   	nop
c002913e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029140 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002914a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002914e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029159:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029164:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002916a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002916e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029179:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029180:	90                   	nop
c0029181:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029182 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029182:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029186:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029189:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002918a <Vm::_FPUState::_FPUState()>:
c002918a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002918e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029195:	90                   	nop
c0029196:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029198 <PCI::~PCI()>:
c0029198:	83 ec 0c             	sub    esp,0xc
c002919b:	ba a4 cc 02 c0       	mov    edx,0xc002cca4
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	89 10                	mov    DWORD PTR [eax],edx
c00291a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	50                   	push   eax
c00291ae:	e8 d9 a4 fe ff       	call   c001368c <Bus::~Bus()>
c00291b3:	83 c4 10             	add    esp,0x10
c00291b6:	90                   	nop
c00291b7:	83 c4 0c             	add    esp,0xc
c00291ba:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00291bc <PCI::~PCI()>:
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	83 ec 0c             	sub    esp,0xc
c00291c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c6:	e8 cd ff ff ff       	call   c0029198 <PCI::~PCI()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	83 ec 08             	sub    esp,0x8
c00291d1:	68 5c 01 00 00       	push   0x15c
c00291d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291da:	e8 fe 96 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	83 c4 0c             	add    esp,0xc
c00291e5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00291e6 <IDE::~IDE()>:
c00291e6:	83 ec 0c             	sub    esp,0xc
c00291e9:	ba 58 cd 02 c0       	mov    edx,0xc002cd58
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	89 10                	mov    DWORD PTR [eax],edx
c00291f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	50                   	push   eax
c00291fc:	e8 d1 af fe ff       	call   c00141d2 <HardDiskController::~HardDiskController()>
c0029201:	83 c4 10             	add    esp,0x10
c0029204:	90                   	nop
c0029205:	83 c4 0c             	add    esp,0xc
c0029208:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002920a <IDE::~IDE()>:
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	83 ec 0c             	sub    esp,0xc
c0029210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029214:	e8 cd ff ff ff       	call   c00291e6 <IDE::~IDE()>
c0029219:	83 c4 10             	add    esp,0x10
c002921c:	83 ec 08             	sub    esp,0x8
c002921f:	68 70 02 00 00       	push   0x270
c0029224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029228:	e8 b0 96 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c002922d:	83 c4 10             	add    esp,0x10
c0029230:	83 c4 0c             	add    esp,0xc
c0029233:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029234 <SATABus::~SATABus()>:
c0029234:	83 ec 0c             	sub    esp,0xc
c0029237:	ba d0 cd 02 c0       	mov    edx,0xc002cdd0
c002923c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029240:	89 10                	mov    DWORD PTR [eax],edx
c0029242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	50                   	push   eax
c002924a:	e8 83 af fe ff       	call   c00141d2 <HardDiskController::~HardDiskController()>
c002924f:	83 c4 10             	add    esp,0x10
c0029252:	90                   	nop
c0029253:	83 c4 0c             	add    esp,0xc
c0029256:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029258 <SATABus::~SATABus()>:
c0029258:	83 ec 0c             	sub    esp,0xc
c002925b:	83 ec 0c             	sub    esp,0xc
c002925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029262:	e8 cd ff ff ff       	call   c0029234 <SATABus::~SATABus()>
c0029267:	83 c4 10             	add    esp,0x10
c002926a:	83 ec 08             	sub    esp,0x8
c002926d:	68 64 01 00 00       	push   0x164
c0029272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029276:	e8 62 96 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c002927b:	83 c4 10             	add    esp,0x10
c002927e:	83 c4 0c             	add    esp,0xc
c0029281:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029282 <ATA::~ATA()>:
c0029282:	83 ec 0c             	sub    esp,0xc
c0029285:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c002928a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928e:	89 10                	mov    DWORD PTR [eax],edx
c0029290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	50                   	push   eax
c0029298:	e8 17 b0 fe ff       	call   c00142b4 <PhysicalDisk::~PhysicalDisk()>
c002929d:	83 c4 10             	add    esp,0x10
c00292a0:	90                   	nop
c00292a1:	83 c4 0c             	add    esp,0xc
c00292a4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00292a6 <ATA::~ATA()>:
c00292a6:	83 ec 0c             	sub    esp,0xc
c00292a9:	83 ec 0c             	sub    esp,0xc
c00292ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b0:	e8 cd ff ff ff       	call   c0029282 <ATA::~ATA()>
c00292b5:	83 c4 10             	add    esp,0x10
c00292b8:	83 ec 08             	sub    esp,0x8
c00292bb:	68 7c 01 00 00       	push   0x17c
c00292c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c4:	e8 14 96 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00292c9:	83 c4 10             	add    esp,0x10
c00292cc:	83 c4 0c             	add    esp,0xc
c00292cf:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00292d0 <ATAPI::~ATAPI()>:
c00292d0:	83 ec 0c             	sub    esp,0xc
c00292d3:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	89 10                	mov    DWORD PTR [eax],edx
c00292de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e2:	83 ec 0c             	sub    esp,0xc
c00292e5:	50                   	push   eax
c00292e6:	e8 c9 af fe ff       	call   c00142b4 <PhysicalDisk::~PhysicalDisk()>
c00292eb:	83 c4 10             	add    esp,0x10
c00292ee:	90                   	nop
c00292ef:	83 c4 0c             	add    esp,0xc
c00292f2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00292f4 <ATAPI::~ATAPI()>:
c00292f4:	83 ec 0c             	sub    esp,0xc
c00292f7:	83 ec 0c             	sub    esp,0xc
c00292fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292fe:	e8 cd ff ff ff       	call   c00292d0 <ATAPI::~ATAPI()>
c0029303:	83 c4 10             	add    esp,0x10
c0029306:	83 ec 08             	sub    esp,0x8
c0029309:	68 80 01 00 00       	push   0x180
c002930e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029312:	e8 c6 95 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029317:	83 c4 10             	add    esp,0x10
c002931a:	83 c4 0c             	add    esp,0xc
c002931d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002931e <SATA::~SATA()>:
c002931e:	83 ec 0c             	sub    esp,0xc
c0029321:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0029326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932a:	89 10                	mov    DWORD PTR [eax],edx
c002932c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029330:	83 ec 0c             	sub    esp,0xc
c0029333:	50                   	push   eax
c0029334:	e8 7b af fe ff       	call   c00142b4 <PhysicalDisk::~PhysicalDisk()>
c0029339:	83 c4 10             	add    esp,0x10
c002933c:	90                   	nop
c002933d:	83 c4 0c             	add    esp,0xc
c0029340:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029342 <SATA::~SATA()>:
c0029342:	83 ec 0c             	sub    esp,0xc
c0029345:	83 ec 0c             	sub    esp,0xc
c0029348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002934c:	e8 cd ff ff ff       	call   c002931e <SATA::~SATA()>
c0029351:	83 c4 10             	add    esp,0x10
c0029354:	83 ec 08             	sub    esp,0x8
c0029357:	68 7c 01 00 00       	push   0x17c
c002935c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029360:	e8 78 95 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029365:	83 c4 10             	add    esp,0x10
c0029368:	83 c4 0c             	add    esp,0xc
c002936b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002936c <SATAPI::~SATAPI()>:
c002936c:	83 ec 0c             	sub    esp,0xc
c002936f:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0029374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029378:	89 10                	mov    DWORD PTR [eax],edx
c002937a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937e:	83 ec 0c             	sub    esp,0xc
c0029381:	50                   	push   eax
c0029382:	e8 2d af fe ff       	call   c00142b4 <PhysicalDisk::~PhysicalDisk()>
c0029387:	83 c4 10             	add    esp,0x10
c002938a:	90                   	nop
c002938b:	83 c4 0c             	add    esp,0xc
c002938e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029390 <SATAPI::~SATAPI()>:
c0029390:	83 ec 0c             	sub    esp,0xc
c0029393:	83 ec 0c             	sub    esp,0xc
c0029396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002939a:	e8 cd ff ff ff       	call   c002936c <SATAPI::~SATAPI()>
c002939f:	83 c4 10             	add    esp,0x10
c00293a2:	83 ec 08             	sub    esp,0x8
c00293a5:	68 80 01 00 00       	push   0x180
c00293aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ae:	e8 2a 95 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00293b3:	83 c4 10             	add    esp,0x10
c00293b6:	83 c4 0c             	add    esp,0xc
c00293b9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00293ba <AVX::~AVX()>:
c00293ba:	83 ec 0c             	sub    esp,0xc
c00293bd:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c00293c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c6:	89 10                	mov    DWORD PTR [eax],edx
c00293c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cc:	83 ec 0c             	sub    esp,0xc
c00293cf:	50                   	push   eax
c00293d0:	e8 63 af fe ff       	call   c0014338 <FPU::~FPU()>
c00293d5:	83 c4 10             	add    esp,0x10
c00293d8:	90                   	nop
c00293d9:	83 c4 0c             	add    esp,0xc
c00293dc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00293de <AVX::~AVX()>:
c00293de:	83 ec 0c             	sub    esp,0xc
c00293e1:	83 ec 0c             	sub    esp,0xc
c00293e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293e8:	e8 cd ff ff ff       	call   c00293ba <AVX::~AVX()>
c00293ed:	83 c4 10             	add    esp,0x10
c00293f0:	83 ec 08             	sub    esp,0x8
c00293f3:	68 58 01 00 00       	push   0x158
c00293f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fc:	e8 dc 94 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029401:	83 c4 10             	add    esp,0x10
c0029404:	83 c4 0c             	add    esp,0xc
c0029407:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029408 <MMX::~MMX()>:
c0029408:	83 ec 0c             	sub    esp,0xc
c002940b:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c0029410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029414:	89 10                	mov    DWORD PTR [eax],edx
c0029416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941a:	83 ec 0c             	sub    esp,0xc
c002941d:	50                   	push   eax
c002941e:	e8 15 af fe ff       	call   c0014338 <FPU::~FPU()>
c0029423:	83 c4 10             	add    esp,0x10
c0029426:	90                   	nop
c0029427:	83 c4 0c             	add    esp,0xc
c002942a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002942c <MMX::~MMX()>:
c002942c:	83 ec 0c             	sub    esp,0xc
c002942f:	83 ec 0c             	sub    esp,0xc
c0029432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029436:	e8 cd ff ff ff       	call   c0029408 <MMX::~MMX()>
c002943b:	83 c4 10             	add    esp,0x10
c002943e:	83 ec 08             	sub    esp,0x8
c0029441:	68 58 01 00 00       	push   0x158
c0029446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944a:	e8 8e 94 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c002944f:	83 c4 10             	add    esp,0x10
c0029452:	83 c4 0c             	add    esp,0xc
c0029455:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029456 <SSE::~SSE()>:
c0029456:	83 ec 0c             	sub    esp,0xc
c0029459:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c002945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029462:	89 10                	mov    DWORD PTR [eax],edx
c0029464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029468:	83 ec 0c             	sub    esp,0xc
c002946b:	50                   	push   eax
c002946c:	e8 c7 ae fe ff       	call   c0014338 <FPU::~FPU()>
c0029471:	83 c4 10             	add    esp,0x10
c0029474:	90                   	nop
c0029475:	83 c4 0c             	add    esp,0xc
c0029478:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002947a <SSE::~SSE()>:
c002947a:	83 ec 0c             	sub    esp,0xc
c002947d:	83 ec 0c             	sub    esp,0xc
c0029480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029484:	e8 cd ff ff ff       	call   c0029456 <SSE::~SSE()>
c0029489:	83 c4 10             	add    esp,0x10
c002948c:	83 ec 08             	sub    esp,0x8
c002948f:	68 58 01 00 00       	push   0x158
c0029494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029498:	e8 40 94 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c002949d:	83 c4 10             	add    esp,0x10
c00294a0:	83 c4 0c             	add    esp,0xc
c00294a3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00294a4 <x87::~x87()>:
c00294a4:	83 ec 0c             	sub    esp,0xc
c00294a7:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c00294ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b0:	89 10                	mov    DWORD PTR [eax],edx
c00294b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b6:	83 ec 0c             	sub    esp,0xc
c00294b9:	50                   	push   eax
c00294ba:	e8 79 ae fe ff       	call   c0014338 <FPU::~FPU()>
c00294bf:	83 c4 10             	add    esp,0x10
c00294c2:	90                   	nop
c00294c3:	83 c4 0c             	add    esp,0xc
c00294c6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00294c8 <x87::~x87()>:
c00294c8:	83 ec 0c             	sub    esp,0xc
c00294cb:	83 ec 0c             	sub    esp,0xc
c00294ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294d2:	e8 cd ff ff ff       	call   c00294a4 <x87::~x87()>
c00294d7:	83 c4 10             	add    esp,0x10
c00294da:	83 ec 08             	sub    esp,0x8
c00294dd:	68 58 01 00 00       	push   0x158
c00294e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294e6:	e8 f2 93 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00294eb:	83 c4 10             	add    esp,0x10
c00294ee:	83 c4 0c             	add    esp,0xc
c00294f1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00294f2 <IOAPIC::~IOAPIC()>:
c00294f2:	83 ec 0c             	sub    esp,0xc
c00294f5:	ba 68 d2 02 c0       	mov    edx,0xc002d268
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	89 10                	mov    DWORD PTR [eax],edx
c0029500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	50                   	push   eax
c0029508:	e8 af a7 fe ff       	call   c0013cbc <Device::~Device()>
c002950d:	83 c4 10             	add    esp,0x10
c0029510:	90                   	nop
c0029511:	83 c4 0c             	add    esp,0xc
c0029514:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029516 <IOAPIC::~IOAPIC()>:
c0029516:	83 ec 0c             	sub    esp,0xc
c0029519:	83 ec 0c             	sub    esp,0xc
c002951c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029520:	e8 cd ff ff ff       	call   c00294f2 <IOAPIC::~IOAPIC()>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	83 ec 08             	sub    esp,0x8
c002952b:	68 68 01 00 00       	push   0x168
c0029530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029534:	e8 a4 93 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029539:	83 c4 10             	add    esp,0x10
c002953c:	83 c4 0c             	add    esp,0xc
c002953f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029540 <APIC::~APIC()>:
c0029540:	83 ec 0c             	sub    esp,0xc
c0029543:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c0029548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954c:	89 10                	mov    DWORD PTR [eax],edx
c002954e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029552:	83 ec 0c             	sub    esp,0xc
c0029555:	50                   	push   eax
c0029556:	e8 a7 b2 fe ff       	call   c0014802 <InterruptController::~InterruptController()>
c002955b:	83 c4 10             	add    esp,0x10
c002955e:	90                   	nop
c002955f:	83 c4 0c             	add    esp,0xc
c0029562:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029564 <APIC::~APIC()>:
c0029564:	83 ec 0c             	sub    esp,0xc
c0029567:	83 ec 0c             	sub    esp,0xc
c002956a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002956e:	e8 cd ff ff ff       	call   c0029540 <APIC::~APIC()>
c0029573:	83 c4 10             	add    esp,0x10
c0029576:	83 ec 08             	sub    esp,0x8
c0029579:	68 58 21 00 00       	push   0x2158
c002957e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029582:	e8 56 93 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029587:	83 c4 10             	add    esp,0x10
c002958a:	83 c4 0c             	add    esp,0xc
c002958d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002958e <PIC::~PIC()>:
c002958e:	83 ec 0c             	sub    esp,0xc
c0029591:	ba b8 d2 02 c0       	mov    edx,0xc002d2b8
c0029596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959a:	89 10                	mov    DWORD PTR [eax],edx
c002959c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a0:	83 ec 0c             	sub    esp,0xc
c00295a3:	50                   	push   eax
c00295a4:	e8 59 b2 fe ff       	call   c0014802 <InterruptController::~InterruptController()>
c00295a9:	83 c4 10             	add    esp,0x10
c00295ac:	90                   	nop
c00295ad:	83 c4 0c             	add    esp,0xc
c00295b0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00295b2 <PIC::~PIC()>:
c00295b2:	83 ec 0c             	sub    esp,0xc
c00295b5:	83 ec 0c             	sub    esp,0xc
c00295b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295bc:	e8 cd ff ff ff       	call   c002958e <PIC::~PIC()>
c00295c1:	83 c4 10             	add    esp,0x10
c00295c4:	83 ec 08             	sub    esp,0x8
c00295c7:	68 58 21 00 00       	push   0x2158
c00295cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295d0:	e8 08 93 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c00295d5:	83 c4 10             	add    esp,0x10
c00295d8:	83 c4 0c             	add    esp,0xc
c00295db:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00295dc <APICTimer::~APICTimer()>:
c00295dc:	83 ec 0c             	sub    esp,0xc
c00295df:	ba 0c d3 02 c0       	mov    edx,0xc002d30c
c00295e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e8:	89 10                	mov    DWORD PTR [eax],edx
c00295ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ee:	83 ec 0c             	sub    esp,0xc
c00295f1:	50                   	push   eax
c00295f2:	e8 69 d2 fe ff       	call   c0016860 <Timer::~Timer()>
c00295f7:	83 c4 10             	add    esp,0x10
c00295fa:	90                   	nop
c00295fb:	83 c4 0c             	add    esp,0xc
c00295fe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029600 <APICTimer::~APICTimer()>:
c0029600:	83 ec 0c             	sub    esp,0xc
c0029603:	83 ec 0c             	sub    esp,0xc
c0029606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002960a:	e8 cd ff ff ff       	call   c00295dc <APICTimer::~APICTimer()>
c002960f:	83 c4 10             	add    esp,0x10
c0029612:	83 ec 08             	sub    esp,0x8
c0029615:	68 60 01 00 00       	push   0x160
c002961a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002961e:	e8 ba 92 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029623:	83 c4 10             	add    esp,0x10
c0029626:	83 c4 0c             	add    esp,0xc
c0029629:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002962a <PIT::~PIT()>:
c002962a:	83 ec 0c             	sub    esp,0xc
c002962d:	ba 5c d3 02 c0       	mov    edx,0xc002d35c
c0029632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029636:	89 10                	mov    DWORD PTR [eax],edx
c0029638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963c:	83 ec 0c             	sub    esp,0xc
c002963f:	50                   	push   eax
c0029640:	e8 1b d2 fe ff       	call   c0016860 <Timer::~Timer()>
c0029645:	83 c4 10             	add    esp,0x10
c0029648:	90                   	nop
c0029649:	83 c4 0c             	add    esp,0xc
c002964c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002964e <PIT::~PIT()>:
c002964e:	83 ec 0c             	sub    esp,0xc
c0029651:	83 ec 0c             	sub    esp,0xc
c0029654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029658:	e8 cd ff ff ff       	call   c002962a <PIT::~PIT()>
c002965d:	83 c4 10             	add    esp,0x10
c0029660:	83 ec 08             	sub    esp,0x8
c0029663:	68 5c 01 00 00       	push   0x15c
c0029668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002966c:	e8 6c 92 fe ff       	call   c00128dd <operator delete(void*, unsigned long)>
c0029671:	83 c4 10             	add    esp,0x10
c0029674:	83 c4 0c             	add    esp,0xc
c0029677:	c3                   	ret    
